{
  "version": 3,
  "sources": ["../../../../../../node_modules/.pnpm/@opentelemetry+core@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/src/trace/suppress-tracing.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+core@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/src/baggage/constants.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+core@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/src/baggage/utils.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+core@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/src/baggage/propagation/W3CBaggagePropagator.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+core@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/src/common/anchored-clock.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+core@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/src/common/attributes.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+core@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/src/common/logging-error-handler.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+core@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/src/common/global-error-handler.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+core@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/src/utils/sampling.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+core@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/src/utils/environment.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+core@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/src/platform/node/environment.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+core@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/src/platform/node/globalThis.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+core@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/src/common/hex-to-binary.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+core@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/src/platform/node/hex-to-base64.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+core@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/src/platform/node/RandomIdGenerator.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+core@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/src/platform/node/performance.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+core@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/src/version.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+core@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/src/platform/node/sdk-info.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+core@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/src/platform/node/timer-util.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+core@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/src/platform/node/index.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+core@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/src/platform/index.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+core@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/src/common/time.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+core@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/src/ExportResult.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+core@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/src/propagation/composite.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+core@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/src/internal/validators.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+core@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/src/trace/TraceState.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+core@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/src/trace/W3CTraceContextPropagator.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+core@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/src/trace/rpc-metadata.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+core@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/src/trace/sampler/AlwaysOffSampler.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+core@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/src/trace/sampler/AlwaysOnSampler.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+core@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/src/trace/sampler/ParentBasedSampler.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+core@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/src/trace/sampler/TraceIdRatioBasedSampler.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+core@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/src/utils/lodash.merge.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+core@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/src/utils/merge.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+core@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/src/utils/timeout.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+core@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/src/utils/url.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+core@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/src/utils/wrap.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+core@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/src/utils/promise.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+core@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/src/utils/callback.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+core@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/src/internal/exporter.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+core@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/src/index.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+sdk-trace-base@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/src/enums.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+sdk-trace-base@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/src/Span.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+sdk-trace-base@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/src/Sampler.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+sdk-trace-base@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/src/sampler/AlwaysOffSampler.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+sdk-trace-base@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/src/sampler/AlwaysOnSampler.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+sdk-trace-base@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/src/sampler/ParentBasedSampler.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+sdk-trace-base@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/src/sampler/TraceIdRatioBasedSampler.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+sdk-trace-base@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/src/config.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+sdk-trace-base@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/src/utility.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+sdk-trace-base@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/src/export/BatchSpanProcessorBase.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+sdk-trace-base@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/src/platform/node/export/BatchSpanProcessor.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+sdk-trace-base@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/src/platform/node/RandomIdGenerator.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+sdk-trace-base@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/src/platform/node/index.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+sdk-trace-base@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/src/platform/index.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+sdk-trace-base@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/src/Tracer.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+resources@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/resources/src/platform/node/default-service-name.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+resources@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/resources/src/platform/node/index.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+resources@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/resources/src/platform/index.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+resources@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/resources/src/Resource.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+resources@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/resources/src/detectors/platform/node/utils.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+resources@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/resources/src/detectors/platform/node/machine-id/execAsync.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+resources@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/resources/src/detectors/platform/node/machine-id/getMachineId-darwin.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+resources@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/resources/src/detectors/platform/node/machine-id/getMachineId-linux.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+resources@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/resources/src/detectors/platform/node/machine-id/getMachineId-bsd.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+resources@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/resources/src/detectors/platform/node/machine-id/getMachineId-win.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+resources@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/resources/src/detectors/platform/node/machine-id/getMachineId-unsupported.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+resources@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/resources/src/detectors/platform/node/machine-id/getMachineId.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+resources@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/resources/src/detectors/platform/node/HostDetectorSync.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+resources@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/resources/src/detectors/platform/node/HostDetector.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+resources@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/resources/src/detectors/platform/node/OSDetectorSync.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+resources@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/resources/src/detectors/platform/node/OSDetector.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+resources@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/resources/src/detectors/platform/node/ProcessDetectorSync.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+resources@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/resources/src/detectors/platform/node/ProcessDetector.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+resources@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/resources/src/detectors/platform/node/ServiceInstanceIdDetectorSync.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+resources@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/resources/src/detectors/platform/node/index.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+resources@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/resources/src/detectors/platform/index.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+resources@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/resources/src/detectors/BrowserDetectorSync.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+resources@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/resources/src/detectors/BrowserDetector.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+resources@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/resources/src/detectors/EnvDetectorSync.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+resources@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/resources/src/detectors/EnvDetector.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+resources@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/resources/src/detectors/index.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+resources@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/resources/src/utils.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+resources@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/resources/src/detect-resources.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+resources@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/resources/src/index.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+sdk-trace-base@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/src/MultiSpanProcessor.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+sdk-trace-base@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/src/export/NoopSpanProcessor.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+sdk-trace-base@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/src/BasicTracerProvider.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+sdk-trace-base@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/src/export/ConsoleSpanExporter.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+sdk-trace-base@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/src/export/InMemorySpanExporter.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+sdk-trace-base@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/src/export/SimpleSpanProcessor.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+sdk-trace-base@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/src/index.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+otlp-exporter-base@0.52.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/otlp-exporter-base/src/util.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+otlp-exporter-base@0.52.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/otlp-exporter-base/src/OTLPExporterBase.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+otlp-exporter-base@0.52.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/otlp-exporter-base/src/platform/node/types.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+otlp-exporter-base@0.52.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/otlp-exporter-base/src/types.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+otlp-exporter-base@0.52.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/otlp-exporter-base/src/platform/node/util.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+otlp-exporter-base@0.52.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/otlp-exporter-base/src/platform/node/OTLPExporterNodeBase.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+otlp-exporter-base@0.52.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/otlp-exporter-base/src/platform/node/index.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+otlp-exporter-base@0.52.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/otlp-exporter-base/src/platform/browser/util.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+otlp-exporter-base@0.52.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/otlp-exporter-base/src/platform/browser/OTLPExporterBrowserBase.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+otlp-exporter-base@0.52.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/otlp-exporter-base/src/platform/browser/index.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+otlp-exporter-base@0.52.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/otlp-exporter-base/src/platform/index.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+otlp-exporter-base@0.52.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/otlp-exporter-base/src/index.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+otlp-transformer@0.52.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/otlp-transformer/src/common/index.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+otlp-transformer@0.52.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/otlp-transformer/src/trace/types.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+otlp-transformer@0.52.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/otlp-transformer/src/common/internal.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+otlp-transformer@0.52.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/otlp-transformer/src/trace/internal.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+otlp-transformer@0.52.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/otlp-transformer/src/resource/internal.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+otlp-transformer@0.52.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/otlp-transformer/src/trace/index.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-metrics/src/export/AggregationTemporality.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-metrics/src/export/MetricData.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-metrics/src/utils.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-metrics/src/aggregator/types.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-metrics/src/aggregator/Drop.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-metrics/src/InstrumentDescriptor.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-metrics/src/aggregator/Histogram.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-metrics/src/aggregator/exponential-histogram/Buckets.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-metrics/src/aggregator/exponential-histogram/mapping/ieee754.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-metrics/src/aggregator/exponential-histogram/util.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-metrics/src/aggregator/exponential-histogram/mapping/types.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-metrics/src/aggregator/exponential-histogram/mapping/ExponentMapping.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-metrics/src/aggregator/exponential-histogram/mapping/LogarithmMapping.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-metrics/src/aggregator/exponential-histogram/mapping/getMapping.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-metrics/src/aggregator/ExponentialHistogram.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-metrics/src/aggregator/LastValue.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-metrics/src/aggregator/Sum.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-metrics/src/aggregator/index.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-metrics/src/view/Aggregation.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-metrics/src/export/AggregationSelector.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-metrics/src/export/MetricReader.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-metrics/src/export/PeriodicExportingMetricReader.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-metrics/src/export/InMemoryMetricExporter.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-metrics/src/export/ConsoleMetricExporter.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-metrics/src/view/ViewRegistry.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-metrics/src/Instruments.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-metrics/src/Meter.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-metrics/src/state/MetricStorage.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-metrics/src/state/HashMap.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-metrics/src/state/DeltaMetricProcessor.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-metrics/src/state/TemporalMetricProcessor.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-metrics/src/state/AsyncMetricStorage.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-metrics/src/view/RegistrationConflicts.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-metrics/src/state/MetricStorageRegistry.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-metrics/src/state/MultiWritableMetricStorage.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-metrics/src/ObservableResult.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-metrics/src/state/ObservableRegistry.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-metrics/src/state/SyncMetricStorage.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-metrics/src/view/AttributesProcessor.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-metrics/src/state/MeterSharedState.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-metrics/src/state/MeterProviderSharedState.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-metrics/src/state/MetricCollector.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-metrics/src/MeterProvider.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-metrics/src/view/Predicate.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-metrics/src/view/InstrumentSelector.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-metrics/src/view/MeterSelector.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-metrics/src/view/View.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-metrics/src/index.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+otlp-transformer@0.52.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/otlp-transformer/src/metrics/internal.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+otlp-transformer@0.52.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/otlp-transformer/src/metrics/index.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+otlp-transformer@0.52.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/otlp-transformer/src/logs/index.ts", "../../../../../../node_modules/.pnpm/@protobufjs+aspromise@1.1.2/node_modules/@protobufjs/aspromise/index.js", "../../../../../../node_modules/.pnpm/@protobufjs+base64@1.1.2/node_modules/@protobufjs/base64/index.js", "../../../../../../node_modules/.pnpm/@protobufjs+eventemitter@1.1.0/node_modules/@protobufjs/eventemitter/index.js", "../../../../../../node_modules/.pnpm/@protobufjs+float@1.0.2/node_modules/@protobufjs/float/index.js", "../../../../../../node_modules/.pnpm/@protobufjs+inquire@1.1.0/node_modules/@protobufjs/inquire/index.js", "../../../../../../node_modules/.pnpm/@protobufjs+utf8@1.1.0/node_modules/@protobufjs/utf8/index.js", "../../../../../../node_modules/.pnpm/@protobufjs+pool@1.1.0/node_modules/@protobufjs/pool/index.js", "../../../../../../node_modules/.pnpm/protobufjs@7.5.3/node_modules/protobufjs/src/util/longbits.js", "../../../../../../node_modules/.pnpm/protobufjs@7.5.3/node_modules/protobufjs/src/util/minimal.js", "../../../../../../node_modules/.pnpm/protobufjs@7.5.3/node_modules/protobufjs/src/writer.js", "../../../../../../node_modules/.pnpm/protobufjs@7.5.3/node_modules/protobufjs/src/writer_buffer.js", "../../../../../../node_modules/.pnpm/protobufjs@7.5.3/node_modules/protobufjs/src/reader.js", "../../../../../../node_modules/.pnpm/protobufjs@7.5.3/node_modules/protobufjs/src/reader_buffer.js", "../../../../../../node_modules/.pnpm/protobufjs@7.5.3/node_modules/protobufjs/src/rpc/service.js", "../../../../../../node_modules/.pnpm/protobufjs@7.5.3/node_modules/protobufjs/src/rpc.js", "../../../../../../node_modules/.pnpm/protobufjs@7.5.3/node_modules/protobufjs/src/roots.js", "../../../../../../node_modules/.pnpm/protobufjs@7.5.3/node_modules/protobufjs/src/index-minimal.js", "../../../../../../node_modules/.pnpm/protobufjs@7.5.3/node_modules/protobufjs/minimal.js", "../../../../../../node_modules/.pnpm/@opentelemetry+otlp-transformer@0.52.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/otlp-transformer/src/generated/root.js", "../../../../../../node_modules/.pnpm/@opentelemetry+otlp-transformer@0.52.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/otlp-transformer/src/protobuf/serializers.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+otlp-transformer@0.52.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/otlp-transformer/src/json/serializers.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+otlp-transformer@0.52.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/otlp-transformer/src/index.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+exporter-logs-otlp-http@0.52.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/exporter-logs-otlp-http/src/platform/config.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+exporter-logs-otlp-http@0.52.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/exporter-logs-otlp-http/src/version.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+exporter-logs-otlp-http@0.52.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/exporter-logs-otlp-http/src/platform/node/OTLPLogExporter.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+exporter-logs-otlp-http@0.52.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/exporter-logs-otlp-http/src/platform/node/index.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+exporter-logs-otlp-http@0.52.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/exporter-logs-otlp-http/src/platform/index.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+exporter-logs-otlp-http@0.52.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/exporter-logs-otlp-http/src/index.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+exporter-trace-otlp-http@0.52.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/exporter-trace-otlp-http/src/version.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+exporter-trace-otlp-http@0.52.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/exporter-trace-otlp-http/src/platform/node/OTLPTraceExporter.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+exporter-trace-otlp-http@0.52.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/exporter-trace-otlp-http/src/platform/node/index.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+exporter-trace-otlp-http@0.52.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/exporter-trace-otlp-http/src/platform/index.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+exporter-trace-otlp-http@0.52.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/exporter-trace-otlp-http/src/index.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+instrumentation@0.52.1_@opentelemetry+api@1.9.0_supports-color@10.0.0/node_modules/@opentelemetry/instrumentation/src/autoLoaderUtils.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+instrumentation@0.52.1_@opentelemetry+api@1.9.0_supports-color@10.0.0/node_modules/@opentelemetry/instrumentation/src/autoLoader.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+instrumentation@0.52.1_@opentelemetry+api@1.9.0_supports-color@10.0.0/node_modules/@opentelemetry/instrumentation/src/instrumentation.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+instrumentation@0.52.1_@opentelemetry+api@1.9.0_supports-color@10.0.0/node_modules/@opentelemetry/instrumentation/src/platform/node/ModuleNameTrie.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+instrumentation@0.52.1_@opentelemetry+api@1.9.0_supports-color@10.0.0/node_modules/@opentelemetry/instrumentation/src/platform/node/RequireInTheMiddleSingleton.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+instrumentation@0.52.1_@opentelemetry+api@1.9.0_supports-color@10.0.0/node_modules/@opentelemetry/instrumentation/src/utils.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+instrumentation@0.52.1_@opentelemetry+api@1.9.0_supports-color@10.0.0/node_modules/@opentelemetry/instrumentation/src/platform/node/instrumentation.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+instrumentation@0.52.1_@opentelemetry+api@1.9.0_supports-color@10.0.0/node_modules/@opentelemetry/instrumentation/src/platform/node/normalize.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+instrumentation@0.52.1_@opentelemetry+api@1.9.0_supports-color@10.0.0/node_modules/@opentelemetry/instrumentation/src/platform/node/index.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+instrumentation@0.52.1_@opentelemetry+api@1.9.0_supports-color@10.0.0/node_modules/@opentelemetry/instrumentation/src/platform/index.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+instrumentation@0.52.1_@opentelemetry+api@1.9.0_supports-color@10.0.0/node_modules/@opentelemetry/instrumentation/src/instrumentationNodeModuleDefinition.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+instrumentation@0.52.1_@opentelemetry+api@1.9.0_supports-color@10.0.0/node_modules/@opentelemetry/instrumentation/src/instrumentationNodeModuleFile.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+instrumentation@0.52.1_@opentelemetry+api@1.9.0_supports-color@10.0.0/node_modules/@opentelemetry/instrumentation/src/index.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+sdk-logs@0.52.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-logs/src/LogRecord.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+sdk-logs@0.52.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-logs/src/Logger.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+sdk-logs@0.52.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-logs/src/config.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+sdk-logs@0.52.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-logs/src/MultiLogRecordProcessor.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+sdk-logs@0.52.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-logs/src/export/NoopLogRecordProcessor.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+sdk-logs@0.52.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-logs/src/internal/LoggerProviderSharedState.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+sdk-logs@0.52.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-logs/src/LoggerProvider.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+sdk-logs@0.52.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-logs/src/export/ConsoleLogRecordExporter.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+sdk-logs@0.52.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-logs/src/export/SimpleLogRecordProcessor.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+sdk-logs@0.52.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-logs/src/export/InMemoryLogRecordExporter.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+sdk-logs@0.52.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-logs/src/export/BatchLogRecordProcessorBase.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+sdk-logs@0.52.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-logs/src/platform/node/export/BatchLogRecordProcessor.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+sdk-logs@0.52.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-logs/src/platform/node/index.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+sdk-logs@0.52.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-logs/src/platform/index.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+sdk-logs@0.52.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-logs/src/index.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+context-async-hooks@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/context-async-hooks/src/AbstractAsyncHooksContextManager.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+context-async-hooks@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/context-async-hooks/src/AsyncHooksContextManager.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+context-async-hooks@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/context-async-hooks/src/AsyncLocalStorageContextManager.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+context-async-hooks@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/context-async-hooks/src/index.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+propagator-b3@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/propagator-b3/src/common.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+propagator-b3@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/propagator-b3/src/constants.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+propagator-b3@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/propagator-b3/src/B3MultiPropagator.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+propagator-b3@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/propagator-b3/src/B3SinglePropagator.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+propagator-b3@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/propagator-b3/src/types.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+propagator-b3@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/propagator-b3/src/B3Propagator.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+propagator-b3@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/propagator-b3/src/index.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+propagator-jaeger@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/propagator-jaeger/src/JaegerPropagator.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+propagator-jaeger@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/propagator-jaeger/src/index.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+sdk-trace-node@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-node/src/NodeTracerProvider.ts", "../../../../../../node_modules/.pnpm/@opentelemetry+sdk-trace-node@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-node/src/index.ts", "../../../../../../node_modules/.pnpm/source-map@0.6.1/node_modules/source-map/lib/base64.js", "../../../../../../node_modules/.pnpm/source-map@0.6.1/node_modules/source-map/lib/base64-vlq.js", "../../../../../../node_modules/.pnpm/source-map@0.6.1/node_modules/source-map/lib/util.js", "../../../../../../node_modules/.pnpm/source-map@0.6.1/node_modules/source-map/lib/array-set.js", "../../../../../../node_modules/.pnpm/source-map@0.6.1/node_modules/source-map/lib/mapping-list.js", "../../../../../../node_modules/.pnpm/source-map@0.6.1/node_modules/source-map/lib/source-map-generator.js", "../../../../../../node_modules/.pnpm/source-map@0.6.1/node_modules/source-map/lib/binary-search.js", "../../../../../../node_modules/.pnpm/source-map@0.6.1/node_modules/source-map/lib/quick-sort.js", "../../../../../../node_modules/.pnpm/source-map@0.6.1/node_modules/source-map/lib/source-map-consumer.js", "../../../../../../node_modules/.pnpm/source-map@0.6.1/node_modules/source-map/lib/source-node.js", "../../../../../../node_modules/.pnpm/source-map@0.6.1/node_modules/source-map/source-map.js", "../../../../../../node_modules/.pnpm/buffer-from@1.1.2/node_modules/buffer-from/index.js", "../../../../../../node_modules/.pnpm/source-map-support@0.5.21/node_modules/source-map-support/source-map-support.js", "../../../../../../node_modules/.pnpm/@trigger.dev+core@4.0.0-v4-beta.21_supports-color@10.0.0/node_modules/@trigger.dev/core/src/v3/otel/tracingSDK.ts", "../../../../../../node_modules/.pnpm/@trigger.dev+core@4.0.0-v4-beta.21_supports-color@10.0.0/node_modules/@trigger.dev/core/src/v3/taskContext/otelProcessors.ts", "../../../../../../node_modules/.pnpm/@trigger.dev+core@4.0.0-v4-beta.21_supports-color@10.0.0/node_modules/@trigger.dev/core/src/v3/otel/index.ts", "../../../../../../node_modules/.pnpm/@trigger.dev+core@4.0.0-v4-beta.21_supports-color@10.0.0/node_modules/@trigger.dev/core/src/v3/workers/taskExecutor.ts", "../../../../../../node_modules/.pnpm/@trigger.dev+core@4.0.0-v4-beta.21_supports-color@10.0.0/node_modules/@trigger.dev/core/src/v3/clock/preciseWallClock.ts", "../../../../../../node_modules/.pnpm/@trigger.dev+core@4.0.0-v4-beta.21_supports-color@10.0.0/node_modules/@trigger.dev/core/src/v3/consoleInterceptor.ts", "../../../../../../node_modules/.pnpm/@trigger.dev+core@4.0.0-v4-beta.21_supports-color@10.0.0/node_modules/@trigger.dev/core/src/v3/resource-catalog/standardResourceCatalog.ts", "../../../../../../node_modules/.pnpm/@trigger.dev+core@4.0.0-v4-beta.21_supports-color@10.0.0/node_modules/@trigger.dev/core/src/v3/usage/devUsageManager.ts", "../../../../../../node_modules/.pnpm/@trigger.dev+core@4.0.0-v4-beta.21_supports-color@10.0.0/node_modules/@trigger.dev/core/src/v3/clock/clock.ts", "../../../../../../node_modules/.pnpm/@trigger.dev+core@4.0.0-v4-beta.21_supports-color@10.0.0/node_modules/@trigger.dev/core/src/v3/timeout/usageTimeoutManager.ts", "../../../../../../node_modules/.pnpm/@trigger.dev+core@4.0.0-v4-beta.21_supports-color@10.0.0/node_modules/@trigger.dev/core/src/v3/timeout/types.ts", "../../../../../../node_modules/.pnpm/@trigger.dev+core@4.0.0-v4-beta.21_supports-color@10.0.0/node_modules/@trigger.dev/core/src/v3/runMetadata/manager.ts", "../../../../../../node_modules/.pnpm/dequal@2.0.3/node_modules/dequal/lite/index.mjs", "../../../../../../node_modules/.pnpm/@trigger.dev+core@4.0.0-v4-beta.21_supports-color@10.0.0/node_modules/@trigger.dev/core/src/v3/runMetadata/metadataStream.ts", "../../../../../../node_modules/.pnpm/@trigger.dev+core@4.0.0-v4-beta.21_supports-color@10.0.0/node_modules/@trigger.dev/core/src/v3/waitUntil/manager.ts", "../../../../../../node_modules/.pnpm/@trigger.dev+core@4.0.0-v4-beta.21_supports-color@10.0.0/node_modules/@trigger.dev/core/src/v3/runtime/sharedRuntimeManager.ts", "../../../../../../node_modules/.pnpm/@trigger.dev+core@4.0.0-v4-beta.21_supports-color@10.0.0/node_modules/@trigger.dev/core/src/v3/runtime/preventMultipleWaits.ts", "../../../../../../node_modules/.pnpm/@trigger.dev+core@4.0.0-v4-beta.21_supports-color@10.0.0/node_modules/@trigger.dev/core/src/v3/workers/populateEnv.ts", "../../../../../../node_modules/.pnpm/@trigger.dev+core@4.0.0-v4-beta.21_supports-color@10.0.0/node_modules/@trigger.dev/core/src/v3/workers/index.ts", "../../../../../../node_modules/.pnpm/@trigger.dev+core@4.0.0-v4-beta.21_supports-color@10.0.0/node_modules/@trigger.dev/core/src/v3/usage/prodUsageManager.ts", "../../../../../../node_modules/.pnpm/@trigger.dev+core@4.0.0-v4-beta.21_supports-color@10.0.0/node_modules/@trigger.dev/core/src/v3/usage/usageClient.ts", "../../../../../../node_modules/.pnpm/@trigger.dev+core@4.0.0-v4-beta.21_supports-color@10.0.0/node_modules/@trigger.dev/core/src/v3/workers/warmStartClient.ts", "../../../../../../node_modules/.pnpm/@trigger.dev+core@4.0.0-v4-beta.21_supports-color@10.0.0/node_modules/@trigger.dev/core/src/v3/apps/backoff.ts", "../../../../../../node_modules/.pnpm/@trigger.dev+core@4.0.0-v4-beta.21_supports-color@10.0.0/node_modules/@trigger.dev/core/src/v3/zodMessageHandler.ts", "../../../../../../node_modules/.pnpm/trigger.dev@4.0.0-v4-beta.21_typescript@5.8.3/node_modules/trigger.dev/src/utilities/normalizeImportPath.ts"],
  "sourcesContent": ["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Context, createContextKey } from '@opentelemetry/api';\n\nconst SUPPRESS_TRACING_KEY = createContextKey(\n  'OpenTelemetry SDK Context Key SUPPRESS_TRACING'\n);\n\nexport function suppressTracing(context: Context): Context {\n  return context.setValue(SUPPRESS_TRACING_KEY, true);\n}\n\nexport function unsuppressTracing(context: Context): Context {\n  return context.deleteValue(SUPPRESS_TRACING_KEY);\n}\n\nexport function isTracingSuppressed(context: Context): boolean {\n  return context.getValue(SUPPRESS_TRACING_KEY) === true;\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const BAGGAGE_KEY_PAIR_SEPARATOR = '=';\nexport const BAGGAGE_PROPERTIES_SEPARATOR = ';';\nexport const BAGGAGE_ITEMS_SEPARATOR = ',';\n\n// Name of the http header used to propagate the baggage\nexport const BAGGAGE_HEADER = 'baggage';\n// Maximum number of name-value pairs allowed by w3c spec\nexport const BAGGAGE_MAX_NAME_VALUE_PAIRS = 180;\n// Maximum number of bytes per a single name-value pair allowed by w3c spec\nexport const BAGGAGE_MAX_PER_NAME_VALUE_PAIRS = 4096;\n// Maximum total length of all name-value pairs allowed by w3c spec\nexport const BAGGAGE_MAX_TOTAL_LENGTH = 8192;\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  Baggage,\n  BaggageEntryMetadata,\n  baggageEntryMetadataFromString,\n} from '@opentelemetry/api';\nimport {\n  BAGGAGE_ITEMS_SEPARATOR,\n  BAGGAGE_PROPERTIES_SEPARATOR,\n  BAGGAGE_KEY_PAIR_SEPARATOR,\n  BAGGAGE_MAX_TOTAL_LENGTH,\n} from './constants';\n\ntype ParsedBaggageKeyValue = {\n  key: string;\n  value: string;\n  metadata: BaggageEntryMetadata | undefined;\n};\n\nexport function serializeKeyPairs(keyPairs: string[]): string {\n  return keyPairs.reduce((hValue: string, current: string) => {\n    const value = `${hValue}${\n      hValue !== '' ? BAGGAGE_ITEMS_SEPARATOR : ''\n    }${current}`;\n    return value.length > BAGGAGE_MAX_TOTAL_LENGTH ? hValue : value;\n  }, '');\n}\n\nexport function getKeyPairs(baggage: Baggage): string[] {\n  return baggage.getAllEntries().map(([key, value]) => {\n    let entry = `${encodeURIComponent(key)}=${encodeURIComponent(value.value)}`;\n\n    // include opaque metadata if provided\n    // NOTE: we intentionally don't URI-encode the metadata - that responsibility falls on the metadata implementation\n    if (value.metadata !== undefined) {\n      entry += BAGGAGE_PROPERTIES_SEPARATOR + value.metadata.toString();\n    }\n\n    return entry;\n  });\n}\n\nexport function parsePairKeyValue(\n  entry: string\n): ParsedBaggageKeyValue | undefined {\n  const valueProps = entry.split(BAGGAGE_PROPERTIES_SEPARATOR);\n  if (valueProps.length <= 0) return;\n  const keyPairPart = valueProps.shift();\n  if (!keyPairPart) return;\n  const separatorIndex = keyPairPart.indexOf(BAGGAGE_KEY_PAIR_SEPARATOR);\n  if (separatorIndex <= 0) return;\n  const key = decodeURIComponent(\n    keyPairPart.substring(0, separatorIndex).trim()\n  );\n  const value = decodeURIComponent(\n    keyPairPart.substring(separatorIndex + 1).trim()\n  );\n  let metadata;\n  if (valueProps.length > 0) {\n    metadata = baggageEntryMetadataFromString(\n      valueProps.join(BAGGAGE_PROPERTIES_SEPARATOR)\n    );\n  }\n  return { key, value, metadata };\n}\n\n/**\n * Parse a string serialized in the baggage HTTP Format (without metadata):\n * https://github.com/w3c/baggage/blob/master/baggage/HTTP_HEADER_FORMAT.md\n */\nexport function parseKeyPairsIntoRecord(\n  value?: string\n): Record<string, string> {\n  if (typeof value !== 'string' || value.length === 0) return {};\n  return value\n    .split(BAGGAGE_ITEMS_SEPARATOR)\n    .map(entry => {\n      return parsePairKeyValue(entry);\n    })\n    .filter(keyPair => keyPair !== undefined && keyPair.value.length > 0)\n    .reduce<Record<string, string>>((headers, keyPair) => {\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      headers[keyPair!.key] = keyPair!.value;\n      return headers;\n    }, {});\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  BaggageEntry,\n  Context,\n  propagation,\n  TextMapGetter,\n  TextMapPropagator,\n  TextMapSetter,\n} from '@opentelemetry/api';\n\nimport { isTracingSuppressed } from '../../trace/suppress-tracing';\nimport {\n  BAGGAGE_HEADER,\n  BAGGAGE_ITEMS_SEPARATOR,\n  BAGGAGE_MAX_NAME_VALUE_PAIRS,\n  BAGGAGE_MAX_PER_NAME_VALUE_PAIRS,\n} from '../constants';\nimport { getKeyPairs, parsePairKeyValue, serializeKeyPairs } from '../utils';\n\n/**\n * Propagates {@link Baggage} through Context format propagation.\n *\n * Based on the Baggage specification:\n * https://w3c.github.io/baggage/\n */\nexport class W3CBaggagePropagator implements TextMapPropagator {\n  inject(context: Context, carrier: unknown, setter: TextMapSetter): void {\n    const baggage = propagation.getBaggage(context);\n    if (!baggage || isTracingSuppressed(context)) return;\n    const keyPairs = getKeyPairs(baggage)\n      .filter((pair: string) => {\n        return pair.length <= BAGGAGE_MAX_PER_NAME_VALUE_PAIRS;\n      })\n      .slice(0, BAGGAGE_MAX_NAME_VALUE_PAIRS);\n    const headerValue = serializeKeyPairs(keyPairs);\n    if (headerValue.length > 0) {\n      setter.set(carrier, BAGGAGE_HEADER, headerValue);\n    }\n  }\n\n  extract(context: Context, carrier: unknown, getter: TextMapGetter): Context {\n    const headerValue = getter.get(carrier, BAGGAGE_HEADER);\n    const baggageString = Array.isArray(headerValue)\n      ? headerValue.join(BAGGAGE_ITEMS_SEPARATOR)\n      : headerValue;\n    if (!baggageString) return context;\n    const baggage: Record<string, BaggageEntry> = {};\n    if (baggageString.length === 0) {\n      return context;\n    }\n    const pairs = baggageString.split(BAGGAGE_ITEMS_SEPARATOR);\n    pairs.forEach(entry => {\n      const keyPair = parsePairKeyValue(entry);\n      if (keyPair) {\n        const baggageEntry: BaggageEntry = { value: keyPair.value };\n        if (keyPair.metadata) {\n          baggageEntry.metadata = keyPair.metadata;\n        }\n        baggage[keyPair.key] = baggageEntry;\n      }\n    });\n    if (Object.entries(baggage).length === 0) {\n      return context;\n    }\n    return propagation.setBaggage(context, propagation.createBaggage(baggage));\n  }\n\n  fields(): string[] {\n    return [BAGGAGE_HEADER];\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport interface Clock {\n  /**\n   * Return the current time in milliseconds from some epoch such as the Unix epoch or process start\n   */\n  now(): number;\n}\n\n/**\n * A utility for returning wall times anchored to a given point in time. Wall time measurements will\n * not be taken from the system, but instead are computed by adding a monotonic clock time\n * to the anchor point.\n *\n * This is needed because the system time can change and result in unexpected situations like\n * spans ending before they are started. Creating an anchored clock for each local root span\n * ensures that span timings and durations are accurate while preventing span times from drifting\n * too far from the system clock.\n *\n * Only creating an anchored clock once per local trace ensures span times are correct relative\n * to each other. For example, a child span will never have a start time before its parent even\n * if the system clock is corrected during the local trace.\n *\n * Heavily inspired by the OTel Java anchored clock\n * https://github.com/open-telemetry/opentelemetry-java/blob/main/sdk/trace/src/main/java/io/opentelemetry/sdk/trace/AnchoredClock.java\n */\nexport class AnchoredClock implements Clock {\n  private _monotonicClock: Clock;\n  private _epochMillis: number;\n  private _performanceMillis: number;\n\n  /**\n   * Create a new AnchoredClock anchored to the current time returned by systemClock.\n   *\n   * @param systemClock should be a clock that returns the number of milliseconds since January 1 1970 such as Date\n   * @param monotonicClock should be a clock that counts milliseconds monotonically such as window.performance or perf_hooks.performance\n   */\n  public constructor(systemClock: Clock, monotonicClock: Clock) {\n    this._monotonicClock = monotonicClock;\n    this._epochMillis = systemClock.now();\n    this._performanceMillis = monotonicClock.now();\n  }\n\n  /**\n   * Returns the current time by adding the number of milliseconds since the\n   * AnchoredClock was created to the creation epoch time\n   */\n  public now(): number {\n    const delta = this._monotonicClock.now() - this._performanceMillis;\n    return this._epochMillis + delta;\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { diag, SpanAttributeValue, SpanAttributes } from '@opentelemetry/api';\n\nexport function sanitizeAttributes(attributes: unknown): SpanAttributes {\n  const out: SpanAttributes = {};\n\n  if (typeof attributes !== 'object' || attributes == null) {\n    return out;\n  }\n\n  for (const [key, val] of Object.entries(attributes)) {\n    if (!isAttributeKey(key)) {\n      diag.warn(`Invalid attribute key: ${key}`);\n      continue;\n    }\n    if (!isAttributeValue(val)) {\n      diag.warn(`Invalid attribute value set for key: ${key}`);\n      continue;\n    }\n    if (Array.isArray(val)) {\n      out[key] = val.slice();\n    } else {\n      out[key] = val;\n    }\n  }\n\n  return out;\n}\n\nexport function isAttributeKey(key: unknown): key is string {\n  return typeof key === 'string' && key.length > 0;\n}\n\nexport function isAttributeValue(val: unknown): val is SpanAttributeValue {\n  if (val == null) {\n    return true;\n  }\n\n  if (Array.isArray(val)) {\n    return isHomogeneousAttributeValueArray(val);\n  }\n\n  return isValidPrimitiveAttributeValue(val);\n}\n\nfunction isHomogeneousAttributeValueArray(arr: unknown[]): boolean {\n  let type: string | undefined;\n\n  for (const element of arr) {\n    // null/undefined elements are allowed\n    if (element == null) continue;\n\n    if (!type) {\n      if (isValidPrimitiveAttributeValue(element)) {\n        type = typeof element;\n        continue;\n      }\n      // encountered an invalid primitive\n      return false;\n    }\n\n    if (typeof element === type) {\n      continue;\n    }\n\n    return false;\n  }\n\n  return true;\n}\n\nfunction isValidPrimitiveAttributeValue(val: unknown): boolean {\n  switch (typeof val) {\n    case 'number':\n    case 'boolean':\n    case 'string':\n      return true;\n  }\n\n  return false;\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { diag, Exception } from '@opentelemetry/api';\nimport { ErrorHandler } from './types';\n\n/**\n * Returns a function that logs an error using the provided logger, or a\n * console logger if one was not provided.\n */\nexport function loggingErrorHandler(): ErrorHandler {\n  return (ex: Exception) => {\n    diag.error(stringifyException(ex));\n  };\n}\n\n/**\n * Converts an exception into a string representation\n * @param {Exception} ex\n */\nfunction stringifyException(ex: Exception | string): string {\n  if (typeof ex === 'string') {\n    return ex;\n  } else {\n    return JSON.stringify(flattenException(ex));\n  }\n}\n\n/**\n * Flattens an exception into key-value pairs by traversing the prototype chain\n * and coercing values to strings. Duplicate properties will not be overwritten;\n * the first insert wins.\n */\nfunction flattenException(ex: Exception): Record<string, string> {\n  const result = {} as Record<string, string>;\n  let current = ex;\n\n  while (current !== null) {\n    Object.getOwnPropertyNames(current).forEach(propertyName => {\n      if (result[propertyName]) return;\n      const value = current[propertyName as keyof typeof current];\n      if (value) {\n        result[propertyName] = String(value);\n      }\n    });\n    current = Object.getPrototypeOf(current);\n  }\n\n  return result;\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Exception } from '@opentelemetry/api';\nimport { loggingErrorHandler } from './logging-error-handler';\nimport { ErrorHandler } from './types';\n\n/** The global error handler delegate */\nlet delegateHandler = loggingErrorHandler();\n\n/**\n * Set the global error handler\n * @param {ErrorHandler} handler\n */\nexport function setGlobalErrorHandler(handler: ErrorHandler): void {\n  delegateHandler = handler;\n}\n\n/**\n * Return the global error handler\n * @param {Exception} ex\n */\nexport function globalErrorHandler(ex: Exception): void {\n  try {\n    delegateHandler(ex);\n  } catch {} // eslint-disable-line no-empty\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport enum TracesSamplerValues {\n  AlwaysOff = 'always_off',\n  AlwaysOn = 'always_on',\n  ParentBasedAlwaysOff = 'parentbased_always_off',\n  ParentBasedAlwaysOn = 'parentbased_always_on',\n  ParentBasedTraceIdRatio = 'parentbased_traceidratio',\n  TraceIdRatio = 'traceidratio',\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DiagLogLevel } from '@opentelemetry/api';\nimport { TracesSamplerValues } from './sampling';\n\nconst DEFAULT_LIST_SEPARATOR = ',';\n\n/**\n * Environment interface to define all names\n */\n\nconst ENVIRONMENT_BOOLEAN_KEYS = ['OTEL_SDK_DISABLED'] as const;\n\ntype ENVIRONMENT_BOOLEANS = {\n  [K in (typeof ENVIRONMENT_BOOLEAN_KEYS)[number]]?: boolean;\n};\n\nfunction isEnvVarABoolean(key: unknown): key is keyof ENVIRONMENT_BOOLEANS {\n  return (\n    ENVIRONMENT_BOOLEAN_KEYS.indexOf(key as keyof ENVIRONMENT_BOOLEANS) > -1\n  );\n}\n\nconst ENVIRONMENT_NUMBERS_KEYS = [\n  'OTEL_BSP_EXPORT_TIMEOUT',\n  'OTEL_BSP_MAX_EXPORT_BATCH_SIZE',\n  'OTEL_BSP_MAX_QUEUE_SIZE',\n  'OTEL_BSP_SCHEDULE_DELAY',\n  'OTEL_BLRP_EXPORT_TIMEOUT',\n  'OTEL_BLRP_MAX_EXPORT_BATCH_SIZE',\n  'OTEL_BLRP_MAX_QUEUE_SIZE',\n  'OTEL_BLRP_SCHEDULE_DELAY',\n  'OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT',\n  'OTEL_ATTRIBUTE_COUNT_LIMIT',\n  'OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT',\n  'OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT',\n  'OTEL_LOGRECORD_ATTRIBUTE_VALUE_LENGTH_LIMIT',\n  'OTEL_LOGRECORD_ATTRIBUTE_COUNT_LIMIT',\n  'OTEL_SPAN_EVENT_COUNT_LIMIT',\n  'OTEL_SPAN_LINK_COUNT_LIMIT',\n  'OTEL_SPAN_ATTRIBUTE_PER_EVENT_COUNT_LIMIT',\n  'OTEL_SPAN_ATTRIBUTE_PER_LINK_COUNT_LIMIT',\n  'OTEL_EXPORTER_OTLP_TIMEOUT',\n  'OTEL_EXPORTER_OTLP_TRACES_TIMEOUT',\n  'OTEL_EXPORTER_OTLP_METRICS_TIMEOUT',\n  'OTEL_EXPORTER_OTLP_LOGS_TIMEOUT',\n  'OTEL_EXPORTER_JAEGER_AGENT_PORT',\n] as const;\n\ntype ENVIRONMENT_NUMBERS = {\n  [K in (typeof ENVIRONMENT_NUMBERS_KEYS)[number]]?: number;\n};\n\nfunction isEnvVarANumber(key: unknown): key is keyof ENVIRONMENT_NUMBERS {\n  return (\n    ENVIRONMENT_NUMBERS_KEYS.indexOf(key as keyof ENVIRONMENT_NUMBERS) > -1\n  );\n}\n\nconst ENVIRONMENT_LISTS_KEYS = [\n  'OTEL_NO_PATCH_MODULES',\n  'OTEL_PROPAGATORS',\n] as const;\n\ntype ENVIRONMENT_LISTS = {\n  [K in (typeof ENVIRONMENT_LISTS_KEYS)[number]]?: string[];\n};\n\nfunction isEnvVarAList(key: unknown): key is keyof ENVIRONMENT_LISTS {\n  return ENVIRONMENT_LISTS_KEYS.indexOf(key as keyof ENVIRONMENT_LISTS) > -1;\n}\n\nexport type ENVIRONMENT = {\n  CONTAINER_NAME?: string;\n  ECS_CONTAINER_METADATA_URI_V4?: string;\n  ECS_CONTAINER_METADATA_URI?: string;\n  HOSTNAME?: string;\n  KUBERNETES_SERVICE_HOST?: string;\n  NAMESPACE?: string;\n  OTEL_EXPORTER_JAEGER_AGENT_HOST?: string;\n  OTEL_EXPORTER_JAEGER_ENDPOINT?: string;\n  OTEL_EXPORTER_JAEGER_PASSWORD?: string;\n  OTEL_EXPORTER_JAEGER_USER?: string;\n  OTEL_EXPORTER_OTLP_ENDPOINT?: string;\n  OTEL_EXPORTER_OTLP_TRACES_ENDPOINT?: string;\n  OTEL_EXPORTER_OTLP_METRICS_ENDPOINT?: string;\n  OTEL_EXPORTER_OTLP_LOGS_ENDPOINT?: string;\n  OTEL_EXPORTER_OTLP_HEADERS?: string;\n  OTEL_EXPORTER_OTLP_TRACES_HEADERS?: string;\n  OTEL_EXPORTER_OTLP_METRICS_HEADERS?: string;\n  OTEL_EXPORTER_OTLP_LOGS_HEADERS?: string;\n  OTEL_EXPORTER_ZIPKIN_ENDPOINT?: string;\n  OTEL_LOG_LEVEL?: DiagLogLevel;\n  OTEL_RESOURCE_ATTRIBUTES?: string;\n  OTEL_SERVICE_NAME?: string;\n  OTEL_TRACES_EXPORTER?: string;\n  OTEL_TRACES_SAMPLER_ARG?: string;\n  OTEL_TRACES_SAMPLER?: string;\n  OTEL_LOGS_EXPORTER?: string;\n  OTEL_EXPORTER_OTLP_INSECURE?: string;\n  OTEL_EXPORTER_OTLP_TRACES_INSECURE?: string;\n  OTEL_EXPORTER_OTLP_METRICS_INSECURE?: string;\n  OTEL_EXPORTER_OTLP_LOGS_INSECURE?: string;\n  OTEL_EXPORTER_OTLP_CERTIFICATE?: string;\n  OTEL_EXPORTER_OTLP_TRACES_CERTIFICATE?: string;\n  OTEL_EXPORTER_OTLP_METRICS_CERTIFICATE?: string;\n  OTEL_EXPORTER_OTLP_LOGS_CERTIFICATE?: string;\n  OTEL_EXPORTER_OTLP_COMPRESSION?: string;\n  OTEL_EXPORTER_OTLP_TRACES_COMPRESSION?: string;\n  OTEL_EXPORTER_OTLP_METRICS_COMPRESSION?: string;\n  OTEL_EXPORTER_OTLP_LOGS_COMPRESSION?: string;\n  OTEL_EXPORTER_OTLP_CLIENT_KEY?: string;\n  OTEL_EXPORTER_OTLP_TRACES_CLIENT_KEY?: string;\n  OTEL_EXPORTER_OTLP_METRICS_CLIENT_KEY?: string;\n  OTEL_EXPORTER_OTLP_LOGS_CLIENT_KEY?: string;\n  OTEL_EXPORTER_OTLP_CLIENT_CERTIFICATE?: string;\n  OTEL_EXPORTER_OTLP_TRACES_CLIENT_CERTIFICATE?: string;\n  OTEL_EXPORTER_OTLP_METRICS_CLIENT_CERTIFICATE?: string;\n  OTEL_EXPORTER_OTLP_LOGS_CLIENT_CERTIFICATE?: string;\n  OTEL_EXPORTER_OTLP_PROTOCOL?: string;\n  OTEL_EXPORTER_OTLP_TRACES_PROTOCOL?: string;\n  OTEL_EXPORTER_OTLP_METRICS_PROTOCOL?: string;\n  OTEL_EXPORTER_OTLP_LOGS_PROTOCOL?: string;\n  OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE?: string;\n} & ENVIRONMENT_BOOLEANS &\n  ENVIRONMENT_NUMBERS &\n  ENVIRONMENT_LISTS;\n\nexport type RAW_ENVIRONMENT = {\n  [key: string]: string | number | undefined | string[];\n};\n\nexport const DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT = Infinity;\n\nexport const DEFAULT_ATTRIBUTE_COUNT_LIMIT = 128;\n\nexport const DEFAULT_SPAN_ATTRIBUTE_PER_EVENT_COUNT_LIMIT = 128;\nexport const DEFAULT_SPAN_ATTRIBUTE_PER_LINK_COUNT_LIMIT = 128;\n\n/**\n * Default environment variables\n */\nexport const DEFAULT_ENVIRONMENT: Required<ENVIRONMENT> = {\n  OTEL_SDK_DISABLED: false,\n  CONTAINER_NAME: '',\n  ECS_CONTAINER_METADATA_URI_V4: '',\n  ECS_CONTAINER_METADATA_URI: '',\n  HOSTNAME: '',\n  KUBERNETES_SERVICE_HOST: '',\n  NAMESPACE: '',\n  OTEL_BSP_EXPORT_TIMEOUT: 30000,\n  OTEL_BSP_MAX_EXPORT_BATCH_SIZE: 512,\n  OTEL_BSP_MAX_QUEUE_SIZE: 2048,\n  OTEL_BSP_SCHEDULE_DELAY: 5000,\n  OTEL_BLRP_EXPORT_TIMEOUT: 30000,\n  OTEL_BLRP_MAX_EXPORT_BATCH_SIZE: 512,\n  OTEL_BLRP_MAX_QUEUE_SIZE: 2048,\n  OTEL_BLRP_SCHEDULE_DELAY: 5000,\n  OTEL_EXPORTER_JAEGER_AGENT_HOST: '',\n  OTEL_EXPORTER_JAEGER_AGENT_PORT: 6832,\n  OTEL_EXPORTER_JAEGER_ENDPOINT: '',\n  OTEL_EXPORTER_JAEGER_PASSWORD: '',\n  OTEL_EXPORTER_JAEGER_USER: '',\n  OTEL_EXPORTER_OTLP_ENDPOINT: '',\n  OTEL_EXPORTER_OTLP_TRACES_ENDPOINT: '',\n  OTEL_EXPORTER_OTLP_METRICS_ENDPOINT: '',\n  OTEL_EXPORTER_OTLP_LOGS_ENDPOINT: '',\n  OTEL_EXPORTER_OTLP_HEADERS: '',\n  OTEL_EXPORTER_OTLP_TRACES_HEADERS: '',\n  OTEL_EXPORTER_OTLP_METRICS_HEADERS: '',\n  OTEL_EXPORTER_OTLP_LOGS_HEADERS: '',\n  OTEL_EXPORTER_OTLP_TIMEOUT: 10000,\n  OTEL_EXPORTER_OTLP_TRACES_TIMEOUT: 10000,\n  OTEL_EXPORTER_OTLP_METRICS_TIMEOUT: 10000,\n  OTEL_EXPORTER_OTLP_LOGS_TIMEOUT: 10000,\n  OTEL_EXPORTER_ZIPKIN_ENDPOINT: 'http://localhost:9411/api/v2/spans',\n  OTEL_LOG_LEVEL: DiagLogLevel.INFO,\n  OTEL_NO_PATCH_MODULES: [],\n  OTEL_PROPAGATORS: ['tracecontext', 'baggage'],\n  OTEL_RESOURCE_ATTRIBUTES: '',\n  OTEL_SERVICE_NAME: '',\n  OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT: DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT,\n  OTEL_ATTRIBUTE_COUNT_LIMIT: DEFAULT_ATTRIBUTE_COUNT_LIMIT,\n  OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT: DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT,\n  OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT: DEFAULT_ATTRIBUTE_COUNT_LIMIT,\n  OTEL_LOGRECORD_ATTRIBUTE_VALUE_LENGTH_LIMIT:\n    DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT,\n  OTEL_LOGRECORD_ATTRIBUTE_COUNT_LIMIT: DEFAULT_ATTRIBUTE_COUNT_LIMIT,\n  OTEL_SPAN_EVENT_COUNT_LIMIT: 128,\n  OTEL_SPAN_LINK_COUNT_LIMIT: 128,\n  OTEL_SPAN_ATTRIBUTE_PER_EVENT_COUNT_LIMIT:\n    DEFAULT_SPAN_ATTRIBUTE_PER_EVENT_COUNT_LIMIT,\n  OTEL_SPAN_ATTRIBUTE_PER_LINK_COUNT_LIMIT:\n    DEFAULT_SPAN_ATTRIBUTE_PER_LINK_COUNT_LIMIT,\n  OTEL_TRACES_EXPORTER: '',\n  OTEL_TRACES_SAMPLER: TracesSamplerValues.ParentBasedAlwaysOn,\n  OTEL_TRACES_SAMPLER_ARG: '',\n  OTEL_LOGS_EXPORTER: '',\n  OTEL_EXPORTER_OTLP_INSECURE: '',\n  OTEL_EXPORTER_OTLP_TRACES_INSECURE: '',\n  OTEL_EXPORTER_OTLP_METRICS_INSECURE: '',\n  OTEL_EXPORTER_OTLP_LOGS_INSECURE: '',\n  OTEL_EXPORTER_OTLP_CERTIFICATE: '',\n  OTEL_EXPORTER_OTLP_TRACES_CERTIFICATE: '',\n  OTEL_EXPORTER_OTLP_METRICS_CERTIFICATE: '',\n  OTEL_EXPORTER_OTLP_LOGS_CERTIFICATE: '',\n  OTEL_EXPORTER_OTLP_COMPRESSION: '',\n  OTEL_EXPORTER_OTLP_TRACES_COMPRESSION: '',\n  OTEL_EXPORTER_OTLP_METRICS_COMPRESSION: '',\n  OTEL_EXPORTER_OTLP_LOGS_COMPRESSION: '',\n  OTEL_EXPORTER_OTLP_CLIENT_KEY: '',\n  OTEL_EXPORTER_OTLP_TRACES_CLIENT_KEY: '',\n  OTEL_EXPORTER_OTLP_METRICS_CLIENT_KEY: '',\n  OTEL_EXPORTER_OTLP_LOGS_CLIENT_KEY: '',\n  OTEL_EXPORTER_OTLP_CLIENT_CERTIFICATE: '',\n  OTEL_EXPORTER_OTLP_TRACES_CLIENT_CERTIFICATE: '',\n  OTEL_EXPORTER_OTLP_METRICS_CLIENT_CERTIFICATE: '',\n  OTEL_EXPORTER_OTLP_LOGS_CLIENT_CERTIFICATE: '',\n  OTEL_EXPORTER_OTLP_PROTOCOL: 'http/protobuf',\n  OTEL_EXPORTER_OTLP_TRACES_PROTOCOL: 'http/protobuf',\n  OTEL_EXPORTER_OTLP_METRICS_PROTOCOL: 'http/protobuf',\n  OTEL_EXPORTER_OTLP_LOGS_PROTOCOL: 'http/protobuf',\n  OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE: 'cumulative',\n};\n\n/**\n * @param key\n * @param environment\n * @param values\n */\nfunction parseBoolean(\n  key: keyof ENVIRONMENT_BOOLEANS,\n  environment: ENVIRONMENT,\n  values: RAW_ENVIRONMENT\n) {\n  if (typeof values[key] === 'undefined') {\n    return;\n  }\n\n  const value = String(values[key]);\n  // support case-insensitive \"true\"\n  environment[key] = value.toLowerCase() === 'true';\n}\n\n/**\n * Parses a variable as number with number validation\n * @param name\n * @param environment\n * @param values\n * @param min\n * @param max\n */\nfunction parseNumber(\n  name: keyof ENVIRONMENT_NUMBERS,\n  environment: ENVIRONMENT,\n  values: RAW_ENVIRONMENT,\n  min = -Infinity,\n  max = Infinity\n) {\n  if (typeof values[name] !== 'undefined') {\n    const value = Number(values[name] as string);\n    if (!isNaN(value)) {\n      if (value < min) {\n        environment[name] = min;\n      } else if (value > max) {\n        environment[name] = max;\n      } else {\n        environment[name] = value;\n      }\n    }\n  }\n}\n\n/**\n * Parses list-like strings from input into output.\n * @param name\n * @param environment\n * @param values\n * @param separator\n */\nfunction parseStringList(\n  name: keyof ENVIRONMENT_LISTS,\n  output: ENVIRONMENT,\n  input: RAW_ENVIRONMENT,\n  separator = DEFAULT_LIST_SEPARATOR\n) {\n  const givenValue = input[name];\n  if (typeof givenValue === 'string') {\n    output[name] = givenValue.split(separator).map(v => v.trim());\n  }\n}\n\n// The support string -> DiagLogLevel mappings\nconst logLevelMap: { [key: string]: DiagLogLevel } = {\n  ALL: DiagLogLevel.ALL,\n  VERBOSE: DiagLogLevel.VERBOSE,\n  DEBUG: DiagLogLevel.DEBUG,\n  INFO: DiagLogLevel.INFO,\n  WARN: DiagLogLevel.WARN,\n  ERROR: DiagLogLevel.ERROR,\n  NONE: DiagLogLevel.NONE,\n};\n\n/**\n * Environmentally sets log level if valid log level string is provided\n * @param key\n * @param environment\n * @param values\n */\nfunction setLogLevelFromEnv(\n  key: keyof ENVIRONMENT,\n  environment: RAW_ENVIRONMENT | ENVIRONMENT,\n  values: RAW_ENVIRONMENT\n) {\n  const value = values[key];\n  if (typeof value === 'string') {\n    const theLevel = logLevelMap[value.toUpperCase()];\n    if (theLevel != null) {\n      environment[key] = theLevel;\n    }\n  }\n}\n\n/**\n * Parses environment values\n * @param values\n */\nexport function parseEnvironment(values: RAW_ENVIRONMENT): ENVIRONMENT {\n  const environment: ENVIRONMENT = {};\n\n  for (const env in DEFAULT_ENVIRONMENT) {\n    const key = env as keyof ENVIRONMENT;\n\n    switch (key) {\n      case 'OTEL_LOG_LEVEL':\n        setLogLevelFromEnv(key, environment, values);\n        break;\n\n      default:\n        if (isEnvVarABoolean(key)) {\n          parseBoolean(key, environment, values);\n        } else if (isEnvVarANumber(key)) {\n          parseNumber(key, environment, values);\n        } else if (isEnvVarAList(key)) {\n          parseStringList(key, environment, values);\n        } else {\n          const value = values[key];\n          if (typeof value !== 'undefined' && value !== null) {\n            environment[key] = String(value);\n          }\n        }\n    }\n  }\n\n  return environment;\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  DEFAULT_ENVIRONMENT,\n  ENVIRONMENT,\n  RAW_ENVIRONMENT,\n  parseEnvironment,\n} from '../../utils/environment';\n\n/**\n * Gets the environment variables\n */\nexport function getEnv(): Required<ENVIRONMENT> {\n  const processEnv = parseEnvironment(process.env as RAW_ENVIRONMENT);\n  return Object.assign({}, DEFAULT_ENVIRONMENT, processEnv);\n}\n\nexport function getEnvWithoutDefaults(): ENVIRONMENT {\n  return parseEnvironment(process.env as RAW_ENVIRONMENT);\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** only globals that common to node and browsers are allowed */\n// eslint-disable-next-line node/no-unsupported-features/es-builtins\nexport const _globalThis = typeof globalThis === 'object' ? globalThis : global;\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nfunction intValue(charCode: number): number {\n  // 0-9\n  if (charCode >= 48 && charCode <= 57) {\n    return charCode - 48;\n  }\n\n  // a-f\n  if (charCode >= 97 && charCode <= 102) {\n    return charCode - 87;\n  }\n\n  // A-F\n  return charCode - 55;\n}\n\nexport function hexToBinary(hexStr: string): Uint8Array {\n  const buf = new Uint8Array(hexStr.length / 2);\n  let offset = 0;\n\n  for (let i = 0; i < hexStr.length; i += 2) {\n    const hi = intValue(hexStr.charCodeAt(i));\n    const lo = intValue(hexStr.charCodeAt(i + 1));\n    buf[offset++] = (hi << 4) | lo;\n  }\n\n  return buf;\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { hexToBinary } from '../../common/hex-to-binary';\n\nexport function hexToBase64(hexStr: string): string {\n  return Buffer.from(hexToBinary(hexStr)).toString('base64');\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { IdGenerator } from '../../trace/IdGenerator';\nconst SPAN_ID_BYTES = 8;\nconst TRACE_ID_BYTES = 16;\n\n/**\n * @deprecated Use the one defined in @opentelemetry/sdk-trace-base instead.\n */\nexport class RandomIdGenerator implements IdGenerator {\n  /**\n   * Returns a random 16-byte trace ID formatted/encoded as a 32 lowercase hex\n   * characters corresponding to 128 bits.\n   */\n  generateTraceId = getIdGenerator(TRACE_ID_BYTES);\n\n  /**\n   * Returns a random 8-byte span ID formatted/encoded as a 16 lowercase hex\n   * characters corresponding to 64 bits.\n   */\n  generateSpanId = getIdGenerator(SPAN_ID_BYTES);\n}\n\nconst SHARED_BUFFER = Buffer.allocUnsafe(TRACE_ID_BYTES);\nfunction getIdGenerator(bytes: number): () => string {\n  return function generateId() {\n    for (let i = 0; i < bytes / 4; i++) {\n      // unsigned right shift drops decimal part of the number\n      // it is required because if a number between 2**32 and 2**32 - 1 is generated, an out of range error is thrown by writeUInt32BE\n      SHARED_BUFFER.writeUInt32BE((Math.random() * 2 ** 32) >>> 0, i * 4);\n    }\n\n    // If buffer is all 0, set the last byte to 1 to guarantee a valid w3c id is generated\n    for (let i = 0; i < bytes; i++) {\n      if (SHARED_BUFFER[i] > 0) {\n        break;\n      } else if (i === bytes - 1) {\n        SHARED_BUFFER[bytes - 1] = 1;\n      }\n    }\n\n    return SHARED_BUFFER.toString('hex', 0, bytes);\n  };\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { performance } from 'perf_hooks';\n\nexport const otperformance = performance;\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// this is autogenerated file, see scripts/version-update.js\nexport const VERSION = '1.25.1';\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { VERSION } from '../../version';\nimport {\n  SEMRESATTRS_TELEMETRY_SDK_NAME,\n  SEMRESATTRS_PROCESS_RUNTIME_NAME,\n  SEMRESATTRS_TELEMETRY_SDK_LANGUAGE,\n  TELEMETRYSDKLANGUAGEVALUES_NODEJS,\n  SEMRESATTRS_TELEMETRY_SDK_VERSION,\n} from '@opentelemetry/semantic-conventions';\n\n/** Constants describing the SDK in use */\nexport const SDK_INFO = {\n  [SEMRESATTRS_TELEMETRY_SDK_NAME]: 'opentelemetry',\n  [SEMRESATTRS_PROCESS_RUNTIME_NAME]: 'node',\n  [SEMRESATTRS_TELEMETRY_SDK_LANGUAGE]: TELEMETRYSDKLANGUAGEVALUES_NODEJS,\n  [SEMRESATTRS_TELEMETRY_SDK_VERSION]: VERSION,\n};\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport function unrefTimer(timer: NodeJS.Timer): void {\n  timer.unref();\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport { getEnvWithoutDefaults, getEnv } from './environment';\nexport * from './globalThis';\nexport * from './hex-to-base64';\nexport * from './RandomIdGenerator';\nexport * from './performance';\nexport * from './sdk-info';\nexport * from './timer-util';\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport * from './node';\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as api from '@opentelemetry/api';\nimport { otperformance as performance } from '../platform';\nimport { TimeOriginLegacy } from './types';\n\nconst NANOSECOND_DIGITS = 9;\nconst NANOSECOND_DIGITS_IN_MILLIS = 6;\nconst MILLISECONDS_TO_NANOSECONDS = Math.pow(10, NANOSECOND_DIGITS_IN_MILLIS);\nconst SECOND_TO_NANOSECONDS = Math.pow(10, NANOSECOND_DIGITS);\n\n/**\n * Converts a number of milliseconds from epoch to HrTime([seconds, remainder in nanoseconds]).\n * @param epochMillis\n */\nexport function millisToHrTime(epochMillis: number): api.HrTime {\n  const epochSeconds = epochMillis / 1000;\n  // Decimals only.\n  const seconds = Math.trunc(epochSeconds);\n  // Round sub-nanosecond accuracy to nanosecond.\n  const nanos = Math.round((epochMillis % 1000) * MILLISECONDS_TO_NANOSECONDS);\n  return [seconds, nanos];\n}\n\nexport function getTimeOrigin(): number {\n  let timeOrigin = performance.timeOrigin;\n  if (typeof timeOrigin !== 'number') {\n    const perf: TimeOriginLegacy = performance as unknown as TimeOriginLegacy;\n    timeOrigin = perf.timing && perf.timing.fetchStart;\n  }\n  return timeOrigin;\n}\n\n/**\n * Returns an hrtime calculated via performance component.\n * @param performanceNow\n */\nexport function hrTime(performanceNow?: number): api.HrTime {\n  const timeOrigin = millisToHrTime(getTimeOrigin());\n  const now = millisToHrTime(\n    typeof performanceNow === 'number' ? performanceNow : performance.now()\n  );\n\n  return addHrTimes(timeOrigin, now);\n}\n\n/**\n *\n * Converts a TimeInput to an HrTime, defaults to _hrtime().\n * @param time\n */\nexport function timeInputToHrTime(time: api.TimeInput): api.HrTime {\n  // process.hrtime\n  if (isTimeInputHrTime(time)) {\n    return time as api.HrTime;\n  } else if (typeof time === 'number') {\n    // Must be a performance.now() if it's smaller than process start time.\n    if (time < getTimeOrigin()) {\n      return hrTime(time);\n    } else {\n      // epoch milliseconds or performance.timeOrigin\n      return millisToHrTime(time);\n    }\n  } else if (time instanceof Date) {\n    return millisToHrTime(time.getTime());\n  } else {\n    throw TypeError('Invalid input type');\n  }\n}\n\n/**\n * Returns a duration of two hrTime.\n * @param startTime\n * @param endTime\n */\nexport function hrTimeDuration(\n  startTime: api.HrTime,\n  endTime: api.HrTime\n): api.HrTime {\n  let seconds = endTime[0] - startTime[0];\n  let nanos = endTime[1] - startTime[1];\n\n  // overflow\n  if (nanos < 0) {\n    seconds -= 1;\n    // negate\n    nanos += SECOND_TO_NANOSECONDS;\n  }\n\n  return [seconds, nanos];\n}\n\n/**\n * Convert hrTime to timestamp, for example \"2019-05-14T17:00:00.000123456Z\"\n * @param time\n */\nexport function hrTimeToTimeStamp(time: api.HrTime): string {\n  const precision = NANOSECOND_DIGITS;\n  const tmp = `${'0'.repeat(precision)}${time[1]}Z`;\n  const nanoString = tmp.substr(tmp.length - precision - 1);\n  const date = new Date(time[0] * 1000).toISOString();\n  return date.replace('000Z', nanoString);\n}\n\n/**\n * Convert hrTime to nanoseconds.\n * @param time\n */\nexport function hrTimeToNanoseconds(time: api.HrTime): number {\n  return time[0] * SECOND_TO_NANOSECONDS + time[1];\n}\n\n/**\n * Convert hrTime to milliseconds.\n * @param time\n */\nexport function hrTimeToMilliseconds(time: api.HrTime): number {\n  return time[0] * 1e3 + time[1] / 1e6;\n}\n\n/**\n * Convert hrTime to microseconds.\n * @param time\n */\nexport function hrTimeToMicroseconds(time: api.HrTime): number {\n  return time[0] * 1e6 + time[1] / 1e3;\n}\n\n/**\n * check if time is HrTime\n * @param value\n */\nexport function isTimeInputHrTime(value: unknown): value is api.HrTime {\n  return (\n    Array.isArray(value) &&\n    value.length === 2 &&\n    typeof value[0] === 'number' &&\n    typeof value[1] === 'number'\n  );\n}\n\n/**\n * check if input value is a correct types.TimeInput\n * @param value\n */\nexport function isTimeInput(\n  value: unknown\n): value is api.HrTime | number | Date {\n  return (\n    isTimeInputHrTime(value) ||\n    typeof value === 'number' ||\n    value instanceof Date\n  );\n}\n\n/**\n * Given 2 HrTime formatted times, return their sum as an HrTime.\n */\nexport function addHrTimes(time1: api.HrTime, time2: api.HrTime): api.HrTime {\n  const out = [time1[0] + time2[0], time1[1] + time2[1]] as api.HrTime;\n\n  // Nanoseconds\n  if (out[1] >= SECOND_TO_NANOSECONDS) {\n    out[1] -= SECOND_TO_NANOSECONDS;\n    out[0] += 1;\n  }\n\n  return out;\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport interface ExportResult {\n  code: ExportResultCode;\n  error?: Error;\n}\n\nexport enum ExportResultCode {\n  SUCCESS,\n  FAILED,\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Context,\n  TextMapGetter,\n  TextMapPropagator,\n  diag,\n  TextMapSetter,\n} from '@opentelemetry/api';\n\n/** Configuration object for composite propagator */\nexport interface CompositePropagatorConfig {\n  /**\n   * List of propagators to run. Propagators run in the\n   * list order. If a propagator later in the list writes the same context\n   * key as a propagator earlier in the list, the later on will \"win\".\n   */\n  propagators?: TextMapPropagator[];\n}\n\n/** Combines multiple propagators into a single propagator. */\nexport class CompositePropagator implements TextMapPropagator {\n  private readonly _propagators: TextMapPropagator[];\n  private readonly _fields: string[];\n\n  /**\n   * Construct a composite propagator from a list of propagators.\n   *\n   * @param [config] Configuration object for composite propagator\n   */\n  constructor(config: CompositePropagatorConfig = {}) {\n    this._propagators = config.propagators ?? [];\n\n    this._fields = Array.from(\n      new Set(\n        this._propagators\n          // older propagators may not have fields function, null check to be sure\n          .map(p => (typeof p.fields === 'function' ? p.fields() : []))\n          .reduce((x, y) => x.concat(y), [])\n      )\n    );\n  }\n\n  /**\n   * Run each of the configured propagators with the given context and carrier.\n   * Propagators are run in the order they are configured, so if multiple\n   * propagators write the same carrier key, the propagator later in the list\n   * will \"win\".\n   *\n   * @param context Context to inject\n   * @param carrier Carrier into which context will be injected\n   */\n  inject(context: Context, carrier: unknown, setter: TextMapSetter): void {\n    for (const propagator of this._propagators) {\n      try {\n        propagator.inject(context, carrier, setter);\n      } catch (err) {\n        diag.warn(\n          `Failed to inject with ${propagator.constructor.name}. Err: ${err.message}`\n        );\n      }\n    }\n  }\n\n  /**\n   * Run each of the configured propagators with the given context and carrier.\n   * Propagators are run in the order they are configured, so if multiple\n   * propagators write the same context key, the propagator later in the list\n   * will \"win\".\n   *\n   * @param context Context to add values to\n   * @param carrier Carrier from which to extract context\n   */\n  extract(context: Context, carrier: unknown, getter: TextMapGetter): Context {\n    return this._propagators.reduce((ctx, propagator) => {\n      try {\n        return propagator.extract(ctx, carrier, getter);\n      } catch (err) {\n        diag.warn(\n          `Failed to inject with ${propagator.constructor.name}. Err: ${err.message}`\n        );\n      }\n      return ctx;\n    }, context);\n  }\n\n  fields(): string[] {\n    // return a new array so our fields cannot be modified\n    return this._fields.slice();\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst VALID_KEY_CHAR_RANGE = '[_0-9a-z-*/]';\nconst VALID_KEY = `[a-z]${VALID_KEY_CHAR_RANGE}{0,255}`;\nconst VALID_VENDOR_KEY = `[a-z0-9]${VALID_KEY_CHAR_RANGE}{0,240}@[a-z]${VALID_KEY_CHAR_RANGE}{0,13}`;\nconst VALID_KEY_REGEX = new RegExp(`^(?:${VALID_KEY}|${VALID_VENDOR_KEY})$`);\nconst VALID_VALUE_BASE_REGEX = /^[ -~]{0,255}[!-~]$/;\nconst INVALID_VALUE_COMMA_EQUAL_REGEX = /,|=/;\n\n/**\n * Key is opaque string up to 256 characters printable. It MUST begin with a\n * lowercase letter, and can only contain lowercase letters a-z, digits 0-9,\n * underscores _, dashes -, asterisks *, and forward slashes /.\n * For multi-tenant vendor scenarios, an at sign (@) can be used to prefix the\n * vendor name. Vendors SHOULD set the tenant ID at the beginning of the key.\n * see https://www.w3.org/TR/trace-context/#key\n */\nexport function validateKey(key: string): boolean {\n  return VALID_KEY_REGEX.test(key);\n}\n\n/**\n * Value is opaque string up to 256 characters printable ASCII RFC0020\n * characters (i.e., the range 0x20 to 0x7E) except comma , and =.\n */\nexport function validateValue(value: string): boolean {\n  return (\n    VALID_VALUE_BASE_REGEX.test(value) &&\n    !INVALID_VALUE_COMMA_EQUAL_REGEX.test(value)\n  );\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as api from '@opentelemetry/api';\nimport { validateKey, validateValue } from '../internal/validators';\n\nconst MAX_TRACE_STATE_ITEMS = 32;\nconst MAX_TRACE_STATE_LEN = 512;\nconst LIST_MEMBERS_SEPARATOR = ',';\nconst LIST_MEMBER_KEY_VALUE_SPLITTER = '=';\n\n/**\n * TraceState must be a class and not a simple object type because of the spec\n * requirement (https://www.w3.org/TR/trace-context/#tracestate-field).\n *\n * Here is the list of allowed mutations:\n * - New key-value pair should be added into the beginning of the list\n * - The value of any key can be updated. Modified keys MUST be moved to the\n * beginning of the list.\n */\nexport class TraceState implements api.TraceState {\n  private _internalState: Map<string, string> = new Map();\n\n  constructor(rawTraceState?: string) {\n    if (rawTraceState) this._parse(rawTraceState);\n  }\n\n  set(key: string, value: string): TraceState {\n    // TODO: Benchmark the different approaches(map vs list) and\n    // use the faster one.\n    const traceState = this._clone();\n    if (traceState._internalState.has(key)) {\n      traceState._internalState.delete(key);\n    }\n    traceState._internalState.set(key, value);\n    return traceState;\n  }\n\n  unset(key: string): TraceState {\n    const traceState = this._clone();\n    traceState._internalState.delete(key);\n    return traceState;\n  }\n\n  get(key: string): string | undefined {\n    return this._internalState.get(key);\n  }\n\n  serialize(): string {\n    return this._keys()\n      .reduce((agg: string[], key) => {\n        agg.push(key + LIST_MEMBER_KEY_VALUE_SPLITTER + this.get(key));\n        return agg;\n      }, [])\n      .join(LIST_MEMBERS_SEPARATOR);\n  }\n\n  private _parse(rawTraceState: string) {\n    if (rawTraceState.length > MAX_TRACE_STATE_LEN) return;\n    this._internalState = rawTraceState\n      .split(LIST_MEMBERS_SEPARATOR)\n      .reverse() // Store in reverse so new keys (.set(...)) will be placed at the beginning\n      .reduce((agg: Map<string, string>, part: string) => {\n        const listMember = part.trim(); // Optional Whitespace (OWS) handling\n        const i = listMember.indexOf(LIST_MEMBER_KEY_VALUE_SPLITTER);\n        if (i !== -1) {\n          const key = listMember.slice(0, i);\n          const value = listMember.slice(i + 1, part.length);\n          if (validateKey(key) && validateValue(value)) {\n            agg.set(key, value);\n          } else {\n            // TODO: Consider to add warning log\n          }\n        }\n        return agg;\n      }, new Map());\n\n    // Because of the reverse() requirement, trunc must be done after map is created\n    if (this._internalState.size > MAX_TRACE_STATE_ITEMS) {\n      this._internalState = new Map(\n        Array.from(this._internalState.entries())\n          .reverse() // Use reverse same as original tracestate parse chain\n          .slice(0, MAX_TRACE_STATE_ITEMS)\n      );\n    }\n  }\n\n  private _keys(): string[] {\n    return Array.from(this._internalState.keys()).reverse();\n  }\n\n  private _clone(): TraceState {\n    const traceState = new TraceState();\n    traceState._internalState = new Map(this._internalState);\n    return traceState;\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Context,\n  isSpanContextValid,\n  SpanContext,\n  TextMapGetter,\n  TextMapPropagator,\n  TextMapSetter,\n  trace,\n  TraceFlags,\n} from '@opentelemetry/api';\nimport { isTracingSuppressed } from './suppress-tracing';\nimport { TraceState } from './TraceState';\n\nexport const TRACE_PARENT_HEADER = 'traceparent';\nexport const TRACE_STATE_HEADER = 'tracestate';\n\nconst VERSION = '00';\nconst VERSION_PART = '(?!ff)[\\\\da-f]{2}';\nconst TRACE_ID_PART = '(?![0]{32})[\\\\da-f]{32}';\nconst PARENT_ID_PART = '(?![0]{16})[\\\\da-f]{16}';\nconst FLAGS_PART = '[\\\\da-f]{2}';\nconst TRACE_PARENT_REGEX = new RegExp(\n  `^\\\\s?(${VERSION_PART})-(${TRACE_ID_PART})-(${PARENT_ID_PART})-(${FLAGS_PART})(-.*)?\\\\s?$`\n);\n\n/**\n * Parses information from the [traceparent] span tag and converts it into {@link SpanContext}\n * @param traceParent - A meta property that comes from server.\n *     It should be dynamically generated server side to have the server's request trace Id,\n *     a parent span Id that was set on the server's request span,\n *     and the trace flags to indicate the server's sampling decision\n *     (01 = sampled, 00 = not sampled).\n *     for example: '{version}-{traceId}-{spanId}-{sampleDecision}'\n *     For more information see {@link https://www.w3.org/TR/trace-context/}\n */\nexport function parseTraceParent(traceParent: string): SpanContext | null {\n  const match = TRACE_PARENT_REGEX.exec(traceParent);\n  if (!match) return null;\n\n  // According to the specification the implementation should be compatible\n  // with future versions. If there are more parts, we only reject it if it's using version 00\n  // See https://www.w3.org/TR/trace-context/#versioning-of-traceparent\n  if (match[1] === '00' && match[5]) return null;\n\n  return {\n    traceId: match[2],\n    spanId: match[3],\n    traceFlags: parseInt(match[4], 16),\n  };\n}\n\n/**\n * Propagates {@link SpanContext} through Trace Context format propagation.\n *\n * Based on the Trace Context specification:\n * https://www.w3.org/TR/trace-context/\n */\nexport class W3CTraceContextPropagator implements TextMapPropagator {\n  inject(context: Context, carrier: unknown, setter: TextMapSetter): void {\n    const spanContext = trace.getSpanContext(context);\n    if (\n      !spanContext ||\n      isTracingSuppressed(context) ||\n      !isSpanContextValid(spanContext)\n    )\n      return;\n\n    const traceParent = `${VERSION}-${spanContext.traceId}-${\n      spanContext.spanId\n    }-0${Number(spanContext.traceFlags || TraceFlags.NONE).toString(16)}`;\n\n    setter.set(carrier, TRACE_PARENT_HEADER, traceParent);\n    if (spanContext.traceState) {\n      setter.set(\n        carrier,\n        TRACE_STATE_HEADER,\n        spanContext.traceState.serialize()\n      );\n    }\n  }\n\n  extract(context: Context, carrier: unknown, getter: TextMapGetter): Context {\n    const traceParentHeader = getter.get(carrier, TRACE_PARENT_HEADER);\n    if (!traceParentHeader) return context;\n    const traceParent = Array.isArray(traceParentHeader)\n      ? traceParentHeader[0]\n      : traceParentHeader;\n    if (typeof traceParent !== 'string') return context;\n    const spanContext = parseTraceParent(traceParent);\n    if (!spanContext) return context;\n\n    spanContext.isRemote = true;\n\n    const traceStateHeader = getter.get(carrier, TRACE_STATE_HEADER);\n    if (traceStateHeader) {\n      // If more than one `tracestate` header is found, we merge them into a\n      // single header.\n      const state = Array.isArray(traceStateHeader)\n        ? traceStateHeader.join(',')\n        : traceStateHeader;\n      spanContext.traceState = new TraceState(\n        typeof state === 'string' ? state : undefined\n      );\n    }\n    return trace.setSpanContext(context, spanContext);\n  }\n\n  fields(): string[] {\n    return [TRACE_PARENT_HEADER, TRACE_STATE_HEADER];\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Context, createContextKey, Span } from '@opentelemetry/api';\n\nconst RPC_METADATA_KEY = createContextKey(\n  'OpenTelemetry SDK Context Key RPC_METADATA'\n);\n\nexport enum RPCType {\n  HTTP = 'http',\n}\n\ntype HTTPMetadata = {\n  type: RPCType.HTTP;\n  route?: string;\n  span: Span;\n};\n\n/**\n * Allows for future rpc metadata to be used with this mechanism\n */\nexport type RPCMetadata = HTTPMetadata;\n\nexport function setRPCMetadata(context: Context, meta: RPCMetadata): Context {\n  return context.setValue(RPC_METADATA_KEY, meta);\n}\n\nexport function deleteRPCMetadata(context: Context): Context {\n  return context.deleteValue(RPC_METADATA_KEY);\n}\n\nexport function getRPCMetadata(context: Context): RPCMetadata | undefined {\n  return context.getValue(RPC_METADATA_KEY) as RPCMetadata | undefined;\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Sampler, SamplingDecision, SamplingResult } from '@opentelemetry/api';\n\n/**\n * @deprecated Use the one defined in @opentelemetry/sdk-trace-base instead.\n * Sampler that samples no traces.\n */\nexport class AlwaysOffSampler implements Sampler {\n  shouldSample(): SamplingResult {\n    return {\n      decision: SamplingDecision.NOT_RECORD,\n    };\n  }\n\n  toString(): string {\n    return 'AlwaysOffSampler';\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Sampler, SamplingDecision, SamplingResult } from '@opentelemetry/api';\n\n/**\n * @deprecated Use the one defined in @opentelemetry/sdk-trace-base instead.\n * Sampler that samples all traces.\n */\nexport class AlwaysOnSampler implements Sampler {\n  shouldSample(): SamplingResult {\n    return {\n      decision: SamplingDecision.RECORD_AND_SAMPLED,\n    };\n  }\n\n  toString(): string {\n    return 'AlwaysOnSampler';\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Context,\n  isSpanContextValid,\n  Link,\n  Sampler,\n  SamplingResult,\n  SpanAttributes,\n  SpanKind,\n  TraceFlags,\n  trace,\n} from '@opentelemetry/api';\nimport { globalErrorHandler } from '../../common/global-error-handler';\nimport { AlwaysOffSampler } from './AlwaysOffSampler';\nimport { AlwaysOnSampler } from './AlwaysOnSampler';\n\n/**\n * @deprecated Use the one defined in @opentelemetry/sdk-trace-base instead.\n * A composite sampler that either respects the parent span's sampling decision\n * or delegates to `delegateSampler` for root spans.\n */\nexport class ParentBasedSampler implements Sampler {\n  private _root: Sampler;\n  private _remoteParentSampled: Sampler;\n  private _remoteParentNotSampled: Sampler;\n  private _localParentSampled: Sampler;\n  private _localParentNotSampled: Sampler;\n\n  constructor(config: ParentBasedSamplerConfig) {\n    this._root = config.root;\n\n    if (!this._root) {\n      globalErrorHandler(\n        new Error('ParentBasedSampler must have a root sampler configured')\n      );\n      this._root = new AlwaysOnSampler();\n    }\n\n    this._remoteParentSampled =\n      config.remoteParentSampled ?? new AlwaysOnSampler();\n    this._remoteParentNotSampled =\n      config.remoteParentNotSampled ?? new AlwaysOffSampler();\n    this._localParentSampled =\n      config.localParentSampled ?? new AlwaysOnSampler();\n    this._localParentNotSampled =\n      config.localParentNotSampled ?? new AlwaysOffSampler();\n  }\n\n  shouldSample(\n    context: Context,\n    traceId: string,\n    spanName: string,\n    spanKind: SpanKind,\n    attributes: SpanAttributes,\n    links: Link[]\n  ): SamplingResult {\n    const parentContext = trace.getSpanContext(context);\n\n    if (!parentContext || !isSpanContextValid(parentContext)) {\n      return this._root.shouldSample(\n        context,\n        traceId,\n        spanName,\n        spanKind,\n        attributes,\n        links\n      );\n    }\n\n    if (parentContext.isRemote) {\n      if (parentContext.traceFlags & TraceFlags.SAMPLED) {\n        return this._remoteParentSampled.shouldSample(\n          context,\n          traceId,\n          spanName,\n          spanKind,\n          attributes,\n          links\n        );\n      }\n      return this._remoteParentNotSampled.shouldSample(\n        context,\n        traceId,\n        spanName,\n        spanKind,\n        attributes,\n        links\n      );\n    }\n\n    if (parentContext.traceFlags & TraceFlags.SAMPLED) {\n      return this._localParentSampled.shouldSample(\n        context,\n        traceId,\n        spanName,\n        spanKind,\n        attributes,\n        links\n      );\n    }\n\n    return this._localParentNotSampled.shouldSample(\n      context,\n      traceId,\n      spanName,\n      spanKind,\n      attributes,\n      links\n    );\n  }\n\n  toString(): string {\n    return `ParentBased{root=${this._root.toString()}, remoteParentSampled=${this._remoteParentSampled.toString()}, remoteParentNotSampled=${this._remoteParentNotSampled.toString()}, localParentSampled=${this._localParentSampled.toString()}, localParentNotSampled=${this._localParentNotSampled.toString()}}`;\n  }\n}\n\ninterface ParentBasedSamplerConfig {\n  /** Sampler called for spans with no parent */\n  root: Sampler;\n  /** Sampler called for spans with a remote parent which was sampled. Default AlwaysOn */\n  remoteParentSampled?: Sampler;\n  /** Sampler called for spans with a remote parent which was not sampled. Default AlwaysOff */\n  remoteParentNotSampled?: Sampler;\n  /** Sampler called for spans with a local parent which was sampled. Default AlwaysOn */\n  localParentSampled?: Sampler;\n  /** Sampler called for spans with a local parent which was not sampled. Default AlwaysOff */\n  localParentNotSampled?: Sampler;\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Sampler,\n  SamplingDecision,\n  SamplingResult,\n  isValidTraceId,\n} from '@opentelemetry/api';\n\n/**\n * @deprecated Use the one defined in @opentelemetry/sdk-trace-base instead.\n * Sampler that samples a given fraction of traces based of trace id deterministically.\n */\nexport class TraceIdRatioBasedSampler implements Sampler {\n  private _upperBound: number;\n\n  constructor(private readonly _ratio: number = 0) {\n    this._ratio = this._normalize(_ratio);\n    this._upperBound = Math.floor(this._ratio * 0xffffffff);\n  }\n\n  shouldSample(context: unknown, traceId: string): SamplingResult {\n    return {\n      decision:\n        isValidTraceId(traceId) && this._accumulate(traceId) < this._upperBound\n          ? SamplingDecision.RECORD_AND_SAMPLED\n          : SamplingDecision.NOT_RECORD,\n    };\n  }\n\n  toString(): string {\n    return `TraceIdRatioBased{${this._ratio}}`;\n  }\n\n  private _normalize(ratio: number): number {\n    if (typeof ratio !== 'number' || isNaN(ratio)) return 0;\n    return ratio >= 1 ? 1 : ratio <= 0 ? 0 : ratio;\n  }\n\n  private _accumulate(traceId: string): number {\n    let accumulation = 0;\n    for (let i = 0; i < traceId.length / 8; i++) {\n      const pos = i * 8;\n      const part = parseInt(traceId.slice(pos, pos + 8), 16);\n      accumulation = (accumulation ^ part) >>> 0;\n    }\n    return accumulation;\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/**\n * based on lodash in order to support esm builds without esModuleInterop.\n * lodash is using MIT License.\n **/\n\nconst objectTag = '[object Object]';\nconst nullTag = '[object Null]';\nconst undefinedTag = '[object Undefined]';\nconst funcProto = Function.prototype;\nconst funcToString = funcProto.toString;\nconst objectCtorString = funcToString.call(Object);\nconst getPrototype = overArg(Object.getPrototypeOf, Object);\nconst objectProto = Object.prototype;\nconst hasOwnProperty = objectProto.hasOwnProperty;\nconst symToStringTag = Symbol ? Symbol.toStringTag : undefined;\nconst nativeObjectToString = objectProto.toString;\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func: Function, transform: any): any {\n  return function (arg: any) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Checks if `value` is a plain object, that is, an object created by the\n * `Object` constructor or one with a `[[Prototype]]` of `null`.\n *\n * @static\n * @memberOf _\n * @since 0.8.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n * }\n *\n * _.isPlainObject(new Foo);\n * // => false\n *\n * _.isPlainObject([1, 2, 3]);\n * // => false\n *\n * _.isPlainObject({ 'x': 0, 'y': 0 });\n * // => true\n *\n * _.isPlainObject(Object.create(null));\n * // => true\n */\nexport function isPlainObject(value: any) {\n  if (!isObjectLike(value) || baseGetTag(value) !== objectTag) {\n    return false;\n  }\n  const proto = getPrototype(value);\n  if (proto === null) {\n    return true;\n  }\n  const Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;\n  return (\n    typeof Ctor == 'function' &&\n    Ctor instanceof Ctor &&\n    funcToString.call(Ctor) === objectCtorString\n  );\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value: any) {\n  return value != null && typeof value == 'object';\n}\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value: any) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return symToStringTag && symToStringTag in Object(value)\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value: any) {\n  const isOwn = hasOwnProperty.call(value, symToStringTag as any),\n    tag = value[symToStringTag as any];\n  let unmasked = false;\n\n  try {\n    value[symToStringTag as any] = undefined;\n    unmasked = true;\n  } catch (e) {\n    // silence\n  }\n\n  const result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag as any] = tag;\n    } else {\n      delete value[symToStringTag as any];\n    }\n  }\n  return result;\n}\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value: any) {\n  return nativeObjectToString.call(value);\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport { isPlainObject } from './lodash.merge';\n\nconst MAX_LEVEL = 20;\n\ninterface ObjectInto {\n  obj: any;\n  key: string;\n}\n\n/**\n * Merges objects together\n * @param args - objects / values to be merged\n */\nexport function merge(...args: any[]): any {\n  let result: any = args.shift();\n  const objects: WeakMap<any, ObjectInto[]> | undefined = new WeakMap<\n    any,\n    ObjectInto[]\n  >();\n  while (args.length > 0) {\n    result = mergeTwoObjects(result, args.shift(), 0, objects);\n  }\n\n  return result;\n}\n\nfunction takeValue(value: any): any {\n  if (isArray(value)) {\n    return value.slice();\n  }\n  return value;\n}\n\n/**\n * Merges two objects\n * @param one - first object\n * @param two - second object\n * @param level - current deep level\n * @param objects - objects holder that has been already referenced - to prevent\n * cyclic dependency\n */\nfunction mergeTwoObjects(\n  one: any,\n  two: any,\n  level = 0,\n  objects: WeakMap<any, ObjectInto[]>\n): any {\n  let result: any;\n  if (level > MAX_LEVEL) {\n    return undefined;\n  }\n  level++;\n  if (isPrimitive(one) || isPrimitive(two) || isFunction(two)) {\n    result = takeValue(two);\n  } else if (isArray(one)) {\n    result = one.slice();\n    if (isArray(two)) {\n      for (let i = 0, j = two.length; i < j; i++) {\n        result.push(takeValue(two[i]));\n      }\n    } else if (isObject(two)) {\n      const keys = Object.keys(two);\n      for (let i = 0, j = keys.length; i < j; i++) {\n        const key = keys[i];\n        result[key] = takeValue(two[key]);\n      }\n    }\n  } else if (isObject(one)) {\n    if (isObject(two)) {\n      if (!shouldMerge(one, two)) {\n        return two;\n      }\n      result = Object.assign({}, one);\n      const keys = Object.keys(two);\n\n      for (let i = 0, j = keys.length; i < j; i++) {\n        const key = keys[i];\n        const twoValue = two[key];\n\n        if (isPrimitive(twoValue)) {\n          if (typeof twoValue === 'undefined') {\n            delete result[key];\n          } else {\n            // result[key] = takeValue(twoValue);\n            result[key] = twoValue;\n          }\n        } else {\n          const obj1 = result[key];\n          const obj2 = twoValue;\n\n          if (\n            wasObjectReferenced(one, key, objects) ||\n            wasObjectReferenced(two, key, objects)\n          ) {\n            delete result[key];\n          } else {\n            if (isObject(obj1) && isObject(obj2)) {\n              const arr1 = objects.get(obj1) || [];\n              const arr2 = objects.get(obj2) || [];\n              arr1.push({ obj: one, key });\n              arr2.push({ obj: two, key });\n              objects.set(obj1, arr1);\n              objects.set(obj2, arr2);\n            }\n\n            result[key] = mergeTwoObjects(\n              result[key],\n              twoValue,\n              level,\n              objects\n            );\n          }\n        }\n      }\n    } else {\n      result = two;\n    }\n  }\n\n  return result;\n}\n\n/**\n * Function to check if object has been already reference\n * @param obj\n * @param key\n * @param objects\n */\nfunction wasObjectReferenced(\n  obj: any,\n  key: string,\n  objects: WeakMap<any, ObjectInto[]>\n): boolean {\n  const arr = objects.get(obj[key]) || [];\n  for (let i = 0, j = arr.length; i < j; i++) {\n    const info = arr[i];\n    if (info.key === key && info.obj === obj) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction isArray(value: any): boolean {\n  return Array.isArray(value);\n}\n\nfunction isFunction(value: any): boolean {\n  return typeof value === 'function';\n}\n\nfunction isObject(value: any): boolean {\n  return (\n    !isPrimitive(value) &&\n    !isArray(value) &&\n    !isFunction(value) &&\n    typeof value === 'object'\n  );\n}\n\nfunction isPrimitive(value: any): boolean {\n  return (\n    typeof value === 'string' ||\n    typeof value === 'number' ||\n    typeof value === 'boolean' ||\n    typeof value === 'undefined' ||\n    value instanceof Date ||\n    value instanceof RegExp ||\n    value === null\n  );\n}\n\nfunction shouldMerge(one: any, two: any): boolean {\n  if (!isPlainObject(one) || !isPlainObject(two)) {\n    return false;\n  }\n\n  return true;\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Error that is thrown on timeouts.\n */\nexport class TimeoutError extends Error {\n  constructor(message?: string) {\n    super(message);\n\n    // manually adjust prototype to retain `instanceof` functionality when targeting ES5, see:\n    // https://github.com/Microsoft/TypeScript-wiki/blob/main/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n    Object.setPrototypeOf(this, TimeoutError.prototype);\n  }\n}\n\n/**\n * Adds a timeout to a promise and rejects if the specified timeout has elapsed. Also rejects if the specified promise\n * rejects, and resolves if the specified promise resolves.\n *\n * <p> NOTE: this operation will continue even after it throws a {@link TimeoutError}.\n *\n * @param promise promise to use with timeout.\n * @param timeout the timeout in milliseconds until the returned promise is rejected.\n */\nexport function callWithTimeout<T>(\n  promise: Promise<T>,\n  timeout: number\n): Promise<T> {\n  let timeoutHandle: ReturnType<typeof setTimeout>;\n\n  const timeoutPromise = new Promise<never>(function timeoutFunction(\n    _resolve,\n    reject\n  ) {\n    timeoutHandle = setTimeout(function timeoutHandler() {\n      reject(new TimeoutError('Operation timed out.'));\n    }, timeout);\n  });\n\n  return Promise.race([promise, timeoutPromise]).then(\n    result => {\n      clearTimeout(timeoutHandle);\n      return result;\n    },\n    reason => {\n      clearTimeout(timeoutHandle);\n      throw reason;\n    }\n  );\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport function urlMatches(url: string, urlToMatch: string | RegExp): boolean {\n  if (typeof urlToMatch === 'string') {\n    return url === urlToMatch;\n  } else {\n    return !!url.match(urlToMatch);\n  }\n}\n/**\n * Check if {@param url} should be ignored when comparing against {@param ignoredUrls}\n * @param url\n * @param ignoredUrls\n */\nexport function isUrlIgnored(\n  url: string,\n  ignoredUrls?: Array<string | RegExp>\n): boolean {\n  if (!ignoredUrls) {\n    return false;\n  }\n\n  for (const ignoreUrl of ignoredUrls) {\n    if (urlMatches(url, ignoreUrl)) {\n      return true;\n    }\n  }\n  return false;\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ShimWrapped } from '../common/types';\n\n/**\n * Checks if certain function has been already wrapped\n * @param func\n */\nexport function isWrapped(func: unknown): func is ShimWrapped {\n  return (\n    typeof func === 'function' &&\n    typeof (func as ShimWrapped).__original === 'function' &&\n    typeof (func as ShimWrapped).__unwrap === 'function' &&\n    (func as ShimWrapped).__wrapped === true\n  );\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport class Deferred<T> {\n  private _promise: Promise<T>;\n  private _resolve!: (val: T) => void;\n  private _reject!: (error: unknown) => void;\n  constructor() {\n    this._promise = new Promise((resolve, reject) => {\n      this._resolve = resolve;\n      this._reject = reject;\n    });\n  }\n\n  get promise() {\n    return this._promise;\n  }\n\n  resolve(val: T) {\n    this._resolve(val);\n  }\n\n  reject(err: unknown) {\n    this._reject(err);\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Deferred } from './promise';\n\n/**\n * Bind the callback and only invoke the callback once regardless how many times `BindOnceFuture.call` is invoked.\n */\nexport class BindOnceFuture<\n  R,\n  This = unknown,\n  T extends (this: This, ...args: unknown[]) => R = () => R,\n> {\n  private _isCalled = false;\n  private _deferred = new Deferred<R>();\n  constructor(\n    private _callback: T,\n    private _that: This\n  ) {}\n\n  get isCalled() {\n    return this._isCalled;\n  }\n\n  get promise() {\n    return this._deferred.promise;\n  }\n\n  call(...args: Parameters<T>): Promise<R> {\n    if (!this._isCalled) {\n      this._isCalled = true;\n      try {\n        Promise.resolve(this._callback.call(this._that, ...args)).then(\n          val => this._deferred.resolve(val),\n          err => this._deferred.reject(err)\n        );\n      } catch (err) {\n        this._deferred.reject(err);\n      }\n    }\n    return this._deferred.promise;\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { context } from '@opentelemetry/api';\nimport { ExportResult } from '../ExportResult';\nimport { suppressTracing } from '../trace/suppress-tracing';\n\nexport interface Exporter<T> {\n  export(arg: T, resultCallback: (result: ExportResult) => void): void;\n}\n\n/**\n * @internal\n * Shared functionality used by Exporters while exporting data, including suppression of Traces.\n */\nexport function _export<T>(\n  exporter: Exporter<T>,\n  arg: T\n): Promise<ExportResult> {\n  return new Promise(resolve => {\n    // prevent downstream exporter calls from generating spans\n    context.with(suppressTracing(context.active()), () => {\n      exporter.export(arg, (result: ExportResult) => {\n        resolve(result);\n      });\n    });\n  });\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport * from './baggage/propagation/W3CBaggagePropagator';\nexport * from './common/anchored-clock';\nexport * from './common/attributes';\nexport * from './common/global-error-handler';\nexport * from './common/logging-error-handler';\nexport * from './common/time';\nexport * from './common/types';\nexport * from './common/hex-to-binary';\nexport * from './ExportResult';\nexport * as baggageUtils from './baggage/utils';\nexport * from './platform';\nexport * from './propagation/composite';\nexport * from './trace/W3CTraceContextPropagator';\nexport * from './trace/IdGenerator';\nexport * from './trace/rpc-metadata';\nexport * from './trace/sampler/AlwaysOffSampler';\nexport * from './trace/sampler/AlwaysOnSampler';\nexport * from './trace/sampler/ParentBasedSampler';\nexport * from './trace/sampler/TraceIdRatioBasedSampler';\nexport * from './trace/suppress-tracing';\nexport * from './trace/TraceState';\nexport * from './utils/environment';\nexport * from './utils/merge';\nexport * from './utils/sampling';\nexport * from './utils/timeout';\nexport * from './utils/url';\nexport * from './utils/wrap';\nexport * from './utils/callback';\nexport * from './version';\nimport { _export } from './internal/exporter';\nexport const internal = {\n  _export,\n};\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Event name definitions\nexport const ExceptionEventName = 'exception';\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Context,\n  diag,\n  Exception,\n  HrTime,\n  Link,\n  Span as APISpan,\n  SpanAttributes,\n  SpanAttributeValue,\n  SpanContext,\n  SpanKind,\n  SpanStatus,\n  SpanStatusCode,\n  TimeInput,\n} from '@opentelemetry/api';\nimport {\n  addHrTimes,\n  millisToHrTime,\n  getTimeOrigin,\n  hrTime,\n  hrTimeDuration,\n  InstrumentationLibrary,\n  isAttributeValue,\n  isTimeInput,\n  isTimeInputHrTime,\n  otperformance,\n  sanitizeAttributes,\n} from '@opentelemetry/core';\nimport { IResource } from '@opentelemetry/resources';\nimport {\n  SEMATTRS_EXCEPTION_MESSAGE,\n  SEMATTRS_EXCEPTION_STACKTRACE,\n  SEMATTRS_EXCEPTION_TYPE,\n} from '@opentelemetry/semantic-conventions';\nimport { ExceptionEventName } from './enums';\nimport { ReadableSpan } from './export/ReadableSpan';\nimport { SpanProcessor } from './SpanProcessor';\nimport { TimedEvent } from './TimedEvent';\nimport { Tracer } from './Tracer';\nimport { SpanLimits } from './types';\n\n/**\n * This class represents a span.\n */\nexport class Span implements APISpan, ReadableSpan {\n  // Below properties are included to implement ReadableSpan for export\n  // purposes but are not intended to be written-to directly.\n  private readonly _spanContext: SpanContext;\n  readonly kind: SpanKind;\n  readonly parentSpanId?: string;\n  readonly attributes: SpanAttributes = {};\n  readonly links: Link[] = [];\n  readonly events: TimedEvent[] = [];\n  readonly startTime: HrTime;\n  readonly resource: IResource;\n  readonly instrumentationLibrary: InstrumentationLibrary;\n\n  private _droppedAttributesCount = 0;\n  private _droppedEventsCount: number = 0;\n  private _droppedLinksCount: number = 0;\n\n  name: string;\n  status: SpanStatus = {\n    code: SpanStatusCode.UNSET,\n  };\n  endTime: HrTime = [0, 0];\n  private _ended = false;\n  private _duration: HrTime = [-1, -1];\n  private readonly _spanProcessor: SpanProcessor;\n  private readonly _spanLimits: SpanLimits;\n  private readonly _attributeValueLengthLimit: number;\n\n  private readonly _performanceStartTime: number;\n  private readonly _performanceOffset: number;\n  private readonly _startTimeProvided: boolean;\n\n  /**\n   * Constructs a new Span instance.\n   *\n   * @deprecated calling Span constructor directly is not supported. Please use tracer.startSpan.\n   * */\n  constructor(\n    parentTracer: Tracer,\n    context: Context,\n    spanName: string,\n    spanContext: SpanContext,\n    kind: SpanKind,\n    parentSpanId?: string,\n    links: Link[] = [],\n    startTime?: TimeInput,\n    _deprecatedClock?: unknown, // keeping this argument even though it is unused to ensure backwards compatibility\n    attributes?: SpanAttributes\n  ) {\n    this.name = spanName;\n    this._spanContext = spanContext;\n    this.parentSpanId = parentSpanId;\n    this.kind = kind;\n    this.links = links;\n\n    const now = Date.now();\n    this._performanceStartTime = otperformance.now();\n    this._performanceOffset =\n      now - (this._performanceStartTime + getTimeOrigin());\n    this._startTimeProvided = startTime != null;\n\n    this.startTime = this._getTime(startTime ?? now);\n\n    this.resource = parentTracer.resource;\n    this.instrumentationLibrary = parentTracer.instrumentationLibrary;\n    this._spanLimits = parentTracer.getSpanLimits();\n    this._attributeValueLengthLimit =\n      this._spanLimits.attributeValueLengthLimit || 0;\n\n    if (attributes != null) {\n      this.setAttributes(attributes);\n    }\n\n    this._spanProcessor = parentTracer.getActiveSpanProcessor();\n    this._spanProcessor.onStart(this, context);\n  }\n\n  spanContext(): SpanContext {\n    return this._spanContext;\n  }\n\n  setAttribute(key: string, value?: SpanAttributeValue): this;\n  setAttribute(key: string, value: unknown): this {\n    if (value == null || this._isSpanEnded()) return this;\n    if (key.length === 0) {\n      diag.warn(`Invalid attribute key: ${key}`);\n      return this;\n    }\n    if (!isAttributeValue(value)) {\n      diag.warn(`Invalid attribute value set for key: ${key}`);\n      return this;\n    }\n\n    if (\n      Object.keys(this.attributes).length >=\n        this._spanLimits.attributeCountLimit! &&\n      !Object.prototype.hasOwnProperty.call(this.attributes, key)\n    ) {\n      this._droppedAttributesCount++;\n      return this;\n    }\n    this.attributes[key] = this._truncateToSize(value);\n    return this;\n  }\n\n  setAttributes(attributes: SpanAttributes): this {\n    for (const [k, v] of Object.entries(attributes)) {\n      this.setAttribute(k, v);\n    }\n    return this;\n  }\n\n  /**\n   *\n   * @param name Span Name\n   * @param [attributesOrStartTime] Span attributes or start time\n   *     if type is {@type TimeInput} and 3rd param is undefined\n   * @param [timeStamp] Specified time stamp for the event\n   */\n  addEvent(\n    name: string,\n    attributesOrStartTime?: SpanAttributes | TimeInput,\n    timeStamp?: TimeInput\n  ): this {\n    if (this._isSpanEnded()) return this;\n    if (this._spanLimits.eventCountLimit === 0) {\n      diag.warn('No events allowed.');\n      this._droppedEventsCount++;\n      return this;\n    }\n    if (this.events.length >= this._spanLimits.eventCountLimit!) {\n      if (this._droppedEventsCount === 0) {\n        diag.debug('Dropping extra events.');\n      }\n      this.events.shift();\n      this._droppedEventsCount++;\n    }\n\n    if (isTimeInput(attributesOrStartTime)) {\n      if (!isTimeInput(timeStamp)) {\n        timeStamp = attributesOrStartTime;\n      }\n      attributesOrStartTime = undefined;\n    }\n\n    const attributes = sanitizeAttributes(attributesOrStartTime);\n\n    this.events.push({\n      name,\n      attributes,\n      time: this._getTime(timeStamp),\n      droppedAttributesCount: 0,\n    });\n    return this;\n  }\n\n  addLink(link: Link): this {\n    this.links.push(link);\n    return this;\n  }\n\n  addLinks(links: Link[]): this {\n    this.links.push(...links);\n    return this;\n  }\n\n  setStatus(status: SpanStatus): this {\n    if (this._isSpanEnded()) return this;\n    this.status = status;\n    return this;\n  }\n\n  updateName(name: string): this {\n    if (this._isSpanEnded()) return this;\n    this.name = name;\n    return this;\n  }\n\n  end(endTime?: TimeInput): void {\n    if (this._isSpanEnded()) {\n      diag.error(\n        `${this.name} ${this._spanContext.traceId}-${this._spanContext.spanId} - You can only call end() on a span once.`\n      );\n      return;\n    }\n    this._ended = true;\n\n    this.endTime = this._getTime(endTime);\n    this._duration = hrTimeDuration(this.startTime, this.endTime);\n\n    if (this._duration[0] < 0) {\n      diag.warn(\n        'Inconsistent start and end time, startTime > endTime. Setting span duration to 0ms.',\n        this.startTime,\n        this.endTime\n      );\n      this.endTime = this.startTime.slice() as HrTime;\n      this._duration = [0, 0];\n    }\n\n    if (this._droppedEventsCount > 0) {\n      diag.warn(\n        `Dropped ${this._droppedEventsCount} events because eventCountLimit reached`\n      );\n    }\n\n    this._spanProcessor.onEnd(this);\n  }\n\n  private _getTime(inp?: TimeInput): HrTime {\n    if (typeof inp === 'number' && inp < otperformance.now()) {\n      // must be a performance timestamp\n      // apply correction and convert to hrtime\n      return hrTime(inp + this._performanceOffset);\n    }\n\n    if (typeof inp === 'number') {\n      return millisToHrTime(inp);\n    }\n\n    if (inp instanceof Date) {\n      return millisToHrTime(inp.getTime());\n    }\n\n    if (isTimeInputHrTime(inp)) {\n      return inp;\n    }\n\n    if (this._startTimeProvided) {\n      // if user provided a time for the start manually\n      // we can't use duration to calculate event/end times\n      return millisToHrTime(Date.now());\n    }\n\n    const msDuration = otperformance.now() - this._performanceStartTime;\n    return addHrTimes(this.startTime, millisToHrTime(msDuration));\n  }\n\n  isRecording(): boolean {\n    return this._ended === false;\n  }\n\n  recordException(exception: Exception, time?: TimeInput): void {\n    const attributes: SpanAttributes = {};\n    if (typeof exception === 'string') {\n      attributes[SEMATTRS_EXCEPTION_MESSAGE] = exception;\n    } else if (exception) {\n      if (exception.code) {\n        attributes[SEMATTRS_EXCEPTION_TYPE] = exception.code.toString();\n      } else if (exception.name) {\n        attributes[SEMATTRS_EXCEPTION_TYPE] = exception.name;\n      }\n      if (exception.message) {\n        attributes[SEMATTRS_EXCEPTION_MESSAGE] = exception.message;\n      }\n      if (exception.stack) {\n        attributes[SEMATTRS_EXCEPTION_STACKTRACE] = exception.stack;\n      }\n    }\n\n    // these are minimum requirements from spec\n    if (\n      attributes[SEMATTRS_EXCEPTION_TYPE] ||\n      attributes[SEMATTRS_EXCEPTION_MESSAGE]\n    ) {\n      this.addEvent(ExceptionEventName, attributes, time);\n    } else {\n      diag.warn(`Failed to record an exception ${exception}`);\n    }\n  }\n\n  get duration(): HrTime {\n    return this._duration;\n  }\n\n  get ended(): boolean {\n    return this._ended;\n  }\n\n  get droppedAttributesCount(): number {\n    return this._droppedAttributesCount;\n  }\n\n  get droppedEventsCount(): number {\n    return this._droppedEventsCount;\n  }\n\n  get droppedLinksCount(): number {\n    return this._droppedLinksCount;\n  }\n\n  private _isSpanEnded(): boolean {\n    if (this._ended) {\n      diag.warn(\n        `Can not execute the operation on ended Span {traceId: ${this._spanContext.traceId}, spanId: ${this._spanContext.spanId}}`\n      );\n    }\n    return this._ended;\n  }\n\n  // Utility function to truncate given value within size\n  // for value type of string, will truncate to given limit\n  // for type of non-string, will return same value\n  private _truncateToLimitUtil(value: string, limit: number): string {\n    if (value.length <= limit) {\n      return value;\n    }\n    return value.substr(0, limit);\n  }\n\n  /**\n   * If the given attribute value is of type string and has more characters than given {@code attributeValueLengthLimit} then\n   * return string with truncated to {@code attributeValueLengthLimit} characters\n   *\n   * If the given attribute value is array of strings then\n   * return new array of strings with each element truncated to {@code attributeValueLengthLimit} characters\n   *\n   * Otherwise return same Attribute {@code value}\n   *\n   * @param value Attribute value\n   * @returns truncated attribute value if required, otherwise same value\n   */\n  private _truncateToSize(value: SpanAttributeValue): SpanAttributeValue {\n    const limit = this._attributeValueLengthLimit;\n    // Check limit\n    if (limit <= 0) {\n      // Negative values are invalid, so do not truncate\n      diag.warn(`Attribute value limit must be positive, got ${limit}`);\n      return value;\n    }\n\n    // String\n    if (typeof value === 'string') {\n      return this._truncateToLimitUtil(value, limit);\n    }\n\n    // Array of strings\n    if (Array.isArray(value)) {\n      return (value as []).map(val =>\n        typeof val === 'string' ? this._truncateToLimitUtil(val, limit) : val\n      );\n    }\n\n    // Other types, no need to apply value length limit\n    return value;\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Context,\n  Link,\n  SpanAttributes,\n  SpanKind,\n  TraceState,\n} from '@opentelemetry/api';\n\n/**\n * A sampling decision that determines how a {@link Span} will be recorded\n * and collected.\n */\nexport enum SamplingDecision {\n  /**\n   * `Span.isRecording() === false`, span will not be recorded and all events\n   * and attributes will be dropped.\n   */\n  NOT_RECORD,\n  /**\n   * `Span.isRecording() === true`, but `Sampled` flag in {@link TraceFlags}\n   * MUST NOT be set.\n   */\n  RECORD,\n  /**\n   * `Span.isRecording() === true` AND `Sampled` flag in {@link TraceFlags}\n   * MUST be set.\n   */\n  RECORD_AND_SAMPLED,\n}\n\n/**\n * A sampling result contains a decision for a {@link Span} and additional\n * attributes the sampler would like to added to the Span.\n */\nexport interface SamplingResult {\n  /**\n   * A sampling decision, refer to {@link SamplingDecision} for details.\n   */\n  decision: SamplingDecision;\n  /**\n   * The list of attributes returned by SamplingResult MUST be immutable.\n   * Caller may call {@link Sampler}.shouldSample any number of times and\n   * can safely cache the returned value.\n   */\n  attributes?: Readonly<SpanAttributes>;\n  /**\n   * A {@link TraceState} that will be associated with the {@link Span} through\n   * the new {@link SpanContext}. Samplers SHOULD return the TraceState from\n   * the passed-in {@link Context} if they do not intend to change it. Leaving\n   * the value undefined will also leave the TraceState unchanged.\n   */\n  traceState?: TraceState;\n}\n\n/**\n * This interface represent a sampler. Sampling is a mechanism to control the\n * noise and overhead introduced by OpenTelemetry by reducing the number of\n * samples of traces collected and sent to the backend.\n */\nexport interface Sampler {\n  /**\n   * Checks whether span needs to be created and tracked.\n   *\n   * @param context Parent Context which may contain a span.\n   * @param traceId of the span to be created. It can be different from the\n   *     traceId in the {@link SpanContext}. Typically in situations when the\n   *     span to be created starts a new trace.\n   * @param spanName of the span to be created.\n   * @param spanKind of the span to be created.\n   * @param attributes Initial set of SpanAttributes for the Span being constructed.\n   * @param links Collection of links that will be associated with the Span to\n   *     be created. Typically useful for batch operations.\n   * @returns a {@link SamplingResult}.\n   */\n  shouldSample(\n    context: Context,\n    traceId: string,\n    spanName: string,\n    spanKind: SpanKind,\n    attributes: SpanAttributes,\n    links: Link[]\n  ): SamplingResult;\n\n  /** Returns the sampler name or short description with the configuration. */\n  toString(): string;\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Sampler, SamplingDecision, SamplingResult } from '../Sampler';\n\n/** Sampler that samples no traces. */\nexport class AlwaysOffSampler implements Sampler {\n  shouldSample(): SamplingResult {\n    return {\n      decision: SamplingDecision.NOT_RECORD,\n    };\n  }\n\n  toString(): string {\n    return 'AlwaysOffSampler';\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Sampler, SamplingDecision, SamplingResult } from '../Sampler';\n\n/** Sampler that samples all traces. */\nexport class AlwaysOnSampler implements Sampler {\n  shouldSample(): SamplingResult {\n    return {\n      decision: SamplingDecision.RECORD_AND_SAMPLED,\n    };\n  }\n\n  toString(): string {\n    return 'AlwaysOnSampler';\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Context,\n  isSpanContextValid,\n  Link,\n  SpanAttributes,\n  SpanKind,\n  TraceFlags,\n  trace,\n} from '@opentelemetry/api';\nimport { globalErrorHandler } from '@opentelemetry/core';\nimport { AlwaysOffSampler } from './AlwaysOffSampler';\nimport { AlwaysOnSampler } from './AlwaysOnSampler';\nimport { Sampler, SamplingResult } from '../Sampler';\n\n/**\n * A composite sampler that either respects the parent span's sampling decision\n * or delegates to `delegateSampler` for root spans.\n */\nexport class ParentBasedSampler implements Sampler {\n  private _root: Sampler;\n  private _remoteParentSampled: Sampler;\n  private _remoteParentNotSampled: Sampler;\n  private _localParentSampled: Sampler;\n  private _localParentNotSampled: Sampler;\n\n  constructor(config: ParentBasedSamplerConfig) {\n    this._root = config.root;\n\n    if (!this._root) {\n      globalErrorHandler(\n        new Error('ParentBasedSampler must have a root sampler configured')\n      );\n      this._root = new AlwaysOnSampler();\n    }\n\n    this._remoteParentSampled =\n      config.remoteParentSampled ?? new AlwaysOnSampler();\n    this._remoteParentNotSampled =\n      config.remoteParentNotSampled ?? new AlwaysOffSampler();\n    this._localParentSampled =\n      config.localParentSampled ?? new AlwaysOnSampler();\n    this._localParentNotSampled =\n      config.localParentNotSampled ?? new AlwaysOffSampler();\n  }\n\n  shouldSample(\n    context: Context,\n    traceId: string,\n    spanName: string,\n    spanKind: SpanKind,\n    attributes: SpanAttributes,\n    links: Link[]\n  ): SamplingResult {\n    const parentContext = trace.getSpanContext(context);\n\n    if (!parentContext || !isSpanContextValid(parentContext)) {\n      return this._root.shouldSample(\n        context,\n        traceId,\n        spanName,\n        spanKind,\n        attributes,\n        links\n      );\n    }\n\n    if (parentContext.isRemote) {\n      if (parentContext.traceFlags & TraceFlags.SAMPLED) {\n        return this._remoteParentSampled.shouldSample(\n          context,\n          traceId,\n          spanName,\n          spanKind,\n          attributes,\n          links\n        );\n      }\n      return this._remoteParentNotSampled.shouldSample(\n        context,\n        traceId,\n        spanName,\n        spanKind,\n        attributes,\n        links\n      );\n    }\n\n    if (parentContext.traceFlags & TraceFlags.SAMPLED) {\n      return this._localParentSampled.shouldSample(\n        context,\n        traceId,\n        spanName,\n        spanKind,\n        attributes,\n        links\n      );\n    }\n\n    return this._localParentNotSampled.shouldSample(\n      context,\n      traceId,\n      spanName,\n      spanKind,\n      attributes,\n      links\n    );\n  }\n\n  toString(): string {\n    return `ParentBased{root=${this._root.toString()}, remoteParentSampled=${this._remoteParentSampled.toString()}, remoteParentNotSampled=${this._remoteParentNotSampled.toString()}, localParentSampled=${this._localParentSampled.toString()}, localParentNotSampled=${this._localParentNotSampled.toString()}}`;\n  }\n}\n\ninterface ParentBasedSamplerConfig {\n  /** Sampler called for spans with no parent */\n  root: Sampler;\n  /** Sampler called for spans with a remote parent which was sampled. Default AlwaysOn */\n  remoteParentSampled?: Sampler;\n  /** Sampler called for spans with a remote parent which was not sampled. Default AlwaysOff */\n  remoteParentNotSampled?: Sampler;\n  /** Sampler called for spans with a local parent which was sampled. Default AlwaysOn */\n  localParentSampled?: Sampler;\n  /** Sampler called for spans with a local parent which was not sampled. Default AlwaysOff */\n  localParentNotSampled?: Sampler;\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { isValidTraceId } from '@opentelemetry/api';\nimport { Sampler, SamplingDecision, SamplingResult } from '../Sampler';\n\n/** Sampler that samples a given fraction of traces based of trace id deterministically. */\nexport class TraceIdRatioBasedSampler implements Sampler {\n  private _upperBound: number;\n\n  constructor(private readonly _ratio: number = 0) {\n    this._ratio = this._normalize(_ratio);\n    this._upperBound = Math.floor(this._ratio * 0xffffffff);\n  }\n\n  shouldSample(context: unknown, traceId: string): SamplingResult {\n    return {\n      decision:\n        isValidTraceId(traceId) && this._accumulate(traceId) < this._upperBound\n          ? SamplingDecision.RECORD_AND_SAMPLED\n          : SamplingDecision.NOT_RECORD,\n    };\n  }\n\n  toString(): string {\n    return `TraceIdRatioBased{${this._ratio}}`;\n  }\n\n  private _normalize(ratio: number): number {\n    if (typeof ratio !== 'number' || isNaN(ratio)) return 0;\n    return ratio >= 1 ? 1 : ratio <= 0 ? 0 : ratio;\n  }\n\n  private _accumulate(traceId: string): number {\n    let accumulation = 0;\n    for (let i = 0; i < traceId.length / 8; i++) {\n      const pos = i * 8;\n      const part = parseInt(traceId.slice(pos, pos + 8), 16);\n      accumulation = (accumulation ^ part) >>> 0;\n    }\n    return accumulation;\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { diag } from '@opentelemetry/api';\nimport { getEnv, TracesSamplerValues, ENVIRONMENT } from '@opentelemetry/core';\nimport { Sampler } from './Sampler';\nimport { AlwaysOffSampler } from './sampler/AlwaysOffSampler';\nimport { AlwaysOnSampler } from './sampler/AlwaysOnSampler';\nimport { ParentBasedSampler } from './sampler/ParentBasedSampler';\nimport { TraceIdRatioBasedSampler } from './sampler/TraceIdRatioBasedSampler';\n\nconst env = getEnv();\nconst FALLBACK_OTEL_TRACES_SAMPLER = TracesSamplerValues.AlwaysOn;\nconst DEFAULT_RATIO = 1;\n\n/**\n * Load default configuration. For fields with primitive values, any user-provided\n * value will override the corresponding default value. For fields with\n * non-primitive values (like `spanLimits`), the user-provided value will be\n * used to extend the default value.\n */\n\n// object needs to be wrapped in this function and called when needed otherwise\n// envs are parsed before tests are ran - causes tests using these envs to fail\nexport function loadDefaultConfig() {\n  return {\n    sampler: buildSamplerFromEnv(env),\n    forceFlushTimeoutMillis: 30000,\n    generalLimits: {\n      attributeValueLengthLimit: getEnv().OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT,\n      attributeCountLimit: getEnv().OTEL_ATTRIBUTE_COUNT_LIMIT,\n    },\n    spanLimits: {\n      attributeValueLengthLimit:\n        getEnv().OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT,\n      attributeCountLimit: getEnv().OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT,\n      linkCountLimit: getEnv().OTEL_SPAN_LINK_COUNT_LIMIT,\n      eventCountLimit: getEnv().OTEL_SPAN_EVENT_COUNT_LIMIT,\n      attributePerEventCountLimit:\n        getEnv().OTEL_SPAN_ATTRIBUTE_PER_EVENT_COUNT_LIMIT,\n      attributePerLinkCountLimit:\n        getEnv().OTEL_SPAN_ATTRIBUTE_PER_LINK_COUNT_LIMIT,\n    },\n  };\n}\n\n/**\n * Based on environment, builds a sampler, complies with specification.\n * @param environment optional, by default uses getEnv(), but allows passing a value to reuse parsed environment\n */\nexport function buildSamplerFromEnv(\n  environment: Required<ENVIRONMENT> = getEnv()\n): Sampler {\n  switch (environment.OTEL_TRACES_SAMPLER) {\n    case TracesSamplerValues.AlwaysOn:\n      return new AlwaysOnSampler();\n    case TracesSamplerValues.AlwaysOff:\n      return new AlwaysOffSampler();\n    case TracesSamplerValues.ParentBasedAlwaysOn:\n      return new ParentBasedSampler({\n        root: new AlwaysOnSampler(),\n      });\n    case TracesSamplerValues.ParentBasedAlwaysOff:\n      return new ParentBasedSampler({\n        root: new AlwaysOffSampler(),\n      });\n    case TracesSamplerValues.TraceIdRatio:\n      return new TraceIdRatioBasedSampler(\n        getSamplerProbabilityFromEnv(environment)\n      );\n    case TracesSamplerValues.ParentBasedTraceIdRatio:\n      return new ParentBasedSampler({\n        root: new TraceIdRatioBasedSampler(\n          getSamplerProbabilityFromEnv(environment)\n        ),\n      });\n    default:\n      diag.error(\n        `OTEL_TRACES_SAMPLER value \"${environment.OTEL_TRACES_SAMPLER} invalid, defaulting to ${FALLBACK_OTEL_TRACES_SAMPLER}\".`\n      );\n      return new AlwaysOnSampler();\n  }\n}\n\nfunction getSamplerProbabilityFromEnv(\n  environment: Required<ENVIRONMENT>\n): number | undefined {\n  if (\n    environment.OTEL_TRACES_SAMPLER_ARG === undefined ||\n    environment.OTEL_TRACES_SAMPLER_ARG === ''\n  ) {\n    diag.error(\n      `OTEL_TRACES_SAMPLER_ARG is blank, defaulting to ${DEFAULT_RATIO}.`\n    );\n    return DEFAULT_RATIO;\n  }\n\n  const probability = Number(environment.OTEL_TRACES_SAMPLER_ARG);\n\n  if (isNaN(probability)) {\n    diag.error(\n      `OTEL_TRACES_SAMPLER_ARG=${environment.OTEL_TRACES_SAMPLER_ARG} was given, but it is invalid, defaulting to ${DEFAULT_RATIO}.`\n    );\n    return DEFAULT_RATIO;\n  }\n\n  if (probability < 0 || probability > 1) {\n    diag.error(\n      `OTEL_TRACES_SAMPLER_ARG=${environment.OTEL_TRACES_SAMPLER_ARG} was given, but it is out of range ([0..1]), defaulting to ${DEFAULT_RATIO}.`\n    );\n    return DEFAULT_RATIO;\n  }\n\n  return probability;\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { buildSamplerFromEnv, loadDefaultConfig } from './config';\nimport { Sampler } from './Sampler';\nimport { SpanLimits, TracerConfig, GeneralLimits } from './types';\nimport {\n  DEFAULT_ATTRIBUTE_COUNT_LIMIT,\n  DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT,\n  getEnvWithoutDefaults,\n} from '@opentelemetry/core';\n\n/**\n * Function to merge Default configuration (as specified in './config') with\n * user provided configurations.\n */\nexport function mergeConfig(userConfig: TracerConfig): TracerConfig & {\n  sampler: Sampler;\n  spanLimits: SpanLimits;\n  generalLimits: GeneralLimits;\n} {\n  const perInstanceDefaults: Partial<TracerConfig> = {\n    sampler: buildSamplerFromEnv(),\n  };\n\n  const DEFAULT_CONFIG = loadDefaultConfig();\n\n  const target = Object.assign(\n    {},\n    DEFAULT_CONFIG,\n    perInstanceDefaults,\n    userConfig\n  );\n\n  target.generalLimits = Object.assign(\n    {},\n    DEFAULT_CONFIG.generalLimits,\n    userConfig.generalLimits || {}\n  );\n\n  target.spanLimits = Object.assign(\n    {},\n    DEFAULT_CONFIG.spanLimits,\n    userConfig.spanLimits || {}\n  );\n\n  return target;\n}\n\n/**\n * When general limits are provided and model specific limits are not,\n * configures the model specific limits by using the values from the general ones.\n * @param userConfig User provided tracer configuration\n */\nexport function reconfigureLimits(userConfig: TracerConfig): TracerConfig {\n  const spanLimits = Object.assign({}, userConfig.spanLimits);\n\n  const parsedEnvConfig = getEnvWithoutDefaults();\n\n  /**\n   * Reassign span attribute count limit to use first non null value defined by user or use default value\n   */\n  spanLimits.attributeCountLimit =\n    userConfig.spanLimits?.attributeCountLimit ??\n    userConfig.generalLimits?.attributeCountLimit ??\n    parsedEnvConfig.OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT ??\n    parsedEnvConfig.OTEL_ATTRIBUTE_COUNT_LIMIT ??\n    DEFAULT_ATTRIBUTE_COUNT_LIMIT;\n\n  /**\n   * Reassign span attribute value length limit to use first non null value defined by user or use default value\n   */\n  spanLimits.attributeValueLengthLimit =\n    userConfig.spanLimits?.attributeValueLengthLimit ??\n    userConfig.generalLimits?.attributeValueLengthLimit ??\n    parsedEnvConfig.OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT ??\n    parsedEnvConfig.OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT ??\n    DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT;\n\n  return Object.assign({}, userConfig, { spanLimits });\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { context, Context, diag, TraceFlags } from '@opentelemetry/api';\nimport {\n  BindOnceFuture,\n  ExportResultCode,\n  getEnv,\n  globalErrorHandler,\n  suppressTracing,\n  unrefTimer,\n} from '@opentelemetry/core';\nimport { Span } from '../Span';\nimport { SpanProcessor } from '../SpanProcessor';\nimport { BufferConfig } from '../types';\nimport { ReadableSpan } from './ReadableSpan';\nimport { SpanExporter } from './SpanExporter';\n\n/**\n * Implementation of the {@link SpanProcessor} that batches spans exported by\n * the SDK then pushes them to the exporter pipeline.\n */\nexport abstract class BatchSpanProcessorBase<T extends BufferConfig>\n  implements SpanProcessor\n{\n  private readonly _maxExportBatchSize: number;\n  private readonly _maxQueueSize: number;\n  private readonly _scheduledDelayMillis: number;\n  private readonly _exportTimeoutMillis: number;\n\n  private _isExporting = false;\n  private _finishedSpans: ReadableSpan[] = [];\n  private _timer: NodeJS.Timeout | undefined;\n  private _shutdownOnce: BindOnceFuture<void>;\n  private _droppedSpansCount: number = 0;\n\n  constructor(\n    private readonly _exporter: SpanExporter,\n    config?: T\n  ) {\n    const env = getEnv();\n    this._maxExportBatchSize =\n      typeof config?.maxExportBatchSize === 'number'\n        ? config.maxExportBatchSize\n        : env.OTEL_BSP_MAX_EXPORT_BATCH_SIZE;\n    this._maxQueueSize =\n      typeof config?.maxQueueSize === 'number'\n        ? config.maxQueueSize\n        : env.OTEL_BSP_MAX_QUEUE_SIZE;\n    this._scheduledDelayMillis =\n      typeof config?.scheduledDelayMillis === 'number'\n        ? config.scheduledDelayMillis\n        : env.OTEL_BSP_SCHEDULE_DELAY;\n    this._exportTimeoutMillis =\n      typeof config?.exportTimeoutMillis === 'number'\n        ? config.exportTimeoutMillis\n        : env.OTEL_BSP_EXPORT_TIMEOUT;\n\n    this._shutdownOnce = new BindOnceFuture(this._shutdown, this);\n\n    if (this._maxExportBatchSize > this._maxQueueSize) {\n      diag.warn(\n        'BatchSpanProcessor: maxExportBatchSize must be smaller or equal to maxQueueSize, setting maxExportBatchSize to match maxQueueSize'\n      );\n      this._maxExportBatchSize = this._maxQueueSize;\n    }\n  }\n\n  forceFlush(): Promise<void> {\n    if (this._shutdownOnce.isCalled) {\n      return this._shutdownOnce.promise;\n    }\n    return this._flushAll();\n  }\n\n  // does nothing.\n  onStart(_span: Span, _parentContext: Context): void {}\n\n  onEnd(span: ReadableSpan): void {\n    if (this._shutdownOnce.isCalled) {\n      return;\n    }\n\n    if ((span.spanContext().traceFlags & TraceFlags.SAMPLED) === 0) {\n      return;\n    }\n\n    this._addToBuffer(span);\n  }\n\n  shutdown(): Promise<void> {\n    return this._shutdownOnce.call();\n  }\n\n  private _shutdown() {\n    return Promise.resolve()\n      .then(() => {\n        return this.onShutdown();\n      })\n      .then(() => {\n        return this._flushAll();\n      })\n      .then(() => {\n        return this._exporter.shutdown();\n      });\n  }\n\n  /** Add a span in the buffer. */\n  private _addToBuffer(span: ReadableSpan) {\n    if (this._finishedSpans.length >= this._maxQueueSize) {\n      // limit reached, drop span\n\n      if (this._droppedSpansCount === 0) {\n        diag.debug('maxQueueSize reached, dropping spans');\n      }\n      this._droppedSpansCount++;\n\n      return;\n    }\n\n    if (this._droppedSpansCount > 0) {\n      // some spans were dropped, log once with count of spans dropped\n      diag.warn(\n        `Dropped ${this._droppedSpansCount} spans because maxQueueSize reached`\n      );\n      this._droppedSpansCount = 0;\n    }\n\n    this._finishedSpans.push(span);\n    this._maybeStartTimer();\n  }\n\n  /**\n   * Send all spans to the exporter respecting the batch size limit\n   * This function is used only on forceFlush or shutdown,\n   * for all other cases _flush should be used\n   * */\n  private _flushAll(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      const promises = [];\n      // calculate number of batches\n      const count = Math.ceil(\n        this._finishedSpans.length / this._maxExportBatchSize\n      );\n      for (let i = 0, j = count; i < j; i++) {\n        promises.push(this._flushOneBatch());\n      }\n      Promise.all(promises)\n        .then(() => {\n          resolve();\n        })\n        .catch(reject);\n    });\n  }\n\n  private _flushOneBatch(): Promise<void> {\n    this._clearTimer();\n    if (this._finishedSpans.length === 0) {\n      return Promise.resolve();\n    }\n    return new Promise((resolve, reject) => {\n      const timer = setTimeout(() => {\n        // don't wait anymore for export, this way the next batch can start\n        reject(new Error('Timeout'));\n      }, this._exportTimeoutMillis);\n      // prevent downstream exporter calls from generating spans\n      context.with(suppressTracing(context.active()), () => {\n        // Reset the finished spans buffer here because the next invocations of the _flush method\n        // could pass the same finished spans to the exporter if the buffer is cleared\n        // outside the execution of this callback.\n        let spans: ReadableSpan[];\n        if (this._finishedSpans.length <= this._maxExportBatchSize) {\n          spans = this._finishedSpans;\n          this._finishedSpans = [];\n        } else {\n          spans = this._finishedSpans.splice(0, this._maxExportBatchSize);\n        }\n\n        const doExport = () =>\n          this._exporter.export(spans, result => {\n            clearTimeout(timer);\n            if (result.code === ExportResultCode.SUCCESS) {\n              resolve();\n            } else {\n              reject(\n                result.error ??\n                  new Error('BatchSpanProcessor: span export failed')\n              );\n            }\n          });\n\n        let pendingResources: Array<Promise<void>> | null = null;\n        for (let i = 0, len = spans.length; i < len; i++) {\n          const span = spans[i];\n          if (\n            span.resource.asyncAttributesPending &&\n            span.resource.waitForAsyncAttributes\n          ) {\n            pendingResources ??= [];\n            pendingResources.push(span.resource.waitForAsyncAttributes());\n          }\n        }\n\n        // Avoid scheduling a promise to make the behavior more predictable and easier to test\n        if (pendingResources === null) {\n          doExport();\n        } else {\n          Promise.all(pendingResources).then(doExport, err => {\n            globalErrorHandler(err);\n            reject(err);\n          });\n        }\n      });\n    });\n  }\n\n  private _maybeStartTimer() {\n    if (this._isExporting) return;\n    const flush = () => {\n      this._isExporting = true;\n      this._flushOneBatch()\n        .finally(() => {\n          this._isExporting = false;\n          if (this._finishedSpans.length > 0) {\n            this._clearTimer();\n            this._maybeStartTimer();\n          }\n        })\n        .catch(e => {\n          this._isExporting = false;\n          globalErrorHandler(e);\n        });\n    };\n    // we only wait if the queue doesn't have enough elements yet\n    if (this._finishedSpans.length >= this._maxExportBatchSize) {\n      return flush();\n    }\n    if (this._timer !== undefined) return;\n    this._timer = setTimeout(() => flush(), this._scheduledDelayMillis);\n    unrefTimer(this._timer);\n  }\n\n  private _clearTimer() {\n    if (this._timer !== undefined) {\n      clearTimeout(this._timer);\n      this._timer = undefined;\n    }\n  }\n\n  protected abstract onShutdown(): void;\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { BatchSpanProcessorBase } from '../../../export/BatchSpanProcessorBase';\nimport { BufferConfig } from '../../../types';\n\nexport class BatchSpanProcessor extends BatchSpanProcessorBase<BufferConfig> {\n  protected onShutdown(): void {}\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { IdGenerator } from '../../IdGenerator';\n\nconst SPAN_ID_BYTES = 8;\nconst TRACE_ID_BYTES = 16;\n\nexport class RandomIdGenerator implements IdGenerator {\n  /**\n   * Returns a random 16-byte trace ID formatted/encoded as a 32 lowercase hex\n   * characters corresponding to 128 bits.\n   */\n  generateTraceId = getIdGenerator(TRACE_ID_BYTES);\n\n  /**\n   * Returns a random 8-byte span ID formatted/encoded as a 16 lowercase hex\n   * characters corresponding to 64 bits.\n   */\n  generateSpanId = getIdGenerator(SPAN_ID_BYTES);\n}\n\nconst SHARED_BUFFER = Buffer.allocUnsafe(TRACE_ID_BYTES);\nfunction getIdGenerator(bytes: number): () => string {\n  return function generateId() {\n    for (let i = 0; i < bytes / 4; i++) {\n      // unsigned right shift drops decimal part of the number\n      // it is required because if a number between 2**32 and 2**32 - 1 is generated, an out of range error is thrown by writeUInt32BE\n      SHARED_BUFFER.writeUInt32BE((Math.random() * 2 ** 32) >>> 0, i * 4);\n    }\n\n    // If buffer is all 0, set the last byte to 1 to guarantee a valid w3c id is generated\n    for (let i = 0; i < bytes; i++) {\n      if (SHARED_BUFFER[i] > 0) {\n        break;\n      } else if (i === bytes - 1) {\n        SHARED_BUFFER[bytes - 1] = 1;\n      }\n    }\n\n    return SHARED_BUFFER.toString('hex', 0, bytes);\n  };\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport * from './export/BatchSpanProcessor';\nexport * from './RandomIdGenerator';\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport * from './node';\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as api from '@opentelemetry/api';\nimport {\n  InstrumentationLibrary,\n  sanitizeAttributes,\n  isTracingSuppressed,\n} from '@opentelemetry/core';\nimport { IResource } from '@opentelemetry/resources';\nimport { BasicTracerProvider } from './BasicTracerProvider';\nimport { Span } from './Span';\nimport { GeneralLimits, SpanLimits, TracerConfig } from './types';\nimport { mergeConfig } from './utility';\nimport { SpanProcessor } from './SpanProcessor';\nimport { Sampler } from './Sampler';\nimport { IdGenerator } from './IdGenerator';\nimport { RandomIdGenerator } from './platform';\n\n/**\n * This class represents a basic tracer.\n */\nexport class Tracer implements api.Tracer {\n  private readonly _sampler: Sampler;\n  private readonly _generalLimits: GeneralLimits;\n  private readonly _spanLimits: SpanLimits;\n  private readonly _idGenerator: IdGenerator;\n  readonly resource: IResource;\n  readonly instrumentationLibrary: InstrumentationLibrary;\n\n  /**\n   * Constructs a new Tracer instance.\n   */\n  constructor(\n    instrumentationLibrary: InstrumentationLibrary,\n    config: TracerConfig,\n    private _tracerProvider: BasicTracerProvider\n  ) {\n    const localConfig = mergeConfig(config);\n    this._sampler = localConfig.sampler;\n    this._generalLimits = localConfig.generalLimits;\n    this._spanLimits = localConfig.spanLimits;\n    this._idGenerator = config.idGenerator || new RandomIdGenerator();\n    this.resource = _tracerProvider.resource;\n    this.instrumentationLibrary = instrumentationLibrary;\n  }\n\n  /**\n   * Starts a new Span or returns the default NoopSpan based on the sampling\n   * decision.\n   */\n  startSpan(\n    name: string,\n    options: api.SpanOptions = {},\n    context = api.context.active()\n  ): api.Span {\n    // remove span from context in case a root span is requested via options\n    if (options.root) {\n      context = api.trace.deleteSpan(context);\n    }\n    const parentSpan = api.trace.getSpan(context);\n\n    if (isTracingSuppressed(context)) {\n      api.diag.debug('Instrumentation suppressed, returning Noop Span');\n      const nonRecordingSpan = api.trace.wrapSpanContext(\n        api.INVALID_SPAN_CONTEXT\n      );\n      return nonRecordingSpan;\n    }\n\n    const parentSpanContext = parentSpan?.spanContext();\n    const spanId = this._idGenerator.generateSpanId();\n    let traceId;\n    let traceState;\n    let parentSpanId;\n    if (\n      !parentSpanContext ||\n      !api.trace.isSpanContextValid(parentSpanContext)\n    ) {\n      // New root span.\n      traceId = this._idGenerator.generateTraceId();\n    } else {\n      // New child span.\n      traceId = parentSpanContext.traceId;\n      traceState = parentSpanContext.traceState;\n      parentSpanId = parentSpanContext.spanId;\n    }\n\n    const spanKind = options.kind ?? api.SpanKind.INTERNAL;\n    const links = (options.links ?? []).map(link => {\n      return {\n        context: link.context,\n        attributes: sanitizeAttributes(link.attributes),\n      };\n    });\n    const attributes = sanitizeAttributes(options.attributes);\n    // make sampling decision\n    const samplingResult = this._sampler.shouldSample(\n      context,\n      traceId,\n      name,\n      spanKind,\n      attributes,\n      links\n    );\n\n    traceState = samplingResult.traceState ?? traceState;\n\n    const traceFlags =\n      samplingResult.decision === api.SamplingDecision.RECORD_AND_SAMPLED\n        ? api.TraceFlags.SAMPLED\n        : api.TraceFlags.NONE;\n    const spanContext = { traceId, spanId, traceFlags, traceState };\n    if (samplingResult.decision === api.SamplingDecision.NOT_RECORD) {\n      api.diag.debug(\n        'Recording is off, propagating context in a non-recording span'\n      );\n      const nonRecordingSpan = api.trace.wrapSpanContext(spanContext);\n      return nonRecordingSpan;\n    }\n\n    // Set initial span attributes. The attributes object may have been mutated\n    // by the sampler, so we sanitize the merged attributes before setting them.\n    const initAttributes = sanitizeAttributes(\n      Object.assign(attributes, samplingResult.attributes)\n    );\n\n    const span = new Span(\n      this,\n      context,\n      name,\n      spanContext,\n      spanKind,\n      parentSpanId,\n      links,\n      options.startTime,\n      undefined,\n      initAttributes\n    );\n    return span;\n  }\n\n  /**\n   * Starts a new {@link Span} and calls the given function passing it the\n   * created span as first argument.\n   * Additionally the new span gets set in context and this context is activated\n   * for the duration of the function call.\n   *\n   * @param name The name of the span\n   * @param [options] SpanOptions used for span creation\n   * @param [context] Context to use to extract parent\n   * @param fn function called in the context of the span and receives the newly created span as an argument\n   * @returns return value of fn\n   * @example\n   *   const something = tracer.startActiveSpan('op', span => {\n   *     try {\n   *       do some work\n   *       span.setStatus({code: SpanStatusCode.OK});\n   *       return something;\n   *     } catch (err) {\n   *       span.setStatus({\n   *         code: SpanStatusCode.ERROR,\n   *         message: err.message,\n   *       });\n   *       throw err;\n   *     } finally {\n   *       span.end();\n   *     }\n   *   });\n   * @example\n   *   const span = tracer.startActiveSpan('op', span => {\n   *     try {\n   *       do some work\n   *       return span;\n   *     } catch (err) {\n   *       span.setStatus({\n   *         code: SpanStatusCode.ERROR,\n   *         message: err.message,\n   *       });\n   *       throw err;\n   *     }\n   *   });\n   *   do some more work\n   *   span.end();\n   */\n  startActiveSpan<F extends (span: api.Span) => ReturnType<F>>(\n    name: string,\n    fn: F\n  ): ReturnType<F>;\n  startActiveSpan<F extends (span: api.Span) => ReturnType<F>>(\n    name: string,\n    opts: api.SpanOptions,\n    fn: F\n  ): ReturnType<F>;\n  startActiveSpan<F extends (span: api.Span) => ReturnType<F>>(\n    name: string,\n    opts: api.SpanOptions,\n    ctx: api.Context,\n    fn: F\n  ): ReturnType<F>;\n  startActiveSpan<F extends (span: api.Span) => ReturnType<F>>(\n    name: string,\n    arg2?: F | api.SpanOptions,\n    arg3?: F | api.Context,\n    arg4?: F\n  ): ReturnType<F> | undefined {\n    let opts: api.SpanOptions | undefined;\n    let ctx: api.Context | undefined;\n    let fn: F;\n\n    if (arguments.length < 2) {\n      return;\n    } else if (arguments.length === 2) {\n      fn = arg2 as F;\n    } else if (arguments.length === 3) {\n      opts = arg2 as api.SpanOptions | undefined;\n      fn = arg3 as F;\n    } else {\n      opts = arg2 as api.SpanOptions | undefined;\n      ctx = arg3 as api.Context | undefined;\n      fn = arg4 as F;\n    }\n\n    const parentContext = ctx ?? api.context.active();\n    const span = this.startSpan(name, opts, parentContext);\n    const contextWithSpanSet = api.trace.setSpan(parentContext, span);\n\n    return api.context.with(contextWithSpanSet, fn, undefined, span);\n  }\n\n  /** Returns the active {@link GeneralLimits}. */\n  getGeneralLimits(): GeneralLimits {\n    return this._generalLimits;\n  }\n\n  /** Returns the active {@link SpanLimits}. */\n  getSpanLimits(): SpanLimits {\n    return this._spanLimits;\n  }\n\n  getActiveSpanProcessor(): SpanProcessor {\n    return this._tracerProvider.getActiveSpanProcessor();\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport function defaultServiceName(): string {\n  return `unknown_service:${process.argv0}`;\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport { defaultServiceName } from './default-service-name';\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport { defaultServiceName } from './node';\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { diag } from '@opentelemetry/api';\nimport {\n  SEMRESATTRS_SERVICE_NAME,\n  SEMRESATTRS_TELEMETRY_SDK_LANGUAGE,\n  SEMRESATTRS_TELEMETRY_SDK_NAME,\n  SEMRESATTRS_TELEMETRY_SDK_VERSION,\n} from '@opentelemetry/semantic-conventions';\nimport { SDK_INFO } from '@opentelemetry/core';\nimport { ResourceAttributes } from './types';\nimport { defaultServiceName } from './platform';\nimport { IResource } from './IResource';\n\n/**\n * A Resource describes the entity for which a signals (metrics or trace) are\n * collected.\n */\nexport class Resource implements IResource {\n  static readonly EMPTY = new Resource({});\n  private _syncAttributes?: ResourceAttributes;\n  private _asyncAttributesPromise?: Promise<ResourceAttributes>;\n  private _attributes?: ResourceAttributes;\n\n  /**\n   * Check if async attributes have resolved. This is useful to avoid awaiting\n   * waitForAsyncAttributes (which will introduce asynchronous behavior) when not necessary.\n   *\n   * @returns true if the resource \"attributes\" property is not yet settled to its final value\n   */\n  public asyncAttributesPending?: boolean;\n\n  /**\n   * Returns an empty Resource\n   */\n  static empty(): IResource {\n    return Resource.EMPTY;\n  }\n\n  /**\n   * Returns a Resource that identifies the SDK in use.\n   */\n  static default(): IResource {\n    return new Resource({\n      [SEMRESATTRS_SERVICE_NAME]: defaultServiceName(),\n      [SEMRESATTRS_TELEMETRY_SDK_LANGUAGE]:\n        SDK_INFO[SEMRESATTRS_TELEMETRY_SDK_LANGUAGE],\n      [SEMRESATTRS_TELEMETRY_SDK_NAME]:\n        SDK_INFO[SEMRESATTRS_TELEMETRY_SDK_NAME],\n      [SEMRESATTRS_TELEMETRY_SDK_VERSION]:\n        SDK_INFO[SEMRESATTRS_TELEMETRY_SDK_VERSION],\n    });\n  }\n\n  constructor(\n    /**\n     * A dictionary of attributes with string keys and values that provide\n     * information about the entity as numbers, strings or booleans\n     * TODO: Consider to add check/validation on attributes.\n     */\n    attributes: ResourceAttributes,\n    asyncAttributesPromise?: Promise<ResourceAttributes>\n  ) {\n    this._attributes = attributes;\n    this.asyncAttributesPending = asyncAttributesPromise != null;\n    this._syncAttributes = this._attributes ?? {};\n    this._asyncAttributesPromise = asyncAttributesPromise?.then(\n      asyncAttributes => {\n        this._attributes = Object.assign({}, this._attributes, asyncAttributes);\n        this.asyncAttributesPending = false;\n        return asyncAttributes;\n      },\n      err => {\n        diag.debug(\"a resource's async attributes promise rejected: %s\", err);\n        this.asyncAttributesPending = false;\n        return {};\n      }\n    );\n  }\n\n  get attributes(): ResourceAttributes {\n    if (this.asyncAttributesPending) {\n      diag.error(\n        'Accessing resource attributes before async attributes settled'\n      );\n    }\n\n    return this._attributes ?? {};\n  }\n\n  /**\n   * Returns a promise that will never be rejected. Resolves when all async attributes have finished being added to\n   * this Resource's attributes. This is useful in exporters to block until resource detection\n   * has finished.\n   */\n  async waitForAsyncAttributes?(): Promise<void> {\n    if (this.asyncAttributesPending) {\n      await this._asyncAttributesPromise;\n    }\n  }\n\n  /**\n   * Returns a new, merged {@link Resource} by merging the current Resource\n   * with the other Resource. In case of a collision, other Resource takes\n   * precedence.\n   *\n   * @param other the Resource that will be merged with this.\n   * @returns the newly merged Resource.\n   */\n  merge(other: IResource | null): IResource {\n    if (!other) return this;\n\n    // SpanAttributes from other resource overwrite attributes from this resource.\n    const mergedSyncAttributes = {\n      ...this._syncAttributes,\n      //Support for old resource implementation where _syncAttributes is not defined\n      ...((other as Resource)._syncAttributes ?? other.attributes),\n    };\n\n    if (\n      !this._asyncAttributesPromise &&\n      !(other as Resource)._asyncAttributesPromise\n    ) {\n      return new Resource(mergedSyncAttributes);\n    }\n\n    const mergedAttributesPromise = Promise.all([\n      this._asyncAttributesPromise,\n      (other as Resource)._asyncAttributesPromise,\n    ]).then(([thisAsyncAttributes, otherAsyncAttributes]) => {\n      return {\n        ...this._syncAttributes,\n        ...thisAsyncAttributes,\n        //Support for old resource implementation where _syncAttributes is not defined\n        ...((other as Resource)._syncAttributes ?? other.attributes),\n        ...otherAsyncAttributes,\n      };\n    });\n\n    return new Resource(mergedSyncAttributes, mergedAttributesPromise);\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport const normalizeArch = (nodeArchString: string): string => {\n  // Maps from https://nodejs.org/api/os.html#osarch to arch values in spec:\n  // https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/resource/semantic_conventions/host.md\n  switch (nodeArchString) {\n    case 'arm':\n      return 'arm32';\n    case 'ppc':\n      return 'ppc32';\n    case 'x64':\n      return 'amd64';\n    default:\n      return nodeArchString;\n  }\n};\n\nexport const normalizeType = (nodePlatform: string): string => {\n  // Maps from https://nodejs.org/api/os.html#osplatform to arch values in spec:\n  // https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/resource/semantic_conventions/os.md\n  switch (nodePlatform) {\n    case 'sunos':\n      return 'solaris';\n    case 'win32':\n      return 'windows';\n    default:\n      return nodePlatform;\n  }\n};\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as child_process from 'child_process';\nimport * as util from 'util';\n\nexport const execAsync = util.promisify(child_process.exec);\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { execAsync } from './execAsync';\nimport { diag } from '@opentelemetry/api';\n\nexport async function getMachineId(): Promise<string> {\n  try {\n    const result = await execAsync('ioreg -rd1 -c \"IOPlatformExpertDevice\"');\n\n    const idLine = result.stdout\n      .split('\\n')\n      .find(line => line.includes('IOPlatformUUID'));\n\n    if (!idLine) {\n      return '';\n    }\n\n    const parts = idLine.split('\" = \"');\n    if (parts.length === 2) {\n      return parts[1].slice(0, -1);\n    }\n  } catch (e) {\n    diag.debug(`error reading machine id: ${e}`);\n  }\n\n  return '';\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { promises as fs } from 'fs';\nimport { diag } from '@opentelemetry/api';\n\nexport async function getMachineId(): Promise<string> {\n  const paths = ['/etc/machine-id', '/var/lib/dbus/machine-id'];\n\n  for (const path of paths) {\n    try {\n      const result = await fs.readFile(path, { encoding: 'utf8' });\n      return result.trim();\n    } catch (e) {\n      diag.debug(`error reading machine id: ${e}`);\n    }\n  }\n\n  return '';\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { promises as fs } from 'fs';\nimport { execAsync } from './execAsync';\nimport { diag } from '@opentelemetry/api';\n\nexport async function getMachineId(): Promise<string> {\n  try {\n    const result = await fs.readFile('/etc/hostid', { encoding: 'utf8' });\n    return result.trim();\n  } catch (e) {\n    diag.debug(`error reading machine id: ${e}`);\n  }\n\n  try {\n    const result = await execAsync('kenv -q smbios.system.uuid');\n    return result.stdout.trim();\n  } catch (e) {\n    diag.debug(`error reading machine id: ${e}`);\n  }\n\n  return '';\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as process from 'process';\nimport { execAsync } from './execAsync';\nimport { diag } from '@opentelemetry/api';\n\nexport async function getMachineId(): Promise<string> {\n  const args =\n    'QUERY HKEY_LOCAL_MACHINE\\\\SOFTWARE\\\\Microsoft\\\\Cryptography /v MachineGuid';\n  let command = '%windir%\\\\System32\\\\REG.exe';\n  if (process.arch === 'ia32' && 'PROCESSOR_ARCHITEW6432' in process.env) {\n    command = '%windir%\\\\sysnative\\\\cmd.exe /c ' + command;\n  }\n\n  try {\n    const result = await execAsync(`${command} ${args}`);\n    const parts = result.stdout.split('REG_SZ');\n    if (parts.length === 2) {\n      return parts[1].trim();\n    }\n  } catch (e) {\n    diag.debug(`error reading machine id: ${e}`);\n  }\n\n  return '';\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { diag } from '@opentelemetry/api';\n\nexport async function getMachineId(): Promise<string> {\n  diag.debug('could not read machine-id: unsupported platform');\n  return '';\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as process from 'process';\n\nlet getMachineId: () => Promise<string>;\n\nswitch (process.platform) {\n  case 'darwin':\n    ({ getMachineId } = require('./getMachineId-darwin'));\n    break;\n  case 'linux':\n    ({ getMachineId } = require('./getMachineId-linux'));\n    break;\n  case 'freebsd':\n    ({ getMachineId } = require('./getMachineId-bsd'));\n    break;\n  case 'win32':\n    ({ getMachineId } = require('./getMachineId-win'));\n    break;\n  default:\n    ({ getMachineId } = require('./getMachineId-unsupported'));\n}\n\nexport { getMachineId };\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  SEMRESATTRS_HOST_ARCH,\n  SEMRESATTRS_HOST_ID,\n  SEMRESATTRS_HOST_NAME,\n} from '@opentelemetry/semantic-conventions';\nimport { Resource } from '../../../Resource';\nimport { DetectorSync, ResourceAttributes } from '../../../types';\nimport { ResourceDetectionConfig } from '../../../config';\nimport { arch, hostname } from 'os';\nimport { normalizeArch } from './utils';\nimport { getMachineId } from './machine-id/getMachineId';\n\n/**\n * HostDetectorSync detects the resources related to the host current process is\n * running on. Currently only non-cloud-based attributes are included.\n */\nclass HostDetectorSync implements DetectorSync {\n  detect(_config?: ResourceDetectionConfig): Resource {\n    const attributes: ResourceAttributes = {\n      [SEMRESATTRS_HOST_NAME]: hostname(),\n      [SEMRESATTRS_HOST_ARCH]: normalizeArch(arch()),\n    };\n\n    return new Resource(attributes, this._getAsyncAttributes());\n  }\n\n  private _getAsyncAttributes(): Promise<ResourceAttributes> {\n    return getMachineId().then(machineId => {\n      const attributes: ResourceAttributes = {};\n      if (machineId) {\n        attributes[SEMRESATTRS_HOST_ID] = machineId;\n      }\n      return attributes;\n    });\n  }\n}\n\nexport const hostDetectorSync = new HostDetectorSync();\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Detector } from '../../../types';\nimport { ResourceDetectionConfig } from '../../../config';\nimport { IResource } from '../../../IResource';\nimport { hostDetectorSync } from './HostDetectorSync';\n\n/**\n * HostDetector detects the resources related to the host current process is\n * running on. Currently only non-cloud-based attributes are included.\n */\nclass HostDetector implements Detector {\n  detect(_config?: ResourceDetectionConfig): Promise<IResource> {\n    return Promise.resolve(hostDetectorSync.detect(_config));\n  }\n}\n\nexport const hostDetector = new HostDetector();\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  SEMRESATTRS_OS_TYPE,\n  SEMRESATTRS_OS_VERSION,\n} from '@opentelemetry/semantic-conventions';\nimport { Resource } from '../../../Resource';\nimport { DetectorSync, ResourceAttributes } from '../../../types';\nimport { ResourceDetectionConfig } from '../../../config';\nimport { platform, release } from 'os';\nimport { normalizeType } from './utils';\n\n/**\n * OSDetectorSync detects the resources related to the operating system (OS) on\n * which the process represented by this resource is running.\n */\nclass OSDetectorSync implements DetectorSync {\n  detect(_config?: ResourceDetectionConfig): Resource {\n    const attributes: ResourceAttributes = {\n      [SEMRESATTRS_OS_TYPE]: normalizeType(platform()),\n      [SEMRESATTRS_OS_VERSION]: release(),\n    };\n    return new Resource(attributes);\n  }\n}\n\nexport const osDetectorSync = new OSDetectorSync();\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Detector } from '../../../types';\nimport { ResourceDetectionConfig } from '../../../config';\nimport { IResource } from '../../../IResource';\nimport { osDetectorSync } from './OSDetectorSync';\n\n/**\n * OSDetector detects the resources related to the operating system (OS) on\n * which the process represented by this resource is running.\n */\nclass OSDetector implements Detector {\n  detect(_config?: ResourceDetectionConfig): Promise<IResource> {\n    return Promise.resolve(osDetectorSync.detect(_config));\n  }\n}\n\nexport const osDetector = new OSDetector();\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { diag } from '@opentelemetry/api';\nimport {\n  SEMRESATTRS_PROCESS_COMMAND,\n  SEMRESATTRS_PROCESS_COMMAND_ARGS,\n  SEMRESATTRS_PROCESS_EXECUTABLE_NAME,\n  SEMRESATTRS_PROCESS_EXECUTABLE_PATH,\n  SEMRESATTRS_PROCESS_OWNER,\n  SEMRESATTRS_PROCESS_PID,\n  SEMRESATTRS_PROCESS_RUNTIME_DESCRIPTION,\n  SEMRESATTRS_PROCESS_RUNTIME_NAME,\n  SEMRESATTRS_PROCESS_RUNTIME_VERSION,\n} from '@opentelemetry/semantic-conventions';\nimport { Resource } from '../../../Resource';\nimport { DetectorSync, ResourceAttributes } from '../../../types';\nimport { ResourceDetectionConfig } from '../../../config';\nimport { IResource } from '../../../IResource';\nimport * as os from 'os';\n\n/**\n * ProcessDetectorSync will be used to detect the resources related current process running\n * and being instrumented from the NodeJS Process module.\n */\nclass ProcessDetectorSync implements DetectorSync {\n  detect(_config?: ResourceDetectionConfig): IResource {\n    const attributes: ResourceAttributes = {\n      [SEMRESATTRS_PROCESS_PID]: process.pid,\n      [SEMRESATTRS_PROCESS_EXECUTABLE_NAME]: process.title,\n      [SEMRESATTRS_PROCESS_EXECUTABLE_PATH]: process.execPath,\n      [SEMRESATTRS_PROCESS_COMMAND_ARGS]: [\n        process.argv[0],\n        ...process.execArgv,\n        ...process.argv.slice(1),\n      ],\n      [SEMRESATTRS_PROCESS_RUNTIME_VERSION]: process.versions.node,\n      [SEMRESATTRS_PROCESS_RUNTIME_NAME]: 'nodejs',\n      [SEMRESATTRS_PROCESS_RUNTIME_DESCRIPTION]: 'Node.js',\n    };\n\n    if (process.argv.length > 1) {\n      attributes[SEMRESATTRS_PROCESS_COMMAND] = process.argv[1];\n    }\n\n    try {\n      const userInfo = os.userInfo();\n      attributes[SEMRESATTRS_PROCESS_OWNER] = userInfo.username;\n    } catch (e) {\n      diag.debug(`error obtaining process owner: ${e}`);\n    }\n\n    return new Resource(attributes);\n  }\n}\n\nexport const processDetectorSync = new ProcessDetectorSync();\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Detector } from '../../../types';\nimport { ResourceDetectionConfig } from '../../../config';\nimport { IResource } from '../../../IResource';\nimport { processDetectorSync } from './ProcessDetectorSync';\n\n/**\n * ProcessDetector will be used to detect the resources related current process running\n * and being instrumented from the NodeJS Process module.\n */\nclass ProcessDetector implements Detector {\n  detect(config?: ResourceDetectionConfig): Promise<IResource> {\n    return Promise.resolve(processDetectorSync.detect(config));\n  }\n}\n\nexport const processDetector = new ProcessDetector();\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SEMRESATTRS_SERVICE_INSTANCE_ID } from '@opentelemetry/semantic-conventions';\nimport { Resource } from '../../../Resource';\nimport { DetectorSync, ResourceAttributes } from '../../../types';\nimport { ResourceDetectionConfig } from '../../../config';\nimport { randomUUID } from 'crypto';\n\n/**\n * ServiceInstanceIdDetectorSync detects the resources related to the service instance ID.\n */\nclass ServiceInstanceIdDetectorSync implements DetectorSync {\n  detect(_config?: ResourceDetectionConfig): Resource {\n    const attributes: ResourceAttributes = {\n      [SEMRESATTRS_SERVICE_INSTANCE_ID]: randomUUID(),\n    };\n\n    return new Resource(attributes);\n  }\n}\n\n/**\n * @experimental\n */\nexport const serviceInstanceIdDetectorSync =\n  new ServiceInstanceIdDetectorSync();\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport { hostDetector } from './HostDetector';\nexport { hostDetectorSync } from './HostDetectorSync';\nexport { osDetector } from './OSDetector';\nexport { osDetectorSync } from './OSDetectorSync';\nexport { processDetector } from './ProcessDetector';\nexport { processDetectorSync } from './ProcessDetectorSync';\nexport { serviceInstanceIdDetectorSync } from './ServiceInstanceIdDetectorSync';\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport {\n  hostDetector,\n  hostDetectorSync,\n  osDetector,\n  osDetectorSync,\n  processDetector,\n  processDetectorSync,\n  serviceInstanceIdDetectorSync,\n} from './node';\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  SEMRESATTRS_PROCESS_RUNTIME_DESCRIPTION,\n  SEMRESATTRS_PROCESS_RUNTIME_NAME,\n  SEMRESATTRS_PROCESS_RUNTIME_VERSION,\n} from '@opentelemetry/semantic-conventions';\nimport { DetectorSync, ResourceAttributes } from '../types';\nimport { diag } from '@opentelemetry/api';\nimport { ResourceDetectionConfig } from '../config';\nimport { IResource } from '../IResource';\nimport { Resource } from '../Resource';\n\n/**\n * BrowserDetectorSync will be used to detect the resources related to browser.\n */\nclass BrowserDetectorSync implements DetectorSync {\n  detect(config?: ResourceDetectionConfig): IResource {\n    const isBrowser =\n      typeof navigator !== 'undefined' &&\n      global.process?.versions?.node === undefined && // Node.js v21 adds `navigator`\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore don't have Bun types\n      global.Bun?.version === undefined; // Bun (bun.sh) defines `navigator`\n    if (!isBrowser) {\n      return Resource.empty();\n    }\n    const browserResource: ResourceAttributes = {\n      [SEMRESATTRS_PROCESS_RUNTIME_NAME]: 'browser',\n      [SEMRESATTRS_PROCESS_RUNTIME_DESCRIPTION]: 'Web Browser',\n      [SEMRESATTRS_PROCESS_RUNTIME_VERSION]: navigator.userAgent,\n    };\n    return this._getResourceAttributes(browserResource, config);\n  }\n  /**\n   * Validates process resource attribute map from process variables\n   *\n   * @param browserResource The un-sanitized resource attributes from process as key/value pairs.\n   * @param config: Config\n   * @returns The sanitized resource attributes.\n   */\n  private _getResourceAttributes(\n    browserResource: ResourceAttributes,\n    _config?: ResourceDetectionConfig\n  ) {\n    if (browserResource[SEMRESATTRS_PROCESS_RUNTIME_VERSION] === '') {\n      diag.debug(\n        'BrowserDetector failed: Unable to find required browser resources. '\n      );\n      return Resource.empty();\n    } else {\n      return new Resource({\n        ...browserResource,\n      });\n    }\n  }\n}\n\nexport const browserDetectorSync = new BrowserDetectorSync();\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { IResource } from '../IResource';\nimport { ResourceDetectionConfig } from '../config';\nimport { Detector } from '../types';\nimport { browserDetectorSync } from './BrowserDetectorSync';\n\n/**\n * BrowserDetector will be used to detect the resources related to browser.\n */\nclass BrowserDetector implements Detector {\n  detect(config?: ResourceDetectionConfig): Promise<IResource> {\n    return Promise.resolve(browserDetectorSync.detect(config));\n  }\n}\n\nexport const browserDetector = new BrowserDetector();\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { diag } from '@opentelemetry/api';\nimport { getEnv } from '@opentelemetry/core';\nimport { SEMRESATTRS_SERVICE_NAME } from '@opentelemetry/semantic-conventions';\nimport { Resource } from '../Resource';\nimport { DetectorSync, ResourceAttributes } from '../types';\nimport { ResourceDetectionConfig } from '../config';\nimport { IResource } from '../IResource';\n\n/**\n * EnvDetectorSync can be used to detect the presence of and create a Resource\n * from the OTEL_RESOURCE_ATTRIBUTES environment variable.\n */\nclass EnvDetectorSync implements DetectorSync {\n  // Type, attribute keys, and attribute values should not exceed 256 characters.\n  private readonly _MAX_LENGTH = 255;\n\n  // OTEL_RESOURCE_ATTRIBUTES is a comma-separated list of attributes.\n  private readonly _COMMA_SEPARATOR = ',';\n\n  // OTEL_RESOURCE_ATTRIBUTES contains key value pair separated by '='.\n  private readonly _LABEL_KEY_VALUE_SPLITTER = '=';\n\n  private readonly _ERROR_MESSAGE_INVALID_CHARS =\n    'should be a ASCII string with a length greater than 0 and not exceed ' +\n    this._MAX_LENGTH +\n    ' characters.';\n\n  private readonly _ERROR_MESSAGE_INVALID_VALUE =\n    'should be a ASCII string with a length not exceed ' +\n    this._MAX_LENGTH +\n    ' characters.';\n\n  /**\n   * Returns a {@link Resource} populated with attributes from the\n   * OTEL_RESOURCE_ATTRIBUTES environment variable. Note this is an async\n   * function to conform to the Detector interface.\n   *\n   * @param config The resource detection config\n   */\n  detect(_config?: ResourceDetectionConfig): IResource {\n    const attributes: ResourceAttributes = {};\n    const env = getEnv();\n\n    const rawAttributes = env.OTEL_RESOURCE_ATTRIBUTES;\n    const serviceName = env.OTEL_SERVICE_NAME;\n\n    if (rawAttributes) {\n      try {\n        const parsedAttributes = this._parseResourceAttributes(rawAttributes);\n        Object.assign(attributes, parsedAttributes);\n      } catch (e) {\n        diag.debug(`EnvDetector failed: ${e.message}`);\n      }\n    }\n\n    if (serviceName) {\n      attributes[SEMRESATTRS_SERVICE_NAME] = serviceName;\n    }\n\n    return new Resource(attributes);\n  }\n\n  /**\n   * Creates an attribute map from the OTEL_RESOURCE_ATTRIBUTES environment\n   * variable.\n   *\n   * OTEL_RESOURCE_ATTRIBUTES: A comma-separated list of attributes describing\n   * the source in more detail, e.g. “key1=val1,key2=val2”. Domain names and\n   * paths are accepted as attribute keys. Values may be quoted or unquoted in\n   * general. If a value contains whitespace, =, or \" characters, it must\n   * always be quoted.\n   *\n   * @param rawEnvAttributes The resource attributes as a comma-separated list\n   * of key/value pairs.\n   * @returns The sanitized resource attributes.\n   */\n  private _parseResourceAttributes(\n    rawEnvAttributes?: string\n  ): ResourceAttributes {\n    if (!rawEnvAttributes) return {};\n\n    const attributes: ResourceAttributes = {};\n    const rawAttributes: string[] = rawEnvAttributes.split(\n      this._COMMA_SEPARATOR,\n      -1\n    );\n    for (const rawAttribute of rawAttributes) {\n      const keyValuePair: string[] = rawAttribute.split(\n        this._LABEL_KEY_VALUE_SPLITTER,\n        -1\n      );\n      if (keyValuePair.length !== 2) {\n        continue;\n      }\n      let [key, value] = keyValuePair;\n      // Leading and trailing whitespaces are trimmed.\n      key = key.trim();\n      value = value.trim().split(/^\"|\"$/).join('');\n      if (!this._isValidAndNotEmpty(key)) {\n        throw new Error(`Attribute key ${this._ERROR_MESSAGE_INVALID_CHARS}`);\n      }\n      if (!this._isValid(value)) {\n        throw new Error(`Attribute value ${this._ERROR_MESSAGE_INVALID_VALUE}`);\n      }\n      attributes[key] = decodeURIComponent(value);\n    }\n    return attributes;\n  }\n\n  /**\n   * Determines whether the given String is a valid printable ASCII string with\n   * a length not exceed _MAX_LENGTH characters.\n   *\n   * @param str The String to be validated.\n   * @returns Whether the String is valid.\n   */\n  private _isValid(name: string): boolean {\n    return name.length <= this._MAX_LENGTH && this._isBaggageOctetString(name);\n  }\n\n  // https://www.w3.org/TR/baggage/#definition\n  private _isBaggageOctetString(str: string): boolean {\n    for (let i = 0; i < str.length; i++) {\n      const ch = str.charCodeAt(i);\n      if (ch < 0x21 || ch === 0x2c || ch === 0x3b || ch === 0x5c || ch > 0x7e) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Determines whether the given String is a valid printable ASCII string with\n   * a length greater than 0 and not exceed _MAX_LENGTH characters.\n   *\n   * @param str The String to be validated.\n   * @returns Whether the String is valid and not empty.\n   */\n  private _isValidAndNotEmpty(str: string): boolean {\n    return str.length > 0 && this._isValid(str);\n  }\n}\n\nexport const envDetectorSync = new EnvDetectorSync();\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Detector } from '../types';\nimport { ResourceDetectionConfig } from '../config';\nimport { IResource } from '../IResource';\nimport { envDetectorSync } from './EnvDetectorSync';\n\n/**\n * EnvDetector can be used to detect the presence of and create a Resource\n * from the OTEL_RESOURCE_ATTRIBUTES environment variable.\n */\nclass EnvDetector implements Detector {\n  /**\n   * Returns a {@link Resource} populated with attributes from the\n   * OTEL_RESOURCE_ATTRIBUTES environment variable. Note this is an async\n   * function to conform to the Detector interface.\n   *\n   * @param config The resource detection config\n   */\n  detect(config?: ResourceDetectionConfig): Promise<IResource> {\n    return Promise.resolve(envDetectorSync.detect(config));\n  }\n}\n\nexport const envDetector = new EnvDetector();\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport {\n  hostDetector,\n  hostDetectorSync,\n  osDetector,\n  osDetectorSync,\n  processDetector,\n  processDetectorSync,\n  serviceInstanceIdDetectorSync,\n} from './platform';\nexport { browserDetector } from './BrowserDetector';\nexport { envDetector } from './EnvDetector';\nexport { browserDetectorSync } from './BrowserDetectorSync';\nexport { envDetectorSync } from './EnvDetectorSync';\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const isPromiseLike = <R>(val: any): val is PromiseLike<R> => {\n  return (\n    val !== null && typeof val === 'object' && typeof val.then === 'function'\n  );\n};\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Resource } from './Resource';\nimport { ResourceDetectionConfig } from './config';\nimport { diag } from '@opentelemetry/api';\nimport { isPromiseLike } from './utils';\nimport { Detector, DetectorSync } from './types';\nimport { IResource } from './IResource';\n\n/**\n * Runs all resource detectors and returns the results merged into a single Resource. Promise\n * does not resolve until all the underlying detectors have resolved, unlike\n * detectResourcesSync.\n *\n * @deprecated use detectResourcesSync() instead.\n * @param config Configuration for resource detection\n */\nexport const detectResources = async (\n  config: ResourceDetectionConfig = {}\n): Promise<IResource> => {\n  const resources: IResource[] = await Promise.all(\n    (config.detectors || []).map(async d => {\n      try {\n        const resource = await d.detect(config);\n        diag.debug(`${d.constructor.name} found resource.`, resource);\n        return resource;\n      } catch (e) {\n        diag.debug(`${d.constructor.name} failed: ${e.message}`);\n        return Resource.empty();\n      }\n    })\n  );\n\n  // Future check if verbose logging is enabled issue #1903\n  logResources(resources);\n\n  return resources.reduce(\n    (acc, resource) => acc.merge(resource),\n    Resource.empty()\n  );\n};\n\n/**\n * Runs all resource detectors synchronously, merging their results. In case of attribute collision later resources will take precedence.\n *\n * @param config Configuration for resource detection\n */\nexport const detectResourcesSync = (\n  config: ResourceDetectionConfig = {}\n): IResource => {\n  const resources: IResource[] = (config.detectors ?? []).map(\n    (d: Detector | DetectorSync) => {\n      try {\n        const resourceOrPromise = d.detect(config);\n        let resource: IResource;\n        if (isPromiseLike<Resource>(resourceOrPromise)) {\n          const createPromise = async () => {\n            const resolvedResource = await resourceOrPromise;\n            return resolvedResource.attributes;\n          };\n          resource = new Resource({}, createPromise());\n        } else {\n          resource = resourceOrPromise as IResource;\n        }\n\n        if (resource.waitForAsyncAttributes) {\n          void resource\n            .waitForAsyncAttributes()\n            .then(() =>\n              diag.debug(`${d.constructor.name} found resource.`, resource)\n            );\n        } else {\n          diag.debug(`${d.constructor.name} found resource.`, resource);\n        }\n\n        return resource;\n      } catch (e) {\n        diag.error(`${d.constructor.name} failed: ${e.message}`);\n        return Resource.empty();\n      }\n    }\n  );\n\n  const mergedResources = resources.reduce(\n    (acc, resource) => acc.merge(resource),\n    Resource.empty()\n  );\n\n  if (mergedResources.waitForAsyncAttributes) {\n    void mergedResources.waitForAsyncAttributes().then(() => {\n      // Future check if verbose logging is enabled issue #1903\n      logResources(resources);\n    });\n  }\n\n  return mergedResources;\n};\n\n/**\n * Writes debug information about the detected resources to the logger defined in the resource detection config, if one is provided.\n *\n * @param resources The array of {@link Resource} that should be logged. Empty entries will be ignored.\n */\nconst logResources = (resources: Array<IResource>) => {\n  resources.forEach(resource => {\n    // Print only populated resources\n    if (Object.keys(resource.attributes).length > 0) {\n      const resourceDebugString = JSON.stringify(resource.attributes, null, 4);\n      diag.verbose(resourceDebugString);\n    }\n  });\n};\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport { Resource } from './Resource';\nexport { IResource } from './IResource';\nexport { defaultServiceName } from './platform';\nexport { DetectorSync, ResourceAttributes, Detector } from './types';\nexport { ResourceDetectionConfig } from './config';\nexport {\n  browserDetector,\n  browserDetectorSync,\n  envDetector,\n  envDetectorSync,\n  hostDetector,\n  hostDetectorSync,\n  osDetector,\n  osDetectorSync,\n  processDetector,\n  processDetectorSync,\n  serviceInstanceIdDetectorSync,\n} from './detectors';\nexport { detectResourcesSync, detectResources } from './detect-resources';\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Context } from '@opentelemetry/api';\nimport { globalErrorHandler } from '@opentelemetry/core';\nimport { ReadableSpan } from './export/ReadableSpan';\nimport { Span } from './Span';\nimport { SpanProcessor } from './SpanProcessor';\n\n/**\n * Implementation of the {@link SpanProcessor} that simply forwards all\n * received events to a list of {@link SpanProcessor}s.\n */\nexport class MultiSpanProcessor implements SpanProcessor {\n  constructor(private readonly _spanProcessors: SpanProcessor[]) {}\n\n  forceFlush(): Promise<void> {\n    const promises: Promise<void>[] = [];\n\n    for (const spanProcessor of this._spanProcessors) {\n      promises.push(spanProcessor.forceFlush());\n    }\n    return new Promise(resolve => {\n      Promise.all(promises)\n        .then(() => {\n          resolve();\n        })\n        .catch(error => {\n          globalErrorHandler(\n            error || new Error('MultiSpanProcessor: forceFlush failed')\n          );\n          resolve();\n        });\n    });\n  }\n\n  onStart(span: Span, context: Context): void {\n    for (const spanProcessor of this._spanProcessors) {\n      spanProcessor.onStart(span, context);\n    }\n  }\n\n  onEnd(span: ReadableSpan): void {\n    for (const spanProcessor of this._spanProcessors) {\n      spanProcessor.onEnd(span);\n    }\n  }\n\n  shutdown(): Promise<void> {\n    const promises: Promise<void>[] = [];\n\n    for (const spanProcessor of this._spanProcessors) {\n      promises.push(spanProcessor.shutdown());\n    }\n    return new Promise((resolve, reject) => {\n      Promise.all(promises).then(() => {\n        resolve();\n      }, reject);\n    });\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Context } from '@opentelemetry/api';\nimport { ReadableSpan } from './ReadableSpan';\nimport { Span } from '../Span';\nimport { SpanProcessor } from '../SpanProcessor';\n\n/** No-op implementation of SpanProcessor */\nexport class NoopSpanProcessor implements SpanProcessor {\n  onStart(_span: Span, _context: Context): void {}\n  onEnd(_span: ReadableSpan): void {}\n  shutdown(): Promise<void> {\n    return Promise.resolve();\n  }\n  forceFlush(): Promise<void> {\n    return Promise.resolve();\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  context,\n  diag,\n  propagation,\n  TextMapPropagator,\n  trace,\n  TracerProvider,\n} from '@opentelemetry/api';\nimport {\n  CompositePropagator,\n  W3CBaggagePropagator,\n  W3CTraceContextPropagator,\n  getEnv,\n  merge,\n} from '@opentelemetry/core';\nimport { IResource, Resource } from '@opentelemetry/resources';\nimport { SpanProcessor, Tracer } from '.';\nimport { loadDefaultConfig } from './config';\nimport { MultiSpanProcessor } from './MultiSpanProcessor';\nimport { NoopSpanProcessor } from './export/NoopSpanProcessor';\nimport { SDKRegistrationConfig, TracerConfig } from './types';\nimport { SpanExporter } from './export/SpanExporter';\nimport { BatchSpanProcessor } from './platform';\nimport { reconfigureLimits } from './utility';\n\nexport type PROPAGATOR_FACTORY = () => TextMapPropagator;\nexport type EXPORTER_FACTORY = () => SpanExporter;\n\nexport enum ForceFlushState {\n  'resolved',\n  'timeout',\n  'error',\n  'unresolved',\n}\n\n/**\n * This class represents a basic tracer provider which platform libraries can extend\n */\nexport class BasicTracerProvider implements TracerProvider {\n  protected static readonly _registeredPropagators = new Map<\n    string,\n    PROPAGATOR_FACTORY\n  >([\n    ['tracecontext', () => new W3CTraceContextPropagator()],\n    ['baggage', () => new W3CBaggagePropagator()],\n  ]);\n\n  protected static readonly _registeredExporters = new Map<\n    string,\n    EXPORTER_FACTORY\n  >();\n\n  private readonly _config: TracerConfig;\n  private readonly _registeredSpanProcessors: SpanProcessor[] = [];\n  private readonly _tracers: Map<string, Tracer> = new Map();\n\n  activeSpanProcessor: SpanProcessor;\n  readonly resource: IResource;\n\n  constructor(config: TracerConfig = {}) {\n    const mergedConfig = merge(\n      {},\n      loadDefaultConfig(),\n      reconfigureLimits(config)\n    );\n    this.resource = mergedConfig.resource ?? Resource.empty();\n    this.resource = Resource.default().merge(this.resource);\n    this._config = Object.assign({}, mergedConfig, {\n      resource: this.resource,\n    });\n\n    const defaultExporter = this._buildExporterFromEnv();\n    if (defaultExporter !== undefined) {\n      const batchProcessor = new BatchSpanProcessor(defaultExporter);\n      this.activeSpanProcessor = batchProcessor;\n    } else {\n      this.activeSpanProcessor = new NoopSpanProcessor();\n    }\n  }\n\n  getTracer(\n    name: string,\n    version?: string,\n    options?: { schemaUrl?: string }\n  ): Tracer {\n    const key = `${name}@${version || ''}:${options?.schemaUrl || ''}`;\n    if (!this._tracers.has(key)) {\n      this._tracers.set(\n        key,\n        new Tracer(\n          { name, version, schemaUrl: options?.schemaUrl },\n          this._config,\n          this\n        )\n      );\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    return this._tracers.get(key)!;\n  }\n\n  /**\n   * Adds a new {@link SpanProcessor} to this tracer.\n   * @param spanProcessor the new SpanProcessor to be added.\n   */\n  addSpanProcessor(spanProcessor: SpanProcessor): void {\n    if (this._registeredSpanProcessors.length === 0) {\n      // since we might have enabled by default a batchProcessor, we disable it\n      // before adding the new one\n      this.activeSpanProcessor\n        .shutdown()\n        .catch(err =>\n          diag.error(\n            'Error while trying to shutdown current span processor',\n            err\n          )\n        );\n    }\n    this._registeredSpanProcessors.push(spanProcessor);\n    this.activeSpanProcessor = new MultiSpanProcessor(\n      this._registeredSpanProcessors\n    );\n  }\n\n  getActiveSpanProcessor(): SpanProcessor {\n    return this.activeSpanProcessor;\n  }\n\n  /**\n   * Register this TracerProvider for use with the OpenTelemetry API.\n   * Undefined values may be replaced with defaults, and\n   * null values will be skipped.\n   *\n   * @param config Configuration object for SDK registration\n   */\n  register(config: SDKRegistrationConfig = {}): void {\n    trace.setGlobalTracerProvider(this);\n    if (config.propagator === undefined) {\n      config.propagator = this._buildPropagatorFromEnv();\n    }\n\n    if (config.contextManager) {\n      context.setGlobalContextManager(config.contextManager);\n    }\n\n    if (config.propagator) {\n      propagation.setGlobalPropagator(config.propagator);\n    }\n  }\n\n  forceFlush(): Promise<void> {\n    const timeout = this._config.forceFlushTimeoutMillis;\n    const promises = this._registeredSpanProcessors.map(\n      (spanProcessor: SpanProcessor) => {\n        return new Promise(resolve => {\n          let state: ForceFlushState;\n          const timeoutInterval = setTimeout(() => {\n            resolve(\n              new Error(\n                `Span processor did not completed within timeout period of ${timeout} ms`\n              )\n            );\n            state = ForceFlushState.timeout;\n          }, timeout);\n\n          spanProcessor\n            .forceFlush()\n            .then(() => {\n              clearTimeout(timeoutInterval);\n              if (state !== ForceFlushState.timeout) {\n                state = ForceFlushState.resolved;\n                resolve(state);\n              }\n            })\n            .catch(error => {\n              clearTimeout(timeoutInterval);\n              state = ForceFlushState.error;\n              resolve(error);\n            });\n        });\n      }\n    );\n\n    return new Promise<void>((resolve, reject) => {\n      Promise.all(promises)\n        .then(results => {\n          const errors = results.filter(\n            result => result !== ForceFlushState.resolved\n          );\n          if (errors.length > 0) {\n            reject(errors);\n          } else {\n            resolve();\n          }\n        })\n        .catch(error => reject([error]));\n    });\n  }\n\n  shutdown(): Promise<void> {\n    return this.activeSpanProcessor.shutdown();\n  }\n\n  /**\n   * TS cannot yet infer the type of this.constructor:\n   * https://github.com/Microsoft/TypeScript/issues/3841#issuecomment-337560146\n   * There is no need to override either of the getters in your child class.\n   * The type of the registered component maps should be the same across all\n   * classes in the inheritance tree.\n   */\n  protected _getPropagator(name: string): TextMapPropagator | undefined {\n    return (\n      this.constructor as typeof BasicTracerProvider\n    )._registeredPropagators.get(name)?.();\n  }\n\n  protected _getSpanExporter(name: string): SpanExporter | undefined {\n    return (\n      this.constructor as typeof BasicTracerProvider\n    )._registeredExporters.get(name)?.();\n  }\n\n  protected _buildPropagatorFromEnv(): TextMapPropagator | undefined {\n    // per spec, propagators from env must be deduplicated\n    const uniquePropagatorNames = Array.from(\n      new Set(getEnv().OTEL_PROPAGATORS)\n    );\n\n    const propagators = uniquePropagatorNames.map(name => {\n      const propagator = this._getPropagator(name);\n      if (!propagator) {\n        diag.warn(\n          `Propagator \"${name}\" requested through environment variable is unavailable.`\n        );\n      }\n\n      return propagator;\n    });\n    const validPropagators = propagators.reduce<TextMapPropagator[]>(\n      (list, item) => {\n        if (item) {\n          list.push(item);\n        }\n        return list;\n      },\n      []\n    );\n\n    if (validPropagators.length === 0) {\n      return;\n    } else if (uniquePropagatorNames.length === 1) {\n      return validPropagators[0];\n    } else {\n      return new CompositePropagator({\n        propagators: validPropagators,\n      });\n    }\n  }\n\n  protected _buildExporterFromEnv(): SpanExporter | undefined {\n    const exporterName = getEnv().OTEL_TRACES_EXPORTER;\n    if (exporterName === 'none' || exporterName === '') return;\n    const exporter = this._getSpanExporter(exporterName);\n    if (!exporter) {\n      diag.error(\n        `Exporter \"${exporterName}\" requested through environment variable is unavailable.`\n      );\n    }\n    return exporter;\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SpanExporter } from './SpanExporter';\nimport { ReadableSpan } from './ReadableSpan';\nimport {\n  ExportResult,\n  ExportResultCode,\n  hrTimeToMicroseconds,\n} from '@opentelemetry/core';\n\n/**\n * This is implementation of {@link SpanExporter} that prints spans to the\n * console. This class can be used for diagnostic purposes.\n */\n\n/* eslint-disable no-console */\nexport class ConsoleSpanExporter implements SpanExporter {\n  /**\n   * Export spans.\n   * @param spans\n   * @param resultCallback\n   */\n  export(\n    spans: ReadableSpan[],\n    resultCallback: (result: ExportResult) => void\n  ): void {\n    return this._sendSpans(spans, resultCallback);\n  }\n\n  /**\n   * Shutdown the exporter.\n   */\n  shutdown(): Promise<void> {\n    this._sendSpans([]);\n    return this.forceFlush();\n  }\n\n  /**\n   * Exports any pending spans in exporter\n   */\n  forceFlush(): Promise<void> {\n    return Promise.resolve();\n  }\n\n  /**\n   * converts span info into more readable format\n   * @param span\n   */\n  private _exportInfo(span: ReadableSpan) {\n    return {\n      resource: {\n        attributes: span.resource.attributes,\n      },\n      traceId: span.spanContext().traceId,\n      parentId: span.parentSpanId,\n      traceState: span.spanContext().traceState?.serialize(),\n      name: span.name,\n      id: span.spanContext().spanId,\n      kind: span.kind,\n      timestamp: hrTimeToMicroseconds(span.startTime),\n      duration: hrTimeToMicroseconds(span.duration),\n      attributes: span.attributes,\n      status: span.status,\n      events: span.events,\n      links: span.links,\n    };\n  }\n\n  /**\n   * Showing spans in console\n   * @param spans\n   * @param done\n   */\n  private _sendSpans(\n    spans: ReadableSpan[],\n    done?: (result: ExportResult) => void\n  ): void {\n    for (const span of spans) {\n      console.dir(this._exportInfo(span), { depth: 3 });\n    }\n    if (done) {\n      return done({ code: ExportResultCode.SUCCESS });\n    }\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SpanExporter } from './SpanExporter';\nimport { ReadableSpan } from './ReadableSpan';\nimport { ExportResult, ExportResultCode } from '@opentelemetry/core';\n\n/**\n * This class can be used for testing purposes. It stores the exported spans\n * in a list in memory that can be retrieved using the `getFinishedSpans()`\n * method.\n */\nexport class InMemorySpanExporter implements SpanExporter {\n  private _finishedSpans: ReadableSpan[] = [];\n  /**\n   * Indicates if the exporter has been \"shutdown.\"\n   * When false, exported spans will not be stored in-memory.\n   */\n  protected _stopped = false;\n\n  export(\n    spans: ReadableSpan[],\n    resultCallback: (result: ExportResult) => void\n  ): void {\n    if (this._stopped)\n      return resultCallback({\n        code: ExportResultCode.FAILED,\n        error: new Error('Exporter has been stopped'),\n      });\n    this._finishedSpans.push(...spans);\n\n    setTimeout(() => resultCallback({ code: ExportResultCode.SUCCESS }), 0);\n  }\n\n  shutdown(): Promise<void> {\n    this._stopped = true;\n    this._finishedSpans = [];\n    return this.forceFlush();\n  }\n\n  /**\n   * Exports any pending spans in the exporter\n   */\n  forceFlush(): Promise<void> {\n    return Promise.resolve();\n  }\n\n  reset(): void {\n    this._finishedSpans = [];\n  }\n\n  getFinishedSpans(): ReadableSpan[] {\n    return this._finishedSpans;\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Context, TraceFlags } from '@opentelemetry/api';\nimport {\n  internal,\n  ExportResultCode,\n  globalErrorHandler,\n  BindOnceFuture,\n  ExportResult,\n} from '@opentelemetry/core';\nimport { Span } from '../Span';\nimport { SpanProcessor } from '../SpanProcessor';\nimport { ReadableSpan } from './ReadableSpan';\nimport { SpanExporter } from './SpanExporter';\nimport { Resource } from '@opentelemetry/resources';\n\n/**\n * An implementation of the {@link SpanProcessor} that converts the {@link Span}\n * to {@link ReadableSpan} and passes it to the configured exporter.\n *\n * Only spans that are sampled are converted.\n *\n * NOTE: This {@link SpanProcessor} exports every ended span individually instead of batching spans together, which causes significant performance overhead with most exporters. For production use, please consider using the {@link BatchSpanProcessor} instead.\n */\nexport class SimpleSpanProcessor implements SpanProcessor {\n  private _shutdownOnce: BindOnceFuture<void>;\n  private _unresolvedExports: Set<Promise<void>>;\n\n  constructor(private readonly _exporter: SpanExporter) {\n    this._shutdownOnce = new BindOnceFuture(this._shutdown, this);\n    this._unresolvedExports = new Set<Promise<void>>();\n  }\n\n  async forceFlush(): Promise<void> {\n    // await unresolved resources before resolving\n    await Promise.all(Array.from(this._unresolvedExports));\n    if (this._exporter.forceFlush) {\n      await this._exporter.forceFlush();\n    }\n  }\n\n  onStart(_span: Span, _parentContext: Context): void {}\n\n  onEnd(span: ReadableSpan): void {\n    if (this._shutdownOnce.isCalled) {\n      return;\n    }\n\n    if ((span.spanContext().traceFlags & TraceFlags.SAMPLED) === 0) {\n      return;\n    }\n\n    const doExport = () =>\n      internal\n        ._export(this._exporter, [span])\n        .then((result: ExportResult) => {\n          if (result.code !== ExportResultCode.SUCCESS) {\n            globalErrorHandler(\n              result.error ??\n                new Error(\n                  `SimpleSpanProcessor: span export failed (status ${result})`\n                )\n            );\n          }\n        })\n        .catch(error => {\n          globalErrorHandler(error);\n        });\n\n    // Avoid scheduling a promise to make the behavior more predictable and easier to test\n    if (span.resource.asyncAttributesPending) {\n      const exportPromise = (span.resource as Resource)\n        .waitForAsyncAttributes?.()\n        .then(\n          () => {\n            if (exportPromise != null) {\n              this._unresolvedExports.delete(exportPromise);\n            }\n            return doExport();\n          },\n          err => globalErrorHandler(err)\n        );\n\n      // store the unresolved exports\n      if (exportPromise != null) {\n        this._unresolvedExports.add(exportPromise);\n      }\n    } else {\n      void doExport();\n    }\n  }\n\n  shutdown(): Promise<void> {\n    return this._shutdownOnce.call();\n  }\n\n  private _shutdown(): Promise<void> {\n    return this._exporter.shutdown();\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport * from './Tracer';\nexport * from './BasicTracerProvider';\nexport * from './platform';\nexport * from './export/ConsoleSpanExporter';\nexport * from './export/InMemorySpanExporter';\nexport * from './export/ReadableSpan';\nexport * from './export/SimpleSpanProcessor';\nexport * from './export/SpanExporter';\nexport * from './export/NoopSpanProcessor';\nexport * from './sampler/AlwaysOffSampler';\nexport * from './sampler/AlwaysOnSampler';\nexport * from './sampler/ParentBasedSampler';\nexport * from './sampler/TraceIdRatioBasedSampler';\nexport * from './Sampler';\nexport * from './Span';\nexport * from './SpanProcessor';\nexport * from './TimedEvent';\nexport * from './types';\nexport * from './IdGenerator';\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { diag } from '@opentelemetry/api';\nimport { getEnv } from '@opentelemetry/core';\n\nconst DEFAULT_TRACE_TIMEOUT = 10000;\nexport const DEFAULT_EXPORT_MAX_ATTEMPTS = 5;\nexport const DEFAULT_EXPORT_INITIAL_BACKOFF = 1000;\nexport const DEFAULT_EXPORT_MAX_BACKOFF = 5000;\nexport const DEFAULT_EXPORT_BACKOFF_MULTIPLIER = 1.5;\n\n/**\n * Parses headers from config leaving only those that have defined values\n * @param partialHeaders\n */\nexport function parseHeaders(\n  partialHeaders: Partial<Record<string, unknown>> = {}\n): Record<string, string> {\n  const headers: Record<string, string> = {};\n  Object.entries(partialHeaders).forEach(([key, value]) => {\n    if (typeof value !== 'undefined') {\n      headers[key] = String(value);\n    } else {\n      diag.warn(\n        `Header \"${key}\" has invalid value (${value}) and will be ignored`\n      );\n    }\n  });\n  return headers;\n}\n\n/**\n * Adds path (version + signal) to a no per-signal endpoint\n * @param url\n * @param path\n * @returns url + path\n */\nexport function appendResourcePathToUrl(url: string, path: string): string {\n  if (!url.endsWith('/')) {\n    url = url + '/';\n  }\n  return url + path;\n}\n\n/**\n * Adds root path to signal specific endpoint when endpoint contains no path part and no root path\n * @param url\n * @returns url\n */\nexport function appendRootPathToUrlIfNeeded(url: string): string {\n  try {\n    const parsedUrl = new URL(url);\n    if (parsedUrl.pathname === '') {\n      parsedUrl.pathname = parsedUrl.pathname + '/';\n    }\n    return parsedUrl.toString();\n  } catch {\n    diag.warn(`Could not parse export URL: '${url}'`);\n    return url;\n  }\n}\n\n/**\n * Configure exporter trace timeout value from passed in value or environment variables\n * @param timeoutMillis\n * @returns timeout value in milliseconds\n */\nexport function configureExporterTimeout(\n  timeoutMillis: number | undefined\n): number {\n  if (typeof timeoutMillis === 'number') {\n    if (timeoutMillis <= 0) {\n      // OTLP exporter configured timeout - using default value of 10000ms\n      return invalidTimeout(timeoutMillis, DEFAULT_TRACE_TIMEOUT);\n    }\n    return timeoutMillis;\n  } else {\n    return getExporterTimeoutFromEnv();\n  }\n}\n\nfunction getExporterTimeoutFromEnv(): number {\n  const definedTimeout = Number(\n    getEnv().OTEL_EXPORTER_OTLP_TRACES_TIMEOUT ??\n      getEnv().OTEL_EXPORTER_OTLP_TIMEOUT\n  );\n\n  if (definedTimeout <= 0) {\n    // OTLP exporter configured timeout - using default value of 10000ms\n    return invalidTimeout(definedTimeout, DEFAULT_TRACE_TIMEOUT);\n  } else {\n    return definedTimeout;\n  }\n}\n\n// OTLP exporter configured timeout - using default value of 10000ms\nexport function invalidTimeout(\n  timeout: number,\n  defaultTimeout: number\n): number {\n  diag.warn('Timeout must be greater than 0', timeout);\n\n  return defaultTimeout;\n}\n\nexport function isExportRetryable(statusCode: number): boolean {\n  const retryCodes = [429, 502, 503, 504];\n\n  return retryCodes.includes(statusCode);\n}\n\nexport function parseRetryAfterToMills(retryAfter?: string | null): number {\n  if (retryAfter == null) {\n    return -1;\n  }\n  const seconds = Number.parseInt(retryAfter, 10);\n  if (Number.isInteger(seconds)) {\n    return seconds > 0 ? seconds * 1000 : -1;\n  }\n  // https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Retry-After#directives\n  const delay = new Date(retryAfter).getTime() - Date.now();\n\n  if (delay >= 0) {\n    return delay;\n  }\n  return 0;\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { diag } from '@opentelemetry/api';\nimport {\n  ExportResult,\n  ExportResultCode,\n  BindOnceFuture,\n} from '@opentelemetry/core';\nimport {\n  OTLPExporterError,\n  OTLPExporterConfigBase,\n  ExportServiceError,\n} from './types';\nimport { configureExporterTimeout } from './util';\n\n/**\n * Collector Exporter abstract base class\n */\nexport abstract class OTLPExporterBase<\n  T extends OTLPExporterConfigBase,\n  ExportItem,\n> {\n  public readonly url: string;\n  public readonly hostname: string | undefined;\n  public readonly timeoutMillis: number;\n  protected _concurrencyLimit: number;\n  protected _sendingPromises: Promise<unknown>[] = [];\n  protected _shutdownOnce: BindOnceFuture<void>;\n\n  /**\n   * @param config\n   */\n  constructor(config: T = {} as T) {\n    this.url = this.getDefaultUrl(config);\n    if (typeof config.hostname === 'string') {\n      this.hostname = config.hostname;\n    }\n\n    this.shutdown = this.shutdown.bind(this);\n    this._shutdownOnce = new BindOnceFuture(this._shutdown, this);\n\n    this._concurrencyLimit =\n      typeof config.concurrencyLimit === 'number'\n        ? config.concurrencyLimit\n        : 30;\n\n    this.timeoutMillis = configureExporterTimeout(config.timeoutMillis);\n\n    // platform dependent\n    this.onInit(config);\n  }\n\n  /**\n   * Export items.\n   * @param items\n   * @param resultCallback\n   */\n  export(\n    items: ExportItem[],\n    resultCallback: (result: ExportResult) => void\n  ): void {\n    if (this._shutdownOnce.isCalled) {\n      resultCallback({\n        code: ExportResultCode.FAILED,\n        error: new Error('Exporter has been shutdown'),\n      });\n      return;\n    }\n\n    if (this._sendingPromises.length >= this._concurrencyLimit) {\n      resultCallback({\n        code: ExportResultCode.FAILED,\n        error: new Error('Concurrent export limit reached'),\n      });\n      return;\n    }\n\n    this._export(items)\n      .then(() => {\n        resultCallback({ code: ExportResultCode.SUCCESS });\n      })\n      .catch((error: ExportServiceError) => {\n        resultCallback({ code: ExportResultCode.FAILED, error });\n      });\n  }\n\n  private _export(items: ExportItem[]): Promise<unknown> {\n    return new Promise<void>((resolve, reject) => {\n      try {\n        diag.debug('items to be sent', items);\n        this.send(items, resolve, reject);\n      } catch (e) {\n        reject(e);\n      }\n    });\n  }\n\n  /**\n   * Shutdown the exporter.\n   */\n  shutdown(): Promise<void> {\n    return this._shutdownOnce.call();\n  }\n\n  /**\n   * Exports any pending spans in the exporter\n   */\n  forceFlush(): Promise<void> {\n    return Promise.all(this._sendingPromises).then(() => {\n      /** ignore resolved values */\n    });\n  }\n\n  /**\n   * Called by _shutdownOnce with BindOnceFuture\n   */\n  private _shutdown(): Promise<void> {\n    diag.debug('shutdown started');\n    this.onShutdown();\n    return this.forceFlush();\n  }\n\n  abstract onShutdown(): void;\n  abstract onInit(config: T): void;\n  abstract send(\n    items: ExportItem[],\n    onSuccess: () => void,\n    onError: (error: OTLPExporterError) => void\n  ): void;\n  abstract getDefaultUrl(config: T): string;\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport type * as http from 'http';\nimport type * as https from 'https';\n\nimport { OTLPExporterConfigBase } from '../../types';\n\n/**\n * Collector Exporter node base config\n */\nexport interface OTLPExporterNodeConfigBase extends OTLPExporterConfigBase {\n  keepAlive?: boolean;\n  compression?: CompressionAlgorithm;\n  httpAgentOptions?: http.AgentOptions | https.AgentOptions;\n}\n\nexport enum CompressionAlgorithm {\n  NONE = 'none',\n  GZIP = 'gzip',\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Interface for handling error\n */\nexport class OTLPExporterError extends Error {\n  readonly code?: number;\n  override readonly name: string = 'OTLPExporterError';\n  readonly data?: string;\n\n  constructor(message?: string, code?: number, data?: string) {\n    super(message);\n    this.data = data;\n    this.code = code;\n  }\n}\n\n/**\n * Interface for handling export service errors\n */\nexport interface ExportServiceError {\n  name: string;\n  code: number;\n  details: string;\n  metadata: { [key: string]: unknown };\n  message: string;\n  stack: string;\n}\n\n/**\n * Collector Exporter base config\n */\nexport interface OTLPExporterConfigBase {\n  headers?: Partial<Record<string, unknown>>;\n  hostname?: string;\n  url?: string;\n  concurrencyLimit?: number;\n  /** Maximum time the OTLP exporter will wait for each batch export.\n   * The default value is 10000ms. */\n  timeoutMillis?: number;\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as url from 'url';\nimport * as http from 'http';\nimport * as https from 'https';\nimport * as zlib from 'zlib';\nimport { Readable } from 'stream';\nimport { OTLPExporterNodeBase } from './OTLPExporterNodeBase';\nimport { OTLPExporterNodeConfigBase } from '.';\nimport { diag } from '@opentelemetry/api';\nimport { CompressionAlgorithm } from './types';\nimport { getEnv } from '@opentelemetry/core';\nimport { OTLPExporterError } from '../../types';\nimport {\n  DEFAULT_EXPORT_MAX_ATTEMPTS,\n  DEFAULT_EXPORT_INITIAL_BACKOFF,\n  DEFAULT_EXPORT_BACKOFF_MULTIPLIER,\n  DEFAULT_EXPORT_MAX_BACKOFF,\n  isExportRetryable,\n  parseRetryAfterToMills,\n} from '../../util';\n\n/**\n * Sends data using http\n * @param collector\n * @param data\n * @param contentType\n * @param onSuccess\n * @param onError\n */\nexport function sendWithHttp<ExportItem, ServiceResponse>(\n  collector: OTLPExporterNodeBase<ExportItem, ServiceResponse>,\n  data: string | Uint8Array,\n  contentType: string,\n  onSuccess: () => void,\n  onError: (error: OTLPExporterError) => void\n): void {\n  const exporterTimeout = collector.timeoutMillis;\n  const parsedUrl = new url.URL(collector.url);\n  const nodeVersion = Number(process.versions.node.split('.')[0]);\n  let retryTimer: ReturnType<typeof setTimeout>;\n  let req: http.ClientRequest;\n  let reqIsDestroyed = false;\n\n  const exporterTimer = setTimeout(() => {\n    clearTimeout(retryTimer);\n    reqIsDestroyed = true;\n\n    if (req.destroyed) {\n      const err = new OTLPExporterError('Request Timeout');\n      onError(err);\n    } else {\n      // req.abort() was deprecated since v14\n      nodeVersion >= 14 ? req.destroy() : req.abort();\n    }\n  }, exporterTimeout);\n\n  const options: http.RequestOptions | https.RequestOptions = {\n    hostname: parsedUrl.hostname,\n    port: parsedUrl.port,\n    path: parsedUrl.pathname,\n    method: 'POST',\n    headers: {\n      'Content-Type': contentType,\n      ...collector.headers,\n    },\n    agent: collector.agent,\n  };\n\n  const request = parsedUrl.protocol === 'http:' ? http.request : https.request;\n\n  const sendWithRetry = (\n    retries = DEFAULT_EXPORT_MAX_ATTEMPTS,\n    minDelay = DEFAULT_EXPORT_INITIAL_BACKOFF\n  ) => {\n    req = request(options, (res: http.IncomingMessage) => {\n      let responseData = '';\n      res.on('data', chunk => (responseData += chunk));\n\n      res.on('aborted', () => {\n        if (reqIsDestroyed) {\n          const err = new OTLPExporterError('Request Timeout');\n          onError(err);\n        }\n      });\n\n      res.on('end', () => {\n        if (reqIsDestroyed === false) {\n          if (res.statusCode && res.statusCode < 299) {\n            diag.debug(`statusCode: ${res.statusCode}`, responseData);\n            onSuccess();\n            // clear all timers since request was completed and promise was resolved\n            clearTimeout(exporterTimer);\n            clearTimeout(retryTimer);\n          } else if (\n            res.statusCode &&\n            isExportRetryable(res.statusCode) &&\n            retries > 0\n          ) {\n            let retryTime: number;\n            minDelay = DEFAULT_EXPORT_BACKOFF_MULTIPLIER * minDelay;\n\n            // retry after interval specified in Retry-After header\n            if (res.headers['retry-after']) {\n              retryTime = parseRetryAfterToMills(res.headers['retry-after']!);\n            } else {\n              // exponential backoff with jitter\n              retryTime = Math.round(\n                Math.random() * (DEFAULT_EXPORT_MAX_BACKOFF - minDelay) +\n                  minDelay\n              );\n            }\n\n            retryTimer = setTimeout(() => {\n              sendWithRetry(retries - 1, minDelay);\n            }, retryTime);\n          } else {\n            const error = new OTLPExporterError(\n              res.statusMessage,\n              res.statusCode,\n              responseData\n            );\n            onError(error);\n            // clear all timers since request was completed and promise was resolved\n            clearTimeout(exporterTimer);\n            clearTimeout(retryTimer);\n          }\n        }\n      });\n    });\n\n    req.on('error', (error: Error | any) => {\n      if (reqIsDestroyed) {\n        const err = new OTLPExporterError('Request Timeout', error.code);\n        onError(err);\n      } else {\n        onError(error);\n      }\n      clearTimeout(exporterTimer);\n      clearTimeout(retryTimer);\n    });\n\n    req.on('abort', () => {\n      if (reqIsDestroyed) {\n        const err = new OTLPExporterError('Request Timeout');\n        onError(err);\n      }\n      clearTimeout(exporterTimer);\n      clearTimeout(retryTimer);\n    });\n\n    switch (collector.compression) {\n      case CompressionAlgorithm.GZIP: {\n        req.setHeader('Content-Encoding', 'gzip');\n        const dataStream = readableFromUnit8Array(data);\n        dataStream\n          .on('error', onError)\n          .pipe(zlib.createGzip())\n          .on('error', onError)\n          .pipe(req);\n\n        break;\n      }\n      default:\n        req.end(Buffer.from(data));\n        break;\n    }\n  };\n  sendWithRetry();\n}\n\nfunction readableFromUnit8Array(buff: string | Uint8Array): Readable {\n  const readable = new Readable();\n  readable.push(buff);\n  readable.push(null);\n\n  return readable;\n}\n\nexport function createHttpAgent(\n  config: OTLPExporterNodeConfigBase\n): http.Agent | https.Agent | undefined {\n  if (config.httpAgentOptions && config.keepAlive === false) {\n    diag.warn('httpAgentOptions is used only when keepAlive is true');\n    return undefined;\n  }\n\n  if (config.keepAlive === false || !config.url) return undefined;\n\n  try {\n    const parsedUrl = new url.URL(config.url as string);\n    const Agent = parsedUrl.protocol === 'http:' ? http.Agent : https.Agent;\n    return new Agent({ keepAlive: true, ...config.httpAgentOptions });\n  } catch (err) {\n    diag.error(\n      `collector exporter failed to create http agent. err: ${err.message}`\n    );\n    return undefined;\n  }\n}\n\nexport function configureCompression(\n  compression: CompressionAlgorithm | undefined\n): CompressionAlgorithm {\n  if (compression) {\n    return compression;\n  } else {\n    const definedCompression =\n      getEnv().OTEL_EXPORTER_OTLP_TRACES_COMPRESSION ||\n      getEnv().OTEL_EXPORTER_OTLP_COMPRESSION;\n    return definedCompression === CompressionAlgorithm.GZIP\n      ? CompressionAlgorithm.GZIP\n      : CompressionAlgorithm.NONE;\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type * as http from 'http';\nimport type * as https from 'https';\n\nimport { OTLPExporterBase } from '../../OTLPExporterBase';\nimport { OTLPExporterNodeConfigBase, CompressionAlgorithm } from './types';\nimport * as otlpTypes from '../../types';\nimport { parseHeaders } from '../../util';\nimport { createHttpAgent, sendWithHttp, configureCompression } from './util';\nimport { diag } from '@opentelemetry/api';\nimport { getEnv, baggageUtils } from '@opentelemetry/core';\nimport { ISerializer } from '@opentelemetry/otlp-transformer';\n\n/**\n * Collector Metric Exporter abstract base class\n */\nexport abstract class OTLPExporterNodeBase<\n  ExportItem,\n  ServiceResponse,\n> extends OTLPExporterBase<OTLPExporterNodeConfigBase, ExportItem> {\n  DEFAULT_HEADERS: Record<string, string> = {};\n  headers: Record<string, string>;\n  agent: http.Agent | https.Agent | undefined;\n  compression: CompressionAlgorithm;\n  private _serializer: ISerializer<ExportItem[], ServiceResponse>;\n  private _contentType: string;\n\n  constructor(\n    config: OTLPExporterNodeConfigBase = {},\n    serializer: ISerializer<ExportItem[], ServiceResponse>,\n    contentType: string\n  ) {\n    super(config);\n    this._contentType = contentType;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    if ((config as any).metadata) {\n      diag.warn('Metadata cannot be set when using http');\n    }\n    this.headers = Object.assign(\n      this.DEFAULT_HEADERS,\n      parseHeaders(config.headers),\n      baggageUtils.parseKeyPairsIntoRecord(getEnv().OTEL_EXPORTER_OTLP_HEADERS)\n    );\n    this.agent = createHttpAgent(config);\n    this.compression = configureCompression(config.compression);\n    this._serializer = serializer;\n  }\n\n  onInit(_config: OTLPExporterNodeConfigBase): void {}\n\n  send(\n    objects: ExportItem[],\n    onSuccess: () => void,\n    onError: (error: otlpTypes.OTLPExporterError) => void\n  ): void {\n    if (this._shutdownOnce.isCalled) {\n      diag.debug('Shutdown already started. Cannot send objects');\n      return;\n    }\n\n    const promise = new Promise<void>((resolve, reject) => {\n      sendWithHttp(\n        this,\n        this._serializer.serializeRequest(objects) ?? new Uint8Array(),\n        this._contentType,\n        resolve,\n        reject\n      );\n    }).then(onSuccess, onError);\n\n    this._sendingPromises.push(promise);\n    const popPromise = () => {\n      const index = this._sendingPromises.indexOf(promise);\n      this._sendingPromises.splice(index, 1);\n    };\n    promise.then(popPromise, popPromise);\n  }\n\n  onShutdown(): void {}\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport { OTLPExporterNodeBase } from './OTLPExporterNodeBase';\nexport { sendWithHttp, createHttpAgent, configureCompression } from './util';\nexport { OTLPExporterNodeConfigBase, CompressionAlgorithm } from './types';\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { diag } from '@opentelemetry/api';\nimport { OTLPExporterError } from '../../types';\nimport {\n  DEFAULT_EXPORT_MAX_ATTEMPTS,\n  DEFAULT_EXPORT_INITIAL_BACKOFF,\n  DEFAULT_EXPORT_BACKOFF_MULTIPLIER,\n  DEFAULT_EXPORT_MAX_BACKOFF,\n  isExportRetryable,\n  parseRetryAfterToMills,\n} from '../../util';\n\n/**\n * Send metrics/spans using browser navigator.sendBeacon\n * @param body\n * @param url\n * @param blobPropertyBag\n * @param onSuccess\n * @param onError\n */\nexport function sendWithBeacon(\n  body: Uint8Array,\n  url: string,\n  blobPropertyBag: BlobPropertyBag,\n  onSuccess: () => void,\n  onError: (error: OTLPExporterError) => void\n): void {\n  if (navigator.sendBeacon(url, new Blob([body], blobPropertyBag))) {\n    diag.debug('sendBeacon - can send', body);\n    onSuccess();\n  } else {\n    const error = new OTLPExporterError(`sendBeacon - cannot send ${body}`);\n    onError(error);\n  }\n}\n\n/**\n * function to send metrics/spans using browser XMLHttpRequest\n *     used when navigator.sendBeacon is not available\n * @param body\n * @param url\n * @param headers\n * @param onSuccess\n * @param onError\n */\nexport function sendWithXhr(\n  body: Uint8Array,\n  url: string,\n  headers: Record<string, string>,\n  exporterTimeout: number,\n  onSuccess: () => void,\n  onError: (error: OTLPExporterError) => void\n): void {\n  let retryTimer: ReturnType<typeof setTimeout>;\n  let xhr: XMLHttpRequest;\n  let reqIsDestroyed = false;\n\n  const exporterTimer = setTimeout(() => {\n    clearTimeout(retryTimer);\n    reqIsDestroyed = true;\n\n    if (xhr.readyState === XMLHttpRequest.DONE) {\n      const err = new OTLPExporterError('Request Timeout');\n      onError(err);\n    } else {\n      xhr.abort();\n    }\n  }, exporterTimeout);\n\n  const sendWithRetry = (\n    retries = DEFAULT_EXPORT_MAX_ATTEMPTS,\n    minDelay = DEFAULT_EXPORT_INITIAL_BACKOFF\n  ) => {\n    xhr = new XMLHttpRequest();\n    xhr.open('POST', url);\n\n    const defaultHeaders = {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n    };\n\n    Object.entries({\n      ...defaultHeaders,\n      ...headers,\n    }).forEach(([k, v]) => {\n      xhr.setRequestHeader(k, v);\n    });\n\n    xhr.send(body);\n\n    xhr.onreadystatechange = () => {\n      if (xhr.readyState === XMLHttpRequest.DONE && reqIsDestroyed === false) {\n        if (xhr.status >= 200 && xhr.status <= 299) {\n          diag.debug('xhr success', body);\n          onSuccess();\n          clearTimeout(exporterTimer);\n          clearTimeout(retryTimer);\n        } else if (xhr.status && isExportRetryable(xhr.status) && retries > 0) {\n          let retryTime: number;\n          minDelay = DEFAULT_EXPORT_BACKOFF_MULTIPLIER * minDelay;\n\n          // retry after interval specified in Retry-After header\n          if (xhr.getResponseHeader('Retry-After')) {\n            retryTime = parseRetryAfterToMills(\n              xhr.getResponseHeader('Retry-After')!\n            );\n          } else {\n            // exponential backoff with jitter\n            retryTime = Math.round(\n              Math.random() * (DEFAULT_EXPORT_MAX_BACKOFF - minDelay) + minDelay\n            );\n          }\n\n          retryTimer = setTimeout(() => {\n            sendWithRetry(retries - 1, minDelay);\n          }, retryTime);\n        } else {\n          const error = new OTLPExporterError(\n            `Failed to export with XHR (status: ${xhr.status})`,\n            xhr.status\n          );\n          onError(error);\n          clearTimeout(exporterTimer);\n          clearTimeout(retryTimer);\n        }\n      }\n    };\n\n    xhr.onabort = () => {\n      if (reqIsDestroyed) {\n        const err = new OTLPExporterError('Request Timeout');\n        onError(err);\n      }\n      clearTimeout(exporterTimer);\n      clearTimeout(retryTimer);\n    };\n\n    xhr.onerror = () => {\n      if (reqIsDestroyed) {\n        const err = new OTLPExporterError('Request Timeout');\n        onError(err);\n      }\n      clearTimeout(exporterTimer);\n      clearTimeout(retryTimer);\n    };\n  };\n\n  sendWithRetry();\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { OTLPExporterBase } from '../../OTLPExporterBase';\nimport { OTLPExporterConfigBase } from '../../types';\nimport * as otlpTypes from '../../types';\nimport { parseHeaders } from '../../util';\nimport { sendWithBeacon, sendWithXhr } from './util';\nimport { diag } from '@opentelemetry/api';\nimport { getEnv, baggageUtils } from '@opentelemetry/core';\nimport { ISerializer } from '@opentelemetry/otlp-transformer';\n\n/**\n * Collector Metric Exporter abstract base class\n */\nexport abstract class OTLPExporterBrowserBase<\n  ExportItem,\n  ServiceResponse,\n> extends OTLPExporterBase<OTLPExporterConfigBase, ExportItem> {\n  protected _headers: Record<string, string>;\n  private _useXHR: boolean = false;\n  private _contentType: string;\n  private _serializer: ISerializer<ExportItem[], ServiceResponse>;\n\n  /**\n   * @param config\n   * @param serializer\n   * @param contentType\n   */\n  constructor(\n    config: OTLPExporterConfigBase = {},\n    serializer: ISerializer<ExportItem[], ServiceResponse>,\n    contentType: string\n  ) {\n    super(config);\n    this._serializer = serializer;\n    this._contentType = contentType;\n    this._useXHR =\n      !!config.headers || typeof navigator.sendBeacon !== 'function';\n    if (this._useXHR) {\n      this._headers = Object.assign(\n        {},\n        parseHeaders(config.headers),\n        baggageUtils.parseKeyPairsIntoRecord(\n          getEnv().OTEL_EXPORTER_OTLP_HEADERS\n        )\n      );\n    } else {\n      this._headers = {};\n    }\n  }\n\n  onInit(): void {}\n\n  onShutdown(): void {}\n\n  send(\n    items: ExportItem[],\n    onSuccess: () => void,\n    onError: (error: otlpTypes.OTLPExporterError) => void\n  ): void {\n    if (this._shutdownOnce.isCalled) {\n      diag.debug('Shutdown already started. Cannot send objects');\n      return;\n    }\n    const body = this._serializer.serializeRequest(items) ?? new Uint8Array();\n\n    const promise = new Promise<void>((resolve, reject) => {\n      if (this._useXHR) {\n        sendWithXhr(\n          body,\n          this.url,\n          {\n            ...this._headers,\n            'Content-Type': this._contentType,\n          },\n          this.timeoutMillis,\n          resolve,\n          reject\n        );\n      } else {\n        sendWithBeacon(\n          body,\n          this.url,\n          { type: this._contentType },\n          resolve,\n          reject\n        );\n      }\n    }).then(onSuccess, onError);\n\n    this._sendingPromises.push(promise);\n    const popPromise = () => {\n      const index = this._sendingPromises.indexOf(promise);\n      this._sendingPromises.splice(index, 1);\n    };\n    promise.then(popPromise, popPromise);\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport { OTLPExporterBrowserBase } from './OTLPExporterBrowserBase';\nexport { sendWithXhr } from './util';\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport {\n  OTLPExporterNodeBase,\n  sendWithHttp,\n  createHttpAgent,\n  configureCompression,\n  OTLPExporterNodeConfigBase,\n  CompressionAlgorithm,\n} from './node';\nexport { OTLPExporterBrowserBase, sendWithXhr } from './browser';\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport * from './platform';\nexport { OTLPExporterBase } from './OTLPExporterBase';\nexport {\n  OTLPExporterError,\n  OTLPExporterConfigBase,\n  ExportServiceError,\n} from './types';\nexport {\n  parseHeaders,\n  appendResourcePathToUrl,\n  appendRootPathToUrlIfNeeded,\n  configureExporterTimeout,\n  invalidTimeout,\n} from './util';\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { OtlpEncodingOptions, Fixed64, LongBits } from './types';\nimport { HrTime } from '@opentelemetry/api';\nimport { hexToBinary, hrTimeToNanoseconds } from '@opentelemetry/core';\n\nexport function hrTimeToNanos(hrTime: HrTime): bigint {\n  const NANOSECONDS = BigInt(1_000_000_000);\n  return BigInt(hrTime[0]) * NANOSECONDS + BigInt(hrTime[1]);\n}\n\nexport function toLongBits(value: bigint): LongBits {\n  const low = Number(BigInt.asUintN(32, value));\n  const high = Number(BigInt.asUintN(32, value >> BigInt(32)));\n  return { low, high };\n}\n\nexport function encodeAsLongBits(hrTime: HrTime): LongBits {\n  const nanos = hrTimeToNanos(hrTime);\n  return toLongBits(nanos);\n}\n\nexport function encodeAsString(hrTime: HrTime): string {\n  const nanos = hrTimeToNanos(hrTime);\n  return nanos.toString();\n}\n\nconst encodeTimestamp =\n  typeof BigInt !== 'undefined' ? encodeAsString : hrTimeToNanoseconds;\n\nexport type HrTimeEncodeFunction = (hrTime: HrTime) => Fixed64;\nexport type SpanContextEncodeFunction = (\n  spanContext: string\n) => string | Uint8Array;\nexport type OptionalSpanContextEncodeFunction = (\n  spanContext: string | undefined\n) => string | Uint8Array | undefined;\n\nexport interface Encoder {\n  encodeHrTime: HrTimeEncodeFunction;\n  encodeSpanContext: SpanContextEncodeFunction;\n  encodeOptionalSpanContext: OptionalSpanContextEncodeFunction;\n}\n\nfunction identity<T>(value: T): T {\n  return value;\n}\n\nfunction optionalHexToBinary(str: string | undefined): Uint8Array | undefined {\n  if (str === undefined) return undefined;\n  return hexToBinary(str);\n}\n\nconst DEFAULT_ENCODER: Encoder = {\n  encodeHrTime: encodeAsLongBits,\n  encodeSpanContext: hexToBinary,\n  encodeOptionalSpanContext: optionalHexToBinary,\n};\n\nexport function getOtlpEncoder(options?: OtlpEncodingOptions): Encoder {\n  if (options === undefined) {\n    return DEFAULT_ENCODER;\n  }\n\n  const useLongBits = options.useLongBits ?? true;\n  const useHex = options.useHex ?? false;\n  return {\n    encodeHrTime: useLongBits ? encodeAsLongBits : encodeTimestamp,\n    encodeSpanContext: useHex ? identity : hexToBinary,\n    encodeOptionalSpanContext: useHex ? identity : optionalHexToBinary,\n  };\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Fixed64, IInstrumentationScope, IKeyValue } from '../common/types';\nimport { IResource } from '../resource/types';\n\n/** Properties of an ExportTraceServiceRequest. */\nexport interface IExportTraceServiceRequest {\n  /** ExportTraceServiceRequest resourceSpans */\n  resourceSpans?: IResourceSpans[];\n}\n\nexport interface IExportTraceServiceResponse {\n  /** ExportTraceServiceResponse partialSuccess */\n  partialSuccess?: IExportTracePartialSuccess;\n}\n\nexport interface IExportTracePartialSuccess {\n  /** ExportLogsServiceResponse rejectedLogRecords */\n  rejectedSpans?: number;\n\n  /** ExportLogsServiceResponse errorMessage */\n  errorMessage?: string;\n}\n\n/** Properties of a ResourceSpans. */\nexport interface IResourceSpans {\n  /** ResourceSpans resource */\n  resource?: IResource;\n\n  /** ResourceSpans scopeSpans */\n  scopeSpans: IScopeSpans[];\n\n  /** ResourceSpans schemaUrl */\n  schemaUrl?: string;\n}\n\n/** Properties of an ScopeSpans. */\nexport interface IScopeSpans {\n  /** IScopeSpans scope */\n  scope?: IInstrumentationScope;\n\n  /** IScopeSpans spans */\n  spans?: ISpan[];\n\n  /** IScopeSpans schemaUrl */\n  schemaUrl?: string | null;\n}\n\n/** Properties of a Span. */\nexport interface ISpan {\n  /** Span traceId */\n  traceId: string | Uint8Array;\n\n  /** Span spanId */\n  spanId: string | Uint8Array;\n\n  /** Span traceState */\n  traceState?: string | null;\n\n  /** Span parentSpanId */\n  parentSpanId?: string | Uint8Array;\n\n  /** Span name */\n  name: string;\n\n  /** Span kind */\n  kind: ESpanKind;\n\n  /** Span startTimeUnixNano */\n  startTimeUnixNano: Fixed64;\n\n  /** Span endTimeUnixNano */\n  endTimeUnixNano: Fixed64;\n\n  /** Span attributes */\n  attributes: IKeyValue[];\n\n  /** Span droppedAttributesCount */\n  droppedAttributesCount: number;\n\n  /** Span events */\n  events: IEvent[];\n\n  /** Span droppedEventsCount */\n  droppedEventsCount: number;\n\n  /** Span links */\n  links: ILink[];\n\n  /** Span droppedLinksCount */\n  droppedLinksCount: number;\n\n  /** Span status */\n  status: IStatus;\n}\n\n/**\n * SpanKind is the type of span. Can be used to specify additional relationships between spans\n * in addition to a parent/child relationship.\n */\nexport enum ESpanKind {\n  /** Unspecified. Do NOT use as default. Implementations MAY assume SpanKind to be INTERNAL when receiving UNSPECIFIED. */\n  SPAN_KIND_UNSPECIFIED = 0,\n\n  /** Indicates that the span represents an internal operation within an application,\n   * as opposed to an operation happening at the boundaries. Default value.\n   */\n  SPAN_KIND_INTERNAL = 1,\n\n  /** Indicates that the span covers server-side handling of an RPC or other\n   * remote network request.\n   */\n  SPAN_KIND_SERVER = 2,\n\n  /** Indicates that the span describes a request to some remote service.\n   */\n  SPAN_KIND_CLIENT = 3,\n\n  /** Indicates that the span describes a producer sending a message to a broker.\n   * Unlike CLIENT and SERVER, there is often no direct critical path latency relationship\n   * between producer and consumer spans. A PRODUCER span ends when the message was accepted\n   * by the broker while the logical processing of the message might span a much longer time.\n   */\n  SPAN_KIND_PRODUCER = 4,\n\n  /** Indicates that the span describes consumer receiving a message from a broker.\n   * Like the PRODUCER kind, there is often no direct critical path latency relationship\n   * between producer and consumer spans.\n   */\n  SPAN_KIND_CONSUMER = 5,\n}\n\n/** Properties of a Status. */\nexport interface IStatus {\n  /** Status message */\n  message?: string;\n\n  /** Status code */\n  code: EStatusCode;\n}\n\n/** StatusCode enum. */\nexport const enum EStatusCode {\n  /** The default status. */\n  STATUS_CODE_UNSET = 0,\n  /** The Span has been evaluated by an Application developers or Operator to have completed successfully. */\n  STATUS_CODE_OK = 1,\n  /** The Span contains an error. */\n  STATUS_CODE_ERROR = 2,\n}\n\n/** Properties of an Event. */\nexport interface IEvent {\n  /** Event timeUnixNano */\n  timeUnixNano: Fixed64;\n\n  /** Event name */\n  name: string;\n\n  /** Event attributes */\n  attributes: IKeyValue[];\n\n  /** Event droppedAttributesCount */\n  droppedAttributesCount: number;\n}\n\n/** Properties of a Link. */\nexport interface ILink {\n  /** Link traceId */\n  traceId: string | Uint8Array;\n\n  /** Link spanId */\n  spanId: string | Uint8Array;\n\n  /** Link traceState */\n  traceState?: string;\n\n  /** Link attributes */\n  attributes: IKeyValue[];\n\n  /** Link droppedAttributesCount */\n  droppedAttributesCount: number;\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport type { IAnyValue, IInstrumentationScope, IKeyValue } from './types';\nimport { Attributes } from '@opentelemetry/api';\nimport { InstrumentationScope } from '@opentelemetry/core';\n\nexport function createInstrumentationScope(\n  scope: InstrumentationScope\n): IInstrumentationScope {\n  return {\n    name: scope.name,\n    version: scope.version,\n  };\n}\n\nexport function toAttributes(attributes: Attributes): IKeyValue[] {\n  return Object.keys(attributes).map(key => toKeyValue(key, attributes[key]));\n}\n\nexport function toKeyValue(key: string, value: unknown): IKeyValue {\n  return {\n    key: key,\n    value: toAnyValue(value),\n  };\n}\n\nexport function toAnyValue(value: unknown): IAnyValue {\n  const t = typeof value;\n  if (t === 'string') return { stringValue: value as string };\n  if (t === 'number') {\n    if (!Number.isInteger(value)) return { doubleValue: value as number };\n    return { intValue: value as number };\n  }\n  if (t === 'boolean') return { boolValue: value as boolean };\n  if (value instanceof Uint8Array) return { bytesValue: value };\n  if (Array.isArray(value))\n    return { arrayValue: { values: value.map(toAnyValue) } };\n  if (t === 'object' && value != null)\n    return {\n      kvlistValue: {\n        values: Object.entries(value as object).map(([k, v]) =>\n          toKeyValue(k, v)\n        ),\n      },\n    };\n\n  return {};\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport type { Link } from '@opentelemetry/api';\nimport type { ReadableSpan, TimedEvent } from '@opentelemetry/sdk-trace-base';\nimport type { Encoder } from '../common';\nimport { toAttributes } from '../common/internal';\nimport { EStatusCode, IEvent, ILink, ISpan } from './types';\n\nexport function sdkSpanToOtlpSpan(span: ReadableSpan, encoder: Encoder): ISpan {\n  const ctx = span.spanContext();\n  const status = span.status;\n  return {\n    traceId: encoder.encodeSpanContext(ctx.traceId),\n    spanId: encoder.encodeSpanContext(ctx.spanId),\n    parentSpanId: encoder.encodeOptionalSpanContext(span.parentSpanId),\n    traceState: ctx.traceState?.serialize(),\n    name: span.name,\n    // Span kind is offset by 1 because the API does not define a value for unset\n    kind: span.kind == null ? 0 : span.kind + 1,\n    startTimeUnixNano: encoder.encodeHrTime(span.startTime),\n    endTimeUnixNano: encoder.encodeHrTime(span.endTime),\n    attributes: toAttributes(span.attributes),\n    droppedAttributesCount: span.droppedAttributesCount,\n    events: span.events.map(event => toOtlpSpanEvent(event, encoder)),\n    droppedEventsCount: span.droppedEventsCount,\n    status: {\n      // API and proto enums share the same values\n      code: status.code as unknown as EStatusCode,\n      message: status.message,\n    },\n    links: span.links.map(link => toOtlpLink(link, encoder)),\n    droppedLinksCount: span.droppedLinksCount,\n  };\n}\n\nexport function toOtlpLink(link: Link, encoder: Encoder): ILink {\n  return {\n    attributes: link.attributes ? toAttributes(link.attributes) : [],\n    spanId: encoder.encodeSpanContext(link.context.spanId),\n    traceId: encoder.encodeSpanContext(link.context.traceId),\n    traceState: link.context.traceState?.serialize(),\n    droppedAttributesCount: link.droppedAttributesCount || 0,\n  };\n}\n\nexport function toOtlpSpanEvent(\n  timedEvent: TimedEvent,\n  encoder: Encoder\n): IEvent {\n  return {\n    attributes: timedEvent.attributes\n      ? toAttributes(timedEvent.attributes)\n      : [],\n    name: timedEvent.name,\n    timeUnixNano: encoder.encodeHrTime(timedEvent.time),\n    droppedAttributesCount: timedEvent.droppedAttributesCount || 0,\n  };\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { IResource as ISdkResource } from '@opentelemetry/resources';\nimport { toAttributes } from '../common/internal';\nimport { IResource } from './types';\n\nexport function createResource(resource: ISdkResource): IResource {\n  return {\n    attributes: toAttributes(resource.attributes),\n    droppedAttributesCount: 0,\n  };\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport type { IResource } from '@opentelemetry/resources';\nimport type { ReadableSpan } from '@opentelemetry/sdk-trace-base';\nimport type { OtlpEncodingOptions } from '../common/types';\nimport { sdkSpanToOtlpSpan } from './internal';\nimport {\n  IExportTraceServiceRequest,\n  IResourceSpans,\n  IScopeSpans,\n} from './types';\nimport { Encoder, getOtlpEncoder } from '../common';\nimport { createInstrumentationScope } from '../common/internal';\nimport { createResource } from '../resource/internal';\n\nexport function createExportTraceServiceRequest(\n  spans: ReadableSpan[],\n  options?: OtlpEncodingOptions\n): IExportTraceServiceRequest {\n  const encoder = getOtlpEncoder(options);\n  return {\n    resourceSpans: spanRecordsToResourceSpans(spans, encoder),\n  };\n}\n\nfunction createResourceMap(readableSpans: ReadableSpan[]) {\n  const resourceMap: Map<IResource, Map<string, ReadableSpan[]>> = new Map();\n  for (const record of readableSpans) {\n    let ilmMap = resourceMap.get(record.resource);\n\n    if (!ilmMap) {\n      ilmMap = new Map();\n      resourceMap.set(record.resource, ilmMap);\n    }\n\n    // TODO this is duplicated in basic tracer. Consolidate on a common helper in core\n    const instrumentationLibraryKey = `${record.instrumentationLibrary.name}@${\n      record.instrumentationLibrary.version || ''\n    }:${record.instrumentationLibrary.schemaUrl || ''}`;\n    let records = ilmMap.get(instrumentationLibraryKey);\n\n    if (!records) {\n      records = [];\n      ilmMap.set(instrumentationLibraryKey, records);\n    }\n\n    records.push(record);\n  }\n\n  return resourceMap;\n}\n\nfunction spanRecordsToResourceSpans(\n  readableSpans: ReadableSpan[],\n  encoder: Encoder\n): IResourceSpans[] {\n  const resourceMap = createResourceMap(readableSpans);\n  const out: IResourceSpans[] = [];\n\n  const entryIterator = resourceMap.entries();\n  let entry = entryIterator.next();\n  while (!entry.done) {\n    const [resource, ilmMap] = entry.value;\n    const scopeResourceSpans: IScopeSpans[] = [];\n    const ilmIterator = ilmMap.values();\n    let ilmEntry = ilmIterator.next();\n    while (!ilmEntry.done) {\n      const scopeSpans = ilmEntry.value;\n      if (scopeSpans.length > 0) {\n        const spans = scopeSpans.map(readableSpan =>\n          sdkSpanToOtlpSpan(readableSpan, encoder)\n        );\n\n        scopeResourceSpans.push({\n          scope: createInstrumentationScope(\n            scopeSpans[0].instrumentationLibrary\n          ),\n          spans: spans,\n          schemaUrl: scopeSpans[0].instrumentationLibrary.schemaUrl,\n        });\n      }\n      ilmEntry = ilmIterator.next();\n    }\n    // TODO SDK types don't provide resource schema URL at this time\n    const transformedSpans: IResourceSpans = {\n      resource: createResource(resource),\n      scopeSpans: scopeResourceSpans,\n      schemaUrl: undefined,\n    };\n\n    out.push(transformedSpans);\n    entry = entryIterator.next();\n  }\n\n  return out;\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * AggregationTemporality indicates the way additive quantities are expressed.\n */\nexport enum AggregationTemporality {\n  DELTA,\n  CUMULATIVE,\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { HrTime, MetricAttributes, ValueType } from '@opentelemetry/api';\nimport { InstrumentationScope } from '@opentelemetry/core';\nimport { IResource } from '@opentelemetry/resources';\nimport { InstrumentType } from '../InstrumentDescriptor';\nimport { AggregationTemporality } from './AggregationTemporality';\nimport { Histogram, ExponentialHistogram } from '../aggregator/types';\n\nexport interface MetricDescriptor {\n  readonly name: string;\n  readonly description: string;\n  readonly unit: string;\n  /**\n   * @deprecated exporter should avoid depending on the type of the instrument\n   * as their resulting aggregator can be re-mapped with views.\n   */\n  readonly type: InstrumentType;\n  readonly valueType: ValueType;\n}\n\n/**\n * Basic metric data fields.\n */\ninterface BaseMetricData {\n  readonly descriptor: MetricDescriptor;\n  readonly aggregationTemporality: AggregationTemporality;\n  /**\n   * DataPointType of the metric instrument.\n   */\n  readonly dataPointType: DataPointType;\n}\n\n/**\n * Represents a metric data aggregated by either a LastValueAggregation or\n * SumAggregation.\n */\nexport interface SumMetricData extends BaseMetricData {\n  readonly dataPointType: DataPointType.SUM;\n  readonly dataPoints: DataPoint<number>[];\n  readonly isMonotonic: boolean;\n}\n\nexport interface GaugeMetricData extends BaseMetricData {\n  readonly dataPointType: DataPointType.GAUGE;\n  readonly dataPoints: DataPoint<number>[];\n}\n\n/**\n * Represents a metric data aggregated by a HistogramAggregation.\n */\nexport interface HistogramMetricData extends BaseMetricData {\n  readonly dataPointType: DataPointType.HISTOGRAM;\n  readonly dataPoints: DataPoint<Histogram>[];\n}\n\n/**\n * Represents a metric data aggregated by a ExponentialHistogramAggregation.\n */\nexport interface ExponentialHistogramMetricData extends BaseMetricData {\n  readonly dataPointType: DataPointType.EXPONENTIAL_HISTOGRAM;\n  readonly dataPoints: DataPoint<ExponentialHistogram>[];\n}\n\n/**\n * Represents an aggregated metric data.\n */\nexport type MetricData =\n  | SumMetricData\n  | GaugeMetricData\n  | HistogramMetricData\n  | ExponentialHistogramMetricData;\n\nexport interface ScopeMetrics {\n  scope: InstrumentationScope;\n  metrics: MetricData[];\n}\n\nexport interface ResourceMetrics {\n  resource: IResource;\n  scopeMetrics: ScopeMetrics[];\n}\n\n/**\n * Represents the collection result of the metrics. If there are any\n * non-critical errors in the collection, like throwing in a single observable\n * callback, these errors are aggregated in the {@link CollectionResult.errors}\n * array and other successfully collected metrics are returned.\n */\nexport interface CollectionResult {\n  /**\n   * Collected metrics.\n   */\n  resourceMetrics: ResourceMetrics;\n  /**\n   * Arbitrary JavaScript exception values.\n   */\n  errors: unknown[];\n}\n\n/**\n * The aggregated point data type.\n */\nexport enum DataPointType {\n  /**\n   * A histogram data point contains a histogram statistics of collected\n   * values with a list of explicit bucket boundaries and statistics such\n   * as min, max, count, and sum of all collected values.\n   */\n  HISTOGRAM,\n  /**\n   * An exponential histogram data point contains a histogram statistics of\n   * collected values where bucket boundaries are automatically calculated\n   * using an exponential function, and statistics such as min, max, count,\n   * and sum of all collected values.\n   */\n  EXPONENTIAL_HISTOGRAM,\n  /**\n   * A gauge metric data point has only a single numeric value.\n   */\n  GAUGE,\n  /**\n   * A sum metric data point has a single numeric value and a\n   * monotonicity-indicator.\n   */\n  SUM,\n}\n\n/**\n * Represents an aggregated point data with start time, end time and their\n * associated attributes and points.\n */\nexport interface DataPoint<T> {\n  /**\n   * The start epoch timestamp of the DataPoint, usually the time when\n   * the metric was created when the preferred AggregationTemporality is\n   * CUMULATIVE, or last collection time otherwise.\n   */\n  readonly startTime: HrTime;\n  /**\n   * The end epoch timestamp when data were collected, usually it represents\n   * the moment when `MetricReader.collect` was called.\n   */\n  readonly endTime: HrTime;\n  /**\n   * The attributes associated with this DataPoint.\n   */\n  readonly attributes: MetricAttributes;\n  /**\n   * The value for this DataPoint. The type of the value is indicated by the\n   * {@link DataPointType}.\n   */\n  readonly value: T;\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { MetricAttributes } from '@opentelemetry/api';\nimport { InstrumentationScope } from '@opentelemetry/core';\n\nexport type Maybe<T> = T | undefined;\n\nexport function isNotNullish<T>(item: Maybe<T>): item is T {\n  return item !== undefined && item !== null;\n}\n\n/**\n * Converting the unordered attributes into unique identifier string.\n * @param attributes user provided unordered MetricAttributes.\n */\nexport function hashAttributes(attributes: MetricAttributes): string {\n  let keys = Object.keys(attributes);\n  if (keys.length === 0) return '';\n\n  // Return a string that is stable on key orders.\n  keys = keys.sort();\n  return JSON.stringify(keys.map(key => [key, attributes[key]]));\n}\n\n/**\n * Converting the instrumentation scope object to a unique identifier string.\n * @param instrumentationScope\n */\nexport function instrumentationScopeId(\n  instrumentationScope: InstrumentationScope\n): string {\n  return `${instrumentationScope.name}:${instrumentationScope.version ?? ''}:${\n    instrumentationScope.schemaUrl ?? ''\n  }`;\n}\n\n/**\n * Error that is thrown on timeouts.\n */\nexport class TimeoutError extends Error {\n  constructor(message?: string) {\n    super(message);\n\n    // manually adjust prototype to retain `instanceof` functionality when targeting ES5, see:\n    // https://github.com/Microsoft/TypeScript-wiki/blob/main/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n    Object.setPrototypeOf(this, TimeoutError.prototype);\n  }\n}\n\n/**\n * Adds a timeout to a promise and rejects if the specified timeout has elapsed. Also rejects if the specified promise\n * rejects, and resolves if the specified promise resolves.\n *\n * <p> NOTE: this operation will continue even after it throws a {@link TimeoutError}.\n *\n * @param promise promise to use with timeout.\n * @param timeout the timeout in milliseconds until the returned promise is rejected.\n */\nexport function callWithTimeout<T>(\n  promise: Promise<T>,\n  timeout: number\n): Promise<T> {\n  let timeoutHandle: ReturnType<typeof setTimeout>;\n\n  const timeoutPromise = new Promise<never>(function timeoutFunction(\n    _resolve,\n    reject\n  ) {\n    timeoutHandle = setTimeout(function timeoutHandler() {\n      reject(new TimeoutError('Operation timed out.'));\n    }, timeout);\n  });\n\n  return Promise.race([promise, timeoutPromise]).then(\n    result => {\n      clearTimeout(timeoutHandle);\n      return result;\n    },\n    reason => {\n      clearTimeout(timeoutHandle);\n      throw reason;\n    }\n  );\n}\n\nexport interface PromiseAllSettledFulfillResult<T> {\n  status: 'fulfilled';\n  value: T;\n}\n\nexport interface PromiseAllSettledRejectionResult {\n  status: 'rejected';\n  reason: unknown;\n}\n\nexport type PromiseAllSettledResult<T> =\n  | PromiseAllSettledFulfillResult<T>\n  | PromiseAllSettledRejectionResult;\n\n/**\n * Node.js v12.9 lower and browser compatible `Promise.allSettled`.\n */\nexport async function PromiseAllSettled<T>(\n  promises: Promise<T>[]\n): Promise<PromiseAllSettledResult<T>[]> {\n  return Promise.all(\n    promises.map<Promise<PromiseAllSettledResult<T>>>(async p => {\n      try {\n        const ret = await p;\n        return {\n          status: 'fulfilled',\n          value: ret,\n        };\n      } catch (e) {\n        return {\n          status: 'rejected',\n          reason: e,\n        };\n      }\n    })\n  );\n}\n\nexport function isPromiseAllSettledRejectionResult(\n  it: PromiseAllSettledResult<unknown>\n): it is PromiseAllSettledRejectionResult {\n  return it.status === 'rejected';\n}\n\n/**\n * Node.js v11.0 lower and browser compatible `Array.prototype.flatMap`.\n */\nexport function FlatMap<T, R>(arr: T[], fn: (it: T) => R[]): R[] {\n  const result: R[] = [];\n  arr.forEach(it => {\n    result.push(...fn(it));\n  });\n  return result;\n}\n\nexport function setEquals(lhs: Set<unknown>, rhs: Set<unknown>): boolean {\n  if (lhs.size !== rhs.size) {\n    return false;\n  }\n  for (const item of lhs) {\n    if (!rhs.has(item)) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Binary search the sorted array to the find lower bound for the value.\n * @param arr\n * @param value\n * @returns\n */\nexport function binarySearchLB(arr: number[], value: number): number {\n  let lo = 0;\n  let hi = arr.length - 1;\n\n  while (hi - lo > 1) {\n    const mid = Math.trunc((hi + lo) / 2);\n    if (arr[mid] <= value) {\n      lo = mid;\n    } else {\n      hi = mid - 1;\n    }\n  }\n\n  if (arr[hi] <= value) {\n    return hi;\n  } else if (arr[lo] <= value) {\n    return lo;\n  }\n  return -1;\n}\n\nexport function equalsCaseInsensitive(lhs: string, rhs: string): boolean {\n  return lhs.toLowerCase() === rhs.toLowerCase();\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { HrTime, MetricAttributes } from '@opentelemetry/api';\nimport { AggregationTemporality } from '../export/AggregationTemporality';\nimport { MetricData, MetricDescriptor } from '../export/MetricData';\nimport { Maybe } from '../utils';\n\n/** The kind of aggregator. */\nexport enum AggregatorKind {\n  DROP,\n  SUM,\n  LAST_VALUE,\n  HISTOGRAM,\n  EXPONENTIAL_HISTOGRAM,\n}\n\n/** DataPoint value type for SumAggregation. */\nexport type Sum = number;\n\n/** DataPoint value type for LastValueAggregation. */\nexport type LastValue = number;\n\n/** DataPoint value type for HistogramAggregation. */\nexport interface Histogram {\n  /**\n   * Buckets are implemented using two different arrays:\n   *  - boundaries: contains every finite bucket boundary, which are inclusive lower bounds\n   *  - counts: contains event counts for each bucket\n   *\n   * Note that we'll always have n+1 buckets, where n is the number of boundaries.\n   * This is because we need to count events that are below the lowest boundary.\n   *\n   * Example: if we measure the values: [5, 30, 5, 40, 5, 15, 15, 15, 25]\n   *  with the boundaries [ 10, 20, 30 ], we will have the following state:\n   *\n   * buckets: {\n   *\tboundaries: [10, 20, 30],\n   *\tcounts: [3, 3, 1, 2],\n   * }\n   */\n  buckets: {\n    boundaries: number[];\n    counts: number[];\n  };\n  sum?: number;\n  count: number;\n  min?: number;\n  max?: number;\n}\n\n/** DataPoint value type for ExponentialHistogramAggregation. */\nexport interface ExponentialHistogram {\n  count: number;\n  sum?: number;\n  scale: number;\n  zeroCount: number;\n  positive: {\n    offset: number;\n    bucketCounts: number[];\n  };\n  negative: {\n    offset: number;\n    bucketCounts: number[];\n  };\n  min?: number;\n  max?: number;\n}\n\n/**\n * An Aggregator accumulation state.\n */\nexport interface Accumulation {\n  setStartTime(startTime: HrTime): void;\n  record(value: number): void;\n}\n\nexport type AccumulationRecord<T> = [MetricAttributes, T];\n\n/**\n * Base interface for aggregators. Aggregators are responsible for holding\n * aggregated values and taking a snapshot of these values upon export.\n */\nexport interface Aggregator<T> {\n  /** The kind of the aggregator. */\n  kind: AggregatorKind;\n\n  /**\n   * Create a clean state of accumulation.\n   */\n  createAccumulation(startTime: HrTime): T;\n\n  /**\n   * Returns the result of the merge of the given accumulations.\n   *\n   * This should always assume that the accumulations do not overlap and merge together for a new\n   * cumulative report.\n   *\n   * @param previous the previously captured accumulation\n   * @param delta the newly captured (delta) accumulation\n   * @returns the result of the merge of the given accumulations\n   */\n  merge(previous: T, delta: T): T;\n\n  /**\n   * Returns a new DELTA aggregation by comparing two cumulative measurements.\n   *\n   * @param previous the previously captured accumulation\n   * @param current the newly captured (cumulative) accumulation\n   * @returns The resulting delta accumulation\n   */\n  diff(previous: T, current: T): T;\n\n  /**\n   * Returns the {@link MetricData} that this {@link Aggregator} will produce.\n   *\n   * @param descriptor the metric descriptor.\n   * @param aggregationTemporality the temporality of the resulting {@link MetricData}\n   * @param accumulationByAttributes the array of attributes and accumulation pairs.\n   * @param endTime the end time of the metric data.\n   * @return the {@link MetricData} that this {@link Aggregator} will produce.\n   */\n  toMetricData(\n    descriptor: MetricDescriptor,\n    aggregationTemporality: AggregationTemporality,\n    accumulationByAttributes: AccumulationRecord<T>[],\n    endTime: HrTime\n  ): Maybe<MetricData>;\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { HrTime } from '@opentelemetry/api';\nimport { AggregationTemporality } from '../export/AggregationTemporality';\nimport { MetricData, MetricDescriptor } from '../export/MetricData';\nimport { Maybe } from '../utils';\nimport { AggregatorKind, Aggregator, AccumulationRecord } from './types';\n\n/** Basic aggregator for None which keeps no recorded value. */\nexport class DropAggregator implements Aggregator<undefined> {\n  kind: AggregatorKind.DROP = AggregatorKind.DROP;\n\n  createAccumulation() {\n    return undefined;\n  }\n\n  merge(_previous: undefined, _delta: undefined) {\n    return undefined;\n  }\n\n  diff(_previous: undefined, _current: undefined) {\n    return undefined;\n  }\n\n  toMetricData(\n    _descriptor: MetricDescriptor,\n    _aggregationTemporality: AggregationTemporality,\n    _accumulationByAttributes: AccumulationRecord<undefined>[],\n    _endTime: HrTime\n  ): Maybe<MetricData> {\n    return undefined;\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { MetricOptions, ValueType, diag } from '@opentelemetry/api';\nimport { View } from './view/View';\nimport { equalsCaseInsensitive } from './utils';\n\n/**\n * Supported types of metric instruments.\n */\nexport enum InstrumentType {\n  COUNTER = 'COUNTER',\n  GAUGE = 'GAUGE',\n  HISTOGRAM = 'HISTOGRAM',\n  UP_DOWN_COUNTER = 'UP_DOWN_COUNTER',\n  OBSERVABLE_COUNTER = 'OBSERVABLE_COUNTER',\n  OBSERVABLE_GAUGE = 'OBSERVABLE_GAUGE',\n  OBSERVABLE_UP_DOWN_COUNTER = 'OBSERVABLE_UP_DOWN_COUNTER',\n}\n\n/**\n * An internal interface describing the instrument.\n *\n * This is intentionally distinguished from the public MetricDescriptor (a.k.a. InstrumentDescriptor)\n * which may not contains internal fields like metric advice.\n */\nexport interface InstrumentDescriptor {\n  readonly name: string;\n  readonly description: string;\n  readonly unit: string;\n  readonly type: InstrumentType;\n  readonly valueType: ValueType;\n  /**\n   * @experimental\n   *\n   * This is intentionally not using the API's type as it's only available from @opentelemetry/api 1.7.0 and up.\n   * In SDK 2.0 we'll be able to bump the minimum API version and remove this workaround.\n   */\n  readonly advice: {\n    /**\n     * Hint the explicit bucket boundaries for SDK if the metric has been\n     * aggregated with a HistogramAggregator.\n     */\n    explicitBucketBoundaries?: number[];\n  };\n}\n\nexport function createInstrumentDescriptor(\n  name: string,\n  type: InstrumentType,\n  options?: MetricOptions\n): InstrumentDescriptor {\n  if (!isValidName(name)) {\n    diag.warn(\n      `Invalid metric name: \"${name}\". The metric name should be a ASCII string with a length no greater than 255 characters.`\n    );\n  }\n  return {\n    name,\n    type,\n    description: options?.description ?? '',\n    unit: options?.unit ?? '',\n    valueType: options?.valueType ?? ValueType.DOUBLE,\n    advice: options?.advice ?? {},\n  };\n}\n\nexport function createInstrumentDescriptorWithView(\n  view: View,\n  instrument: InstrumentDescriptor\n): InstrumentDescriptor {\n  return {\n    name: view.name ?? instrument.name,\n    description: view.description ?? instrument.description,\n    type: instrument.type,\n    unit: instrument.unit,\n    valueType: instrument.valueType,\n    advice: instrument.advice,\n  };\n}\n\nexport function isDescriptorCompatibleWith(\n  descriptor: InstrumentDescriptor,\n  otherDescriptor: InstrumentDescriptor\n) {\n  // Names are case-insensitive strings.\n  return (\n    equalsCaseInsensitive(descriptor.name, otherDescriptor.name) &&\n    descriptor.unit === otherDescriptor.unit &&\n    descriptor.type === otherDescriptor.type &&\n    descriptor.valueType === otherDescriptor.valueType\n  );\n}\n\n// ASCII string with a length no greater than 255 characters.\n// NB: the first character counted separately from the rest.\nconst NAME_REGEXP = /^[a-z][a-z0-9_.\\-/]{0,254}$/i;\nexport function isValidName(name: string): boolean {\n  return name.match(NAME_REGEXP) != null;\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Accumulation,\n  AccumulationRecord,\n  Aggregator,\n  AggregatorKind,\n} from './types';\nimport {\n  DataPointType,\n  HistogramMetricData,\n  MetricDescriptor,\n} from '../export/MetricData';\nimport { HrTime } from '@opentelemetry/api';\nimport { InstrumentType } from '../InstrumentDescriptor';\nimport { binarySearchLB, Maybe } from '../utils';\nimport { AggregationTemporality } from '../export/AggregationTemporality';\n\n/**\n * Internal value type for HistogramAggregation.\n * Differs from the exported type as undefined sum/min/max complicate arithmetic\n * performed by this aggregation, but are required to be undefined in the exported types.\n */\ninterface InternalHistogram {\n  buckets: {\n    boundaries: number[];\n    counts: number[];\n  };\n  sum: number;\n  count: number;\n  hasMinMax: boolean;\n  min: number;\n  max: number;\n}\n\nfunction createNewEmptyCheckpoint(boundaries: number[]): InternalHistogram {\n  const counts = boundaries.map(() => 0);\n  counts.push(0);\n  return {\n    buckets: {\n      boundaries,\n      counts,\n    },\n    sum: 0,\n    count: 0,\n    hasMinMax: false,\n    min: Infinity,\n    max: -Infinity,\n  };\n}\n\nexport class HistogramAccumulation implements Accumulation {\n  constructor(\n    public startTime: HrTime,\n    private readonly _boundaries: number[],\n    private _recordMinMax = true,\n    private _current: InternalHistogram = createNewEmptyCheckpoint(_boundaries)\n  ) {}\n\n  record(value: number): void {\n    // NaN does not fall into any bucket, is not zero and should not be counted,\n    // NaN is never greater than max nor less than min, therefore return as there's nothing for us to do.\n    if (Number.isNaN(value)) {\n      return;\n    }\n\n    this._current.count += 1;\n    this._current.sum += value;\n\n    if (this._recordMinMax) {\n      this._current.min = Math.min(value, this._current.min);\n      this._current.max = Math.max(value, this._current.max);\n      this._current.hasMinMax = true;\n    }\n\n    const idx = binarySearchLB(this._boundaries, value);\n    this._current.buckets.counts[idx + 1] += 1;\n  }\n\n  setStartTime(startTime: HrTime): void {\n    this.startTime = startTime;\n  }\n\n  toPointValue(): InternalHistogram {\n    return this._current;\n  }\n}\n\n/**\n * Basic aggregator which observes events and counts them in pre-defined buckets\n * and provides the total sum and count of all observations.\n */\nexport class HistogramAggregator implements Aggregator<HistogramAccumulation> {\n  public kind: AggregatorKind.HISTOGRAM = AggregatorKind.HISTOGRAM;\n\n  /**\n   * @param _boundaries sorted upper bounds of recorded values.\n   * @param _recordMinMax If set to true, min and max will be recorded. Otherwise, min and max will not be recorded.\n   */\n  constructor(\n    private readonly _boundaries: number[],\n    private readonly _recordMinMax: boolean\n  ) {}\n\n  createAccumulation(startTime: HrTime) {\n    return new HistogramAccumulation(\n      startTime,\n      this._boundaries,\n      this._recordMinMax\n    );\n  }\n\n  /**\n   * Return the result of the merge of two histogram accumulations. As long as one Aggregator\n   * instance produces all Accumulations with constant boundaries we don't need to worry about\n   * merging accumulations with different boundaries.\n   */\n  merge(\n    previous: HistogramAccumulation,\n    delta: HistogramAccumulation\n  ): HistogramAccumulation {\n    const previousValue = previous.toPointValue();\n    const deltaValue = delta.toPointValue();\n\n    const previousCounts = previousValue.buckets.counts;\n    const deltaCounts = deltaValue.buckets.counts;\n\n    const mergedCounts = new Array(previousCounts.length);\n    for (let idx = 0; idx < previousCounts.length; idx++) {\n      mergedCounts[idx] = previousCounts[idx] + deltaCounts[idx];\n    }\n\n    let min = Infinity;\n    let max = -Infinity;\n\n    if (this._recordMinMax) {\n      if (previousValue.hasMinMax && deltaValue.hasMinMax) {\n        min = Math.min(previousValue.min, deltaValue.min);\n        max = Math.max(previousValue.max, deltaValue.max);\n      } else if (previousValue.hasMinMax) {\n        min = previousValue.min;\n        max = previousValue.max;\n      } else if (deltaValue.hasMinMax) {\n        min = deltaValue.min;\n        max = deltaValue.max;\n      }\n    }\n\n    return new HistogramAccumulation(\n      previous.startTime,\n      previousValue.buckets.boundaries,\n      this._recordMinMax,\n      {\n        buckets: {\n          boundaries: previousValue.buckets.boundaries,\n          counts: mergedCounts,\n        },\n        count: previousValue.count + deltaValue.count,\n        sum: previousValue.sum + deltaValue.sum,\n        hasMinMax:\n          this._recordMinMax &&\n          (previousValue.hasMinMax || deltaValue.hasMinMax),\n        min: min,\n        max: max,\n      }\n    );\n  }\n\n  /**\n   * Returns a new DELTA aggregation by comparing two cumulative measurements.\n   */\n  diff(\n    previous: HistogramAccumulation,\n    current: HistogramAccumulation\n  ): HistogramAccumulation {\n    const previousValue = previous.toPointValue();\n    const currentValue = current.toPointValue();\n\n    const previousCounts = previousValue.buckets.counts;\n    const currentCounts = currentValue.buckets.counts;\n\n    const diffedCounts = new Array(previousCounts.length);\n    for (let idx = 0; idx < previousCounts.length; idx++) {\n      diffedCounts[idx] = currentCounts[idx] - previousCounts[idx];\n    }\n\n    return new HistogramAccumulation(\n      current.startTime,\n      previousValue.buckets.boundaries,\n      this._recordMinMax,\n      {\n        buckets: {\n          boundaries: previousValue.buckets.boundaries,\n          counts: diffedCounts,\n        },\n        count: currentValue.count - previousValue.count,\n        sum: currentValue.sum - previousValue.sum,\n        hasMinMax: false,\n        min: Infinity,\n        max: -Infinity,\n      }\n    );\n  }\n\n  toMetricData(\n    descriptor: MetricDescriptor,\n    aggregationTemporality: AggregationTemporality,\n    accumulationByAttributes: AccumulationRecord<HistogramAccumulation>[],\n    endTime: HrTime\n  ): Maybe<HistogramMetricData> {\n    return {\n      descriptor,\n      aggregationTemporality,\n      dataPointType: DataPointType.HISTOGRAM,\n      dataPoints: accumulationByAttributes.map(([attributes, accumulation]) => {\n        const pointValue = accumulation.toPointValue();\n\n        // determine if instrument allows negative values.\n        const allowsNegativeValues =\n          descriptor.type === InstrumentType.GAUGE ||\n          descriptor.type === InstrumentType.UP_DOWN_COUNTER ||\n          descriptor.type === InstrumentType.OBSERVABLE_GAUGE ||\n          descriptor.type === InstrumentType.OBSERVABLE_UP_DOWN_COUNTER;\n\n        return {\n          attributes,\n          startTime: accumulation.startTime,\n          endTime,\n          value: {\n            min: pointValue.hasMinMax ? pointValue.min : undefined,\n            max: pointValue.hasMinMax ? pointValue.max : undefined,\n            sum: !allowsNegativeValues ? pointValue.sum : undefined,\n            buckets: pointValue.buckets,\n            count: pointValue.count,\n          },\n        };\n      }),\n    };\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport class Buckets {\n  /**\n   * The term index refers to the number of the exponential histogram bucket\n   * used to determine its boundaries. The lower boundary of a bucket is\n   * determined by base ** index and the upper boundary of a bucket is\n   * determined by base ** (index + 1). index values are signed to account\n   * for values less than or equal to 1.\n   *\n   * indexBase is the index of the 0th position in the\n   * backing array, i.e., backing[0] is the count\n   * in the bucket with index `indexBase`.\n   *\n   * indexStart is the smallest index value represented\n   * in the backing array.\n   *\n   * indexEnd is the largest index value represented in\n   * the backing array.\n   */\n  constructor(\n    public backing = new BucketsBacking(),\n    public indexBase = 0,\n    public indexStart = 0,\n    public indexEnd = 0\n  ) {}\n\n  /**\n   * Offset is the bucket index of the smallest entry in the counts array\n   * @returns {number}\n   */\n  get offset(): number {\n    return this.indexStart;\n  }\n\n  /**\n   * Buckets is a view into the backing array.\n   * @returns {number}\n   */\n  get length(): number {\n    if (this.backing.length === 0) {\n      return 0;\n    }\n\n    if (this.indexEnd === this.indexStart && this.at(0) === 0) {\n      return 0;\n    }\n\n    return this.indexEnd - this.indexStart + 1;\n  }\n\n  /**\n   * An array of counts, where count[i] carries the count\n   * of the bucket at index (offset+i).  count[i] is the count of\n   * values greater than base^(offset+i) and less than or equal to\n   * base^(offset+i+1).\n   * @returns {number} The logical counts based on the backing array\n   */\n  counts(): number[] {\n    return Array.from({ length: this.length }, (_, i) => this.at(i));\n  }\n\n  /**\n   * At returns the count of the bucket at a position in the logical\n   * array of counts.\n   * @param position\n   * @returns {number}\n   */\n  at(position: number): number {\n    const bias = this.indexBase - this.indexStart;\n    if (position < bias) {\n      position += this.backing.length;\n    }\n\n    position -= bias;\n    return this.backing.countAt(position);\n  }\n\n  /**\n   * incrementBucket increments the backing array index by `increment`\n   * @param bucketIndex\n   * @param increment\n   */\n  incrementBucket(bucketIndex: number, increment: number) {\n    this.backing.increment(bucketIndex, increment);\n  }\n\n  /**\n   * decrementBucket decrements the backing array index by `decrement`\n   * if decrement is greater than the current value, it's set to 0.\n   * @param bucketIndex\n   * @param decrement\n   */\n  decrementBucket(bucketIndex: number, decrement: number) {\n    this.backing.decrement(bucketIndex, decrement);\n  }\n\n  /**\n   * trim removes leading and / or trailing zero buckets (which can occur\n   * after diffing two histos) and rotates the backing array so that the\n   * smallest non-zero index is in the 0th position of the backing array\n   */\n  trim() {\n    for (let i = 0; i < this.length; i++) {\n      if (this.at(i) !== 0) {\n        this.indexStart += i;\n        break;\n      } else if (i === this.length - 1) {\n        //the entire array is zeroed out\n        this.indexStart = this.indexEnd = this.indexBase = 0;\n        return;\n      }\n    }\n\n    for (let i = this.length - 1; i >= 0; i--) {\n      if (this.at(i) !== 0) {\n        this.indexEnd -= this.length - i - 1;\n        break;\n      }\n    }\n\n    this._rotate();\n  }\n\n  /**\n   * downscale first rotates, then collapses 2**`by`-to-1 buckets.\n   * @param by\n   */\n  downscale(by: number) {\n    this._rotate();\n\n    const size = 1 + this.indexEnd - this.indexStart;\n    const each = 1 << by;\n    let inpos = 0;\n    let outpos = 0;\n\n    for (let pos = this.indexStart; pos <= this.indexEnd; ) {\n      let mod = pos % each;\n      if (mod < 0) {\n        mod += each;\n      }\n      for (let i = mod; i < each && inpos < size; i++) {\n        this._relocateBucket(outpos, inpos);\n        inpos++;\n        pos++;\n      }\n      outpos++;\n    }\n\n    this.indexStart >>= by;\n    this.indexEnd >>= by;\n    this.indexBase = this.indexStart;\n  }\n\n  /**\n   * Clone returns a deep copy of Buckets\n   * @returns {Buckets}\n   */\n  clone(): Buckets {\n    return new Buckets(\n      this.backing.clone(),\n      this.indexBase,\n      this.indexStart,\n      this.indexEnd\n    );\n  }\n\n  /**\n   * _rotate shifts the backing array contents so that indexStart ==\n   * indexBase to simplify the downscale logic.\n   */\n  private _rotate() {\n    const bias = this.indexBase - this.indexStart;\n\n    if (bias === 0) {\n      return;\n    } else if (bias > 0) {\n      this.backing.reverse(0, this.backing.length);\n      this.backing.reverse(0, bias);\n      this.backing.reverse(bias, this.backing.length);\n    } else {\n      // negative bias, this can happen when diffing two histograms\n      this.backing.reverse(0, this.backing.length);\n      this.backing.reverse(0, this.backing.length + bias);\n    }\n    this.indexBase = this.indexStart;\n  }\n\n  /**\n   * _relocateBucket adds the count in counts[src] to counts[dest] and\n   * resets count[src] to zero.\n   */\n  private _relocateBucket(dest: number, src: number) {\n    if (dest === src) {\n      return;\n    }\n    this.incrementBucket(dest, this.backing.emptyBucket(src));\n  }\n}\n\n/**\n * BucketsBacking holds the raw buckets and some utility methods to\n * manage them.\n */\nclass BucketsBacking {\n  constructor(private _counts = [0]) {}\n\n  /**\n   * length returns the physical size of the backing array, which\n   * is >= buckets.length()\n   */\n  get length(): number {\n    return this._counts.length;\n  }\n\n  /**\n   * countAt returns the count in a specific bucket\n   */\n  countAt(pos: number): number {\n    return this._counts[pos];\n  }\n\n  /**\n   * growTo grows a backing array and copies old entries\n   * into their correct new positions.\n   */\n  growTo(newSize: number, oldPositiveLimit: number, newPositiveLimit: number) {\n    const tmp = new Array<number>(newSize).fill(0);\n    tmp.splice(\n      newPositiveLimit,\n      this._counts.length - oldPositiveLimit,\n      ...this._counts.slice(oldPositiveLimit)\n    );\n    tmp.splice(0, oldPositiveLimit, ...this._counts.slice(0, oldPositiveLimit));\n    this._counts = tmp;\n  }\n\n  /**\n   * reverse the items in the backing array in the range [from, limit).\n   */\n  reverse(from: number, limit: number) {\n    const num = Math.floor((from + limit) / 2) - from;\n    for (let i = 0; i < num; i++) {\n      const tmp = this._counts[from + i];\n      this._counts[from + i] = this._counts[limit - i - 1];\n      this._counts[limit - i - 1] = tmp;\n    }\n  }\n\n  /**\n   * emptyBucket empties the count from a bucket, for\n   * moving into another.\n   */\n  emptyBucket(src: number): number {\n    const tmp = this._counts[src];\n    this._counts[src] = 0;\n    return tmp;\n  }\n\n  /**\n   * increments a bucket by `increment`\n   */\n  increment(bucketIndex: number, increment: number) {\n    this._counts[bucketIndex] += increment;\n  }\n\n  /**\n   * decrements a bucket by `decrement`\n   */\n  decrement(bucketIndex: number, decrement: number) {\n    if (this._counts[bucketIndex] >= decrement) {\n      this._counts[bucketIndex] -= decrement;\n    } else {\n      // this should not happen, but we're being defensive against\n      // negative counts.\n      this._counts[bucketIndex] = 0;\n    }\n  }\n\n  /**\n   * clone returns a deep copy of BucketsBacking\n   */\n  clone(): BucketsBacking {\n    return new BucketsBacking([...this._counts]);\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * The functions and constants in this file allow us to interact\n * with the internal representation of an IEEE 64-bit floating point\n * number. We need to work with all 64-bits, thus, care needs to be\n * taken when working with Javascript's bitwise operators (<<, >>, &,\n * |, etc) as they truncate operands to 32-bits. In order to work around\n * this we work with the 64-bits as two 32-bit halves, perform bitwise\n * operations on them independently, and combine the results (if needed).\n */\n\nexport const SIGNIFICAND_WIDTH = 52;\n\n/**\n * EXPONENT_MASK is set to 1 for the hi 32-bits of an IEEE 754\n * floating point exponent: 0x7ff00000.\n */\nconst EXPONENT_MASK = 0x7ff00000;\n\n/**\n * SIGNIFICAND_MASK is the mask for the significand portion of the hi 32-bits\n * of an IEEE 754 double-precision floating-point value: 0xfffff\n */\nconst SIGNIFICAND_MASK = 0xfffff;\n\n/**\n * EXPONENT_BIAS is the exponent bias specified for encoding\n * the IEEE 754 double-precision floating point exponent: 1023\n */\nconst EXPONENT_BIAS = 1023;\n\n/**\n * MIN_NORMAL_EXPONENT is the minimum exponent of a normalized\n * floating point: -1022.\n */\nexport const MIN_NORMAL_EXPONENT = -EXPONENT_BIAS + 1;\n\n/**\n * MAX_NORMAL_EXPONENT is the maximum exponent of a normalized\n * floating point: 1023.\n */\nexport const MAX_NORMAL_EXPONENT = EXPONENT_BIAS;\n\n/**\n * MIN_VALUE is the smallest normal number\n */\nexport const MIN_VALUE = Math.pow(2, -1022);\n\n/**\n * getNormalBase2 extracts the normalized base-2 fractional exponent.\n * This returns k for the equation f x 2**k where f is\n * in the range [1, 2).  Note that this function is not called for\n * subnormal numbers.\n * @param {number} value - the value to determine normalized base-2 fractional\n *    exponent for\n * @returns {number} the normalized base-2 exponent\n */\nexport function getNormalBase2(value: number): number {\n  const dv = new DataView(new ArrayBuffer(8));\n  dv.setFloat64(0, value);\n  // access the raw 64-bit float as 32-bit uints\n  const hiBits = dv.getUint32(0);\n  const expBits = (hiBits & EXPONENT_MASK) >> 20;\n  return expBits - EXPONENT_BIAS;\n}\n\n/**\n * GetSignificand returns the 52 bit (unsigned) significand as a signed value.\n * @param {number} value - the floating point number to extract the significand from\n * @returns {number} The 52-bit significand\n */\nexport function getSignificand(value: number): number {\n  const dv = new DataView(new ArrayBuffer(8));\n  dv.setFloat64(0, value);\n  // access the raw 64-bit float as two 32-bit uints\n  const hiBits = dv.getUint32(0);\n  const loBits = dv.getUint32(4);\n  // extract the significand bits from the hi bits and left shift 32 places note:\n  // we can't use the native << operator as it will truncate the result to 32-bits\n  const significandHiBits = (hiBits & SIGNIFICAND_MASK) * Math.pow(2, 32);\n  // combine the hi and lo bits and return\n  return significandHiBits + loBits;\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Note: other languages provide this as a built in function. This is\n * a naive, but functionally correct implementation. This is used sparingly,\n * when creating a new mapping in a running application.\n *\n * ldexp returns frac × 2**exp. With the following special cases:\n *   ldexp(±0, exp) = ±0\n *   ldexp(±Inf, exp) = ±Inf\n *   ldexp(NaN, exp) = NaN\n * @param frac\n * @param exp\n * @returns {number}\n */\nexport function ldexp(frac: number, exp: number): number {\n  if (\n    frac === 0 ||\n    frac === Number.POSITIVE_INFINITY ||\n    frac === Number.NEGATIVE_INFINITY ||\n    Number.isNaN(frac)\n  ) {\n    return frac;\n  }\n  return frac * Math.pow(2, exp);\n}\n\n/**\n * Computes the next power of two that is greater than or equal to v.\n * This implementation more efficient than, but functionally equivalent\n * to Math.pow(2, Math.ceil(Math.log(x)/Math.log(2))).\n * @param v\n * @returns {number}\n */\nexport function nextGreaterSquare(v: number): number {\n  // The following expression computes the least power-of-two\n  // that is >= v.  There are a number of tricky ways to\n  // do this, see https://stackoverflow.com/questions/466204/rounding-up-to-next-power-of-2\n  v--;\n  v |= v >> 1;\n  v |= v >> 2;\n  v |= v >> 4;\n  v |= v >> 8;\n  v |= v >> 16;\n  v++;\n  return v;\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport class MappingError extends Error {}\n\n/**\n * The mapping interface is used by the exponential histogram to determine\n * where to bucket values. The interface is implemented by ExponentMapping,\n * used for scales [-10, 0] and LogarithmMapping, used for scales [1, 20].\n */\nexport interface Mapping {\n  mapToIndex(value: number): number;\n  lowerBoundary(index: number): number;\n  get scale(): number;\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as ieee754 from './ieee754';\nimport * as util from '../util';\nimport { Mapping, MappingError } from './types';\n\n/**\n * ExponentMapping implements exponential mapping functions for\n * scales <=0. For scales > 0 LogarithmMapping should be used.\n */\nexport class ExponentMapping implements Mapping {\n  private readonly _shift: number;\n\n  constructor(scale: number) {\n    this._shift = -scale;\n  }\n\n  /**\n   * Maps positive floating point values to indexes corresponding to scale\n   * @param value\n   * @returns {number} index for provided value at the current scale\n   */\n  mapToIndex(value: number): number {\n    if (value < ieee754.MIN_VALUE) {\n      return this._minNormalLowerBoundaryIndex();\n    }\n\n    const exp = ieee754.getNormalBase2(value);\n\n    // In case the value is an exact power of two, compute a\n    // correction of -1. Note, we are using a custom _rightShift\n    // to accommodate a 52-bit argument, which the native bitwise\n    // operators do not support\n    const correction = this._rightShift(\n      ieee754.getSignificand(value) - 1,\n      ieee754.SIGNIFICAND_WIDTH\n    );\n\n    return (exp + correction) >> this._shift;\n  }\n\n  /**\n   * Returns the lower bucket boundary for the given index for scale\n   *\n   * @param index\n   * @returns {number}\n   */\n  lowerBoundary(index: number): number {\n    const minIndex = this._minNormalLowerBoundaryIndex();\n    if (index < minIndex) {\n      throw new MappingError(\n        `underflow: ${index} is < minimum lower boundary: ${minIndex}`\n      );\n    }\n    const maxIndex = this._maxNormalLowerBoundaryIndex();\n    if (index > maxIndex) {\n      throw new MappingError(\n        `overflow: ${index} is > maximum lower boundary: ${maxIndex}`\n      );\n    }\n\n    return util.ldexp(1, index << this._shift);\n  }\n\n  /**\n   * The scale used by this mapping\n   * @returns {number}\n   */\n  get scale(): number {\n    if (this._shift === 0) {\n      return 0;\n    }\n    return -this._shift;\n  }\n\n  private _minNormalLowerBoundaryIndex(): number {\n    let index = ieee754.MIN_NORMAL_EXPONENT >> this._shift;\n    if (this._shift < 2) {\n      index--;\n    }\n\n    return index;\n  }\n\n  private _maxNormalLowerBoundaryIndex(): number {\n    return ieee754.MAX_NORMAL_EXPONENT >> this._shift;\n  }\n\n  private _rightShift(value: number, shift: number): number {\n    return Math.floor(value * Math.pow(2, -shift));\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as ieee754 from './ieee754';\nimport * as util from '../util';\nimport { Mapping, MappingError } from './types';\n\n/**\n * LogarithmMapping implements exponential mapping functions for scale > 0.\n * For scales <= 0 the exponent mapping should be used.\n */\nexport class LogarithmMapping implements Mapping {\n  private readonly _scale: number;\n  private readonly _scaleFactor: number;\n  private readonly _inverseFactor: number;\n\n  constructor(scale: number) {\n    this._scale = scale;\n    this._scaleFactor = util.ldexp(Math.LOG2E, scale);\n    this._inverseFactor = util.ldexp(Math.LN2, -scale);\n  }\n\n  /**\n   * Maps positive floating point values to indexes corresponding to scale\n   * @param value\n   * @returns {number} index for provided value at the current scale\n   */\n  mapToIndex(value: number): number {\n    if (value <= ieee754.MIN_VALUE) {\n      return this._minNormalLowerBoundaryIndex() - 1;\n    }\n\n    // exact power of two special case\n    if (ieee754.getSignificand(value) === 0) {\n      const exp = ieee754.getNormalBase2(value);\n      return (exp << this._scale) - 1;\n    }\n\n    // non-power of two cases. use Math.floor to round the scaled logarithm\n    const index = Math.floor(Math.log(value) * this._scaleFactor);\n    const maxIndex = this._maxNormalLowerBoundaryIndex();\n    if (index >= maxIndex) {\n      return maxIndex;\n    }\n\n    return index;\n  }\n\n  /**\n   * Returns the lower bucket boundary for the given index for scale\n   *\n   * @param index\n   * @returns {number}\n   */\n  lowerBoundary(index: number): number {\n    const maxIndex = this._maxNormalLowerBoundaryIndex();\n    if (index >= maxIndex) {\n      if (index === maxIndex) {\n        return 2 * Math.exp((index - (1 << this._scale)) / this._scaleFactor);\n      }\n      throw new MappingError(\n        `overflow: ${index} is > maximum lower boundary: ${maxIndex}`\n      );\n    }\n\n    const minIndex = this._minNormalLowerBoundaryIndex();\n    if (index <= minIndex) {\n      if (index === minIndex) {\n        return ieee754.MIN_VALUE;\n      } else if (index === minIndex - 1) {\n        return Math.exp((index + (1 << this._scale)) / this._scaleFactor) / 2;\n      }\n      throw new MappingError(\n        `overflow: ${index} is < minimum lower boundary: ${minIndex}`\n      );\n    }\n\n    return Math.exp(index * this._inverseFactor);\n  }\n\n  /**\n   * The scale used by this mapping\n   * @returns {number}\n   */\n  get scale(): number {\n    return this._scale;\n  }\n\n  private _minNormalLowerBoundaryIndex(): number {\n    return ieee754.MIN_NORMAL_EXPONENT << this._scale;\n  }\n\n  private _maxNormalLowerBoundaryIndex(): number {\n    return ((ieee754.MAX_NORMAL_EXPONENT + 1) << this._scale) - 1;\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { ExponentMapping } from './ExponentMapping';\nimport { LogarithmMapping } from './LogarithmMapping';\nimport { MappingError, Mapping } from './types';\n\nconst MIN_SCALE = -10;\nconst MAX_SCALE = 20;\nconst PREBUILT_MAPPINGS = Array.from({ length: 31 }, (_, i) => {\n  if (i > 10) {\n    return new LogarithmMapping(i - 10);\n  }\n  return new ExponentMapping(i - 10);\n});\n\n/**\n * getMapping returns an appropriate mapping for the given scale. For scales -10\n * to 0 the underlying type will be ExponentMapping. For scales 1 to 20 the\n * underlying type will be LogarithmMapping.\n * @param scale a number in the range [-10, 20]\n * @returns {Mapping}\n */\nexport function getMapping(scale: number): Mapping {\n  if (scale > MAX_SCALE || scale < MIN_SCALE) {\n    throw new MappingError(\n      `expected scale >= ${MIN_SCALE} && <= ${MAX_SCALE}, got: ${scale}`\n    );\n  }\n  // mappings are offset by 10. scale -10 is at position 0 and scale 20 is at 30\n  return PREBUILT_MAPPINGS[scale + 10];\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Accumulation,\n  AccumulationRecord,\n  Aggregator,\n  AggregatorKind,\n  ExponentialHistogram,\n} from './types';\nimport {\n  DataPointType,\n  ExponentialHistogramMetricData,\n  MetricDescriptor,\n} from '../export/MetricData';\nimport { diag, HrTime } from '@opentelemetry/api';\nimport { InstrumentType } from '../InstrumentDescriptor';\nimport { Maybe } from '../utils';\nimport { AggregationTemporality } from '../export/AggregationTemporality';\nimport { Buckets } from './exponential-histogram/Buckets';\nimport { getMapping } from './exponential-histogram/mapping/getMapping';\nimport { Mapping } from './exponential-histogram/mapping/types';\nimport { nextGreaterSquare } from './exponential-histogram/util';\n\n/**\n * Internal value type for ExponentialHistogramAggregation.\n * Differs from the exported type as undefined sum/min/max complicate arithmetic\n * performed by this aggregation, but are required to be undefined in the exported types.\n */\ninterface InternalHistogram extends ExponentialHistogram {\n  hasMinMax: boolean;\n  min: number;\n  max: number;\n  sum: number;\n}\n\n// HighLow is a utility class used for computing a common scale for\n// two exponential histogram accumulations\nclass HighLow {\n  static combine(h1: HighLow, h2: HighLow): HighLow {\n    return new HighLow(Math.min(h1.low, h2.low), Math.max(h1.high, h2.high));\n  }\n  constructor(\n    public low: number,\n    public high: number\n  ) {}\n}\n\nconst MAX_SCALE = 20;\nconst DEFAULT_MAX_SIZE = 160;\nconst MIN_MAX_SIZE = 2;\n\nexport class ExponentialHistogramAccumulation implements Accumulation {\n  constructor(\n    public startTime: HrTime = startTime,\n    private _maxSize = DEFAULT_MAX_SIZE,\n    private _recordMinMax = true,\n    private _sum = 0,\n    private _count = 0,\n    private _zeroCount = 0,\n    private _min = Number.POSITIVE_INFINITY,\n    private _max = Number.NEGATIVE_INFINITY,\n    private _positive = new Buckets(),\n    private _negative = new Buckets(),\n    private _mapping: Mapping = getMapping(MAX_SCALE)\n  ) {\n    if (this._maxSize < MIN_MAX_SIZE) {\n      diag.warn(`Exponential Histogram Max Size set to ${this._maxSize}, \\\n                changing to the minimum size of: ${MIN_MAX_SIZE}`);\n      this._maxSize = MIN_MAX_SIZE;\n    }\n  }\n\n  /**\n   * record updates a histogram with a single count\n   * @param {Number} value\n   */\n  record(value: number) {\n    this.updateByIncrement(value, 1);\n  }\n\n  /**\n   * Sets the start time for this accumulation\n   * @param {HrTime} startTime\n   */\n  setStartTime(startTime: HrTime): void {\n    this.startTime = startTime;\n  }\n\n  /**\n   * Returns the datapoint representation of this accumulation\n   * @param {HrTime} startTime\n   */\n  toPointValue(): InternalHistogram {\n    return {\n      hasMinMax: this._recordMinMax,\n      min: this.min,\n      max: this.max,\n      sum: this.sum,\n      positive: {\n        offset: this.positive.offset,\n        bucketCounts: this.positive.counts(),\n      },\n      negative: {\n        offset: this.negative.offset,\n        bucketCounts: this.negative.counts(),\n      },\n      count: this.count,\n      scale: this.scale,\n      zeroCount: this.zeroCount,\n    };\n  }\n\n  /**\n   * @returns {Number} The sum of values recorded by this accumulation\n   */\n  get sum(): number {\n    return this._sum;\n  }\n\n  /**\n   * @returns {Number} The minimum value recorded by this accumulation\n   */\n  get min(): number {\n    return this._min;\n  }\n\n  /**\n   * @returns {Number} The maximum value recorded by this accumulation\n   */\n  get max(): number {\n    return this._max;\n  }\n\n  /**\n   * @returns {Number} The count of values recorded by this accumulation\n   */\n  get count(): number {\n    return this._count;\n  }\n\n  /**\n   * @returns {Number} The number of 0 values recorded by this accumulation\n   */\n  get zeroCount(): number {\n    return this._zeroCount;\n  }\n\n  /**\n   * @returns {Number} The scale used by this accumulation\n   */\n  get scale(): number {\n    if (this._count === this._zeroCount) {\n      // all zeros! scale doesn't matter, use zero\n      return 0;\n    }\n    return this._mapping.scale;\n  }\n\n  /**\n   * positive holds the positive values\n   * @returns {Buckets}\n   */\n  get positive(): Buckets {\n    return this._positive;\n  }\n\n  /**\n   * negative holds the negative values by their absolute value\n   * @returns {Buckets}\n   */\n  get negative(): Buckets {\n    return this._negative;\n  }\n\n  /**\n   * updateByIncr supports updating a histogram with a non-negative\n   * increment.\n   * @param value\n   * @param increment\n   */\n  updateByIncrement(value: number, increment: number) {\n    // NaN does not fall into any bucket, is not zero and should not be counted,\n    // NaN is never greater than max nor less than min, therefore return as there's nothing for us to do.\n    if (Number.isNaN(value)) {\n      return;\n    }\n\n    if (value > this._max) {\n      this._max = value;\n    }\n    if (value < this._min) {\n      this._min = value;\n    }\n\n    this._count += increment;\n\n    if (value === 0) {\n      this._zeroCount += increment;\n      return;\n    }\n\n    this._sum += value * increment;\n\n    if (value > 0) {\n      this._updateBuckets(this._positive, value, increment);\n    } else {\n      this._updateBuckets(this._negative, -value, increment);\n    }\n  }\n\n  /**\n   * merge combines data from previous value into self\n   * @param {ExponentialHistogramAccumulation} previous\n   */\n  merge(previous: ExponentialHistogramAccumulation) {\n    if (this._count === 0) {\n      this._min = previous.min;\n      this._max = previous.max;\n    } else if (previous.count !== 0) {\n      if (previous.min < this.min) {\n        this._min = previous.min;\n      }\n      if (previous.max > this.max) {\n        this._max = previous.max;\n      }\n    }\n\n    this.startTime = previous.startTime;\n    this._sum += previous.sum;\n    this._count += previous.count;\n    this._zeroCount += previous.zeroCount;\n\n    const minScale = this._minScale(previous);\n\n    this._downscale(this.scale - minScale);\n\n    this._mergeBuckets(this.positive, previous, previous.positive, minScale);\n    this._mergeBuckets(this.negative, previous, previous.negative, minScale);\n  }\n\n  /**\n   * diff subtracts other from self\n   * @param {ExponentialHistogramAccumulation} other\n   */\n  diff(other: ExponentialHistogramAccumulation) {\n    this._min = Infinity;\n    this._max = -Infinity;\n    this._sum -= other.sum;\n    this._count -= other.count;\n    this._zeroCount -= other.zeroCount;\n\n    const minScale = this._minScale(other);\n\n    this._downscale(this.scale - minScale);\n\n    this._diffBuckets(this.positive, other, other.positive, minScale);\n    this._diffBuckets(this.negative, other, other.negative, minScale);\n  }\n\n  /**\n   * clone returns a deep copy of self\n   * @returns {ExponentialHistogramAccumulation}\n   */\n  clone(): ExponentialHistogramAccumulation {\n    return new ExponentialHistogramAccumulation(\n      this.startTime,\n      this._maxSize,\n      this._recordMinMax,\n      this._sum,\n      this._count,\n      this._zeroCount,\n      this._min,\n      this._max,\n      this.positive.clone(),\n      this.negative.clone(),\n      this._mapping\n    );\n  }\n\n  /**\n   * _updateBuckets maps the incoming value to a bucket index for the current\n   * scale. If the bucket index is outside of the range of the backing array,\n   * it will rescale the backing array and update the mapping for the new scale.\n   */\n  private _updateBuckets(buckets: Buckets, value: number, increment: number) {\n    let index = this._mapping.mapToIndex(value);\n\n    // rescale the mapping if needed\n    let rescalingNeeded = false;\n    let high = 0;\n    let low = 0;\n\n    if (buckets.length === 0) {\n      buckets.indexStart = index;\n      buckets.indexEnd = buckets.indexStart;\n      buckets.indexBase = buckets.indexStart;\n    } else if (\n      index < buckets.indexStart &&\n      buckets.indexEnd - index >= this._maxSize\n    ) {\n      rescalingNeeded = true;\n      low = index;\n      high = buckets.indexEnd;\n    } else if (\n      index > buckets.indexEnd &&\n      index - buckets.indexStart >= this._maxSize\n    ) {\n      rescalingNeeded = true;\n      low = buckets.indexStart;\n      high = index;\n    }\n\n    // rescale and compute index at new scale\n    if (rescalingNeeded) {\n      const change = this._changeScale(high, low);\n      this._downscale(change);\n      index = this._mapping.mapToIndex(value);\n    }\n\n    this._incrementIndexBy(buckets, index, increment);\n  }\n\n  /**\n   * _incrementIndexBy increments the count of the bucket specified by `index`.\n   * If the index is outside of the range [buckets.indexStart, buckets.indexEnd]\n   * the boundaries of the backing array will be adjusted and more buckets will\n   * be added if needed.\n   */\n  private _incrementIndexBy(\n    buckets: Buckets,\n    index: number,\n    increment: number\n  ) {\n    if (increment === 0) {\n      // nothing to do for a zero increment, can happen during a merge operation\n      return;\n    }\n\n    if (buckets.length === 0) {\n      buckets.indexStart = buckets.indexEnd = buckets.indexBase = index;\n    }\n\n    if (index < buckets.indexStart) {\n      const span = buckets.indexEnd - index;\n      if (span >= buckets.backing.length) {\n        this._grow(buckets, span + 1);\n      }\n      buckets.indexStart = index;\n    } else if (index > buckets.indexEnd) {\n      const span = index - buckets.indexStart;\n      if (span >= buckets.backing.length) {\n        this._grow(buckets, span + 1);\n      }\n      buckets.indexEnd = index;\n    }\n\n    let bucketIndex = index - buckets.indexBase;\n    if (bucketIndex < 0) {\n      bucketIndex += buckets.backing.length;\n    }\n    buckets.incrementBucket(bucketIndex, increment);\n  }\n\n  /**\n   * grow resizes the backing array by doubling in size up to maxSize.\n   * This extends the array with a bunch of zeros and copies the\n   * existing counts to the same position.\n   */\n  private _grow(buckets: Buckets, needed: number) {\n    const size = buckets.backing.length;\n    const bias = buckets.indexBase - buckets.indexStart;\n    const oldPositiveLimit = size - bias;\n    let newSize = nextGreaterSquare(needed);\n    if (newSize > this._maxSize) {\n      newSize = this._maxSize;\n    }\n    const newPositiveLimit = newSize - bias;\n    buckets.backing.growTo(newSize, oldPositiveLimit, newPositiveLimit);\n  }\n\n  /**\n   * _changeScale computes how much downscaling is needed by shifting the\n   * high and low values until they are separated by no more than size.\n   */\n  private _changeScale(high: number, low: number): number {\n    let change = 0;\n    while (high - low >= this._maxSize) {\n      high >>= 1;\n      low >>= 1;\n      change++;\n    }\n    return change;\n  }\n\n  /**\n   * _downscale subtracts `change` from the current mapping scale.\n   */\n  private _downscale(change: number) {\n    if (change === 0) {\n      return;\n    }\n    if (change < 0) {\n      // Note: this should be impossible. If we get here it's because\n      // there is a bug in the implementation.\n      throw new Error(`impossible change of scale: ${this.scale}`);\n    }\n    const newScale = this._mapping.scale - change;\n\n    this._positive.downscale(change);\n    this._negative.downscale(change);\n\n    this._mapping = getMapping(newScale);\n  }\n\n  /**\n   * _minScale is used by diff and merge to compute an ideal combined scale\n   */\n  private _minScale(other: ExponentialHistogramAccumulation): number {\n    const minScale = Math.min(this.scale, other.scale);\n\n    const highLowPos = HighLow.combine(\n      this._highLowAtScale(this.positive, this.scale, minScale),\n      this._highLowAtScale(other.positive, other.scale, minScale)\n    );\n\n    const highLowNeg = HighLow.combine(\n      this._highLowAtScale(this.negative, this.scale, minScale),\n      this._highLowAtScale(other.negative, other.scale, minScale)\n    );\n\n    return Math.min(\n      minScale - this._changeScale(highLowPos.high, highLowPos.low),\n      minScale - this._changeScale(highLowNeg.high, highLowNeg.low)\n    );\n  }\n\n  /**\n   * _highLowAtScale is used by diff and merge to compute an ideal combined scale.\n   */\n  private _highLowAtScale(\n    buckets: Buckets,\n    currentScale: number,\n    newScale: number\n  ): HighLow {\n    if (buckets.length === 0) {\n      return new HighLow(0, -1);\n    }\n    const shift = currentScale - newScale;\n    return new HighLow(buckets.indexStart >> shift, buckets.indexEnd >> shift);\n  }\n\n  /**\n   * _mergeBuckets translates index values from another histogram and\n   * adds the values into the corresponding buckets of this histogram.\n   */\n  private _mergeBuckets(\n    ours: Buckets,\n    other: ExponentialHistogramAccumulation,\n    theirs: Buckets,\n    scale: number\n  ) {\n    const theirOffset = theirs.offset;\n    const theirChange = other.scale - scale;\n\n    for (let i = 0; i < theirs.length; i++) {\n      this._incrementIndexBy(\n        ours,\n        (theirOffset + i) >> theirChange,\n        theirs.at(i)\n      );\n    }\n  }\n\n  /**\n   * _diffBuckets translates index values from another histogram and\n   * subtracts the values in the corresponding buckets of this histogram.\n   */\n  private _diffBuckets(\n    ours: Buckets,\n    other: ExponentialHistogramAccumulation,\n    theirs: Buckets,\n    scale: number\n  ) {\n    const theirOffset = theirs.offset;\n    const theirChange = other.scale - scale;\n\n    for (let i = 0; i < theirs.length; i++) {\n      const ourIndex = (theirOffset + i) >> theirChange;\n      let bucketIndex = ourIndex - ours.indexBase;\n      if (bucketIndex < 0) {\n        bucketIndex += ours.backing.length;\n      }\n      ours.decrementBucket(bucketIndex, theirs.at(i));\n    }\n\n    ours.trim();\n  }\n}\n\n/**\n * Aggregator for ExponentialHistogramAccumulations\n */\nexport class ExponentialHistogramAggregator\n  implements Aggregator<ExponentialHistogramAccumulation>\n{\n  public kind: AggregatorKind.EXPONENTIAL_HISTOGRAM =\n    AggregatorKind.EXPONENTIAL_HISTOGRAM;\n\n  /**\n   * @param _maxSize Maximum number of buckets for each of the positive\n   *    and negative ranges, exclusive of the zero-bucket.\n   * @param _recordMinMax If set to true, min and max will be recorded.\n   *    Otherwise, min and max will not be recorded.\n   */\n  constructor(\n    readonly _maxSize: number,\n    private readonly _recordMinMax: boolean\n  ) {}\n\n  createAccumulation(startTime: HrTime) {\n    return new ExponentialHistogramAccumulation(\n      startTime,\n      this._maxSize,\n      this._recordMinMax\n    );\n  }\n\n  /**\n   * Return the result of the merge of two exponential histogram accumulations.\n   */\n  merge(\n    previous: ExponentialHistogramAccumulation,\n    delta: ExponentialHistogramAccumulation\n  ): ExponentialHistogramAccumulation {\n    const result = delta.clone();\n    result.merge(previous);\n\n    return result;\n  }\n\n  /**\n   * Returns a new DELTA aggregation by comparing two cumulative measurements.\n   */\n  diff(\n    previous: ExponentialHistogramAccumulation,\n    current: ExponentialHistogramAccumulation\n  ): ExponentialHistogramAccumulation {\n    const result = current.clone();\n    result.diff(previous);\n\n    return result;\n  }\n\n  toMetricData(\n    descriptor: MetricDescriptor,\n    aggregationTemporality: AggregationTemporality,\n    accumulationByAttributes: AccumulationRecord<ExponentialHistogramAccumulation>[],\n    endTime: HrTime\n  ): Maybe<ExponentialHistogramMetricData> {\n    return {\n      descriptor,\n      aggregationTemporality,\n      dataPointType: DataPointType.EXPONENTIAL_HISTOGRAM,\n      dataPoints: accumulationByAttributes.map(([attributes, accumulation]) => {\n        const pointValue = accumulation.toPointValue();\n\n        // determine if instrument allows negative values.\n        const allowsNegativeValues =\n          descriptor.type === InstrumentType.GAUGE ||\n          descriptor.type === InstrumentType.UP_DOWN_COUNTER ||\n          descriptor.type === InstrumentType.OBSERVABLE_GAUGE ||\n          descriptor.type === InstrumentType.OBSERVABLE_UP_DOWN_COUNTER;\n\n        return {\n          attributes,\n          startTime: accumulation.startTime,\n          endTime,\n          value: {\n            min: pointValue.hasMinMax ? pointValue.min : undefined,\n            max: pointValue.hasMinMax ? pointValue.max : undefined,\n            sum: !allowsNegativeValues ? pointValue.sum : undefined,\n            positive: {\n              offset: pointValue.positive.offset,\n              bucketCounts: pointValue.positive.bucketCounts,\n            },\n            negative: {\n              offset: pointValue.negative.offset,\n              bucketCounts: pointValue.negative.bucketCounts,\n            },\n            count: pointValue.count,\n            scale: pointValue.scale,\n            zeroCount: pointValue.zeroCount,\n          },\n        };\n      }),\n    };\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Accumulation,\n  AccumulationRecord,\n  Aggregator,\n  AggregatorKind,\n  LastValue,\n} from './types';\nimport { HrTime } from '@opentelemetry/api';\nimport { millisToHrTime, hrTimeToMicroseconds } from '@opentelemetry/core';\nimport {\n  DataPointType,\n  GaugeMetricData,\n  MetricDescriptor,\n} from '../export/MetricData';\nimport { Maybe } from '../utils';\nimport { AggregationTemporality } from '../export/AggregationTemporality';\n\nexport class LastValueAccumulation implements Accumulation {\n  constructor(\n    public startTime: HrTime,\n    private _current: number = 0,\n    public sampleTime: HrTime = [0, 0]\n  ) {}\n\n  record(value: number): void {\n    this._current = value;\n    this.sampleTime = millisToHrTime(Date.now());\n  }\n\n  setStartTime(startTime: HrTime): void {\n    this.startTime = startTime;\n  }\n\n  toPointValue(): LastValue {\n    return this._current;\n  }\n}\n\n/** Basic aggregator which calculates a LastValue from individual measurements. */\nexport class LastValueAggregator implements Aggregator<LastValueAccumulation> {\n  public kind: AggregatorKind.LAST_VALUE = AggregatorKind.LAST_VALUE;\n\n  createAccumulation(startTime: HrTime) {\n    return new LastValueAccumulation(startTime);\n  }\n\n  /**\n   * Returns the result of the merge of the given accumulations.\n   *\n   * Return the newly captured (delta) accumulation for LastValueAggregator.\n   */\n  merge(\n    previous: LastValueAccumulation,\n    delta: LastValueAccumulation\n  ): LastValueAccumulation {\n    // nanoseconds may lose precisions.\n    const latestAccumulation =\n      hrTimeToMicroseconds(delta.sampleTime) >=\n      hrTimeToMicroseconds(previous.sampleTime)\n        ? delta\n        : previous;\n    return new LastValueAccumulation(\n      previous.startTime,\n      latestAccumulation.toPointValue(),\n      latestAccumulation.sampleTime\n    );\n  }\n\n  /**\n   * Returns a new DELTA aggregation by comparing two cumulative measurements.\n   *\n   * A delta aggregation is not meaningful to LastValueAggregator, just return\n   * the newly captured (delta) accumulation for LastValueAggregator.\n   */\n  diff(\n    previous: LastValueAccumulation,\n    current: LastValueAccumulation\n  ): LastValueAccumulation {\n    // nanoseconds may lose precisions.\n    const latestAccumulation =\n      hrTimeToMicroseconds(current.sampleTime) >=\n      hrTimeToMicroseconds(previous.sampleTime)\n        ? current\n        : previous;\n    return new LastValueAccumulation(\n      current.startTime,\n      latestAccumulation.toPointValue(),\n      latestAccumulation.sampleTime\n    );\n  }\n\n  toMetricData(\n    descriptor: MetricDescriptor,\n    aggregationTemporality: AggregationTemporality,\n    accumulationByAttributes: AccumulationRecord<LastValueAccumulation>[],\n    endTime: HrTime\n  ): Maybe<GaugeMetricData> {\n    return {\n      descriptor,\n      aggregationTemporality,\n      dataPointType: DataPointType.GAUGE,\n      dataPoints: accumulationByAttributes.map(([attributes, accumulation]) => {\n        return {\n          attributes,\n          startTime: accumulation.startTime,\n          endTime,\n          value: accumulation.toPointValue(),\n        };\n      }),\n    };\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Sum,\n  AggregatorKind,\n  Aggregator,\n  Accumulation,\n  AccumulationRecord,\n} from './types';\nimport { HrTime } from '@opentelemetry/api';\nimport {\n  DataPointType,\n  MetricDescriptor,\n  SumMetricData,\n} from '../export/MetricData';\nimport { Maybe } from '../utils';\nimport { AggregationTemporality } from '../export/AggregationTemporality';\n\nexport class SumAccumulation implements Accumulation {\n  constructor(\n    public startTime: HrTime,\n    public monotonic: boolean,\n    private _current: number = 0,\n    public reset = false\n  ) {}\n\n  record(value: number): void {\n    if (this.monotonic && value < 0) {\n      return;\n    }\n    this._current += value;\n  }\n\n  setStartTime(startTime: HrTime): void {\n    this.startTime = startTime;\n  }\n\n  toPointValue(): Sum {\n    return this._current;\n  }\n}\n\n/** Basic aggregator which calculates a Sum from individual measurements. */\nexport class SumAggregator implements Aggregator<SumAccumulation> {\n  public kind: AggregatorKind.SUM = AggregatorKind.SUM;\n\n  constructor(public monotonic: boolean) {}\n\n  createAccumulation(startTime: HrTime) {\n    return new SumAccumulation(startTime, this.monotonic);\n  }\n\n  /**\n   * Returns the result of the merge of the given accumulations.\n   */\n  merge(previous: SumAccumulation, delta: SumAccumulation): SumAccumulation {\n    const prevPv = previous.toPointValue();\n    const deltaPv = delta.toPointValue();\n    if (delta.reset) {\n      return new SumAccumulation(\n        delta.startTime,\n        this.monotonic,\n        deltaPv,\n        delta.reset\n      );\n    }\n    return new SumAccumulation(\n      previous.startTime,\n      this.monotonic,\n      prevPv + deltaPv\n    );\n  }\n\n  /**\n   * Returns a new DELTA aggregation by comparing two cumulative measurements.\n   */\n  diff(previous: SumAccumulation, current: SumAccumulation): SumAccumulation {\n    const prevPv = previous.toPointValue();\n    const currPv = current.toPointValue();\n    /**\n     * If the SumAggregator is a monotonic one and the previous point value is\n     * greater than the current one, a reset is deemed to be happened.\n     * Return the current point value to prevent the value from been reset.\n     */\n    if (this.monotonic && prevPv > currPv) {\n      return new SumAccumulation(\n        current.startTime,\n        this.monotonic,\n        currPv,\n        true\n      );\n    }\n    return new SumAccumulation(\n      current.startTime,\n      this.monotonic,\n      currPv - prevPv\n    );\n  }\n\n  toMetricData(\n    descriptor: MetricDescriptor,\n    aggregationTemporality: AggregationTemporality,\n    accumulationByAttributes: AccumulationRecord<SumAccumulation>[],\n    endTime: HrTime\n  ): Maybe<SumMetricData> {\n    return {\n      descriptor,\n      aggregationTemporality,\n      dataPointType: DataPointType.SUM,\n      dataPoints: accumulationByAttributes.map(([attributes, accumulation]) => {\n        return {\n          attributes,\n          startTime: accumulation.startTime,\n          endTime,\n          value: accumulation.toPointValue(),\n        };\n      }),\n      isMonotonic: this.monotonic,\n    };\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport * from './Drop';\nexport * from './Histogram';\nexport * from './ExponentialHistogram';\nexport * from './LastValue';\nexport * from './Sum';\nexport { Aggregator } from './types';\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as api from '@opentelemetry/api';\nimport {\n  Aggregator,\n  SumAggregator,\n  DropAggregator,\n  LastValueAggregator,\n  HistogramAggregator,\n  ExponentialHistogramAggregator,\n} from '../aggregator';\nimport { Accumulation } from '../aggregator/types';\nimport { InstrumentDescriptor, InstrumentType } from '../InstrumentDescriptor';\nimport { Maybe } from '../utils';\n\n/**\n * Configures how measurements are combined into metrics for views.\n *\n * Aggregation provides a set of built-in aggregations via static methods.\n */\nexport abstract class Aggregation {\n  abstract createAggregator(\n    instrument: InstrumentDescriptor\n  ): Aggregator<Maybe<Accumulation>>;\n\n  static Drop(): Aggregation {\n    return DROP_AGGREGATION;\n  }\n\n  static Sum(): Aggregation {\n    return SUM_AGGREGATION;\n  }\n\n  static LastValue(): Aggregation {\n    return LAST_VALUE_AGGREGATION;\n  }\n\n  static Histogram(): Aggregation {\n    return HISTOGRAM_AGGREGATION;\n  }\n\n  static ExponentialHistogram(): Aggregation {\n    return EXPONENTIAL_HISTOGRAM_AGGREGATION;\n  }\n\n  static Default(): Aggregation {\n    return DEFAULT_AGGREGATION;\n  }\n}\n\n/**\n * The default drop aggregation.\n */\nexport class DropAggregation extends Aggregation {\n  private static DEFAULT_INSTANCE = new DropAggregator();\n  createAggregator(_instrument: InstrumentDescriptor) {\n    return DropAggregation.DEFAULT_INSTANCE;\n  }\n}\n\n/**\n * The default sum aggregation.\n */\nexport class SumAggregation extends Aggregation {\n  private static MONOTONIC_INSTANCE = new SumAggregator(true);\n  private static NON_MONOTONIC_INSTANCE = new SumAggregator(false);\n  createAggregator(instrument: InstrumentDescriptor) {\n    switch (instrument.type) {\n      case InstrumentType.COUNTER:\n      case InstrumentType.OBSERVABLE_COUNTER:\n      case InstrumentType.HISTOGRAM: {\n        return SumAggregation.MONOTONIC_INSTANCE;\n      }\n      default: {\n        return SumAggregation.NON_MONOTONIC_INSTANCE;\n      }\n    }\n  }\n}\n\n/**\n * The default last value aggregation.\n */\nexport class LastValueAggregation extends Aggregation {\n  private static DEFAULT_INSTANCE = new LastValueAggregator();\n  createAggregator(_instrument: InstrumentDescriptor) {\n    return LastValueAggregation.DEFAULT_INSTANCE;\n  }\n}\n\n/**\n * The default histogram aggregation.\n */\nexport class HistogramAggregation extends Aggregation {\n  private static DEFAULT_INSTANCE = new HistogramAggregator(\n    [0, 5, 10, 25, 50, 75, 100, 250, 500, 750, 1000, 2500, 5000, 7500, 10000],\n    true\n  );\n  createAggregator(_instrument: InstrumentDescriptor) {\n    return HistogramAggregation.DEFAULT_INSTANCE;\n  }\n}\n\n/**\n * The explicit bucket histogram aggregation.\n */\nexport class ExplicitBucketHistogramAggregation extends Aggregation {\n  private _boundaries: number[];\n\n  /**\n   * @param boundaries the bucket boundaries of the histogram aggregation\n   * @param _recordMinMax If set to true, min and max will be recorded. Otherwise, min and max will not be recorded.\n   */\n  constructor(\n    boundaries: number[],\n    private readonly _recordMinMax = true\n  ) {\n    super();\n    if (boundaries == null) {\n      throw new Error(\n        'ExplicitBucketHistogramAggregation should be created with explicit boundaries, if a single bucket histogram is required, please pass an empty array'\n      );\n    }\n    // Copy the boundaries array for modification.\n    boundaries = boundaries.concat();\n    // We need to an ordered set to be able to correctly compute count for each\n    // boundary since we'll iterate on each in order.\n    boundaries = boundaries.sort((a, b) => a - b);\n    // Remove all Infinity from the boundaries.\n    const minusInfinityIndex = boundaries.lastIndexOf(-Infinity);\n    let infinityIndex: number | undefined = boundaries.indexOf(Infinity);\n    if (infinityIndex === -1) {\n      infinityIndex = undefined;\n    }\n    this._boundaries = boundaries.slice(minusInfinityIndex + 1, infinityIndex);\n  }\n\n  createAggregator(_instrument: InstrumentDescriptor) {\n    return new HistogramAggregator(this._boundaries, this._recordMinMax);\n  }\n}\n\nexport class ExponentialHistogramAggregation extends Aggregation {\n  constructor(\n    private readonly _maxSize: number = 160,\n    private readonly _recordMinMax = true\n  ) {\n    super();\n  }\n  createAggregator(_instrument: InstrumentDescriptor) {\n    return new ExponentialHistogramAggregator(\n      this._maxSize,\n      this._recordMinMax\n    );\n  }\n}\n\n/**\n * The default aggregation.\n */\nexport class DefaultAggregation extends Aggregation {\n  private _resolve(instrument: InstrumentDescriptor): Aggregation {\n    // cast to unknown to disable complaints on the (unreachable) fallback.\n    switch (instrument.type as unknown) {\n      case InstrumentType.COUNTER:\n      case InstrumentType.UP_DOWN_COUNTER:\n      case InstrumentType.OBSERVABLE_COUNTER:\n      case InstrumentType.OBSERVABLE_UP_DOWN_COUNTER: {\n        return SUM_AGGREGATION;\n      }\n      case InstrumentType.GAUGE:\n      case InstrumentType.OBSERVABLE_GAUGE: {\n        return LAST_VALUE_AGGREGATION;\n      }\n      case InstrumentType.HISTOGRAM: {\n        if (instrument.advice.explicitBucketBoundaries) {\n          return new ExplicitBucketHistogramAggregation(\n            instrument.advice.explicitBucketBoundaries\n          );\n        }\n        return HISTOGRAM_AGGREGATION;\n      }\n    }\n    api.diag.warn(`Unable to recognize instrument type: ${instrument.type}`);\n    return DROP_AGGREGATION;\n  }\n\n  createAggregator(\n    instrument: InstrumentDescriptor\n  ): Aggregator<Maybe<Accumulation>> {\n    return this._resolve(instrument).createAggregator(instrument);\n  }\n}\n\nconst DROP_AGGREGATION = new DropAggregation();\nconst SUM_AGGREGATION = new SumAggregation();\nconst LAST_VALUE_AGGREGATION = new LastValueAggregation();\nconst HISTOGRAM_AGGREGATION = new HistogramAggregation();\nconst EXPONENTIAL_HISTOGRAM_AGGREGATION = new ExponentialHistogramAggregation();\nconst DEFAULT_AGGREGATION = new DefaultAggregation();\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { InstrumentType } from '../InstrumentDescriptor';\nimport { Aggregation } from '../view/Aggregation';\nimport { AggregationTemporality } from './AggregationTemporality';\n\n/**\n * Aggregation selector based on metric instrument types.\n */\nexport type AggregationSelector = (\n  instrumentType: InstrumentType\n) => Aggregation;\n\n/**\n * Aggregation temporality selector based on metric instrument types.\n */\nexport type AggregationTemporalitySelector = (\n  instrumentType: InstrumentType\n) => AggregationTemporality;\n\nexport const DEFAULT_AGGREGATION_SELECTOR: AggregationSelector =\n  _instrumentType => Aggregation.Default();\nexport const DEFAULT_AGGREGATION_TEMPORALITY_SELECTOR: AggregationTemporalitySelector =\n  _instrumentType => AggregationTemporality.CUMULATIVE;\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as api from '@opentelemetry/api';\nimport { AggregationTemporality } from './AggregationTemporality';\nimport { MetricProducer } from './MetricProducer';\nimport { CollectionResult } from './MetricData';\nimport { FlatMap, callWithTimeout } from '../utils';\nimport { InstrumentType } from '../InstrumentDescriptor';\nimport {\n  CollectionOptions,\n  ForceFlushOptions,\n  ShutdownOptions,\n} from '../types';\nimport { Aggregation } from '../view/Aggregation';\nimport {\n  AggregationSelector,\n  AggregationTemporalitySelector,\n  DEFAULT_AGGREGATION_SELECTOR,\n  DEFAULT_AGGREGATION_TEMPORALITY_SELECTOR,\n} from './AggregationSelector';\n\nexport interface MetricReaderOptions {\n  /**\n   * Aggregation selector based on metric instrument types. If no views are\n   * configured for a metric instrument, a per-metric-reader aggregation is\n   * selected with this selector.\n   */\n  aggregationSelector?: AggregationSelector;\n  /**\n   * Aggregation temporality selector based on metric instrument types. If\n   * not configured, cumulative is used for all instruments.\n   */\n  aggregationTemporalitySelector?: AggregationTemporalitySelector;\n  /**\n   * **Note, this option is experimental**. Additional MetricProducers to use as a source of\n   * aggregated metric data in addition to the SDK's metric data. The resource returned by\n   * these MetricProducers is ignored; the SDK's resource will be used instead.\n   * @experimental\n   */\n  metricProducers?: MetricProducer[];\n}\n\n/**\n * A registered reader of metrics that, when linked to a {@link MetricProducer}, offers global\n * control over metrics.\n */\nexport abstract class MetricReader {\n  // Tracks the shutdown state.\n  // TODO: use BindOncePromise here once a new version of @opentelemetry/core is available.\n  private _shutdown = false;\n  // Additional MetricProducers which will be combined with the SDK's output\n  private _metricProducers: MetricProducer[];\n  // MetricProducer used by this instance which produces metrics from the SDK\n  private _sdkMetricProducer?: MetricProducer;\n  private readonly _aggregationTemporalitySelector: AggregationTemporalitySelector;\n  private readonly _aggregationSelector: AggregationSelector;\n\n  constructor(options?: MetricReaderOptions) {\n    this._aggregationSelector =\n      options?.aggregationSelector ?? DEFAULT_AGGREGATION_SELECTOR;\n    this._aggregationTemporalitySelector =\n      options?.aggregationTemporalitySelector ??\n      DEFAULT_AGGREGATION_TEMPORALITY_SELECTOR;\n    this._metricProducers = options?.metricProducers ?? [];\n  }\n\n  /**\n   * Set the {@link MetricProducer} used by this instance. **This should only be called by the\n   * SDK and should be considered internal.**\n   *\n   * To add additional {@link MetricProducer}s to a {@link MetricReader}, pass them to the\n   * constructor as {@link MetricReaderOptions.metricProducers}.\n   *\n   * @internal\n   * @param metricProducer\n   */\n  setMetricProducer(metricProducer: MetricProducer) {\n    if (this._sdkMetricProducer) {\n      throw new Error(\n        'MetricReader can not be bound to a MeterProvider again.'\n      );\n    }\n    this._sdkMetricProducer = metricProducer;\n    this.onInitialized();\n  }\n\n  /**\n   * Select the {@link Aggregation} for the given {@link InstrumentType} for this\n   * reader.\n   */\n  selectAggregation(instrumentType: InstrumentType): Aggregation {\n    return this._aggregationSelector(instrumentType);\n  }\n\n  /**\n   * Select the {@link AggregationTemporality} for the given\n   * {@link InstrumentType} for this reader.\n   */\n  selectAggregationTemporality(\n    instrumentType: InstrumentType\n  ): AggregationTemporality {\n    return this._aggregationTemporalitySelector(instrumentType);\n  }\n\n  /**\n   * Handle once the SDK has initialized this {@link MetricReader}\n   * Overriding this method is optional.\n   */\n  protected onInitialized(): void {\n    // Default implementation is empty.\n  }\n\n  /**\n   * Handle a shutdown signal by the SDK.\n   *\n   * <p> For push exporters, this should shut down any intervals and close any open connections.\n   * @protected\n   */\n  protected abstract onShutdown(): Promise<void>;\n\n  /**\n   * Handle a force flush signal by the SDK.\n   *\n   * <p> In all scenarios metrics should be collected via {@link collect()}.\n   * <p> For push exporters, this should collect and report metrics.\n   * @protected\n   */\n  protected abstract onForceFlush(): Promise<void>;\n\n  /**\n   * Collect all metrics from the associated {@link MetricProducer}\n   */\n  async collect(options?: CollectionOptions): Promise<CollectionResult> {\n    if (this._sdkMetricProducer === undefined) {\n      throw new Error('MetricReader is not bound to a MetricProducer');\n    }\n\n    // Subsequent invocations to collect are not allowed. SDKs SHOULD return some failure for these calls.\n    if (this._shutdown) {\n      throw new Error('MetricReader is shutdown');\n    }\n\n    const [sdkCollectionResults, ...additionalCollectionResults] =\n      await Promise.all([\n        this._sdkMetricProducer.collect({\n          timeoutMillis: options?.timeoutMillis,\n        }),\n        ...this._metricProducers.map(producer =>\n          producer.collect({\n            timeoutMillis: options?.timeoutMillis,\n          })\n        ),\n      ]);\n\n    // Merge the results, keeping the SDK's Resource\n    const errors = sdkCollectionResults.errors.concat(\n      FlatMap(additionalCollectionResults, result => result.errors)\n    );\n    const resource = sdkCollectionResults.resourceMetrics.resource;\n    const scopeMetrics =\n      sdkCollectionResults.resourceMetrics.scopeMetrics.concat(\n        FlatMap(\n          additionalCollectionResults,\n          result => result.resourceMetrics.scopeMetrics\n        )\n      );\n    return {\n      resourceMetrics: {\n        resource,\n        scopeMetrics,\n      },\n      errors,\n    };\n  }\n\n  /**\n   * Shuts down the metric reader, the promise will reject after the optional timeout or resolve after completion.\n   *\n   * <p> NOTE: this operation will continue even after the promise rejects due to a timeout.\n   * @param options options with timeout.\n   */\n  async shutdown(options?: ShutdownOptions): Promise<void> {\n    // Do not call shutdown again if it has already been called.\n    if (this._shutdown) {\n      api.diag.error('Cannot call shutdown twice.');\n      return;\n    }\n\n    // No timeout if timeoutMillis is undefined or null.\n    if (options?.timeoutMillis == null) {\n      await this.onShutdown();\n    } else {\n      await callWithTimeout(this.onShutdown(), options.timeoutMillis);\n    }\n\n    this._shutdown = true;\n  }\n\n  /**\n   * Flushes metrics read by this reader, the promise will reject after the optional timeout or resolve after completion.\n   *\n   * <p> NOTE: this operation will continue even after the promise rejects due to a timeout.\n   * @param options options with timeout.\n   */\n  async forceFlush(options?: ForceFlushOptions): Promise<void> {\n    if (this._shutdown) {\n      api.diag.warn('Cannot forceFlush on already shutdown MetricReader.');\n      return;\n    }\n\n    // No timeout if timeoutMillis is undefined or null.\n    if (options?.timeoutMillis == null) {\n      await this.onForceFlush();\n      return;\n    }\n\n    await callWithTimeout(this.onForceFlush(), options.timeoutMillis);\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as api from '@opentelemetry/api';\nimport {\n  internal,\n  ExportResultCode,\n  globalErrorHandler,\n  unrefTimer,\n} from '@opentelemetry/core';\nimport { MetricReader } from './MetricReader';\nimport { PushMetricExporter } from './MetricExporter';\nimport { callWithTimeout, TimeoutError } from '../utils';\nimport { diag } from '@opentelemetry/api';\nimport { MetricProducer } from './MetricProducer';\n\nexport type PeriodicExportingMetricReaderOptions = {\n  /**\n   * The backing exporter for the metric reader.\n   */\n  exporter: PushMetricExporter;\n  /**\n   * An internal milliseconds for the metric reader to initiate metric\n   * collection.\n   */\n  exportIntervalMillis?: number;\n  /**\n   * Milliseconds for the async observable callback to timeout.\n   */\n  exportTimeoutMillis?: number;\n  /**\n   * **Note, this option is experimental**. Additional MetricProducers to use as a source of\n   * aggregated metric data in addition to the SDK's metric data. The resource returned by\n   * these MetricProducers is ignored; the SDK's resource will be used instead.\n   * @experimental\n   */\n  metricProducers?: MetricProducer[];\n};\n\n/**\n * {@link MetricReader} which collects metrics based on a user-configurable time interval, and passes the metrics to\n * the configured {@link PushMetricExporter}\n */\nexport class PeriodicExportingMetricReader extends MetricReader {\n  private _interval?: ReturnType<typeof setInterval>;\n  private _exporter: PushMetricExporter;\n  private readonly _exportInterval: number;\n  private readonly _exportTimeout: number;\n\n  constructor(options: PeriodicExportingMetricReaderOptions) {\n    super({\n      aggregationSelector: options.exporter.selectAggregation?.bind(\n        options.exporter\n      ),\n      aggregationTemporalitySelector:\n        options.exporter.selectAggregationTemporality?.bind(options.exporter),\n      metricProducers: options.metricProducers,\n    });\n\n    if (\n      options.exportIntervalMillis !== undefined &&\n      options.exportIntervalMillis <= 0\n    ) {\n      throw Error('exportIntervalMillis must be greater than 0');\n    }\n\n    if (\n      options.exportTimeoutMillis !== undefined &&\n      options.exportTimeoutMillis <= 0\n    ) {\n      throw Error('exportTimeoutMillis must be greater than 0');\n    }\n\n    if (\n      options.exportTimeoutMillis !== undefined &&\n      options.exportIntervalMillis !== undefined &&\n      options.exportIntervalMillis < options.exportTimeoutMillis\n    ) {\n      throw Error(\n        'exportIntervalMillis must be greater than or equal to exportTimeoutMillis'\n      );\n    }\n\n    this._exportInterval = options.exportIntervalMillis ?? 60000;\n    this._exportTimeout = options.exportTimeoutMillis ?? 30000;\n    this._exporter = options.exporter;\n  }\n\n  private async _runOnce(): Promise<void> {\n    try {\n      await callWithTimeout(this._doRun(), this._exportTimeout);\n    } catch (err) {\n      if (err instanceof TimeoutError) {\n        api.diag.error(\n          'Export took longer than %s milliseconds and timed out.',\n          this._exportTimeout\n        );\n        return;\n      }\n\n      globalErrorHandler(err);\n    }\n  }\n\n  private async _doRun(): Promise<void> {\n    const { resourceMetrics, errors } = await this.collect({\n      timeoutMillis: this._exportTimeout,\n    });\n\n    if (errors.length > 0) {\n      api.diag.error(\n        'PeriodicExportingMetricReader: metrics collection errors',\n        ...errors\n      );\n    }\n\n    const doExport = async () => {\n      const result = await internal._export(this._exporter, resourceMetrics);\n      if (result.code !== ExportResultCode.SUCCESS) {\n        throw new Error(\n          `PeriodicExportingMetricReader: metrics export failed (error ${result.error})`\n        );\n      }\n    };\n\n    // Avoid scheduling a promise to make the behavior more predictable and easier to test\n    if (resourceMetrics.resource.asyncAttributesPending) {\n      resourceMetrics.resource\n        .waitForAsyncAttributes?.()\n        .then(doExport, err =>\n          diag.debug('Error while resolving async portion of resource: ', err)\n        );\n    } else {\n      await doExport();\n    }\n  }\n\n  protected override onInitialized(): void {\n    // start running the interval as soon as this reader is initialized and keep handle for shutdown.\n    this._interval = setInterval(() => {\n      // this._runOnce never rejects. Using void operator to suppress @typescript-eslint/no-floating-promises.\n      void this._runOnce();\n    }, this._exportInterval);\n    unrefTimer(this._interval);\n  }\n\n  protected async onForceFlush(): Promise<void> {\n    await this._runOnce();\n    await this._exporter.forceFlush();\n  }\n\n  protected async onShutdown(): Promise<void> {\n    if (this._interval) {\n      clearInterval(this._interval);\n    }\n\n    await this._exporter.shutdown();\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ExportResultCode } from '@opentelemetry/core';\nimport { ExportResult } from '@opentelemetry/core';\nimport { InstrumentType } from '../InstrumentDescriptor';\nimport { AggregationTemporality } from './AggregationTemporality';\nimport { ResourceMetrics } from './MetricData';\nimport { PushMetricExporter } from './MetricExporter';\n\n/**\n * In-memory Metrics Exporter is a Push Metric Exporter\n * which accumulates metrics data in the local memory and\n * allows to inspect it (useful for e.g. unit tests).\n */\nexport class InMemoryMetricExporter implements PushMetricExporter {\n  protected _shutdown = false;\n  protected _aggregationTemporality: AggregationTemporality;\n  private _metrics: ResourceMetrics[] = [];\n\n  constructor(aggregationTemporality: AggregationTemporality) {\n    this._aggregationTemporality = aggregationTemporality;\n  }\n\n  /**\n   * @inheritedDoc\n   */\n  export(\n    metrics: ResourceMetrics,\n    resultCallback: (result: ExportResult) => void\n  ): void {\n    // Avoid storing metrics when exporter is shutdown\n    if (this._shutdown) {\n      setTimeout(() => resultCallback({ code: ExportResultCode.FAILED }), 0);\n      return;\n    }\n\n    this._metrics.push(metrics);\n    setTimeout(() => resultCallback({ code: ExportResultCode.SUCCESS }), 0);\n  }\n\n  /**\n   * Returns all the collected resource metrics\n   * @returns ResourceMetrics[]\n   */\n  public getMetrics(): ResourceMetrics[] {\n    return this._metrics;\n  }\n\n  forceFlush(): Promise<void> {\n    return Promise.resolve();\n  }\n\n  reset() {\n    this._metrics = [];\n  }\n\n  selectAggregationTemporality(\n    _instrumentType: InstrumentType\n  ): AggregationTemporality {\n    return this._aggregationTemporality;\n  }\n\n  shutdown(): Promise<void> {\n    this._shutdown = true;\n    return Promise.resolve();\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { ExportResult, ExportResultCode } from '@opentelemetry/core';\nimport { InstrumentType } from '../InstrumentDescriptor';\nimport { AggregationTemporality } from './AggregationTemporality';\nimport { ResourceMetrics } from './MetricData';\nimport { PushMetricExporter } from './MetricExporter';\nimport {\n  AggregationTemporalitySelector,\n  DEFAULT_AGGREGATION_TEMPORALITY_SELECTOR,\n} from './AggregationSelector';\n\ninterface ConsoleMetricExporterOptions {\n  temporalitySelector?: AggregationTemporalitySelector;\n}\n\n/* eslint-disable no-console */\nexport class ConsoleMetricExporter implements PushMetricExporter {\n  protected _shutdown = false;\n  protected _temporalitySelector: AggregationTemporalitySelector;\n\n  constructor(options?: ConsoleMetricExporterOptions) {\n    this._temporalitySelector =\n      options?.temporalitySelector ?? DEFAULT_AGGREGATION_TEMPORALITY_SELECTOR;\n  }\n\n  export(\n    metrics: ResourceMetrics,\n    resultCallback: (result: ExportResult) => void\n  ): void {\n    if (this._shutdown) {\n      // If the exporter is shutting down, by spec, we need to return FAILED as export result\n      setImmediate(resultCallback, { code: ExportResultCode.FAILED });\n      return;\n    }\n\n    return ConsoleMetricExporter._sendMetrics(metrics, resultCallback);\n  }\n\n  forceFlush(): Promise<void> {\n    return Promise.resolve();\n  }\n\n  selectAggregationTemporality(\n    _instrumentType: InstrumentType\n  ): AggregationTemporality {\n    return this._temporalitySelector(_instrumentType);\n  }\n\n  shutdown(): Promise<void> {\n    this._shutdown = true;\n    return Promise.resolve();\n  }\n\n  private static _sendMetrics(\n    metrics: ResourceMetrics,\n    done: (result: ExportResult) => void\n  ): void {\n    for (const scopeMetrics of metrics.scopeMetrics) {\n      for (const metric of scopeMetrics.metrics) {\n        console.dir(\n          {\n            descriptor: metric.descriptor,\n            dataPointType: metric.dataPointType,\n            dataPoints: metric.dataPoints,\n          },\n          { depth: null }\n        );\n      }\n    }\n\n    done({ code: ExportResultCode.SUCCESS });\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { InstrumentationScope } from '@opentelemetry/core';\nimport { InstrumentDescriptor } from '../InstrumentDescriptor';\nimport { InstrumentSelector } from './InstrumentSelector';\nimport { MeterSelector } from './MeterSelector';\nimport { View } from './View';\n\nexport class ViewRegistry {\n  private _registeredViews: View[] = [];\n\n  addView(view: View) {\n    this._registeredViews.push(view);\n  }\n\n  findViews(\n    instrument: InstrumentDescriptor,\n    meter: InstrumentationScope\n  ): View[] {\n    const views = this._registeredViews.filter(registeredView => {\n      return (\n        this._matchInstrument(registeredView.instrumentSelector, instrument) &&\n        this._matchMeter(registeredView.meterSelector, meter)\n      );\n    });\n\n    return views;\n  }\n\n  private _matchInstrument(\n    selector: InstrumentSelector,\n    instrument: InstrumentDescriptor\n  ): boolean {\n    return (\n      (selector.getType() === undefined ||\n        instrument.type === selector.getType()) &&\n      selector.getNameFilter().match(instrument.name) &&\n      selector.getUnitFilter().match(instrument.unit)\n    );\n  }\n\n  private _matchMeter(\n    selector: MeterSelector,\n    meter: InstrumentationScope\n  ): boolean {\n    return (\n      selector.getNameFilter().match(meter.name) &&\n      (meter.version === undefined ||\n        selector.getVersionFilter().match(meter.version)) &&\n      (meter.schemaUrl === undefined ||\n        selector.getSchemaUrlFilter().match(meter.schemaUrl))\n    );\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  context as contextApi,\n  diag,\n  Context,\n  MetricAttributes,\n  ValueType,\n  UpDownCounter,\n  Counter,\n  Histogram,\n  Observable,\n  ObservableCallback,\n  ObservableCounter,\n  ObservableGauge,\n  ObservableUpDownCounter,\n} from '@opentelemetry/api';\nimport { millisToHrTime } from '@opentelemetry/core';\nimport { InstrumentDescriptor } from './InstrumentDescriptor';\nimport { ObservableRegistry } from './state/ObservableRegistry';\nimport {\n  AsyncWritableMetricStorage,\n  WritableMetricStorage,\n} from './state/WritableMetricStorage';\nimport { Gauge } from './types';\n\nexport class SyncInstrument {\n  constructor(\n    private _writableMetricStorage: WritableMetricStorage,\n    protected _descriptor: InstrumentDescriptor\n  ) {}\n\n  protected _record(\n    value: number,\n    attributes: MetricAttributes = {},\n    context: Context = contextApi.active()\n  ) {\n    if (typeof value !== 'number') {\n      diag.warn(\n        `non-number value provided to metric ${this._descriptor.name}: ${value}`\n      );\n      return;\n    }\n    if (\n      this._descriptor.valueType === ValueType.INT &&\n      !Number.isInteger(value)\n    ) {\n      diag.warn(\n        `INT value type cannot accept a floating-point value for ${this._descriptor.name}, ignoring the fractional digits.`\n      );\n      value = Math.trunc(value);\n      // ignore non-finite values.\n      if (!Number.isInteger(value)) {\n        return;\n      }\n    }\n    this._writableMetricStorage.record(\n      value,\n      attributes,\n      context,\n      millisToHrTime(Date.now())\n    );\n  }\n}\n\n/**\n * The class implements {@link UpDownCounter} interface.\n */\nexport class UpDownCounterInstrument\n  extends SyncInstrument\n  implements UpDownCounter\n{\n  /**\n   * Increment value of counter by the input. Inputs may be negative.\n   */\n  add(value: number, attributes?: MetricAttributes, ctx?: Context): void {\n    this._record(value, attributes, ctx);\n  }\n}\n\n/**\n * The class implements {@link Counter} interface.\n */\nexport class CounterInstrument extends SyncInstrument implements Counter {\n  /**\n   * Increment value of counter by the input. Inputs may not be negative.\n   */\n  add(value: number, attributes?: MetricAttributes, ctx?: Context): void {\n    if (value < 0) {\n      diag.warn(\n        `negative value provided to counter ${this._descriptor.name}: ${value}`\n      );\n      return;\n    }\n\n    this._record(value, attributes, ctx);\n  }\n}\n\n/**\n * The class implements {@link Gauge} interface.\n */\nexport class GaugeInstrument extends SyncInstrument implements Gauge {\n  /**\n   * Records a measurement.\n   */\n  record(value: number, attributes?: MetricAttributes, ctx?: Context): void {\n    this._record(value, attributes, ctx);\n  }\n}\n\n/**\n * The class implements {@link Histogram} interface.\n */\nexport class HistogramInstrument extends SyncInstrument implements Histogram {\n  /**\n   * Records a measurement. Value of the measurement must not be negative.\n   */\n  record(value: number, attributes?: MetricAttributes, ctx?: Context): void {\n    if (value < 0) {\n      diag.warn(\n        `negative value provided to histogram ${this._descriptor.name}: ${value}`\n      );\n      return;\n    }\n    this._record(value, attributes, ctx);\n  }\n}\n\nexport class ObservableInstrument implements Observable {\n  /** @internal */\n  _metricStorages: AsyncWritableMetricStorage[];\n  /** @internal */\n  _descriptor: InstrumentDescriptor;\n\n  constructor(\n    descriptor: InstrumentDescriptor,\n    metricStorages: AsyncWritableMetricStorage[],\n    private _observableRegistry: ObservableRegistry\n  ) {\n    this._descriptor = descriptor;\n    this._metricStorages = metricStorages;\n  }\n\n  /**\n   * @see {Observable.addCallback}\n   */\n  addCallback(callback: ObservableCallback) {\n    this._observableRegistry.addCallback(callback, this);\n  }\n\n  /**\n   * @see {Observable.removeCallback}\n   */\n  removeCallback(callback: ObservableCallback) {\n    this._observableRegistry.removeCallback(callback, this);\n  }\n}\n\nexport class ObservableCounterInstrument\n  extends ObservableInstrument\n  implements ObservableCounter {}\nexport class ObservableGaugeInstrument\n  extends ObservableInstrument\n  implements ObservableGauge {}\nexport class ObservableUpDownCounterInstrument\n  extends ObservableInstrument\n  implements ObservableUpDownCounter {}\n\nexport function isObservableInstrument(\n  it: unknown\n): it is ObservableInstrument {\n  return it instanceof ObservableInstrument;\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Meter as IMeter,\n  MetricOptions,\n  Histogram,\n  Counter,\n  UpDownCounter,\n  ObservableGauge,\n  ObservableCounter,\n  ObservableUpDownCounter,\n  BatchObservableCallback,\n  Observable,\n} from '@opentelemetry/api';\nimport {\n  createInstrumentDescriptor,\n  InstrumentType,\n} from './InstrumentDescriptor';\nimport {\n  CounterInstrument,\n  GaugeInstrument,\n  HistogramInstrument,\n  ObservableCounterInstrument,\n  ObservableGaugeInstrument,\n  ObservableUpDownCounterInstrument,\n  UpDownCounterInstrument,\n} from './Instruments';\nimport { MeterSharedState } from './state/MeterSharedState';\nimport { Gauge } from './types';\n\n/**\n * This class implements the {@link IMeter} interface.\n */\nexport class Meter implements IMeter {\n  constructor(private _meterSharedState: MeterSharedState) {}\n\n  /**\n   * Create a {@link Gauge} instrument.\n   */\n  createGauge(name: string, options?: MetricOptions): Gauge {\n    const descriptor = createInstrumentDescriptor(\n      name,\n      InstrumentType.GAUGE,\n      options\n    );\n    const storage = this._meterSharedState.registerMetricStorage(descriptor);\n    return new GaugeInstrument(storage, descriptor);\n  }\n\n  /**\n   * Create a {@link Histogram} instrument.\n   */\n  createHistogram(name: string, options?: MetricOptions): Histogram {\n    const descriptor = createInstrumentDescriptor(\n      name,\n      InstrumentType.HISTOGRAM,\n      options\n    );\n    const storage = this._meterSharedState.registerMetricStorage(descriptor);\n    return new HistogramInstrument(storage, descriptor);\n  }\n\n  /**\n   * Create a {@link Counter} instrument.\n   */\n  createCounter(name: string, options?: MetricOptions): Counter {\n    const descriptor = createInstrumentDescriptor(\n      name,\n      InstrumentType.COUNTER,\n      options\n    );\n    const storage = this._meterSharedState.registerMetricStorage(descriptor);\n    return new CounterInstrument(storage, descriptor);\n  }\n\n  /**\n   * Create a {@link UpDownCounter} instrument.\n   */\n  createUpDownCounter(name: string, options?: MetricOptions): UpDownCounter {\n    const descriptor = createInstrumentDescriptor(\n      name,\n      InstrumentType.UP_DOWN_COUNTER,\n      options\n    );\n    const storage = this._meterSharedState.registerMetricStorage(descriptor);\n    return new UpDownCounterInstrument(storage, descriptor);\n  }\n\n  /**\n   * Create a {@link ObservableGauge} instrument.\n   */\n  createObservableGauge(\n    name: string,\n    options?: MetricOptions\n  ): ObservableGauge {\n    const descriptor = createInstrumentDescriptor(\n      name,\n      InstrumentType.OBSERVABLE_GAUGE,\n      options\n    );\n    const storages =\n      this._meterSharedState.registerAsyncMetricStorage(descriptor);\n    return new ObservableGaugeInstrument(\n      descriptor,\n      storages,\n      this._meterSharedState.observableRegistry\n    );\n  }\n\n  /**\n   * Create a {@link ObservableCounter} instrument.\n   */\n  createObservableCounter(\n    name: string,\n    options?: MetricOptions\n  ): ObservableCounter {\n    const descriptor = createInstrumentDescriptor(\n      name,\n      InstrumentType.OBSERVABLE_COUNTER,\n      options\n    );\n    const storages =\n      this._meterSharedState.registerAsyncMetricStorage(descriptor);\n    return new ObservableCounterInstrument(\n      descriptor,\n      storages,\n      this._meterSharedState.observableRegistry\n    );\n  }\n\n  /**\n   * Create a {@link ObservableUpDownCounter} instrument.\n   */\n  createObservableUpDownCounter(\n    name: string,\n    options?: MetricOptions\n  ): ObservableUpDownCounter {\n    const descriptor = createInstrumentDescriptor(\n      name,\n      InstrumentType.OBSERVABLE_UP_DOWN_COUNTER,\n      options\n    );\n    const storages =\n      this._meterSharedState.registerAsyncMetricStorage(descriptor);\n    return new ObservableUpDownCounterInstrument(\n      descriptor,\n      storages,\n      this._meterSharedState.observableRegistry\n    );\n  }\n\n  /**\n   * @see {@link Meter.addBatchObservableCallback}\n   */\n  addBatchObservableCallback(\n    callback: BatchObservableCallback,\n    observables: Observable[]\n  ) {\n    this._meterSharedState.observableRegistry.addBatchCallback(\n      callback,\n      observables\n    );\n  }\n\n  /**\n   * @see {@link Meter.removeBatchObservableCallback}\n   */\n  removeBatchObservableCallback(\n    callback: BatchObservableCallback,\n    observables: Observable[]\n  ) {\n    this._meterSharedState.observableRegistry.removeBatchCallback(\n      callback,\n      observables\n    );\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { HrTime } from '@opentelemetry/api';\nimport { MetricData } from '../export/MetricData';\nimport { Maybe } from '../utils';\nimport { MetricCollectorHandle } from './MetricCollector';\nimport {\n  createInstrumentDescriptor,\n  InstrumentDescriptor,\n} from '../InstrumentDescriptor';\n\n/**\n * Internal interface.\n *\n * Represents a storage from which we can collect metrics.\n */\nexport abstract class MetricStorage {\n  constructor(protected _instrumentDescriptor: InstrumentDescriptor) {}\n\n  /**\n   * Collects the metrics from this storage.\n   *\n   * Note: This is a stateful operation and may reset any interval-related\n   * state for the MetricCollector.\n   */\n  abstract collect(\n    collector: MetricCollectorHandle,\n    collectionTime: HrTime\n  ): Maybe<MetricData>;\n\n  getInstrumentDescriptor(): Readonly<InstrumentDescriptor> {\n    return this._instrumentDescriptor;\n  }\n\n  updateDescription(description: string): void {\n    this._instrumentDescriptor = createInstrumentDescriptor(\n      this._instrumentDescriptor.name,\n      this._instrumentDescriptor.type,\n      {\n        description: description,\n        valueType: this._instrumentDescriptor.valueType,\n        unit: this._instrumentDescriptor.unit,\n        advice: this._instrumentDescriptor.advice,\n      }\n    );\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { MetricAttributes } from '@opentelemetry/api';\nimport { hashAttributes } from '../utils';\n\nexport interface Hash<ValueType, HashCodeType> {\n  (value: ValueType): HashCodeType;\n}\n\nexport class HashMap<KeyType, ValueType, HashCodeType> {\n  private _valueMap = new Map<HashCodeType, ValueType>();\n  private _keyMap = new Map<HashCodeType, KeyType>();\n\n  constructor(private _hash: Hash<KeyType, HashCodeType>) {}\n\n  get(key: KeyType, hashCode?: HashCodeType) {\n    hashCode ??= this._hash(key);\n    return this._valueMap.get(hashCode);\n  }\n\n  getOrDefault(key: KeyType, defaultFactory: () => ValueType) {\n    const hash = this._hash(key);\n    if (this._valueMap.has(hash)) {\n      return this._valueMap.get(hash);\n    }\n    const val = defaultFactory();\n    if (!this._keyMap.has(hash)) {\n      this._keyMap.set(hash, key);\n    }\n    this._valueMap.set(hash, val);\n    return val;\n  }\n\n  set(key: KeyType, value: ValueType, hashCode?: HashCodeType) {\n    hashCode ??= this._hash(key);\n    if (!this._keyMap.has(hashCode)) {\n      this._keyMap.set(hashCode, key);\n    }\n    this._valueMap.set(hashCode, value);\n  }\n\n  has(key: KeyType, hashCode?: HashCodeType) {\n    hashCode ??= this._hash(key);\n    return this._valueMap.has(hashCode);\n  }\n\n  *keys(): IterableIterator<[KeyType, HashCodeType]> {\n    const keyIterator = this._keyMap.entries();\n    let next = keyIterator.next();\n    while (next.done !== true) {\n      yield [next.value[1], next.value[0]];\n      next = keyIterator.next();\n    }\n  }\n\n  *entries(): IterableIterator<[KeyType, ValueType, HashCodeType]> {\n    const valueIterator = this._valueMap.entries();\n    let next = valueIterator.next();\n    while (next.done !== true) {\n      // next.value[0] here can not be undefined\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      yield [this._keyMap.get(next.value[0])!, next.value[1], next.value[0]];\n      next = valueIterator.next();\n    }\n  }\n\n  get size() {\n    return this._valueMap.size;\n  }\n}\n\nexport class AttributeHashMap<ValueType> extends HashMap<\n  MetricAttributes,\n  ValueType,\n  string\n> {\n  constructor() {\n    super(hashAttributes);\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Context, HrTime, MetricAttributes } from '@opentelemetry/api';\nimport { Maybe } from '../utils';\nimport { Accumulation, Aggregator } from '../aggregator/types';\nimport { AttributeHashMap } from './HashMap';\n\n/**\n * Internal interface.\n *\n * Allows synchronous collection of metrics. This processor should allow\n * allocation of new aggregation cells for metrics and convert cumulative\n * recording to delta data points.\n */\nexport class DeltaMetricProcessor<T extends Maybe<Accumulation>> {\n  private _activeCollectionStorage = new AttributeHashMap<T>();\n  // TODO: find a reasonable mean to clean the memo;\n  // https://github.com/open-telemetry/opentelemetry-specification/pull/2208\n  private _cumulativeMemoStorage = new AttributeHashMap<T>();\n\n  constructor(private _aggregator: Aggregator<T>) {}\n\n  record(\n    value: number,\n    attributes: MetricAttributes,\n    _context: Context,\n    collectionTime: HrTime\n  ) {\n    const accumulation = this._activeCollectionStorage.getOrDefault(\n      attributes,\n      () => this._aggregator.createAccumulation(collectionTime)\n    );\n    accumulation?.record(value);\n  }\n\n  batchCumulate(\n    measurements: AttributeHashMap<number>,\n    collectionTime: HrTime\n  ) {\n    Array.from(measurements.entries()).forEach(\n      ([attributes, value, hashCode]) => {\n        const accumulation =\n          this._aggregator.createAccumulation(collectionTime);\n        accumulation?.record(value);\n        let delta = accumulation;\n        // Diff with recorded cumulative memo.\n        if (this._cumulativeMemoStorage.has(attributes, hashCode)) {\n          // has() returned true, previous is present.\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n          const previous = this._cumulativeMemoStorage.get(\n            attributes,\n            hashCode\n          )!;\n          delta = this._aggregator.diff(previous, accumulation);\n        }\n        // Merge with uncollected active delta.\n        if (this._activeCollectionStorage.has(attributes, hashCode)) {\n          // has() returned true, previous is present.\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n          const active = this._activeCollectionStorage.get(\n            attributes,\n            hashCode\n          )!;\n          delta = this._aggregator.merge(active, delta);\n        }\n\n        // Save the current record and the delta record.\n        this._cumulativeMemoStorage.set(attributes, accumulation, hashCode);\n        this._activeCollectionStorage.set(attributes, delta, hashCode);\n      }\n    );\n  }\n\n  /**\n   * Returns a collection of delta metrics. Start time is the when first\n   * time event collected.\n   */\n  collect() {\n    const unreportedDelta = this._activeCollectionStorage;\n    this._activeCollectionStorage = new AttributeHashMap();\n    return unreportedDelta;\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { HrTime } from '@opentelemetry/api';\nimport {\n  Accumulation,\n  AccumulationRecord,\n  Aggregator,\n} from '../aggregator/types';\nimport { MetricData } from '../export/MetricData';\nimport { InstrumentDescriptor } from '../InstrumentDescriptor';\nimport { AggregationTemporality } from '../export/AggregationTemporality';\nimport { Maybe } from '../utils';\nimport { MetricCollectorHandle } from './MetricCollector';\nimport { AttributeHashMap } from './HashMap';\n\n/**\n * Remembers what was presented to a specific exporter.\n */\ninterface LastReportedHistory<T extends Maybe<Accumulation>> {\n  /**\n   * The last accumulation of metric data.\n   */\n  accumulations: AttributeHashMap<T>;\n  /**\n   * The timestamp the data was reported.\n   */\n  collectionTime: HrTime;\n  /**\n   * The AggregationTemporality used to aggregate reports.\n   */\n  aggregationTemporality: AggregationTemporality;\n}\n\n/**\n * Internal interface.\n *\n * Provides unique reporting for each collector. Allows synchronous collection\n * of metrics and reports given temporality values.\n */\nexport class TemporalMetricProcessor<T extends Maybe<Accumulation>> {\n  private _unreportedAccumulations = new Map<\n    MetricCollectorHandle,\n    AttributeHashMap<T>[]\n  >();\n  private _reportHistory = new Map<\n    MetricCollectorHandle,\n    LastReportedHistory<T>\n  >();\n\n  constructor(\n    private _aggregator: Aggregator<T>,\n    collectorHandles: MetricCollectorHandle[]\n  ) {\n    collectorHandles.forEach(handle => {\n      this._unreportedAccumulations.set(handle, []);\n    });\n  }\n\n  /**\n   * Builds the {@link MetricData} streams to report against a specific MetricCollector.\n   * @param collector The information of the MetricCollector.\n   * @param collectors The registered collectors.\n   * @param instrumentDescriptor The instrumentation descriptor that these metrics generated with.\n   * @param currentAccumulations The current accumulation of metric data from instruments.\n   * @param collectionTime The current collection timestamp.\n   * @returns The {@link MetricData} points or `null`.\n   */\n  buildMetrics(\n    collector: MetricCollectorHandle,\n    instrumentDescriptor: InstrumentDescriptor,\n    currentAccumulations: AttributeHashMap<T>,\n    collectionTime: HrTime\n  ): Maybe<MetricData> {\n    this._stashAccumulations(currentAccumulations);\n    const unreportedAccumulations =\n      this._getMergedUnreportedAccumulations(collector);\n\n    let result = unreportedAccumulations;\n    let aggregationTemporality: AggregationTemporality;\n    // Check our last report time.\n    if (this._reportHistory.has(collector)) {\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      const last = this._reportHistory.get(collector)!;\n      const lastCollectionTime = last.collectionTime;\n      aggregationTemporality = last.aggregationTemporality;\n\n      // Use aggregation temporality + instrument to determine if we do a merge or a diff of\n      // previous. We have the following four scenarios:\n      // 1. Cumulative Aggregation (temporality) + Delta recording (sync instrument).\n      //    Here we merge with our last record to get a cumulative aggregation.\n      // 2. Cumulative Aggregation + Cumulative recording (async instrument).\n      //    Cumulative records are converted to delta recording with DeltaMetricProcessor.\n      //    Here we merge with our last record to get a cumulative aggregation.\n      // 3. Delta Aggregation + Delta recording\n      //    Calibrate the startTime of metric streams to be the reader's lastCollectionTime.\n      // 4. Delta Aggregation + Cumulative recording.\n      //    Cumulative records are converted to delta recording with DeltaMetricProcessor.\n      //    Calibrate the startTime of metric streams to be the reader's lastCollectionTime.\n      if (aggregationTemporality === AggregationTemporality.CUMULATIVE) {\n        // We need to make sure the current delta recording gets merged into the previous cumulative\n        // for the next cumulative recording.\n        result = TemporalMetricProcessor.merge(\n          last.accumulations,\n          unreportedAccumulations,\n          this._aggregator\n        );\n      } else {\n        result = TemporalMetricProcessor.calibrateStartTime(\n          last.accumulations,\n          unreportedAccumulations,\n          lastCollectionTime\n        );\n      }\n    } else {\n      // Call into user code to select aggregation temporality for the instrument.\n      aggregationTemporality = collector.selectAggregationTemporality(\n        instrumentDescriptor.type\n      );\n    }\n\n    // Update last reported (cumulative) accumulation.\n    this._reportHistory.set(collector, {\n      accumulations: result,\n      collectionTime,\n      aggregationTemporality,\n    });\n\n    const accumulationRecords = AttributesMapToAccumulationRecords(result);\n\n    // do not convert to metric data if there is nothing to convert.\n    if (accumulationRecords.length === 0) {\n      return undefined;\n    }\n\n    return this._aggregator.toMetricData(\n      instrumentDescriptor,\n      aggregationTemporality,\n      accumulationRecords,\n      /* endTime */ collectionTime\n    );\n  }\n\n  private _stashAccumulations(currentAccumulation: AttributeHashMap<T>) {\n    const registeredCollectors = this._unreportedAccumulations.keys();\n    for (const collector of registeredCollectors) {\n      let stash = this._unreportedAccumulations.get(collector);\n      if (stash === undefined) {\n        stash = [];\n        this._unreportedAccumulations.set(collector, stash);\n      }\n      stash.push(currentAccumulation);\n    }\n  }\n\n  private _getMergedUnreportedAccumulations(collector: MetricCollectorHandle) {\n    let result = new AttributeHashMap<T>();\n    const unreportedList = this._unreportedAccumulations.get(collector);\n    this._unreportedAccumulations.set(collector, []);\n    if (unreportedList === undefined) {\n      return result;\n    }\n    for (const it of unreportedList) {\n      result = TemporalMetricProcessor.merge(result, it, this._aggregator);\n    }\n    return result;\n  }\n\n  static merge<T extends Maybe<Accumulation>>(\n    last: AttributeHashMap<T>,\n    current: AttributeHashMap<T>,\n    aggregator: Aggregator<T>\n  ) {\n    const result = last;\n    const iterator = current.entries();\n    let next = iterator.next();\n    while (next.done !== true) {\n      const [key, record, hash] = next.value;\n      if (last.has(key, hash)) {\n        const lastAccumulation = last.get(key, hash);\n        // last.has() returned true, lastAccumulation is present.\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const accumulation = aggregator.merge(lastAccumulation!, record);\n        result.set(key, accumulation, hash);\n      } else {\n        result.set(key, record, hash);\n      }\n\n      next = iterator.next();\n    }\n    return result;\n  }\n\n  /**\n   * Calibrate the reported metric streams' startTime to lastCollectionTime. Leaves\n   * the new stream to be the initial observation time unchanged.\n   */\n  static calibrateStartTime<T extends Maybe<Accumulation>>(\n    last: AttributeHashMap<T>,\n    current: AttributeHashMap<T>,\n    lastCollectionTime: HrTime\n  ) {\n    for (const [key, hash] of last.keys()) {\n      const currentAccumulation = current.get(key, hash);\n      currentAccumulation?.setStartTime(lastCollectionTime);\n    }\n    return current;\n  }\n}\n\n// TypeScript complains about converting 3 elements tuple to AccumulationRecord<T>.\nfunction AttributesMapToAccumulationRecords<T>(\n  map: AttributeHashMap<T>\n): AccumulationRecord<T>[] {\n  return Array.from(map.entries()) as unknown as AccumulationRecord<T>[];\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { HrTime } from '@opentelemetry/api';\nimport { Accumulation, Aggregator } from '../aggregator/types';\nimport { InstrumentDescriptor } from '../InstrumentDescriptor';\nimport { AttributesProcessor } from '../view/AttributesProcessor';\nimport { MetricStorage } from './MetricStorage';\nimport { MetricData } from '../export/MetricData';\nimport { DeltaMetricProcessor } from './DeltaMetricProcessor';\nimport { TemporalMetricProcessor } from './TemporalMetricProcessor';\nimport { Maybe } from '../utils';\nimport { MetricCollectorHandle } from './MetricCollector';\nimport { AttributeHashMap } from './HashMap';\nimport { AsyncWritableMetricStorage } from './WritableMetricStorage';\n\n/**\n * Internal interface.\n *\n * Stores and aggregates {@link MetricData} for asynchronous instruments.\n */\nexport class AsyncMetricStorage<T extends Maybe<Accumulation>>\n  extends MetricStorage\n  implements AsyncWritableMetricStorage\n{\n  private _deltaMetricStorage: DeltaMetricProcessor<T>;\n  private _temporalMetricStorage: TemporalMetricProcessor<T>;\n\n  constructor(\n    _instrumentDescriptor: InstrumentDescriptor,\n    aggregator: Aggregator<T>,\n    private _attributesProcessor: AttributesProcessor,\n    collectorHandles: MetricCollectorHandle[]\n  ) {\n    super(_instrumentDescriptor);\n    this._deltaMetricStorage = new DeltaMetricProcessor(aggregator);\n    this._temporalMetricStorage = new TemporalMetricProcessor(\n      aggregator,\n      collectorHandles\n    );\n  }\n\n  record(measurements: AttributeHashMap<number>, observationTime: HrTime) {\n    const processed = new AttributeHashMap<number>();\n    Array.from(measurements.entries()).forEach(([attributes, value]) => {\n      processed.set(this._attributesProcessor.process(attributes), value);\n    });\n    this._deltaMetricStorage.batchCumulate(processed, observationTime);\n  }\n\n  /**\n   * Collects the metrics from this storage. The ObservableCallback is invoked\n   * during the collection.\n   *\n   * Note: This is a stateful operation and may reset any interval-related\n   * state for the MetricCollector.\n   */\n  collect(\n    collector: MetricCollectorHandle,\n    collectionTime: HrTime\n  ): Maybe<MetricData> {\n    const accumulations = this._deltaMetricStorage.collect();\n\n    return this._temporalMetricStorage.buildMetrics(\n      collector,\n      this._instrumentDescriptor,\n      accumulations,\n      collectionTime\n    );\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { InstrumentSelectorCriteria } from './InstrumentSelector';\nimport { InstrumentDescriptor } from '../InstrumentDescriptor';\n\nexport function getIncompatibilityDetails(\n  existing: InstrumentDescriptor,\n  otherDescriptor: InstrumentDescriptor\n) {\n  let incompatibility = '';\n  if (existing.unit !== otherDescriptor.unit) {\n    incompatibility += `\\t- Unit '${existing.unit}' does not match '${otherDescriptor.unit}'\\n`;\n  }\n  if (existing.type !== otherDescriptor.type) {\n    incompatibility += `\\t- Type '${existing.type}' does not match '${otherDescriptor.type}'\\n`;\n  }\n  if (existing.valueType !== otherDescriptor.valueType) {\n    incompatibility += `\\t- Value Type '${existing.valueType}' does not match '${otherDescriptor.valueType}'\\n`;\n  }\n  if (existing.description !== otherDescriptor.description) {\n    incompatibility += `\\t- Description '${existing.description}' does not match '${otherDescriptor.description}'\\n`;\n  }\n\n  return incompatibility;\n}\n\nexport function getValueTypeConflictResolutionRecipe(\n  existing: InstrumentDescriptor,\n  otherDescriptor: InstrumentDescriptor\n) {\n  return `\\t- use valueType '${existing.valueType}' on instrument creation or use an instrument name other than '${otherDescriptor.name}'`;\n}\n\nexport function getUnitConflictResolutionRecipe(\n  existing: InstrumentDescriptor,\n  otherDescriptor: InstrumentDescriptor\n) {\n  return `\\t- use unit '${existing.unit}' on instrument creation or use an instrument name other than '${otherDescriptor.name}'`;\n}\n\nexport function getTypeConflictResolutionRecipe(\n  existing: InstrumentDescriptor,\n  otherDescriptor: InstrumentDescriptor\n) {\n  const selector: InstrumentSelectorCriteria = {\n    name: otherDescriptor.name,\n    type: otherDescriptor.type,\n    unit: otherDescriptor.unit,\n  };\n\n  const selectorString = JSON.stringify(selector);\n\n  return `\\t- create a new view with a name other than '${existing.name}' and InstrumentSelector '${selectorString}'`;\n}\n\nexport function getDescriptionResolutionRecipe(\n  existing: InstrumentDescriptor,\n  otherDescriptor: InstrumentDescriptor\n): string {\n  const selector: InstrumentSelectorCriteria = {\n    name: otherDescriptor.name,\n    type: otherDescriptor.type,\n    unit: otherDescriptor.unit,\n  };\n\n  const selectorString = JSON.stringify(selector);\n\n  return `\\t- create a new view with a name other than '${existing.name}' and InstrumentSelector '${selectorString}'\n    \\t- OR - create a new view with the name ${existing.name} and description '${existing.description}' and InstrumentSelector ${selectorString}\n    \\t- OR - create a new view with the name ${otherDescriptor.name} and description '${existing.description}' and InstrumentSelector ${selectorString}`;\n}\n\nexport function getConflictResolutionRecipe(\n  existing: InstrumentDescriptor,\n  otherDescriptor: InstrumentDescriptor\n): string {\n  // Conflicts that cannot be solved via views.\n  if (existing.valueType !== otherDescriptor.valueType) {\n    return getValueTypeConflictResolutionRecipe(existing, otherDescriptor);\n  }\n\n  if (existing.unit !== otherDescriptor.unit) {\n    return getUnitConflictResolutionRecipe(existing, otherDescriptor);\n  }\n\n  // Conflicts that can be solved via views.\n  if (existing.type !== otherDescriptor.type) {\n    // this will automatically solve possible description conflicts.\n    return getTypeConflictResolutionRecipe(existing, otherDescriptor);\n  }\n\n  if (existing.description !== otherDescriptor.description) {\n    return getDescriptionResolutionRecipe(existing, otherDescriptor);\n  }\n\n  return '';\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { MetricStorage } from './MetricStorage';\nimport {\n  InstrumentDescriptor,\n  isDescriptorCompatibleWith,\n} from '../InstrumentDescriptor';\nimport * as api from '@opentelemetry/api';\nimport {\n  getConflictResolutionRecipe,\n  getIncompatibilityDetails,\n} from '../view/RegistrationConflicts';\nimport { MetricCollectorHandle } from './MetricCollector';\n\ntype StorageMap = Map<string, MetricStorage[]>;\n\n/**\n * Internal class for storing {@link MetricStorage}\n */\nexport class MetricStorageRegistry {\n  private readonly _sharedRegistry: StorageMap = new Map();\n  private readonly _perCollectorRegistry = new Map<\n    MetricCollectorHandle,\n    StorageMap\n  >();\n\n  static create() {\n    return new MetricStorageRegistry();\n  }\n\n  getStorages(collector: MetricCollectorHandle): MetricStorage[] {\n    let storages: MetricStorage[] = [];\n    for (const metricStorages of this._sharedRegistry.values()) {\n      storages = storages.concat(metricStorages);\n    }\n\n    const perCollectorStorages = this._perCollectorRegistry.get(collector);\n    if (perCollectorStorages != null) {\n      for (const metricStorages of perCollectorStorages.values()) {\n        storages = storages.concat(metricStorages);\n      }\n    }\n\n    return storages;\n  }\n\n  register(storage: MetricStorage) {\n    this._registerStorage(storage, this._sharedRegistry);\n  }\n\n  registerForCollector(\n    collector: MetricCollectorHandle,\n    storage: MetricStorage\n  ) {\n    let storageMap = this._perCollectorRegistry.get(collector);\n    if (storageMap == null) {\n      storageMap = new Map();\n      this._perCollectorRegistry.set(collector, storageMap);\n    }\n    this._registerStorage(storage, storageMap);\n  }\n\n  findOrUpdateCompatibleStorage<T extends MetricStorage>(\n    expectedDescriptor: InstrumentDescriptor\n  ): T | null {\n    const storages = this._sharedRegistry.get(expectedDescriptor.name);\n    if (storages === undefined) {\n      return null;\n    }\n\n    // If the descriptor is compatible, the type of their metric storage\n    // (either SyncMetricStorage or AsyncMetricStorage) must be compatible.\n    return this._findOrUpdateCompatibleStorage<T>(expectedDescriptor, storages);\n  }\n\n  findOrUpdateCompatibleCollectorStorage<T extends MetricStorage>(\n    collector: MetricCollectorHandle,\n    expectedDescriptor: InstrumentDescriptor\n  ): T | null {\n    const storageMap = this._perCollectorRegistry.get(collector);\n    if (storageMap === undefined) {\n      return null;\n    }\n\n    const storages = storageMap.get(expectedDescriptor.name);\n    if (storages === undefined) {\n      return null;\n    }\n\n    // If the descriptor is compatible, the type of their metric storage\n    // (either SyncMetricStorage or AsyncMetricStorage) must be compatible.\n    return this._findOrUpdateCompatibleStorage<T>(expectedDescriptor, storages);\n  }\n\n  private _registerStorage(storage: MetricStorage, storageMap: StorageMap) {\n    const descriptor = storage.getInstrumentDescriptor();\n    const storages = storageMap.get(descriptor.name);\n\n    if (storages === undefined) {\n      storageMap.set(descriptor.name, [storage]);\n      return;\n    }\n\n    storages.push(storage);\n  }\n\n  private _findOrUpdateCompatibleStorage<T extends MetricStorage>(\n    expectedDescriptor: InstrumentDescriptor,\n    existingStorages: MetricStorage[]\n  ): T | null {\n    let compatibleStorage = null;\n\n    for (const existingStorage of existingStorages) {\n      const existingDescriptor = existingStorage.getInstrumentDescriptor();\n\n      if (isDescriptorCompatibleWith(existingDescriptor, expectedDescriptor)) {\n        // Use the longer description if it does not match.\n        if (existingDescriptor.description !== expectedDescriptor.description) {\n          if (\n            expectedDescriptor.description.length >\n            existingDescriptor.description.length\n          ) {\n            existingStorage.updateDescription(expectedDescriptor.description);\n          }\n\n          api.diag.warn(\n            'A view or instrument with the name ',\n            expectedDescriptor.name,\n            ' has already been registered, but has a different description and is incompatible with another registered view.\\n',\n            'Details:\\n',\n            getIncompatibilityDetails(existingDescriptor, expectedDescriptor),\n            'The longer description will be used.\\nTo resolve the conflict:',\n            getConflictResolutionRecipe(existingDescriptor, expectedDescriptor)\n          );\n        }\n        // Storage is fully compatible. There will never be more than one pre-existing fully compatible storage.\n        compatibleStorage = existingStorage as T;\n      } else {\n        // The implementation SHOULD warn about duplicate instrument registration\n        // conflicts after applying View configuration.\n        api.diag.warn(\n          'A view or instrument with the name ',\n          expectedDescriptor.name,\n          ' has already been registered and is incompatible with another registered view.\\n',\n          'Details:\\n',\n          getIncompatibilityDetails(existingDescriptor, expectedDescriptor),\n          'To resolve the conflict:\\n',\n          getConflictResolutionRecipe(existingDescriptor, expectedDescriptor)\n        );\n      }\n    }\n\n    return compatibleStorage;\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Context, HrTime, MetricAttributes } from '@opentelemetry/api';\nimport { WritableMetricStorage } from './WritableMetricStorage';\n\n/**\n * Internal interface.\n */\nexport class MultiMetricStorage implements WritableMetricStorage {\n  constructor(private readonly _backingStorages: WritableMetricStorage[]) {}\n\n  record(\n    value: number,\n    attributes: MetricAttributes,\n    context: Context,\n    recordTime: HrTime\n  ) {\n    this._backingStorages.forEach(it => {\n      it.record(value, attributes, context, recordTime);\n    });\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  diag,\n  ObservableResult,\n  MetricAttributes,\n  ValueType,\n  BatchObservableResult,\n  Observable,\n} from '@opentelemetry/api';\nimport { AttributeHashMap } from './state/HashMap';\nimport { isObservableInstrument, ObservableInstrument } from './Instruments';\n\n/**\n * The class implements {@link ObservableResult} interface.\n */\nexport class ObservableResultImpl implements ObservableResult {\n  /**\n   * @internal\n   */\n  _buffer = new AttributeHashMap<number>();\n\n  constructor(\n    private _instrumentName: string,\n    private _valueType: ValueType\n  ) {}\n\n  /**\n   * Observe a measurement of the value associated with the given attributes.\n   */\n  observe(value: number, attributes: MetricAttributes = {}): void {\n    if (typeof value !== 'number') {\n      diag.warn(\n        `non-number value provided to metric ${this._instrumentName}: ${value}`\n      );\n      return;\n    }\n    if (this._valueType === ValueType.INT && !Number.isInteger(value)) {\n      diag.warn(\n        `INT value type cannot accept a floating-point value for ${this._instrumentName}, ignoring the fractional digits.`\n      );\n      value = Math.trunc(value);\n      // ignore non-finite values.\n      if (!Number.isInteger(value)) {\n        return;\n      }\n    }\n    this._buffer.set(attributes, value);\n  }\n}\n\n/**\n * The class implements {@link BatchObservableCallback} interface.\n */\nexport class BatchObservableResultImpl implements BatchObservableResult {\n  /**\n   * @internal\n   */\n  _buffer: Map<ObservableInstrument, AttributeHashMap<number>> = new Map();\n\n  /**\n   * Observe a measurement of the value associated with the given attributes.\n   */\n  observe(\n    metric: Observable,\n    value: number,\n    attributes: MetricAttributes = {}\n  ): void {\n    if (!isObservableInstrument(metric)) {\n      return;\n    }\n    let map = this._buffer.get(metric);\n    if (map == null) {\n      map = new AttributeHashMap();\n      this._buffer.set(metric, map);\n    }\n    if (typeof value !== 'number') {\n      diag.warn(\n        `non-number value provided to metric ${metric._descriptor.name}: ${value}`\n      );\n      return;\n    }\n    if (\n      metric._descriptor.valueType === ValueType.INT &&\n      !Number.isInteger(value)\n    ) {\n      diag.warn(\n        `INT value type cannot accept a floating-point value for ${metric._descriptor.name}, ignoring the fractional digits.`\n      );\n      value = Math.trunc(value);\n      // ignore non-finite values.\n      if (!Number.isInteger(value)) {\n        return;\n      }\n    }\n    map.set(attributes, value);\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  diag,\n  HrTime,\n  BatchObservableCallback,\n  Observable,\n  ObservableCallback,\n} from '@opentelemetry/api';\nimport { isObservableInstrument, ObservableInstrument } from '../Instruments';\nimport {\n  BatchObservableResultImpl,\n  ObservableResultImpl,\n} from '../ObservableResult';\nimport {\n  callWithTimeout,\n  PromiseAllSettled,\n  isPromiseAllSettledRejectionResult,\n  setEquals,\n} from '../utils';\n\n/**\n * Records for single instrument observable callback.\n */\ninterface ObservableCallbackRecord {\n  callback: ObservableCallback;\n  instrument: ObservableInstrument;\n}\n\n/**\n * Records for multiple instruments observable callback.\n */\ninterface BatchObservableCallbackRecord {\n  callback: BatchObservableCallback;\n  instruments: Set<ObservableInstrument>;\n}\n\n/**\n * An internal interface for managing ObservableCallbacks.\n *\n * Every registered callback associated with a set of instruments are be evaluated\n * exactly once during collection prior to reading data for that instrument.\n */\nexport class ObservableRegistry {\n  private _callbacks: ObservableCallbackRecord[] = [];\n  private _batchCallbacks: BatchObservableCallbackRecord[] = [];\n\n  addCallback(callback: ObservableCallback, instrument: ObservableInstrument) {\n    const idx = this._findCallback(callback, instrument);\n    if (idx >= 0) {\n      return;\n    }\n    this._callbacks.push({ callback, instrument });\n  }\n\n  removeCallback(\n    callback: ObservableCallback,\n    instrument: ObservableInstrument\n  ) {\n    const idx = this._findCallback(callback, instrument);\n    if (idx < 0) {\n      return;\n    }\n    this._callbacks.splice(idx, 1);\n  }\n\n  addBatchCallback(\n    callback: BatchObservableCallback,\n    instruments: Observable[]\n  ) {\n    // Create a set of unique instruments.\n    const observableInstruments = new Set(\n      instruments.filter(isObservableInstrument)\n    );\n    if (observableInstruments.size === 0) {\n      diag.error(\n        'BatchObservableCallback is not associated with valid instruments',\n        instruments\n      );\n      return;\n    }\n    const idx = this._findBatchCallback(callback, observableInstruments);\n    if (idx >= 0) {\n      return;\n    }\n    this._batchCallbacks.push({ callback, instruments: observableInstruments });\n  }\n\n  removeBatchCallback(\n    callback: BatchObservableCallback,\n    instruments: Observable[]\n  ) {\n    // Create a set of unique instruments.\n    const observableInstruments = new Set(\n      instruments.filter(isObservableInstrument)\n    );\n    const idx = this._findBatchCallback(callback, observableInstruments);\n    if (idx < 0) {\n      return;\n    }\n    this._batchCallbacks.splice(idx, 1);\n  }\n\n  /**\n   * @returns a promise of rejected reasons for invoking callbacks.\n   */\n  async observe(\n    collectionTime: HrTime,\n    timeoutMillis?: number\n  ): Promise<unknown[]> {\n    const callbackFutures = this._observeCallbacks(\n      collectionTime,\n      timeoutMillis\n    );\n    const batchCallbackFutures = this._observeBatchCallbacks(\n      collectionTime,\n      timeoutMillis\n    );\n\n    const results = await PromiseAllSettled([\n      ...callbackFutures,\n      ...batchCallbackFutures,\n    ]);\n\n    const rejections = results\n      .filter(isPromiseAllSettledRejectionResult)\n      .map(it => it.reason);\n    return rejections;\n  }\n\n  private _observeCallbacks(observationTime: HrTime, timeoutMillis?: number) {\n    return this._callbacks.map(async ({ callback, instrument }) => {\n      const observableResult = new ObservableResultImpl(\n        instrument._descriptor.name,\n        instrument._descriptor.valueType\n      );\n      let callPromise: Promise<void> = Promise.resolve(\n        callback(observableResult)\n      );\n      if (timeoutMillis != null) {\n        callPromise = callWithTimeout(callPromise, timeoutMillis);\n      }\n      await callPromise;\n      instrument._metricStorages.forEach(metricStorage => {\n        metricStorage.record(observableResult._buffer, observationTime);\n      });\n    });\n  }\n\n  private _observeBatchCallbacks(\n    observationTime: HrTime,\n    timeoutMillis?: number\n  ) {\n    return this._batchCallbacks.map(async ({ callback, instruments }) => {\n      const observableResult = new BatchObservableResultImpl();\n      let callPromise: Promise<void> = Promise.resolve(\n        callback(observableResult)\n      );\n      if (timeoutMillis != null) {\n        callPromise = callWithTimeout(callPromise, timeoutMillis);\n      }\n      await callPromise;\n      instruments.forEach(instrument => {\n        const buffer = observableResult._buffer.get(instrument);\n        if (buffer == null) {\n          return;\n        }\n        instrument._metricStorages.forEach(metricStorage => {\n          metricStorage.record(buffer, observationTime);\n        });\n      });\n    });\n  }\n\n  private _findCallback(\n    callback: ObservableCallback,\n    instrument: ObservableInstrument\n  ) {\n    return this._callbacks.findIndex(record => {\n      return record.callback === callback && record.instrument === instrument;\n    });\n  }\n\n  private _findBatchCallback(\n    callback: BatchObservableCallback,\n    instruments: Set<ObservableInstrument>\n  ) {\n    return this._batchCallbacks.findIndex(record => {\n      return (\n        record.callback === callback &&\n        setEquals(record.instruments, instruments)\n      );\n    });\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Context, HrTime, MetricAttributes } from '@opentelemetry/api';\nimport { WritableMetricStorage } from './WritableMetricStorage';\nimport { Accumulation, Aggregator } from '../aggregator/types';\nimport { InstrumentDescriptor } from '../InstrumentDescriptor';\nimport { AttributesProcessor } from '../view/AttributesProcessor';\nimport { MetricStorage } from './MetricStorage';\nimport { MetricData } from '../export/MetricData';\nimport { DeltaMetricProcessor } from './DeltaMetricProcessor';\nimport { TemporalMetricProcessor } from './TemporalMetricProcessor';\nimport { Maybe } from '../utils';\nimport { MetricCollectorHandle } from './MetricCollector';\n\n/**\n * Internal interface.\n *\n * Stores and aggregates {@link MetricData} for synchronous instruments.\n */\nexport class SyncMetricStorage<T extends Maybe<Accumulation>>\n  extends MetricStorage\n  implements WritableMetricStorage\n{\n  private _deltaMetricStorage: DeltaMetricProcessor<T>;\n  private _temporalMetricStorage: TemporalMetricProcessor<T>;\n\n  constructor(\n    instrumentDescriptor: InstrumentDescriptor,\n    aggregator: Aggregator<T>,\n    private _attributesProcessor: AttributesProcessor,\n    collectorHandles: MetricCollectorHandle[]\n  ) {\n    super(instrumentDescriptor);\n    this._deltaMetricStorage = new DeltaMetricProcessor(aggregator);\n    this._temporalMetricStorage = new TemporalMetricProcessor(\n      aggregator,\n      collectorHandles\n    );\n  }\n\n  record(\n    value: number,\n    attributes: MetricAttributes,\n    context: Context,\n    recordTime: HrTime\n  ) {\n    attributes = this._attributesProcessor.process(attributes, context);\n    this._deltaMetricStorage.record(value, attributes, context, recordTime);\n  }\n\n  /**\n   * Collects the metrics from this storage.\n   *\n   * Note: This is a stateful operation and may reset any interval-related\n   * state for the MetricCollector.\n   */\n  collect(\n    collector: MetricCollectorHandle,\n    collectionTime: HrTime\n  ): Maybe<MetricData> {\n    const accumulations = this._deltaMetricStorage.collect();\n\n    return this._temporalMetricStorage.buildMetrics(\n      collector,\n      this._instrumentDescriptor,\n      accumulations,\n      collectionTime\n    );\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Context, MetricAttributes } from '@opentelemetry/api';\n\n/**\n * The {@link AttributesProcessor} is responsible for customizing which\n * attribute(s) are to be reported as metrics dimension(s) and adding\n * additional dimension(s) from the {@link Context}.\n */\nexport abstract class AttributesProcessor {\n  /**\n   * Process the metric instrument attributes.\n   *\n   * @param incoming The metric instrument attributes.\n   * @param context The active context when the instrument is synchronous.\n   * `undefined` otherwise.\n   */\n  abstract process(\n    incoming: MetricAttributes,\n    context?: Context\n  ): MetricAttributes;\n\n  static Noop() {\n    return NOOP;\n  }\n}\n\nexport class NoopAttributesProcessor extends AttributesProcessor {\n  process(incoming: MetricAttributes, _context?: Context) {\n    return incoming;\n  }\n}\n\n/**\n * {@link AttributesProcessor} that filters by allowed attribute names and drops any names that are not in the\n * allow list.\n */\nexport class FilteringAttributesProcessor extends AttributesProcessor {\n  constructor(private _allowedAttributeNames: string[]) {\n    super();\n  }\n\n  process(incoming: MetricAttributes, _context: Context): MetricAttributes {\n    const filteredAttributes: MetricAttributes = {};\n    Object.keys(incoming)\n      .filter(attributeName =>\n        this._allowedAttributeNames.includes(attributeName)\n      )\n      .forEach(\n        attributeName =>\n          (filteredAttributes[attributeName] = incoming[attributeName])\n      );\n    return filteredAttributes;\n  }\n}\n\nconst NOOP = new NoopAttributesProcessor();\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { HrTime } from '@opentelemetry/api';\nimport { InstrumentationScope } from '@opentelemetry/core';\nimport { MetricCollectOptions } from '../export/MetricProducer';\nimport { ScopeMetrics } from '../export/MetricData';\nimport {\n  createInstrumentDescriptorWithView,\n  InstrumentDescriptor,\n} from '../InstrumentDescriptor';\nimport { Meter } from '../Meter';\nimport { isNotNullish, Maybe } from '../utils';\nimport { AsyncMetricStorage } from './AsyncMetricStorage';\nimport { MeterProviderSharedState } from './MeterProviderSharedState';\nimport { MetricCollectorHandle } from './MetricCollector';\nimport { MetricStorageRegistry } from './MetricStorageRegistry';\nimport { MultiMetricStorage } from './MultiWritableMetricStorage';\nimport { ObservableRegistry } from './ObservableRegistry';\nimport { SyncMetricStorage } from './SyncMetricStorage';\nimport { Accumulation, Aggregator } from '../aggregator/types';\nimport { AttributesProcessor } from '../view/AttributesProcessor';\nimport { MetricStorage } from './MetricStorage';\n\n/**\n * An internal record for shared meter provider states.\n */\nexport class MeterSharedState {\n  metricStorageRegistry = new MetricStorageRegistry();\n  observableRegistry = new ObservableRegistry();\n  meter: Meter;\n\n  constructor(\n    private _meterProviderSharedState: MeterProviderSharedState,\n    private _instrumentationScope: InstrumentationScope\n  ) {\n    this.meter = new Meter(this);\n  }\n\n  registerMetricStorage(descriptor: InstrumentDescriptor) {\n    const storages = this._registerMetricStorage(descriptor, SyncMetricStorage);\n\n    if (storages.length === 1) {\n      return storages[0];\n    }\n    return new MultiMetricStorage(storages);\n  }\n\n  registerAsyncMetricStorage(descriptor: InstrumentDescriptor) {\n    const storages = this._registerMetricStorage(\n      descriptor,\n      AsyncMetricStorage\n    );\n\n    return storages;\n  }\n\n  /**\n   * @param collector opaque handle of {@link MetricCollector} which initiated the collection.\n   * @param collectionTime the HrTime at which the collection was initiated.\n   * @param options options for collection.\n   * @returns the list of metric data collected.\n   */\n  async collect(\n    collector: MetricCollectorHandle,\n    collectionTime: HrTime,\n    options?: MetricCollectOptions\n  ): Promise<ScopeMetricsResult | null> {\n    /**\n     * 1. Call all observable callbacks first.\n     * 2. Collect metric result for the collector.\n     */\n    const errors = await this.observableRegistry.observe(\n      collectionTime,\n      options?.timeoutMillis\n    );\n    const storages = this.metricStorageRegistry.getStorages(collector);\n\n    // prevent more allocations if there are no storages.\n    if (storages.length === 0) {\n      return null;\n    }\n\n    const metricDataList = storages\n      .map(metricStorage => {\n        return metricStorage.collect(collector, collectionTime);\n      })\n      .filter(isNotNullish);\n\n    // skip this scope if no data was collected (storage created, but no data observed)\n    if (metricDataList.length === 0) {\n      return { errors };\n    }\n\n    return {\n      scopeMetrics: {\n        scope: this._instrumentationScope,\n        metrics: metricDataList,\n      },\n      errors,\n    };\n  }\n\n  private _registerMetricStorage<\n    MetricStorageType extends MetricStorageConstructor,\n    R extends InstanceType<MetricStorageType>,\n  >(\n    descriptor: InstrumentDescriptor,\n    MetricStorageType: MetricStorageType\n  ): R[] {\n    const views = this._meterProviderSharedState.viewRegistry.findViews(\n      descriptor,\n      this._instrumentationScope\n    );\n    let storages = views.map(view => {\n      const viewDescriptor = createInstrumentDescriptorWithView(\n        view,\n        descriptor\n      );\n      const compatibleStorage =\n        this.metricStorageRegistry.findOrUpdateCompatibleStorage<R>(\n          viewDescriptor\n        );\n      if (compatibleStorage != null) {\n        return compatibleStorage;\n      }\n      const aggregator = view.aggregation.createAggregator(viewDescriptor);\n      const viewStorage = new MetricStorageType(\n        viewDescriptor,\n        aggregator,\n        view.attributesProcessor,\n        this._meterProviderSharedState.metricCollectors\n      ) as R;\n      this.metricStorageRegistry.register(viewStorage);\n      return viewStorage;\n    });\n\n    // Fallback to the per-collector aggregations if no view is configured for the instrument.\n    if (storages.length === 0) {\n      const perCollectorAggregations =\n        this._meterProviderSharedState.selectAggregations(descriptor.type);\n      const collectorStorages = perCollectorAggregations.map(\n        ([collector, aggregation]) => {\n          const compatibleStorage =\n            this.metricStorageRegistry.findOrUpdateCompatibleCollectorStorage<R>(\n              collector,\n              descriptor\n            );\n          if (compatibleStorage != null) {\n            return compatibleStorage;\n          }\n          const aggregator = aggregation.createAggregator(descriptor);\n          const storage = new MetricStorageType(\n            descriptor,\n            aggregator,\n            AttributesProcessor.Noop(),\n            [collector]\n          ) as R;\n          this.metricStorageRegistry.registerForCollector(collector, storage);\n          return storage;\n        }\n      );\n      storages = storages.concat(collectorStorages);\n    }\n\n    return storages;\n  }\n}\n\ninterface ScopeMetricsResult {\n  scopeMetrics?: ScopeMetrics;\n  errors: unknown[];\n}\n\ninterface MetricStorageConstructor {\n  new (\n    instrumentDescriptor: InstrumentDescriptor,\n    aggregator: Aggregator<Maybe<Accumulation>>,\n    attributesProcessor: AttributesProcessor,\n    collectors: MetricCollectorHandle[]\n  ): MetricStorage;\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { InstrumentationScope } from '@opentelemetry/core';\nimport { IResource } from '@opentelemetry/resources';\nimport { Aggregation, InstrumentType } from '..';\nimport { instrumentationScopeId } from '../utils';\nimport { ViewRegistry } from '../view/ViewRegistry';\nimport { MeterSharedState } from './MeterSharedState';\nimport { MetricCollector, MetricCollectorHandle } from './MetricCollector';\n\n/**\n * An internal record for shared meter provider states.\n */\nexport class MeterProviderSharedState {\n  viewRegistry = new ViewRegistry();\n\n  metricCollectors: MetricCollector[] = [];\n\n  meterSharedStates: Map<string, MeterSharedState> = new Map();\n\n  constructor(public resource: IResource) {}\n\n  getMeterSharedState(instrumentationScope: InstrumentationScope) {\n    const id = instrumentationScopeId(instrumentationScope);\n    let meterSharedState = this.meterSharedStates.get(id);\n    if (meterSharedState == null) {\n      meterSharedState = new MeterSharedState(this, instrumentationScope);\n      this.meterSharedStates.set(id, meterSharedState);\n    }\n    return meterSharedState;\n  }\n\n  selectAggregations(instrumentType: InstrumentType) {\n    const result: [MetricCollectorHandle, Aggregation][] = [];\n    for (const collector of this.metricCollectors) {\n      result.push([collector, collector.selectAggregation(instrumentType)]);\n    }\n    return result;\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { millisToHrTime } from '@opentelemetry/core';\nimport { AggregationTemporalitySelector } from '../export/AggregationSelector';\nimport { CollectionResult, ScopeMetrics } from '../export/MetricData';\nimport { MetricProducer, MetricCollectOptions } from '../export/MetricProducer';\nimport { MetricReader } from '../export/MetricReader';\nimport { InstrumentType } from '../InstrumentDescriptor';\nimport { ForceFlushOptions, ShutdownOptions } from '../types';\nimport { MeterProviderSharedState } from './MeterProviderSharedState';\n\n/**\n * An internal opaque interface that the MetricReader receives as\n * MetricProducer. It acts as the storage key to the internal metric stream\n * state for each MetricReader.\n */\nexport class MetricCollector implements MetricProducer {\n  constructor(\n    private _sharedState: MeterProviderSharedState,\n    private _metricReader: MetricReader\n  ) {}\n\n  async collect(options?: MetricCollectOptions): Promise<CollectionResult> {\n    const collectionTime = millisToHrTime(Date.now());\n    const scopeMetrics: ScopeMetrics[] = [];\n    const errors: unknown[] = [];\n\n    const meterCollectionPromises = Array.from(\n      this._sharedState.meterSharedStates.values()\n    ).map(async meterSharedState => {\n      const current = await meterSharedState.collect(\n        this,\n        collectionTime,\n        options\n      );\n\n      // only add scope metrics if available\n      if (current?.scopeMetrics != null) {\n        scopeMetrics.push(current.scopeMetrics);\n      }\n\n      // only add errors if available\n      if (current?.errors != null) {\n        errors.push(...current.errors);\n      }\n    });\n    await Promise.all(meterCollectionPromises);\n\n    return {\n      resourceMetrics: {\n        resource: this._sharedState.resource,\n        scopeMetrics: scopeMetrics,\n      },\n      errors: errors,\n    };\n  }\n\n  /**\n   * Delegates for MetricReader.forceFlush.\n   */\n  async forceFlush(options?: ForceFlushOptions): Promise<void> {\n    await this._metricReader.forceFlush(options);\n  }\n\n  /**\n   * Delegates for MetricReader.shutdown.\n   */\n  async shutdown(options?: ShutdownOptions): Promise<void> {\n    await this._metricReader.shutdown(options);\n  }\n\n  selectAggregationTemporality(instrumentType: InstrumentType) {\n    return this._metricReader.selectAggregationTemporality(instrumentType);\n  }\n\n  selectAggregation(instrumentType: InstrumentType) {\n    return this._metricReader.selectAggregation(instrumentType);\n  }\n}\n\n/**\n * An internal interface for MetricCollector. Exposes the necessary\n * information for metric collection.\n */\nexport interface MetricCollectorHandle {\n  selectAggregationTemporality: AggregationTemporalitySelector;\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  diag,\n  MeterProvider as IMeterProvider,\n  Meter as IMeter,\n  MeterOptions,\n  createNoopMeter,\n} from '@opentelemetry/api';\nimport { IResource, Resource } from '@opentelemetry/resources';\nimport { MetricReader } from './export/MetricReader';\nimport { MeterProviderSharedState } from './state/MeterProviderSharedState';\nimport { MetricCollector } from './state/MetricCollector';\nimport { ForceFlushOptions, ShutdownOptions } from './types';\nimport { View } from './view/View';\n\n/**\n * MeterProviderOptions provides an interface for configuring a MeterProvider.\n */\nexport interface MeterProviderOptions {\n  /** Resource associated with metric telemetry  */\n  resource?: IResource;\n  views?: View[];\n  readers?: MetricReader[];\n}\n\n/**\n * This class implements the {@link MeterProvider} interface.\n */\nexport class MeterProvider implements IMeterProvider {\n  private _sharedState: MeterProviderSharedState;\n  private _shutdown = false;\n\n  constructor(options?: MeterProviderOptions) {\n    const resource = Resource.default().merge(\n      options?.resource ?? Resource.empty()\n    );\n    this._sharedState = new MeterProviderSharedState(resource);\n    if (options?.views != null && options.views.length > 0) {\n      for (const view of options.views) {\n        this._sharedState.viewRegistry.addView(view);\n      }\n    }\n\n    if (options?.readers != null && options.readers.length > 0) {\n      for (const metricReader of options.readers) {\n        this.addMetricReader(metricReader);\n      }\n    }\n  }\n\n  /**\n   * Get a meter with the configuration of the MeterProvider.\n   */\n  getMeter(name: string, version = '', options: MeterOptions = {}): IMeter {\n    // https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/metrics/sdk.md#meter-creation\n    if (this._shutdown) {\n      diag.warn('A shutdown MeterProvider cannot provide a Meter');\n      return createNoopMeter();\n    }\n\n    return this._sharedState.getMeterSharedState({\n      name,\n      version,\n      schemaUrl: options.schemaUrl,\n    }).meter;\n  }\n\n  /**\n   * Register a {@link MetricReader} to the meter provider. After the\n   * registration, the MetricReader can start metrics collection.\n   *\n   * <p> NOTE: {@link MetricReader} instances MUST be added before creating any instruments.\n   * A {@link MetricReader} instance registered later may receive no or incomplete metric data.\n   *\n   * @param metricReader the metric reader to be registered.\n   *\n   * @deprecated This method will be removed in SDK 2.0. Please use\n   * {@link MeterProviderOptions.readers} via the {@link MeterProvider} constructor instead\n   */\n  addMetricReader(metricReader: MetricReader) {\n    const collector = new MetricCollector(this._sharedState, metricReader);\n    metricReader.setMetricProducer(collector);\n    this._sharedState.metricCollectors.push(collector);\n  }\n\n  /**\n   * Flush all buffered data and shut down the MeterProvider and all registered\n   * MetricReaders.\n   *\n   * Returns a promise which is resolved when all flushes are complete.\n   */\n  async shutdown(options?: ShutdownOptions): Promise<void> {\n    if (this._shutdown) {\n      diag.warn('shutdown may only be called once per MeterProvider');\n      return;\n    }\n\n    this._shutdown = true;\n\n    await Promise.all(\n      this._sharedState.metricCollectors.map(collector => {\n        return collector.shutdown(options);\n      })\n    );\n  }\n\n  /**\n   * Notifies all registered MetricReaders to flush any buffered data.\n   *\n   * Returns a promise which is resolved when all flushes are complete.\n   */\n  async forceFlush(options?: ForceFlushOptions): Promise<void> {\n    // do not flush after shutdown\n    if (this._shutdown) {\n      diag.warn('invalid attempt to force flush after MeterProvider shutdown');\n      return;\n    }\n\n    await Promise.all(\n      this._sharedState.metricCollectors.map(collector => {\n        return collector.forceFlush(options);\n      })\n    );\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// https://tc39.es/proposal-regex-escaping\n// escape ^ $ \\ .  + ? ( ) [ ] { } |\n// do not need to escape * as we interpret it as wildcard\nconst ESCAPE = /[\\^$\\\\.+?()[\\]{}|]/g;\n\nexport interface Predicate {\n  match(str: string): boolean;\n}\n\n/**\n * Wildcard pattern predicate, supports patterns like `*`, `foo*`, `*bar`.\n */\nexport class PatternPredicate implements Predicate {\n  private _matchAll: boolean;\n  private _regexp: RegExp;\n\n  constructor(pattern: string) {\n    if (pattern === '*') {\n      this._matchAll = true;\n      this._regexp = /.*/;\n    } else {\n      this._matchAll = false;\n      this._regexp = new RegExp(PatternPredicate.escapePattern(pattern));\n    }\n  }\n\n  match(str: string): boolean {\n    if (this._matchAll) {\n      return true;\n    }\n\n    return this._regexp.test(str);\n  }\n\n  static escapePattern(pattern: string): string {\n    return `^${pattern.replace(ESCAPE, '\\\\$&').replace('*', '.*')}$`;\n  }\n\n  static hasWildcard(pattern: string): boolean {\n    return pattern.includes('*');\n  }\n}\n\nexport class ExactPredicate implements Predicate {\n  private _matchAll: boolean;\n  private _pattern?: string;\n\n  constructor(pattern?: string) {\n    this._matchAll = pattern === undefined;\n    this._pattern = pattern;\n  }\n\n  match(str: string): boolean {\n    if (this._matchAll) {\n      return true;\n    }\n    if (str === this._pattern) {\n      return true;\n    }\n    return false;\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { InstrumentType } from '../InstrumentDescriptor';\nimport { ExactPredicate, PatternPredicate, Predicate } from './Predicate';\n\nexport interface InstrumentSelectorCriteria {\n  name?: string;\n  type?: InstrumentType;\n  unit?: string;\n}\n\nexport class InstrumentSelector {\n  private _nameFilter: Predicate;\n  private _type?: InstrumentType;\n  private _unitFilter: Predicate;\n\n  constructor(criteria?: InstrumentSelectorCriteria) {\n    this._nameFilter = new PatternPredicate(criteria?.name ?? '*');\n    this._type = criteria?.type;\n    this._unitFilter = new ExactPredicate(criteria?.unit);\n  }\n\n  getType() {\n    return this._type;\n  }\n\n  getNameFilter() {\n    return this._nameFilter;\n  }\n\n  getUnitFilter() {\n    return this._unitFilter;\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ExactPredicate, Predicate } from './Predicate';\n\nexport interface MeterSelectorCriteria {\n  name?: string;\n  version?: string;\n  schemaUrl?: string;\n}\n\nexport class MeterSelector {\n  private _nameFilter: Predicate;\n  private _versionFilter: Predicate;\n  private _schemaUrlFilter: Predicate;\n\n  constructor(criteria?: MeterSelectorCriteria) {\n    this._nameFilter = new ExactPredicate(criteria?.name);\n    this._versionFilter = new ExactPredicate(criteria?.version);\n    this._schemaUrlFilter = new ExactPredicate(criteria?.schemaUrl);\n  }\n\n  getNameFilter() {\n    return this._nameFilter;\n  }\n\n  /**\n   * TODO: semver filter? no spec yet.\n   */\n  getVersionFilter() {\n    return this._versionFilter;\n  }\n\n  getSchemaUrlFilter() {\n    return this._schemaUrlFilter;\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PatternPredicate } from './Predicate';\nimport {\n  AttributesProcessor,\n  FilteringAttributesProcessor,\n} from './AttributesProcessor';\nimport { InstrumentSelector } from './InstrumentSelector';\nimport { MeterSelector } from './MeterSelector';\nimport { Aggregation } from './Aggregation';\nimport { InstrumentType } from '../InstrumentDescriptor';\n\nexport type ViewOptions = {\n  /**\n   *  Alters the metric stream:\n   *  This will be used as the name of the metrics stream.\n   *  If not provided, the original Instrument name will be used.\n   */\n  name?: string;\n  /**\n   * Alters the metric stream:\n   * This will be used as the description of the metrics stream.\n   * If not provided, the original Instrument description will be used by default.\n   *\n   * @example <caption>changes the description of all selected instruments to 'sample description'</caption>\n   * description: 'sample description'\n   */\n  description?: string;\n  /**\n   * Alters the metric stream:\n   * If provided, the attributes that are not in the list will be ignored.\n   * If not provided, all attribute keys will be used by default.\n   *\n   * @example <caption>drops all attributes with top-level keys except for 'myAttr' and 'myOtherAttr'</caption>\n   * attributeKeys: ['myAttr', 'myOtherAttr']\n   * @example <caption>drops all attributes</caption>\n   * attributeKeys: []\n   */\n  attributeKeys?: string[];\n  /**\n   * Alters the metric stream:\n   * Alters the {@link Aggregation} of the metric stream.\n   *\n   * @example <caption>changes the aggregation of the selected instrument(s) to ExplicitBucketHistogramAggregation</caption>\n   * aggregation: new ExplicitBucketHistogramAggregation([1, 10, 100])\n   * @example <caption>changes the aggregation of the selected instrument(s) to LastValueAggregation</caption>\n   * aggregation: new LastValueAggregation()\n   */\n  aggregation?: Aggregation;\n  /**\n   * Instrument selection criteria:\n   * The original type of the Instrument(s).\n   *\n   * @example <caption>selects all counters</caption>\n   * instrumentType: InstrumentType.COUNTER\n   * @example <caption>selects all histograms</caption>\n   * instrumentType: InstrumentType.HISTOGRAM\n   */\n  instrumentType?: InstrumentType;\n  /**\n   * Instrument selection criteria:\n   * Original name of the Instrument(s) with wildcard support.\n   *\n   * @example <caption>select all instruments</caption>\n   * instrumentName: '*'\n   * @example <caption>select all instruments starting with 'my.instruments.'</caption>\n   * instrumentName: 'my.instruments.*'\n   * @example <caption>select all instruments named 'my.instrument.requests' exactly</caption>\n   * instrumentName: 'my.instruments.requests'\n   */\n  instrumentName?: string;\n  /**\n   * Instrument selection criteria:\n   * The unit of the Instrument(s).\n   *\n   * @example <caption>select all instruments with unit 'ms'</caption>\n   * instrumentUnit: 'ms'\n   */\n  instrumentUnit?: string;\n  /**\n   * Instrument selection criteria:\n   * The name of the Meter. No wildcard support, name must match the meter exactly.\n   *\n   * @example <caption>select all meters named 'example.component.app' exactly</caption>\n   * meterName: 'example.component.app'\n   */\n  meterName?: string;\n  /**\n   * Instrument selection criteria:\n   * The version of the Meter. No wildcard support, version must match exactly.\n   *\n   * @example\n   * meterVersion: '1.0.1'\n   */\n  meterVersion?: string;\n  /**\n   * Instrument selection criteria:\n   * The schema URL of the Meter. No wildcard support, schema URL must match exactly.\n   *\n   * @example <caption>Select all meters with schema URL 'https://example.com/schema' exactly.</caption>\n   * meterSchemaUrl: 'https://example.com/schema'\n   */\n  meterSchemaUrl?: string;\n};\n\nfunction isSelectorNotProvided(options: ViewOptions): boolean {\n  return (\n    options.instrumentName == null &&\n    options.instrumentType == null &&\n    options.instrumentUnit == null &&\n    options.meterName == null &&\n    options.meterVersion == null &&\n    options.meterSchemaUrl == null\n  );\n}\n\n/**\n * Can be passed to a {@link MeterProvider} to select instruments and alter their metric stream.\n */\nexport class View {\n  readonly name?: string;\n  readonly description?: string;\n  readonly aggregation: Aggregation;\n  readonly attributesProcessor: AttributesProcessor;\n  readonly instrumentSelector: InstrumentSelector;\n  readonly meterSelector: MeterSelector;\n\n  /**\n   * Create a new {@link View} instance.\n   *\n   * Parameters can be categorized as two types:\n   *  Instrument selection criteria: Used to describe the instrument(s) this view will be applied to.\n   *  Will be treated as additive (the Instrument has to meet all the provided criteria to be selected).\n   *\n   *  Metric stream altering: Alter the metric stream of instruments selected by instrument selection criteria.\n   *\n   * @param viewOptions {@link ViewOptions} for altering the metric stream and instrument selection.\n   * @param viewOptions.name\n   * Alters the metric stream:\n   *  This will be used as the name of the metrics stream.\n   *  If not provided, the original Instrument name will be used.\n   * @param viewOptions.description\n   * Alters the metric stream:\n   *  This will be used as the description of the metrics stream.\n   *  If not provided, the original Instrument description will be used by default.\n   * @param viewOptions.attributeKeys\n   * Alters the metric stream:\n   *  If provided, the attributes that are not in the list will be ignored.\n   *  If not provided, all attribute keys will be used by default.\n   * @param viewOptions.aggregation\n   * Alters the metric stream:\n   *  Alters the {@link Aggregation} of the metric stream.\n   * @param viewOptions.instrumentName\n   * Instrument selection criteria:\n   *  Original name of the Instrument(s) with wildcard support.\n   * @param viewOptions.instrumentType\n   * Instrument selection criteria:\n   *  The original type of the Instrument(s).\n   * @param viewOptions.instrumentUnit\n   * Instrument selection criteria:\n   *  The unit of the Instrument(s).\n   * @param viewOptions.meterName\n   * Instrument selection criteria:\n   *  The name of the Meter. No wildcard support, name must match the meter exactly.\n   * @param viewOptions.meterVersion\n   * Instrument selection criteria:\n   *  The version of the Meter. No wildcard support, version must match exactly.\n   * @param viewOptions.meterSchemaUrl\n   * Instrument selection criteria:\n   *  The schema URL of the Meter. No wildcard support, schema URL must match exactly.\n   *\n   * @example\n   * // Create a view that changes the Instrument 'my.instrument' to use to an\n   * // ExplicitBucketHistogramAggregation with the boundaries [20, 30, 40]\n   * new View({\n   *   aggregation: new ExplicitBucketHistogramAggregation([20, 30, 40]),\n   *   instrumentName: 'my.instrument'\n   * })\n   */\n  constructor(viewOptions: ViewOptions) {\n    // If no criteria is provided, the SDK SHOULD treat it as an error.\n    // It is recommended that the SDK implementations fail fast.\n    if (isSelectorNotProvided(viewOptions)) {\n      throw new Error('Cannot create view with no selector arguments supplied');\n    }\n\n    // the SDK SHOULD NOT allow Views with a specified name to be declared with instrument selectors that\n    // may select more than one instrument (e.g. wild card instrument name) in the same Meter.\n    if (\n      viewOptions.name != null &&\n      (viewOptions?.instrumentName == null ||\n        PatternPredicate.hasWildcard(viewOptions.instrumentName))\n    ) {\n      throw new Error(\n        'Views with a specified name must be declared with an instrument selector that selects at most one instrument per meter.'\n      );\n    }\n\n    // Create AttributesProcessor if attributeKeys are defined set.\n    if (viewOptions.attributeKeys != null) {\n      this.attributesProcessor = new FilteringAttributesProcessor(\n        viewOptions.attributeKeys\n      );\n    } else {\n      this.attributesProcessor = AttributesProcessor.Noop();\n    }\n\n    this.name = viewOptions.name;\n    this.description = viewOptions.description;\n    this.aggregation = viewOptions.aggregation ?? Aggregation.Default();\n    this.instrumentSelector = new InstrumentSelector({\n      name: viewOptions.instrumentName,\n      type: viewOptions.instrumentType,\n      unit: viewOptions.instrumentUnit,\n    });\n    this.meterSelector = new MeterSelector({\n      name: viewOptions.meterName,\n      version: viewOptions.meterVersion,\n      schemaUrl: viewOptions.meterSchemaUrl,\n    });\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { MetricDescriptor } from './export/MetricData';\n\nexport {\n  Sum,\n  LastValue,\n  Histogram,\n  ExponentialHistogram,\n} from './aggregator/types';\n\nexport {\n  AggregationSelector,\n  AggregationTemporalitySelector,\n} from './export/AggregationSelector';\n\nexport { AggregationTemporality } from './export/AggregationTemporality';\n\nexport {\n  DataPoint,\n  DataPointType,\n  SumMetricData,\n  GaugeMetricData,\n  HistogramMetricData,\n  ExponentialHistogramMetricData,\n  ResourceMetrics,\n  ScopeMetrics,\n  MetricData,\n  MetricDescriptor,\n  CollectionResult,\n} from './export/MetricData';\n\nexport { PushMetricExporter } from './export/MetricExporter';\n\nexport { MetricReader, MetricReaderOptions } from './export/MetricReader';\n\nexport {\n  PeriodicExportingMetricReader,\n  PeriodicExportingMetricReaderOptions,\n} from './export/PeriodicExportingMetricReader';\n\nexport { InMemoryMetricExporter } from './export/InMemoryMetricExporter';\n\nexport { ConsoleMetricExporter } from './export/ConsoleMetricExporter';\n\nexport { MetricCollectOptions, MetricProducer } from './export/MetricProducer';\n\nexport { InstrumentType } from './InstrumentDescriptor';\n/**\n * @deprecated Use {@link MetricDescriptor} instead.\n */\nexport type InstrumentDescriptor = MetricDescriptor;\n\nexport { MeterProvider, MeterProviderOptions } from './MeterProvider';\n\nexport {\n  DefaultAggregation,\n  ExplicitBucketHistogramAggregation,\n  ExponentialHistogramAggregation,\n  DropAggregation,\n  HistogramAggregation,\n  LastValueAggregation,\n  SumAggregation,\n  Aggregation,\n} from './view/Aggregation';\n\nexport { View, ViewOptions } from './view/View';\n\nexport { TimeoutError } from './utils';\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport type { OtlpEncodingOptions } from '../common/types';\nimport { ValueType } from '@opentelemetry/api';\nimport {\n  AggregationTemporality,\n  DataPoint,\n  DataPointType,\n  ExponentialHistogram,\n  Histogram,\n  MetricData,\n  ResourceMetrics,\n  ScopeMetrics,\n} from '@opentelemetry/sdk-metrics';\nimport {\n  EAggregationTemporality,\n  IExponentialHistogramDataPoint,\n  IHistogramDataPoint,\n  IMetric,\n  INumberDataPoint,\n  IResourceMetrics,\n  IScopeMetrics,\n} from './types';\nimport { Encoder, getOtlpEncoder } from '../common';\nimport { createInstrumentationScope, toAttributes } from '../common/internal';\nimport { createResource } from '../resource/internal';\n\nexport function toResourceMetrics(\n  resourceMetrics: ResourceMetrics,\n  options?: OtlpEncodingOptions\n): IResourceMetrics {\n  const encoder = getOtlpEncoder(options);\n  return {\n    resource: createResource(resourceMetrics.resource),\n    schemaUrl: undefined,\n    scopeMetrics: toScopeMetrics(resourceMetrics.scopeMetrics, encoder),\n  };\n}\n\nexport function toScopeMetrics(\n  scopeMetrics: ScopeMetrics[],\n  encoder: Encoder\n): IScopeMetrics[] {\n  return Array.from(\n    scopeMetrics.map(metrics => ({\n      scope: createInstrumentationScope(metrics.scope),\n      metrics: metrics.metrics.map(metricData => toMetric(metricData, encoder)),\n      schemaUrl: metrics.scope.schemaUrl,\n    }))\n  );\n}\n\nexport function toMetric(metricData: MetricData, encoder: Encoder): IMetric {\n  const out: IMetric = {\n    name: metricData.descriptor.name,\n    description: metricData.descriptor.description,\n    unit: metricData.descriptor.unit,\n  };\n\n  const aggregationTemporality = toAggregationTemporality(\n    metricData.aggregationTemporality\n  );\n\n  switch (metricData.dataPointType) {\n    case DataPointType.SUM:\n      out.sum = {\n        aggregationTemporality,\n        isMonotonic: metricData.isMonotonic,\n        dataPoints: toSingularDataPoints(metricData, encoder),\n      };\n      break;\n    case DataPointType.GAUGE:\n      out.gauge = {\n        dataPoints: toSingularDataPoints(metricData, encoder),\n      };\n      break;\n    case DataPointType.HISTOGRAM:\n      out.histogram = {\n        aggregationTemporality,\n        dataPoints: toHistogramDataPoints(metricData, encoder),\n      };\n      break;\n    case DataPointType.EXPONENTIAL_HISTOGRAM:\n      out.exponentialHistogram = {\n        aggregationTemporality,\n        dataPoints: toExponentialHistogramDataPoints(metricData, encoder),\n      };\n      break;\n  }\n\n  return out;\n}\n\nfunction toSingularDataPoint(\n  dataPoint:\n    | DataPoint<number>\n    | DataPoint<Histogram>\n    | DataPoint<ExponentialHistogram>,\n  valueType: ValueType,\n  encoder: Encoder\n) {\n  const out: INumberDataPoint = {\n    attributes: toAttributes(dataPoint.attributes),\n    startTimeUnixNano: encoder.encodeHrTime(dataPoint.startTime),\n    timeUnixNano: encoder.encodeHrTime(dataPoint.endTime),\n  };\n\n  switch (valueType) {\n    case ValueType.INT:\n      out.asInt = dataPoint.value as number;\n      break;\n    case ValueType.DOUBLE:\n      out.asDouble = dataPoint.value as number;\n      break;\n  }\n\n  return out;\n}\n\nfunction toSingularDataPoints(\n  metricData: MetricData,\n  encoder: Encoder\n): INumberDataPoint[] {\n  return metricData.dataPoints.map(dataPoint => {\n    return toSingularDataPoint(\n      dataPoint,\n      metricData.descriptor.valueType,\n      encoder\n    );\n  });\n}\n\nfunction toHistogramDataPoints(\n  metricData: MetricData,\n  encoder: Encoder\n): IHistogramDataPoint[] {\n  return metricData.dataPoints.map(dataPoint => {\n    const histogram = dataPoint.value as Histogram;\n    return {\n      attributes: toAttributes(dataPoint.attributes),\n      bucketCounts: histogram.buckets.counts,\n      explicitBounds: histogram.buckets.boundaries,\n      count: histogram.count,\n      sum: histogram.sum,\n      min: histogram.min,\n      max: histogram.max,\n      startTimeUnixNano: encoder.encodeHrTime(dataPoint.startTime),\n      timeUnixNano: encoder.encodeHrTime(dataPoint.endTime),\n    };\n  });\n}\n\nfunction toExponentialHistogramDataPoints(\n  metricData: MetricData,\n  encoder: Encoder\n): IExponentialHistogramDataPoint[] {\n  return metricData.dataPoints.map(dataPoint => {\n    const histogram = dataPoint.value as ExponentialHistogram;\n    return {\n      attributes: toAttributes(dataPoint.attributes),\n      count: histogram.count,\n      min: histogram.min,\n      max: histogram.max,\n      sum: histogram.sum,\n      positive: {\n        offset: histogram.positive.offset,\n        bucketCounts: histogram.positive.bucketCounts,\n      },\n      negative: {\n        offset: histogram.negative.offset,\n        bucketCounts: histogram.negative.bucketCounts,\n      },\n      scale: histogram.scale,\n      zeroCount: histogram.zeroCount,\n      startTimeUnixNano: encoder.encodeHrTime(dataPoint.startTime),\n      timeUnixNano: encoder.encodeHrTime(dataPoint.endTime),\n    };\n  });\n}\n\nfunction toAggregationTemporality(\n  temporality: AggregationTemporality\n): EAggregationTemporality {\n  switch (temporality) {\n    case AggregationTemporality.DELTA:\n      return EAggregationTemporality.AGGREGATION_TEMPORALITY_DELTA;\n    case AggregationTemporality.CUMULATIVE:\n      return EAggregationTemporality.AGGREGATION_TEMPORALITY_CUMULATIVE;\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport type { ResourceMetrics } from '@opentelemetry/sdk-metrics';\nimport type { IExportMetricsServiceRequest } from './types';\nimport type { OtlpEncodingOptions } from '../common/types';\nimport { toResourceMetrics } from './internal';\n\nexport function createExportMetricsServiceRequest(\n  resourceMetrics: ResourceMetrics[],\n  options?: OtlpEncodingOptions\n): IExportMetricsServiceRequest {\n  return {\n    resourceMetrics: resourceMetrics.map(metrics =>\n      toResourceMetrics(metrics, options)\n    ),\n  };\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { ReadableLogRecord } from '@opentelemetry/sdk-logs';\nimport {\n  ESeverityNumber,\n  IExportLogsServiceRequest,\n  ILogRecord,\n  IResourceLogs,\n} from './types';\nimport { IResource } from '@opentelemetry/resources';\nimport { Encoder, getOtlpEncoder } from '../common';\nimport {\n  createInstrumentationScope,\n  toAnyValue,\n  toKeyValue,\n} from '../common/internal';\nimport { SeverityNumber } from '@opentelemetry/api-logs';\nimport { OtlpEncodingOptions, IKeyValue } from '../common/types';\nimport { LogAttributes } from '@opentelemetry/api-logs';\nimport { createResource } from '../resource/internal';\n\nexport function createExportLogsServiceRequest(\n  logRecords: ReadableLogRecord[],\n  options?: OtlpEncodingOptions\n): IExportLogsServiceRequest {\n  const encoder = getOtlpEncoder(options);\n  return {\n    resourceLogs: logRecordsToResourceLogs(logRecords, encoder),\n  };\n}\n\nfunction createResourceMap(\n  logRecords: ReadableLogRecord[]\n): Map<IResource, Map<string, ReadableLogRecord[]>> {\n  const resourceMap: Map<\n    IResource,\n    Map<string, ReadableLogRecord[]>\n  > = new Map();\n\n  for (const record of logRecords) {\n    const {\n      resource,\n      instrumentationScope: { name, version = '', schemaUrl = '' },\n    } = record;\n\n    let ismMap = resourceMap.get(resource);\n    if (!ismMap) {\n      ismMap = new Map();\n      resourceMap.set(resource, ismMap);\n    }\n\n    const ismKey = `${name}@${version}:${schemaUrl}`;\n    let records = ismMap.get(ismKey);\n    if (!records) {\n      records = [];\n      ismMap.set(ismKey, records);\n    }\n    records.push(record);\n  }\n  return resourceMap;\n}\n\nfunction logRecordsToResourceLogs(\n  logRecords: ReadableLogRecord[],\n  encoder: Encoder\n): IResourceLogs[] {\n  const resourceMap = createResourceMap(logRecords);\n  return Array.from(resourceMap, ([resource, ismMap]) => ({\n    resource: createResource(resource),\n    scopeLogs: Array.from(ismMap, ([, scopeLogs]) => {\n      return {\n        scope: createInstrumentationScope(scopeLogs[0].instrumentationScope),\n        logRecords: scopeLogs.map(log => toLogRecord(log, encoder)),\n        schemaUrl: scopeLogs[0].instrumentationScope.schemaUrl,\n      };\n    }),\n    schemaUrl: undefined,\n  }));\n}\n\nfunction toLogRecord(log: ReadableLogRecord, encoder: Encoder): ILogRecord {\n  return {\n    timeUnixNano: encoder.encodeHrTime(log.hrTime),\n    observedTimeUnixNano: encoder.encodeHrTime(log.hrTimeObserved),\n    severityNumber: toSeverityNumber(log.severityNumber),\n    severityText: log.severityText,\n    body: toAnyValue(log.body),\n    attributes: toLogAttributes(log.attributes),\n    droppedAttributesCount: log.droppedAttributesCount,\n    flags: log.spanContext?.traceFlags,\n    traceId: encoder.encodeOptionalSpanContext(log.spanContext?.traceId),\n    spanId: encoder.encodeOptionalSpanContext(log.spanContext?.spanId),\n  };\n}\n\nfunction toSeverityNumber(\n  severityNumber: SeverityNumber | undefined\n): ESeverityNumber | undefined {\n  return severityNumber as number | undefined as ESeverityNumber | undefined;\n}\n\nexport function toLogAttributes(attributes: LogAttributes): IKeyValue[] {\n  return Object.keys(attributes).map(key => toKeyValue(key, attributes[key]));\n}\n", "\"use strict\";\r\nmodule.exports = asPromise;\r\n\r\n/**\r\n * Callback as used by {@link util.asPromise}.\r\n * @typedef asPromiseCallback\r\n * @type {function}\r\n * @param {Error|null} error Error, if any\r\n * @param {...*} params Additional arguments\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Returns a promise from a node-style callback function.\r\n * @memberof util\r\n * @param {asPromiseCallback} fn Function to call\r\n * @param {*} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\r\nfunction asPromise(fn, ctx/*, varargs */) {\r\n    var params  = new Array(arguments.length - 1),\r\n        offset  = 0,\r\n        index   = 2,\r\n        pending = true;\r\n    while (index < arguments.length)\r\n        params[offset++] = arguments[index++];\r\n    return new Promise(function executor(resolve, reject) {\r\n        params[offset] = function callback(err/*, varargs */) {\r\n            if (pending) {\r\n                pending = false;\r\n                if (err)\r\n                    reject(err);\r\n                else {\r\n                    var params = new Array(arguments.length - 1),\r\n                        offset = 0;\r\n                    while (offset < params.length)\r\n                        params[offset++] = arguments[offset];\r\n                    resolve.apply(null, params);\r\n                }\r\n            }\r\n        };\r\n        try {\r\n            fn.apply(ctx || null, params);\r\n        } catch (err) {\r\n            if (pending) {\r\n                pending = false;\r\n                reject(err);\r\n            }\r\n        }\r\n    });\r\n}\r\n", "\"use strict\";\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\r\nbase64.length = function length(string) {\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = new Array(64);\r\n\r\n// Base64 decoding table\r\nvar s64 = new Array(123);\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) {\r\n    var parts = null,\r\n        chunk = [];\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) {\r\n        var b = buffer[start++];\r\n        switch (j) {\r\n            case 0:\r\n                chunk[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                chunk[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                chunk[i++] = b64[t | b >> 6];\r\n                chunk[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        }\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (j) {\r\n        chunk[i++] = b64[t];\r\n        chunk[i++] = 61;\r\n        if (j === 1)\r\n            chunk[i++] = 61;\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) {\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) {\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n\r\n/**\r\n * Tests if the specified string appears to be base64 encoded.\r\n * @param {string} string String to test\r\n * @returns {boolean} `true` if probably base64 encoded, otherwise false\r\n */\r\nbase64.test = function test(string) {\r\n    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);\r\n};\r\n", "\"use strict\";\r\nmodule.exports = EventEmitter;\r\n\r\n/**\r\n * Constructs a new event emitter instance.\r\n * @classdesc A minimal event emitter.\r\n * @memberof util\r\n * @constructor\r\n */\r\nfunction EventEmitter() {\r\n\r\n    /**\r\n     * Registered listeners.\r\n     * @type {Object.<string,*>}\r\n     * @private\r\n     */\r\n    this._listeners = {};\r\n}\r\n\r\n/**\r\n * Registers an event listener.\r\n * @param {string} evt Event name\r\n * @param {function} fn Listener\r\n * @param {*} [ctx] Listener context\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.on = function on(evt, fn, ctx) {\r\n    (this._listeners[evt] || (this._listeners[evt] = [])).push({\r\n        fn  : fn,\r\n        ctx : ctx || this\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes an event listener or any matching listeners if arguments are omitted.\r\n * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.off = function off(evt, fn) {\r\n    if (evt === undefined)\r\n        this._listeners = {};\r\n    else {\r\n        if (fn === undefined)\r\n            this._listeners[evt] = [];\r\n        else {\r\n            var listeners = this._listeners[evt];\r\n            for (var i = 0; i < listeners.length;)\r\n                if (listeners[i].fn === fn)\r\n                    listeners.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Emits an event by calling its listeners with the specified arguments.\r\n * @param {string} evt Event name\r\n * @param {...*} args Arguments\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.emit = function emit(evt) {\r\n    var listeners = this._listeners[evt];\r\n    if (listeners) {\r\n        var args = [],\r\n            i = 1;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        for (i = 0; i < listeners.length;)\r\n            listeners[i].fn.apply(listeners[i++].ctx, args);\r\n    }\r\n    return this;\r\n};\r\n", "\"use strict\";\r\n\r\nmodule.exports = factory(factory);\r\n\r\n/**\r\n * Reads / writes floats / doubles from / to buffers.\r\n * @name util.float\r\n * @namespace\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using little endian byte order.\r\n * @name util.float.writeFloatLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using big endian byte order.\r\n * @name util.float.writeFloatBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using little endian byte order.\r\n * @name util.float.readFloatLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using big endian byte order.\r\n * @name util.float.readFloatBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using little endian byte order.\r\n * @name util.float.writeDoubleLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using big endian byte order.\r\n * @name util.float.writeDoubleBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using little endian byte order.\r\n * @name util.float.readDoubleLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using big endian byte order.\r\n * @name util.float.readDoubleBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n// Factory function for the purpose of node-based testing in modified global environments\r\nfunction factory(exports) {\r\n\r\n    // float: typed array\r\n    if (typeof Float32Array !== \"undefined\") (function() {\r\n\r\n        var f32 = new Float32Array([ -0 ]),\r\n            f8b = new Uint8Array(f32.buffer),\r\n            le  = f8b[3] === 128;\r\n\r\n        function writeFloat_f32_cpy(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n        }\r\n\r\n        function writeFloat_f32_rev(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[3];\r\n            buf[pos + 1] = f8b[2];\r\n            buf[pos + 2] = f8b[1];\r\n            buf[pos + 3] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;\r\n\r\n        function readFloat_f32_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        function readFloat_f32_rev(buf, pos) {\r\n            f8b[3] = buf[pos    ];\r\n            f8b[2] = buf[pos + 1];\r\n            f8b[1] = buf[pos + 2];\r\n            f8b[0] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;\r\n\r\n    // float: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeFloat_ieee754(writeUint, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0)\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);\r\n            else if (isNaN(val))\r\n                writeUint(2143289344, buf, pos);\r\n            else if (val > 3.4028234663852886e+38) // +-Infinity\r\n                writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);\r\n            else if (val < 1.1754943508222875e-38) // denormal\r\n                writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);\r\n            else {\r\n                var exponent = Math.floor(Math.log(val) / Math.LN2),\r\n                    mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;\r\n                writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\r\n            }\r\n        }\r\n\r\n        exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);\r\n        exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);\r\n\r\n        function readFloat_ieee754(readUint, buf, pos) {\r\n            var uint = readUint(buf, pos),\r\n                sign = (uint >> 31) * 2 + 1,\r\n                exponent = uint >>> 23 & 255,\r\n                mantissa = uint & 8388607;\r\n            return exponent === 255\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 1.401298464324817e-45 * mantissa\r\n                : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\r\n        }\r\n\r\n        exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);\r\n        exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);\r\n\r\n    })();\r\n\r\n    // double: typed array\r\n    if (typeof Float64Array !== \"undefined\") (function() {\r\n\r\n        var f64 = new Float64Array([-0]),\r\n            f8b = new Uint8Array(f64.buffer),\r\n            le  = f8b[7] === 128;\r\n\r\n        function writeDouble_f64_cpy(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n            buf[pos + 4] = f8b[4];\r\n            buf[pos + 5] = f8b[5];\r\n            buf[pos + 6] = f8b[6];\r\n            buf[pos + 7] = f8b[7];\r\n        }\r\n\r\n        function writeDouble_f64_rev(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[7];\r\n            buf[pos + 1] = f8b[6];\r\n            buf[pos + 2] = f8b[5];\r\n            buf[pos + 3] = f8b[4];\r\n            buf[pos + 4] = f8b[3];\r\n            buf[pos + 5] = f8b[2];\r\n            buf[pos + 6] = f8b[1];\r\n            buf[pos + 7] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;\r\n\r\n        function readDouble_f64_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            f8b[4] = buf[pos + 4];\r\n            f8b[5] = buf[pos + 5];\r\n            f8b[6] = buf[pos + 6];\r\n            f8b[7] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        function readDouble_f64_rev(buf, pos) {\r\n            f8b[7] = buf[pos    ];\r\n            f8b[6] = buf[pos + 1];\r\n            f8b[5] = buf[pos + 2];\r\n            f8b[4] = buf[pos + 3];\r\n            f8b[3] = buf[pos + 4];\r\n            f8b[2] = buf[pos + 5];\r\n            f8b[1] = buf[pos + 6];\r\n            f8b[0] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;\r\n\r\n    // double: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + off1);\r\n            } else if (isNaN(val)) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(2146959360, buf, pos + off1);\r\n            } else if (val > 1.7976931348623157e+308) { // +-Infinity\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);\r\n            } else {\r\n                var mantissa;\r\n                if (val < 2.2250738585072014e-308) { // denormal\r\n                    mantissa = val / 5e-324;\r\n                    writeUint(mantissa >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);\r\n                } else {\r\n                    var exponent = Math.floor(Math.log(val) / Math.LN2);\r\n                    if (exponent === 1024)\r\n                        exponent = 1023;\r\n                    mantissa = val * Math.pow(2, -exponent);\r\n                    writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);\r\n                }\r\n            }\r\n        }\r\n\r\n        exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);\r\n        exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);\r\n\r\n        function readDouble_ieee754(readUint, off0, off1, buf, pos) {\r\n            var lo = readUint(buf, pos + off0),\r\n                hi = readUint(buf, pos + off1);\r\n            var sign = (hi >> 31) * 2 + 1,\r\n                exponent = hi >>> 20 & 2047,\r\n                mantissa = 4294967296 * (hi & 1048575) + lo;\r\n            return exponent === 2047\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 5e-324 * mantissa\r\n                : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\r\n        }\r\n\r\n        exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);\r\n        exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);\r\n\r\n    })();\r\n\r\n    return exports;\r\n}\r\n\r\n// uint helpers\r\n\r\nfunction writeUintLE(val, buf, pos) {\r\n    buf[pos    ] =  val        & 255;\r\n    buf[pos + 1] =  val >>> 8  & 255;\r\n    buf[pos + 2] =  val >>> 16 & 255;\r\n    buf[pos + 3] =  val >>> 24;\r\n}\r\n\r\nfunction writeUintBE(val, buf, pos) {\r\n    buf[pos    ] =  val >>> 24;\r\n    buf[pos + 1] =  val >>> 16 & 255;\r\n    buf[pos + 2] =  val >>> 8  & 255;\r\n    buf[pos + 3] =  val        & 255;\r\n}\r\n\r\nfunction readUintLE(buf, pos) {\r\n    return (buf[pos    ]\r\n          | buf[pos + 1] << 8\r\n          | buf[pos + 2] << 16\r\n          | buf[pos + 3] << 24) >>> 0;\r\n}\r\n\r\nfunction readUintBE(buf, pos) {\r\n    return (buf[pos    ] << 24\r\n          | buf[pos + 1] << 16\r\n          | buf[pos + 2] << 8\r\n          | buf[pos + 3]) >>> 0;\r\n}\r\n", "\"use strict\";\r\nmodule.exports = inquire;\r\n\r\n/**\r\n * Requires a module only if available.\r\n * @memberof util\r\n * @param {string} moduleName Module to require\r\n * @returns {?Object} Required module if available and not empty, otherwise `null`\r\n */\r\nfunction inquire(moduleName) {\r\n    try {\r\n        var mod = eval(\"quire\".replace(/^/,\"re\"))(moduleName); // eslint-disable-line no-eval\r\n        if (mod && (mod.length || Object.keys(mod).length))\r\n            return mod;\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    return null;\r\n}\r\n", "\"use strict\";\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function utf8_length(string) {\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function utf8_read(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = null,\r\n        chunk = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            chunk[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        } else\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function utf8_write(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\r\n", "\"use strict\";\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size < 1 || size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n", "\"use strict\";\nmodule.exports = LongBits;\n\nvar util = require(\"../util/minimal\");\n\n/**\n * Constructs new long bits.\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\n * @memberof util\n * @constructor\n * @param {number} lo Low 32 bits, unsigned\n * @param {number} hi High 32 bits, unsigned\n */\nfunction LongBits(lo, hi) {\n\n    // note that the casts below are theoretically unnecessary as of today, but older statically\n    // generated converter code might still call the ctor with signed 32bits. kept for compat.\n\n    /**\n     * Low bits.\n     * @type {number}\n     */\n    this.lo = lo >>> 0;\n\n    /**\n     * High bits.\n     * @type {number}\n     */\n    this.hi = hi >>> 0;\n}\n\n/**\n * Zero bits.\n * @memberof util.LongBits\n * @type {util.LongBits}\n */\nvar zero = LongBits.zero = new LongBits(0, 0);\n\nzero.toNumber = function() { return 0; };\nzero.zzEncode = zero.zzDecode = function() { return this; };\nzero.length = function() { return 1; };\n\n/**\n * Zero hash.\n * @memberof util.LongBits\n * @type {string}\n */\nvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\n\n/**\n * Constructs new long bits from the specified number.\n * @param {number} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.fromNumber = function fromNumber(value) {\n    if (value === 0)\n        return zero;\n    var sign = value < 0;\n    if (sign)\n        value = -value;\n    var lo = value >>> 0,\n        hi = (value - lo) / 4294967296 >>> 0;\n    if (sign) {\n        hi = ~hi >>> 0;\n        lo = ~lo >>> 0;\n        if (++lo > 4294967295) {\n            lo = 0;\n            if (++hi > 4294967295)\n                hi = 0;\n        }\n    }\n    return new LongBits(lo, hi);\n};\n\n/**\n * Constructs new long bits from a number, long or string.\n * @param {Long|number|string} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.from = function from(value) {\n    if (typeof value === \"number\")\n        return LongBits.fromNumber(value);\n    if (util.isString(value)) {\n        /* istanbul ignore else */\n        if (util.Long)\n            value = util.Long.fromString(value);\n        else\n            return LongBits.fromNumber(parseInt(value, 10));\n    }\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\n};\n\n/**\n * Converts this long bits to a possibly unsafe JavaScript number.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {number} Possibly unsafe number\n */\nLongBits.prototype.toNumber = function toNumber(unsigned) {\n    if (!unsigned && this.hi >>> 31) {\n        var lo = ~this.lo + 1 >>> 0,\n            hi = ~this.hi     >>> 0;\n        if (!lo)\n            hi = hi + 1 >>> 0;\n        return -(lo + hi * 4294967296);\n    }\n    return this.lo + this.hi * 4294967296;\n};\n\n/**\n * Converts this long bits to a long.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long} Long\n */\nLongBits.prototype.toLong = function toLong(unsigned) {\n    return util.Long\n        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\n        /* istanbul ignore next */\n        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\n};\n\nvar charCodeAt = String.prototype.charCodeAt;\n\n/**\n * Constructs new long bits from the specified 8 characters long hash.\n * @param {string} hash Hash\n * @returns {util.LongBits} Bits\n */\nLongBits.fromHash = function fromHash(hash) {\n    if (hash === zeroHash)\n        return zero;\n    return new LongBits(\n        ( charCodeAt.call(hash, 0)\n        | charCodeAt.call(hash, 1) << 8\n        | charCodeAt.call(hash, 2) << 16\n        | charCodeAt.call(hash, 3) << 24) >>> 0\n    ,\n        ( charCodeAt.call(hash, 4)\n        | charCodeAt.call(hash, 5) << 8\n        | charCodeAt.call(hash, 6) << 16\n        | charCodeAt.call(hash, 7) << 24) >>> 0\n    );\n};\n\n/**\n * Converts this long bits to a 8 characters long hash.\n * @returns {string} Hash\n */\nLongBits.prototype.toHash = function toHash() {\n    return String.fromCharCode(\n        this.lo        & 255,\n        this.lo >>> 8  & 255,\n        this.lo >>> 16 & 255,\n        this.lo >>> 24      ,\n        this.hi        & 255,\n        this.hi >>> 8  & 255,\n        this.hi >>> 16 & 255,\n        this.hi >>> 24\n    );\n};\n\n/**\n * Zig-zag encodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzEncode = function zzEncode() {\n    var mask =   this.hi >> 31;\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Zig-zag decodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzDecode = function zzDecode() {\n    var mask = -(this.lo & 1);\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Calculates the length of this longbits when encoded as a varint.\n * @returns {number} Length\n */\nLongBits.prototype.length = function length() {\n    var part0 =  this.lo,\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\n        part2 =  this.hi >>> 24;\n    return part2 === 0\n         ? part1 === 0\n           ? part0 < 16384\n             ? part0 < 128 ? 1 : 2\n             : part0 < 2097152 ? 3 : 4\n           : part1 < 16384\n             ? part1 < 128 ? 5 : 6\n             : part1 < 2097152 ? 7 : 8\n         : part2 < 128 ? 9 : 10;\n};\n", "\"use strict\";\nvar util = exports;\n\n// used to return a Promise where callback is omitted\nutil.asPromise = require(\"@protobufjs/aspromise\");\n\n// converts to / from base64 encoded strings\nutil.base64 = require(\"@protobufjs/base64\");\n\n// base class of rpc.Service\nutil.EventEmitter = require(\"@protobufjs/eventemitter\");\n\n// float handling accross browsers\nutil.float = require(\"@protobufjs/float\");\n\n// requires modules optionally and hides the call from bundlers\nutil.inquire = require(\"@protobufjs/inquire\");\n\n// converts to / from utf8 encoded strings\nutil.utf8 = require(\"@protobufjs/utf8\");\n\n// provides a node-like buffer pool in the browser\nutil.pool = require(\"@protobufjs/pool\");\n\n// utility to work with the low and high bits of a 64 bit value\nutil.LongBits = require(\"./longbits\");\n\n/**\n * Whether running within node or not.\n * @memberof util\n * @type {boolean}\n */\nutil.isNode = Boolean(typeof global !== \"undefined\"\n                   && global\n                   && global.process\n                   && global.process.versions\n                   && global.process.versions.node);\n\n/**\n * Global object reference.\n * @memberof util\n * @type {Object}\n */\nutil.global = util.isNode && global\n           || typeof window !== \"undefined\" && window\n           || typeof self   !== \"undefined\" && self\n           || this; // eslint-disable-line no-invalid-this\n\n/**\n * An immuable empty array.\n * @memberof util\n * @type {Array.<*>}\n * @const\n */\nutil.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes\n\n/**\n * An immutable empty object.\n * @type {Object}\n * @const\n */\nutil.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes\n\n/**\n * Tests if the specified value is an integer.\n * @function\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is an integer\n */\nutil.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\n};\n\n/**\n * Tests if the specified value is a string.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a string\n */\nutil.isString = function isString(value) {\n    return typeof value === \"string\" || value instanceof String;\n};\n\n/**\n * Tests if the specified value is a non-null object.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a non-null object\n */\nutil.isObject = function isObject(value) {\n    return value && typeof value === \"object\";\n};\n\n/**\n * Checks if a property on a message is considered to be present.\n * This is an alias of {@link util.isSet}.\n * @function\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isset =\n\n/**\n * Checks if a property on a message is considered to be present.\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isSet = function isSet(obj, prop) {\n    var value = obj[prop];\n    if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins\n        return typeof value !== \"object\" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;\n    return false;\n};\n\n/**\n * Any compatible Buffer instance.\n * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.\n * @interface Buffer\n * @extends Uint8Array\n */\n\n/**\n * Node's Buffer class if available.\n * @type {Constructor<Buffer>}\n */\nutil.Buffer = (function() {\n    try {\n        var Buffer = util.inquire(\"buffer\").Buffer;\n        // refuse to use non-node buffers if not explicitly assigned (perf reasons):\n        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;\n    } catch (e) {\n        /* istanbul ignore next */\n        return null;\n    }\n})();\n\n// Internal alias of or polyfull for Buffer.from.\nutil._Buffer_from = null;\n\n// Internal alias of or polyfill for Buffer.allocUnsafe.\nutil._Buffer_allocUnsafe = null;\n\n/**\n * Creates a new buffer of whatever type supported by the environment.\n * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\n * @returns {Uint8Array|Buffer} Buffer\n */\nutil.newBuffer = function newBuffer(sizeOrArray) {\n    /* istanbul ignore next */\n    return typeof sizeOrArray === \"number\"\n        ? util.Buffer\n            ? util._Buffer_allocUnsafe(sizeOrArray)\n            : new util.Array(sizeOrArray)\n        : util.Buffer\n            ? util._Buffer_from(sizeOrArray)\n            : typeof Uint8Array === \"undefined\"\n                ? sizeOrArray\n                : new Uint8Array(sizeOrArray);\n};\n\n/**\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\n * @type {Constructor<Uint8Array>}\n */\nutil.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */ : Array;\n\n/**\n * Any compatible Long instance.\n * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.\n * @interface Long\n * @property {number} low Low bits\n * @property {number} high High bits\n * @property {boolean} unsigned Whether unsigned or not\n */\n\n/**\n * Long.js's Long class if available.\n * @type {Constructor<Long>}\n */\nutil.Long = /* istanbul ignore next */ util.global.dcodeIO && /* istanbul ignore next */ util.global.dcodeIO.Long\n         || /* istanbul ignore next */ util.global.Long\n         || util.inquire(\"long\");\n\n/**\n * Regular expression used to verify 2 bit (`bool`) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key2Re = /^true|false|0|1$/;\n\n/**\n * Regular expression used to verify 32 bit (`int32` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key32Re = /^-?(?:0|[1-9][0-9]*)$/;\n\n/**\n * Regular expression used to verify 64 bit (`int64` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key64Re = /^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;\n\n/**\n * Converts a number or long to an 8 characters long hash string.\n * @param {Long|number} value Value to convert\n * @returns {string} Hash\n */\nutil.longToHash = function longToHash(value) {\n    return value\n        ? util.LongBits.from(value).toHash()\n        : util.LongBits.zeroHash;\n};\n\n/**\n * Converts an 8 characters long hash string to a long or number.\n * @param {string} hash Hash\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long|number} Original value\n */\nutil.longFromHash = function longFromHash(hash, unsigned) {\n    var bits = util.LongBits.fromHash(hash);\n    if (util.Long)\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\n    return bits.toNumber(Boolean(unsigned));\n};\n\n/**\n * Merges the properties of the source object into the destination object.\n * @memberof util\n * @param {Object.<string,*>} dst Destination object\n * @param {Object.<string,*>} src Source object\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\n * @returns {Object.<string,*>} Destination object\n */\nfunction merge(dst, src, ifNotSet) { // used by converters\n    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)\n        if (dst[keys[i]] === undefined || !ifNotSet)\n            dst[keys[i]] = src[keys[i]];\n    return dst;\n}\n\nutil.merge = merge;\n\n/**\n * Converts the first character of a string to lower case.\n * @param {string} str String to convert\n * @returns {string} Converted string\n */\nutil.lcFirst = function lcFirst(str) {\n    return str.charAt(0).toLowerCase() + str.substring(1);\n};\n\n/**\n * Creates a custom error constructor.\n * @memberof util\n * @param {string} name Error name\n * @returns {Constructor<Error>} Custom error constructor\n */\nfunction newError(name) {\n\n    function CustomError(message, properties) {\n\n        if (!(this instanceof CustomError))\n            return new CustomError(message, properties);\n\n        // Error.call(this, message);\n        // ^ just returns a new error instance because the ctor can be called as a function\n\n        Object.defineProperty(this, \"message\", { get: function() { return message; } });\n\n        /* istanbul ignore next */\n        if (Error.captureStackTrace) // node\n            Error.captureStackTrace(this, CustomError);\n        else\n            Object.defineProperty(this, \"stack\", { value: new Error().stack || \"\" });\n\n        if (properties)\n            merge(this, properties);\n    }\n\n    CustomError.prototype = Object.create(Error.prototype, {\n        constructor: {\n            value: CustomError,\n            writable: true,\n            enumerable: false,\n            configurable: true,\n        },\n        name: {\n            get: function get() { return name; },\n            set: undefined,\n            enumerable: false,\n            // configurable: false would accurately preserve the behavior of\n            // the original, but I'm guessing that was not intentional.\n            // For an actual error subclass, this property would\n            // be configurable.\n            configurable: true,\n        },\n        toString: {\n            value: function value() { return this.name + \": \" + this.message; },\n            writable: true,\n            enumerable: false,\n            configurable: true,\n        },\n    });\n\n    return CustomError;\n}\n\nutil.newError = newError;\n\n/**\n * Constructs a new protocol error.\n * @classdesc Error subclass indicating a protocol specifc error.\n * @memberof util\n * @extends Error\n * @template T extends Message<T>\n * @constructor\n * @param {string} message Error message\n * @param {Object.<string,*>} [properties] Additional properties\n * @example\n * try {\n *     MyMessage.decode(someBuffer); // throws if required fields are missing\n * } catch (e) {\n *     if (e instanceof ProtocolError && e.instance)\n *         console.log(\"decoded so far: \" + JSON.stringify(e.instance));\n * }\n */\nutil.ProtocolError = newError(\"ProtocolError\");\n\n/**\n * So far decoded message instance.\n * @name util.ProtocolError#instance\n * @type {Message<T>}\n */\n\n/**\n * A OneOf getter as returned by {@link util.oneOfGetter}.\n * @typedef OneOfGetter\n * @type {function}\n * @returns {string|undefined} Set field name, if any\n */\n\n/**\n * Builds a getter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfGetter} Unbound getter\n */\nutil.oneOfGetter = function getOneOf(fieldNames) {\n    var fieldMap = {};\n    for (var i = 0; i < fieldNames.length; ++i)\n        fieldMap[fieldNames[i]] = 1;\n\n    /**\n     * @returns {string|undefined} Set field name, if any\n     * @this Object\n     * @ignore\n     */\n    return function() { // eslint-disable-line consistent-return\n        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\n            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)\n                return keys[i];\n    };\n};\n\n/**\n * A OneOf setter as returned by {@link util.oneOfSetter}.\n * @typedef OneOfSetter\n * @type {function}\n * @param {string|undefined} value Field name\n * @returns {undefined}\n */\n\n/**\n * Builds a setter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfSetter} Unbound setter\n */\nutil.oneOfSetter = function setOneOf(fieldNames) {\n\n    /**\n     * @param {string} name Field name\n     * @returns {undefined}\n     * @this Object\n     * @ignore\n     */\n    return function(name) {\n        for (var i = 0; i < fieldNames.length; ++i)\n            if (fieldNames[i] !== name)\n                delete this[fieldNames[i]];\n    };\n};\n\n/**\n * Default conversion options used for {@link Message#toJSON} implementations.\n *\n * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:\n *\n * - Longs become strings\n * - Enums become string keys\n * - Bytes become base64 encoded strings\n * - (Sub-)Messages become plain objects\n * - Maps become plain objects with all string keys\n * - Repeated fields become arrays\n * - NaN and Infinity for float and double fields become strings\n *\n * @type {IConversionOptions}\n * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json\n */\nutil.toJSONOptions = {\n    longs: String,\n    enums: String,\n    bytes: String,\n    json: true\n};\n\n// Sets up buffer utility according to the environment (called in index-minimal)\nutil._configure = function() {\n    var Buffer = util.Buffer;\n    /* istanbul ignore if */\n    if (!Buffer) {\n        util._Buffer_from = util._Buffer_allocUnsafe = null;\n        return;\n    }\n    // because node 4.x buffers are incompatible & immutable\n    // see: https://github.com/dcodeIO/protobuf.js/pull/665\n    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||\n        /* istanbul ignore next */\n        function Buffer_from(value, encoding) {\n            return new Buffer(value, encoding);\n        };\n    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||\n        /* istanbul ignore next */\n        function Buffer_allocUnsafe(size) {\n            return new Buffer(size);\n        };\n};\n", "\"use strict\";\nmodule.exports = Writer;\n\nvar util      = require(\"./util/minimal\");\n\nvar BufferWriter; // cyclic\n\nvar LongBits  = util.LongBits,\n    base64    = util.base64,\n    utf8      = util.utf8;\n\n/**\n * Constructs a new writer operation instance.\n * @classdesc Scheduled writer operation.\n * @constructor\n * @param {function(*, Uint8Array, number)} fn Function to call\n * @param {number} len Value byte length\n * @param {*} val Value to write\n * @ignore\n */\nfunction Op(fn, len, val) {\n\n    /**\n     * Function to call.\n     * @type {function(Uint8Array, number, *)}\n     */\n    this.fn = fn;\n\n    /**\n     * Value byte length.\n     * @type {number}\n     */\n    this.len = len;\n\n    /**\n     * Next operation.\n     * @type {Writer.Op|undefined}\n     */\n    this.next = undefined;\n\n    /**\n     * Value to write.\n     * @type {*}\n     */\n    this.val = val; // type varies\n}\n\n/* istanbul ignore next */\nfunction noop() {} // eslint-disable-line no-empty-function\n\n/**\n * Constructs a new writer state instance.\n * @classdesc Copied writer state.\n * @memberof Writer\n * @constructor\n * @param {Writer} writer Writer to copy state from\n * @ignore\n */\nfunction State(writer) {\n\n    /**\n     * Current head.\n     * @type {Writer.Op}\n     */\n    this.head = writer.head;\n\n    /**\n     * Current tail.\n     * @type {Writer.Op}\n     */\n    this.tail = writer.tail;\n\n    /**\n     * Current buffer length.\n     * @type {number}\n     */\n    this.len = writer.len;\n\n    /**\n     * Next state.\n     * @type {State|null}\n     */\n    this.next = writer.states;\n}\n\n/**\n * Constructs a new writer instance.\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n */\nfunction Writer() {\n\n    /**\n     * Current length.\n     * @type {number}\n     */\n    this.len = 0;\n\n    /**\n     * Operations head.\n     * @type {Object}\n     */\n    this.head = new Op(noop, 0, 0);\n\n    /**\n     * Operations tail\n     * @type {Object}\n     */\n    this.tail = this.head;\n\n    /**\n     * Linked forked states.\n     * @type {Object|null}\n     */\n    this.states = null;\n\n    // When a value is written, the writer calculates its byte length and puts it into a linked\n    // list of operations to perform when finish() is called. This both allows us to allocate\n    // buffers of the exact required size and reduces the amount of work we have to do compared\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\n    // part is just a linked list walk calling operations with already prepared values.\n}\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup() {\n            return (Writer.create = function create_buffer() {\n                return new BufferWriter();\n            })();\n        }\n        /* istanbul ignore next */\n        : function create_array() {\n            return new Writer();\n        };\n};\n\n/**\n * Creates a new writer.\n * @function\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\n */\nWriter.create = create();\n\n/**\n * Allocates a buffer of the specified size.\n * @param {number} size Buffer size\n * @returns {Uint8Array} Buffer\n */\nWriter.alloc = function alloc(size) {\n    return new util.Array(size);\n};\n\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\n/* istanbul ignore else */\nif (util.Array !== Array)\n    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\n\n/**\n * Pushes a new operation to the queue.\n * @param {function(Uint8Array, number, *)} fn Function to call\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @returns {Writer} `this`\n * @private\n */\nWriter.prototype._push = function push(fn, len, val) {\n    this.tail = this.tail.next = new Op(fn, len, val);\n    this.len += len;\n    return this;\n};\n\nfunction writeByte(val, buf, pos) {\n    buf[pos] = val & 255;\n}\n\nfunction writeVarint32(val, buf, pos) {\n    while (val > 127) {\n        buf[pos++] = val & 127 | 128;\n        val >>>= 7;\n    }\n    buf[pos] = val;\n}\n\n/**\n * Constructs a new varint writer operation instance.\n * @classdesc Scheduled varint writer operation.\n * @extends Op\n * @constructor\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @ignore\n */\nfunction VarintOp(len, val) {\n    this.len = len;\n    this.next = undefined;\n    this.val = val;\n}\n\nVarintOp.prototype = Object.create(Op.prototype);\nVarintOp.prototype.fn = writeVarint32;\n\n/**\n * Writes an unsigned 32 bit value as a varint.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.uint32 = function write_uint32(value) {\n    // here, the call to this.push has been inlined and a varint specific Op subclass is used.\n    // uint32 is by far the most frequently used operation and benefits significantly from this.\n    this.len += (this.tail = this.tail.next = new VarintOp(\n        (value = value >>> 0)\n                < 128       ? 1\n        : value < 16384     ? 2\n        : value < 2097152   ? 3\n        : value < 268435456 ? 4\n        :                     5,\n    value)).len;\n    return this;\n};\n\n/**\n * Writes a signed 32 bit value as a varint.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.int32 = function write_int32(value) {\n    return value < 0\n        ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\n        : this.uint32(value);\n};\n\n/**\n * Writes a 32 bit value as a varint, zig-zag encoded.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sint32 = function write_sint32(value) {\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\n};\n\nfunction writeVarint64(val, buf, pos) {\n    while (val.hi) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\n        val.hi >>>= 7;\n    }\n    while (val.lo > 127) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = val.lo >>> 7;\n    }\n    buf[pos++] = val.lo;\n}\n\n/**\n * Writes an unsigned 64 bit value as a varint.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.uint64 = function write_uint64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a signed 64 bit value as a varint.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.int64 = Writer.prototype.uint64;\n\n/**\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sint64 = function write_sint64(value) {\n    var bits = LongBits.from(value).zzEncode();\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a boolish value as a varint.\n * @param {boolean} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bool = function write_bool(value) {\n    return this._push(writeByte, 1, value ? 1 : 0);\n};\n\nfunction writeFixed32(val, buf, pos) {\n    buf[pos    ] =  val         & 255;\n    buf[pos + 1] =  val >>> 8   & 255;\n    buf[pos + 2] =  val >>> 16  & 255;\n    buf[pos + 3] =  val >>> 24;\n}\n\n/**\n * Writes an unsigned 32 bit value as fixed 32 bits.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.fixed32 = function write_fixed32(value) {\n    return this._push(writeFixed32, 4, value >>> 0);\n};\n\n/**\n * Writes a signed 32 bit value as fixed 32 bits.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sfixed32 = Writer.prototype.fixed32;\n\n/**\n * Writes an unsigned 64 bit value as fixed 64 bits.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.fixed64 = function write_fixed64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);\n};\n\n/**\n * Writes a signed 64 bit value as fixed 64 bits.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sfixed64 = Writer.prototype.fixed64;\n\n/**\n * Writes a float (32 bit).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.float = function write_float(value) {\n    return this._push(util.float.writeFloatLE, 4, value);\n};\n\n/**\n * Writes a double (64 bit float).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.double = function write_double(value) {\n    return this._push(util.float.writeDoubleLE, 8, value);\n};\n\nvar writeBytes = util.Array.prototype.set\n    ? function writeBytes_set(val, buf, pos) {\n        buf.set(val, pos); // also works for plain array values\n    }\n    /* istanbul ignore next */\n    : function writeBytes_for(val, buf, pos) {\n        for (var i = 0; i < val.length; ++i)\n            buf[pos + i] = val[i];\n    };\n\n/**\n * Writes a sequence of bytes.\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bytes = function write_bytes(value) {\n    var len = value.length >>> 0;\n    if (!len)\n        return this._push(writeByte, 1, 0);\n    if (util.isString(value)) {\n        var buf = Writer.alloc(len = base64.length(value));\n        base64.decode(value, buf, 0);\n        value = buf;\n    }\n    return this.uint32(len)._push(writeBytes, len, value);\n};\n\n/**\n * Writes a string.\n * @param {string} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.string = function write_string(value) {\n    var len = utf8.length(value);\n    return len\n        ? this.uint32(len)._push(utf8.write, len, value)\n        : this._push(writeByte, 1, 0);\n};\n\n/**\n * Forks this writer's state by pushing it to a stack.\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\n * @returns {Writer} `this`\n */\nWriter.prototype.fork = function fork() {\n    this.states = new State(this);\n    this.head = this.tail = new Op(noop, 0, 0);\n    this.len = 0;\n    return this;\n};\n\n/**\n * Resets this instance to the last state.\n * @returns {Writer} `this`\n */\nWriter.prototype.reset = function reset() {\n    if (this.states) {\n        this.head   = this.states.head;\n        this.tail   = this.states.tail;\n        this.len    = this.states.len;\n        this.states = this.states.next;\n    } else {\n        this.head = this.tail = new Op(noop, 0, 0);\n        this.len  = 0;\n    }\n    return this;\n};\n\n/**\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\n * @returns {Writer} `this`\n */\nWriter.prototype.ldelim = function ldelim() {\n    var head = this.head,\n        tail = this.tail,\n        len  = this.len;\n    this.reset().uint32(len);\n    if (len) {\n        this.tail.next = head.next; // skip noop\n        this.tail = tail;\n        this.len += len;\n    }\n    return this;\n};\n\n/**\n * Finishes the write operation.\n * @returns {Uint8Array} Finished buffer\n */\nWriter.prototype.finish = function finish() {\n    var head = this.head.next, // skip noop\n        buf  = this.constructor.alloc(this.len),\n        pos  = 0;\n    while (head) {\n        head.fn(head.val, buf, pos);\n        pos += head.len;\n        head = head.next;\n    }\n    // this.head = this.tail = null;\n    return buf;\n};\n\nWriter._configure = function(BufferWriter_) {\n    BufferWriter = BufferWriter_;\n    Writer.create = create();\n    BufferWriter._configure();\n};\n", "\"use strict\";\nmodule.exports = BufferWriter;\n\n// extends Writer\nvar Writer = require(\"./writer\");\n(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;\n\nvar util = require(\"./util/minimal\");\n\n/**\n * Constructs a new buffer writer instance.\n * @classdesc Wire format writer using node buffers.\n * @extends Writer\n * @constructor\n */\nfunction BufferWriter() {\n    Writer.call(this);\n}\n\nBufferWriter._configure = function () {\n    /**\n     * Allocates a buffer of the specified size.\n     * @function\n     * @param {number} size Buffer size\n     * @returns {Buffer} Buffer\n     */\n    BufferWriter.alloc = util._Buffer_allocUnsafe;\n\n    BufferWriter.writeBytesBuffer = util.Buffer && util.Buffer.prototype instanceof Uint8Array && util.Buffer.prototype.set.name === \"set\"\n        ? function writeBytesBuffer_set(val, buf, pos) {\n          buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\n          // also works for plain array values\n        }\n        /* istanbul ignore next */\n        : function writeBytesBuffer_copy(val, buf, pos) {\n          if (val.copy) // Buffer values\n            val.copy(buf, pos, 0, val.length);\n          else for (var i = 0; i < val.length;) // plain array values\n            buf[pos++] = val[i++];\n        };\n};\n\n\n/**\n * @override\n */\nBufferWriter.prototype.bytes = function write_bytes_buffer(value) {\n    if (util.isString(value))\n        value = util._Buffer_from(value, \"base64\");\n    var len = value.length >>> 0;\n    this.uint32(len);\n    if (len)\n        this._push(BufferWriter.writeBytesBuffer, len, value);\n    return this;\n};\n\nfunction writeStringBuffer(val, buf, pos) {\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\n        util.utf8.write(val, buf, pos);\n    else if (buf.utf8Write)\n        buf.utf8Write(val, pos);\n    else\n        buf.write(val, pos);\n}\n\n/**\n * @override\n */\nBufferWriter.prototype.string = function write_string_buffer(value) {\n    var len = util.Buffer.byteLength(value);\n    this.uint32(len);\n    if (len)\n        this._push(writeStringBuffer, len, value);\n    return this;\n};\n\n\n/**\n * Finishes the write operation.\n * @name BufferWriter#finish\n * @function\n * @returns {Buffer} Finished buffer\n */\n\nBufferWriter._configure();\n", "\"use strict\";\nmodule.exports = Reader;\n\nvar util      = require(\"./util/minimal\");\n\nvar BufferReader; // cyclic\n\nvar LongBits  = util.LongBits,\n    utf8      = util.utf8;\n\n/* istanbul ignore next */\nfunction indexOutOfRange(reader, writeLength) {\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\n}\n\n/**\n * Constructs a new reader instance using the specified buffer.\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n * @param {Uint8Array} buffer Buffer to read from\n */\nfunction Reader(buffer) {\n\n    /**\n     * Read buffer.\n     * @type {Uint8Array}\n     */\n    this.buf = buffer;\n\n    /**\n     * Read buffer position.\n     * @type {number}\n     */\n    this.pos = 0;\n\n    /**\n     * Read buffer length.\n     * @type {number}\n     */\n    this.len = buffer.length;\n}\n\nvar create_array = typeof Uint8Array !== \"undefined\"\n    ? function create_typed_array(buffer) {\n        if (buffer instanceof Uint8Array || Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    }\n    /* istanbul ignore next */\n    : function create_array(buffer) {\n        if (Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    };\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup(buffer) {\n            return (Reader.create = function create_buffer(buffer) {\n                return util.Buffer.isBuffer(buffer)\n                    ? new BufferReader(buffer)\n                    /* istanbul ignore next */\n                    : create_array(buffer);\n            })(buffer);\n        }\n        /* istanbul ignore next */\n        : create_array;\n};\n\n/**\n * Creates a new reader using the specified buffer.\n * @function\n * @param {Uint8Array|Buffer} buffer Buffer to read from\n * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\n * @throws {Error} If `buffer` is not a valid buffer\n */\nReader.create = create();\n\nReader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;\n\n/**\n * Reads a varint as an unsigned 32 bit value.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.uint32 = (function read_uint32_setup() {\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\n    return function read_uint32() {\n        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\n\n        /* istanbul ignore if */\n        if ((this.pos += 5) > this.len) {\n            this.pos = this.len;\n            throw indexOutOfRange(this, 10);\n        }\n        return value;\n    };\n})();\n\n/**\n * Reads a varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.int32 = function read_int32() {\n    return this.uint32() | 0;\n};\n\n/**\n * Reads a zig-zag encoded varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.sint32 = function read_sint32() {\n    var value = this.uint32();\n    return value >>> 1 ^ -(value & 1) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readLongVarint() {\n    // tends to deopt with local vars for octet etc.\n    var bits = new LongBits(0, 0);\n    var i = 0;\n    if (this.len - this.pos > 4) { // fast route (lo)\n        for (; i < 4; ++i) {\n            // 1st..4th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 5th\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\n        if (this.buf[this.pos++] < 128)\n            return bits;\n        i = 0;\n    } else {\n        for (; i < 3; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 1st..3th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 4th\n        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;\n        return bits;\n    }\n    if (this.len - this.pos > 4) { // fast route (hi)\n        for (; i < 5; ++i) {\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    } else {\n        for (; i < 5; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    }\n    /* istanbul ignore next */\n    throw Error(\"invalid varint encoding\");\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads a varint as a signed 64 bit value.\n * @name Reader#int64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as an unsigned 64 bit value.\n * @name Reader#uint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a zig-zag encoded varint as a signed 64 bit value.\n * @name Reader#sint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as a boolean.\n * @returns {boolean} Value read\n */\nReader.prototype.bool = function read_bool() {\n    return this.uint32() !== 0;\n};\n\nfunction readFixed32_end(buf, end) { // note that this uses `end`, not `pos`\n    return (buf[end - 4]\n          | buf[end - 3] << 8\n          | buf[end - 2] << 16\n          | buf[end - 1] << 24) >>> 0;\n}\n\n/**\n * Reads fixed 32 bits as an unsigned 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.fixed32 = function read_fixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4);\n};\n\n/**\n * Reads fixed 32 bits as a signed 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.sfixed32 = function read_sfixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readFixed64(/* this: Reader */) {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 8);\n\n    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads fixed 64 bits.\n * @name Reader#fixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads zig-zag encoded fixed 64 bits.\n * @name Reader#sfixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a float (32 bit) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.float = function read_float() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readFloatLE(this.buf, this.pos);\n    this.pos += 4;\n    return value;\n};\n\n/**\n * Reads a double (64 bit float) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.double = function read_double() {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readDoubleLE(this.buf, this.pos);\n    this.pos += 8;\n    return value;\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @returns {Uint8Array} Value read\n */\nReader.prototype.bytes = function read_bytes() {\n    var length = this.uint32(),\n        start  = this.pos,\n        end    = this.pos + length;\n\n    /* istanbul ignore if */\n    if (end > this.len)\n        throw indexOutOfRange(this, length);\n\n    this.pos += length;\n    if (Array.isArray(this.buf)) // plain array\n        return this.buf.slice(start, end);\n\n    if (start === end) { // fix for IE 10/Win8 and others' subarray returning array of size 1\n        var nativeBuffer = util.Buffer;\n        return nativeBuffer\n            ? nativeBuffer.alloc(0)\n            : new this.buf.constructor(0);\n    }\n    return this._slice.call(this.buf, start, end);\n};\n\n/**\n * Reads a string preceeded by its byte length as a varint.\n * @returns {string} Value read\n */\nReader.prototype.string = function read_string() {\n    var bytes = this.bytes();\n    return utf8.read(bytes, 0, bytes.length);\n};\n\n/**\n * Skips the specified number of bytes if specified, otherwise skips a varint.\n * @param {number} [length] Length if known, otherwise a varint is assumed\n * @returns {Reader} `this`\n */\nReader.prototype.skip = function skip(length) {\n    if (typeof length === \"number\") {\n        /* istanbul ignore if */\n        if (this.pos + length > this.len)\n            throw indexOutOfRange(this, length);\n        this.pos += length;\n    } else {\n        do {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n        } while (this.buf[this.pos++] & 128);\n    }\n    return this;\n};\n\n/**\n * Skips the next element of the specified wire type.\n * @param {number} wireType Wire type received\n * @returns {Reader} `this`\n */\nReader.prototype.skipType = function(wireType) {\n    switch (wireType) {\n        case 0:\n            this.skip();\n            break;\n        case 1:\n            this.skip(8);\n            break;\n        case 2:\n            this.skip(this.uint32());\n            break;\n        case 3:\n            while ((wireType = this.uint32() & 7) !== 4) {\n                this.skipType(wireType);\n            }\n            break;\n        case 5:\n            this.skip(4);\n            break;\n\n        /* istanbul ignore next */\n        default:\n            throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\n    }\n    return this;\n};\n\nReader._configure = function(BufferReader_) {\n    BufferReader = BufferReader_;\n    Reader.create = create();\n    BufferReader._configure();\n\n    var fn = util.Long ? \"toLong\" : /* istanbul ignore next */ \"toNumber\";\n    util.merge(Reader.prototype, {\n\n        int64: function read_int64() {\n            return readLongVarint.call(this)[fn](false);\n        },\n\n        uint64: function read_uint64() {\n            return readLongVarint.call(this)[fn](true);\n        },\n\n        sint64: function read_sint64() {\n            return readLongVarint.call(this).zzDecode()[fn](false);\n        },\n\n        fixed64: function read_fixed64() {\n            return readFixed64.call(this)[fn](true);\n        },\n\n        sfixed64: function read_sfixed64() {\n            return readFixed64.call(this)[fn](false);\n        }\n\n    });\n};\n", "\"use strict\";\nmodule.exports = BufferReader;\n\n// extends Reader\nvar Reader = require(\"./reader\");\n(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;\n\nvar util = require(\"./util/minimal\");\n\n/**\n * Constructs a new buffer reader instance.\n * @classdesc Wire format reader using node buffers.\n * @extends Reader\n * @constructor\n * @param {Buffer} buffer Buffer to read from\n */\nfunction BufferReader(buffer) {\n    Reader.call(this, buffer);\n\n    /**\n     * Read buffer.\n     * @name BufferReader#buf\n     * @type {Buffer}\n     */\n}\n\nBufferReader._configure = function () {\n    /* istanbul ignore else */\n    if (util.Buffer)\n        BufferReader.prototype._slice = util.Buffer.prototype.slice;\n};\n\n\n/**\n * @override\n */\nBufferReader.prototype.string = function read_string_buffer() {\n    var len = this.uint32(); // modifies pos\n    return this.buf.utf8Slice\n        ? this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len))\n        : this.buf.toString(\"utf-8\", this.pos, this.pos = Math.min(this.pos + len, this.len));\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @name BufferReader#bytes\n * @function\n * @returns {Buffer} Value read\n */\n\nBufferReader._configure();\n", "\"use strict\";\nmodule.exports = Service;\n\nvar util = require(\"../util/minimal\");\n\n// Extends EventEmitter\n(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;\n\n/**\n * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.\n *\n * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.\n * @typedef rpc.ServiceMethodCallback\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {Error|null} error Error, if any\n * @param {TRes} [response] Response message\n * @returns {undefined}\n */\n\n/**\n * A service method part of a {@link rpc.Service} as created by {@link Service.create}.\n * @typedef rpc.ServiceMethod\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message\n * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`\n */\n\n/**\n * Constructs a new RPC service instance.\n * @classdesc An RPC service as returned by {@link Service#create}.\n * @exports rpc.Service\n * @extends util.EventEmitter\n * @constructor\n * @param {RPCImpl} rpcImpl RPC implementation\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n */\nfunction Service(rpcImpl, requestDelimited, responseDelimited) {\n\n    if (typeof rpcImpl !== \"function\")\n        throw TypeError(\"rpcImpl must be a function\");\n\n    util.EventEmitter.call(this);\n\n    /**\n     * RPC implementation. Becomes `null` once the service is ended.\n     * @type {RPCImpl|null}\n     */\n    this.rpcImpl = rpcImpl;\n\n    /**\n     * Whether requests are length-delimited.\n     * @type {boolean}\n     */\n    this.requestDelimited = Boolean(requestDelimited);\n\n    /**\n     * Whether responses are length-delimited.\n     * @type {boolean}\n     */\n    this.responseDelimited = Boolean(responseDelimited);\n}\n\n/**\n * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.\n * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method\n * @param {Constructor<TReq>} requestCtor Request constructor\n * @param {Constructor<TRes>} responseCtor Response constructor\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback\n * @returns {undefined}\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n */\nService.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {\n\n    if (!request)\n        throw TypeError(\"request must be specified\");\n\n    var self = this;\n    if (!callback)\n        return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);\n\n    if (!self.rpcImpl) {\n        setTimeout(function() { callback(Error(\"already ended\")); }, 0);\n        return undefined;\n    }\n\n    try {\n        return self.rpcImpl(\n            method,\n            requestCtor[self.requestDelimited ? \"encodeDelimited\" : \"encode\"](request).finish(),\n            function rpcCallback(err, response) {\n\n                if (err) {\n                    self.emit(\"error\", err, method);\n                    return callback(err);\n                }\n\n                if (response === null) {\n                    self.end(/* endedByRPC */ true);\n                    return undefined;\n                }\n\n                if (!(response instanceof responseCtor)) {\n                    try {\n                        response = responseCtor[self.responseDelimited ? \"decodeDelimited\" : \"decode\"](response);\n                    } catch (err) {\n                        self.emit(\"error\", err, method);\n                        return callback(err);\n                    }\n                }\n\n                self.emit(\"data\", response, method);\n                return callback(null, response);\n            }\n        );\n    } catch (err) {\n        self.emit(\"error\", err, method);\n        setTimeout(function() { callback(err); }, 0);\n        return undefined;\n    }\n};\n\n/**\n * Ends this service and emits the `end` event.\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\n * @returns {rpc.Service} `this`\n */\nService.prototype.end = function end(endedByRPC) {\n    if (this.rpcImpl) {\n        if (!endedByRPC) // signal end to rpcImpl\n            this.rpcImpl(null, null, null);\n        this.rpcImpl = null;\n        this.emit(\"end\").off();\n    }\n    return this;\n};\n", "\"use strict\";\n\n/**\n * Streaming RPC helpers.\n * @namespace\n */\nvar rpc = exports;\n\n/**\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\n * @typedef RPCImpl\n * @type {function}\n * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called\n * @param {Uint8Array} requestData Request data\n * @param {RPCImplCallback} callback Callback function\n * @returns {undefined}\n * @example\n * function rpcImpl(method, requestData, callback) {\n *     if (protobuf.util.lcFirst(method.name) !== \"myMethod\") // compatible with static code\n *         throw Error(\"no such method\");\n *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {\n *         callback(err, responseData);\n *     });\n * }\n */\n\n/**\n * Node-style callback as used by {@link RPCImpl}.\n * @typedef RPCImplCallback\n * @type {function}\n * @param {Error|null} error Error, if any, otherwise `null`\n * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error\n * @returns {undefined}\n */\n\nrpc.Service = require(\"./rpc/service\");\n", "\"use strict\";\nmodule.exports = {};\n\n/**\n * Named roots.\n * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\n * Can also be used manually to make roots available across modules.\n * @name roots\n * @type {Object.<string,Root>}\n * @example\n * // pbjs -r myroot -o compiled.js ...\n *\n * // in another module:\n * require(\"./compiled.js\");\n *\n * // in any subsequent module:\n * var root = protobuf.roots[\"myroot\"];\n */\n", "\"use strict\";\nvar protobuf = exports;\n\n/**\n * Build type, one of `\"full\"`, `\"light\"` or `\"minimal\"`.\n * @name build\n * @type {string}\n * @const\n */\nprotobuf.build = \"minimal\";\n\n// Serialization\nprotobuf.Writer       = require(\"./writer\");\nprotobuf.BufferWriter = require(\"./writer_buffer\");\nprotobuf.Reader       = require(\"./reader\");\nprotobuf.BufferReader = require(\"./reader_buffer\");\n\n// Utility\nprotobuf.util         = require(\"./util/minimal\");\nprotobuf.rpc          = require(\"./rpc\");\nprotobuf.roots        = require(\"./roots\");\nprotobuf.configure    = configure;\n\n/* istanbul ignore next */\n/**\n * Reconfigures the library according to the environment.\n * @returns {undefined}\n */\nfunction configure() {\n    protobuf.util._configure();\n    protobuf.Writer._configure(protobuf.BufferWriter);\n    protobuf.Reader._configure(protobuf.BufferReader);\n}\n\n// Set up buffer utility according to the environment\nconfigure();\n", "// minimal library entry point.\n\n\"use strict\";\nmodule.exports = require(\"./src/index-minimal\");\n", "/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/\n\"use strict\";\n\nvar $protobuf = require(\"protobufjs/minimal\");\n\n// Common aliases\nvar $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nvar $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\n$root.opentelemetry = (function() {\n\n    /**\n     * Namespace opentelemetry.\n     * @exports opentelemetry\n     * @namespace\n     */\n    var opentelemetry = {};\n\n    opentelemetry.proto = (function() {\n\n        /**\n         * Namespace proto.\n         * @memberof opentelemetry\n         * @namespace\n         */\n        var proto = {};\n\n        proto.common = (function() {\n\n            /**\n             * Namespace common.\n             * @memberof opentelemetry.proto\n             * @namespace\n             */\n            var common = {};\n\n            common.v1 = (function() {\n\n                /**\n                 * Namespace v1.\n                 * @memberof opentelemetry.proto.common\n                 * @namespace\n                 */\n                var v1 = {};\n\n                v1.AnyValue = (function() {\n\n                    /**\n                     * Properties of an AnyValue.\n                     * @memberof opentelemetry.proto.common.v1\n                     * @interface IAnyValue\n                     * @property {string|null} [stringValue] AnyValue stringValue\n                     * @property {boolean|null} [boolValue] AnyValue boolValue\n                     * @property {number|Long|null} [intValue] AnyValue intValue\n                     * @property {number|null} [doubleValue] AnyValue doubleValue\n                     * @property {opentelemetry.proto.common.v1.IArrayValue|null} [arrayValue] AnyValue arrayValue\n                     * @property {opentelemetry.proto.common.v1.IKeyValueList|null} [kvlistValue] AnyValue kvlistValue\n                     * @property {Uint8Array|null} [bytesValue] AnyValue bytesValue\n                     */\n\n                    /**\n                     * Constructs a new AnyValue.\n                     * @memberof opentelemetry.proto.common.v1\n                     * @classdesc Represents an AnyValue.\n                     * @implements IAnyValue\n                     * @constructor\n                     * @param {opentelemetry.proto.common.v1.IAnyValue=} [properties] Properties to set\n                     */\n                    function AnyValue(properties) {\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * AnyValue stringValue.\n                     * @member {string|null|undefined} stringValue\n                     * @memberof opentelemetry.proto.common.v1.AnyValue\n                     * @instance\n                     */\n                    AnyValue.prototype.stringValue = null;\n\n                    /**\n                     * AnyValue boolValue.\n                     * @member {boolean|null|undefined} boolValue\n                     * @memberof opentelemetry.proto.common.v1.AnyValue\n                     * @instance\n                     */\n                    AnyValue.prototype.boolValue = null;\n\n                    /**\n                     * AnyValue intValue.\n                     * @member {number|Long|null|undefined} intValue\n                     * @memberof opentelemetry.proto.common.v1.AnyValue\n                     * @instance\n                     */\n                    AnyValue.prototype.intValue = null;\n\n                    /**\n                     * AnyValue doubleValue.\n                     * @member {number|null|undefined} doubleValue\n                     * @memberof opentelemetry.proto.common.v1.AnyValue\n                     * @instance\n                     */\n                    AnyValue.prototype.doubleValue = null;\n\n                    /**\n                     * AnyValue arrayValue.\n                     * @member {opentelemetry.proto.common.v1.IArrayValue|null|undefined} arrayValue\n                     * @memberof opentelemetry.proto.common.v1.AnyValue\n                     * @instance\n                     */\n                    AnyValue.prototype.arrayValue = null;\n\n                    /**\n                     * AnyValue kvlistValue.\n                     * @member {opentelemetry.proto.common.v1.IKeyValueList|null|undefined} kvlistValue\n                     * @memberof opentelemetry.proto.common.v1.AnyValue\n                     * @instance\n                     */\n                    AnyValue.prototype.kvlistValue = null;\n\n                    /**\n                     * AnyValue bytesValue.\n                     * @member {Uint8Array|null|undefined} bytesValue\n                     * @memberof opentelemetry.proto.common.v1.AnyValue\n                     * @instance\n                     */\n                    AnyValue.prototype.bytesValue = null;\n\n                    // OneOf field names bound to virtual getters and setters\n                    var $oneOfFields;\n\n                    /**\n                     * AnyValue value.\n                     * @member {\"stringValue\"|\"boolValue\"|\"intValue\"|\"doubleValue\"|\"arrayValue\"|\"kvlistValue\"|\"bytesValue\"|undefined} value\n                     * @memberof opentelemetry.proto.common.v1.AnyValue\n                     * @instance\n                     */\n                    Object.defineProperty(AnyValue.prototype, \"value\", {\n                        get: $util.oneOfGetter($oneOfFields = [\"stringValue\", \"boolValue\", \"intValue\", \"doubleValue\", \"arrayValue\", \"kvlistValue\", \"bytesValue\"]),\n                        set: $util.oneOfSetter($oneOfFields)\n                    });\n\n                    /**\n                     * Creates a new AnyValue instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.common.v1.AnyValue\n                     * @static\n                     * @param {opentelemetry.proto.common.v1.IAnyValue=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.common.v1.AnyValue} AnyValue instance\n                     */\n                    AnyValue.create = function create(properties) {\n                        return new AnyValue(properties);\n                    };\n\n                    /**\n                     * Encodes the specified AnyValue message. Does not implicitly {@link opentelemetry.proto.common.v1.AnyValue.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.common.v1.AnyValue\n                     * @static\n                     * @param {opentelemetry.proto.common.v1.IAnyValue} message AnyValue message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    AnyValue.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.stringValue != null && Object.hasOwnProperty.call(message, \"stringValue\"))\n                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.stringValue);\n                        if (message.boolValue != null && Object.hasOwnProperty.call(message, \"boolValue\"))\n                            writer.uint32(/* id 2, wireType 0 =*/16).bool(message.boolValue);\n                        if (message.intValue != null && Object.hasOwnProperty.call(message, \"intValue\"))\n                            writer.uint32(/* id 3, wireType 0 =*/24).int64(message.intValue);\n                        if (message.doubleValue != null && Object.hasOwnProperty.call(message, \"doubleValue\"))\n                            writer.uint32(/* id 4, wireType 1 =*/33).double(message.doubleValue);\n                        if (message.arrayValue != null && Object.hasOwnProperty.call(message, \"arrayValue\"))\n                            $root.opentelemetry.proto.common.v1.ArrayValue.encode(message.arrayValue, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n                        if (message.kvlistValue != null && Object.hasOwnProperty.call(message, \"kvlistValue\"))\n                            $root.opentelemetry.proto.common.v1.KeyValueList.encode(message.kvlistValue, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();\n                        if (message.bytesValue != null && Object.hasOwnProperty.call(message, \"bytesValue\"))\n                            writer.uint32(/* id 7, wireType 2 =*/58).bytes(message.bytesValue);\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified AnyValue message, length delimited. Does not implicitly {@link opentelemetry.proto.common.v1.AnyValue.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.common.v1.AnyValue\n                     * @static\n                     * @param {opentelemetry.proto.common.v1.IAnyValue} message AnyValue message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    AnyValue.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes an AnyValue message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.common.v1.AnyValue\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.common.v1.AnyValue} AnyValue\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    AnyValue.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.common.v1.AnyValue();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 1: {\n                                    message.stringValue = reader.string();\n                                    break;\n                                }\n                            case 2: {\n                                    message.boolValue = reader.bool();\n                                    break;\n                                }\n                            case 3: {\n                                    message.intValue = reader.int64();\n                                    break;\n                                }\n                            case 4: {\n                                    message.doubleValue = reader.double();\n                                    break;\n                                }\n                            case 5: {\n                                    message.arrayValue = $root.opentelemetry.proto.common.v1.ArrayValue.decode(reader, reader.uint32());\n                                    break;\n                                }\n                            case 6: {\n                                    message.kvlistValue = $root.opentelemetry.proto.common.v1.KeyValueList.decode(reader, reader.uint32());\n                                    break;\n                                }\n                            case 7: {\n                                    message.bytesValue = reader.bytes();\n                                    break;\n                                }\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes an AnyValue message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.common.v1.AnyValue\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.common.v1.AnyValue} AnyValue\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    AnyValue.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies an AnyValue message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.common.v1.AnyValue\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    AnyValue.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        var properties = {};\n                        if (message.stringValue != null && message.hasOwnProperty(\"stringValue\")) {\n                            properties.value = 1;\n                            if (!$util.isString(message.stringValue))\n                                return \"stringValue: string expected\";\n                        }\n                        if (message.boolValue != null && message.hasOwnProperty(\"boolValue\")) {\n                            if (properties.value === 1)\n                                return \"value: multiple values\";\n                            properties.value = 1;\n                            if (typeof message.boolValue !== \"boolean\")\n                                return \"boolValue: boolean expected\";\n                        }\n                        if (message.intValue != null && message.hasOwnProperty(\"intValue\")) {\n                            if (properties.value === 1)\n                                return \"value: multiple values\";\n                            properties.value = 1;\n                            if (!$util.isInteger(message.intValue) && !(message.intValue && $util.isInteger(message.intValue.low) && $util.isInteger(message.intValue.high)))\n                                return \"intValue: integer|Long expected\";\n                        }\n                        if (message.doubleValue != null && message.hasOwnProperty(\"doubleValue\")) {\n                            if (properties.value === 1)\n                                return \"value: multiple values\";\n                            properties.value = 1;\n                            if (typeof message.doubleValue !== \"number\")\n                                return \"doubleValue: number expected\";\n                        }\n                        if (message.arrayValue != null && message.hasOwnProperty(\"arrayValue\")) {\n                            if (properties.value === 1)\n                                return \"value: multiple values\";\n                            properties.value = 1;\n                            {\n                                var error = $root.opentelemetry.proto.common.v1.ArrayValue.verify(message.arrayValue);\n                                if (error)\n                                    return \"arrayValue.\" + error;\n                            }\n                        }\n                        if (message.kvlistValue != null && message.hasOwnProperty(\"kvlistValue\")) {\n                            if (properties.value === 1)\n                                return \"value: multiple values\";\n                            properties.value = 1;\n                            {\n                                var error = $root.opentelemetry.proto.common.v1.KeyValueList.verify(message.kvlistValue);\n                                if (error)\n                                    return \"kvlistValue.\" + error;\n                            }\n                        }\n                        if (message.bytesValue != null && message.hasOwnProperty(\"bytesValue\")) {\n                            if (properties.value === 1)\n                                return \"value: multiple values\";\n                            properties.value = 1;\n                            if (!(message.bytesValue && typeof message.bytesValue.length === \"number\" || $util.isString(message.bytesValue)))\n                                return \"bytesValue: buffer expected\";\n                        }\n                        return null;\n                    };\n\n                    /**\n                     * Creates an AnyValue message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.common.v1.AnyValue\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.common.v1.AnyValue} AnyValue\n                     */\n                    AnyValue.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.common.v1.AnyValue)\n                            return object;\n                        var message = new $root.opentelemetry.proto.common.v1.AnyValue();\n                        if (object.stringValue != null)\n                            message.stringValue = String(object.stringValue);\n                        if (object.boolValue != null)\n                            message.boolValue = Boolean(object.boolValue);\n                        if (object.intValue != null)\n                            if ($util.Long)\n                                (message.intValue = $util.Long.fromValue(object.intValue)).unsigned = false;\n                            else if (typeof object.intValue === \"string\")\n                                message.intValue = parseInt(object.intValue, 10);\n                            else if (typeof object.intValue === \"number\")\n                                message.intValue = object.intValue;\n                            else if (typeof object.intValue === \"object\")\n                                message.intValue = new $util.LongBits(object.intValue.low >>> 0, object.intValue.high >>> 0).toNumber();\n                        if (object.doubleValue != null)\n                            message.doubleValue = Number(object.doubleValue);\n                        if (object.arrayValue != null) {\n                            if (typeof object.arrayValue !== \"object\")\n                                throw TypeError(\".opentelemetry.proto.common.v1.AnyValue.arrayValue: object expected\");\n                            message.arrayValue = $root.opentelemetry.proto.common.v1.ArrayValue.fromObject(object.arrayValue);\n                        }\n                        if (object.kvlistValue != null) {\n                            if (typeof object.kvlistValue !== \"object\")\n                                throw TypeError(\".opentelemetry.proto.common.v1.AnyValue.kvlistValue: object expected\");\n                            message.kvlistValue = $root.opentelemetry.proto.common.v1.KeyValueList.fromObject(object.kvlistValue);\n                        }\n                        if (object.bytesValue != null)\n                            if (typeof object.bytesValue === \"string\")\n                                $util.base64.decode(object.bytesValue, message.bytesValue = $util.newBuffer($util.base64.length(object.bytesValue)), 0);\n                            else if (object.bytesValue.length >= 0)\n                                message.bytesValue = object.bytesValue;\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from an AnyValue message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.common.v1.AnyValue\n                     * @static\n                     * @param {opentelemetry.proto.common.v1.AnyValue} message AnyValue\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    AnyValue.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (message.stringValue != null && message.hasOwnProperty(\"stringValue\")) {\n                            object.stringValue = message.stringValue;\n                            if (options.oneofs)\n                                object.value = \"stringValue\";\n                        }\n                        if (message.boolValue != null && message.hasOwnProperty(\"boolValue\")) {\n                            object.boolValue = message.boolValue;\n                            if (options.oneofs)\n                                object.value = \"boolValue\";\n                        }\n                        if (message.intValue != null && message.hasOwnProperty(\"intValue\")) {\n                            if (typeof message.intValue === \"number\")\n                                object.intValue = options.longs === String ? String(message.intValue) : message.intValue;\n                            else\n                                object.intValue = options.longs === String ? $util.Long.prototype.toString.call(message.intValue) : options.longs === Number ? new $util.LongBits(message.intValue.low >>> 0, message.intValue.high >>> 0).toNumber() : message.intValue;\n                            if (options.oneofs)\n                                object.value = \"intValue\";\n                        }\n                        if (message.doubleValue != null && message.hasOwnProperty(\"doubleValue\")) {\n                            object.doubleValue = options.json && !isFinite(message.doubleValue) ? String(message.doubleValue) : message.doubleValue;\n                            if (options.oneofs)\n                                object.value = \"doubleValue\";\n                        }\n                        if (message.arrayValue != null && message.hasOwnProperty(\"arrayValue\")) {\n                            object.arrayValue = $root.opentelemetry.proto.common.v1.ArrayValue.toObject(message.arrayValue, options);\n                            if (options.oneofs)\n                                object.value = \"arrayValue\";\n                        }\n                        if (message.kvlistValue != null && message.hasOwnProperty(\"kvlistValue\")) {\n                            object.kvlistValue = $root.opentelemetry.proto.common.v1.KeyValueList.toObject(message.kvlistValue, options);\n                            if (options.oneofs)\n                                object.value = \"kvlistValue\";\n                        }\n                        if (message.bytesValue != null && message.hasOwnProperty(\"bytesValue\")) {\n                            object.bytesValue = options.bytes === String ? $util.base64.encode(message.bytesValue, 0, message.bytesValue.length) : options.bytes === Array ? Array.prototype.slice.call(message.bytesValue) : message.bytesValue;\n                            if (options.oneofs)\n                                object.value = \"bytesValue\";\n                        }\n                        return object;\n                    };\n\n                    /**\n                     * Converts this AnyValue to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.common.v1.AnyValue\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    AnyValue.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    /**\n                     * Gets the default type url for AnyValue\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.common.v1.AnyValue\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    AnyValue.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.common.v1.AnyValue\";\n                    };\n\n                    return AnyValue;\n                })();\n\n                v1.ArrayValue = (function() {\n\n                    /**\n                     * Properties of an ArrayValue.\n                     * @memberof opentelemetry.proto.common.v1\n                     * @interface IArrayValue\n                     * @property {Array.<opentelemetry.proto.common.v1.IAnyValue>|null} [values] ArrayValue values\n                     */\n\n                    /**\n                     * Constructs a new ArrayValue.\n                     * @memberof opentelemetry.proto.common.v1\n                     * @classdesc Represents an ArrayValue.\n                     * @implements IArrayValue\n                     * @constructor\n                     * @param {opentelemetry.proto.common.v1.IArrayValue=} [properties] Properties to set\n                     */\n                    function ArrayValue(properties) {\n                        this.values = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * ArrayValue values.\n                     * @member {Array.<opentelemetry.proto.common.v1.IAnyValue>} values\n                     * @memberof opentelemetry.proto.common.v1.ArrayValue\n                     * @instance\n                     */\n                    ArrayValue.prototype.values = $util.emptyArray;\n\n                    /**\n                     * Creates a new ArrayValue instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.common.v1.ArrayValue\n                     * @static\n                     * @param {opentelemetry.proto.common.v1.IArrayValue=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.common.v1.ArrayValue} ArrayValue instance\n                     */\n                    ArrayValue.create = function create(properties) {\n                        return new ArrayValue(properties);\n                    };\n\n                    /**\n                     * Encodes the specified ArrayValue message. Does not implicitly {@link opentelemetry.proto.common.v1.ArrayValue.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.common.v1.ArrayValue\n                     * @static\n                     * @param {opentelemetry.proto.common.v1.IArrayValue} message ArrayValue message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    ArrayValue.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.values != null && message.values.length)\n                            for (var i = 0; i < message.values.length; ++i)\n                                $root.opentelemetry.proto.common.v1.AnyValue.encode(message.values[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified ArrayValue message, length delimited. Does not implicitly {@link opentelemetry.proto.common.v1.ArrayValue.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.common.v1.ArrayValue\n                     * @static\n                     * @param {opentelemetry.proto.common.v1.IArrayValue} message ArrayValue message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    ArrayValue.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes an ArrayValue message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.common.v1.ArrayValue\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.common.v1.ArrayValue} ArrayValue\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    ArrayValue.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.common.v1.ArrayValue();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 1: {\n                                    if (!(message.values && message.values.length))\n                                        message.values = [];\n                                    message.values.push($root.opentelemetry.proto.common.v1.AnyValue.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes an ArrayValue message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.common.v1.ArrayValue\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.common.v1.ArrayValue} ArrayValue\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    ArrayValue.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies an ArrayValue message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.common.v1.ArrayValue\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    ArrayValue.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.values != null && message.hasOwnProperty(\"values\")) {\n                            if (!Array.isArray(message.values))\n                                return \"values: array expected\";\n                            for (var i = 0; i < message.values.length; ++i) {\n                                var error = $root.opentelemetry.proto.common.v1.AnyValue.verify(message.values[i]);\n                                if (error)\n                                    return \"values.\" + error;\n                            }\n                        }\n                        return null;\n                    };\n\n                    /**\n                     * Creates an ArrayValue message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.common.v1.ArrayValue\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.common.v1.ArrayValue} ArrayValue\n                     */\n                    ArrayValue.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.common.v1.ArrayValue)\n                            return object;\n                        var message = new $root.opentelemetry.proto.common.v1.ArrayValue();\n                        if (object.values) {\n                            if (!Array.isArray(object.values))\n                                throw TypeError(\".opentelemetry.proto.common.v1.ArrayValue.values: array expected\");\n                            message.values = [];\n                            for (var i = 0; i < object.values.length; ++i) {\n                                if (typeof object.values[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.common.v1.ArrayValue.values: object expected\");\n                                message.values[i] = $root.opentelemetry.proto.common.v1.AnyValue.fromObject(object.values[i]);\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from an ArrayValue message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.common.v1.ArrayValue\n                     * @static\n                     * @param {opentelemetry.proto.common.v1.ArrayValue} message ArrayValue\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    ArrayValue.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults)\n                            object.values = [];\n                        if (message.values && message.values.length) {\n                            object.values = [];\n                            for (var j = 0; j < message.values.length; ++j)\n                                object.values[j] = $root.opentelemetry.proto.common.v1.AnyValue.toObject(message.values[j], options);\n                        }\n                        return object;\n                    };\n\n                    /**\n                     * Converts this ArrayValue to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.common.v1.ArrayValue\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    ArrayValue.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    /**\n                     * Gets the default type url for ArrayValue\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.common.v1.ArrayValue\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    ArrayValue.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.common.v1.ArrayValue\";\n                    };\n\n                    return ArrayValue;\n                })();\n\n                v1.KeyValueList = (function() {\n\n                    /**\n                     * Properties of a KeyValueList.\n                     * @memberof opentelemetry.proto.common.v1\n                     * @interface IKeyValueList\n                     * @property {Array.<opentelemetry.proto.common.v1.IKeyValue>|null} [values] KeyValueList values\n                     */\n\n                    /**\n                     * Constructs a new KeyValueList.\n                     * @memberof opentelemetry.proto.common.v1\n                     * @classdesc Represents a KeyValueList.\n                     * @implements IKeyValueList\n                     * @constructor\n                     * @param {opentelemetry.proto.common.v1.IKeyValueList=} [properties] Properties to set\n                     */\n                    function KeyValueList(properties) {\n                        this.values = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * KeyValueList values.\n                     * @member {Array.<opentelemetry.proto.common.v1.IKeyValue>} values\n                     * @memberof opentelemetry.proto.common.v1.KeyValueList\n                     * @instance\n                     */\n                    KeyValueList.prototype.values = $util.emptyArray;\n\n                    /**\n                     * Creates a new KeyValueList instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.common.v1.KeyValueList\n                     * @static\n                     * @param {opentelemetry.proto.common.v1.IKeyValueList=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.common.v1.KeyValueList} KeyValueList instance\n                     */\n                    KeyValueList.create = function create(properties) {\n                        return new KeyValueList(properties);\n                    };\n\n                    /**\n                     * Encodes the specified KeyValueList message. Does not implicitly {@link opentelemetry.proto.common.v1.KeyValueList.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.common.v1.KeyValueList\n                     * @static\n                     * @param {opentelemetry.proto.common.v1.IKeyValueList} message KeyValueList message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    KeyValueList.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.values != null && message.values.length)\n                            for (var i = 0; i < message.values.length; ++i)\n                                $root.opentelemetry.proto.common.v1.KeyValue.encode(message.values[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified KeyValueList message, length delimited. Does not implicitly {@link opentelemetry.proto.common.v1.KeyValueList.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.common.v1.KeyValueList\n                     * @static\n                     * @param {opentelemetry.proto.common.v1.IKeyValueList} message KeyValueList message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    KeyValueList.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes a KeyValueList message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.common.v1.KeyValueList\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.common.v1.KeyValueList} KeyValueList\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    KeyValueList.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.common.v1.KeyValueList();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 1: {\n                                    if (!(message.values && message.values.length))\n                                        message.values = [];\n                                    message.values.push($root.opentelemetry.proto.common.v1.KeyValue.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes a KeyValueList message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.common.v1.KeyValueList\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.common.v1.KeyValueList} KeyValueList\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    KeyValueList.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies a KeyValueList message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.common.v1.KeyValueList\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    KeyValueList.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.values != null && message.hasOwnProperty(\"values\")) {\n                            if (!Array.isArray(message.values))\n                                return \"values: array expected\";\n                            for (var i = 0; i < message.values.length; ++i) {\n                                var error = $root.opentelemetry.proto.common.v1.KeyValue.verify(message.values[i]);\n                                if (error)\n                                    return \"values.\" + error;\n                            }\n                        }\n                        return null;\n                    };\n\n                    /**\n                     * Creates a KeyValueList message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.common.v1.KeyValueList\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.common.v1.KeyValueList} KeyValueList\n                     */\n                    KeyValueList.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.common.v1.KeyValueList)\n                            return object;\n                        var message = new $root.opentelemetry.proto.common.v1.KeyValueList();\n                        if (object.values) {\n                            if (!Array.isArray(object.values))\n                                throw TypeError(\".opentelemetry.proto.common.v1.KeyValueList.values: array expected\");\n                            message.values = [];\n                            for (var i = 0; i < object.values.length; ++i) {\n                                if (typeof object.values[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.common.v1.KeyValueList.values: object expected\");\n                                message.values[i] = $root.opentelemetry.proto.common.v1.KeyValue.fromObject(object.values[i]);\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from a KeyValueList message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.common.v1.KeyValueList\n                     * @static\n                     * @param {opentelemetry.proto.common.v1.KeyValueList} message KeyValueList\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    KeyValueList.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults)\n                            object.values = [];\n                        if (message.values && message.values.length) {\n                            object.values = [];\n                            for (var j = 0; j < message.values.length; ++j)\n                                object.values[j] = $root.opentelemetry.proto.common.v1.KeyValue.toObject(message.values[j], options);\n                        }\n                        return object;\n                    };\n\n                    /**\n                     * Converts this KeyValueList to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.common.v1.KeyValueList\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    KeyValueList.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    /**\n                     * Gets the default type url for KeyValueList\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.common.v1.KeyValueList\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    KeyValueList.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.common.v1.KeyValueList\";\n                    };\n\n                    return KeyValueList;\n                })();\n\n                v1.KeyValue = (function() {\n\n                    /**\n                     * Properties of a KeyValue.\n                     * @memberof opentelemetry.proto.common.v1\n                     * @interface IKeyValue\n                     * @property {string|null} [key] KeyValue key\n                     * @property {opentelemetry.proto.common.v1.IAnyValue|null} [value] KeyValue value\n                     */\n\n                    /**\n                     * Constructs a new KeyValue.\n                     * @memberof opentelemetry.proto.common.v1\n                     * @classdesc Represents a KeyValue.\n                     * @implements IKeyValue\n                     * @constructor\n                     * @param {opentelemetry.proto.common.v1.IKeyValue=} [properties] Properties to set\n                     */\n                    function KeyValue(properties) {\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * KeyValue key.\n                     * @member {string|null|undefined} key\n                     * @memberof opentelemetry.proto.common.v1.KeyValue\n                     * @instance\n                     */\n                    KeyValue.prototype.key = null;\n\n                    /**\n                     * KeyValue value.\n                     * @member {opentelemetry.proto.common.v1.IAnyValue|null|undefined} value\n                     * @memberof opentelemetry.proto.common.v1.KeyValue\n                     * @instance\n                     */\n                    KeyValue.prototype.value = null;\n\n                    /**\n                     * Creates a new KeyValue instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.common.v1.KeyValue\n                     * @static\n                     * @param {opentelemetry.proto.common.v1.IKeyValue=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.common.v1.KeyValue} KeyValue instance\n                     */\n                    KeyValue.create = function create(properties) {\n                        return new KeyValue(properties);\n                    };\n\n                    /**\n                     * Encodes the specified KeyValue message. Does not implicitly {@link opentelemetry.proto.common.v1.KeyValue.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.common.v1.KeyValue\n                     * @static\n                     * @param {opentelemetry.proto.common.v1.IKeyValue} message KeyValue message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    KeyValue.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.key != null && Object.hasOwnProperty.call(message, \"key\"))\n                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.key);\n                        if (message.value != null && Object.hasOwnProperty.call(message, \"value\"))\n                            $root.opentelemetry.proto.common.v1.AnyValue.encode(message.value, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified KeyValue message, length delimited. Does not implicitly {@link opentelemetry.proto.common.v1.KeyValue.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.common.v1.KeyValue\n                     * @static\n                     * @param {opentelemetry.proto.common.v1.IKeyValue} message KeyValue message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    KeyValue.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes a KeyValue message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.common.v1.KeyValue\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.common.v1.KeyValue} KeyValue\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    KeyValue.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.common.v1.KeyValue();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 1: {\n                                    message.key = reader.string();\n                                    break;\n                                }\n                            case 2: {\n                                    message.value = $root.opentelemetry.proto.common.v1.AnyValue.decode(reader, reader.uint32());\n                                    break;\n                                }\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes a KeyValue message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.common.v1.KeyValue\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.common.v1.KeyValue} KeyValue\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    KeyValue.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies a KeyValue message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.common.v1.KeyValue\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    KeyValue.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.key != null && message.hasOwnProperty(\"key\"))\n                            if (!$util.isString(message.key))\n                                return \"key: string expected\";\n                        if (message.value != null && message.hasOwnProperty(\"value\")) {\n                            var error = $root.opentelemetry.proto.common.v1.AnyValue.verify(message.value);\n                            if (error)\n                                return \"value.\" + error;\n                        }\n                        return null;\n                    };\n\n                    /**\n                     * Creates a KeyValue message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.common.v1.KeyValue\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.common.v1.KeyValue} KeyValue\n                     */\n                    KeyValue.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.common.v1.KeyValue)\n                            return object;\n                        var message = new $root.opentelemetry.proto.common.v1.KeyValue();\n                        if (object.key != null)\n                            message.key = String(object.key);\n                        if (object.value != null) {\n                            if (typeof object.value !== \"object\")\n                                throw TypeError(\".opentelemetry.proto.common.v1.KeyValue.value: object expected\");\n                            message.value = $root.opentelemetry.proto.common.v1.AnyValue.fromObject(object.value);\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from a KeyValue message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.common.v1.KeyValue\n                     * @static\n                     * @param {opentelemetry.proto.common.v1.KeyValue} message KeyValue\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    KeyValue.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.defaults) {\n                            object.key = \"\";\n                            object.value = null;\n                        }\n                        if (message.key != null && message.hasOwnProperty(\"key\"))\n                            object.key = message.key;\n                        if (message.value != null && message.hasOwnProperty(\"value\"))\n                            object.value = $root.opentelemetry.proto.common.v1.AnyValue.toObject(message.value, options);\n                        return object;\n                    };\n\n                    /**\n                     * Converts this KeyValue to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.common.v1.KeyValue\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    KeyValue.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    /**\n                     * Gets the default type url for KeyValue\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.common.v1.KeyValue\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    KeyValue.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.common.v1.KeyValue\";\n                    };\n\n                    return KeyValue;\n                })();\n\n                v1.InstrumentationScope = (function() {\n\n                    /**\n                     * Properties of an InstrumentationScope.\n                     * @memberof opentelemetry.proto.common.v1\n                     * @interface IInstrumentationScope\n                     * @property {string|null} [name] InstrumentationScope name\n                     * @property {string|null} [version] InstrumentationScope version\n                     * @property {Array.<opentelemetry.proto.common.v1.IKeyValue>|null} [attributes] InstrumentationScope attributes\n                     * @property {number|null} [droppedAttributesCount] InstrumentationScope droppedAttributesCount\n                     */\n\n                    /**\n                     * Constructs a new InstrumentationScope.\n                     * @memberof opentelemetry.proto.common.v1\n                     * @classdesc Represents an InstrumentationScope.\n                     * @implements IInstrumentationScope\n                     * @constructor\n                     * @param {opentelemetry.proto.common.v1.IInstrumentationScope=} [properties] Properties to set\n                     */\n                    function InstrumentationScope(properties) {\n                        this.attributes = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * InstrumentationScope name.\n                     * @member {string|null|undefined} name\n                     * @memberof opentelemetry.proto.common.v1.InstrumentationScope\n                     * @instance\n                     */\n                    InstrumentationScope.prototype.name = null;\n\n                    /**\n                     * InstrumentationScope version.\n                     * @member {string|null|undefined} version\n                     * @memberof opentelemetry.proto.common.v1.InstrumentationScope\n                     * @instance\n                     */\n                    InstrumentationScope.prototype.version = null;\n\n                    /**\n                     * InstrumentationScope attributes.\n                     * @member {Array.<opentelemetry.proto.common.v1.IKeyValue>} attributes\n                     * @memberof opentelemetry.proto.common.v1.InstrumentationScope\n                     * @instance\n                     */\n                    InstrumentationScope.prototype.attributes = $util.emptyArray;\n\n                    /**\n                     * InstrumentationScope droppedAttributesCount.\n                     * @member {number|null|undefined} droppedAttributesCount\n                     * @memberof opentelemetry.proto.common.v1.InstrumentationScope\n                     * @instance\n                     */\n                    InstrumentationScope.prototype.droppedAttributesCount = null;\n\n                    /**\n                     * Creates a new InstrumentationScope instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.common.v1.InstrumentationScope\n                     * @static\n                     * @param {opentelemetry.proto.common.v1.IInstrumentationScope=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.common.v1.InstrumentationScope} InstrumentationScope instance\n                     */\n                    InstrumentationScope.create = function create(properties) {\n                        return new InstrumentationScope(properties);\n                    };\n\n                    /**\n                     * Encodes the specified InstrumentationScope message. Does not implicitly {@link opentelemetry.proto.common.v1.InstrumentationScope.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.common.v1.InstrumentationScope\n                     * @static\n                     * @param {opentelemetry.proto.common.v1.IInstrumentationScope} message InstrumentationScope message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    InstrumentationScope.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\n                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n                        if (message.version != null && Object.hasOwnProperty.call(message, \"version\"))\n                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.version);\n                        if (message.attributes != null && message.attributes.length)\n                            for (var i = 0; i < message.attributes.length; ++i)\n                                $root.opentelemetry.proto.common.v1.KeyValue.encode(message.attributes[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n                        if (message.droppedAttributesCount != null && Object.hasOwnProperty.call(message, \"droppedAttributesCount\"))\n                            writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.droppedAttributesCount);\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified InstrumentationScope message, length delimited. Does not implicitly {@link opentelemetry.proto.common.v1.InstrumentationScope.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.common.v1.InstrumentationScope\n                     * @static\n                     * @param {opentelemetry.proto.common.v1.IInstrumentationScope} message InstrumentationScope message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    InstrumentationScope.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes an InstrumentationScope message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.common.v1.InstrumentationScope\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.common.v1.InstrumentationScope} InstrumentationScope\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    InstrumentationScope.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.common.v1.InstrumentationScope();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 1: {\n                                    message.name = reader.string();\n                                    break;\n                                }\n                            case 2: {\n                                    message.version = reader.string();\n                                    break;\n                                }\n                            case 3: {\n                                    if (!(message.attributes && message.attributes.length))\n                                        message.attributes = [];\n                                    message.attributes.push($root.opentelemetry.proto.common.v1.KeyValue.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                            case 4: {\n                                    message.droppedAttributesCount = reader.uint32();\n                                    break;\n                                }\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes an InstrumentationScope message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.common.v1.InstrumentationScope\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.common.v1.InstrumentationScope} InstrumentationScope\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    InstrumentationScope.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies an InstrumentationScope message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.common.v1.InstrumentationScope\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    InstrumentationScope.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.name != null && message.hasOwnProperty(\"name\"))\n                            if (!$util.isString(message.name))\n                                return \"name: string expected\";\n                        if (message.version != null && message.hasOwnProperty(\"version\"))\n                            if (!$util.isString(message.version))\n                                return \"version: string expected\";\n                        if (message.attributes != null && message.hasOwnProperty(\"attributes\")) {\n                            if (!Array.isArray(message.attributes))\n                                return \"attributes: array expected\";\n                            for (var i = 0; i < message.attributes.length; ++i) {\n                                var error = $root.opentelemetry.proto.common.v1.KeyValue.verify(message.attributes[i]);\n                                if (error)\n                                    return \"attributes.\" + error;\n                            }\n                        }\n                        if (message.droppedAttributesCount != null && message.hasOwnProperty(\"droppedAttributesCount\"))\n                            if (!$util.isInteger(message.droppedAttributesCount))\n                                return \"droppedAttributesCount: integer expected\";\n                        return null;\n                    };\n\n                    /**\n                     * Creates an InstrumentationScope message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.common.v1.InstrumentationScope\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.common.v1.InstrumentationScope} InstrumentationScope\n                     */\n                    InstrumentationScope.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.common.v1.InstrumentationScope)\n                            return object;\n                        var message = new $root.opentelemetry.proto.common.v1.InstrumentationScope();\n                        if (object.name != null)\n                            message.name = String(object.name);\n                        if (object.version != null)\n                            message.version = String(object.version);\n                        if (object.attributes) {\n                            if (!Array.isArray(object.attributes))\n                                throw TypeError(\".opentelemetry.proto.common.v1.InstrumentationScope.attributes: array expected\");\n                            message.attributes = [];\n                            for (var i = 0; i < object.attributes.length; ++i) {\n                                if (typeof object.attributes[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.common.v1.InstrumentationScope.attributes: object expected\");\n                                message.attributes[i] = $root.opentelemetry.proto.common.v1.KeyValue.fromObject(object.attributes[i]);\n                            }\n                        }\n                        if (object.droppedAttributesCount != null)\n                            message.droppedAttributesCount = object.droppedAttributesCount >>> 0;\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from an InstrumentationScope message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.common.v1.InstrumentationScope\n                     * @static\n                     * @param {opentelemetry.proto.common.v1.InstrumentationScope} message InstrumentationScope\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    InstrumentationScope.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults)\n                            object.attributes = [];\n                        if (options.defaults) {\n                            object.name = \"\";\n                            object.version = \"\";\n                            object.droppedAttributesCount = 0;\n                        }\n                        if (message.name != null && message.hasOwnProperty(\"name\"))\n                            object.name = message.name;\n                        if (message.version != null && message.hasOwnProperty(\"version\"))\n                            object.version = message.version;\n                        if (message.attributes && message.attributes.length) {\n                            object.attributes = [];\n                            for (var j = 0; j < message.attributes.length; ++j)\n                                object.attributes[j] = $root.opentelemetry.proto.common.v1.KeyValue.toObject(message.attributes[j], options);\n                        }\n                        if (message.droppedAttributesCount != null && message.hasOwnProperty(\"droppedAttributesCount\"))\n                            object.droppedAttributesCount = message.droppedAttributesCount;\n                        return object;\n                    };\n\n                    /**\n                     * Converts this InstrumentationScope to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.common.v1.InstrumentationScope\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    InstrumentationScope.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    /**\n                     * Gets the default type url for InstrumentationScope\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.common.v1.InstrumentationScope\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    InstrumentationScope.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.common.v1.InstrumentationScope\";\n                    };\n\n                    return InstrumentationScope;\n                })();\n\n                return v1;\n            })();\n\n            return common;\n        })();\n\n        proto.resource = (function() {\n\n            /**\n             * Namespace resource.\n             * @memberof opentelemetry.proto\n             * @namespace\n             */\n            var resource = {};\n\n            resource.v1 = (function() {\n\n                /**\n                 * Namespace v1.\n                 * @memberof opentelemetry.proto.resource\n                 * @namespace\n                 */\n                var v1 = {};\n\n                v1.Resource = (function() {\n\n                    /**\n                     * Properties of a Resource.\n                     * @memberof opentelemetry.proto.resource.v1\n                     * @interface IResource\n                     * @property {Array.<opentelemetry.proto.common.v1.IKeyValue>|null} [attributes] Resource attributes\n                     * @property {number|null} [droppedAttributesCount] Resource droppedAttributesCount\n                     */\n\n                    /**\n                     * Constructs a new Resource.\n                     * @memberof opentelemetry.proto.resource.v1\n                     * @classdesc Represents a Resource.\n                     * @implements IResource\n                     * @constructor\n                     * @param {opentelemetry.proto.resource.v1.IResource=} [properties] Properties to set\n                     */\n                    function Resource(properties) {\n                        this.attributes = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * Resource attributes.\n                     * @member {Array.<opentelemetry.proto.common.v1.IKeyValue>} attributes\n                     * @memberof opentelemetry.proto.resource.v1.Resource\n                     * @instance\n                     */\n                    Resource.prototype.attributes = $util.emptyArray;\n\n                    /**\n                     * Resource droppedAttributesCount.\n                     * @member {number|null|undefined} droppedAttributesCount\n                     * @memberof opentelemetry.proto.resource.v1.Resource\n                     * @instance\n                     */\n                    Resource.prototype.droppedAttributesCount = null;\n\n                    /**\n                     * Creates a new Resource instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.resource.v1.Resource\n                     * @static\n                     * @param {opentelemetry.proto.resource.v1.IResource=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.resource.v1.Resource} Resource instance\n                     */\n                    Resource.create = function create(properties) {\n                        return new Resource(properties);\n                    };\n\n                    /**\n                     * Encodes the specified Resource message. Does not implicitly {@link opentelemetry.proto.resource.v1.Resource.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.resource.v1.Resource\n                     * @static\n                     * @param {opentelemetry.proto.resource.v1.IResource} message Resource message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    Resource.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.attributes != null && message.attributes.length)\n                            for (var i = 0; i < message.attributes.length; ++i)\n                                $root.opentelemetry.proto.common.v1.KeyValue.encode(message.attributes[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                        if (message.droppedAttributesCount != null && Object.hasOwnProperty.call(message, \"droppedAttributesCount\"))\n                            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.droppedAttributesCount);\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified Resource message, length delimited. Does not implicitly {@link opentelemetry.proto.resource.v1.Resource.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.resource.v1.Resource\n                     * @static\n                     * @param {opentelemetry.proto.resource.v1.IResource} message Resource message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    Resource.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes a Resource message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.resource.v1.Resource\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.resource.v1.Resource} Resource\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    Resource.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.resource.v1.Resource();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 1: {\n                                    if (!(message.attributes && message.attributes.length))\n                                        message.attributes = [];\n                                    message.attributes.push($root.opentelemetry.proto.common.v1.KeyValue.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                            case 2: {\n                                    message.droppedAttributesCount = reader.uint32();\n                                    break;\n                                }\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes a Resource message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.resource.v1.Resource\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.resource.v1.Resource} Resource\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    Resource.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies a Resource message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.resource.v1.Resource\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    Resource.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.attributes != null && message.hasOwnProperty(\"attributes\")) {\n                            if (!Array.isArray(message.attributes))\n                                return \"attributes: array expected\";\n                            for (var i = 0; i < message.attributes.length; ++i) {\n                                var error = $root.opentelemetry.proto.common.v1.KeyValue.verify(message.attributes[i]);\n                                if (error)\n                                    return \"attributes.\" + error;\n                            }\n                        }\n                        if (message.droppedAttributesCount != null && message.hasOwnProperty(\"droppedAttributesCount\"))\n                            if (!$util.isInteger(message.droppedAttributesCount))\n                                return \"droppedAttributesCount: integer expected\";\n                        return null;\n                    };\n\n                    /**\n                     * Creates a Resource message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.resource.v1.Resource\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.resource.v1.Resource} Resource\n                     */\n                    Resource.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.resource.v1.Resource)\n                            return object;\n                        var message = new $root.opentelemetry.proto.resource.v1.Resource();\n                        if (object.attributes) {\n                            if (!Array.isArray(object.attributes))\n                                throw TypeError(\".opentelemetry.proto.resource.v1.Resource.attributes: array expected\");\n                            message.attributes = [];\n                            for (var i = 0; i < object.attributes.length; ++i) {\n                                if (typeof object.attributes[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.resource.v1.Resource.attributes: object expected\");\n                                message.attributes[i] = $root.opentelemetry.proto.common.v1.KeyValue.fromObject(object.attributes[i]);\n                            }\n                        }\n                        if (object.droppedAttributesCount != null)\n                            message.droppedAttributesCount = object.droppedAttributesCount >>> 0;\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from a Resource message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.resource.v1.Resource\n                     * @static\n                     * @param {opentelemetry.proto.resource.v1.Resource} message Resource\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    Resource.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults)\n                            object.attributes = [];\n                        if (options.defaults)\n                            object.droppedAttributesCount = 0;\n                        if (message.attributes && message.attributes.length) {\n                            object.attributes = [];\n                            for (var j = 0; j < message.attributes.length; ++j)\n                                object.attributes[j] = $root.opentelemetry.proto.common.v1.KeyValue.toObject(message.attributes[j], options);\n                        }\n                        if (message.droppedAttributesCount != null && message.hasOwnProperty(\"droppedAttributesCount\"))\n                            object.droppedAttributesCount = message.droppedAttributesCount;\n                        return object;\n                    };\n\n                    /**\n                     * Converts this Resource to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.resource.v1.Resource\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    Resource.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    /**\n                     * Gets the default type url for Resource\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.resource.v1.Resource\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    Resource.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.resource.v1.Resource\";\n                    };\n\n                    return Resource;\n                })();\n\n                return v1;\n            })();\n\n            return resource;\n        })();\n\n        proto.trace = (function() {\n\n            /**\n             * Namespace trace.\n             * @memberof opentelemetry.proto\n             * @namespace\n             */\n            var trace = {};\n\n            trace.v1 = (function() {\n\n                /**\n                 * Namespace v1.\n                 * @memberof opentelemetry.proto.trace\n                 * @namespace\n                 */\n                var v1 = {};\n\n                v1.TracesData = (function() {\n\n                    /**\n                     * Properties of a TracesData.\n                     * @memberof opentelemetry.proto.trace.v1\n                     * @interface ITracesData\n                     * @property {Array.<opentelemetry.proto.trace.v1.IResourceSpans>|null} [resourceSpans] TracesData resourceSpans\n                     */\n\n                    /**\n                     * Constructs a new TracesData.\n                     * @memberof opentelemetry.proto.trace.v1\n                     * @classdesc Represents a TracesData.\n                     * @implements ITracesData\n                     * @constructor\n                     * @param {opentelemetry.proto.trace.v1.ITracesData=} [properties] Properties to set\n                     */\n                    function TracesData(properties) {\n                        this.resourceSpans = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * TracesData resourceSpans.\n                     * @member {Array.<opentelemetry.proto.trace.v1.IResourceSpans>} resourceSpans\n                     * @memberof opentelemetry.proto.trace.v1.TracesData\n                     * @instance\n                     */\n                    TracesData.prototype.resourceSpans = $util.emptyArray;\n\n                    /**\n                     * Creates a new TracesData instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.trace.v1.TracesData\n                     * @static\n                     * @param {opentelemetry.proto.trace.v1.ITracesData=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.trace.v1.TracesData} TracesData instance\n                     */\n                    TracesData.create = function create(properties) {\n                        return new TracesData(properties);\n                    };\n\n                    /**\n                     * Encodes the specified TracesData message. Does not implicitly {@link opentelemetry.proto.trace.v1.TracesData.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.trace.v1.TracesData\n                     * @static\n                     * @param {opentelemetry.proto.trace.v1.ITracesData} message TracesData message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    TracesData.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.resourceSpans != null && message.resourceSpans.length)\n                            for (var i = 0; i < message.resourceSpans.length; ++i)\n                                $root.opentelemetry.proto.trace.v1.ResourceSpans.encode(message.resourceSpans[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified TracesData message, length delimited. Does not implicitly {@link opentelemetry.proto.trace.v1.TracesData.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.trace.v1.TracesData\n                     * @static\n                     * @param {opentelemetry.proto.trace.v1.ITracesData} message TracesData message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    TracesData.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes a TracesData message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.trace.v1.TracesData\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.trace.v1.TracesData} TracesData\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    TracesData.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.trace.v1.TracesData();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 1: {\n                                    if (!(message.resourceSpans && message.resourceSpans.length))\n                                        message.resourceSpans = [];\n                                    message.resourceSpans.push($root.opentelemetry.proto.trace.v1.ResourceSpans.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes a TracesData message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.trace.v1.TracesData\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.trace.v1.TracesData} TracesData\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    TracesData.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies a TracesData message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.trace.v1.TracesData\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    TracesData.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.resourceSpans != null && message.hasOwnProperty(\"resourceSpans\")) {\n                            if (!Array.isArray(message.resourceSpans))\n                                return \"resourceSpans: array expected\";\n                            for (var i = 0; i < message.resourceSpans.length; ++i) {\n                                var error = $root.opentelemetry.proto.trace.v1.ResourceSpans.verify(message.resourceSpans[i]);\n                                if (error)\n                                    return \"resourceSpans.\" + error;\n                            }\n                        }\n                        return null;\n                    };\n\n                    /**\n                     * Creates a TracesData message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.trace.v1.TracesData\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.trace.v1.TracesData} TracesData\n                     */\n                    TracesData.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.trace.v1.TracesData)\n                            return object;\n                        var message = new $root.opentelemetry.proto.trace.v1.TracesData();\n                        if (object.resourceSpans) {\n                            if (!Array.isArray(object.resourceSpans))\n                                throw TypeError(\".opentelemetry.proto.trace.v1.TracesData.resourceSpans: array expected\");\n                            message.resourceSpans = [];\n                            for (var i = 0; i < object.resourceSpans.length; ++i) {\n                                if (typeof object.resourceSpans[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.trace.v1.TracesData.resourceSpans: object expected\");\n                                message.resourceSpans[i] = $root.opentelemetry.proto.trace.v1.ResourceSpans.fromObject(object.resourceSpans[i]);\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from a TracesData message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.trace.v1.TracesData\n                     * @static\n                     * @param {opentelemetry.proto.trace.v1.TracesData} message TracesData\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    TracesData.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults)\n                            object.resourceSpans = [];\n                        if (message.resourceSpans && message.resourceSpans.length) {\n                            object.resourceSpans = [];\n                            for (var j = 0; j < message.resourceSpans.length; ++j)\n                                object.resourceSpans[j] = $root.opentelemetry.proto.trace.v1.ResourceSpans.toObject(message.resourceSpans[j], options);\n                        }\n                        return object;\n                    };\n\n                    /**\n                     * Converts this TracesData to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.trace.v1.TracesData\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    TracesData.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    /**\n                     * Gets the default type url for TracesData\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.trace.v1.TracesData\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    TracesData.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.trace.v1.TracesData\";\n                    };\n\n                    return TracesData;\n                })();\n\n                v1.ResourceSpans = (function() {\n\n                    /**\n                     * Properties of a ResourceSpans.\n                     * @memberof opentelemetry.proto.trace.v1\n                     * @interface IResourceSpans\n                     * @property {opentelemetry.proto.resource.v1.IResource|null} [resource] ResourceSpans resource\n                     * @property {Array.<opentelemetry.proto.trace.v1.IScopeSpans>|null} [scopeSpans] ResourceSpans scopeSpans\n                     * @property {string|null} [schemaUrl] ResourceSpans schemaUrl\n                     */\n\n                    /**\n                     * Constructs a new ResourceSpans.\n                     * @memberof opentelemetry.proto.trace.v1\n                     * @classdesc Represents a ResourceSpans.\n                     * @implements IResourceSpans\n                     * @constructor\n                     * @param {opentelemetry.proto.trace.v1.IResourceSpans=} [properties] Properties to set\n                     */\n                    function ResourceSpans(properties) {\n                        this.scopeSpans = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * ResourceSpans resource.\n                     * @member {opentelemetry.proto.resource.v1.IResource|null|undefined} resource\n                     * @memberof opentelemetry.proto.trace.v1.ResourceSpans\n                     * @instance\n                     */\n                    ResourceSpans.prototype.resource = null;\n\n                    /**\n                     * ResourceSpans scopeSpans.\n                     * @member {Array.<opentelemetry.proto.trace.v1.IScopeSpans>} scopeSpans\n                     * @memberof opentelemetry.proto.trace.v1.ResourceSpans\n                     * @instance\n                     */\n                    ResourceSpans.prototype.scopeSpans = $util.emptyArray;\n\n                    /**\n                     * ResourceSpans schemaUrl.\n                     * @member {string|null|undefined} schemaUrl\n                     * @memberof opentelemetry.proto.trace.v1.ResourceSpans\n                     * @instance\n                     */\n                    ResourceSpans.prototype.schemaUrl = null;\n\n                    /**\n                     * Creates a new ResourceSpans instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.trace.v1.ResourceSpans\n                     * @static\n                     * @param {opentelemetry.proto.trace.v1.IResourceSpans=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.trace.v1.ResourceSpans} ResourceSpans instance\n                     */\n                    ResourceSpans.create = function create(properties) {\n                        return new ResourceSpans(properties);\n                    };\n\n                    /**\n                     * Encodes the specified ResourceSpans message. Does not implicitly {@link opentelemetry.proto.trace.v1.ResourceSpans.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.trace.v1.ResourceSpans\n                     * @static\n                     * @param {opentelemetry.proto.trace.v1.IResourceSpans} message ResourceSpans message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    ResourceSpans.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.resource != null && Object.hasOwnProperty.call(message, \"resource\"))\n                            $root.opentelemetry.proto.resource.v1.Resource.encode(message.resource, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                        if (message.scopeSpans != null && message.scopeSpans.length)\n                            for (var i = 0; i < message.scopeSpans.length; ++i)\n                                $root.opentelemetry.proto.trace.v1.ScopeSpans.encode(message.scopeSpans[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                        if (message.schemaUrl != null && Object.hasOwnProperty.call(message, \"schemaUrl\"))\n                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.schemaUrl);\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified ResourceSpans message, length delimited. Does not implicitly {@link opentelemetry.proto.trace.v1.ResourceSpans.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.trace.v1.ResourceSpans\n                     * @static\n                     * @param {opentelemetry.proto.trace.v1.IResourceSpans} message ResourceSpans message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    ResourceSpans.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes a ResourceSpans message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.trace.v1.ResourceSpans\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.trace.v1.ResourceSpans} ResourceSpans\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    ResourceSpans.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.trace.v1.ResourceSpans();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 1: {\n                                    message.resource = $root.opentelemetry.proto.resource.v1.Resource.decode(reader, reader.uint32());\n                                    break;\n                                }\n                            case 2: {\n                                    if (!(message.scopeSpans && message.scopeSpans.length))\n                                        message.scopeSpans = [];\n                                    message.scopeSpans.push($root.opentelemetry.proto.trace.v1.ScopeSpans.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                            case 3: {\n                                    message.schemaUrl = reader.string();\n                                    break;\n                                }\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes a ResourceSpans message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.trace.v1.ResourceSpans\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.trace.v1.ResourceSpans} ResourceSpans\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    ResourceSpans.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies a ResourceSpans message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.trace.v1.ResourceSpans\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    ResourceSpans.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.resource != null && message.hasOwnProperty(\"resource\")) {\n                            var error = $root.opentelemetry.proto.resource.v1.Resource.verify(message.resource);\n                            if (error)\n                                return \"resource.\" + error;\n                        }\n                        if (message.scopeSpans != null && message.hasOwnProperty(\"scopeSpans\")) {\n                            if (!Array.isArray(message.scopeSpans))\n                                return \"scopeSpans: array expected\";\n                            for (var i = 0; i < message.scopeSpans.length; ++i) {\n                                var error = $root.opentelemetry.proto.trace.v1.ScopeSpans.verify(message.scopeSpans[i]);\n                                if (error)\n                                    return \"scopeSpans.\" + error;\n                            }\n                        }\n                        if (message.schemaUrl != null && message.hasOwnProperty(\"schemaUrl\"))\n                            if (!$util.isString(message.schemaUrl))\n                                return \"schemaUrl: string expected\";\n                        return null;\n                    };\n\n                    /**\n                     * Creates a ResourceSpans message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.trace.v1.ResourceSpans\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.trace.v1.ResourceSpans} ResourceSpans\n                     */\n                    ResourceSpans.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.trace.v1.ResourceSpans)\n                            return object;\n                        var message = new $root.opentelemetry.proto.trace.v1.ResourceSpans();\n                        if (object.resource != null) {\n                            if (typeof object.resource !== \"object\")\n                                throw TypeError(\".opentelemetry.proto.trace.v1.ResourceSpans.resource: object expected\");\n                            message.resource = $root.opentelemetry.proto.resource.v1.Resource.fromObject(object.resource);\n                        }\n                        if (object.scopeSpans) {\n                            if (!Array.isArray(object.scopeSpans))\n                                throw TypeError(\".opentelemetry.proto.trace.v1.ResourceSpans.scopeSpans: array expected\");\n                            message.scopeSpans = [];\n                            for (var i = 0; i < object.scopeSpans.length; ++i) {\n                                if (typeof object.scopeSpans[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.trace.v1.ResourceSpans.scopeSpans: object expected\");\n                                message.scopeSpans[i] = $root.opentelemetry.proto.trace.v1.ScopeSpans.fromObject(object.scopeSpans[i]);\n                            }\n                        }\n                        if (object.schemaUrl != null)\n                            message.schemaUrl = String(object.schemaUrl);\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from a ResourceSpans message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.trace.v1.ResourceSpans\n                     * @static\n                     * @param {opentelemetry.proto.trace.v1.ResourceSpans} message ResourceSpans\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    ResourceSpans.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults)\n                            object.scopeSpans = [];\n                        if (options.defaults) {\n                            object.resource = null;\n                            object.schemaUrl = \"\";\n                        }\n                        if (message.resource != null && message.hasOwnProperty(\"resource\"))\n                            object.resource = $root.opentelemetry.proto.resource.v1.Resource.toObject(message.resource, options);\n                        if (message.scopeSpans && message.scopeSpans.length) {\n                            object.scopeSpans = [];\n                            for (var j = 0; j < message.scopeSpans.length; ++j)\n                                object.scopeSpans[j] = $root.opentelemetry.proto.trace.v1.ScopeSpans.toObject(message.scopeSpans[j], options);\n                        }\n                        if (message.schemaUrl != null && message.hasOwnProperty(\"schemaUrl\"))\n                            object.schemaUrl = message.schemaUrl;\n                        return object;\n                    };\n\n                    /**\n                     * Converts this ResourceSpans to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.trace.v1.ResourceSpans\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    ResourceSpans.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    /**\n                     * Gets the default type url for ResourceSpans\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.trace.v1.ResourceSpans\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    ResourceSpans.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.trace.v1.ResourceSpans\";\n                    };\n\n                    return ResourceSpans;\n                })();\n\n                v1.ScopeSpans = (function() {\n\n                    /**\n                     * Properties of a ScopeSpans.\n                     * @memberof opentelemetry.proto.trace.v1\n                     * @interface IScopeSpans\n                     * @property {opentelemetry.proto.common.v1.IInstrumentationScope|null} [scope] ScopeSpans scope\n                     * @property {Array.<opentelemetry.proto.trace.v1.ISpan>|null} [spans] ScopeSpans spans\n                     * @property {string|null} [schemaUrl] ScopeSpans schemaUrl\n                     */\n\n                    /**\n                     * Constructs a new ScopeSpans.\n                     * @memberof opentelemetry.proto.trace.v1\n                     * @classdesc Represents a ScopeSpans.\n                     * @implements IScopeSpans\n                     * @constructor\n                     * @param {opentelemetry.proto.trace.v1.IScopeSpans=} [properties] Properties to set\n                     */\n                    function ScopeSpans(properties) {\n                        this.spans = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * ScopeSpans scope.\n                     * @member {opentelemetry.proto.common.v1.IInstrumentationScope|null|undefined} scope\n                     * @memberof opentelemetry.proto.trace.v1.ScopeSpans\n                     * @instance\n                     */\n                    ScopeSpans.prototype.scope = null;\n\n                    /**\n                     * ScopeSpans spans.\n                     * @member {Array.<opentelemetry.proto.trace.v1.ISpan>} spans\n                     * @memberof opentelemetry.proto.trace.v1.ScopeSpans\n                     * @instance\n                     */\n                    ScopeSpans.prototype.spans = $util.emptyArray;\n\n                    /**\n                     * ScopeSpans schemaUrl.\n                     * @member {string|null|undefined} schemaUrl\n                     * @memberof opentelemetry.proto.trace.v1.ScopeSpans\n                     * @instance\n                     */\n                    ScopeSpans.prototype.schemaUrl = null;\n\n                    /**\n                     * Creates a new ScopeSpans instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.trace.v1.ScopeSpans\n                     * @static\n                     * @param {opentelemetry.proto.trace.v1.IScopeSpans=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.trace.v1.ScopeSpans} ScopeSpans instance\n                     */\n                    ScopeSpans.create = function create(properties) {\n                        return new ScopeSpans(properties);\n                    };\n\n                    /**\n                     * Encodes the specified ScopeSpans message. Does not implicitly {@link opentelemetry.proto.trace.v1.ScopeSpans.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.trace.v1.ScopeSpans\n                     * @static\n                     * @param {opentelemetry.proto.trace.v1.IScopeSpans} message ScopeSpans message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    ScopeSpans.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.scope != null && Object.hasOwnProperty.call(message, \"scope\"))\n                            $root.opentelemetry.proto.common.v1.InstrumentationScope.encode(message.scope, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                        if (message.spans != null && message.spans.length)\n                            for (var i = 0; i < message.spans.length; ++i)\n                                $root.opentelemetry.proto.trace.v1.Span.encode(message.spans[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                        if (message.schemaUrl != null && Object.hasOwnProperty.call(message, \"schemaUrl\"))\n                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.schemaUrl);\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified ScopeSpans message, length delimited. Does not implicitly {@link opentelemetry.proto.trace.v1.ScopeSpans.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.trace.v1.ScopeSpans\n                     * @static\n                     * @param {opentelemetry.proto.trace.v1.IScopeSpans} message ScopeSpans message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    ScopeSpans.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes a ScopeSpans message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.trace.v1.ScopeSpans\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.trace.v1.ScopeSpans} ScopeSpans\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    ScopeSpans.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.trace.v1.ScopeSpans();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 1: {\n                                    message.scope = $root.opentelemetry.proto.common.v1.InstrumentationScope.decode(reader, reader.uint32());\n                                    break;\n                                }\n                            case 2: {\n                                    if (!(message.spans && message.spans.length))\n                                        message.spans = [];\n                                    message.spans.push($root.opentelemetry.proto.trace.v1.Span.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                            case 3: {\n                                    message.schemaUrl = reader.string();\n                                    break;\n                                }\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes a ScopeSpans message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.trace.v1.ScopeSpans\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.trace.v1.ScopeSpans} ScopeSpans\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    ScopeSpans.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies a ScopeSpans message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.trace.v1.ScopeSpans\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    ScopeSpans.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.scope != null && message.hasOwnProperty(\"scope\")) {\n                            var error = $root.opentelemetry.proto.common.v1.InstrumentationScope.verify(message.scope);\n                            if (error)\n                                return \"scope.\" + error;\n                        }\n                        if (message.spans != null && message.hasOwnProperty(\"spans\")) {\n                            if (!Array.isArray(message.spans))\n                                return \"spans: array expected\";\n                            for (var i = 0; i < message.spans.length; ++i) {\n                                var error = $root.opentelemetry.proto.trace.v1.Span.verify(message.spans[i]);\n                                if (error)\n                                    return \"spans.\" + error;\n                            }\n                        }\n                        if (message.schemaUrl != null && message.hasOwnProperty(\"schemaUrl\"))\n                            if (!$util.isString(message.schemaUrl))\n                                return \"schemaUrl: string expected\";\n                        return null;\n                    };\n\n                    /**\n                     * Creates a ScopeSpans message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.trace.v1.ScopeSpans\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.trace.v1.ScopeSpans} ScopeSpans\n                     */\n                    ScopeSpans.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.trace.v1.ScopeSpans)\n                            return object;\n                        var message = new $root.opentelemetry.proto.trace.v1.ScopeSpans();\n                        if (object.scope != null) {\n                            if (typeof object.scope !== \"object\")\n                                throw TypeError(\".opentelemetry.proto.trace.v1.ScopeSpans.scope: object expected\");\n                            message.scope = $root.opentelemetry.proto.common.v1.InstrumentationScope.fromObject(object.scope);\n                        }\n                        if (object.spans) {\n                            if (!Array.isArray(object.spans))\n                                throw TypeError(\".opentelemetry.proto.trace.v1.ScopeSpans.spans: array expected\");\n                            message.spans = [];\n                            for (var i = 0; i < object.spans.length; ++i) {\n                                if (typeof object.spans[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.trace.v1.ScopeSpans.spans: object expected\");\n                                message.spans[i] = $root.opentelemetry.proto.trace.v1.Span.fromObject(object.spans[i]);\n                            }\n                        }\n                        if (object.schemaUrl != null)\n                            message.schemaUrl = String(object.schemaUrl);\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from a ScopeSpans message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.trace.v1.ScopeSpans\n                     * @static\n                     * @param {opentelemetry.proto.trace.v1.ScopeSpans} message ScopeSpans\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    ScopeSpans.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults)\n                            object.spans = [];\n                        if (options.defaults) {\n                            object.scope = null;\n                            object.schemaUrl = \"\";\n                        }\n                        if (message.scope != null && message.hasOwnProperty(\"scope\"))\n                            object.scope = $root.opentelemetry.proto.common.v1.InstrumentationScope.toObject(message.scope, options);\n                        if (message.spans && message.spans.length) {\n                            object.spans = [];\n                            for (var j = 0; j < message.spans.length; ++j)\n                                object.spans[j] = $root.opentelemetry.proto.trace.v1.Span.toObject(message.spans[j], options);\n                        }\n                        if (message.schemaUrl != null && message.hasOwnProperty(\"schemaUrl\"))\n                            object.schemaUrl = message.schemaUrl;\n                        return object;\n                    };\n\n                    /**\n                     * Converts this ScopeSpans to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.trace.v1.ScopeSpans\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    ScopeSpans.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    /**\n                     * Gets the default type url for ScopeSpans\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.trace.v1.ScopeSpans\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    ScopeSpans.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.trace.v1.ScopeSpans\";\n                    };\n\n                    return ScopeSpans;\n                })();\n\n                v1.Span = (function() {\n\n                    /**\n                     * Properties of a Span.\n                     * @memberof opentelemetry.proto.trace.v1\n                     * @interface ISpan\n                     * @property {Uint8Array|null} [traceId] Span traceId\n                     * @property {Uint8Array|null} [spanId] Span spanId\n                     * @property {string|null} [traceState] Span traceState\n                     * @property {Uint8Array|null} [parentSpanId] Span parentSpanId\n                     * @property {string|null} [name] Span name\n                     * @property {opentelemetry.proto.trace.v1.Span.SpanKind|null} [kind] Span kind\n                     * @property {number|Long|null} [startTimeUnixNano] Span startTimeUnixNano\n                     * @property {number|Long|null} [endTimeUnixNano] Span endTimeUnixNano\n                     * @property {Array.<opentelemetry.proto.common.v1.IKeyValue>|null} [attributes] Span attributes\n                     * @property {number|null} [droppedAttributesCount] Span droppedAttributesCount\n                     * @property {Array.<opentelemetry.proto.trace.v1.Span.IEvent>|null} [events] Span events\n                     * @property {number|null} [droppedEventsCount] Span droppedEventsCount\n                     * @property {Array.<opentelemetry.proto.trace.v1.Span.ILink>|null} [links] Span links\n                     * @property {number|null} [droppedLinksCount] Span droppedLinksCount\n                     * @property {opentelemetry.proto.trace.v1.IStatus|null} [status] Span status\n                     */\n\n                    /**\n                     * Constructs a new Span.\n                     * @memberof opentelemetry.proto.trace.v1\n                     * @classdesc Represents a Span.\n                     * @implements ISpan\n                     * @constructor\n                     * @param {opentelemetry.proto.trace.v1.ISpan=} [properties] Properties to set\n                     */\n                    function Span(properties) {\n                        this.attributes = [];\n                        this.events = [];\n                        this.links = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * Span traceId.\n                     * @member {Uint8Array|null|undefined} traceId\n                     * @memberof opentelemetry.proto.trace.v1.Span\n                     * @instance\n                     */\n                    Span.prototype.traceId = null;\n\n                    /**\n                     * Span spanId.\n                     * @member {Uint8Array|null|undefined} spanId\n                     * @memberof opentelemetry.proto.trace.v1.Span\n                     * @instance\n                     */\n                    Span.prototype.spanId = null;\n\n                    /**\n                     * Span traceState.\n                     * @member {string|null|undefined} traceState\n                     * @memberof opentelemetry.proto.trace.v1.Span\n                     * @instance\n                     */\n                    Span.prototype.traceState = null;\n\n                    /**\n                     * Span parentSpanId.\n                     * @member {Uint8Array|null|undefined} parentSpanId\n                     * @memberof opentelemetry.proto.trace.v1.Span\n                     * @instance\n                     */\n                    Span.prototype.parentSpanId = null;\n\n                    /**\n                     * Span name.\n                     * @member {string|null|undefined} name\n                     * @memberof opentelemetry.proto.trace.v1.Span\n                     * @instance\n                     */\n                    Span.prototype.name = null;\n\n                    /**\n                     * Span kind.\n                     * @member {opentelemetry.proto.trace.v1.Span.SpanKind|null|undefined} kind\n                     * @memberof opentelemetry.proto.trace.v1.Span\n                     * @instance\n                     */\n                    Span.prototype.kind = null;\n\n                    /**\n                     * Span startTimeUnixNano.\n                     * @member {number|Long|null|undefined} startTimeUnixNano\n                     * @memberof opentelemetry.proto.trace.v1.Span\n                     * @instance\n                     */\n                    Span.prototype.startTimeUnixNano = null;\n\n                    /**\n                     * Span endTimeUnixNano.\n                     * @member {number|Long|null|undefined} endTimeUnixNano\n                     * @memberof opentelemetry.proto.trace.v1.Span\n                     * @instance\n                     */\n                    Span.prototype.endTimeUnixNano = null;\n\n                    /**\n                     * Span attributes.\n                     * @member {Array.<opentelemetry.proto.common.v1.IKeyValue>} attributes\n                     * @memberof opentelemetry.proto.trace.v1.Span\n                     * @instance\n                     */\n                    Span.prototype.attributes = $util.emptyArray;\n\n                    /**\n                     * Span droppedAttributesCount.\n                     * @member {number|null|undefined} droppedAttributesCount\n                     * @memberof opentelemetry.proto.trace.v1.Span\n                     * @instance\n                     */\n                    Span.prototype.droppedAttributesCount = null;\n\n                    /**\n                     * Span events.\n                     * @member {Array.<opentelemetry.proto.trace.v1.Span.IEvent>} events\n                     * @memberof opentelemetry.proto.trace.v1.Span\n                     * @instance\n                     */\n                    Span.prototype.events = $util.emptyArray;\n\n                    /**\n                     * Span droppedEventsCount.\n                     * @member {number|null|undefined} droppedEventsCount\n                     * @memberof opentelemetry.proto.trace.v1.Span\n                     * @instance\n                     */\n                    Span.prototype.droppedEventsCount = null;\n\n                    /**\n                     * Span links.\n                     * @member {Array.<opentelemetry.proto.trace.v1.Span.ILink>} links\n                     * @memberof opentelemetry.proto.trace.v1.Span\n                     * @instance\n                     */\n                    Span.prototype.links = $util.emptyArray;\n\n                    /**\n                     * Span droppedLinksCount.\n                     * @member {number|null|undefined} droppedLinksCount\n                     * @memberof opentelemetry.proto.trace.v1.Span\n                     * @instance\n                     */\n                    Span.prototype.droppedLinksCount = null;\n\n                    /**\n                     * Span status.\n                     * @member {opentelemetry.proto.trace.v1.IStatus|null|undefined} status\n                     * @memberof opentelemetry.proto.trace.v1.Span\n                     * @instance\n                     */\n                    Span.prototype.status = null;\n\n                    /**\n                     * Creates a new Span instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.trace.v1.Span\n                     * @static\n                     * @param {opentelemetry.proto.trace.v1.ISpan=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.trace.v1.Span} Span instance\n                     */\n                    Span.create = function create(properties) {\n                        return new Span(properties);\n                    };\n\n                    /**\n                     * Encodes the specified Span message. Does not implicitly {@link opentelemetry.proto.trace.v1.Span.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.trace.v1.Span\n                     * @static\n                     * @param {opentelemetry.proto.trace.v1.ISpan} message Span message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    Span.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.traceId != null && Object.hasOwnProperty.call(message, \"traceId\"))\n                            writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.traceId);\n                        if (message.spanId != null && Object.hasOwnProperty.call(message, \"spanId\"))\n                            writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.spanId);\n                        if (message.traceState != null && Object.hasOwnProperty.call(message, \"traceState\"))\n                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.traceState);\n                        if (message.parentSpanId != null && Object.hasOwnProperty.call(message, \"parentSpanId\"))\n                            writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.parentSpanId);\n                        if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\n                            writer.uint32(/* id 5, wireType 2 =*/42).string(message.name);\n                        if (message.kind != null && Object.hasOwnProperty.call(message, \"kind\"))\n                            writer.uint32(/* id 6, wireType 0 =*/48).int32(message.kind);\n                        if (message.startTimeUnixNano != null && Object.hasOwnProperty.call(message, \"startTimeUnixNano\"))\n                            writer.uint32(/* id 7, wireType 1 =*/57).fixed64(message.startTimeUnixNano);\n                        if (message.endTimeUnixNano != null && Object.hasOwnProperty.call(message, \"endTimeUnixNano\"))\n                            writer.uint32(/* id 8, wireType 1 =*/65).fixed64(message.endTimeUnixNano);\n                        if (message.attributes != null && message.attributes.length)\n                            for (var i = 0; i < message.attributes.length; ++i)\n                                $root.opentelemetry.proto.common.v1.KeyValue.encode(message.attributes[i], writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();\n                        if (message.droppedAttributesCount != null && Object.hasOwnProperty.call(message, \"droppedAttributesCount\"))\n                            writer.uint32(/* id 10, wireType 0 =*/80).uint32(message.droppedAttributesCount);\n                        if (message.events != null && message.events.length)\n                            for (var i = 0; i < message.events.length; ++i)\n                                $root.opentelemetry.proto.trace.v1.Span.Event.encode(message.events[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n                        if (message.droppedEventsCount != null && Object.hasOwnProperty.call(message, \"droppedEventsCount\"))\n                            writer.uint32(/* id 12, wireType 0 =*/96).uint32(message.droppedEventsCount);\n                        if (message.links != null && message.links.length)\n                            for (var i = 0; i < message.links.length; ++i)\n                                $root.opentelemetry.proto.trace.v1.Span.Link.encode(message.links[i], writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();\n                        if (message.droppedLinksCount != null && Object.hasOwnProperty.call(message, \"droppedLinksCount\"))\n                            writer.uint32(/* id 14, wireType 0 =*/112).uint32(message.droppedLinksCount);\n                        if (message.status != null && Object.hasOwnProperty.call(message, \"status\"))\n                            $root.opentelemetry.proto.trace.v1.Status.encode(message.status, writer.uint32(/* id 15, wireType 2 =*/122).fork()).ldelim();\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified Span message, length delimited. Does not implicitly {@link opentelemetry.proto.trace.v1.Span.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.trace.v1.Span\n                     * @static\n                     * @param {opentelemetry.proto.trace.v1.ISpan} message Span message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    Span.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes a Span message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.trace.v1.Span\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.trace.v1.Span} Span\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    Span.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.trace.v1.Span();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 1: {\n                                    message.traceId = reader.bytes();\n                                    break;\n                                }\n                            case 2: {\n                                    message.spanId = reader.bytes();\n                                    break;\n                                }\n                            case 3: {\n                                    message.traceState = reader.string();\n                                    break;\n                                }\n                            case 4: {\n                                    message.parentSpanId = reader.bytes();\n                                    break;\n                                }\n                            case 5: {\n                                    message.name = reader.string();\n                                    break;\n                                }\n                            case 6: {\n                                    message.kind = reader.int32();\n                                    break;\n                                }\n                            case 7: {\n                                    message.startTimeUnixNano = reader.fixed64();\n                                    break;\n                                }\n                            case 8: {\n                                    message.endTimeUnixNano = reader.fixed64();\n                                    break;\n                                }\n                            case 9: {\n                                    if (!(message.attributes && message.attributes.length))\n                                        message.attributes = [];\n                                    message.attributes.push($root.opentelemetry.proto.common.v1.KeyValue.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                            case 10: {\n                                    message.droppedAttributesCount = reader.uint32();\n                                    break;\n                                }\n                            case 11: {\n                                    if (!(message.events && message.events.length))\n                                        message.events = [];\n                                    message.events.push($root.opentelemetry.proto.trace.v1.Span.Event.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                            case 12: {\n                                    message.droppedEventsCount = reader.uint32();\n                                    break;\n                                }\n                            case 13: {\n                                    if (!(message.links && message.links.length))\n                                        message.links = [];\n                                    message.links.push($root.opentelemetry.proto.trace.v1.Span.Link.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                            case 14: {\n                                    message.droppedLinksCount = reader.uint32();\n                                    break;\n                                }\n                            case 15: {\n                                    message.status = $root.opentelemetry.proto.trace.v1.Status.decode(reader, reader.uint32());\n                                    break;\n                                }\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes a Span message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.trace.v1.Span\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.trace.v1.Span} Span\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    Span.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies a Span message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.trace.v1.Span\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    Span.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.traceId != null && message.hasOwnProperty(\"traceId\"))\n                            if (!(message.traceId && typeof message.traceId.length === \"number\" || $util.isString(message.traceId)))\n                                return \"traceId: buffer expected\";\n                        if (message.spanId != null && message.hasOwnProperty(\"spanId\"))\n                            if (!(message.spanId && typeof message.spanId.length === \"number\" || $util.isString(message.spanId)))\n                                return \"spanId: buffer expected\";\n                        if (message.traceState != null && message.hasOwnProperty(\"traceState\"))\n                            if (!$util.isString(message.traceState))\n                                return \"traceState: string expected\";\n                        if (message.parentSpanId != null && message.hasOwnProperty(\"parentSpanId\"))\n                            if (!(message.parentSpanId && typeof message.parentSpanId.length === \"number\" || $util.isString(message.parentSpanId)))\n                                return \"parentSpanId: buffer expected\";\n                        if (message.name != null && message.hasOwnProperty(\"name\"))\n                            if (!$util.isString(message.name))\n                                return \"name: string expected\";\n                        if (message.kind != null && message.hasOwnProperty(\"kind\"))\n                            switch (message.kind) {\n                            default:\n                                return \"kind: enum value expected\";\n                            case 0:\n                            case 1:\n                            case 2:\n                            case 3:\n                            case 4:\n                            case 5:\n                                break;\n                            }\n                        if (message.startTimeUnixNano != null && message.hasOwnProperty(\"startTimeUnixNano\"))\n                            if (!$util.isInteger(message.startTimeUnixNano) && !(message.startTimeUnixNano && $util.isInteger(message.startTimeUnixNano.low) && $util.isInteger(message.startTimeUnixNano.high)))\n                                return \"startTimeUnixNano: integer|Long expected\";\n                        if (message.endTimeUnixNano != null && message.hasOwnProperty(\"endTimeUnixNano\"))\n                            if (!$util.isInteger(message.endTimeUnixNano) && !(message.endTimeUnixNano && $util.isInteger(message.endTimeUnixNano.low) && $util.isInteger(message.endTimeUnixNano.high)))\n                                return \"endTimeUnixNano: integer|Long expected\";\n                        if (message.attributes != null && message.hasOwnProperty(\"attributes\")) {\n                            if (!Array.isArray(message.attributes))\n                                return \"attributes: array expected\";\n                            for (var i = 0; i < message.attributes.length; ++i) {\n                                var error = $root.opentelemetry.proto.common.v1.KeyValue.verify(message.attributes[i]);\n                                if (error)\n                                    return \"attributes.\" + error;\n                            }\n                        }\n                        if (message.droppedAttributesCount != null && message.hasOwnProperty(\"droppedAttributesCount\"))\n                            if (!$util.isInteger(message.droppedAttributesCount))\n                                return \"droppedAttributesCount: integer expected\";\n                        if (message.events != null && message.hasOwnProperty(\"events\")) {\n                            if (!Array.isArray(message.events))\n                                return \"events: array expected\";\n                            for (var i = 0; i < message.events.length; ++i) {\n                                var error = $root.opentelemetry.proto.trace.v1.Span.Event.verify(message.events[i]);\n                                if (error)\n                                    return \"events.\" + error;\n                            }\n                        }\n                        if (message.droppedEventsCount != null && message.hasOwnProperty(\"droppedEventsCount\"))\n                            if (!$util.isInteger(message.droppedEventsCount))\n                                return \"droppedEventsCount: integer expected\";\n                        if (message.links != null && message.hasOwnProperty(\"links\")) {\n                            if (!Array.isArray(message.links))\n                                return \"links: array expected\";\n                            for (var i = 0; i < message.links.length; ++i) {\n                                var error = $root.opentelemetry.proto.trace.v1.Span.Link.verify(message.links[i]);\n                                if (error)\n                                    return \"links.\" + error;\n                            }\n                        }\n                        if (message.droppedLinksCount != null && message.hasOwnProperty(\"droppedLinksCount\"))\n                            if (!$util.isInteger(message.droppedLinksCount))\n                                return \"droppedLinksCount: integer expected\";\n                        if (message.status != null && message.hasOwnProperty(\"status\")) {\n                            var error = $root.opentelemetry.proto.trace.v1.Status.verify(message.status);\n                            if (error)\n                                return \"status.\" + error;\n                        }\n                        return null;\n                    };\n\n                    /**\n                     * Creates a Span message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.trace.v1.Span\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.trace.v1.Span} Span\n                     */\n                    Span.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.trace.v1.Span)\n                            return object;\n                        var message = new $root.opentelemetry.proto.trace.v1.Span();\n                        if (object.traceId != null)\n                            if (typeof object.traceId === \"string\")\n                                $util.base64.decode(object.traceId, message.traceId = $util.newBuffer($util.base64.length(object.traceId)), 0);\n                            else if (object.traceId.length >= 0)\n                                message.traceId = object.traceId;\n                        if (object.spanId != null)\n                            if (typeof object.spanId === \"string\")\n                                $util.base64.decode(object.spanId, message.spanId = $util.newBuffer($util.base64.length(object.spanId)), 0);\n                            else if (object.spanId.length >= 0)\n                                message.spanId = object.spanId;\n                        if (object.traceState != null)\n                            message.traceState = String(object.traceState);\n                        if (object.parentSpanId != null)\n                            if (typeof object.parentSpanId === \"string\")\n                                $util.base64.decode(object.parentSpanId, message.parentSpanId = $util.newBuffer($util.base64.length(object.parentSpanId)), 0);\n                            else if (object.parentSpanId.length >= 0)\n                                message.parentSpanId = object.parentSpanId;\n                        if (object.name != null)\n                            message.name = String(object.name);\n                        switch (object.kind) {\n                        default:\n                            if (typeof object.kind === \"number\") {\n                                message.kind = object.kind;\n                                break;\n                            }\n                            break;\n                        case \"SPAN_KIND_UNSPECIFIED\":\n                        case 0:\n                            message.kind = 0;\n                            break;\n                        case \"SPAN_KIND_INTERNAL\":\n                        case 1:\n                            message.kind = 1;\n                            break;\n                        case \"SPAN_KIND_SERVER\":\n                        case 2:\n                            message.kind = 2;\n                            break;\n                        case \"SPAN_KIND_CLIENT\":\n                        case 3:\n                            message.kind = 3;\n                            break;\n                        case \"SPAN_KIND_PRODUCER\":\n                        case 4:\n                            message.kind = 4;\n                            break;\n                        case \"SPAN_KIND_CONSUMER\":\n                        case 5:\n                            message.kind = 5;\n                            break;\n                        }\n                        if (object.startTimeUnixNano != null)\n                            if ($util.Long)\n                                (message.startTimeUnixNano = $util.Long.fromValue(object.startTimeUnixNano)).unsigned = false;\n                            else if (typeof object.startTimeUnixNano === \"string\")\n                                message.startTimeUnixNano = parseInt(object.startTimeUnixNano, 10);\n                            else if (typeof object.startTimeUnixNano === \"number\")\n                                message.startTimeUnixNano = object.startTimeUnixNano;\n                            else if (typeof object.startTimeUnixNano === \"object\")\n                                message.startTimeUnixNano = new $util.LongBits(object.startTimeUnixNano.low >>> 0, object.startTimeUnixNano.high >>> 0).toNumber();\n                        if (object.endTimeUnixNano != null)\n                            if ($util.Long)\n                                (message.endTimeUnixNano = $util.Long.fromValue(object.endTimeUnixNano)).unsigned = false;\n                            else if (typeof object.endTimeUnixNano === \"string\")\n                                message.endTimeUnixNano = parseInt(object.endTimeUnixNano, 10);\n                            else if (typeof object.endTimeUnixNano === \"number\")\n                                message.endTimeUnixNano = object.endTimeUnixNano;\n                            else if (typeof object.endTimeUnixNano === \"object\")\n                                message.endTimeUnixNano = new $util.LongBits(object.endTimeUnixNano.low >>> 0, object.endTimeUnixNano.high >>> 0).toNumber();\n                        if (object.attributes) {\n                            if (!Array.isArray(object.attributes))\n                                throw TypeError(\".opentelemetry.proto.trace.v1.Span.attributes: array expected\");\n                            message.attributes = [];\n                            for (var i = 0; i < object.attributes.length; ++i) {\n                                if (typeof object.attributes[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.trace.v1.Span.attributes: object expected\");\n                                message.attributes[i] = $root.opentelemetry.proto.common.v1.KeyValue.fromObject(object.attributes[i]);\n                            }\n                        }\n                        if (object.droppedAttributesCount != null)\n                            message.droppedAttributesCount = object.droppedAttributesCount >>> 0;\n                        if (object.events) {\n                            if (!Array.isArray(object.events))\n                                throw TypeError(\".opentelemetry.proto.trace.v1.Span.events: array expected\");\n                            message.events = [];\n                            for (var i = 0; i < object.events.length; ++i) {\n                                if (typeof object.events[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.trace.v1.Span.events: object expected\");\n                                message.events[i] = $root.opentelemetry.proto.trace.v1.Span.Event.fromObject(object.events[i]);\n                            }\n                        }\n                        if (object.droppedEventsCount != null)\n                            message.droppedEventsCount = object.droppedEventsCount >>> 0;\n                        if (object.links) {\n                            if (!Array.isArray(object.links))\n                                throw TypeError(\".opentelemetry.proto.trace.v1.Span.links: array expected\");\n                            message.links = [];\n                            for (var i = 0; i < object.links.length; ++i) {\n                                if (typeof object.links[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.trace.v1.Span.links: object expected\");\n                                message.links[i] = $root.opentelemetry.proto.trace.v1.Span.Link.fromObject(object.links[i]);\n                            }\n                        }\n                        if (object.droppedLinksCount != null)\n                            message.droppedLinksCount = object.droppedLinksCount >>> 0;\n                        if (object.status != null) {\n                            if (typeof object.status !== \"object\")\n                                throw TypeError(\".opentelemetry.proto.trace.v1.Span.status: object expected\");\n                            message.status = $root.opentelemetry.proto.trace.v1.Status.fromObject(object.status);\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from a Span message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.trace.v1.Span\n                     * @static\n                     * @param {opentelemetry.proto.trace.v1.Span} message Span\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    Span.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults) {\n                            object.attributes = [];\n                            object.events = [];\n                            object.links = [];\n                        }\n                        if (options.defaults) {\n                            if (options.bytes === String)\n                                object.traceId = \"\";\n                            else {\n                                object.traceId = [];\n                                if (options.bytes !== Array)\n                                    object.traceId = $util.newBuffer(object.traceId);\n                            }\n                            if (options.bytes === String)\n                                object.spanId = \"\";\n                            else {\n                                object.spanId = [];\n                                if (options.bytes !== Array)\n                                    object.spanId = $util.newBuffer(object.spanId);\n                            }\n                            object.traceState = \"\";\n                            if (options.bytes === String)\n                                object.parentSpanId = \"\";\n                            else {\n                                object.parentSpanId = [];\n                                if (options.bytes !== Array)\n                                    object.parentSpanId = $util.newBuffer(object.parentSpanId);\n                            }\n                            object.name = \"\";\n                            object.kind = options.enums === String ? \"SPAN_KIND_UNSPECIFIED\" : 0;\n                            if ($util.Long) {\n                                var long = new $util.Long(0, 0, false);\n                                object.startTimeUnixNano = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                            } else\n                                object.startTimeUnixNano = options.longs === String ? \"0\" : 0;\n                            if ($util.Long) {\n                                var long = new $util.Long(0, 0, false);\n                                object.endTimeUnixNano = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                            } else\n                                object.endTimeUnixNano = options.longs === String ? \"0\" : 0;\n                            object.droppedAttributesCount = 0;\n                            object.droppedEventsCount = 0;\n                            object.droppedLinksCount = 0;\n                            object.status = null;\n                        }\n                        if (message.traceId != null && message.hasOwnProperty(\"traceId\"))\n                            object.traceId = options.bytes === String ? $util.base64.encode(message.traceId, 0, message.traceId.length) : options.bytes === Array ? Array.prototype.slice.call(message.traceId) : message.traceId;\n                        if (message.spanId != null && message.hasOwnProperty(\"spanId\"))\n                            object.spanId = options.bytes === String ? $util.base64.encode(message.spanId, 0, message.spanId.length) : options.bytes === Array ? Array.prototype.slice.call(message.spanId) : message.spanId;\n                        if (message.traceState != null && message.hasOwnProperty(\"traceState\"))\n                            object.traceState = message.traceState;\n                        if (message.parentSpanId != null && message.hasOwnProperty(\"parentSpanId\"))\n                            object.parentSpanId = options.bytes === String ? $util.base64.encode(message.parentSpanId, 0, message.parentSpanId.length) : options.bytes === Array ? Array.prototype.slice.call(message.parentSpanId) : message.parentSpanId;\n                        if (message.name != null && message.hasOwnProperty(\"name\"))\n                            object.name = message.name;\n                        if (message.kind != null && message.hasOwnProperty(\"kind\"))\n                            object.kind = options.enums === String ? $root.opentelemetry.proto.trace.v1.Span.SpanKind[message.kind] === undefined ? message.kind : $root.opentelemetry.proto.trace.v1.Span.SpanKind[message.kind] : message.kind;\n                        if (message.startTimeUnixNano != null && message.hasOwnProperty(\"startTimeUnixNano\"))\n                            if (typeof message.startTimeUnixNano === \"number\")\n                                object.startTimeUnixNano = options.longs === String ? String(message.startTimeUnixNano) : message.startTimeUnixNano;\n                            else\n                                object.startTimeUnixNano = options.longs === String ? $util.Long.prototype.toString.call(message.startTimeUnixNano) : options.longs === Number ? new $util.LongBits(message.startTimeUnixNano.low >>> 0, message.startTimeUnixNano.high >>> 0).toNumber() : message.startTimeUnixNano;\n                        if (message.endTimeUnixNano != null && message.hasOwnProperty(\"endTimeUnixNano\"))\n                            if (typeof message.endTimeUnixNano === \"number\")\n                                object.endTimeUnixNano = options.longs === String ? String(message.endTimeUnixNano) : message.endTimeUnixNano;\n                            else\n                                object.endTimeUnixNano = options.longs === String ? $util.Long.prototype.toString.call(message.endTimeUnixNano) : options.longs === Number ? new $util.LongBits(message.endTimeUnixNano.low >>> 0, message.endTimeUnixNano.high >>> 0).toNumber() : message.endTimeUnixNano;\n                        if (message.attributes && message.attributes.length) {\n                            object.attributes = [];\n                            for (var j = 0; j < message.attributes.length; ++j)\n                                object.attributes[j] = $root.opentelemetry.proto.common.v1.KeyValue.toObject(message.attributes[j], options);\n                        }\n                        if (message.droppedAttributesCount != null && message.hasOwnProperty(\"droppedAttributesCount\"))\n                            object.droppedAttributesCount = message.droppedAttributesCount;\n                        if (message.events && message.events.length) {\n                            object.events = [];\n                            for (var j = 0; j < message.events.length; ++j)\n                                object.events[j] = $root.opentelemetry.proto.trace.v1.Span.Event.toObject(message.events[j], options);\n                        }\n                        if (message.droppedEventsCount != null && message.hasOwnProperty(\"droppedEventsCount\"))\n                            object.droppedEventsCount = message.droppedEventsCount;\n                        if (message.links && message.links.length) {\n                            object.links = [];\n                            for (var j = 0; j < message.links.length; ++j)\n                                object.links[j] = $root.opentelemetry.proto.trace.v1.Span.Link.toObject(message.links[j], options);\n                        }\n                        if (message.droppedLinksCount != null && message.hasOwnProperty(\"droppedLinksCount\"))\n                            object.droppedLinksCount = message.droppedLinksCount;\n                        if (message.status != null && message.hasOwnProperty(\"status\"))\n                            object.status = $root.opentelemetry.proto.trace.v1.Status.toObject(message.status, options);\n                        return object;\n                    };\n\n                    /**\n                     * Converts this Span to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.trace.v1.Span\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    Span.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    /**\n                     * Gets the default type url for Span\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.trace.v1.Span\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    Span.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.trace.v1.Span\";\n                    };\n\n                    /**\n                     * SpanKind enum.\n                     * @name opentelemetry.proto.trace.v1.Span.SpanKind\n                     * @enum {number}\n                     * @property {number} SPAN_KIND_UNSPECIFIED=0 SPAN_KIND_UNSPECIFIED value\n                     * @property {number} SPAN_KIND_INTERNAL=1 SPAN_KIND_INTERNAL value\n                     * @property {number} SPAN_KIND_SERVER=2 SPAN_KIND_SERVER value\n                     * @property {number} SPAN_KIND_CLIENT=3 SPAN_KIND_CLIENT value\n                     * @property {number} SPAN_KIND_PRODUCER=4 SPAN_KIND_PRODUCER value\n                     * @property {number} SPAN_KIND_CONSUMER=5 SPAN_KIND_CONSUMER value\n                     */\n                    Span.SpanKind = (function() {\n                        var valuesById = {}, values = Object.create(valuesById);\n                        values[valuesById[0] = \"SPAN_KIND_UNSPECIFIED\"] = 0;\n                        values[valuesById[1] = \"SPAN_KIND_INTERNAL\"] = 1;\n                        values[valuesById[2] = \"SPAN_KIND_SERVER\"] = 2;\n                        values[valuesById[3] = \"SPAN_KIND_CLIENT\"] = 3;\n                        values[valuesById[4] = \"SPAN_KIND_PRODUCER\"] = 4;\n                        values[valuesById[5] = \"SPAN_KIND_CONSUMER\"] = 5;\n                        return values;\n                    })();\n\n                    Span.Event = (function() {\n\n                        /**\n                         * Properties of an Event.\n                         * @memberof opentelemetry.proto.trace.v1.Span\n                         * @interface IEvent\n                         * @property {number|Long|null} [timeUnixNano] Event timeUnixNano\n                         * @property {string|null} [name] Event name\n                         * @property {Array.<opentelemetry.proto.common.v1.IKeyValue>|null} [attributes] Event attributes\n                         * @property {number|null} [droppedAttributesCount] Event droppedAttributesCount\n                         */\n\n                        /**\n                         * Constructs a new Event.\n                         * @memberof opentelemetry.proto.trace.v1.Span\n                         * @classdesc Represents an Event.\n                         * @implements IEvent\n                         * @constructor\n                         * @param {opentelemetry.proto.trace.v1.Span.IEvent=} [properties] Properties to set\n                         */\n                        function Event(properties) {\n                            this.attributes = [];\n                            if (properties)\n                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                    if (properties[keys[i]] != null)\n                                        this[keys[i]] = properties[keys[i]];\n                        }\n\n                        /**\n                         * Event timeUnixNano.\n                         * @member {number|Long|null|undefined} timeUnixNano\n                         * @memberof opentelemetry.proto.trace.v1.Span.Event\n                         * @instance\n                         */\n                        Event.prototype.timeUnixNano = null;\n\n                        /**\n                         * Event name.\n                         * @member {string|null|undefined} name\n                         * @memberof opentelemetry.proto.trace.v1.Span.Event\n                         * @instance\n                         */\n                        Event.prototype.name = null;\n\n                        /**\n                         * Event attributes.\n                         * @member {Array.<opentelemetry.proto.common.v1.IKeyValue>} attributes\n                         * @memberof opentelemetry.proto.trace.v1.Span.Event\n                         * @instance\n                         */\n                        Event.prototype.attributes = $util.emptyArray;\n\n                        /**\n                         * Event droppedAttributesCount.\n                         * @member {number|null|undefined} droppedAttributesCount\n                         * @memberof opentelemetry.proto.trace.v1.Span.Event\n                         * @instance\n                         */\n                        Event.prototype.droppedAttributesCount = null;\n\n                        /**\n                         * Creates a new Event instance using the specified properties.\n                         * @function create\n                         * @memberof opentelemetry.proto.trace.v1.Span.Event\n                         * @static\n                         * @param {opentelemetry.proto.trace.v1.Span.IEvent=} [properties] Properties to set\n                         * @returns {opentelemetry.proto.trace.v1.Span.Event} Event instance\n                         */\n                        Event.create = function create(properties) {\n                            return new Event(properties);\n                        };\n\n                        /**\n                         * Encodes the specified Event message. Does not implicitly {@link opentelemetry.proto.trace.v1.Span.Event.verify|verify} messages.\n                         * @function encode\n                         * @memberof opentelemetry.proto.trace.v1.Span.Event\n                         * @static\n                         * @param {opentelemetry.proto.trace.v1.Span.IEvent} message Event message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        Event.encode = function encode(message, writer) {\n                            if (!writer)\n                                writer = $Writer.create();\n                            if (message.timeUnixNano != null && Object.hasOwnProperty.call(message, \"timeUnixNano\"))\n                                writer.uint32(/* id 1, wireType 1 =*/9).fixed64(message.timeUnixNano);\n                            if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\n                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);\n                            if (message.attributes != null && message.attributes.length)\n                                for (var i = 0; i < message.attributes.length; ++i)\n                                    $root.opentelemetry.proto.common.v1.KeyValue.encode(message.attributes[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n                            if (message.droppedAttributesCount != null && Object.hasOwnProperty.call(message, \"droppedAttributesCount\"))\n                                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.droppedAttributesCount);\n                            return writer;\n                        };\n\n                        /**\n                         * Encodes the specified Event message, length delimited. Does not implicitly {@link opentelemetry.proto.trace.v1.Span.Event.verify|verify} messages.\n                         * @function encodeDelimited\n                         * @memberof opentelemetry.proto.trace.v1.Span.Event\n                         * @static\n                         * @param {opentelemetry.proto.trace.v1.Span.IEvent} message Event message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        Event.encodeDelimited = function encodeDelimited(message, writer) {\n                            return this.encode(message, writer).ldelim();\n                        };\n\n                        /**\n                         * Decodes an Event message from the specified reader or buffer.\n                         * @function decode\n                         * @memberof opentelemetry.proto.trace.v1.Span.Event\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @param {number} [length] Message length if known beforehand\n                         * @returns {opentelemetry.proto.trace.v1.Span.Event} Event\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        Event.decode = function decode(reader, length) {\n                            if (!(reader instanceof $Reader))\n                                reader = $Reader.create(reader);\n                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.trace.v1.Span.Event();\n                            while (reader.pos < end) {\n                                var tag = reader.uint32();\n                                switch (tag >>> 3) {\n                                case 1: {\n                                        message.timeUnixNano = reader.fixed64();\n                                        break;\n                                    }\n                                case 2: {\n                                        message.name = reader.string();\n                                        break;\n                                    }\n                                case 3: {\n                                        if (!(message.attributes && message.attributes.length))\n                                            message.attributes = [];\n                                        message.attributes.push($root.opentelemetry.proto.common.v1.KeyValue.decode(reader, reader.uint32()));\n                                        break;\n                                    }\n                                case 4: {\n                                        message.droppedAttributesCount = reader.uint32();\n                                        break;\n                                    }\n                                default:\n                                    reader.skipType(tag & 7);\n                                    break;\n                                }\n                            }\n                            return message;\n                        };\n\n                        /**\n                         * Decodes an Event message from the specified reader or buffer, length delimited.\n                         * @function decodeDelimited\n                         * @memberof opentelemetry.proto.trace.v1.Span.Event\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @returns {opentelemetry.proto.trace.v1.Span.Event} Event\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        Event.decodeDelimited = function decodeDelimited(reader) {\n                            if (!(reader instanceof $Reader))\n                                reader = new $Reader(reader);\n                            return this.decode(reader, reader.uint32());\n                        };\n\n                        /**\n                         * Verifies an Event message.\n                         * @function verify\n                         * @memberof opentelemetry.proto.trace.v1.Span.Event\n                         * @static\n                         * @param {Object.<string,*>} message Plain object to verify\n                         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                         */\n                        Event.verify = function verify(message) {\n                            if (typeof message !== \"object\" || message === null)\n                                return \"object expected\";\n                            if (message.timeUnixNano != null && message.hasOwnProperty(\"timeUnixNano\"))\n                                if (!$util.isInteger(message.timeUnixNano) && !(message.timeUnixNano && $util.isInteger(message.timeUnixNano.low) && $util.isInteger(message.timeUnixNano.high)))\n                                    return \"timeUnixNano: integer|Long expected\";\n                            if (message.name != null && message.hasOwnProperty(\"name\"))\n                                if (!$util.isString(message.name))\n                                    return \"name: string expected\";\n                            if (message.attributes != null && message.hasOwnProperty(\"attributes\")) {\n                                if (!Array.isArray(message.attributes))\n                                    return \"attributes: array expected\";\n                                for (var i = 0; i < message.attributes.length; ++i) {\n                                    var error = $root.opentelemetry.proto.common.v1.KeyValue.verify(message.attributes[i]);\n                                    if (error)\n                                        return \"attributes.\" + error;\n                                }\n                            }\n                            if (message.droppedAttributesCount != null && message.hasOwnProperty(\"droppedAttributesCount\"))\n                                if (!$util.isInteger(message.droppedAttributesCount))\n                                    return \"droppedAttributesCount: integer expected\";\n                            return null;\n                        };\n\n                        /**\n                         * Creates an Event message from a plain object. Also converts values to their respective internal types.\n                         * @function fromObject\n                         * @memberof opentelemetry.proto.trace.v1.Span.Event\n                         * @static\n                         * @param {Object.<string,*>} object Plain object\n                         * @returns {opentelemetry.proto.trace.v1.Span.Event} Event\n                         */\n                        Event.fromObject = function fromObject(object) {\n                            if (object instanceof $root.opentelemetry.proto.trace.v1.Span.Event)\n                                return object;\n                            var message = new $root.opentelemetry.proto.trace.v1.Span.Event();\n                            if (object.timeUnixNano != null)\n                                if ($util.Long)\n                                    (message.timeUnixNano = $util.Long.fromValue(object.timeUnixNano)).unsigned = false;\n                                else if (typeof object.timeUnixNano === \"string\")\n                                    message.timeUnixNano = parseInt(object.timeUnixNano, 10);\n                                else if (typeof object.timeUnixNano === \"number\")\n                                    message.timeUnixNano = object.timeUnixNano;\n                                else if (typeof object.timeUnixNano === \"object\")\n                                    message.timeUnixNano = new $util.LongBits(object.timeUnixNano.low >>> 0, object.timeUnixNano.high >>> 0).toNumber();\n                            if (object.name != null)\n                                message.name = String(object.name);\n                            if (object.attributes) {\n                                if (!Array.isArray(object.attributes))\n                                    throw TypeError(\".opentelemetry.proto.trace.v1.Span.Event.attributes: array expected\");\n                                message.attributes = [];\n                                for (var i = 0; i < object.attributes.length; ++i) {\n                                    if (typeof object.attributes[i] !== \"object\")\n                                        throw TypeError(\".opentelemetry.proto.trace.v1.Span.Event.attributes: object expected\");\n                                    message.attributes[i] = $root.opentelemetry.proto.common.v1.KeyValue.fromObject(object.attributes[i]);\n                                }\n                            }\n                            if (object.droppedAttributesCount != null)\n                                message.droppedAttributesCount = object.droppedAttributesCount >>> 0;\n                            return message;\n                        };\n\n                        /**\n                         * Creates a plain object from an Event message. Also converts values to other types if specified.\n                         * @function toObject\n                         * @memberof opentelemetry.proto.trace.v1.Span.Event\n                         * @static\n                         * @param {opentelemetry.proto.trace.v1.Span.Event} message Event\n                         * @param {$protobuf.IConversionOptions} [options] Conversion options\n                         * @returns {Object.<string,*>} Plain object\n                         */\n                        Event.toObject = function toObject(message, options) {\n                            if (!options)\n                                options = {};\n                            var object = {};\n                            if (options.arrays || options.defaults)\n                                object.attributes = [];\n                            if (options.defaults) {\n                                if ($util.Long) {\n                                    var long = new $util.Long(0, 0, false);\n                                    object.timeUnixNano = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                                } else\n                                    object.timeUnixNano = options.longs === String ? \"0\" : 0;\n                                object.name = \"\";\n                                object.droppedAttributesCount = 0;\n                            }\n                            if (message.timeUnixNano != null && message.hasOwnProperty(\"timeUnixNano\"))\n                                if (typeof message.timeUnixNano === \"number\")\n                                    object.timeUnixNano = options.longs === String ? String(message.timeUnixNano) : message.timeUnixNano;\n                                else\n                                    object.timeUnixNano = options.longs === String ? $util.Long.prototype.toString.call(message.timeUnixNano) : options.longs === Number ? new $util.LongBits(message.timeUnixNano.low >>> 0, message.timeUnixNano.high >>> 0).toNumber() : message.timeUnixNano;\n                            if (message.name != null && message.hasOwnProperty(\"name\"))\n                                object.name = message.name;\n                            if (message.attributes && message.attributes.length) {\n                                object.attributes = [];\n                                for (var j = 0; j < message.attributes.length; ++j)\n                                    object.attributes[j] = $root.opentelemetry.proto.common.v1.KeyValue.toObject(message.attributes[j], options);\n                            }\n                            if (message.droppedAttributesCount != null && message.hasOwnProperty(\"droppedAttributesCount\"))\n                                object.droppedAttributesCount = message.droppedAttributesCount;\n                            return object;\n                        };\n\n                        /**\n                         * Converts this Event to JSON.\n                         * @function toJSON\n                         * @memberof opentelemetry.proto.trace.v1.Span.Event\n                         * @instance\n                         * @returns {Object.<string,*>} JSON object\n                         */\n                        Event.prototype.toJSON = function toJSON() {\n                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                        };\n\n                        /**\n                         * Gets the default type url for Event\n                         * @function getTypeUrl\n                         * @memberof opentelemetry.proto.trace.v1.Span.Event\n                         * @static\n                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                         * @returns {string} The default type url\n                         */\n                        Event.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                            if (typeUrlPrefix === undefined) {\n                                typeUrlPrefix = \"type.googleapis.com\";\n                            }\n                            return typeUrlPrefix + \"/opentelemetry.proto.trace.v1.Span.Event\";\n                        };\n\n                        return Event;\n                    })();\n\n                    Span.Link = (function() {\n\n                        /**\n                         * Properties of a Link.\n                         * @memberof opentelemetry.proto.trace.v1.Span\n                         * @interface ILink\n                         * @property {Uint8Array|null} [traceId] Link traceId\n                         * @property {Uint8Array|null} [spanId] Link spanId\n                         * @property {string|null} [traceState] Link traceState\n                         * @property {Array.<opentelemetry.proto.common.v1.IKeyValue>|null} [attributes] Link attributes\n                         * @property {number|null} [droppedAttributesCount] Link droppedAttributesCount\n                         */\n\n                        /**\n                         * Constructs a new Link.\n                         * @memberof opentelemetry.proto.trace.v1.Span\n                         * @classdesc Represents a Link.\n                         * @implements ILink\n                         * @constructor\n                         * @param {opentelemetry.proto.trace.v1.Span.ILink=} [properties] Properties to set\n                         */\n                        function Link(properties) {\n                            this.attributes = [];\n                            if (properties)\n                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                    if (properties[keys[i]] != null)\n                                        this[keys[i]] = properties[keys[i]];\n                        }\n\n                        /**\n                         * Link traceId.\n                         * @member {Uint8Array|null|undefined} traceId\n                         * @memberof opentelemetry.proto.trace.v1.Span.Link\n                         * @instance\n                         */\n                        Link.prototype.traceId = null;\n\n                        /**\n                         * Link spanId.\n                         * @member {Uint8Array|null|undefined} spanId\n                         * @memberof opentelemetry.proto.trace.v1.Span.Link\n                         * @instance\n                         */\n                        Link.prototype.spanId = null;\n\n                        /**\n                         * Link traceState.\n                         * @member {string|null|undefined} traceState\n                         * @memberof opentelemetry.proto.trace.v1.Span.Link\n                         * @instance\n                         */\n                        Link.prototype.traceState = null;\n\n                        /**\n                         * Link attributes.\n                         * @member {Array.<opentelemetry.proto.common.v1.IKeyValue>} attributes\n                         * @memberof opentelemetry.proto.trace.v1.Span.Link\n                         * @instance\n                         */\n                        Link.prototype.attributes = $util.emptyArray;\n\n                        /**\n                         * Link droppedAttributesCount.\n                         * @member {number|null|undefined} droppedAttributesCount\n                         * @memberof opentelemetry.proto.trace.v1.Span.Link\n                         * @instance\n                         */\n                        Link.prototype.droppedAttributesCount = null;\n\n                        /**\n                         * Creates a new Link instance using the specified properties.\n                         * @function create\n                         * @memberof opentelemetry.proto.trace.v1.Span.Link\n                         * @static\n                         * @param {opentelemetry.proto.trace.v1.Span.ILink=} [properties] Properties to set\n                         * @returns {opentelemetry.proto.trace.v1.Span.Link} Link instance\n                         */\n                        Link.create = function create(properties) {\n                            return new Link(properties);\n                        };\n\n                        /**\n                         * Encodes the specified Link message. Does not implicitly {@link opentelemetry.proto.trace.v1.Span.Link.verify|verify} messages.\n                         * @function encode\n                         * @memberof opentelemetry.proto.trace.v1.Span.Link\n                         * @static\n                         * @param {opentelemetry.proto.trace.v1.Span.ILink} message Link message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        Link.encode = function encode(message, writer) {\n                            if (!writer)\n                                writer = $Writer.create();\n                            if (message.traceId != null && Object.hasOwnProperty.call(message, \"traceId\"))\n                                writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.traceId);\n                            if (message.spanId != null && Object.hasOwnProperty.call(message, \"spanId\"))\n                                writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.spanId);\n                            if (message.traceState != null && Object.hasOwnProperty.call(message, \"traceState\"))\n                                writer.uint32(/* id 3, wireType 2 =*/26).string(message.traceState);\n                            if (message.attributes != null && message.attributes.length)\n                                for (var i = 0; i < message.attributes.length; ++i)\n                                    $root.opentelemetry.proto.common.v1.KeyValue.encode(message.attributes[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();\n                            if (message.droppedAttributesCount != null && Object.hasOwnProperty.call(message, \"droppedAttributesCount\"))\n                                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.droppedAttributesCount);\n                            return writer;\n                        };\n\n                        /**\n                         * Encodes the specified Link message, length delimited. Does not implicitly {@link opentelemetry.proto.trace.v1.Span.Link.verify|verify} messages.\n                         * @function encodeDelimited\n                         * @memberof opentelemetry.proto.trace.v1.Span.Link\n                         * @static\n                         * @param {opentelemetry.proto.trace.v1.Span.ILink} message Link message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        Link.encodeDelimited = function encodeDelimited(message, writer) {\n                            return this.encode(message, writer).ldelim();\n                        };\n\n                        /**\n                         * Decodes a Link message from the specified reader or buffer.\n                         * @function decode\n                         * @memberof opentelemetry.proto.trace.v1.Span.Link\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @param {number} [length] Message length if known beforehand\n                         * @returns {opentelemetry.proto.trace.v1.Span.Link} Link\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        Link.decode = function decode(reader, length) {\n                            if (!(reader instanceof $Reader))\n                                reader = $Reader.create(reader);\n                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.trace.v1.Span.Link();\n                            while (reader.pos < end) {\n                                var tag = reader.uint32();\n                                switch (tag >>> 3) {\n                                case 1: {\n                                        message.traceId = reader.bytes();\n                                        break;\n                                    }\n                                case 2: {\n                                        message.spanId = reader.bytes();\n                                        break;\n                                    }\n                                case 3: {\n                                        message.traceState = reader.string();\n                                        break;\n                                    }\n                                case 4: {\n                                        if (!(message.attributes && message.attributes.length))\n                                            message.attributes = [];\n                                        message.attributes.push($root.opentelemetry.proto.common.v1.KeyValue.decode(reader, reader.uint32()));\n                                        break;\n                                    }\n                                case 5: {\n                                        message.droppedAttributesCount = reader.uint32();\n                                        break;\n                                    }\n                                default:\n                                    reader.skipType(tag & 7);\n                                    break;\n                                }\n                            }\n                            return message;\n                        };\n\n                        /**\n                         * Decodes a Link message from the specified reader or buffer, length delimited.\n                         * @function decodeDelimited\n                         * @memberof opentelemetry.proto.trace.v1.Span.Link\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @returns {opentelemetry.proto.trace.v1.Span.Link} Link\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        Link.decodeDelimited = function decodeDelimited(reader) {\n                            if (!(reader instanceof $Reader))\n                                reader = new $Reader(reader);\n                            return this.decode(reader, reader.uint32());\n                        };\n\n                        /**\n                         * Verifies a Link message.\n                         * @function verify\n                         * @memberof opentelemetry.proto.trace.v1.Span.Link\n                         * @static\n                         * @param {Object.<string,*>} message Plain object to verify\n                         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                         */\n                        Link.verify = function verify(message) {\n                            if (typeof message !== \"object\" || message === null)\n                                return \"object expected\";\n                            if (message.traceId != null && message.hasOwnProperty(\"traceId\"))\n                                if (!(message.traceId && typeof message.traceId.length === \"number\" || $util.isString(message.traceId)))\n                                    return \"traceId: buffer expected\";\n                            if (message.spanId != null && message.hasOwnProperty(\"spanId\"))\n                                if (!(message.spanId && typeof message.spanId.length === \"number\" || $util.isString(message.spanId)))\n                                    return \"spanId: buffer expected\";\n                            if (message.traceState != null && message.hasOwnProperty(\"traceState\"))\n                                if (!$util.isString(message.traceState))\n                                    return \"traceState: string expected\";\n                            if (message.attributes != null && message.hasOwnProperty(\"attributes\")) {\n                                if (!Array.isArray(message.attributes))\n                                    return \"attributes: array expected\";\n                                for (var i = 0; i < message.attributes.length; ++i) {\n                                    var error = $root.opentelemetry.proto.common.v1.KeyValue.verify(message.attributes[i]);\n                                    if (error)\n                                        return \"attributes.\" + error;\n                                }\n                            }\n                            if (message.droppedAttributesCount != null && message.hasOwnProperty(\"droppedAttributesCount\"))\n                                if (!$util.isInteger(message.droppedAttributesCount))\n                                    return \"droppedAttributesCount: integer expected\";\n                            return null;\n                        };\n\n                        /**\n                         * Creates a Link message from a plain object. Also converts values to their respective internal types.\n                         * @function fromObject\n                         * @memberof opentelemetry.proto.trace.v1.Span.Link\n                         * @static\n                         * @param {Object.<string,*>} object Plain object\n                         * @returns {opentelemetry.proto.trace.v1.Span.Link} Link\n                         */\n                        Link.fromObject = function fromObject(object) {\n                            if (object instanceof $root.opentelemetry.proto.trace.v1.Span.Link)\n                                return object;\n                            var message = new $root.opentelemetry.proto.trace.v1.Span.Link();\n                            if (object.traceId != null)\n                                if (typeof object.traceId === \"string\")\n                                    $util.base64.decode(object.traceId, message.traceId = $util.newBuffer($util.base64.length(object.traceId)), 0);\n                                else if (object.traceId.length >= 0)\n                                    message.traceId = object.traceId;\n                            if (object.spanId != null)\n                                if (typeof object.spanId === \"string\")\n                                    $util.base64.decode(object.spanId, message.spanId = $util.newBuffer($util.base64.length(object.spanId)), 0);\n                                else if (object.spanId.length >= 0)\n                                    message.spanId = object.spanId;\n                            if (object.traceState != null)\n                                message.traceState = String(object.traceState);\n                            if (object.attributes) {\n                                if (!Array.isArray(object.attributes))\n                                    throw TypeError(\".opentelemetry.proto.trace.v1.Span.Link.attributes: array expected\");\n                                message.attributes = [];\n                                for (var i = 0; i < object.attributes.length; ++i) {\n                                    if (typeof object.attributes[i] !== \"object\")\n                                        throw TypeError(\".opentelemetry.proto.trace.v1.Span.Link.attributes: object expected\");\n                                    message.attributes[i] = $root.opentelemetry.proto.common.v1.KeyValue.fromObject(object.attributes[i]);\n                                }\n                            }\n                            if (object.droppedAttributesCount != null)\n                                message.droppedAttributesCount = object.droppedAttributesCount >>> 0;\n                            return message;\n                        };\n\n                        /**\n                         * Creates a plain object from a Link message. Also converts values to other types if specified.\n                         * @function toObject\n                         * @memberof opentelemetry.proto.trace.v1.Span.Link\n                         * @static\n                         * @param {opentelemetry.proto.trace.v1.Span.Link} message Link\n                         * @param {$protobuf.IConversionOptions} [options] Conversion options\n                         * @returns {Object.<string,*>} Plain object\n                         */\n                        Link.toObject = function toObject(message, options) {\n                            if (!options)\n                                options = {};\n                            var object = {};\n                            if (options.arrays || options.defaults)\n                                object.attributes = [];\n                            if (options.defaults) {\n                                if (options.bytes === String)\n                                    object.traceId = \"\";\n                                else {\n                                    object.traceId = [];\n                                    if (options.bytes !== Array)\n                                        object.traceId = $util.newBuffer(object.traceId);\n                                }\n                                if (options.bytes === String)\n                                    object.spanId = \"\";\n                                else {\n                                    object.spanId = [];\n                                    if (options.bytes !== Array)\n                                        object.spanId = $util.newBuffer(object.spanId);\n                                }\n                                object.traceState = \"\";\n                                object.droppedAttributesCount = 0;\n                            }\n                            if (message.traceId != null && message.hasOwnProperty(\"traceId\"))\n                                object.traceId = options.bytes === String ? $util.base64.encode(message.traceId, 0, message.traceId.length) : options.bytes === Array ? Array.prototype.slice.call(message.traceId) : message.traceId;\n                            if (message.spanId != null && message.hasOwnProperty(\"spanId\"))\n                                object.spanId = options.bytes === String ? $util.base64.encode(message.spanId, 0, message.spanId.length) : options.bytes === Array ? Array.prototype.slice.call(message.spanId) : message.spanId;\n                            if (message.traceState != null && message.hasOwnProperty(\"traceState\"))\n                                object.traceState = message.traceState;\n                            if (message.attributes && message.attributes.length) {\n                                object.attributes = [];\n                                for (var j = 0; j < message.attributes.length; ++j)\n                                    object.attributes[j] = $root.opentelemetry.proto.common.v1.KeyValue.toObject(message.attributes[j], options);\n                            }\n                            if (message.droppedAttributesCount != null && message.hasOwnProperty(\"droppedAttributesCount\"))\n                                object.droppedAttributesCount = message.droppedAttributesCount;\n                            return object;\n                        };\n\n                        /**\n                         * Converts this Link to JSON.\n                         * @function toJSON\n                         * @memberof opentelemetry.proto.trace.v1.Span.Link\n                         * @instance\n                         * @returns {Object.<string,*>} JSON object\n                         */\n                        Link.prototype.toJSON = function toJSON() {\n                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                        };\n\n                        /**\n                         * Gets the default type url for Link\n                         * @function getTypeUrl\n                         * @memberof opentelemetry.proto.trace.v1.Span.Link\n                         * @static\n                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                         * @returns {string} The default type url\n                         */\n                        Link.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                            if (typeUrlPrefix === undefined) {\n                                typeUrlPrefix = \"type.googleapis.com\";\n                            }\n                            return typeUrlPrefix + \"/opentelemetry.proto.trace.v1.Span.Link\";\n                        };\n\n                        return Link;\n                    })();\n\n                    return Span;\n                })();\n\n                v1.Status = (function() {\n\n                    /**\n                     * Properties of a Status.\n                     * @memberof opentelemetry.proto.trace.v1\n                     * @interface IStatus\n                     * @property {string|null} [message] Status message\n                     * @property {opentelemetry.proto.trace.v1.Status.StatusCode|null} [code] Status code\n                     */\n\n                    /**\n                     * Constructs a new Status.\n                     * @memberof opentelemetry.proto.trace.v1\n                     * @classdesc Represents a Status.\n                     * @implements IStatus\n                     * @constructor\n                     * @param {opentelemetry.proto.trace.v1.IStatus=} [properties] Properties to set\n                     */\n                    function Status(properties) {\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * Status message.\n                     * @member {string|null|undefined} message\n                     * @memberof opentelemetry.proto.trace.v1.Status\n                     * @instance\n                     */\n                    Status.prototype.message = null;\n\n                    /**\n                     * Status code.\n                     * @member {opentelemetry.proto.trace.v1.Status.StatusCode|null|undefined} code\n                     * @memberof opentelemetry.proto.trace.v1.Status\n                     * @instance\n                     */\n                    Status.prototype.code = null;\n\n                    /**\n                     * Creates a new Status instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.trace.v1.Status\n                     * @static\n                     * @param {opentelemetry.proto.trace.v1.IStatus=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.trace.v1.Status} Status instance\n                     */\n                    Status.create = function create(properties) {\n                        return new Status(properties);\n                    };\n\n                    /**\n                     * Encodes the specified Status message. Does not implicitly {@link opentelemetry.proto.trace.v1.Status.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.trace.v1.Status\n                     * @static\n                     * @param {opentelemetry.proto.trace.v1.IStatus} message Status message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    Status.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.message != null && Object.hasOwnProperty.call(message, \"message\"))\n                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.message);\n                        if (message.code != null && Object.hasOwnProperty.call(message, \"code\"))\n                            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.code);\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified Status message, length delimited. Does not implicitly {@link opentelemetry.proto.trace.v1.Status.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.trace.v1.Status\n                     * @static\n                     * @param {opentelemetry.proto.trace.v1.IStatus} message Status message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    Status.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes a Status message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.trace.v1.Status\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.trace.v1.Status} Status\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    Status.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.trace.v1.Status();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 2: {\n                                    message.message = reader.string();\n                                    break;\n                                }\n                            case 3: {\n                                    message.code = reader.int32();\n                                    break;\n                                }\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes a Status message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.trace.v1.Status\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.trace.v1.Status} Status\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    Status.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies a Status message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.trace.v1.Status\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    Status.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.message != null && message.hasOwnProperty(\"message\"))\n                            if (!$util.isString(message.message))\n                                return \"message: string expected\";\n                        if (message.code != null && message.hasOwnProperty(\"code\"))\n                            switch (message.code) {\n                            default:\n                                return \"code: enum value expected\";\n                            case 0:\n                            case 1:\n                            case 2:\n                                break;\n                            }\n                        return null;\n                    };\n\n                    /**\n                     * Creates a Status message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.trace.v1.Status\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.trace.v1.Status} Status\n                     */\n                    Status.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.trace.v1.Status)\n                            return object;\n                        var message = new $root.opentelemetry.proto.trace.v1.Status();\n                        if (object.message != null)\n                            message.message = String(object.message);\n                        switch (object.code) {\n                        default:\n                            if (typeof object.code === \"number\") {\n                                message.code = object.code;\n                                break;\n                            }\n                            break;\n                        case \"STATUS_CODE_UNSET\":\n                        case 0:\n                            message.code = 0;\n                            break;\n                        case \"STATUS_CODE_OK\":\n                        case 1:\n                            message.code = 1;\n                            break;\n                        case \"STATUS_CODE_ERROR\":\n                        case 2:\n                            message.code = 2;\n                            break;\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from a Status message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.trace.v1.Status\n                     * @static\n                     * @param {opentelemetry.proto.trace.v1.Status} message Status\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    Status.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.defaults) {\n                            object.message = \"\";\n                            object.code = options.enums === String ? \"STATUS_CODE_UNSET\" : 0;\n                        }\n                        if (message.message != null && message.hasOwnProperty(\"message\"))\n                            object.message = message.message;\n                        if (message.code != null && message.hasOwnProperty(\"code\"))\n                            object.code = options.enums === String ? $root.opentelemetry.proto.trace.v1.Status.StatusCode[message.code] === undefined ? message.code : $root.opentelemetry.proto.trace.v1.Status.StatusCode[message.code] : message.code;\n                        return object;\n                    };\n\n                    /**\n                     * Converts this Status to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.trace.v1.Status\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    Status.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    /**\n                     * Gets the default type url for Status\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.trace.v1.Status\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    Status.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.trace.v1.Status\";\n                    };\n\n                    /**\n                     * StatusCode enum.\n                     * @name opentelemetry.proto.trace.v1.Status.StatusCode\n                     * @enum {number}\n                     * @property {number} STATUS_CODE_UNSET=0 STATUS_CODE_UNSET value\n                     * @property {number} STATUS_CODE_OK=1 STATUS_CODE_OK value\n                     * @property {number} STATUS_CODE_ERROR=2 STATUS_CODE_ERROR value\n                     */\n                    Status.StatusCode = (function() {\n                        var valuesById = {}, values = Object.create(valuesById);\n                        values[valuesById[0] = \"STATUS_CODE_UNSET\"] = 0;\n                        values[valuesById[1] = \"STATUS_CODE_OK\"] = 1;\n                        values[valuesById[2] = \"STATUS_CODE_ERROR\"] = 2;\n                        return values;\n                    })();\n\n                    return Status;\n                })();\n\n                return v1;\n            })();\n\n            return trace;\n        })();\n\n        proto.collector = (function() {\n\n            /**\n             * Namespace collector.\n             * @memberof opentelemetry.proto\n             * @namespace\n             */\n            var collector = {};\n\n            collector.trace = (function() {\n\n                /**\n                 * Namespace trace.\n                 * @memberof opentelemetry.proto.collector\n                 * @namespace\n                 */\n                var trace = {};\n\n                trace.v1 = (function() {\n\n                    /**\n                     * Namespace v1.\n                     * @memberof opentelemetry.proto.collector.trace\n                     * @namespace\n                     */\n                    var v1 = {};\n\n                    v1.TraceService = (function() {\n\n                        /**\n                         * Constructs a new TraceService service.\n                         * @memberof opentelemetry.proto.collector.trace.v1\n                         * @classdesc Represents a TraceService\n                         * @extends $protobuf.rpc.Service\n                         * @constructor\n                         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation\n                         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n                         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n                         */\n                        function TraceService(rpcImpl, requestDelimited, responseDelimited) {\n                            $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);\n                        }\n\n                        (TraceService.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = TraceService;\n\n                        /**\n                         * Creates new TraceService service using the specified rpc implementation.\n                         * @function create\n                         * @memberof opentelemetry.proto.collector.trace.v1.TraceService\n                         * @static\n                         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation\n                         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n                         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n                         * @returns {TraceService} RPC service. Useful where requests and/or responses are streamed.\n                         */\n                        TraceService.create = function create(rpcImpl, requestDelimited, responseDelimited) {\n                            return new this(rpcImpl, requestDelimited, responseDelimited);\n                        };\n\n                        /**\n                         * Callback as used by {@link opentelemetry.proto.collector.trace.v1.TraceService#export_}.\n                         * @memberof opentelemetry.proto.collector.trace.v1.TraceService\n                         * @typedef ExportCallback\n                         * @type {function}\n                         * @param {Error|null} error Error, if any\n                         * @param {opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse} [response] ExportTraceServiceResponse\n                         */\n\n                        /**\n                         * Calls Export.\n                         * @function export\n                         * @memberof opentelemetry.proto.collector.trace.v1.TraceService\n                         * @instance\n                         * @param {opentelemetry.proto.collector.trace.v1.IExportTraceServiceRequest} request ExportTraceServiceRequest message or plain object\n                         * @param {opentelemetry.proto.collector.trace.v1.TraceService.ExportCallback} callback Node-style callback called with the error, if any, and ExportTraceServiceResponse\n                         * @returns {undefined}\n                         * @variation 1\n                         */\n                        Object.defineProperty(TraceService.prototype[\"export\"] = function export_(request, callback) {\n                            return this.rpcCall(export_, $root.opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest, $root.opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse, request, callback);\n                        }, \"name\", { value: \"Export\" });\n\n                        /**\n                         * Calls Export.\n                         * @function export\n                         * @memberof opentelemetry.proto.collector.trace.v1.TraceService\n                         * @instance\n                         * @param {opentelemetry.proto.collector.trace.v1.IExportTraceServiceRequest} request ExportTraceServiceRequest message or plain object\n                         * @returns {Promise<opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse>} Promise\n                         * @variation 2\n                         */\n\n                        return TraceService;\n                    })();\n\n                    v1.ExportTraceServiceRequest = (function() {\n\n                        /**\n                         * Properties of an ExportTraceServiceRequest.\n                         * @memberof opentelemetry.proto.collector.trace.v1\n                         * @interface IExportTraceServiceRequest\n                         * @property {Array.<opentelemetry.proto.trace.v1.IResourceSpans>|null} [resourceSpans] ExportTraceServiceRequest resourceSpans\n                         */\n\n                        /**\n                         * Constructs a new ExportTraceServiceRequest.\n                         * @memberof opentelemetry.proto.collector.trace.v1\n                         * @classdesc Represents an ExportTraceServiceRequest.\n                         * @implements IExportTraceServiceRequest\n                         * @constructor\n                         * @param {opentelemetry.proto.collector.trace.v1.IExportTraceServiceRequest=} [properties] Properties to set\n                         */\n                        function ExportTraceServiceRequest(properties) {\n                            this.resourceSpans = [];\n                            if (properties)\n                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                    if (properties[keys[i]] != null)\n                                        this[keys[i]] = properties[keys[i]];\n                        }\n\n                        /**\n                         * ExportTraceServiceRequest resourceSpans.\n                         * @member {Array.<opentelemetry.proto.trace.v1.IResourceSpans>} resourceSpans\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest\n                         * @instance\n                         */\n                        ExportTraceServiceRequest.prototype.resourceSpans = $util.emptyArray;\n\n                        /**\n                         * Creates a new ExportTraceServiceRequest instance using the specified properties.\n                         * @function create\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest\n                         * @static\n                         * @param {opentelemetry.proto.collector.trace.v1.IExportTraceServiceRequest=} [properties] Properties to set\n                         * @returns {opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest} ExportTraceServiceRequest instance\n                         */\n                        ExportTraceServiceRequest.create = function create(properties) {\n                            return new ExportTraceServiceRequest(properties);\n                        };\n\n                        /**\n                         * Encodes the specified ExportTraceServiceRequest message. Does not implicitly {@link opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest.verify|verify} messages.\n                         * @function encode\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest\n                         * @static\n                         * @param {opentelemetry.proto.collector.trace.v1.IExportTraceServiceRequest} message ExportTraceServiceRequest message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        ExportTraceServiceRequest.encode = function encode(message, writer) {\n                            if (!writer)\n                                writer = $Writer.create();\n                            if (message.resourceSpans != null && message.resourceSpans.length)\n                                for (var i = 0; i < message.resourceSpans.length; ++i)\n                                    $root.opentelemetry.proto.trace.v1.ResourceSpans.encode(message.resourceSpans[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                            return writer;\n                        };\n\n                        /**\n                         * Encodes the specified ExportTraceServiceRequest message, length delimited. Does not implicitly {@link opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest.verify|verify} messages.\n                         * @function encodeDelimited\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest\n                         * @static\n                         * @param {opentelemetry.proto.collector.trace.v1.IExportTraceServiceRequest} message ExportTraceServiceRequest message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        ExportTraceServiceRequest.encodeDelimited = function encodeDelimited(message, writer) {\n                            return this.encode(message, writer).ldelim();\n                        };\n\n                        /**\n                         * Decodes an ExportTraceServiceRequest message from the specified reader or buffer.\n                         * @function decode\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @param {number} [length] Message length if known beforehand\n                         * @returns {opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest} ExportTraceServiceRequest\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        ExportTraceServiceRequest.decode = function decode(reader, length) {\n                            if (!(reader instanceof $Reader))\n                                reader = $Reader.create(reader);\n                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest();\n                            while (reader.pos < end) {\n                                var tag = reader.uint32();\n                                switch (tag >>> 3) {\n                                case 1: {\n                                        if (!(message.resourceSpans && message.resourceSpans.length))\n                                            message.resourceSpans = [];\n                                        message.resourceSpans.push($root.opentelemetry.proto.trace.v1.ResourceSpans.decode(reader, reader.uint32()));\n                                        break;\n                                    }\n                                default:\n                                    reader.skipType(tag & 7);\n                                    break;\n                                }\n                            }\n                            return message;\n                        };\n\n                        /**\n                         * Decodes an ExportTraceServiceRequest message from the specified reader or buffer, length delimited.\n                         * @function decodeDelimited\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @returns {opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest} ExportTraceServiceRequest\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        ExportTraceServiceRequest.decodeDelimited = function decodeDelimited(reader) {\n                            if (!(reader instanceof $Reader))\n                                reader = new $Reader(reader);\n                            return this.decode(reader, reader.uint32());\n                        };\n\n                        /**\n                         * Verifies an ExportTraceServiceRequest message.\n                         * @function verify\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest\n                         * @static\n                         * @param {Object.<string,*>} message Plain object to verify\n                         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                         */\n                        ExportTraceServiceRequest.verify = function verify(message) {\n                            if (typeof message !== \"object\" || message === null)\n                                return \"object expected\";\n                            if (message.resourceSpans != null && message.hasOwnProperty(\"resourceSpans\")) {\n                                if (!Array.isArray(message.resourceSpans))\n                                    return \"resourceSpans: array expected\";\n                                for (var i = 0; i < message.resourceSpans.length; ++i) {\n                                    var error = $root.opentelemetry.proto.trace.v1.ResourceSpans.verify(message.resourceSpans[i]);\n                                    if (error)\n                                        return \"resourceSpans.\" + error;\n                                }\n                            }\n                            return null;\n                        };\n\n                        /**\n                         * Creates an ExportTraceServiceRequest message from a plain object. Also converts values to their respective internal types.\n                         * @function fromObject\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest\n                         * @static\n                         * @param {Object.<string,*>} object Plain object\n                         * @returns {opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest} ExportTraceServiceRequest\n                         */\n                        ExportTraceServiceRequest.fromObject = function fromObject(object) {\n                            if (object instanceof $root.opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest)\n                                return object;\n                            var message = new $root.opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest();\n                            if (object.resourceSpans) {\n                                if (!Array.isArray(object.resourceSpans))\n                                    throw TypeError(\".opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest.resourceSpans: array expected\");\n                                message.resourceSpans = [];\n                                for (var i = 0; i < object.resourceSpans.length; ++i) {\n                                    if (typeof object.resourceSpans[i] !== \"object\")\n                                        throw TypeError(\".opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest.resourceSpans: object expected\");\n                                    message.resourceSpans[i] = $root.opentelemetry.proto.trace.v1.ResourceSpans.fromObject(object.resourceSpans[i]);\n                                }\n                            }\n                            return message;\n                        };\n\n                        /**\n                         * Creates a plain object from an ExportTraceServiceRequest message. Also converts values to other types if specified.\n                         * @function toObject\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest\n                         * @static\n                         * @param {opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest} message ExportTraceServiceRequest\n                         * @param {$protobuf.IConversionOptions} [options] Conversion options\n                         * @returns {Object.<string,*>} Plain object\n                         */\n                        ExportTraceServiceRequest.toObject = function toObject(message, options) {\n                            if (!options)\n                                options = {};\n                            var object = {};\n                            if (options.arrays || options.defaults)\n                                object.resourceSpans = [];\n                            if (message.resourceSpans && message.resourceSpans.length) {\n                                object.resourceSpans = [];\n                                for (var j = 0; j < message.resourceSpans.length; ++j)\n                                    object.resourceSpans[j] = $root.opentelemetry.proto.trace.v1.ResourceSpans.toObject(message.resourceSpans[j], options);\n                            }\n                            return object;\n                        };\n\n                        /**\n                         * Converts this ExportTraceServiceRequest to JSON.\n                         * @function toJSON\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest\n                         * @instance\n                         * @returns {Object.<string,*>} JSON object\n                         */\n                        ExportTraceServiceRequest.prototype.toJSON = function toJSON() {\n                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                        };\n\n                        /**\n                         * Gets the default type url for ExportTraceServiceRequest\n                         * @function getTypeUrl\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest\n                         * @static\n                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                         * @returns {string} The default type url\n                         */\n                        ExportTraceServiceRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                            if (typeUrlPrefix === undefined) {\n                                typeUrlPrefix = \"type.googleapis.com\";\n                            }\n                            return typeUrlPrefix + \"/opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest\";\n                        };\n\n                        return ExportTraceServiceRequest;\n                    })();\n\n                    v1.ExportTraceServiceResponse = (function() {\n\n                        /**\n                         * Properties of an ExportTraceServiceResponse.\n                         * @memberof opentelemetry.proto.collector.trace.v1\n                         * @interface IExportTraceServiceResponse\n                         * @property {opentelemetry.proto.collector.trace.v1.IExportTracePartialSuccess|null} [partialSuccess] ExportTraceServiceResponse partialSuccess\n                         */\n\n                        /**\n                         * Constructs a new ExportTraceServiceResponse.\n                         * @memberof opentelemetry.proto.collector.trace.v1\n                         * @classdesc Represents an ExportTraceServiceResponse.\n                         * @implements IExportTraceServiceResponse\n                         * @constructor\n                         * @param {opentelemetry.proto.collector.trace.v1.IExportTraceServiceResponse=} [properties] Properties to set\n                         */\n                        function ExportTraceServiceResponse(properties) {\n                            if (properties)\n                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                    if (properties[keys[i]] != null)\n                                        this[keys[i]] = properties[keys[i]];\n                        }\n\n                        /**\n                         * ExportTraceServiceResponse partialSuccess.\n                         * @member {opentelemetry.proto.collector.trace.v1.IExportTracePartialSuccess|null|undefined} partialSuccess\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse\n                         * @instance\n                         */\n                        ExportTraceServiceResponse.prototype.partialSuccess = null;\n\n                        /**\n                         * Creates a new ExportTraceServiceResponse instance using the specified properties.\n                         * @function create\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse\n                         * @static\n                         * @param {opentelemetry.proto.collector.trace.v1.IExportTraceServiceResponse=} [properties] Properties to set\n                         * @returns {opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse} ExportTraceServiceResponse instance\n                         */\n                        ExportTraceServiceResponse.create = function create(properties) {\n                            return new ExportTraceServiceResponse(properties);\n                        };\n\n                        /**\n                         * Encodes the specified ExportTraceServiceResponse message. Does not implicitly {@link opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse.verify|verify} messages.\n                         * @function encode\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse\n                         * @static\n                         * @param {opentelemetry.proto.collector.trace.v1.IExportTraceServiceResponse} message ExportTraceServiceResponse message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        ExportTraceServiceResponse.encode = function encode(message, writer) {\n                            if (!writer)\n                                writer = $Writer.create();\n                            if (message.partialSuccess != null && Object.hasOwnProperty.call(message, \"partialSuccess\"))\n                                $root.opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess.encode(message.partialSuccess, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                            return writer;\n                        };\n\n                        /**\n                         * Encodes the specified ExportTraceServiceResponse message, length delimited. Does not implicitly {@link opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse.verify|verify} messages.\n                         * @function encodeDelimited\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse\n                         * @static\n                         * @param {opentelemetry.proto.collector.trace.v1.IExportTraceServiceResponse} message ExportTraceServiceResponse message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        ExportTraceServiceResponse.encodeDelimited = function encodeDelimited(message, writer) {\n                            return this.encode(message, writer).ldelim();\n                        };\n\n                        /**\n                         * Decodes an ExportTraceServiceResponse message from the specified reader or buffer.\n                         * @function decode\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @param {number} [length] Message length if known beforehand\n                         * @returns {opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse} ExportTraceServiceResponse\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        ExportTraceServiceResponse.decode = function decode(reader, length) {\n                            if (!(reader instanceof $Reader))\n                                reader = $Reader.create(reader);\n                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse();\n                            while (reader.pos < end) {\n                                var tag = reader.uint32();\n                                switch (tag >>> 3) {\n                                case 1: {\n                                        message.partialSuccess = $root.opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess.decode(reader, reader.uint32());\n                                        break;\n                                    }\n                                default:\n                                    reader.skipType(tag & 7);\n                                    break;\n                                }\n                            }\n                            return message;\n                        };\n\n                        /**\n                         * Decodes an ExportTraceServiceResponse message from the specified reader or buffer, length delimited.\n                         * @function decodeDelimited\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @returns {opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse} ExportTraceServiceResponse\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        ExportTraceServiceResponse.decodeDelimited = function decodeDelimited(reader) {\n                            if (!(reader instanceof $Reader))\n                                reader = new $Reader(reader);\n                            return this.decode(reader, reader.uint32());\n                        };\n\n                        /**\n                         * Verifies an ExportTraceServiceResponse message.\n                         * @function verify\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse\n                         * @static\n                         * @param {Object.<string,*>} message Plain object to verify\n                         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                         */\n                        ExportTraceServiceResponse.verify = function verify(message) {\n                            if (typeof message !== \"object\" || message === null)\n                                return \"object expected\";\n                            if (message.partialSuccess != null && message.hasOwnProperty(\"partialSuccess\")) {\n                                var error = $root.opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess.verify(message.partialSuccess);\n                                if (error)\n                                    return \"partialSuccess.\" + error;\n                            }\n                            return null;\n                        };\n\n                        /**\n                         * Creates an ExportTraceServiceResponse message from a plain object. Also converts values to their respective internal types.\n                         * @function fromObject\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse\n                         * @static\n                         * @param {Object.<string,*>} object Plain object\n                         * @returns {opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse} ExportTraceServiceResponse\n                         */\n                        ExportTraceServiceResponse.fromObject = function fromObject(object) {\n                            if (object instanceof $root.opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse)\n                                return object;\n                            var message = new $root.opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse();\n                            if (object.partialSuccess != null) {\n                                if (typeof object.partialSuccess !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse.partialSuccess: object expected\");\n                                message.partialSuccess = $root.opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess.fromObject(object.partialSuccess);\n                            }\n                            return message;\n                        };\n\n                        /**\n                         * Creates a plain object from an ExportTraceServiceResponse message. Also converts values to other types if specified.\n                         * @function toObject\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse\n                         * @static\n                         * @param {opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse} message ExportTraceServiceResponse\n                         * @param {$protobuf.IConversionOptions} [options] Conversion options\n                         * @returns {Object.<string,*>} Plain object\n                         */\n                        ExportTraceServiceResponse.toObject = function toObject(message, options) {\n                            if (!options)\n                                options = {};\n                            var object = {};\n                            if (options.defaults)\n                                object.partialSuccess = null;\n                            if (message.partialSuccess != null && message.hasOwnProperty(\"partialSuccess\"))\n                                object.partialSuccess = $root.opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess.toObject(message.partialSuccess, options);\n                            return object;\n                        };\n\n                        /**\n                         * Converts this ExportTraceServiceResponse to JSON.\n                         * @function toJSON\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse\n                         * @instance\n                         * @returns {Object.<string,*>} JSON object\n                         */\n                        ExportTraceServiceResponse.prototype.toJSON = function toJSON() {\n                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                        };\n\n                        /**\n                         * Gets the default type url for ExportTraceServiceResponse\n                         * @function getTypeUrl\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse\n                         * @static\n                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                         * @returns {string} The default type url\n                         */\n                        ExportTraceServiceResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                            if (typeUrlPrefix === undefined) {\n                                typeUrlPrefix = \"type.googleapis.com\";\n                            }\n                            return typeUrlPrefix + \"/opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse\";\n                        };\n\n                        return ExportTraceServiceResponse;\n                    })();\n\n                    v1.ExportTracePartialSuccess = (function() {\n\n                        /**\n                         * Properties of an ExportTracePartialSuccess.\n                         * @memberof opentelemetry.proto.collector.trace.v1\n                         * @interface IExportTracePartialSuccess\n                         * @property {number|Long|null} [rejectedSpans] ExportTracePartialSuccess rejectedSpans\n                         * @property {string|null} [errorMessage] ExportTracePartialSuccess errorMessage\n                         */\n\n                        /**\n                         * Constructs a new ExportTracePartialSuccess.\n                         * @memberof opentelemetry.proto.collector.trace.v1\n                         * @classdesc Represents an ExportTracePartialSuccess.\n                         * @implements IExportTracePartialSuccess\n                         * @constructor\n                         * @param {opentelemetry.proto.collector.trace.v1.IExportTracePartialSuccess=} [properties] Properties to set\n                         */\n                        function ExportTracePartialSuccess(properties) {\n                            if (properties)\n                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                    if (properties[keys[i]] != null)\n                                        this[keys[i]] = properties[keys[i]];\n                        }\n\n                        /**\n                         * ExportTracePartialSuccess rejectedSpans.\n                         * @member {number|Long|null|undefined} rejectedSpans\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess\n                         * @instance\n                         */\n                        ExportTracePartialSuccess.prototype.rejectedSpans = null;\n\n                        /**\n                         * ExportTracePartialSuccess errorMessage.\n                         * @member {string|null|undefined} errorMessage\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess\n                         * @instance\n                         */\n                        ExportTracePartialSuccess.prototype.errorMessage = null;\n\n                        /**\n                         * Creates a new ExportTracePartialSuccess instance using the specified properties.\n                         * @function create\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess\n                         * @static\n                         * @param {opentelemetry.proto.collector.trace.v1.IExportTracePartialSuccess=} [properties] Properties to set\n                         * @returns {opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess} ExportTracePartialSuccess instance\n                         */\n                        ExportTracePartialSuccess.create = function create(properties) {\n                            return new ExportTracePartialSuccess(properties);\n                        };\n\n                        /**\n                         * Encodes the specified ExportTracePartialSuccess message. Does not implicitly {@link opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess.verify|verify} messages.\n                         * @function encode\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess\n                         * @static\n                         * @param {opentelemetry.proto.collector.trace.v1.IExportTracePartialSuccess} message ExportTracePartialSuccess message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        ExportTracePartialSuccess.encode = function encode(message, writer) {\n                            if (!writer)\n                                writer = $Writer.create();\n                            if (message.rejectedSpans != null && Object.hasOwnProperty.call(message, \"rejectedSpans\"))\n                                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.rejectedSpans);\n                            if (message.errorMessage != null && Object.hasOwnProperty.call(message, \"errorMessage\"))\n                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.errorMessage);\n                            return writer;\n                        };\n\n                        /**\n                         * Encodes the specified ExportTracePartialSuccess message, length delimited. Does not implicitly {@link opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess.verify|verify} messages.\n                         * @function encodeDelimited\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess\n                         * @static\n                         * @param {opentelemetry.proto.collector.trace.v1.IExportTracePartialSuccess} message ExportTracePartialSuccess message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        ExportTracePartialSuccess.encodeDelimited = function encodeDelimited(message, writer) {\n                            return this.encode(message, writer).ldelim();\n                        };\n\n                        /**\n                         * Decodes an ExportTracePartialSuccess message from the specified reader or buffer.\n                         * @function decode\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @param {number} [length] Message length if known beforehand\n                         * @returns {opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess} ExportTracePartialSuccess\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        ExportTracePartialSuccess.decode = function decode(reader, length) {\n                            if (!(reader instanceof $Reader))\n                                reader = $Reader.create(reader);\n                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess();\n                            while (reader.pos < end) {\n                                var tag = reader.uint32();\n                                switch (tag >>> 3) {\n                                case 1: {\n                                        message.rejectedSpans = reader.int64();\n                                        break;\n                                    }\n                                case 2: {\n                                        message.errorMessage = reader.string();\n                                        break;\n                                    }\n                                default:\n                                    reader.skipType(tag & 7);\n                                    break;\n                                }\n                            }\n                            return message;\n                        };\n\n                        /**\n                         * Decodes an ExportTracePartialSuccess message from the specified reader or buffer, length delimited.\n                         * @function decodeDelimited\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @returns {opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess} ExportTracePartialSuccess\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        ExportTracePartialSuccess.decodeDelimited = function decodeDelimited(reader) {\n                            if (!(reader instanceof $Reader))\n                                reader = new $Reader(reader);\n                            return this.decode(reader, reader.uint32());\n                        };\n\n                        /**\n                         * Verifies an ExportTracePartialSuccess message.\n                         * @function verify\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess\n                         * @static\n                         * @param {Object.<string,*>} message Plain object to verify\n                         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                         */\n                        ExportTracePartialSuccess.verify = function verify(message) {\n                            if (typeof message !== \"object\" || message === null)\n                                return \"object expected\";\n                            if (message.rejectedSpans != null && message.hasOwnProperty(\"rejectedSpans\"))\n                                if (!$util.isInteger(message.rejectedSpans) && !(message.rejectedSpans && $util.isInteger(message.rejectedSpans.low) && $util.isInteger(message.rejectedSpans.high)))\n                                    return \"rejectedSpans: integer|Long expected\";\n                            if (message.errorMessage != null && message.hasOwnProperty(\"errorMessage\"))\n                                if (!$util.isString(message.errorMessage))\n                                    return \"errorMessage: string expected\";\n                            return null;\n                        };\n\n                        /**\n                         * Creates an ExportTracePartialSuccess message from a plain object. Also converts values to their respective internal types.\n                         * @function fromObject\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess\n                         * @static\n                         * @param {Object.<string,*>} object Plain object\n                         * @returns {opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess} ExportTracePartialSuccess\n                         */\n                        ExportTracePartialSuccess.fromObject = function fromObject(object) {\n                            if (object instanceof $root.opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess)\n                                return object;\n                            var message = new $root.opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess();\n                            if (object.rejectedSpans != null)\n                                if ($util.Long)\n                                    (message.rejectedSpans = $util.Long.fromValue(object.rejectedSpans)).unsigned = false;\n                                else if (typeof object.rejectedSpans === \"string\")\n                                    message.rejectedSpans = parseInt(object.rejectedSpans, 10);\n                                else if (typeof object.rejectedSpans === \"number\")\n                                    message.rejectedSpans = object.rejectedSpans;\n                                else if (typeof object.rejectedSpans === \"object\")\n                                    message.rejectedSpans = new $util.LongBits(object.rejectedSpans.low >>> 0, object.rejectedSpans.high >>> 0).toNumber();\n                            if (object.errorMessage != null)\n                                message.errorMessage = String(object.errorMessage);\n                            return message;\n                        };\n\n                        /**\n                         * Creates a plain object from an ExportTracePartialSuccess message. Also converts values to other types if specified.\n                         * @function toObject\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess\n                         * @static\n                         * @param {opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess} message ExportTracePartialSuccess\n                         * @param {$protobuf.IConversionOptions} [options] Conversion options\n                         * @returns {Object.<string,*>} Plain object\n                         */\n                        ExportTracePartialSuccess.toObject = function toObject(message, options) {\n                            if (!options)\n                                options = {};\n                            var object = {};\n                            if (options.defaults) {\n                                if ($util.Long) {\n                                    var long = new $util.Long(0, 0, false);\n                                    object.rejectedSpans = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                                } else\n                                    object.rejectedSpans = options.longs === String ? \"0\" : 0;\n                                object.errorMessage = \"\";\n                            }\n                            if (message.rejectedSpans != null && message.hasOwnProperty(\"rejectedSpans\"))\n                                if (typeof message.rejectedSpans === \"number\")\n                                    object.rejectedSpans = options.longs === String ? String(message.rejectedSpans) : message.rejectedSpans;\n                                else\n                                    object.rejectedSpans = options.longs === String ? $util.Long.prototype.toString.call(message.rejectedSpans) : options.longs === Number ? new $util.LongBits(message.rejectedSpans.low >>> 0, message.rejectedSpans.high >>> 0).toNumber() : message.rejectedSpans;\n                            if (message.errorMessage != null && message.hasOwnProperty(\"errorMessage\"))\n                                object.errorMessage = message.errorMessage;\n                            return object;\n                        };\n\n                        /**\n                         * Converts this ExportTracePartialSuccess to JSON.\n                         * @function toJSON\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess\n                         * @instance\n                         * @returns {Object.<string,*>} JSON object\n                         */\n                        ExportTracePartialSuccess.prototype.toJSON = function toJSON() {\n                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                        };\n\n                        /**\n                         * Gets the default type url for ExportTracePartialSuccess\n                         * @function getTypeUrl\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess\n                         * @static\n                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                         * @returns {string} The default type url\n                         */\n                        ExportTracePartialSuccess.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                            if (typeUrlPrefix === undefined) {\n                                typeUrlPrefix = \"type.googleapis.com\";\n                            }\n                            return typeUrlPrefix + \"/opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess\";\n                        };\n\n                        return ExportTracePartialSuccess;\n                    })();\n\n                    return v1;\n                })();\n\n                return trace;\n            })();\n\n            collector.metrics = (function() {\n\n                /**\n                 * Namespace metrics.\n                 * @memberof opentelemetry.proto.collector\n                 * @namespace\n                 */\n                var metrics = {};\n\n                metrics.v1 = (function() {\n\n                    /**\n                     * Namespace v1.\n                     * @memberof opentelemetry.proto.collector.metrics\n                     * @namespace\n                     */\n                    var v1 = {};\n\n                    v1.MetricsService = (function() {\n\n                        /**\n                         * Constructs a new MetricsService service.\n                         * @memberof opentelemetry.proto.collector.metrics.v1\n                         * @classdesc Represents a MetricsService\n                         * @extends $protobuf.rpc.Service\n                         * @constructor\n                         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation\n                         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n                         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n                         */\n                        function MetricsService(rpcImpl, requestDelimited, responseDelimited) {\n                            $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);\n                        }\n\n                        (MetricsService.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = MetricsService;\n\n                        /**\n                         * Creates new MetricsService service using the specified rpc implementation.\n                         * @function create\n                         * @memberof opentelemetry.proto.collector.metrics.v1.MetricsService\n                         * @static\n                         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation\n                         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n                         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n                         * @returns {MetricsService} RPC service. Useful where requests and/or responses are streamed.\n                         */\n                        MetricsService.create = function create(rpcImpl, requestDelimited, responseDelimited) {\n                            return new this(rpcImpl, requestDelimited, responseDelimited);\n                        };\n\n                        /**\n                         * Callback as used by {@link opentelemetry.proto.collector.metrics.v1.MetricsService#export_}.\n                         * @memberof opentelemetry.proto.collector.metrics.v1.MetricsService\n                         * @typedef ExportCallback\n                         * @type {function}\n                         * @param {Error|null} error Error, if any\n                         * @param {opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse} [response] ExportMetricsServiceResponse\n                         */\n\n                        /**\n                         * Calls Export.\n                         * @function export\n                         * @memberof opentelemetry.proto.collector.metrics.v1.MetricsService\n                         * @instance\n                         * @param {opentelemetry.proto.collector.metrics.v1.IExportMetricsServiceRequest} request ExportMetricsServiceRequest message or plain object\n                         * @param {opentelemetry.proto.collector.metrics.v1.MetricsService.ExportCallback} callback Node-style callback called with the error, if any, and ExportMetricsServiceResponse\n                         * @returns {undefined}\n                         * @variation 1\n                         */\n                        Object.defineProperty(MetricsService.prototype[\"export\"] = function export_(request, callback) {\n                            return this.rpcCall(export_, $root.opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest, $root.opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse, request, callback);\n                        }, \"name\", { value: \"Export\" });\n\n                        /**\n                         * Calls Export.\n                         * @function export\n                         * @memberof opentelemetry.proto.collector.metrics.v1.MetricsService\n                         * @instance\n                         * @param {opentelemetry.proto.collector.metrics.v1.IExportMetricsServiceRequest} request ExportMetricsServiceRequest message or plain object\n                         * @returns {Promise<opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse>} Promise\n                         * @variation 2\n                         */\n\n                        return MetricsService;\n                    })();\n\n                    v1.ExportMetricsServiceRequest = (function() {\n\n                        /**\n                         * Properties of an ExportMetricsServiceRequest.\n                         * @memberof opentelemetry.proto.collector.metrics.v1\n                         * @interface IExportMetricsServiceRequest\n                         * @property {Array.<opentelemetry.proto.metrics.v1.IResourceMetrics>|null} [resourceMetrics] ExportMetricsServiceRequest resourceMetrics\n                         */\n\n                        /**\n                         * Constructs a new ExportMetricsServiceRequest.\n                         * @memberof opentelemetry.proto.collector.metrics.v1\n                         * @classdesc Represents an ExportMetricsServiceRequest.\n                         * @implements IExportMetricsServiceRequest\n                         * @constructor\n                         * @param {opentelemetry.proto.collector.metrics.v1.IExportMetricsServiceRequest=} [properties] Properties to set\n                         */\n                        function ExportMetricsServiceRequest(properties) {\n                            this.resourceMetrics = [];\n                            if (properties)\n                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                    if (properties[keys[i]] != null)\n                                        this[keys[i]] = properties[keys[i]];\n                        }\n\n                        /**\n                         * ExportMetricsServiceRequest resourceMetrics.\n                         * @member {Array.<opentelemetry.proto.metrics.v1.IResourceMetrics>} resourceMetrics\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest\n                         * @instance\n                         */\n                        ExportMetricsServiceRequest.prototype.resourceMetrics = $util.emptyArray;\n\n                        /**\n                         * Creates a new ExportMetricsServiceRequest instance using the specified properties.\n                         * @function create\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest\n                         * @static\n                         * @param {opentelemetry.proto.collector.metrics.v1.IExportMetricsServiceRequest=} [properties] Properties to set\n                         * @returns {opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest} ExportMetricsServiceRequest instance\n                         */\n                        ExportMetricsServiceRequest.create = function create(properties) {\n                            return new ExportMetricsServiceRequest(properties);\n                        };\n\n                        /**\n                         * Encodes the specified ExportMetricsServiceRequest message. Does not implicitly {@link opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest.verify|verify} messages.\n                         * @function encode\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest\n                         * @static\n                         * @param {opentelemetry.proto.collector.metrics.v1.IExportMetricsServiceRequest} message ExportMetricsServiceRequest message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        ExportMetricsServiceRequest.encode = function encode(message, writer) {\n                            if (!writer)\n                                writer = $Writer.create();\n                            if (message.resourceMetrics != null && message.resourceMetrics.length)\n                                for (var i = 0; i < message.resourceMetrics.length; ++i)\n                                    $root.opentelemetry.proto.metrics.v1.ResourceMetrics.encode(message.resourceMetrics[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                            return writer;\n                        };\n\n                        /**\n                         * Encodes the specified ExportMetricsServiceRequest message, length delimited. Does not implicitly {@link opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest.verify|verify} messages.\n                         * @function encodeDelimited\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest\n                         * @static\n                         * @param {opentelemetry.proto.collector.metrics.v1.IExportMetricsServiceRequest} message ExportMetricsServiceRequest message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        ExportMetricsServiceRequest.encodeDelimited = function encodeDelimited(message, writer) {\n                            return this.encode(message, writer).ldelim();\n                        };\n\n                        /**\n                         * Decodes an ExportMetricsServiceRequest message from the specified reader or buffer.\n                         * @function decode\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @param {number} [length] Message length if known beforehand\n                         * @returns {opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest} ExportMetricsServiceRequest\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        ExportMetricsServiceRequest.decode = function decode(reader, length) {\n                            if (!(reader instanceof $Reader))\n                                reader = $Reader.create(reader);\n                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest();\n                            while (reader.pos < end) {\n                                var tag = reader.uint32();\n                                switch (tag >>> 3) {\n                                case 1: {\n                                        if (!(message.resourceMetrics && message.resourceMetrics.length))\n                                            message.resourceMetrics = [];\n                                        message.resourceMetrics.push($root.opentelemetry.proto.metrics.v1.ResourceMetrics.decode(reader, reader.uint32()));\n                                        break;\n                                    }\n                                default:\n                                    reader.skipType(tag & 7);\n                                    break;\n                                }\n                            }\n                            return message;\n                        };\n\n                        /**\n                         * Decodes an ExportMetricsServiceRequest message from the specified reader or buffer, length delimited.\n                         * @function decodeDelimited\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @returns {opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest} ExportMetricsServiceRequest\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        ExportMetricsServiceRequest.decodeDelimited = function decodeDelimited(reader) {\n                            if (!(reader instanceof $Reader))\n                                reader = new $Reader(reader);\n                            return this.decode(reader, reader.uint32());\n                        };\n\n                        /**\n                         * Verifies an ExportMetricsServiceRequest message.\n                         * @function verify\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest\n                         * @static\n                         * @param {Object.<string,*>} message Plain object to verify\n                         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                         */\n                        ExportMetricsServiceRequest.verify = function verify(message) {\n                            if (typeof message !== \"object\" || message === null)\n                                return \"object expected\";\n                            if (message.resourceMetrics != null && message.hasOwnProperty(\"resourceMetrics\")) {\n                                if (!Array.isArray(message.resourceMetrics))\n                                    return \"resourceMetrics: array expected\";\n                                for (var i = 0; i < message.resourceMetrics.length; ++i) {\n                                    var error = $root.opentelemetry.proto.metrics.v1.ResourceMetrics.verify(message.resourceMetrics[i]);\n                                    if (error)\n                                        return \"resourceMetrics.\" + error;\n                                }\n                            }\n                            return null;\n                        };\n\n                        /**\n                         * Creates an ExportMetricsServiceRequest message from a plain object. Also converts values to their respective internal types.\n                         * @function fromObject\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest\n                         * @static\n                         * @param {Object.<string,*>} object Plain object\n                         * @returns {opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest} ExportMetricsServiceRequest\n                         */\n                        ExportMetricsServiceRequest.fromObject = function fromObject(object) {\n                            if (object instanceof $root.opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest)\n                                return object;\n                            var message = new $root.opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest();\n                            if (object.resourceMetrics) {\n                                if (!Array.isArray(object.resourceMetrics))\n                                    throw TypeError(\".opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest.resourceMetrics: array expected\");\n                                message.resourceMetrics = [];\n                                for (var i = 0; i < object.resourceMetrics.length; ++i) {\n                                    if (typeof object.resourceMetrics[i] !== \"object\")\n                                        throw TypeError(\".opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest.resourceMetrics: object expected\");\n                                    message.resourceMetrics[i] = $root.opentelemetry.proto.metrics.v1.ResourceMetrics.fromObject(object.resourceMetrics[i]);\n                                }\n                            }\n                            return message;\n                        };\n\n                        /**\n                         * Creates a plain object from an ExportMetricsServiceRequest message. Also converts values to other types if specified.\n                         * @function toObject\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest\n                         * @static\n                         * @param {opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest} message ExportMetricsServiceRequest\n                         * @param {$protobuf.IConversionOptions} [options] Conversion options\n                         * @returns {Object.<string,*>} Plain object\n                         */\n                        ExportMetricsServiceRequest.toObject = function toObject(message, options) {\n                            if (!options)\n                                options = {};\n                            var object = {};\n                            if (options.arrays || options.defaults)\n                                object.resourceMetrics = [];\n                            if (message.resourceMetrics && message.resourceMetrics.length) {\n                                object.resourceMetrics = [];\n                                for (var j = 0; j < message.resourceMetrics.length; ++j)\n                                    object.resourceMetrics[j] = $root.opentelemetry.proto.metrics.v1.ResourceMetrics.toObject(message.resourceMetrics[j], options);\n                            }\n                            return object;\n                        };\n\n                        /**\n                         * Converts this ExportMetricsServiceRequest to JSON.\n                         * @function toJSON\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest\n                         * @instance\n                         * @returns {Object.<string,*>} JSON object\n                         */\n                        ExportMetricsServiceRequest.prototype.toJSON = function toJSON() {\n                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                        };\n\n                        /**\n                         * Gets the default type url for ExportMetricsServiceRequest\n                         * @function getTypeUrl\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest\n                         * @static\n                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                         * @returns {string} The default type url\n                         */\n                        ExportMetricsServiceRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                            if (typeUrlPrefix === undefined) {\n                                typeUrlPrefix = \"type.googleapis.com\";\n                            }\n                            return typeUrlPrefix + \"/opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest\";\n                        };\n\n                        return ExportMetricsServiceRequest;\n                    })();\n\n                    v1.ExportMetricsServiceResponse = (function() {\n\n                        /**\n                         * Properties of an ExportMetricsServiceResponse.\n                         * @memberof opentelemetry.proto.collector.metrics.v1\n                         * @interface IExportMetricsServiceResponse\n                         * @property {opentelemetry.proto.collector.metrics.v1.IExportMetricsPartialSuccess|null} [partialSuccess] ExportMetricsServiceResponse partialSuccess\n                         */\n\n                        /**\n                         * Constructs a new ExportMetricsServiceResponse.\n                         * @memberof opentelemetry.proto.collector.metrics.v1\n                         * @classdesc Represents an ExportMetricsServiceResponse.\n                         * @implements IExportMetricsServiceResponse\n                         * @constructor\n                         * @param {opentelemetry.proto.collector.metrics.v1.IExportMetricsServiceResponse=} [properties] Properties to set\n                         */\n                        function ExportMetricsServiceResponse(properties) {\n                            if (properties)\n                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                    if (properties[keys[i]] != null)\n                                        this[keys[i]] = properties[keys[i]];\n                        }\n\n                        /**\n                         * ExportMetricsServiceResponse partialSuccess.\n                         * @member {opentelemetry.proto.collector.metrics.v1.IExportMetricsPartialSuccess|null|undefined} partialSuccess\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse\n                         * @instance\n                         */\n                        ExportMetricsServiceResponse.prototype.partialSuccess = null;\n\n                        /**\n                         * Creates a new ExportMetricsServiceResponse instance using the specified properties.\n                         * @function create\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse\n                         * @static\n                         * @param {opentelemetry.proto.collector.metrics.v1.IExportMetricsServiceResponse=} [properties] Properties to set\n                         * @returns {opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse} ExportMetricsServiceResponse instance\n                         */\n                        ExportMetricsServiceResponse.create = function create(properties) {\n                            return new ExportMetricsServiceResponse(properties);\n                        };\n\n                        /**\n                         * Encodes the specified ExportMetricsServiceResponse message. Does not implicitly {@link opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse.verify|verify} messages.\n                         * @function encode\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse\n                         * @static\n                         * @param {opentelemetry.proto.collector.metrics.v1.IExportMetricsServiceResponse} message ExportMetricsServiceResponse message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        ExportMetricsServiceResponse.encode = function encode(message, writer) {\n                            if (!writer)\n                                writer = $Writer.create();\n                            if (message.partialSuccess != null && Object.hasOwnProperty.call(message, \"partialSuccess\"))\n                                $root.opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess.encode(message.partialSuccess, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                            return writer;\n                        };\n\n                        /**\n                         * Encodes the specified ExportMetricsServiceResponse message, length delimited. Does not implicitly {@link opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse.verify|verify} messages.\n                         * @function encodeDelimited\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse\n                         * @static\n                         * @param {opentelemetry.proto.collector.metrics.v1.IExportMetricsServiceResponse} message ExportMetricsServiceResponse message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        ExportMetricsServiceResponse.encodeDelimited = function encodeDelimited(message, writer) {\n                            return this.encode(message, writer).ldelim();\n                        };\n\n                        /**\n                         * Decodes an ExportMetricsServiceResponse message from the specified reader or buffer.\n                         * @function decode\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @param {number} [length] Message length if known beforehand\n                         * @returns {opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse} ExportMetricsServiceResponse\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        ExportMetricsServiceResponse.decode = function decode(reader, length) {\n                            if (!(reader instanceof $Reader))\n                                reader = $Reader.create(reader);\n                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse();\n                            while (reader.pos < end) {\n                                var tag = reader.uint32();\n                                switch (tag >>> 3) {\n                                case 1: {\n                                        message.partialSuccess = $root.opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess.decode(reader, reader.uint32());\n                                        break;\n                                    }\n                                default:\n                                    reader.skipType(tag & 7);\n                                    break;\n                                }\n                            }\n                            return message;\n                        };\n\n                        /**\n                         * Decodes an ExportMetricsServiceResponse message from the specified reader or buffer, length delimited.\n                         * @function decodeDelimited\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @returns {opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse} ExportMetricsServiceResponse\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        ExportMetricsServiceResponse.decodeDelimited = function decodeDelimited(reader) {\n                            if (!(reader instanceof $Reader))\n                                reader = new $Reader(reader);\n                            return this.decode(reader, reader.uint32());\n                        };\n\n                        /**\n                         * Verifies an ExportMetricsServiceResponse message.\n                         * @function verify\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse\n                         * @static\n                         * @param {Object.<string,*>} message Plain object to verify\n                         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                         */\n                        ExportMetricsServiceResponse.verify = function verify(message) {\n                            if (typeof message !== \"object\" || message === null)\n                                return \"object expected\";\n                            if (message.partialSuccess != null && message.hasOwnProperty(\"partialSuccess\")) {\n                                var error = $root.opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess.verify(message.partialSuccess);\n                                if (error)\n                                    return \"partialSuccess.\" + error;\n                            }\n                            return null;\n                        };\n\n                        /**\n                         * Creates an ExportMetricsServiceResponse message from a plain object. Also converts values to their respective internal types.\n                         * @function fromObject\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse\n                         * @static\n                         * @param {Object.<string,*>} object Plain object\n                         * @returns {opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse} ExportMetricsServiceResponse\n                         */\n                        ExportMetricsServiceResponse.fromObject = function fromObject(object) {\n                            if (object instanceof $root.opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse)\n                                return object;\n                            var message = new $root.opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse();\n                            if (object.partialSuccess != null) {\n                                if (typeof object.partialSuccess !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse.partialSuccess: object expected\");\n                                message.partialSuccess = $root.opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess.fromObject(object.partialSuccess);\n                            }\n                            return message;\n                        };\n\n                        /**\n                         * Creates a plain object from an ExportMetricsServiceResponse message. Also converts values to other types if specified.\n                         * @function toObject\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse\n                         * @static\n                         * @param {opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse} message ExportMetricsServiceResponse\n                         * @param {$protobuf.IConversionOptions} [options] Conversion options\n                         * @returns {Object.<string,*>} Plain object\n                         */\n                        ExportMetricsServiceResponse.toObject = function toObject(message, options) {\n                            if (!options)\n                                options = {};\n                            var object = {};\n                            if (options.defaults)\n                                object.partialSuccess = null;\n                            if (message.partialSuccess != null && message.hasOwnProperty(\"partialSuccess\"))\n                                object.partialSuccess = $root.opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess.toObject(message.partialSuccess, options);\n                            return object;\n                        };\n\n                        /**\n                         * Converts this ExportMetricsServiceResponse to JSON.\n                         * @function toJSON\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse\n                         * @instance\n                         * @returns {Object.<string,*>} JSON object\n                         */\n                        ExportMetricsServiceResponse.prototype.toJSON = function toJSON() {\n                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                        };\n\n                        /**\n                         * Gets the default type url for ExportMetricsServiceResponse\n                         * @function getTypeUrl\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse\n                         * @static\n                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                         * @returns {string} The default type url\n                         */\n                        ExportMetricsServiceResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                            if (typeUrlPrefix === undefined) {\n                                typeUrlPrefix = \"type.googleapis.com\";\n                            }\n                            return typeUrlPrefix + \"/opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse\";\n                        };\n\n                        return ExportMetricsServiceResponse;\n                    })();\n\n                    v1.ExportMetricsPartialSuccess = (function() {\n\n                        /**\n                         * Properties of an ExportMetricsPartialSuccess.\n                         * @memberof opentelemetry.proto.collector.metrics.v1\n                         * @interface IExportMetricsPartialSuccess\n                         * @property {number|Long|null} [rejectedDataPoints] ExportMetricsPartialSuccess rejectedDataPoints\n                         * @property {string|null} [errorMessage] ExportMetricsPartialSuccess errorMessage\n                         */\n\n                        /**\n                         * Constructs a new ExportMetricsPartialSuccess.\n                         * @memberof opentelemetry.proto.collector.metrics.v1\n                         * @classdesc Represents an ExportMetricsPartialSuccess.\n                         * @implements IExportMetricsPartialSuccess\n                         * @constructor\n                         * @param {opentelemetry.proto.collector.metrics.v1.IExportMetricsPartialSuccess=} [properties] Properties to set\n                         */\n                        function ExportMetricsPartialSuccess(properties) {\n                            if (properties)\n                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                    if (properties[keys[i]] != null)\n                                        this[keys[i]] = properties[keys[i]];\n                        }\n\n                        /**\n                         * ExportMetricsPartialSuccess rejectedDataPoints.\n                         * @member {number|Long|null|undefined} rejectedDataPoints\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess\n                         * @instance\n                         */\n                        ExportMetricsPartialSuccess.prototype.rejectedDataPoints = null;\n\n                        /**\n                         * ExportMetricsPartialSuccess errorMessage.\n                         * @member {string|null|undefined} errorMessage\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess\n                         * @instance\n                         */\n                        ExportMetricsPartialSuccess.prototype.errorMessage = null;\n\n                        /**\n                         * Creates a new ExportMetricsPartialSuccess instance using the specified properties.\n                         * @function create\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess\n                         * @static\n                         * @param {opentelemetry.proto.collector.metrics.v1.IExportMetricsPartialSuccess=} [properties] Properties to set\n                         * @returns {opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess} ExportMetricsPartialSuccess instance\n                         */\n                        ExportMetricsPartialSuccess.create = function create(properties) {\n                            return new ExportMetricsPartialSuccess(properties);\n                        };\n\n                        /**\n                         * Encodes the specified ExportMetricsPartialSuccess message. Does not implicitly {@link opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess.verify|verify} messages.\n                         * @function encode\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess\n                         * @static\n                         * @param {opentelemetry.proto.collector.metrics.v1.IExportMetricsPartialSuccess} message ExportMetricsPartialSuccess message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        ExportMetricsPartialSuccess.encode = function encode(message, writer) {\n                            if (!writer)\n                                writer = $Writer.create();\n                            if (message.rejectedDataPoints != null && Object.hasOwnProperty.call(message, \"rejectedDataPoints\"))\n                                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.rejectedDataPoints);\n                            if (message.errorMessage != null && Object.hasOwnProperty.call(message, \"errorMessage\"))\n                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.errorMessage);\n                            return writer;\n                        };\n\n                        /**\n                         * Encodes the specified ExportMetricsPartialSuccess message, length delimited. Does not implicitly {@link opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess.verify|verify} messages.\n                         * @function encodeDelimited\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess\n                         * @static\n                         * @param {opentelemetry.proto.collector.metrics.v1.IExportMetricsPartialSuccess} message ExportMetricsPartialSuccess message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        ExportMetricsPartialSuccess.encodeDelimited = function encodeDelimited(message, writer) {\n                            return this.encode(message, writer).ldelim();\n                        };\n\n                        /**\n                         * Decodes an ExportMetricsPartialSuccess message from the specified reader or buffer.\n                         * @function decode\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @param {number} [length] Message length if known beforehand\n                         * @returns {opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess} ExportMetricsPartialSuccess\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        ExportMetricsPartialSuccess.decode = function decode(reader, length) {\n                            if (!(reader instanceof $Reader))\n                                reader = $Reader.create(reader);\n                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess();\n                            while (reader.pos < end) {\n                                var tag = reader.uint32();\n                                switch (tag >>> 3) {\n                                case 1: {\n                                        message.rejectedDataPoints = reader.int64();\n                                        break;\n                                    }\n                                case 2: {\n                                        message.errorMessage = reader.string();\n                                        break;\n                                    }\n                                default:\n                                    reader.skipType(tag & 7);\n                                    break;\n                                }\n                            }\n                            return message;\n                        };\n\n                        /**\n                         * Decodes an ExportMetricsPartialSuccess message from the specified reader or buffer, length delimited.\n                         * @function decodeDelimited\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @returns {opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess} ExportMetricsPartialSuccess\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        ExportMetricsPartialSuccess.decodeDelimited = function decodeDelimited(reader) {\n                            if (!(reader instanceof $Reader))\n                                reader = new $Reader(reader);\n                            return this.decode(reader, reader.uint32());\n                        };\n\n                        /**\n                         * Verifies an ExportMetricsPartialSuccess message.\n                         * @function verify\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess\n                         * @static\n                         * @param {Object.<string,*>} message Plain object to verify\n                         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                         */\n                        ExportMetricsPartialSuccess.verify = function verify(message) {\n                            if (typeof message !== \"object\" || message === null)\n                                return \"object expected\";\n                            if (message.rejectedDataPoints != null && message.hasOwnProperty(\"rejectedDataPoints\"))\n                                if (!$util.isInteger(message.rejectedDataPoints) && !(message.rejectedDataPoints && $util.isInteger(message.rejectedDataPoints.low) && $util.isInteger(message.rejectedDataPoints.high)))\n                                    return \"rejectedDataPoints: integer|Long expected\";\n                            if (message.errorMessage != null && message.hasOwnProperty(\"errorMessage\"))\n                                if (!$util.isString(message.errorMessage))\n                                    return \"errorMessage: string expected\";\n                            return null;\n                        };\n\n                        /**\n                         * Creates an ExportMetricsPartialSuccess message from a plain object. Also converts values to their respective internal types.\n                         * @function fromObject\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess\n                         * @static\n                         * @param {Object.<string,*>} object Plain object\n                         * @returns {opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess} ExportMetricsPartialSuccess\n                         */\n                        ExportMetricsPartialSuccess.fromObject = function fromObject(object) {\n                            if (object instanceof $root.opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess)\n                                return object;\n                            var message = new $root.opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess();\n                            if (object.rejectedDataPoints != null)\n                                if ($util.Long)\n                                    (message.rejectedDataPoints = $util.Long.fromValue(object.rejectedDataPoints)).unsigned = false;\n                                else if (typeof object.rejectedDataPoints === \"string\")\n                                    message.rejectedDataPoints = parseInt(object.rejectedDataPoints, 10);\n                                else if (typeof object.rejectedDataPoints === \"number\")\n                                    message.rejectedDataPoints = object.rejectedDataPoints;\n                                else if (typeof object.rejectedDataPoints === \"object\")\n                                    message.rejectedDataPoints = new $util.LongBits(object.rejectedDataPoints.low >>> 0, object.rejectedDataPoints.high >>> 0).toNumber();\n                            if (object.errorMessage != null)\n                                message.errorMessage = String(object.errorMessage);\n                            return message;\n                        };\n\n                        /**\n                         * Creates a plain object from an ExportMetricsPartialSuccess message. Also converts values to other types if specified.\n                         * @function toObject\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess\n                         * @static\n                         * @param {opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess} message ExportMetricsPartialSuccess\n                         * @param {$protobuf.IConversionOptions} [options] Conversion options\n                         * @returns {Object.<string,*>} Plain object\n                         */\n                        ExportMetricsPartialSuccess.toObject = function toObject(message, options) {\n                            if (!options)\n                                options = {};\n                            var object = {};\n                            if (options.defaults) {\n                                if ($util.Long) {\n                                    var long = new $util.Long(0, 0, false);\n                                    object.rejectedDataPoints = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                                } else\n                                    object.rejectedDataPoints = options.longs === String ? \"0\" : 0;\n                                object.errorMessage = \"\";\n                            }\n                            if (message.rejectedDataPoints != null && message.hasOwnProperty(\"rejectedDataPoints\"))\n                                if (typeof message.rejectedDataPoints === \"number\")\n                                    object.rejectedDataPoints = options.longs === String ? String(message.rejectedDataPoints) : message.rejectedDataPoints;\n                                else\n                                    object.rejectedDataPoints = options.longs === String ? $util.Long.prototype.toString.call(message.rejectedDataPoints) : options.longs === Number ? new $util.LongBits(message.rejectedDataPoints.low >>> 0, message.rejectedDataPoints.high >>> 0).toNumber() : message.rejectedDataPoints;\n                            if (message.errorMessage != null && message.hasOwnProperty(\"errorMessage\"))\n                                object.errorMessage = message.errorMessage;\n                            return object;\n                        };\n\n                        /**\n                         * Converts this ExportMetricsPartialSuccess to JSON.\n                         * @function toJSON\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess\n                         * @instance\n                         * @returns {Object.<string,*>} JSON object\n                         */\n                        ExportMetricsPartialSuccess.prototype.toJSON = function toJSON() {\n                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                        };\n\n                        /**\n                         * Gets the default type url for ExportMetricsPartialSuccess\n                         * @function getTypeUrl\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess\n                         * @static\n                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                         * @returns {string} The default type url\n                         */\n                        ExportMetricsPartialSuccess.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                            if (typeUrlPrefix === undefined) {\n                                typeUrlPrefix = \"type.googleapis.com\";\n                            }\n                            return typeUrlPrefix + \"/opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess\";\n                        };\n\n                        return ExportMetricsPartialSuccess;\n                    })();\n\n                    return v1;\n                })();\n\n                return metrics;\n            })();\n\n            collector.logs = (function() {\n\n                /**\n                 * Namespace logs.\n                 * @memberof opentelemetry.proto.collector\n                 * @namespace\n                 */\n                var logs = {};\n\n                logs.v1 = (function() {\n\n                    /**\n                     * Namespace v1.\n                     * @memberof opentelemetry.proto.collector.logs\n                     * @namespace\n                     */\n                    var v1 = {};\n\n                    v1.LogsService = (function() {\n\n                        /**\n                         * Constructs a new LogsService service.\n                         * @memberof opentelemetry.proto.collector.logs.v1\n                         * @classdesc Represents a LogsService\n                         * @extends $protobuf.rpc.Service\n                         * @constructor\n                         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation\n                         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n                         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n                         */\n                        function LogsService(rpcImpl, requestDelimited, responseDelimited) {\n                            $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);\n                        }\n\n                        (LogsService.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = LogsService;\n\n                        /**\n                         * Creates new LogsService service using the specified rpc implementation.\n                         * @function create\n                         * @memberof opentelemetry.proto.collector.logs.v1.LogsService\n                         * @static\n                         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation\n                         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n                         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n                         * @returns {LogsService} RPC service. Useful where requests and/or responses are streamed.\n                         */\n                        LogsService.create = function create(rpcImpl, requestDelimited, responseDelimited) {\n                            return new this(rpcImpl, requestDelimited, responseDelimited);\n                        };\n\n                        /**\n                         * Callback as used by {@link opentelemetry.proto.collector.logs.v1.LogsService#export_}.\n                         * @memberof opentelemetry.proto.collector.logs.v1.LogsService\n                         * @typedef ExportCallback\n                         * @type {function}\n                         * @param {Error|null} error Error, if any\n                         * @param {opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse} [response] ExportLogsServiceResponse\n                         */\n\n                        /**\n                         * Calls Export.\n                         * @function export\n                         * @memberof opentelemetry.proto.collector.logs.v1.LogsService\n                         * @instance\n                         * @param {opentelemetry.proto.collector.logs.v1.IExportLogsServiceRequest} request ExportLogsServiceRequest message or plain object\n                         * @param {opentelemetry.proto.collector.logs.v1.LogsService.ExportCallback} callback Node-style callback called with the error, if any, and ExportLogsServiceResponse\n                         * @returns {undefined}\n                         * @variation 1\n                         */\n                        Object.defineProperty(LogsService.prototype[\"export\"] = function export_(request, callback) {\n                            return this.rpcCall(export_, $root.opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest, $root.opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse, request, callback);\n                        }, \"name\", { value: \"Export\" });\n\n                        /**\n                         * Calls Export.\n                         * @function export\n                         * @memberof opentelemetry.proto.collector.logs.v1.LogsService\n                         * @instance\n                         * @param {opentelemetry.proto.collector.logs.v1.IExportLogsServiceRequest} request ExportLogsServiceRequest message or plain object\n                         * @returns {Promise<opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse>} Promise\n                         * @variation 2\n                         */\n\n                        return LogsService;\n                    })();\n\n                    v1.ExportLogsServiceRequest = (function() {\n\n                        /**\n                         * Properties of an ExportLogsServiceRequest.\n                         * @memberof opentelemetry.proto.collector.logs.v1\n                         * @interface IExportLogsServiceRequest\n                         * @property {Array.<opentelemetry.proto.logs.v1.IResourceLogs>|null} [resourceLogs] ExportLogsServiceRequest resourceLogs\n                         */\n\n                        /**\n                         * Constructs a new ExportLogsServiceRequest.\n                         * @memberof opentelemetry.proto.collector.logs.v1\n                         * @classdesc Represents an ExportLogsServiceRequest.\n                         * @implements IExportLogsServiceRequest\n                         * @constructor\n                         * @param {opentelemetry.proto.collector.logs.v1.IExportLogsServiceRequest=} [properties] Properties to set\n                         */\n                        function ExportLogsServiceRequest(properties) {\n                            this.resourceLogs = [];\n                            if (properties)\n                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                    if (properties[keys[i]] != null)\n                                        this[keys[i]] = properties[keys[i]];\n                        }\n\n                        /**\n                         * ExportLogsServiceRequest resourceLogs.\n                         * @member {Array.<opentelemetry.proto.logs.v1.IResourceLogs>} resourceLogs\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest\n                         * @instance\n                         */\n                        ExportLogsServiceRequest.prototype.resourceLogs = $util.emptyArray;\n\n                        /**\n                         * Creates a new ExportLogsServiceRequest instance using the specified properties.\n                         * @function create\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest\n                         * @static\n                         * @param {opentelemetry.proto.collector.logs.v1.IExportLogsServiceRequest=} [properties] Properties to set\n                         * @returns {opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest} ExportLogsServiceRequest instance\n                         */\n                        ExportLogsServiceRequest.create = function create(properties) {\n                            return new ExportLogsServiceRequest(properties);\n                        };\n\n                        /**\n                         * Encodes the specified ExportLogsServiceRequest message. Does not implicitly {@link opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest.verify|verify} messages.\n                         * @function encode\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest\n                         * @static\n                         * @param {opentelemetry.proto.collector.logs.v1.IExportLogsServiceRequest} message ExportLogsServiceRequest message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        ExportLogsServiceRequest.encode = function encode(message, writer) {\n                            if (!writer)\n                                writer = $Writer.create();\n                            if (message.resourceLogs != null && message.resourceLogs.length)\n                                for (var i = 0; i < message.resourceLogs.length; ++i)\n                                    $root.opentelemetry.proto.logs.v1.ResourceLogs.encode(message.resourceLogs[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                            return writer;\n                        };\n\n                        /**\n                         * Encodes the specified ExportLogsServiceRequest message, length delimited. Does not implicitly {@link opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest.verify|verify} messages.\n                         * @function encodeDelimited\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest\n                         * @static\n                         * @param {opentelemetry.proto.collector.logs.v1.IExportLogsServiceRequest} message ExportLogsServiceRequest message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        ExportLogsServiceRequest.encodeDelimited = function encodeDelimited(message, writer) {\n                            return this.encode(message, writer).ldelim();\n                        };\n\n                        /**\n                         * Decodes an ExportLogsServiceRequest message from the specified reader or buffer.\n                         * @function decode\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @param {number} [length] Message length if known beforehand\n                         * @returns {opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest} ExportLogsServiceRequest\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        ExportLogsServiceRequest.decode = function decode(reader, length) {\n                            if (!(reader instanceof $Reader))\n                                reader = $Reader.create(reader);\n                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest();\n                            while (reader.pos < end) {\n                                var tag = reader.uint32();\n                                switch (tag >>> 3) {\n                                case 1: {\n                                        if (!(message.resourceLogs && message.resourceLogs.length))\n                                            message.resourceLogs = [];\n                                        message.resourceLogs.push($root.opentelemetry.proto.logs.v1.ResourceLogs.decode(reader, reader.uint32()));\n                                        break;\n                                    }\n                                default:\n                                    reader.skipType(tag & 7);\n                                    break;\n                                }\n                            }\n                            return message;\n                        };\n\n                        /**\n                         * Decodes an ExportLogsServiceRequest message from the specified reader or buffer, length delimited.\n                         * @function decodeDelimited\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @returns {opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest} ExportLogsServiceRequest\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        ExportLogsServiceRequest.decodeDelimited = function decodeDelimited(reader) {\n                            if (!(reader instanceof $Reader))\n                                reader = new $Reader(reader);\n                            return this.decode(reader, reader.uint32());\n                        };\n\n                        /**\n                         * Verifies an ExportLogsServiceRequest message.\n                         * @function verify\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest\n                         * @static\n                         * @param {Object.<string,*>} message Plain object to verify\n                         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                         */\n                        ExportLogsServiceRequest.verify = function verify(message) {\n                            if (typeof message !== \"object\" || message === null)\n                                return \"object expected\";\n                            if (message.resourceLogs != null && message.hasOwnProperty(\"resourceLogs\")) {\n                                if (!Array.isArray(message.resourceLogs))\n                                    return \"resourceLogs: array expected\";\n                                for (var i = 0; i < message.resourceLogs.length; ++i) {\n                                    var error = $root.opentelemetry.proto.logs.v1.ResourceLogs.verify(message.resourceLogs[i]);\n                                    if (error)\n                                        return \"resourceLogs.\" + error;\n                                }\n                            }\n                            return null;\n                        };\n\n                        /**\n                         * Creates an ExportLogsServiceRequest message from a plain object. Also converts values to their respective internal types.\n                         * @function fromObject\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest\n                         * @static\n                         * @param {Object.<string,*>} object Plain object\n                         * @returns {opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest} ExportLogsServiceRequest\n                         */\n                        ExportLogsServiceRequest.fromObject = function fromObject(object) {\n                            if (object instanceof $root.opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest)\n                                return object;\n                            var message = new $root.opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest();\n                            if (object.resourceLogs) {\n                                if (!Array.isArray(object.resourceLogs))\n                                    throw TypeError(\".opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest.resourceLogs: array expected\");\n                                message.resourceLogs = [];\n                                for (var i = 0; i < object.resourceLogs.length; ++i) {\n                                    if (typeof object.resourceLogs[i] !== \"object\")\n                                        throw TypeError(\".opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest.resourceLogs: object expected\");\n                                    message.resourceLogs[i] = $root.opentelemetry.proto.logs.v1.ResourceLogs.fromObject(object.resourceLogs[i]);\n                                }\n                            }\n                            return message;\n                        };\n\n                        /**\n                         * Creates a plain object from an ExportLogsServiceRequest message. Also converts values to other types if specified.\n                         * @function toObject\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest\n                         * @static\n                         * @param {opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest} message ExportLogsServiceRequest\n                         * @param {$protobuf.IConversionOptions} [options] Conversion options\n                         * @returns {Object.<string,*>} Plain object\n                         */\n                        ExportLogsServiceRequest.toObject = function toObject(message, options) {\n                            if (!options)\n                                options = {};\n                            var object = {};\n                            if (options.arrays || options.defaults)\n                                object.resourceLogs = [];\n                            if (message.resourceLogs && message.resourceLogs.length) {\n                                object.resourceLogs = [];\n                                for (var j = 0; j < message.resourceLogs.length; ++j)\n                                    object.resourceLogs[j] = $root.opentelemetry.proto.logs.v1.ResourceLogs.toObject(message.resourceLogs[j], options);\n                            }\n                            return object;\n                        };\n\n                        /**\n                         * Converts this ExportLogsServiceRequest to JSON.\n                         * @function toJSON\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest\n                         * @instance\n                         * @returns {Object.<string,*>} JSON object\n                         */\n                        ExportLogsServiceRequest.prototype.toJSON = function toJSON() {\n                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                        };\n\n                        /**\n                         * Gets the default type url for ExportLogsServiceRequest\n                         * @function getTypeUrl\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest\n                         * @static\n                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                         * @returns {string} The default type url\n                         */\n                        ExportLogsServiceRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                            if (typeUrlPrefix === undefined) {\n                                typeUrlPrefix = \"type.googleapis.com\";\n                            }\n                            return typeUrlPrefix + \"/opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest\";\n                        };\n\n                        return ExportLogsServiceRequest;\n                    })();\n\n                    v1.ExportLogsServiceResponse = (function() {\n\n                        /**\n                         * Properties of an ExportLogsServiceResponse.\n                         * @memberof opentelemetry.proto.collector.logs.v1\n                         * @interface IExportLogsServiceResponse\n                         * @property {opentelemetry.proto.collector.logs.v1.IExportLogsPartialSuccess|null} [partialSuccess] ExportLogsServiceResponse partialSuccess\n                         */\n\n                        /**\n                         * Constructs a new ExportLogsServiceResponse.\n                         * @memberof opentelemetry.proto.collector.logs.v1\n                         * @classdesc Represents an ExportLogsServiceResponse.\n                         * @implements IExportLogsServiceResponse\n                         * @constructor\n                         * @param {opentelemetry.proto.collector.logs.v1.IExportLogsServiceResponse=} [properties] Properties to set\n                         */\n                        function ExportLogsServiceResponse(properties) {\n                            if (properties)\n                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                    if (properties[keys[i]] != null)\n                                        this[keys[i]] = properties[keys[i]];\n                        }\n\n                        /**\n                         * ExportLogsServiceResponse partialSuccess.\n                         * @member {opentelemetry.proto.collector.logs.v1.IExportLogsPartialSuccess|null|undefined} partialSuccess\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse\n                         * @instance\n                         */\n                        ExportLogsServiceResponse.prototype.partialSuccess = null;\n\n                        /**\n                         * Creates a new ExportLogsServiceResponse instance using the specified properties.\n                         * @function create\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse\n                         * @static\n                         * @param {opentelemetry.proto.collector.logs.v1.IExportLogsServiceResponse=} [properties] Properties to set\n                         * @returns {opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse} ExportLogsServiceResponse instance\n                         */\n                        ExportLogsServiceResponse.create = function create(properties) {\n                            return new ExportLogsServiceResponse(properties);\n                        };\n\n                        /**\n                         * Encodes the specified ExportLogsServiceResponse message. Does not implicitly {@link opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse.verify|verify} messages.\n                         * @function encode\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse\n                         * @static\n                         * @param {opentelemetry.proto.collector.logs.v1.IExportLogsServiceResponse} message ExportLogsServiceResponse message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        ExportLogsServiceResponse.encode = function encode(message, writer) {\n                            if (!writer)\n                                writer = $Writer.create();\n                            if (message.partialSuccess != null && Object.hasOwnProperty.call(message, \"partialSuccess\"))\n                                $root.opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess.encode(message.partialSuccess, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                            return writer;\n                        };\n\n                        /**\n                         * Encodes the specified ExportLogsServiceResponse message, length delimited. Does not implicitly {@link opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse.verify|verify} messages.\n                         * @function encodeDelimited\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse\n                         * @static\n                         * @param {opentelemetry.proto.collector.logs.v1.IExportLogsServiceResponse} message ExportLogsServiceResponse message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        ExportLogsServiceResponse.encodeDelimited = function encodeDelimited(message, writer) {\n                            return this.encode(message, writer).ldelim();\n                        };\n\n                        /**\n                         * Decodes an ExportLogsServiceResponse message from the specified reader or buffer.\n                         * @function decode\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @param {number} [length] Message length if known beforehand\n                         * @returns {opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse} ExportLogsServiceResponse\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        ExportLogsServiceResponse.decode = function decode(reader, length) {\n                            if (!(reader instanceof $Reader))\n                                reader = $Reader.create(reader);\n                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse();\n                            while (reader.pos < end) {\n                                var tag = reader.uint32();\n                                switch (tag >>> 3) {\n                                case 1: {\n                                        message.partialSuccess = $root.opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess.decode(reader, reader.uint32());\n                                        break;\n                                    }\n                                default:\n                                    reader.skipType(tag & 7);\n                                    break;\n                                }\n                            }\n                            return message;\n                        };\n\n                        /**\n                         * Decodes an ExportLogsServiceResponse message from the specified reader or buffer, length delimited.\n                         * @function decodeDelimited\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @returns {opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse} ExportLogsServiceResponse\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        ExportLogsServiceResponse.decodeDelimited = function decodeDelimited(reader) {\n                            if (!(reader instanceof $Reader))\n                                reader = new $Reader(reader);\n                            return this.decode(reader, reader.uint32());\n                        };\n\n                        /**\n                         * Verifies an ExportLogsServiceResponse message.\n                         * @function verify\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse\n                         * @static\n                         * @param {Object.<string,*>} message Plain object to verify\n                         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                         */\n                        ExportLogsServiceResponse.verify = function verify(message) {\n                            if (typeof message !== \"object\" || message === null)\n                                return \"object expected\";\n                            if (message.partialSuccess != null && message.hasOwnProperty(\"partialSuccess\")) {\n                                var error = $root.opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess.verify(message.partialSuccess);\n                                if (error)\n                                    return \"partialSuccess.\" + error;\n                            }\n                            return null;\n                        };\n\n                        /**\n                         * Creates an ExportLogsServiceResponse message from a plain object. Also converts values to their respective internal types.\n                         * @function fromObject\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse\n                         * @static\n                         * @param {Object.<string,*>} object Plain object\n                         * @returns {opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse} ExportLogsServiceResponse\n                         */\n                        ExportLogsServiceResponse.fromObject = function fromObject(object) {\n                            if (object instanceof $root.opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse)\n                                return object;\n                            var message = new $root.opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse();\n                            if (object.partialSuccess != null) {\n                                if (typeof object.partialSuccess !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse.partialSuccess: object expected\");\n                                message.partialSuccess = $root.opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess.fromObject(object.partialSuccess);\n                            }\n                            return message;\n                        };\n\n                        /**\n                         * Creates a plain object from an ExportLogsServiceResponse message. Also converts values to other types if specified.\n                         * @function toObject\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse\n                         * @static\n                         * @param {opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse} message ExportLogsServiceResponse\n                         * @param {$protobuf.IConversionOptions} [options] Conversion options\n                         * @returns {Object.<string,*>} Plain object\n                         */\n                        ExportLogsServiceResponse.toObject = function toObject(message, options) {\n                            if (!options)\n                                options = {};\n                            var object = {};\n                            if (options.defaults)\n                                object.partialSuccess = null;\n                            if (message.partialSuccess != null && message.hasOwnProperty(\"partialSuccess\"))\n                                object.partialSuccess = $root.opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess.toObject(message.partialSuccess, options);\n                            return object;\n                        };\n\n                        /**\n                         * Converts this ExportLogsServiceResponse to JSON.\n                         * @function toJSON\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse\n                         * @instance\n                         * @returns {Object.<string,*>} JSON object\n                         */\n                        ExportLogsServiceResponse.prototype.toJSON = function toJSON() {\n                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                        };\n\n                        /**\n                         * Gets the default type url for ExportLogsServiceResponse\n                         * @function getTypeUrl\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse\n                         * @static\n                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                         * @returns {string} The default type url\n                         */\n                        ExportLogsServiceResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                            if (typeUrlPrefix === undefined) {\n                                typeUrlPrefix = \"type.googleapis.com\";\n                            }\n                            return typeUrlPrefix + \"/opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse\";\n                        };\n\n                        return ExportLogsServiceResponse;\n                    })();\n\n                    v1.ExportLogsPartialSuccess = (function() {\n\n                        /**\n                         * Properties of an ExportLogsPartialSuccess.\n                         * @memberof opentelemetry.proto.collector.logs.v1\n                         * @interface IExportLogsPartialSuccess\n                         * @property {number|Long|null} [rejectedLogRecords] ExportLogsPartialSuccess rejectedLogRecords\n                         * @property {string|null} [errorMessage] ExportLogsPartialSuccess errorMessage\n                         */\n\n                        /**\n                         * Constructs a new ExportLogsPartialSuccess.\n                         * @memberof opentelemetry.proto.collector.logs.v1\n                         * @classdesc Represents an ExportLogsPartialSuccess.\n                         * @implements IExportLogsPartialSuccess\n                         * @constructor\n                         * @param {opentelemetry.proto.collector.logs.v1.IExportLogsPartialSuccess=} [properties] Properties to set\n                         */\n                        function ExportLogsPartialSuccess(properties) {\n                            if (properties)\n                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                    if (properties[keys[i]] != null)\n                                        this[keys[i]] = properties[keys[i]];\n                        }\n\n                        /**\n                         * ExportLogsPartialSuccess rejectedLogRecords.\n                         * @member {number|Long|null|undefined} rejectedLogRecords\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess\n                         * @instance\n                         */\n                        ExportLogsPartialSuccess.prototype.rejectedLogRecords = null;\n\n                        /**\n                         * ExportLogsPartialSuccess errorMessage.\n                         * @member {string|null|undefined} errorMessage\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess\n                         * @instance\n                         */\n                        ExportLogsPartialSuccess.prototype.errorMessage = null;\n\n                        /**\n                         * Creates a new ExportLogsPartialSuccess instance using the specified properties.\n                         * @function create\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess\n                         * @static\n                         * @param {opentelemetry.proto.collector.logs.v1.IExportLogsPartialSuccess=} [properties] Properties to set\n                         * @returns {opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess} ExportLogsPartialSuccess instance\n                         */\n                        ExportLogsPartialSuccess.create = function create(properties) {\n                            return new ExportLogsPartialSuccess(properties);\n                        };\n\n                        /**\n                         * Encodes the specified ExportLogsPartialSuccess message. Does not implicitly {@link opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess.verify|verify} messages.\n                         * @function encode\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess\n                         * @static\n                         * @param {opentelemetry.proto.collector.logs.v1.IExportLogsPartialSuccess} message ExportLogsPartialSuccess message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        ExportLogsPartialSuccess.encode = function encode(message, writer) {\n                            if (!writer)\n                                writer = $Writer.create();\n                            if (message.rejectedLogRecords != null && Object.hasOwnProperty.call(message, \"rejectedLogRecords\"))\n                                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.rejectedLogRecords);\n                            if (message.errorMessage != null && Object.hasOwnProperty.call(message, \"errorMessage\"))\n                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.errorMessage);\n                            return writer;\n                        };\n\n                        /**\n                         * Encodes the specified ExportLogsPartialSuccess message, length delimited. Does not implicitly {@link opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess.verify|verify} messages.\n                         * @function encodeDelimited\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess\n                         * @static\n                         * @param {opentelemetry.proto.collector.logs.v1.IExportLogsPartialSuccess} message ExportLogsPartialSuccess message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        ExportLogsPartialSuccess.encodeDelimited = function encodeDelimited(message, writer) {\n                            return this.encode(message, writer).ldelim();\n                        };\n\n                        /**\n                         * Decodes an ExportLogsPartialSuccess message from the specified reader or buffer.\n                         * @function decode\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @param {number} [length] Message length if known beforehand\n                         * @returns {opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess} ExportLogsPartialSuccess\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        ExportLogsPartialSuccess.decode = function decode(reader, length) {\n                            if (!(reader instanceof $Reader))\n                                reader = $Reader.create(reader);\n                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess();\n                            while (reader.pos < end) {\n                                var tag = reader.uint32();\n                                switch (tag >>> 3) {\n                                case 1: {\n                                        message.rejectedLogRecords = reader.int64();\n                                        break;\n                                    }\n                                case 2: {\n                                        message.errorMessage = reader.string();\n                                        break;\n                                    }\n                                default:\n                                    reader.skipType(tag & 7);\n                                    break;\n                                }\n                            }\n                            return message;\n                        };\n\n                        /**\n                         * Decodes an ExportLogsPartialSuccess message from the specified reader or buffer, length delimited.\n                         * @function decodeDelimited\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @returns {opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess} ExportLogsPartialSuccess\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        ExportLogsPartialSuccess.decodeDelimited = function decodeDelimited(reader) {\n                            if (!(reader instanceof $Reader))\n                                reader = new $Reader(reader);\n                            return this.decode(reader, reader.uint32());\n                        };\n\n                        /**\n                         * Verifies an ExportLogsPartialSuccess message.\n                         * @function verify\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess\n                         * @static\n                         * @param {Object.<string,*>} message Plain object to verify\n                         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                         */\n                        ExportLogsPartialSuccess.verify = function verify(message) {\n                            if (typeof message !== \"object\" || message === null)\n                                return \"object expected\";\n                            if (message.rejectedLogRecords != null && message.hasOwnProperty(\"rejectedLogRecords\"))\n                                if (!$util.isInteger(message.rejectedLogRecords) && !(message.rejectedLogRecords && $util.isInteger(message.rejectedLogRecords.low) && $util.isInteger(message.rejectedLogRecords.high)))\n                                    return \"rejectedLogRecords: integer|Long expected\";\n                            if (message.errorMessage != null && message.hasOwnProperty(\"errorMessage\"))\n                                if (!$util.isString(message.errorMessage))\n                                    return \"errorMessage: string expected\";\n                            return null;\n                        };\n\n                        /**\n                         * Creates an ExportLogsPartialSuccess message from a plain object. Also converts values to their respective internal types.\n                         * @function fromObject\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess\n                         * @static\n                         * @param {Object.<string,*>} object Plain object\n                         * @returns {opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess} ExportLogsPartialSuccess\n                         */\n                        ExportLogsPartialSuccess.fromObject = function fromObject(object) {\n                            if (object instanceof $root.opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess)\n                                return object;\n                            var message = new $root.opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess();\n                            if (object.rejectedLogRecords != null)\n                                if ($util.Long)\n                                    (message.rejectedLogRecords = $util.Long.fromValue(object.rejectedLogRecords)).unsigned = false;\n                                else if (typeof object.rejectedLogRecords === \"string\")\n                                    message.rejectedLogRecords = parseInt(object.rejectedLogRecords, 10);\n                                else if (typeof object.rejectedLogRecords === \"number\")\n                                    message.rejectedLogRecords = object.rejectedLogRecords;\n                                else if (typeof object.rejectedLogRecords === \"object\")\n                                    message.rejectedLogRecords = new $util.LongBits(object.rejectedLogRecords.low >>> 0, object.rejectedLogRecords.high >>> 0).toNumber();\n                            if (object.errorMessage != null)\n                                message.errorMessage = String(object.errorMessage);\n                            return message;\n                        };\n\n                        /**\n                         * Creates a plain object from an ExportLogsPartialSuccess message. Also converts values to other types if specified.\n                         * @function toObject\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess\n                         * @static\n                         * @param {opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess} message ExportLogsPartialSuccess\n                         * @param {$protobuf.IConversionOptions} [options] Conversion options\n                         * @returns {Object.<string,*>} Plain object\n                         */\n                        ExportLogsPartialSuccess.toObject = function toObject(message, options) {\n                            if (!options)\n                                options = {};\n                            var object = {};\n                            if (options.defaults) {\n                                if ($util.Long) {\n                                    var long = new $util.Long(0, 0, false);\n                                    object.rejectedLogRecords = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                                } else\n                                    object.rejectedLogRecords = options.longs === String ? \"0\" : 0;\n                                object.errorMessage = \"\";\n                            }\n                            if (message.rejectedLogRecords != null && message.hasOwnProperty(\"rejectedLogRecords\"))\n                                if (typeof message.rejectedLogRecords === \"number\")\n                                    object.rejectedLogRecords = options.longs === String ? String(message.rejectedLogRecords) : message.rejectedLogRecords;\n                                else\n                                    object.rejectedLogRecords = options.longs === String ? $util.Long.prototype.toString.call(message.rejectedLogRecords) : options.longs === Number ? new $util.LongBits(message.rejectedLogRecords.low >>> 0, message.rejectedLogRecords.high >>> 0).toNumber() : message.rejectedLogRecords;\n                            if (message.errorMessage != null && message.hasOwnProperty(\"errorMessage\"))\n                                object.errorMessage = message.errorMessage;\n                            return object;\n                        };\n\n                        /**\n                         * Converts this ExportLogsPartialSuccess to JSON.\n                         * @function toJSON\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess\n                         * @instance\n                         * @returns {Object.<string,*>} JSON object\n                         */\n                        ExportLogsPartialSuccess.prototype.toJSON = function toJSON() {\n                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                        };\n\n                        /**\n                         * Gets the default type url for ExportLogsPartialSuccess\n                         * @function getTypeUrl\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess\n                         * @static\n                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                         * @returns {string} The default type url\n                         */\n                        ExportLogsPartialSuccess.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                            if (typeUrlPrefix === undefined) {\n                                typeUrlPrefix = \"type.googleapis.com\";\n                            }\n                            return typeUrlPrefix + \"/opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess\";\n                        };\n\n                        return ExportLogsPartialSuccess;\n                    })();\n\n                    return v1;\n                })();\n\n                return logs;\n            })();\n\n            return collector;\n        })();\n\n        proto.metrics = (function() {\n\n            /**\n             * Namespace metrics.\n             * @memberof opentelemetry.proto\n             * @namespace\n             */\n            var metrics = {};\n\n            metrics.v1 = (function() {\n\n                /**\n                 * Namespace v1.\n                 * @memberof opentelemetry.proto.metrics\n                 * @namespace\n                 */\n                var v1 = {};\n\n                v1.MetricsData = (function() {\n\n                    /**\n                     * Properties of a MetricsData.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @interface IMetricsData\n                     * @property {Array.<opentelemetry.proto.metrics.v1.IResourceMetrics>|null} [resourceMetrics] MetricsData resourceMetrics\n                     */\n\n                    /**\n                     * Constructs a new MetricsData.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @classdesc Represents a MetricsData.\n                     * @implements IMetricsData\n                     * @constructor\n                     * @param {opentelemetry.proto.metrics.v1.IMetricsData=} [properties] Properties to set\n                     */\n                    function MetricsData(properties) {\n                        this.resourceMetrics = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * MetricsData resourceMetrics.\n                     * @member {Array.<opentelemetry.proto.metrics.v1.IResourceMetrics>} resourceMetrics\n                     * @memberof opentelemetry.proto.metrics.v1.MetricsData\n                     * @instance\n                     */\n                    MetricsData.prototype.resourceMetrics = $util.emptyArray;\n\n                    /**\n                     * Creates a new MetricsData instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.metrics.v1.MetricsData\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IMetricsData=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.metrics.v1.MetricsData} MetricsData instance\n                     */\n                    MetricsData.create = function create(properties) {\n                        return new MetricsData(properties);\n                    };\n\n                    /**\n                     * Encodes the specified MetricsData message. Does not implicitly {@link opentelemetry.proto.metrics.v1.MetricsData.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.metrics.v1.MetricsData\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IMetricsData} message MetricsData message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    MetricsData.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.resourceMetrics != null && message.resourceMetrics.length)\n                            for (var i = 0; i < message.resourceMetrics.length; ++i)\n                                $root.opentelemetry.proto.metrics.v1.ResourceMetrics.encode(message.resourceMetrics[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified MetricsData message, length delimited. Does not implicitly {@link opentelemetry.proto.metrics.v1.MetricsData.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.MetricsData\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IMetricsData} message MetricsData message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    MetricsData.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes a MetricsData message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.metrics.v1.MetricsData\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.metrics.v1.MetricsData} MetricsData\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    MetricsData.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.metrics.v1.MetricsData();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 1: {\n                                    if (!(message.resourceMetrics && message.resourceMetrics.length))\n                                        message.resourceMetrics = [];\n                                    message.resourceMetrics.push($root.opentelemetry.proto.metrics.v1.ResourceMetrics.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes a MetricsData message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.MetricsData\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.metrics.v1.MetricsData} MetricsData\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    MetricsData.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies a MetricsData message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.metrics.v1.MetricsData\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    MetricsData.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.resourceMetrics != null && message.hasOwnProperty(\"resourceMetrics\")) {\n                            if (!Array.isArray(message.resourceMetrics))\n                                return \"resourceMetrics: array expected\";\n                            for (var i = 0; i < message.resourceMetrics.length; ++i) {\n                                var error = $root.opentelemetry.proto.metrics.v1.ResourceMetrics.verify(message.resourceMetrics[i]);\n                                if (error)\n                                    return \"resourceMetrics.\" + error;\n                            }\n                        }\n                        return null;\n                    };\n\n                    /**\n                     * Creates a MetricsData message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.metrics.v1.MetricsData\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.metrics.v1.MetricsData} MetricsData\n                     */\n                    MetricsData.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.metrics.v1.MetricsData)\n                            return object;\n                        var message = new $root.opentelemetry.proto.metrics.v1.MetricsData();\n                        if (object.resourceMetrics) {\n                            if (!Array.isArray(object.resourceMetrics))\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.MetricsData.resourceMetrics: array expected\");\n                            message.resourceMetrics = [];\n                            for (var i = 0; i < object.resourceMetrics.length; ++i) {\n                                if (typeof object.resourceMetrics[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.metrics.v1.MetricsData.resourceMetrics: object expected\");\n                                message.resourceMetrics[i] = $root.opentelemetry.proto.metrics.v1.ResourceMetrics.fromObject(object.resourceMetrics[i]);\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from a MetricsData message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.metrics.v1.MetricsData\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.MetricsData} message MetricsData\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    MetricsData.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults)\n                            object.resourceMetrics = [];\n                        if (message.resourceMetrics && message.resourceMetrics.length) {\n                            object.resourceMetrics = [];\n                            for (var j = 0; j < message.resourceMetrics.length; ++j)\n                                object.resourceMetrics[j] = $root.opentelemetry.proto.metrics.v1.ResourceMetrics.toObject(message.resourceMetrics[j], options);\n                        }\n                        return object;\n                    };\n\n                    /**\n                     * Converts this MetricsData to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.metrics.v1.MetricsData\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    MetricsData.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    /**\n                     * Gets the default type url for MetricsData\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.metrics.v1.MetricsData\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    MetricsData.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.metrics.v1.MetricsData\";\n                    };\n\n                    return MetricsData;\n                })();\n\n                v1.ResourceMetrics = (function() {\n\n                    /**\n                     * Properties of a ResourceMetrics.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @interface IResourceMetrics\n                     * @property {opentelemetry.proto.resource.v1.IResource|null} [resource] ResourceMetrics resource\n                     * @property {Array.<opentelemetry.proto.metrics.v1.IScopeMetrics>|null} [scopeMetrics] ResourceMetrics scopeMetrics\n                     * @property {string|null} [schemaUrl] ResourceMetrics schemaUrl\n                     */\n\n                    /**\n                     * Constructs a new ResourceMetrics.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @classdesc Represents a ResourceMetrics.\n                     * @implements IResourceMetrics\n                     * @constructor\n                     * @param {opentelemetry.proto.metrics.v1.IResourceMetrics=} [properties] Properties to set\n                     */\n                    function ResourceMetrics(properties) {\n                        this.scopeMetrics = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * ResourceMetrics resource.\n                     * @member {opentelemetry.proto.resource.v1.IResource|null|undefined} resource\n                     * @memberof opentelemetry.proto.metrics.v1.ResourceMetrics\n                     * @instance\n                     */\n                    ResourceMetrics.prototype.resource = null;\n\n                    /**\n                     * ResourceMetrics scopeMetrics.\n                     * @member {Array.<opentelemetry.proto.metrics.v1.IScopeMetrics>} scopeMetrics\n                     * @memberof opentelemetry.proto.metrics.v1.ResourceMetrics\n                     * @instance\n                     */\n                    ResourceMetrics.prototype.scopeMetrics = $util.emptyArray;\n\n                    /**\n                     * ResourceMetrics schemaUrl.\n                     * @member {string|null|undefined} schemaUrl\n                     * @memberof opentelemetry.proto.metrics.v1.ResourceMetrics\n                     * @instance\n                     */\n                    ResourceMetrics.prototype.schemaUrl = null;\n\n                    /**\n                     * Creates a new ResourceMetrics instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.metrics.v1.ResourceMetrics\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IResourceMetrics=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.metrics.v1.ResourceMetrics} ResourceMetrics instance\n                     */\n                    ResourceMetrics.create = function create(properties) {\n                        return new ResourceMetrics(properties);\n                    };\n\n                    /**\n                     * Encodes the specified ResourceMetrics message. Does not implicitly {@link opentelemetry.proto.metrics.v1.ResourceMetrics.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.metrics.v1.ResourceMetrics\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IResourceMetrics} message ResourceMetrics message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    ResourceMetrics.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.resource != null && Object.hasOwnProperty.call(message, \"resource\"))\n                            $root.opentelemetry.proto.resource.v1.Resource.encode(message.resource, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                        if (message.scopeMetrics != null && message.scopeMetrics.length)\n                            for (var i = 0; i < message.scopeMetrics.length; ++i)\n                                $root.opentelemetry.proto.metrics.v1.ScopeMetrics.encode(message.scopeMetrics[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                        if (message.schemaUrl != null && Object.hasOwnProperty.call(message, \"schemaUrl\"))\n                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.schemaUrl);\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified ResourceMetrics message, length delimited. Does not implicitly {@link opentelemetry.proto.metrics.v1.ResourceMetrics.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.ResourceMetrics\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IResourceMetrics} message ResourceMetrics message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    ResourceMetrics.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes a ResourceMetrics message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.metrics.v1.ResourceMetrics\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.metrics.v1.ResourceMetrics} ResourceMetrics\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    ResourceMetrics.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.metrics.v1.ResourceMetrics();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 1: {\n                                    message.resource = $root.opentelemetry.proto.resource.v1.Resource.decode(reader, reader.uint32());\n                                    break;\n                                }\n                            case 2: {\n                                    if (!(message.scopeMetrics && message.scopeMetrics.length))\n                                        message.scopeMetrics = [];\n                                    message.scopeMetrics.push($root.opentelemetry.proto.metrics.v1.ScopeMetrics.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                            case 3: {\n                                    message.schemaUrl = reader.string();\n                                    break;\n                                }\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes a ResourceMetrics message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.ResourceMetrics\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.metrics.v1.ResourceMetrics} ResourceMetrics\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    ResourceMetrics.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies a ResourceMetrics message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.metrics.v1.ResourceMetrics\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    ResourceMetrics.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.resource != null && message.hasOwnProperty(\"resource\")) {\n                            var error = $root.opentelemetry.proto.resource.v1.Resource.verify(message.resource);\n                            if (error)\n                                return \"resource.\" + error;\n                        }\n                        if (message.scopeMetrics != null && message.hasOwnProperty(\"scopeMetrics\")) {\n                            if (!Array.isArray(message.scopeMetrics))\n                                return \"scopeMetrics: array expected\";\n                            for (var i = 0; i < message.scopeMetrics.length; ++i) {\n                                var error = $root.opentelemetry.proto.metrics.v1.ScopeMetrics.verify(message.scopeMetrics[i]);\n                                if (error)\n                                    return \"scopeMetrics.\" + error;\n                            }\n                        }\n                        if (message.schemaUrl != null && message.hasOwnProperty(\"schemaUrl\"))\n                            if (!$util.isString(message.schemaUrl))\n                                return \"schemaUrl: string expected\";\n                        return null;\n                    };\n\n                    /**\n                     * Creates a ResourceMetrics message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.metrics.v1.ResourceMetrics\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.metrics.v1.ResourceMetrics} ResourceMetrics\n                     */\n                    ResourceMetrics.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.metrics.v1.ResourceMetrics)\n                            return object;\n                        var message = new $root.opentelemetry.proto.metrics.v1.ResourceMetrics();\n                        if (object.resource != null) {\n                            if (typeof object.resource !== \"object\")\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.ResourceMetrics.resource: object expected\");\n                            message.resource = $root.opentelemetry.proto.resource.v1.Resource.fromObject(object.resource);\n                        }\n                        if (object.scopeMetrics) {\n                            if (!Array.isArray(object.scopeMetrics))\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.ResourceMetrics.scopeMetrics: array expected\");\n                            message.scopeMetrics = [];\n                            for (var i = 0; i < object.scopeMetrics.length; ++i) {\n                                if (typeof object.scopeMetrics[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.metrics.v1.ResourceMetrics.scopeMetrics: object expected\");\n                                message.scopeMetrics[i] = $root.opentelemetry.proto.metrics.v1.ScopeMetrics.fromObject(object.scopeMetrics[i]);\n                            }\n                        }\n                        if (object.schemaUrl != null)\n                            message.schemaUrl = String(object.schemaUrl);\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from a ResourceMetrics message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.metrics.v1.ResourceMetrics\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.ResourceMetrics} message ResourceMetrics\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    ResourceMetrics.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults)\n                            object.scopeMetrics = [];\n                        if (options.defaults) {\n                            object.resource = null;\n                            object.schemaUrl = \"\";\n                        }\n                        if (message.resource != null && message.hasOwnProperty(\"resource\"))\n                            object.resource = $root.opentelemetry.proto.resource.v1.Resource.toObject(message.resource, options);\n                        if (message.scopeMetrics && message.scopeMetrics.length) {\n                            object.scopeMetrics = [];\n                            for (var j = 0; j < message.scopeMetrics.length; ++j)\n                                object.scopeMetrics[j] = $root.opentelemetry.proto.metrics.v1.ScopeMetrics.toObject(message.scopeMetrics[j], options);\n                        }\n                        if (message.schemaUrl != null && message.hasOwnProperty(\"schemaUrl\"))\n                            object.schemaUrl = message.schemaUrl;\n                        return object;\n                    };\n\n                    /**\n                     * Converts this ResourceMetrics to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.metrics.v1.ResourceMetrics\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    ResourceMetrics.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    /**\n                     * Gets the default type url for ResourceMetrics\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.metrics.v1.ResourceMetrics\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    ResourceMetrics.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.metrics.v1.ResourceMetrics\";\n                    };\n\n                    return ResourceMetrics;\n                })();\n\n                v1.ScopeMetrics = (function() {\n\n                    /**\n                     * Properties of a ScopeMetrics.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @interface IScopeMetrics\n                     * @property {opentelemetry.proto.common.v1.IInstrumentationScope|null} [scope] ScopeMetrics scope\n                     * @property {Array.<opentelemetry.proto.metrics.v1.IMetric>|null} [metrics] ScopeMetrics metrics\n                     * @property {string|null} [schemaUrl] ScopeMetrics schemaUrl\n                     */\n\n                    /**\n                     * Constructs a new ScopeMetrics.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @classdesc Represents a ScopeMetrics.\n                     * @implements IScopeMetrics\n                     * @constructor\n                     * @param {opentelemetry.proto.metrics.v1.IScopeMetrics=} [properties] Properties to set\n                     */\n                    function ScopeMetrics(properties) {\n                        this.metrics = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * ScopeMetrics scope.\n                     * @member {opentelemetry.proto.common.v1.IInstrumentationScope|null|undefined} scope\n                     * @memberof opentelemetry.proto.metrics.v1.ScopeMetrics\n                     * @instance\n                     */\n                    ScopeMetrics.prototype.scope = null;\n\n                    /**\n                     * ScopeMetrics metrics.\n                     * @member {Array.<opentelemetry.proto.metrics.v1.IMetric>} metrics\n                     * @memberof opentelemetry.proto.metrics.v1.ScopeMetrics\n                     * @instance\n                     */\n                    ScopeMetrics.prototype.metrics = $util.emptyArray;\n\n                    /**\n                     * ScopeMetrics schemaUrl.\n                     * @member {string|null|undefined} schemaUrl\n                     * @memberof opentelemetry.proto.metrics.v1.ScopeMetrics\n                     * @instance\n                     */\n                    ScopeMetrics.prototype.schemaUrl = null;\n\n                    /**\n                     * Creates a new ScopeMetrics instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.metrics.v1.ScopeMetrics\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IScopeMetrics=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.metrics.v1.ScopeMetrics} ScopeMetrics instance\n                     */\n                    ScopeMetrics.create = function create(properties) {\n                        return new ScopeMetrics(properties);\n                    };\n\n                    /**\n                     * Encodes the specified ScopeMetrics message. Does not implicitly {@link opentelemetry.proto.metrics.v1.ScopeMetrics.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.metrics.v1.ScopeMetrics\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IScopeMetrics} message ScopeMetrics message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    ScopeMetrics.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.scope != null && Object.hasOwnProperty.call(message, \"scope\"))\n                            $root.opentelemetry.proto.common.v1.InstrumentationScope.encode(message.scope, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                        if (message.metrics != null && message.metrics.length)\n                            for (var i = 0; i < message.metrics.length; ++i)\n                                $root.opentelemetry.proto.metrics.v1.Metric.encode(message.metrics[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                        if (message.schemaUrl != null && Object.hasOwnProperty.call(message, \"schemaUrl\"))\n                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.schemaUrl);\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified ScopeMetrics message, length delimited. Does not implicitly {@link opentelemetry.proto.metrics.v1.ScopeMetrics.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.ScopeMetrics\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IScopeMetrics} message ScopeMetrics message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    ScopeMetrics.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes a ScopeMetrics message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.metrics.v1.ScopeMetrics\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.metrics.v1.ScopeMetrics} ScopeMetrics\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    ScopeMetrics.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.metrics.v1.ScopeMetrics();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 1: {\n                                    message.scope = $root.opentelemetry.proto.common.v1.InstrumentationScope.decode(reader, reader.uint32());\n                                    break;\n                                }\n                            case 2: {\n                                    if (!(message.metrics && message.metrics.length))\n                                        message.metrics = [];\n                                    message.metrics.push($root.opentelemetry.proto.metrics.v1.Metric.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                            case 3: {\n                                    message.schemaUrl = reader.string();\n                                    break;\n                                }\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes a ScopeMetrics message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.ScopeMetrics\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.metrics.v1.ScopeMetrics} ScopeMetrics\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    ScopeMetrics.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies a ScopeMetrics message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.metrics.v1.ScopeMetrics\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    ScopeMetrics.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.scope != null && message.hasOwnProperty(\"scope\")) {\n                            var error = $root.opentelemetry.proto.common.v1.InstrumentationScope.verify(message.scope);\n                            if (error)\n                                return \"scope.\" + error;\n                        }\n                        if (message.metrics != null && message.hasOwnProperty(\"metrics\")) {\n                            if (!Array.isArray(message.metrics))\n                                return \"metrics: array expected\";\n                            for (var i = 0; i < message.metrics.length; ++i) {\n                                var error = $root.opentelemetry.proto.metrics.v1.Metric.verify(message.metrics[i]);\n                                if (error)\n                                    return \"metrics.\" + error;\n                            }\n                        }\n                        if (message.schemaUrl != null && message.hasOwnProperty(\"schemaUrl\"))\n                            if (!$util.isString(message.schemaUrl))\n                                return \"schemaUrl: string expected\";\n                        return null;\n                    };\n\n                    /**\n                     * Creates a ScopeMetrics message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.metrics.v1.ScopeMetrics\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.metrics.v1.ScopeMetrics} ScopeMetrics\n                     */\n                    ScopeMetrics.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.metrics.v1.ScopeMetrics)\n                            return object;\n                        var message = new $root.opentelemetry.proto.metrics.v1.ScopeMetrics();\n                        if (object.scope != null) {\n                            if (typeof object.scope !== \"object\")\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.ScopeMetrics.scope: object expected\");\n                            message.scope = $root.opentelemetry.proto.common.v1.InstrumentationScope.fromObject(object.scope);\n                        }\n                        if (object.metrics) {\n                            if (!Array.isArray(object.metrics))\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.ScopeMetrics.metrics: array expected\");\n                            message.metrics = [];\n                            for (var i = 0; i < object.metrics.length; ++i) {\n                                if (typeof object.metrics[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.metrics.v1.ScopeMetrics.metrics: object expected\");\n                                message.metrics[i] = $root.opentelemetry.proto.metrics.v1.Metric.fromObject(object.metrics[i]);\n                            }\n                        }\n                        if (object.schemaUrl != null)\n                            message.schemaUrl = String(object.schemaUrl);\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from a ScopeMetrics message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.metrics.v1.ScopeMetrics\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.ScopeMetrics} message ScopeMetrics\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    ScopeMetrics.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults)\n                            object.metrics = [];\n                        if (options.defaults) {\n                            object.scope = null;\n                            object.schemaUrl = \"\";\n                        }\n                        if (message.scope != null && message.hasOwnProperty(\"scope\"))\n                            object.scope = $root.opentelemetry.proto.common.v1.InstrumentationScope.toObject(message.scope, options);\n                        if (message.metrics && message.metrics.length) {\n                            object.metrics = [];\n                            for (var j = 0; j < message.metrics.length; ++j)\n                                object.metrics[j] = $root.opentelemetry.proto.metrics.v1.Metric.toObject(message.metrics[j], options);\n                        }\n                        if (message.schemaUrl != null && message.hasOwnProperty(\"schemaUrl\"))\n                            object.schemaUrl = message.schemaUrl;\n                        return object;\n                    };\n\n                    /**\n                     * Converts this ScopeMetrics to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.metrics.v1.ScopeMetrics\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    ScopeMetrics.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    /**\n                     * Gets the default type url for ScopeMetrics\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.metrics.v1.ScopeMetrics\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    ScopeMetrics.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.metrics.v1.ScopeMetrics\";\n                    };\n\n                    return ScopeMetrics;\n                })();\n\n                v1.Metric = (function() {\n\n                    /**\n                     * Properties of a Metric.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @interface IMetric\n                     * @property {string|null} [name] Metric name\n                     * @property {string|null} [description] Metric description\n                     * @property {string|null} [unit] Metric unit\n                     * @property {opentelemetry.proto.metrics.v1.IGauge|null} [gauge] Metric gauge\n                     * @property {opentelemetry.proto.metrics.v1.ISum|null} [sum] Metric sum\n                     * @property {opentelemetry.proto.metrics.v1.IHistogram|null} [histogram] Metric histogram\n                     * @property {opentelemetry.proto.metrics.v1.IExponentialHistogram|null} [exponentialHistogram] Metric exponentialHistogram\n                     * @property {opentelemetry.proto.metrics.v1.ISummary|null} [summary] Metric summary\n                     */\n\n                    /**\n                     * Constructs a new Metric.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @classdesc Represents a Metric.\n                     * @implements IMetric\n                     * @constructor\n                     * @param {opentelemetry.proto.metrics.v1.IMetric=} [properties] Properties to set\n                     */\n                    function Metric(properties) {\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * Metric name.\n                     * @member {string|null|undefined} name\n                     * @memberof opentelemetry.proto.metrics.v1.Metric\n                     * @instance\n                     */\n                    Metric.prototype.name = null;\n\n                    /**\n                     * Metric description.\n                     * @member {string|null|undefined} description\n                     * @memberof opentelemetry.proto.metrics.v1.Metric\n                     * @instance\n                     */\n                    Metric.prototype.description = null;\n\n                    /**\n                     * Metric unit.\n                     * @member {string|null|undefined} unit\n                     * @memberof opentelemetry.proto.metrics.v1.Metric\n                     * @instance\n                     */\n                    Metric.prototype.unit = null;\n\n                    /**\n                     * Metric gauge.\n                     * @member {opentelemetry.proto.metrics.v1.IGauge|null|undefined} gauge\n                     * @memberof opentelemetry.proto.metrics.v1.Metric\n                     * @instance\n                     */\n                    Metric.prototype.gauge = null;\n\n                    /**\n                     * Metric sum.\n                     * @member {opentelemetry.proto.metrics.v1.ISum|null|undefined} sum\n                     * @memberof opentelemetry.proto.metrics.v1.Metric\n                     * @instance\n                     */\n                    Metric.prototype.sum = null;\n\n                    /**\n                     * Metric histogram.\n                     * @member {opentelemetry.proto.metrics.v1.IHistogram|null|undefined} histogram\n                     * @memberof opentelemetry.proto.metrics.v1.Metric\n                     * @instance\n                     */\n                    Metric.prototype.histogram = null;\n\n                    /**\n                     * Metric exponentialHistogram.\n                     * @member {opentelemetry.proto.metrics.v1.IExponentialHistogram|null|undefined} exponentialHistogram\n                     * @memberof opentelemetry.proto.metrics.v1.Metric\n                     * @instance\n                     */\n                    Metric.prototype.exponentialHistogram = null;\n\n                    /**\n                     * Metric summary.\n                     * @member {opentelemetry.proto.metrics.v1.ISummary|null|undefined} summary\n                     * @memberof opentelemetry.proto.metrics.v1.Metric\n                     * @instance\n                     */\n                    Metric.prototype.summary = null;\n\n                    // OneOf field names bound to virtual getters and setters\n                    var $oneOfFields;\n\n                    /**\n                     * Metric data.\n                     * @member {\"gauge\"|\"sum\"|\"histogram\"|\"exponentialHistogram\"|\"summary\"|undefined} data\n                     * @memberof opentelemetry.proto.metrics.v1.Metric\n                     * @instance\n                     */\n                    Object.defineProperty(Metric.prototype, \"data\", {\n                        get: $util.oneOfGetter($oneOfFields = [\"gauge\", \"sum\", \"histogram\", \"exponentialHistogram\", \"summary\"]),\n                        set: $util.oneOfSetter($oneOfFields)\n                    });\n\n                    /**\n                     * Creates a new Metric instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.metrics.v1.Metric\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IMetric=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.metrics.v1.Metric} Metric instance\n                     */\n                    Metric.create = function create(properties) {\n                        return new Metric(properties);\n                    };\n\n                    /**\n                     * Encodes the specified Metric message. Does not implicitly {@link opentelemetry.proto.metrics.v1.Metric.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.metrics.v1.Metric\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IMetric} message Metric message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    Metric.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\n                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n                        if (message.description != null && Object.hasOwnProperty.call(message, \"description\"))\n                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.description);\n                        if (message.unit != null && Object.hasOwnProperty.call(message, \"unit\"))\n                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.unit);\n                        if (message.gauge != null && Object.hasOwnProperty.call(message, \"gauge\"))\n                            $root.opentelemetry.proto.metrics.v1.Gauge.encode(message.gauge, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n                        if (message.sum != null && Object.hasOwnProperty.call(message, \"sum\"))\n                            $root.opentelemetry.proto.metrics.v1.Sum.encode(message.sum, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();\n                        if (message.histogram != null && Object.hasOwnProperty.call(message, \"histogram\"))\n                            $root.opentelemetry.proto.metrics.v1.Histogram.encode(message.histogram, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();\n                        if (message.exponentialHistogram != null && Object.hasOwnProperty.call(message, \"exponentialHistogram\"))\n                            $root.opentelemetry.proto.metrics.v1.ExponentialHistogram.encode(message.exponentialHistogram, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();\n                        if (message.summary != null && Object.hasOwnProperty.call(message, \"summary\"))\n                            $root.opentelemetry.proto.metrics.v1.Summary.encode(message.summary, writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified Metric message, length delimited. Does not implicitly {@link opentelemetry.proto.metrics.v1.Metric.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.Metric\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IMetric} message Metric message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    Metric.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes a Metric message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.metrics.v1.Metric\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.metrics.v1.Metric} Metric\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    Metric.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.metrics.v1.Metric();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 1: {\n                                    message.name = reader.string();\n                                    break;\n                                }\n                            case 2: {\n                                    message.description = reader.string();\n                                    break;\n                                }\n                            case 3: {\n                                    message.unit = reader.string();\n                                    break;\n                                }\n                            case 5: {\n                                    message.gauge = $root.opentelemetry.proto.metrics.v1.Gauge.decode(reader, reader.uint32());\n                                    break;\n                                }\n                            case 7: {\n                                    message.sum = $root.opentelemetry.proto.metrics.v1.Sum.decode(reader, reader.uint32());\n                                    break;\n                                }\n                            case 9: {\n                                    message.histogram = $root.opentelemetry.proto.metrics.v1.Histogram.decode(reader, reader.uint32());\n                                    break;\n                                }\n                            case 10: {\n                                    message.exponentialHistogram = $root.opentelemetry.proto.metrics.v1.ExponentialHistogram.decode(reader, reader.uint32());\n                                    break;\n                                }\n                            case 11: {\n                                    message.summary = $root.opentelemetry.proto.metrics.v1.Summary.decode(reader, reader.uint32());\n                                    break;\n                                }\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes a Metric message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.Metric\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.metrics.v1.Metric} Metric\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    Metric.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies a Metric message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.metrics.v1.Metric\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    Metric.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        var properties = {};\n                        if (message.name != null && message.hasOwnProperty(\"name\"))\n                            if (!$util.isString(message.name))\n                                return \"name: string expected\";\n                        if (message.description != null && message.hasOwnProperty(\"description\"))\n                            if (!$util.isString(message.description))\n                                return \"description: string expected\";\n                        if (message.unit != null && message.hasOwnProperty(\"unit\"))\n                            if (!$util.isString(message.unit))\n                                return \"unit: string expected\";\n                        if (message.gauge != null && message.hasOwnProperty(\"gauge\")) {\n                            properties.data = 1;\n                            {\n                                var error = $root.opentelemetry.proto.metrics.v1.Gauge.verify(message.gauge);\n                                if (error)\n                                    return \"gauge.\" + error;\n                            }\n                        }\n                        if (message.sum != null && message.hasOwnProperty(\"sum\")) {\n                            if (properties.data === 1)\n                                return \"data: multiple values\";\n                            properties.data = 1;\n                            {\n                                var error = $root.opentelemetry.proto.metrics.v1.Sum.verify(message.sum);\n                                if (error)\n                                    return \"sum.\" + error;\n                            }\n                        }\n                        if (message.histogram != null && message.hasOwnProperty(\"histogram\")) {\n                            if (properties.data === 1)\n                                return \"data: multiple values\";\n                            properties.data = 1;\n                            {\n                                var error = $root.opentelemetry.proto.metrics.v1.Histogram.verify(message.histogram);\n                                if (error)\n                                    return \"histogram.\" + error;\n                            }\n                        }\n                        if (message.exponentialHistogram != null && message.hasOwnProperty(\"exponentialHistogram\")) {\n                            if (properties.data === 1)\n                                return \"data: multiple values\";\n                            properties.data = 1;\n                            {\n                                var error = $root.opentelemetry.proto.metrics.v1.ExponentialHistogram.verify(message.exponentialHistogram);\n                                if (error)\n                                    return \"exponentialHistogram.\" + error;\n                            }\n                        }\n                        if (message.summary != null && message.hasOwnProperty(\"summary\")) {\n                            if (properties.data === 1)\n                                return \"data: multiple values\";\n                            properties.data = 1;\n                            {\n                                var error = $root.opentelemetry.proto.metrics.v1.Summary.verify(message.summary);\n                                if (error)\n                                    return \"summary.\" + error;\n                            }\n                        }\n                        return null;\n                    };\n\n                    /**\n                     * Creates a Metric message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.metrics.v1.Metric\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.metrics.v1.Metric} Metric\n                     */\n                    Metric.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.metrics.v1.Metric)\n                            return object;\n                        var message = new $root.opentelemetry.proto.metrics.v1.Metric();\n                        if (object.name != null)\n                            message.name = String(object.name);\n                        if (object.description != null)\n                            message.description = String(object.description);\n                        if (object.unit != null)\n                            message.unit = String(object.unit);\n                        if (object.gauge != null) {\n                            if (typeof object.gauge !== \"object\")\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.Metric.gauge: object expected\");\n                            message.gauge = $root.opentelemetry.proto.metrics.v1.Gauge.fromObject(object.gauge);\n                        }\n                        if (object.sum != null) {\n                            if (typeof object.sum !== \"object\")\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.Metric.sum: object expected\");\n                            message.sum = $root.opentelemetry.proto.metrics.v1.Sum.fromObject(object.sum);\n                        }\n                        if (object.histogram != null) {\n                            if (typeof object.histogram !== \"object\")\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.Metric.histogram: object expected\");\n                            message.histogram = $root.opentelemetry.proto.metrics.v1.Histogram.fromObject(object.histogram);\n                        }\n                        if (object.exponentialHistogram != null) {\n                            if (typeof object.exponentialHistogram !== \"object\")\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.Metric.exponentialHistogram: object expected\");\n                            message.exponentialHistogram = $root.opentelemetry.proto.metrics.v1.ExponentialHistogram.fromObject(object.exponentialHistogram);\n                        }\n                        if (object.summary != null) {\n                            if (typeof object.summary !== \"object\")\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.Metric.summary: object expected\");\n                            message.summary = $root.opentelemetry.proto.metrics.v1.Summary.fromObject(object.summary);\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from a Metric message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.metrics.v1.Metric\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.Metric} message Metric\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    Metric.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.defaults) {\n                            object.name = \"\";\n                            object.description = \"\";\n                            object.unit = \"\";\n                        }\n                        if (message.name != null && message.hasOwnProperty(\"name\"))\n                            object.name = message.name;\n                        if (message.description != null && message.hasOwnProperty(\"description\"))\n                            object.description = message.description;\n                        if (message.unit != null && message.hasOwnProperty(\"unit\"))\n                            object.unit = message.unit;\n                        if (message.gauge != null && message.hasOwnProperty(\"gauge\")) {\n                            object.gauge = $root.opentelemetry.proto.metrics.v1.Gauge.toObject(message.gauge, options);\n                            if (options.oneofs)\n                                object.data = \"gauge\";\n                        }\n                        if (message.sum != null && message.hasOwnProperty(\"sum\")) {\n                            object.sum = $root.opentelemetry.proto.metrics.v1.Sum.toObject(message.sum, options);\n                            if (options.oneofs)\n                                object.data = \"sum\";\n                        }\n                        if (message.histogram != null && message.hasOwnProperty(\"histogram\")) {\n                            object.histogram = $root.opentelemetry.proto.metrics.v1.Histogram.toObject(message.histogram, options);\n                            if (options.oneofs)\n                                object.data = \"histogram\";\n                        }\n                        if (message.exponentialHistogram != null && message.hasOwnProperty(\"exponentialHistogram\")) {\n                            object.exponentialHistogram = $root.opentelemetry.proto.metrics.v1.ExponentialHistogram.toObject(message.exponentialHistogram, options);\n                            if (options.oneofs)\n                                object.data = \"exponentialHistogram\";\n                        }\n                        if (message.summary != null && message.hasOwnProperty(\"summary\")) {\n                            object.summary = $root.opentelemetry.proto.metrics.v1.Summary.toObject(message.summary, options);\n                            if (options.oneofs)\n                                object.data = \"summary\";\n                        }\n                        return object;\n                    };\n\n                    /**\n                     * Converts this Metric to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.metrics.v1.Metric\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    Metric.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    /**\n                     * Gets the default type url for Metric\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.metrics.v1.Metric\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    Metric.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.metrics.v1.Metric\";\n                    };\n\n                    return Metric;\n                })();\n\n                v1.Gauge = (function() {\n\n                    /**\n                     * Properties of a Gauge.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @interface IGauge\n                     * @property {Array.<opentelemetry.proto.metrics.v1.INumberDataPoint>|null} [dataPoints] Gauge dataPoints\n                     */\n\n                    /**\n                     * Constructs a new Gauge.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @classdesc Represents a Gauge.\n                     * @implements IGauge\n                     * @constructor\n                     * @param {opentelemetry.proto.metrics.v1.IGauge=} [properties] Properties to set\n                     */\n                    function Gauge(properties) {\n                        this.dataPoints = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * Gauge dataPoints.\n                     * @member {Array.<opentelemetry.proto.metrics.v1.INumberDataPoint>} dataPoints\n                     * @memberof opentelemetry.proto.metrics.v1.Gauge\n                     * @instance\n                     */\n                    Gauge.prototype.dataPoints = $util.emptyArray;\n\n                    /**\n                     * Creates a new Gauge instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.metrics.v1.Gauge\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IGauge=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.metrics.v1.Gauge} Gauge instance\n                     */\n                    Gauge.create = function create(properties) {\n                        return new Gauge(properties);\n                    };\n\n                    /**\n                     * Encodes the specified Gauge message. Does not implicitly {@link opentelemetry.proto.metrics.v1.Gauge.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.metrics.v1.Gauge\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IGauge} message Gauge message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    Gauge.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.dataPoints != null && message.dataPoints.length)\n                            for (var i = 0; i < message.dataPoints.length; ++i)\n                                $root.opentelemetry.proto.metrics.v1.NumberDataPoint.encode(message.dataPoints[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified Gauge message, length delimited. Does not implicitly {@link opentelemetry.proto.metrics.v1.Gauge.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.Gauge\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IGauge} message Gauge message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    Gauge.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes a Gauge message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.metrics.v1.Gauge\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.metrics.v1.Gauge} Gauge\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    Gauge.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.metrics.v1.Gauge();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 1: {\n                                    if (!(message.dataPoints && message.dataPoints.length))\n                                        message.dataPoints = [];\n                                    message.dataPoints.push($root.opentelemetry.proto.metrics.v1.NumberDataPoint.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes a Gauge message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.Gauge\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.metrics.v1.Gauge} Gauge\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    Gauge.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies a Gauge message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.metrics.v1.Gauge\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    Gauge.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.dataPoints != null && message.hasOwnProperty(\"dataPoints\")) {\n                            if (!Array.isArray(message.dataPoints))\n                                return \"dataPoints: array expected\";\n                            for (var i = 0; i < message.dataPoints.length; ++i) {\n                                var error = $root.opentelemetry.proto.metrics.v1.NumberDataPoint.verify(message.dataPoints[i]);\n                                if (error)\n                                    return \"dataPoints.\" + error;\n                            }\n                        }\n                        return null;\n                    };\n\n                    /**\n                     * Creates a Gauge message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.metrics.v1.Gauge\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.metrics.v1.Gauge} Gauge\n                     */\n                    Gauge.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.metrics.v1.Gauge)\n                            return object;\n                        var message = new $root.opentelemetry.proto.metrics.v1.Gauge();\n                        if (object.dataPoints) {\n                            if (!Array.isArray(object.dataPoints))\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.Gauge.dataPoints: array expected\");\n                            message.dataPoints = [];\n                            for (var i = 0; i < object.dataPoints.length; ++i) {\n                                if (typeof object.dataPoints[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.metrics.v1.Gauge.dataPoints: object expected\");\n                                message.dataPoints[i] = $root.opentelemetry.proto.metrics.v1.NumberDataPoint.fromObject(object.dataPoints[i]);\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from a Gauge message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.metrics.v1.Gauge\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.Gauge} message Gauge\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    Gauge.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults)\n                            object.dataPoints = [];\n                        if (message.dataPoints && message.dataPoints.length) {\n                            object.dataPoints = [];\n                            for (var j = 0; j < message.dataPoints.length; ++j)\n                                object.dataPoints[j] = $root.opentelemetry.proto.metrics.v1.NumberDataPoint.toObject(message.dataPoints[j], options);\n                        }\n                        return object;\n                    };\n\n                    /**\n                     * Converts this Gauge to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.metrics.v1.Gauge\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    Gauge.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    /**\n                     * Gets the default type url for Gauge\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.metrics.v1.Gauge\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    Gauge.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.metrics.v1.Gauge\";\n                    };\n\n                    return Gauge;\n                })();\n\n                v1.Sum = (function() {\n\n                    /**\n                     * Properties of a Sum.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @interface ISum\n                     * @property {Array.<opentelemetry.proto.metrics.v1.INumberDataPoint>|null} [dataPoints] Sum dataPoints\n                     * @property {opentelemetry.proto.metrics.v1.AggregationTemporality|null} [aggregationTemporality] Sum aggregationTemporality\n                     * @property {boolean|null} [isMonotonic] Sum isMonotonic\n                     */\n\n                    /**\n                     * Constructs a new Sum.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @classdesc Represents a Sum.\n                     * @implements ISum\n                     * @constructor\n                     * @param {opentelemetry.proto.metrics.v1.ISum=} [properties] Properties to set\n                     */\n                    function Sum(properties) {\n                        this.dataPoints = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * Sum dataPoints.\n                     * @member {Array.<opentelemetry.proto.metrics.v1.INumberDataPoint>} dataPoints\n                     * @memberof opentelemetry.proto.metrics.v1.Sum\n                     * @instance\n                     */\n                    Sum.prototype.dataPoints = $util.emptyArray;\n\n                    /**\n                     * Sum aggregationTemporality.\n                     * @member {opentelemetry.proto.metrics.v1.AggregationTemporality|null|undefined} aggregationTemporality\n                     * @memberof opentelemetry.proto.metrics.v1.Sum\n                     * @instance\n                     */\n                    Sum.prototype.aggregationTemporality = null;\n\n                    /**\n                     * Sum isMonotonic.\n                     * @member {boolean|null|undefined} isMonotonic\n                     * @memberof opentelemetry.proto.metrics.v1.Sum\n                     * @instance\n                     */\n                    Sum.prototype.isMonotonic = null;\n\n                    /**\n                     * Creates a new Sum instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.metrics.v1.Sum\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.ISum=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.metrics.v1.Sum} Sum instance\n                     */\n                    Sum.create = function create(properties) {\n                        return new Sum(properties);\n                    };\n\n                    /**\n                     * Encodes the specified Sum message. Does not implicitly {@link opentelemetry.proto.metrics.v1.Sum.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.metrics.v1.Sum\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.ISum} message Sum message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    Sum.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.dataPoints != null && message.dataPoints.length)\n                            for (var i = 0; i < message.dataPoints.length; ++i)\n                                $root.opentelemetry.proto.metrics.v1.NumberDataPoint.encode(message.dataPoints[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                        if (message.aggregationTemporality != null && Object.hasOwnProperty.call(message, \"aggregationTemporality\"))\n                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.aggregationTemporality);\n                        if (message.isMonotonic != null && Object.hasOwnProperty.call(message, \"isMonotonic\"))\n                            writer.uint32(/* id 3, wireType 0 =*/24).bool(message.isMonotonic);\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified Sum message, length delimited. Does not implicitly {@link opentelemetry.proto.metrics.v1.Sum.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.Sum\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.ISum} message Sum message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    Sum.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes a Sum message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.metrics.v1.Sum\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.metrics.v1.Sum} Sum\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    Sum.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.metrics.v1.Sum();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 1: {\n                                    if (!(message.dataPoints && message.dataPoints.length))\n                                        message.dataPoints = [];\n                                    message.dataPoints.push($root.opentelemetry.proto.metrics.v1.NumberDataPoint.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                            case 2: {\n                                    message.aggregationTemporality = reader.int32();\n                                    break;\n                                }\n                            case 3: {\n                                    message.isMonotonic = reader.bool();\n                                    break;\n                                }\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes a Sum message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.Sum\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.metrics.v1.Sum} Sum\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    Sum.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies a Sum message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.metrics.v1.Sum\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    Sum.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.dataPoints != null && message.hasOwnProperty(\"dataPoints\")) {\n                            if (!Array.isArray(message.dataPoints))\n                                return \"dataPoints: array expected\";\n                            for (var i = 0; i < message.dataPoints.length; ++i) {\n                                var error = $root.opentelemetry.proto.metrics.v1.NumberDataPoint.verify(message.dataPoints[i]);\n                                if (error)\n                                    return \"dataPoints.\" + error;\n                            }\n                        }\n                        if (message.aggregationTemporality != null && message.hasOwnProperty(\"aggregationTemporality\"))\n                            switch (message.aggregationTemporality) {\n                            default:\n                                return \"aggregationTemporality: enum value expected\";\n                            case 0:\n                            case 1:\n                            case 2:\n                                break;\n                            }\n                        if (message.isMonotonic != null && message.hasOwnProperty(\"isMonotonic\"))\n                            if (typeof message.isMonotonic !== \"boolean\")\n                                return \"isMonotonic: boolean expected\";\n                        return null;\n                    };\n\n                    /**\n                     * Creates a Sum message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.metrics.v1.Sum\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.metrics.v1.Sum} Sum\n                     */\n                    Sum.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.metrics.v1.Sum)\n                            return object;\n                        var message = new $root.opentelemetry.proto.metrics.v1.Sum();\n                        if (object.dataPoints) {\n                            if (!Array.isArray(object.dataPoints))\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.Sum.dataPoints: array expected\");\n                            message.dataPoints = [];\n                            for (var i = 0; i < object.dataPoints.length; ++i) {\n                                if (typeof object.dataPoints[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.metrics.v1.Sum.dataPoints: object expected\");\n                                message.dataPoints[i] = $root.opentelemetry.proto.metrics.v1.NumberDataPoint.fromObject(object.dataPoints[i]);\n                            }\n                        }\n                        switch (object.aggregationTemporality) {\n                        default:\n                            if (typeof object.aggregationTemporality === \"number\") {\n                                message.aggregationTemporality = object.aggregationTemporality;\n                                break;\n                            }\n                            break;\n                        case \"AGGREGATION_TEMPORALITY_UNSPECIFIED\":\n                        case 0:\n                            message.aggregationTemporality = 0;\n                            break;\n                        case \"AGGREGATION_TEMPORALITY_DELTA\":\n                        case 1:\n                            message.aggregationTemporality = 1;\n                            break;\n                        case \"AGGREGATION_TEMPORALITY_CUMULATIVE\":\n                        case 2:\n                            message.aggregationTemporality = 2;\n                            break;\n                        }\n                        if (object.isMonotonic != null)\n                            message.isMonotonic = Boolean(object.isMonotonic);\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from a Sum message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.metrics.v1.Sum\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.Sum} message Sum\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    Sum.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults)\n                            object.dataPoints = [];\n                        if (options.defaults) {\n                            object.aggregationTemporality = options.enums === String ? \"AGGREGATION_TEMPORALITY_UNSPECIFIED\" : 0;\n                            object.isMonotonic = false;\n                        }\n                        if (message.dataPoints && message.dataPoints.length) {\n                            object.dataPoints = [];\n                            for (var j = 0; j < message.dataPoints.length; ++j)\n                                object.dataPoints[j] = $root.opentelemetry.proto.metrics.v1.NumberDataPoint.toObject(message.dataPoints[j], options);\n                        }\n                        if (message.aggregationTemporality != null && message.hasOwnProperty(\"aggregationTemporality\"))\n                            object.aggregationTemporality = options.enums === String ? $root.opentelemetry.proto.metrics.v1.AggregationTemporality[message.aggregationTemporality] === undefined ? message.aggregationTemporality : $root.opentelemetry.proto.metrics.v1.AggregationTemporality[message.aggregationTemporality] : message.aggregationTemporality;\n                        if (message.isMonotonic != null && message.hasOwnProperty(\"isMonotonic\"))\n                            object.isMonotonic = message.isMonotonic;\n                        return object;\n                    };\n\n                    /**\n                     * Converts this Sum to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.metrics.v1.Sum\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    Sum.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    /**\n                     * Gets the default type url for Sum\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.metrics.v1.Sum\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    Sum.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.metrics.v1.Sum\";\n                    };\n\n                    return Sum;\n                })();\n\n                v1.Histogram = (function() {\n\n                    /**\n                     * Properties of a Histogram.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @interface IHistogram\n                     * @property {Array.<opentelemetry.proto.metrics.v1.IHistogramDataPoint>|null} [dataPoints] Histogram dataPoints\n                     * @property {opentelemetry.proto.metrics.v1.AggregationTemporality|null} [aggregationTemporality] Histogram aggregationTemporality\n                     */\n\n                    /**\n                     * Constructs a new Histogram.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @classdesc Represents a Histogram.\n                     * @implements IHistogram\n                     * @constructor\n                     * @param {opentelemetry.proto.metrics.v1.IHistogram=} [properties] Properties to set\n                     */\n                    function Histogram(properties) {\n                        this.dataPoints = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * Histogram dataPoints.\n                     * @member {Array.<opentelemetry.proto.metrics.v1.IHistogramDataPoint>} dataPoints\n                     * @memberof opentelemetry.proto.metrics.v1.Histogram\n                     * @instance\n                     */\n                    Histogram.prototype.dataPoints = $util.emptyArray;\n\n                    /**\n                     * Histogram aggregationTemporality.\n                     * @member {opentelemetry.proto.metrics.v1.AggregationTemporality|null|undefined} aggregationTemporality\n                     * @memberof opentelemetry.proto.metrics.v1.Histogram\n                     * @instance\n                     */\n                    Histogram.prototype.aggregationTemporality = null;\n\n                    /**\n                     * Creates a new Histogram instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.metrics.v1.Histogram\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IHistogram=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.metrics.v1.Histogram} Histogram instance\n                     */\n                    Histogram.create = function create(properties) {\n                        return new Histogram(properties);\n                    };\n\n                    /**\n                     * Encodes the specified Histogram message. Does not implicitly {@link opentelemetry.proto.metrics.v1.Histogram.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.metrics.v1.Histogram\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IHistogram} message Histogram message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    Histogram.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.dataPoints != null && message.dataPoints.length)\n                            for (var i = 0; i < message.dataPoints.length; ++i)\n                                $root.opentelemetry.proto.metrics.v1.HistogramDataPoint.encode(message.dataPoints[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                        if (message.aggregationTemporality != null && Object.hasOwnProperty.call(message, \"aggregationTemporality\"))\n                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.aggregationTemporality);\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified Histogram message, length delimited. Does not implicitly {@link opentelemetry.proto.metrics.v1.Histogram.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.Histogram\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IHistogram} message Histogram message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    Histogram.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes a Histogram message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.metrics.v1.Histogram\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.metrics.v1.Histogram} Histogram\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    Histogram.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.metrics.v1.Histogram();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 1: {\n                                    if (!(message.dataPoints && message.dataPoints.length))\n                                        message.dataPoints = [];\n                                    message.dataPoints.push($root.opentelemetry.proto.metrics.v1.HistogramDataPoint.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                            case 2: {\n                                    message.aggregationTemporality = reader.int32();\n                                    break;\n                                }\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes a Histogram message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.Histogram\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.metrics.v1.Histogram} Histogram\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    Histogram.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies a Histogram message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.metrics.v1.Histogram\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    Histogram.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.dataPoints != null && message.hasOwnProperty(\"dataPoints\")) {\n                            if (!Array.isArray(message.dataPoints))\n                                return \"dataPoints: array expected\";\n                            for (var i = 0; i < message.dataPoints.length; ++i) {\n                                var error = $root.opentelemetry.proto.metrics.v1.HistogramDataPoint.verify(message.dataPoints[i]);\n                                if (error)\n                                    return \"dataPoints.\" + error;\n                            }\n                        }\n                        if (message.aggregationTemporality != null && message.hasOwnProperty(\"aggregationTemporality\"))\n                            switch (message.aggregationTemporality) {\n                            default:\n                                return \"aggregationTemporality: enum value expected\";\n                            case 0:\n                            case 1:\n                            case 2:\n                                break;\n                            }\n                        return null;\n                    };\n\n                    /**\n                     * Creates a Histogram message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.metrics.v1.Histogram\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.metrics.v1.Histogram} Histogram\n                     */\n                    Histogram.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.metrics.v1.Histogram)\n                            return object;\n                        var message = new $root.opentelemetry.proto.metrics.v1.Histogram();\n                        if (object.dataPoints) {\n                            if (!Array.isArray(object.dataPoints))\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.Histogram.dataPoints: array expected\");\n                            message.dataPoints = [];\n                            for (var i = 0; i < object.dataPoints.length; ++i) {\n                                if (typeof object.dataPoints[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.metrics.v1.Histogram.dataPoints: object expected\");\n                                message.dataPoints[i] = $root.opentelemetry.proto.metrics.v1.HistogramDataPoint.fromObject(object.dataPoints[i]);\n                            }\n                        }\n                        switch (object.aggregationTemporality) {\n                        default:\n                            if (typeof object.aggregationTemporality === \"number\") {\n                                message.aggregationTemporality = object.aggregationTemporality;\n                                break;\n                            }\n                            break;\n                        case \"AGGREGATION_TEMPORALITY_UNSPECIFIED\":\n                        case 0:\n                            message.aggregationTemporality = 0;\n                            break;\n                        case \"AGGREGATION_TEMPORALITY_DELTA\":\n                        case 1:\n                            message.aggregationTemporality = 1;\n                            break;\n                        case \"AGGREGATION_TEMPORALITY_CUMULATIVE\":\n                        case 2:\n                            message.aggregationTemporality = 2;\n                            break;\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from a Histogram message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.metrics.v1.Histogram\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.Histogram} message Histogram\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    Histogram.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults)\n                            object.dataPoints = [];\n                        if (options.defaults)\n                            object.aggregationTemporality = options.enums === String ? \"AGGREGATION_TEMPORALITY_UNSPECIFIED\" : 0;\n                        if (message.dataPoints && message.dataPoints.length) {\n                            object.dataPoints = [];\n                            for (var j = 0; j < message.dataPoints.length; ++j)\n                                object.dataPoints[j] = $root.opentelemetry.proto.metrics.v1.HistogramDataPoint.toObject(message.dataPoints[j], options);\n                        }\n                        if (message.aggregationTemporality != null && message.hasOwnProperty(\"aggregationTemporality\"))\n                            object.aggregationTemporality = options.enums === String ? $root.opentelemetry.proto.metrics.v1.AggregationTemporality[message.aggregationTemporality] === undefined ? message.aggregationTemporality : $root.opentelemetry.proto.metrics.v1.AggregationTemporality[message.aggregationTemporality] : message.aggregationTemporality;\n                        return object;\n                    };\n\n                    /**\n                     * Converts this Histogram to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.metrics.v1.Histogram\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    Histogram.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    /**\n                     * Gets the default type url for Histogram\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.metrics.v1.Histogram\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    Histogram.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.metrics.v1.Histogram\";\n                    };\n\n                    return Histogram;\n                })();\n\n                v1.ExponentialHistogram = (function() {\n\n                    /**\n                     * Properties of an ExponentialHistogram.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @interface IExponentialHistogram\n                     * @property {Array.<opentelemetry.proto.metrics.v1.IExponentialHistogramDataPoint>|null} [dataPoints] ExponentialHistogram dataPoints\n                     * @property {opentelemetry.proto.metrics.v1.AggregationTemporality|null} [aggregationTemporality] ExponentialHistogram aggregationTemporality\n                     */\n\n                    /**\n                     * Constructs a new ExponentialHistogram.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @classdesc Represents an ExponentialHistogram.\n                     * @implements IExponentialHistogram\n                     * @constructor\n                     * @param {opentelemetry.proto.metrics.v1.IExponentialHistogram=} [properties] Properties to set\n                     */\n                    function ExponentialHistogram(properties) {\n                        this.dataPoints = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * ExponentialHistogram dataPoints.\n                     * @member {Array.<opentelemetry.proto.metrics.v1.IExponentialHistogramDataPoint>} dataPoints\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogram\n                     * @instance\n                     */\n                    ExponentialHistogram.prototype.dataPoints = $util.emptyArray;\n\n                    /**\n                     * ExponentialHistogram aggregationTemporality.\n                     * @member {opentelemetry.proto.metrics.v1.AggregationTemporality|null|undefined} aggregationTemporality\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogram\n                     * @instance\n                     */\n                    ExponentialHistogram.prototype.aggregationTemporality = null;\n\n                    /**\n                     * Creates a new ExponentialHistogram instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogram\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IExponentialHistogram=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.metrics.v1.ExponentialHistogram} ExponentialHistogram instance\n                     */\n                    ExponentialHistogram.create = function create(properties) {\n                        return new ExponentialHistogram(properties);\n                    };\n\n                    /**\n                     * Encodes the specified ExponentialHistogram message. Does not implicitly {@link opentelemetry.proto.metrics.v1.ExponentialHistogram.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogram\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IExponentialHistogram} message ExponentialHistogram message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    ExponentialHistogram.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.dataPoints != null && message.dataPoints.length)\n                            for (var i = 0; i < message.dataPoints.length; ++i)\n                                $root.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.encode(message.dataPoints[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                        if (message.aggregationTemporality != null && Object.hasOwnProperty.call(message, \"aggregationTemporality\"))\n                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.aggregationTemporality);\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified ExponentialHistogram message, length delimited. Does not implicitly {@link opentelemetry.proto.metrics.v1.ExponentialHistogram.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogram\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IExponentialHistogram} message ExponentialHistogram message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    ExponentialHistogram.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes an ExponentialHistogram message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogram\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.metrics.v1.ExponentialHistogram} ExponentialHistogram\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    ExponentialHistogram.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.metrics.v1.ExponentialHistogram();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 1: {\n                                    if (!(message.dataPoints && message.dataPoints.length))\n                                        message.dataPoints = [];\n                                    message.dataPoints.push($root.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                            case 2: {\n                                    message.aggregationTemporality = reader.int32();\n                                    break;\n                                }\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes an ExponentialHistogram message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogram\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.metrics.v1.ExponentialHistogram} ExponentialHistogram\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    ExponentialHistogram.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies an ExponentialHistogram message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogram\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    ExponentialHistogram.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.dataPoints != null && message.hasOwnProperty(\"dataPoints\")) {\n                            if (!Array.isArray(message.dataPoints))\n                                return \"dataPoints: array expected\";\n                            for (var i = 0; i < message.dataPoints.length; ++i) {\n                                var error = $root.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.verify(message.dataPoints[i]);\n                                if (error)\n                                    return \"dataPoints.\" + error;\n                            }\n                        }\n                        if (message.aggregationTemporality != null && message.hasOwnProperty(\"aggregationTemporality\"))\n                            switch (message.aggregationTemporality) {\n                            default:\n                                return \"aggregationTemporality: enum value expected\";\n                            case 0:\n                            case 1:\n                            case 2:\n                                break;\n                            }\n                        return null;\n                    };\n\n                    /**\n                     * Creates an ExponentialHistogram message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogram\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.metrics.v1.ExponentialHistogram} ExponentialHistogram\n                     */\n                    ExponentialHistogram.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.metrics.v1.ExponentialHistogram)\n                            return object;\n                        var message = new $root.opentelemetry.proto.metrics.v1.ExponentialHistogram();\n                        if (object.dataPoints) {\n                            if (!Array.isArray(object.dataPoints))\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.ExponentialHistogram.dataPoints: array expected\");\n                            message.dataPoints = [];\n                            for (var i = 0; i < object.dataPoints.length; ++i) {\n                                if (typeof object.dataPoints[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.metrics.v1.ExponentialHistogram.dataPoints: object expected\");\n                                message.dataPoints[i] = $root.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.fromObject(object.dataPoints[i]);\n                            }\n                        }\n                        switch (object.aggregationTemporality) {\n                        default:\n                            if (typeof object.aggregationTemporality === \"number\") {\n                                message.aggregationTemporality = object.aggregationTemporality;\n                                break;\n                            }\n                            break;\n                        case \"AGGREGATION_TEMPORALITY_UNSPECIFIED\":\n                        case 0:\n                            message.aggregationTemporality = 0;\n                            break;\n                        case \"AGGREGATION_TEMPORALITY_DELTA\":\n                        case 1:\n                            message.aggregationTemporality = 1;\n                            break;\n                        case \"AGGREGATION_TEMPORALITY_CUMULATIVE\":\n                        case 2:\n                            message.aggregationTemporality = 2;\n                            break;\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from an ExponentialHistogram message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogram\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.ExponentialHistogram} message ExponentialHistogram\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    ExponentialHistogram.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults)\n                            object.dataPoints = [];\n                        if (options.defaults)\n                            object.aggregationTemporality = options.enums === String ? \"AGGREGATION_TEMPORALITY_UNSPECIFIED\" : 0;\n                        if (message.dataPoints && message.dataPoints.length) {\n                            object.dataPoints = [];\n                            for (var j = 0; j < message.dataPoints.length; ++j)\n                                object.dataPoints[j] = $root.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.toObject(message.dataPoints[j], options);\n                        }\n                        if (message.aggregationTemporality != null && message.hasOwnProperty(\"aggregationTemporality\"))\n                            object.aggregationTemporality = options.enums === String ? $root.opentelemetry.proto.metrics.v1.AggregationTemporality[message.aggregationTemporality] === undefined ? message.aggregationTemporality : $root.opentelemetry.proto.metrics.v1.AggregationTemporality[message.aggregationTemporality] : message.aggregationTemporality;\n                        return object;\n                    };\n\n                    /**\n                     * Converts this ExponentialHistogram to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogram\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    ExponentialHistogram.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    /**\n                     * Gets the default type url for ExponentialHistogram\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogram\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    ExponentialHistogram.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.metrics.v1.ExponentialHistogram\";\n                    };\n\n                    return ExponentialHistogram;\n                })();\n\n                v1.Summary = (function() {\n\n                    /**\n                     * Properties of a Summary.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @interface ISummary\n                     * @property {Array.<opentelemetry.proto.metrics.v1.ISummaryDataPoint>|null} [dataPoints] Summary dataPoints\n                     */\n\n                    /**\n                     * Constructs a new Summary.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @classdesc Represents a Summary.\n                     * @implements ISummary\n                     * @constructor\n                     * @param {opentelemetry.proto.metrics.v1.ISummary=} [properties] Properties to set\n                     */\n                    function Summary(properties) {\n                        this.dataPoints = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * Summary dataPoints.\n                     * @member {Array.<opentelemetry.proto.metrics.v1.ISummaryDataPoint>} dataPoints\n                     * @memberof opentelemetry.proto.metrics.v1.Summary\n                     * @instance\n                     */\n                    Summary.prototype.dataPoints = $util.emptyArray;\n\n                    /**\n                     * Creates a new Summary instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.metrics.v1.Summary\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.ISummary=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.metrics.v1.Summary} Summary instance\n                     */\n                    Summary.create = function create(properties) {\n                        return new Summary(properties);\n                    };\n\n                    /**\n                     * Encodes the specified Summary message. Does not implicitly {@link opentelemetry.proto.metrics.v1.Summary.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.metrics.v1.Summary\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.ISummary} message Summary message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    Summary.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.dataPoints != null && message.dataPoints.length)\n                            for (var i = 0; i < message.dataPoints.length; ++i)\n                                $root.opentelemetry.proto.metrics.v1.SummaryDataPoint.encode(message.dataPoints[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified Summary message, length delimited. Does not implicitly {@link opentelemetry.proto.metrics.v1.Summary.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.Summary\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.ISummary} message Summary message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    Summary.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes a Summary message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.metrics.v1.Summary\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.metrics.v1.Summary} Summary\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    Summary.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.metrics.v1.Summary();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 1: {\n                                    if (!(message.dataPoints && message.dataPoints.length))\n                                        message.dataPoints = [];\n                                    message.dataPoints.push($root.opentelemetry.proto.metrics.v1.SummaryDataPoint.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes a Summary message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.Summary\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.metrics.v1.Summary} Summary\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    Summary.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies a Summary message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.metrics.v1.Summary\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    Summary.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.dataPoints != null && message.hasOwnProperty(\"dataPoints\")) {\n                            if (!Array.isArray(message.dataPoints))\n                                return \"dataPoints: array expected\";\n                            for (var i = 0; i < message.dataPoints.length; ++i) {\n                                var error = $root.opentelemetry.proto.metrics.v1.SummaryDataPoint.verify(message.dataPoints[i]);\n                                if (error)\n                                    return \"dataPoints.\" + error;\n                            }\n                        }\n                        return null;\n                    };\n\n                    /**\n                     * Creates a Summary message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.metrics.v1.Summary\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.metrics.v1.Summary} Summary\n                     */\n                    Summary.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.metrics.v1.Summary)\n                            return object;\n                        var message = new $root.opentelemetry.proto.metrics.v1.Summary();\n                        if (object.dataPoints) {\n                            if (!Array.isArray(object.dataPoints))\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.Summary.dataPoints: array expected\");\n                            message.dataPoints = [];\n                            for (var i = 0; i < object.dataPoints.length; ++i) {\n                                if (typeof object.dataPoints[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.metrics.v1.Summary.dataPoints: object expected\");\n                                message.dataPoints[i] = $root.opentelemetry.proto.metrics.v1.SummaryDataPoint.fromObject(object.dataPoints[i]);\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from a Summary message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.metrics.v1.Summary\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.Summary} message Summary\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    Summary.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults)\n                            object.dataPoints = [];\n                        if (message.dataPoints && message.dataPoints.length) {\n                            object.dataPoints = [];\n                            for (var j = 0; j < message.dataPoints.length; ++j)\n                                object.dataPoints[j] = $root.opentelemetry.proto.metrics.v1.SummaryDataPoint.toObject(message.dataPoints[j], options);\n                        }\n                        return object;\n                    };\n\n                    /**\n                     * Converts this Summary to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.metrics.v1.Summary\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    Summary.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    /**\n                     * Gets the default type url for Summary\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.metrics.v1.Summary\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    Summary.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.metrics.v1.Summary\";\n                    };\n\n                    return Summary;\n                })();\n\n                /**\n                 * AggregationTemporality enum.\n                 * @name opentelemetry.proto.metrics.v1.AggregationTemporality\n                 * @enum {number}\n                 * @property {number} AGGREGATION_TEMPORALITY_UNSPECIFIED=0 AGGREGATION_TEMPORALITY_UNSPECIFIED value\n                 * @property {number} AGGREGATION_TEMPORALITY_DELTA=1 AGGREGATION_TEMPORALITY_DELTA value\n                 * @property {number} AGGREGATION_TEMPORALITY_CUMULATIVE=2 AGGREGATION_TEMPORALITY_CUMULATIVE value\n                 */\n                v1.AggregationTemporality = (function() {\n                    var valuesById = {}, values = Object.create(valuesById);\n                    values[valuesById[0] = \"AGGREGATION_TEMPORALITY_UNSPECIFIED\"] = 0;\n                    values[valuesById[1] = \"AGGREGATION_TEMPORALITY_DELTA\"] = 1;\n                    values[valuesById[2] = \"AGGREGATION_TEMPORALITY_CUMULATIVE\"] = 2;\n                    return values;\n                })();\n\n                /**\n                 * DataPointFlags enum.\n                 * @name opentelemetry.proto.metrics.v1.DataPointFlags\n                 * @enum {number}\n                 * @property {number} DATA_POINT_FLAGS_DO_NOT_USE=0 DATA_POINT_FLAGS_DO_NOT_USE value\n                 * @property {number} DATA_POINT_FLAGS_NO_RECORDED_VALUE_MASK=1 DATA_POINT_FLAGS_NO_RECORDED_VALUE_MASK value\n                 */\n                v1.DataPointFlags = (function() {\n                    var valuesById = {}, values = Object.create(valuesById);\n                    values[valuesById[0] = \"DATA_POINT_FLAGS_DO_NOT_USE\"] = 0;\n                    values[valuesById[1] = \"DATA_POINT_FLAGS_NO_RECORDED_VALUE_MASK\"] = 1;\n                    return values;\n                })();\n\n                v1.NumberDataPoint = (function() {\n\n                    /**\n                     * Properties of a NumberDataPoint.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @interface INumberDataPoint\n                     * @property {Array.<opentelemetry.proto.common.v1.IKeyValue>|null} [attributes] NumberDataPoint attributes\n                     * @property {number|Long|null} [startTimeUnixNano] NumberDataPoint startTimeUnixNano\n                     * @property {number|Long|null} [timeUnixNano] NumberDataPoint timeUnixNano\n                     * @property {number|null} [asDouble] NumberDataPoint asDouble\n                     * @property {number|Long|null} [asInt] NumberDataPoint asInt\n                     * @property {Array.<opentelemetry.proto.metrics.v1.IExemplar>|null} [exemplars] NumberDataPoint exemplars\n                     * @property {number|null} [flags] NumberDataPoint flags\n                     */\n\n                    /**\n                     * Constructs a new NumberDataPoint.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @classdesc Represents a NumberDataPoint.\n                     * @implements INumberDataPoint\n                     * @constructor\n                     * @param {opentelemetry.proto.metrics.v1.INumberDataPoint=} [properties] Properties to set\n                     */\n                    function NumberDataPoint(properties) {\n                        this.attributes = [];\n                        this.exemplars = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * NumberDataPoint attributes.\n                     * @member {Array.<opentelemetry.proto.common.v1.IKeyValue>} attributes\n                     * @memberof opentelemetry.proto.metrics.v1.NumberDataPoint\n                     * @instance\n                     */\n                    NumberDataPoint.prototype.attributes = $util.emptyArray;\n\n                    /**\n                     * NumberDataPoint startTimeUnixNano.\n                     * @member {number|Long|null|undefined} startTimeUnixNano\n                     * @memberof opentelemetry.proto.metrics.v1.NumberDataPoint\n                     * @instance\n                     */\n                    NumberDataPoint.prototype.startTimeUnixNano = null;\n\n                    /**\n                     * NumberDataPoint timeUnixNano.\n                     * @member {number|Long|null|undefined} timeUnixNano\n                     * @memberof opentelemetry.proto.metrics.v1.NumberDataPoint\n                     * @instance\n                     */\n                    NumberDataPoint.prototype.timeUnixNano = null;\n\n                    /**\n                     * NumberDataPoint asDouble.\n                     * @member {number|null|undefined} asDouble\n                     * @memberof opentelemetry.proto.metrics.v1.NumberDataPoint\n                     * @instance\n                     */\n                    NumberDataPoint.prototype.asDouble = null;\n\n                    /**\n                     * NumberDataPoint asInt.\n                     * @member {number|Long|null|undefined} asInt\n                     * @memberof opentelemetry.proto.metrics.v1.NumberDataPoint\n                     * @instance\n                     */\n                    NumberDataPoint.prototype.asInt = null;\n\n                    /**\n                     * NumberDataPoint exemplars.\n                     * @member {Array.<opentelemetry.proto.metrics.v1.IExemplar>} exemplars\n                     * @memberof opentelemetry.proto.metrics.v1.NumberDataPoint\n                     * @instance\n                     */\n                    NumberDataPoint.prototype.exemplars = $util.emptyArray;\n\n                    /**\n                     * NumberDataPoint flags.\n                     * @member {number|null|undefined} flags\n                     * @memberof opentelemetry.proto.metrics.v1.NumberDataPoint\n                     * @instance\n                     */\n                    NumberDataPoint.prototype.flags = null;\n\n                    // OneOf field names bound to virtual getters and setters\n                    var $oneOfFields;\n\n                    /**\n                     * NumberDataPoint value.\n                     * @member {\"asDouble\"|\"asInt\"|undefined} value\n                     * @memberof opentelemetry.proto.metrics.v1.NumberDataPoint\n                     * @instance\n                     */\n                    Object.defineProperty(NumberDataPoint.prototype, \"value\", {\n                        get: $util.oneOfGetter($oneOfFields = [\"asDouble\", \"asInt\"]),\n                        set: $util.oneOfSetter($oneOfFields)\n                    });\n\n                    /**\n                     * Creates a new NumberDataPoint instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.metrics.v1.NumberDataPoint\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.INumberDataPoint=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.metrics.v1.NumberDataPoint} NumberDataPoint instance\n                     */\n                    NumberDataPoint.create = function create(properties) {\n                        return new NumberDataPoint(properties);\n                    };\n\n                    /**\n                     * Encodes the specified NumberDataPoint message. Does not implicitly {@link opentelemetry.proto.metrics.v1.NumberDataPoint.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.metrics.v1.NumberDataPoint\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.INumberDataPoint} message NumberDataPoint message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    NumberDataPoint.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.startTimeUnixNano != null && Object.hasOwnProperty.call(message, \"startTimeUnixNano\"))\n                            writer.uint32(/* id 2, wireType 1 =*/17).fixed64(message.startTimeUnixNano);\n                        if (message.timeUnixNano != null && Object.hasOwnProperty.call(message, \"timeUnixNano\"))\n                            writer.uint32(/* id 3, wireType 1 =*/25).fixed64(message.timeUnixNano);\n                        if (message.asDouble != null && Object.hasOwnProperty.call(message, \"asDouble\"))\n                            writer.uint32(/* id 4, wireType 1 =*/33).double(message.asDouble);\n                        if (message.exemplars != null && message.exemplars.length)\n                            for (var i = 0; i < message.exemplars.length; ++i)\n                                $root.opentelemetry.proto.metrics.v1.Exemplar.encode(message.exemplars[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n                        if (message.asInt != null && Object.hasOwnProperty.call(message, \"asInt\"))\n                            writer.uint32(/* id 6, wireType 1 =*/49).sfixed64(message.asInt);\n                        if (message.attributes != null && message.attributes.length)\n                            for (var i = 0; i < message.attributes.length; ++i)\n                                $root.opentelemetry.proto.common.v1.KeyValue.encode(message.attributes[i], writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();\n                        if (message.flags != null && Object.hasOwnProperty.call(message, \"flags\"))\n                            writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.flags);\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified NumberDataPoint message, length delimited. Does not implicitly {@link opentelemetry.proto.metrics.v1.NumberDataPoint.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.NumberDataPoint\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.INumberDataPoint} message NumberDataPoint message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    NumberDataPoint.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes a NumberDataPoint message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.metrics.v1.NumberDataPoint\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.metrics.v1.NumberDataPoint} NumberDataPoint\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    NumberDataPoint.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.metrics.v1.NumberDataPoint();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 7: {\n                                    if (!(message.attributes && message.attributes.length))\n                                        message.attributes = [];\n                                    message.attributes.push($root.opentelemetry.proto.common.v1.KeyValue.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                            case 2: {\n                                    message.startTimeUnixNano = reader.fixed64();\n                                    break;\n                                }\n                            case 3: {\n                                    message.timeUnixNano = reader.fixed64();\n                                    break;\n                                }\n                            case 4: {\n                                    message.asDouble = reader.double();\n                                    break;\n                                }\n                            case 6: {\n                                    message.asInt = reader.sfixed64();\n                                    break;\n                                }\n                            case 5: {\n                                    if (!(message.exemplars && message.exemplars.length))\n                                        message.exemplars = [];\n                                    message.exemplars.push($root.opentelemetry.proto.metrics.v1.Exemplar.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                            case 8: {\n                                    message.flags = reader.uint32();\n                                    break;\n                                }\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes a NumberDataPoint message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.NumberDataPoint\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.metrics.v1.NumberDataPoint} NumberDataPoint\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    NumberDataPoint.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies a NumberDataPoint message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.metrics.v1.NumberDataPoint\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    NumberDataPoint.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        var properties = {};\n                        if (message.attributes != null && message.hasOwnProperty(\"attributes\")) {\n                            if (!Array.isArray(message.attributes))\n                                return \"attributes: array expected\";\n                            for (var i = 0; i < message.attributes.length; ++i) {\n                                var error = $root.opentelemetry.proto.common.v1.KeyValue.verify(message.attributes[i]);\n                                if (error)\n                                    return \"attributes.\" + error;\n                            }\n                        }\n                        if (message.startTimeUnixNano != null && message.hasOwnProperty(\"startTimeUnixNano\"))\n                            if (!$util.isInteger(message.startTimeUnixNano) && !(message.startTimeUnixNano && $util.isInteger(message.startTimeUnixNano.low) && $util.isInteger(message.startTimeUnixNano.high)))\n                                return \"startTimeUnixNano: integer|Long expected\";\n                        if (message.timeUnixNano != null && message.hasOwnProperty(\"timeUnixNano\"))\n                            if (!$util.isInteger(message.timeUnixNano) && !(message.timeUnixNano && $util.isInteger(message.timeUnixNano.low) && $util.isInteger(message.timeUnixNano.high)))\n                                return \"timeUnixNano: integer|Long expected\";\n                        if (message.asDouble != null && message.hasOwnProperty(\"asDouble\")) {\n                            properties.value = 1;\n                            if (typeof message.asDouble !== \"number\")\n                                return \"asDouble: number expected\";\n                        }\n                        if (message.asInt != null && message.hasOwnProperty(\"asInt\")) {\n                            if (properties.value === 1)\n                                return \"value: multiple values\";\n                            properties.value = 1;\n                            if (!$util.isInteger(message.asInt) && !(message.asInt && $util.isInteger(message.asInt.low) && $util.isInteger(message.asInt.high)))\n                                return \"asInt: integer|Long expected\";\n                        }\n                        if (message.exemplars != null && message.hasOwnProperty(\"exemplars\")) {\n                            if (!Array.isArray(message.exemplars))\n                                return \"exemplars: array expected\";\n                            for (var i = 0; i < message.exemplars.length; ++i) {\n                                var error = $root.opentelemetry.proto.metrics.v1.Exemplar.verify(message.exemplars[i]);\n                                if (error)\n                                    return \"exemplars.\" + error;\n                            }\n                        }\n                        if (message.flags != null && message.hasOwnProperty(\"flags\"))\n                            if (!$util.isInteger(message.flags))\n                                return \"flags: integer expected\";\n                        return null;\n                    };\n\n                    /**\n                     * Creates a NumberDataPoint message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.metrics.v1.NumberDataPoint\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.metrics.v1.NumberDataPoint} NumberDataPoint\n                     */\n                    NumberDataPoint.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.metrics.v1.NumberDataPoint)\n                            return object;\n                        var message = new $root.opentelemetry.proto.metrics.v1.NumberDataPoint();\n                        if (object.attributes) {\n                            if (!Array.isArray(object.attributes))\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.NumberDataPoint.attributes: array expected\");\n                            message.attributes = [];\n                            for (var i = 0; i < object.attributes.length; ++i) {\n                                if (typeof object.attributes[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.metrics.v1.NumberDataPoint.attributes: object expected\");\n                                message.attributes[i] = $root.opentelemetry.proto.common.v1.KeyValue.fromObject(object.attributes[i]);\n                            }\n                        }\n                        if (object.startTimeUnixNano != null)\n                            if ($util.Long)\n                                (message.startTimeUnixNano = $util.Long.fromValue(object.startTimeUnixNano)).unsigned = false;\n                            else if (typeof object.startTimeUnixNano === \"string\")\n                                message.startTimeUnixNano = parseInt(object.startTimeUnixNano, 10);\n                            else if (typeof object.startTimeUnixNano === \"number\")\n                                message.startTimeUnixNano = object.startTimeUnixNano;\n                            else if (typeof object.startTimeUnixNano === \"object\")\n                                message.startTimeUnixNano = new $util.LongBits(object.startTimeUnixNano.low >>> 0, object.startTimeUnixNano.high >>> 0).toNumber();\n                        if (object.timeUnixNano != null)\n                            if ($util.Long)\n                                (message.timeUnixNano = $util.Long.fromValue(object.timeUnixNano)).unsigned = false;\n                            else if (typeof object.timeUnixNano === \"string\")\n                                message.timeUnixNano = parseInt(object.timeUnixNano, 10);\n                            else if (typeof object.timeUnixNano === \"number\")\n                                message.timeUnixNano = object.timeUnixNano;\n                            else if (typeof object.timeUnixNano === \"object\")\n                                message.timeUnixNano = new $util.LongBits(object.timeUnixNano.low >>> 0, object.timeUnixNano.high >>> 0).toNumber();\n                        if (object.asDouble != null)\n                            message.asDouble = Number(object.asDouble);\n                        if (object.asInt != null)\n                            if ($util.Long)\n                                (message.asInt = $util.Long.fromValue(object.asInt)).unsigned = false;\n                            else if (typeof object.asInt === \"string\")\n                                message.asInt = parseInt(object.asInt, 10);\n                            else if (typeof object.asInt === \"number\")\n                                message.asInt = object.asInt;\n                            else if (typeof object.asInt === \"object\")\n                                message.asInt = new $util.LongBits(object.asInt.low >>> 0, object.asInt.high >>> 0).toNumber();\n                        if (object.exemplars) {\n                            if (!Array.isArray(object.exemplars))\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.NumberDataPoint.exemplars: array expected\");\n                            message.exemplars = [];\n                            for (var i = 0; i < object.exemplars.length; ++i) {\n                                if (typeof object.exemplars[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.metrics.v1.NumberDataPoint.exemplars: object expected\");\n                                message.exemplars[i] = $root.opentelemetry.proto.metrics.v1.Exemplar.fromObject(object.exemplars[i]);\n                            }\n                        }\n                        if (object.flags != null)\n                            message.flags = object.flags >>> 0;\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from a NumberDataPoint message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.metrics.v1.NumberDataPoint\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.NumberDataPoint} message NumberDataPoint\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    NumberDataPoint.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults) {\n                            object.exemplars = [];\n                            object.attributes = [];\n                        }\n                        if (options.defaults) {\n                            if ($util.Long) {\n                                var long = new $util.Long(0, 0, false);\n                                object.startTimeUnixNano = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                            } else\n                                object.startTimeUnixNano = options.longs === String ? \"0\" : 0;\n                            if ($util.Long) {\n                                var long = new $util.Long(0, 0, false);\n                                object.timeUnixNano = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                            } else\n                                object.timeUnixNano = options.longs === String ? \"0\" : 0;\n                            object.flags = 0;\n                        }\n                        if (message.startTimeUnixNano != null && message.hasOwnProperty(\"startTimeUnixNano\"))\n                            if (typeof message.startTimeUnixNano === \"number\")\n                                object.startTimeUnixNano = options.longs === String ? String(message.startTimeUnixNano) : message.startTimeUnixNano;\n                            else\n                                object.startTimeUnixNano = options.longs === String ? $util.Long.prototype.toString.call(message.startTimeUnixNano) : options.longs === Number ? new $util.LongBits(message.startTimeUnixNano.low >>> 0, message.startTimeUnixNano.high >>> 0).toNumber() : message.startTimeUnixNano;\n                        if (message.timeUnixNano != null && message.hasOwnProperty(\"timeUnixNano\"))\n                            if (typeof message.timeUnixNano === \"number\")\n                                object.timeUnixNano = options.longs === String ? String(message.timeUnixNano) : message.timeUnixNano;\n                            else\n                                object.timeUnixNano = options.longs === String ? $util.Long.prototype.toString.call(message.timeUnixNano) : options.longs === Number ? new $util.LongBits(message.timeUnixNano.low >>> 0, message.timeUnixNano.high >>> 0).toNumber() : message.timeUnixNano;\n                        if (message.asDouble != null && message.hasOwnProperty(\"asDouble\")) {\n                            object.asDouble = options.json && !isFinite(message.asDouble) ? String(message.asDouble) : message.asDouble;\n                            if (options.oneofs)\n                                object.value = \"asDouble\";\n                        }\n                        if (message.exemplars && message.exemplars.length) {\n                            object.exemplars = [];\n                            for (var j = 0; j < message.exemplars.length; ++j)\n                                object.exemplars[j] = $root.opentelemetry.proto.metrics.v1.Exemplar.toObject(message.exemplars[j], options);\n                        }\n                        if (message.asInt != null && message.hasOwnProperty(\"asInt\")) {\n                            if (typeof message.asInt === \"number\")\n                                object.asInt = options.longs === String ? String(message.asInt) : message.asInt;\n                            else\n                                object.asInt = options.longs === String ? $util.Long.prototype.toString.call(message.asInt) : options.longs === Number ? new $util.LongBits(message.asInt.low >>> 0, message.asInt.high >>> 0).toNumber() : message.asInt;\n                            if (options.oneofs)\n                                object.value = \"asInt\";\n                        }\n                        if (message.attributes && message.attributes.length) {\n                            object.attributes = [];\n                            for (var j = 0; j < message.attributes.length; ++j)\n                                object.attributes[j] = $root.opentelemetry.proto.common.v1.KeyValue.toObject(message.attributes[j], options);\n                        }\n                        if (message.flags != null && message.hasOwnProperty(\"flags\"))\n                            object.flags = message.flags;\n                        return object;\n                    };\n\n                    /**\n                     * Converts this NumberDataPoint to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.metrics.v1.NumberDataPoint\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    NumberDataPoint.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    /**\n                     * Gets the default type url for NumberDataPoint\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.metrics.v1.NumberDataPoint\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    NumberDataPoint.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.metrics.v1.NumberDataPoint\";\n                    };\n\n                    return NumberDataPoint;\n                })();\n\n                v1.HistogramDataPoint = (function() {\n\n                    /**\n                     * Properties of a HistogramDataPoint.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @interface IHistogramDataPoint\n                     * @property {Array.<opentelemetry.proto.common.v1.IKeyValue>|null} [attributes] HistogramDataPoint attributes\n                     * @property {number|Long|null} [startTimeUnixNano] HistogramDataPoint startTimeUnixNano\n                     * @property {number|Long|null} [timeUnixNano] HistogramDataPoint timeUnixNano\n                     * @property {number|Long|null} [count] HistogramDataPoint count\n                     * @property {number|null} [sum] HistogramDataPoint sum\n                     * @property {Array.<number|Long>|null} [bucketCounts] HistogramDataPoint bucketCounts\n                     * @property {Array.<number>|null} [explicitBounds] HistogramDataPoint explicitBounds\n                     * @property {Array.<opentelemetry.proto.metrics.v1.IExemplar>|null} [exemplars] HistogramDataPoint exemplars\n                     * @property {number|null} [flags] HistogramDataPoint flags\n                     * @property {number|null} [min] HistogramDataPoint min\n                     * @property {number|null} [max] HistogramDataPoint max\n                     */\n\n                    /**\n                     * Constructs a new HistogramDataPoint.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @classdesc Represents a HistogramDataPoint.\n                     * @implements IHistogramDataPoint\n                     * @constructor\n                     * @param {opentelemetry.proto.metrics.v1.IHistogramDataPoint=} [properties] Properties to set\n                     */\n                    function HistogramDataPoint(properties) {\n                        this.attributes = [];\n                        this.bucketCounts = [];\n                        this.explicitBounds = [];\n                        this.exemplars = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * HistogramDataPoint attributes.\n                     * @member {Array.<opentelemetry.proto.common.v1.IKeyValue>} attributes\n                     * @memberof opentelemetry.proto.metrics.v1.HistogramDataPoint\n                     * @instance\n                     */\n                    HistogramDataPoint.prototype.attributes = $util.emptyArray;\n\n                    /**\n                     * HistogramDataPoint startTimeUnixNano.\n                     * @member {number|Long|null|undefined} startTimeUnixNano\n                     * @memberof opentelemetry.proto.metrics.v1.HistogramDataPoint\n                     * @instance\n                     */\n                    HistogramDataPoint.prototype.startTimeUnixNano = null;\n\n                    /**\n                     * HistogramDataPoint timeUnixNano.\n                     * @member {number|Long|null|undefined} timeUnixNano\n                     * @memberof opentelemetry.proto.metrics.v1.HistogramDataPoint\n                     * @instance\n                     */\n                    HistogramDataPoint.prototype.timeUnixNano = null;\n\n                    /**\n                     * HistogramDataPoint count.\n                     * @member {number|Long|null|undefined} count\n                     * @memberof opentelemetry.proto.metrics.v1.HistogramDataPoint\n                     * @instance\n                     */\n                    HistogramDataPoint.prototype.count = null;\n\n                    /**\n                     * HistogramDataPoint sum.\n                     * @member {number|null|undefined} sum\n                     * @memberof opentelemetry.proto.metrics.v1.HistogramDataPoint\n                     * @instance\n                     */\n                    HistogramDataPoint.prototype.sum = null;\n\n                    /**\n                     * HistogramDataPoint bucketCounts.\n                     * @member {Array.<number|Long>} bucketCounts\n                     * @memberof opentelemetry.proto.metrics.v1.HistogramDataPoint\n                     * @instance\n                     */\n                    HistogramDataPoint.prototype.bucketCounts = $util.emptyArray;\n\n                    /**\n                     * HistogramDataPoint explicitBounds.\n                     * @member {Array.<number>} explicitBounds\n                     * @memberof opentelemetry.proto.metrics.v1.HistogramDataPoint\n                     * @instance\n                     */\n                    HistogramDataPoint.prototype.explicitBounds = $util.emptyArray;\n\n                    /**\n                     * HistogramDataPoint exemplars.\n                     * @member {Array.<opentelemetry.proto.metrics.v1.IExemplar>} exemplars\n                     * @memberof opentelemetry.proto.metrics.v1.HistogramDataPoint\n                     * @instance\n                     */\n                    HistogramDataPoint.prototype.exemplars = $util.emptyArray;\n\n                    /**\n                     * HistogramDataPoint flags.\n                     * @member {number|null|undefined} flags\n                     * @memberof opentelemetry.proto.metrics.v1.HistogramDataPoint\n                     * @instance\n                     */\n                    HistogramDataPoint.prototype.flags = null;\n\n                    /**\n                     * HistogramDataPoint min.\n                     * @member {number|null|undefined} min\n                     * @memberof opentelemetry.proto.metrics.v1.HistogramDataPoint\n                     * @instance\n                     */\n                    HistogramDataPoint.prototype.min = null;\n\n                    /**\n                     * HistogramDataPoint max.\n                     * @member {number|null|undefined} max\n                     * @memberof opentelemetry.proto.metrics.v1.HistogramDataPoint\n                     * @instance\n                     */\n                    HistogramDataPoint.prototype.max = null;\n\n                    // OneOf field names bound to virtual getters and setters\n                    var $oneOfFields;\n\n                    /**\n                     * HistogramDataPoint _sum.\n                     * @member {\"sum\"|undefined} _sum\n                     * @memberof opentelemetry.proto.metrics.v1.HistogramDataPoint\n                     * @instance\n                     */\n                    Object.defineProperty(HistogramDataPoint.prototype, \"_sum\", {\n                        get: $util.oneOfGetter($oneOfFields = [\"sum\"]),\n                        set: $util.oneOfSetter($oneOfFields)\n                    });\n\n                    /**\n                     * HistogramDataPoint _min.\n                     * @member {\"min\"|undefined} _min\n                     * @memberof opentelemetry.proto.metrics.v1.HistogramDataPoint\n                     * @instance\n                     */\n                    Object.defineProperty(HistogramDataPoint.prototype, \"_min\", {\n                        get: $util.oneOfGetter($oneOfFields = [\"min\"]),\n                        set: $util.oneOfSetter($oneOfFields)\n                    });\n\n                    /**\n                     * HistogramDataPoint _max.\n                     * @member {\"max\"|undefined} _max\n                     * @memberof opentelemetry.proto.metrics.v1.HistogramDataPoint\n                     * @instance\n                     */\n                    Object.defineProperty(HistogramDataPoint.prototype, \"_max\", {\n                        get: $util.oneOfGetter($oneOfFields = [\"max\"]),\n                        set: $util.oneOfSetter($oneOfFields)\n                    });\n\n                    /**\n                     * Creates a new HistogramDataPoint instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.metrics.v1.HistogramDataPoint\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IHistogramDataPoint=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.metrics.v1.HistogramDataPoint} HistogramDataPoint instance\n                     */\n                    HistogramDataPoint.create = function create(properties) {\n                        return new HistogramDataPoint(properties);\n                    };\n\n                    /**\n                     * Encodes the specified HistogramDataPoint message. Does not implicitly {@link opentelemetry.proto.metrics.v1.HistogramDataPoint.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.metrics.v1.HistogramDataPoint\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IHistogramDataPoint} message HistogramDataPoint message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    HistogramDataPoint.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.startTimeUnixNano != null && Object.hasOwnProperty.call(message, \"startTimeUnixNano\"))\n                            writer.uint32(/* id 2, wireType 1 =*/17).fixed64(message.startTimeUnixNano);\n                        if (message.timeUnixNano != null && Object.hasOwnProperty.call(message, \"timeUnixNano\"))\n                            writer.uint32(/* id 3, wireType 1 =*/25).fixed64(message.timeUnixNano);\n                        if (message.count != null && Object.hasOwnProperty.call(message, \"count\"))\n                            writer.uint32(/* id 4, wireType 1 =*/33).fixed64(message.count);\n                        if (message.sum != null && Object.hasOwnProperty.call(message, \"sum\"))\n                            writer.uint32(/* id 5, wireType 1 =*/41).double(message.sum);\n                        if (message.bucketCounts != null && message.bucketCounts.length) {\n                            writer.uint32(/* id 6, wireType 2 =*/50).fork();\n                            for (var i = 0; i < message.bucketCounts.length; ++i)\n                                writer.fixed64(message.bucketCounts[i]);\n                            writer.ldelim();\n                        }\n                        if (message.explicitBounds != null && message.explicitBounds.length) {\n                            writer.uint32(/* id 7, wireType 2 =*/58).fork();\n                            for (var i = 0; i < message.explicitBounds.length; ++i)\n                                writer.double(message.explicitBounds[i]);\n                            writer.ldelim();\n                        }\n                        if (message.exemplars != null && message.exemplars.length)\n                            for (var i = 0; i < message.exemplars.length; ++i)\n                                $root.opentelemetry.proto.metrics.v1.Exemplar.encode(message.exemplars[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();\n                        if (message.attributes != null && message.attributes.length)\n                            for (var i = 0; i < message.attributes.length; ++i)\n                                $root.opentelemetry.proto.common.v1.KeyValue.encode(message.attributes[i], writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();\n                        if (message.flags != null && Object.hasOwnProperty.call(message, \"flags\"))\n                            writer.uint32(/* id 10, wireType 0 =*/80).uint32(message.flags);\n                        if (message.min != null && Object.hasOwnProperty.call(message, \"min\"))\n                            writer.uint32(/* id 11, wireType 1 =*/89).double(message.min);\n                        if (message.max != null && Object.hasOwnProperty.call(message, \"max\"))\n                            writer.uint32(/* id 12, wireType 1 =*/97).double(message.max);\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified HistogramDataPoint message, length delimited. Does not implicitly {@link opentelemetry.proto.metrics.v1.HistogramDataPoint.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.HistogramDataPoint\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IHistogramDataPoint} message HistogramDataPoint message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    HistogramDataPoint.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes a HistogramDataPoint message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.metrics.v1.HistogramDataPoint\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.metrics.v1.HistogramDataPoint} HistogramDataPoint\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    HistogramDataPoint.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.metrics.v1.HistogramDataPoint();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 9: {\n                                    if (!(message.attributes && message.attributes.length))\n                                        message.attributes = [];\n                                    message.attributes.push($root.opentelemetry.proto.common.v1.KeyValue.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                            case 2: {\n                                    message.startTimeUnixNano = reader.fixed64();\n                                    break;\n                                }\n                            case 3: {\n                                    message.timeUnixNano = reader.fixed64();\n                                    break;\n                                }\n                            case 4: {\n                                    message.count = reader.fixed64();\n                                    break;\n                                }\n                            case 5: {\n                                    message.sum = reader.double();\n                                    break;\n                                }\n                            case 6: {\n                                    if (!(message.bucketCounts && message.bucketCounts.length))\n                                        message.bucketCounts = [];\n                                    if ((tag & 7) === 2) {\n                                        var end2 = reader.uint32() + reader.pos;\n                                        while (reader.pos < end2)\n                                            message.bucketCounts.push(reader.fixed64());\n                                    } else\n                                        message.bucketCounts.push(reader.fixed64());\n                                    break;\n                                }\n                            case 7: {\n                                    if (!(message.explicitBounds && message.explicitBounds.length))\n                                        message.explicitBounds = [];\n                                    if ((tag & 7) === 2) {\n                                        var end2 = reader.uint32() + reader.pos;\n                                        while (reader.pos < end2)\n                                            message.explicitBounds.push(reader.double());\n                                    } else\n                                        message.explicitBounds.push(reader.double());\n                                    break;\n                                }\n                            case 8: {\n                                    if (!(message.exemplars && message.exemplars.length))\n                                        message.exemplars = [];\n                                    message.exemplars.push($root.opentelemetry.proto.metrics.v1.Exemplar.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                            case 10: {\n                                    message.flags = reader.uint32();\n                                    break;\n                                }\n                            case 11: {\n                                    message.min = reader.double();\n                                    break;\n                                }\n                            case 12: {\n                                    message.max = reader.double();\n                                    break;\n                                }\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes a HistogramDataPoint message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.HistogramDataPoint\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.metrics.v1.HistogramDataPoint} HistogramDataPoint\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    HistogramDataPoint.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies a HistogramDataPoint message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.metrics.v1.HistogramDataPoint\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    HistogramDataPoint.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        var properties = {};\n                        if (message.attributes != null && message.hasOwnProperty(\"attributes\")) {\n                            if (!Array.isArray(message.attributes))\n                                return \"attributes: array expected\";\n                            for (var i = 0; i < message.attributes.length; ++i) {\n                                var error = $root.opentelemetry.proto.common.v1.KeyValue.verify(message.attributes[i]);\n                                if (error)\n                                    return \"attributes.\" + error;\n                            }\n                        }\n                        if (message.startTimeUnixNano != null && message.hasOwnProperty(\"startTimeUnixNano\"))\n                            if (!$util.isInteger(message.startTimeUnixNano) && !(message.startTimeUnixNano && $util.isInteger(message.startTimeUnixNano.low) && $util.isInteger(message.startTimeUnixNano.high)))\n                                return \"startTimeUnixNano: integer|Long expected\";\n                        if (message.timeUnixNano != null && message.hasOwnProperty(\"timeUnixNano\"))\n                            if (!$util.isInteger(message.timeUnixNano) && !(message.timeUnixNano && $util.isInteger(message.timeUnixNano.low) && $util.isInteger(message.timeUnixNano.high)))\n                                return \"timeUnixNano: integer|Long expected\";\n                        if (message.count != null && message.hasOwnProperty(\"count\"))\n                            if (!$util.isInteger(message.count) && !(message.count && $util.isInteger(message.count.low) && $util.isInteger(message.count.high)))\n                                return \"count: integer|Long expected\";\n                        if (message.sum != null && message.hasOwnProperty(\"sum\")) {\n                            properties._sum = 1;\n                            if (typeof message.sum !== \"number\")\n                                return \"sum: number expected\";\n                        }\n                        if (message.bucketCounts != null && message.hasOwnProperty(\"bucketCounts\")) {\n                            if (!Array.isArray(message.bucketCounts))\n                                return \"bucketCounts: array expected\";\n                            for (var i = 0; i < message.bucketCounts.length; ++i)\n                                if (!$util.isInteger(message.bucketCounts[i]) && !(message.bucketCounts[i] && $util.isInteger(message.bucketCounts[i].low) && $util.isInteger(message.bucketCounts[i].high)))\n                                    return \"bucketCounts: integer|Long[] expected\";\n                        }\n                        if (message.explicitBounds != null && message.hasOwnProperty(\"explicitBounds\")) {\n                            if (!Array.isArray(message.explicitBounds))\n                                return \"explicitBounds: array expected\";\n                            for (var i = 0; i < message.explicitBounds.length; ++i)\n                                if (typeof message.explicitBounds[i] !== \"number\")\n                                    return \"explicitBounds: number[] expected\";\n                        }\n                        if (message.exemplars != null && message.hasOwnProperty(\"exemplars\")) {\n                            if (!Array.isArray(message.exemplars))\n                                return \"exemplars: array expected\";\n                            for (var i = 0; i < message.exemplars.length; ++i) {\n                                var error = $root.opentelemetry.proto.metrics.v1.Exemplar.verify(message.exemplars[i]);\n                                if (error)\n                                    return \"exemplars.\" + error;\n                            }\n                        }\n                        if (message.flags != null && message.hasOwnProperty(\"flags\"))\n                            if (!$util.isInteger(message.flags))\n                                return \"flags: integer expected\";\n                        if (message.min != null && message.hasOwnProperty(\"min\")) {\n                            properties._min = 1;\n                            if (typeof message.min !== \"number\")\n                                return \"min: number expected\";\n                        }\n                        if (message.max != null && message.hasOwnProperty(\"max\")) {\n                            properties._max = 1;\n                            if (typeof message.max !== \"number\")\n                                return \"max: number expected\";\n                        }\n                        return null;\n                    };\n\n                    /**\n                     * Creates a HistogramDataPoint message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.metrics.v1.HistogramDataPoint\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.metrics.v1.HistogramDataPoint} HistogramDataPoint\n                     */\n                    HistogramDataPoint.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.metrics.v1.HistogramDataPoint)\n                            return object;\n                        var message = new $root.opentelemetry.proto.metrics.v1.HistogramDataPoint();\n                        if (object.attributes) {\n                            if (!Array.isArray(object.attributes))\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.HistogramDataPoint.attributes: array expected\");\n                            message.attributes = [];\n                            for (var i = 0; i < object.attributes.length; ++i) {\n                                if (typeof object.attributes[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.metrics.v1.HistogramDataPoint.attributes: object expected\");\n                                message.attributes[i] = $root.opentelemetry.proto.common.v1.KeyValue.fromObject(object.attributes[i]);\n                            }\n                        }\n                        if (object.startTimeUnixNano != null)\n                            if ($util.Long)\n                                (message.startTimeUnixNano = $util.Long.fromValue(object.startTimeUnixNano)).unsigned = false;\n                            else if (typeof object.startTimeUnixNano === \"string\")\n                                message.startTimeUnixNano = parseInt(object.startTimeUnixNano, 10);\n                            else if (typeof object.startTimeUnixNano === \"number\")\n                                message.startTimeUnixNano = object.startTimeUnixNano;\n                            else if (typeof object.startTimeUnixNano === \"object\")\n                                message.startTimeUnixNano = new $util.LongBits(object.startTimeUnixNano.low >>> 0, object.startTimeUnixNano.high >>> 0).toNumber();\n                        if (object.timeUnixNano != null)\n                            if ($util.Long)\n                                (message.timeUnixNano = $util.Long.fromValue(object.timeUnixNano)).unsigned = false;\n                            else if (typeof object.timeUnixNano === \"string\")\n                                message.timeUnixNano = parseInt(object.timeUnixNano, 10);\n                            else if (typeof object.timeUnixNano === \"number\")\n                                message.timeUnixNano = object.timeUnixNano;\n                            else if (typeof object.timeUnixNano === \"object\")\n                                message.timeUnixNano = new $util.LongBits(object.timeUnixNano.low >>> 0, object.timeUnixNano.high >>> 0).toNumber();\n                        if (object.count != null)\n                            if ($util.Long)\n                                (message.count = $util.Long.fromValue(object.count)).unsigned = false;\n                            else if (typeof object.count === \"string\")\n                                message.count = parseInt(object.count, 10);\n                            else if (typeof object.count === \"number\")\n                                message.count = object.count;\n                            else if (typeof object.count === \"object\")\n                                message.count = new $util.LongBits(object.count.low >>> 0, object.count.high >>> 0).toNumber();\n                        if (object.sum != null)\n                            message.sum = Number(object.sum);\n                        if (object.bucketCounts) {\n                            if (!Array.isArray(object.bucketCounts))\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.HistogramDataPoint.bucketCounts: array expected\");\n                            message.bucketCounts = [];\n                            for (var i = 0; i < object.bucketCounts.length; ++i)\n                                if ($util.Long)\n                                    (message.bucketCounts[i] = $util.Long.fromValue(object.bucketCounts[i])).unsigned = false;\n                                else if (typeof object.bucketCounts[i] === \"string\")\n                                    message.bucketCounts[i] = parseInt(object.bucketCounts[i], 10);\n                                else if (typeof object.bucketCounts[i] === \"number\")\n                                    message.bucketCounts[i] = object.bucketCounts[i];\n                                else if (typeof object.bucketCounts[i] === \"object\")\n                                    message.bucketCounts[i] = new $util.LongBits(object.bucketCounts[i].low >>> 0, object.bucketCounts[i].high >>> 0).toNumber();\n                        }\n                        if (object.explicitBounds) {\n                            if (!Array.isArray(object.explicitBounds))\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.HistogramDataPoint.explicitBounds: array expected\");\n                            message.explicitBounds = [];\n                            for (var i = 0; i < object.explicitBounds.length; ++i)\n                                message.explicitBounds[i] = Number(object.explicitBounds[i]);\n                        }\n                        if (object.exemplars) {\n                            if (!Array.isArray(object.exemplars))\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.HistogramDataPoint.exemplars: array expected\");\n                            message.exemplars = [];\n                            for (var i = 0; i < object.exemplars.length; ++i) {\n                                if (typeof object.exemplars[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.metrics.v1.HistogramDataPoint.exemplars: object expected\");\n                                message.exemplars[i] = $root.opentelemetry.proto.metrics.v1.Exemplar.fromObject(object.exemplars[i]);\n                            }\n                        }\n                        if (object.flags != null)\n                            message.flags = object.flags >>> 0;\n                        if (object.min != null)\n                            message.min = Number(object.min);\n                        if (object.max != null)\n                            message.max = Number(object.max);\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from a HistogramDataPoint message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.metrics.v1.HistogramDataPoint\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.HistogramDataPoint} message HistogramDataPoint\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    HistogramDataPoint.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults) {\n                            object.bucketCounts = [];\n                            object.explicitBounds = [];\n                            object.exemplars = [];\n                            object.attributes = [];\n                        }\n                        if (options.defaults) {\n                            if ($util.Long) {\n                                var long = new $util.Long(0, 0, false);\n                                object.startTimeUnixNano = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                            } else\n                                object.startTimeUnixNano = options.longs === String ? \"0\" : 0;\n                            if ($util.Long) {\n                                var long = new $util.Long(0, 0, false);\n                                object.timeUnixNano = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                            } else\n                                object.timeUnixNano = options.longs === String ? \"0\" : 0;\n                            if ($util.Long) {\n                                var long = new $util.Long(0, 0, false);\n                                object.count = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                            } else\n                                object.count = options.longs === String ? \"0\" : 0;\n                            object.flags = 0;\n                        }\n                        if (message.startTimeUnixNano != null && message.hasOwnProperty(\"startTimeUnixNano\"))\n                            if (typeof message.startTimeUnixNano === \"number\")\n                                object.startTimeUnixNano = options.longs === String ? String(message.startTimeUnixNano) : message.startTimeUnixNano;\n                            else\n                                object.startTimeUnixNano = options.longs === String ? $util.Long.prototype.toString.call(message.startTimeUnixNano) : options.longs === Number ? new $util.LongBits(message.startTimeUnixNano.low >>> 0, message.startTimeUnixNano.high >>> 0).toNumber() : message.startTimeUnixNano;\n                        if (message.timeUnixNano != null && message.hasOwnProperty(\"timeUnixNano\"))\n                            if (typeof message.timeUnixNano === \"number\")\n                                object.timeUnixNano = options.longs === String ? String(message.timeUnixNano) : message.timeUnixNano;\n                            else\n                                object.timeUnixNano = options.longs === String ? $util.Long.prototype.toString.call(message.timeUnixNano) : options.longs === Number ? new $util.LongBits(message.timeUnixNano.low >>> 0, message.timeUnixNano.high >>> 0).toNumber() : message.timeUnixNano;\n                        if (message.count != null && message.hasOwnProperty(\"count\"))\n                            if (typeof message.count === \"number\")\n                                object.count = options.longs === String ? String(message.count) : message.count;\n                            else\n                                object.count = options.longs === String ? $util.Long.prototype.toString.call(message.count) : options.longs === Number ? new $util.LongBits(message.count.low >>> 0, message.count.high >>> 0).toNumber() : message.count;\n                        if (message.sum != null && message.hasOwnProperty(\"sum\")) {\n                            object.sum = options.json && !isFinite(message.sum) ? String(message.sum) : message.sum;\n                            if (options.oneofs)\n                                object._sum = \"sum\";\n                        }\n                        if (message.bucketCounts && message.bucketCounts.length) {\n                            object.bucketCounts = [];\n                            for (var j = 0; j < message.bucketCounts.length; ++j)\n                                if (typeof message.bucketCounts[j] === \"number\")\n                                    object.bucketCounts[j] = options.longs === String ? String(message.bucketCounts[j]) : message.bucketCounts[j];\n                                else\n                                    object.bucketCounts[j] = options.longs === String ? $util.Long.prototype.toString.call(message.bucketCounts[j]) : options.longs === Number ? new $util.LongBits(message.bucketCounts[j].low >>> 0, message.bucketCounts[j].high >>> 0).toNumber() : message.bucketCounts[j];\n                        }\n                        if (message.explicitBounds && message.explicitBounds.length) {\n                            object.explicitBounds = [];\n                            for (var j = 0; j < message.explicitBounds.length; ++j)\n                                object.explicitBounds[j] = options.json && !isFinite(message.explicitBounds[j]) ? String(message.explicitBounds[j]) : message.explicitBounds[j];\n                        }\n                        if (message.exemplars && message.exemplars.length) {\n                            object.exemplars = [];\n                            for (var j = 0; j < message.exemplars.length; ++j)\n                                object.exemplars[j] = $root.opentelemetry.proto.metrics.v1.Exemplar.toObject(message.exemplars[j], options);\n                        }\n                        if (message.attributes && message.attributes.length) {\n                            object.attributes = [];\n                            for (var j = 0; j < message.attributes.length; ++j)\n                                object.attributes[j] = $root.opentelemetry.proto.common.v1.KeyValue.toObject(message.attributes[j], options);\n                        }\n                        if (message.flags != null && message.hasOwnProperty(\"flags\"))\n                            object.flags = message.flags;\n                        if (message.min != null && message.hasOwnProperty(\"min\")) {\n                            object.min = options.json && !isFinite(message.min) ? String(message.min) : message.min;\n                            if (options.oneofs)\n                                object._min = \"min\";\n                        }\n                        if (message.max != null && message.hasOwnProperty(\"max\")) {\n                            object.max = options.json && !isFinite(message.max) ? String(message.max) : message.max;\n                            if (options.oneofs)\n                                object._max = \"max\";\n                        }\n                        return object;\n                    };\n\n                    /**\n                     * Converts this HistogramDataPoint to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.metrics.v1.HistogramDataPoint\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    HistogramDataPoint.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    /**\n                     * Gets the default type url for HistogramDataPoint\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.metrics.v1.HistogramDataPoint\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    HistogramDataPoint.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.metrics.v1.HistogramDataPoint\";\n                    };\n\n                    return HistogramDataPoint;\n                })();\n\n                v1.ExponentialHistogramDataPoint = (function() {\n\n                    /**\n                     * Properties of an ExponentialHistogramDataPoint.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @interface IExponentialHistogramDataPoint\n                     * @property {Array.<opentelemetry.proto.common.v1.IKeyValue>|null} [attributes] ExponentialHistogramDataPoint attributes\n                     * @property {number|Long|null} [startTimeUnixNano] ExponentialHistogramDataPoint startTimeUnixNano\n                     * @property {number|Long|null} [timeUnixNano] ExponentialHistogramDataPoint timeUnixNano\n                     * @property {number|Long|null} [count] ExponentialHistogramDataPoint count\n                     * @property {number|null} [sum] ExponentialHistogramDataPoint sum\n                     * @property {number|null} [scale] ExponentialHistogramDataPoint scale\n                     * @property {number|Long|null} [zeroCount] ExponentialHistogramDataPoint zeroCount\n                     * @property {opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.IBuckets|null} [positive] ExponentialHistogramDataPoint positive\n                     * @property {opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.IBuckets|null} [negative] ExponentialHistogramDataPoint negative\n                     * @property {number|null} [flags] ExponentialHistogramDataPoint flags\n                     * @property {Array.<opentelemetry.proto.metrics.v1.IExemplar>|null} [exemplars] ExponentialHistogramDataPoint exemplars\n                     * @property {number|null} [min] ExponentialHistogramDataPoint min\n                     * @property {number|null} [max] ExponentialHistogramDataPoint max\n                     * @property {number|null} [zeroThreshold] ExponentialHistogramDataPoint zeroThreshold\n                     */\n\n                    /**\n                     * Constructs a new ExponentialHistogramDataPoint.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @classdesc Represents an ExponentialHistogramDataPoint.\n                     * @implements IExponentialHistogramDataPoint\n                     * @constructor\n                     * @param {opentelemetry.proto.metrics.v1.IExponentialHistogramDataPoint=} [properties] Properties to set\n                     */\n                    function ExponentialHistogramDataPoint(properties) {\n                        this.attributes = [];\n                        this.exemplars = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * ExponentialHistogramDataPoint attributes.\n                     * @member {Array.<opentelemetry.proto.common.v1.IKeyValue>} attributes\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                     * @instance\n                     */\n                    ExponentialHistogramDataPoint.prototype.attributes = $util.emptyArray;\n\n                    /**\n                     * ExponentialHistogramDataPoint startTimeUnixNano.\n                     * @member {number|Long|null|undefined} startTimeUnixNano\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                     * @instance\n                     */\n                    ExponentialHistogramDataPoint.prototype.startTimeUnixNano = null;\n\n                    /**\n                     * ExponentialHistogramDataPoint timeUnixNano.\n                     * @member {number|Long|null|undefined} timeUnixNano\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                     * @instance\n                     */\n                    ExponentialHistogramDataPoint.prototype.timeUnixNano = null;\n\n                    /**\n                     * ExponentialHistogramDataPoint count.\n                     * @member {number|Long|null|undefined} count\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                     * @instance\n                     */\n                    ExponentialHistogramDataPoint.prototype.count = null;\n\n                    /**\n                     * ExponentialHistogramDataPoint sum.\n                     * @member {number|null|undefined} sum\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                     * @instance\n                     */\n                    ExponentialHistogramDataPoint.prototype.sum = null;\n\n                    /**\n                     * ExponentialHistogramDataPoint scale.\n                     * @member {number|null|undefined} scale\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                     * @instance\n                     */\n                    ExponentialHistogramDataPoint.prototype.scale = null;\n\n                    /**\n                     * ExponentialHistogramDataPoint zeroCount.\n                     * @member {number|Long|null|undefined} zeroCount\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                     * @instance\n                     */\n                    ExponentialHistogramDataPoint.prototype.zeroCount = null;\n\n                    /**\n                     * ExponentialHistogramDataPoint positive.\n                     * @member {opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.IBuckets|null|undefined} positive\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                     * @instance\n                     */\n                    ExponentialHistogramDataPoint.prototype.positive = null;\n\n                    /**\n                     * ExponentialHistogramDataPoint negative.\n                     * @member {opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.IBuckets|null|undefined} negative\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                     * @instance\n                     */\n                    ExponentialHistogramDataPoint.prototype.negative = null;\n\n                    /**\n                     * ExponentialHistogramDataPoint flags.\n                     * @member {number|null|undefined} flags\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                     * @instance\n                     */\n                    ExponentialHistogramDataPoint.prototype.flags = null;\n\n                    /**\n                     * ExponentialHistogramDataPoint exemplars.\n                     * @member {Array.<opentelemetry.proto.metrics.v1.IExemplar>} exemplars\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                     * @instance\n                     */\n                    ExponentialHistogramDataPoint.prototype.exemplars = $util.emptyArray;\n\n                    /**\n                     * ExponentialHistogramDataPoint min.\n                     * @member {number|null|undefined} min\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                     * @instance\n                     */\n                    ExponentialHistogramDataPoint.prototype.min = null;\n\n                    /**\n                     * ExponentialHistogramDataPoint max.\n                     * @member {number|null|undefined} max\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                     * @instance\n                     */\n                    ExponentialHistogramDataPoint.prototype.max = null;\n\n                    /**\n                     * ExponentialHistogramDataPoint zeroThreshold.\n                     * @member {number|null|undefined} zeroThreshold\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                     * @instance\n                     */\n                    ExponentialHistogramDataPoint.prototype.zeroThreshold = null;\n\n                    // OneOf field names bound to virtual getters and setters\n                    var $oneOfFields;\n\n                    /**\n                     * ExponentialHistogramDataPoint _sum.\n                     * @member {\"sum\"|undefined} _sum\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                     * @instance\n                     */\n                    Object.defineProperty(ExponentialHistogramDataPoint.prototype, \"_sum\", {\n                        get: $util.oneOfGetter($oneOfFields = [\"sum\"]),\n                        set: $util.oneOfSetter($oneOfFields)\n                    });\n\n                    /**\n                     * ExponentialHistogramDataPoint _min.\n                     * @member {\"min\"|undefined} _min\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                     * @instance\n                     */\n                    Object.defineProperty(ExponentialHistogramDataPoint.prototype, \"_min\", {\n                        get: $util.oneOfGetter($oneOfFields = [\"min\"]),\n                        set: $util.oneOfSetter($oneOfFields)\n                    });\n\n                    /**\n                     * ExponentialHistogramDataPoint _max.\n                     * @member {\"max\"|undefined} _max\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                     * @instance\n                     */\n                    Object.defineProperty(ExponentialHistogramDataPoint.prototype, \"_max\", {\n                        get: $util.oneOfGetter($oneOfFields = [\"max\"]),\n                        set: $util.oneOfSetter($oneOfFields)\n                    });\n\n                    /**\n                     * Creates a new ExponentialHistogramDataPoint instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IExponentialHistogramDataPoint=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint} ExponentialHistogramDataPoint instance\n                     */\n                    ExponentialHistogramDataPoint.create = function create(properties) {\n                        return new ExponentialHistogramDataPoint(properties);\n                    };\n\n                    /**\n                     * Encodes the specified ExponentialHistogramDataPoint message. Does not implicitly {@link opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IExponentialHistogramDataPoint} message ExponentialHistogramDataPoint message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    ExponentialHistogramDataPoint.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.attributes != null && message.attributes.length)\n                            for (var i = 0; i < message.attributes.length; ++i)\n                                $root.opentelemetry.proto.common.v1.KeyValue.encode(message.attributes[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                        if (message.startTimeUnixNano != null && Object.hasOwnProperty.call(message, \"startTimeUnixNano\"))\n                            writer.uint32(/* id 2, wireType 1 =*/17).fixed64(message.startTimeUnixNano);\n                        if (message.timeUnixNano != null && Object.hasOwnProperty.call(message, \"timeUnixNano\"))\n                            writer.uint32(/* id 3, wireType 1 =*/25).fixed64(message.timeUnixNano);\n                        if (message.count != null && Object.hasOwnProperty.call(message, \"count\"))\n                            writer.uint32(/* id 4, wireType 1 =*/33).fixed64(message.count);\n                        if (message.sum != null && Object.hasOwnProperty.call(message, \"sum\"))\n                            writer.uint32(/* id 5, wireType 1 =*/41).double(message.sum);\n                        if (message.scale != null && Object.hasOwnProperty.call(message, \"scale\"))\n                            writer.uint32(/* id 6, wireType 0 =*/48).sint32(message.scale);\n                        if (message.zeroCount != null && Object.hasOwnProperty.call(message, \"zeroCount\"))\n                            writer.uint32(/* id 7, wireType 1 =*/57).fixed64(message.zeroCount);\n                        if (message.positive != null && Object.hasOwnProperty.call(message, \"positive\"))\n                            $root.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets.encode(message.positive, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();\n                        if (message.negative != null && Object.hasOwnProperty.call(message, \"negative\"))\n                            $root.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets.encode(message.negative, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();\n                        if (message.flags != null && Object.hasOwnProperty.call(message, \"flags\"))\n                            writer.uint32(/* id 10, wireType 0 =*/80).uint32(message.flags);\n                        if (message.exemplars != null && message.exemplars.length)\n                            for (var i = 0; i < message.exemplars.length; ++i)\n                                $root.opentelemetry.proto.metrics.v1.Exemplar.encode(message.exemplars[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n                        if (message.min != null && Object.hasOwnProperty.call(message, \"min\"))\n                            writer.uint32(/* id 12, wireType 1 =*/97).double(message.min);\n                        if (message.max != null && Object.hasOwnProperty.call(message, \"max\"))\n                            writer.uint32(/* id 13, wireType 1 =*/105).double(message.max);\n                        if (message.zeroThreshold != null && Object.hasOwnProperty.call(message, \"zeroThreshold\"))\n                            writer.uint32(/* id 14, wireType 1 =*/113).double(message.zeroThreshold);\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified ExponentialHistogramDataPoint message, length delimited. Does not implicitly {@link opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IExponentialHistogramDataPoint} message ExponentialHistogramDataPoint message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    ExponentialHistogramDataPoint.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes an ExponentialHistogramDataPoint message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint} ExponentialHistogramDataPoint\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    ExponentialHistogramDataPoint.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 1: {\n                                    if (!(message.attributes && message.attributes.length))\n                                        message.attributes = [];\n                                    message.attributes.push($root.opentelemetry.proto.common.v1.KeyValue.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                            case 2: {\n                                    message.startTimeUnixNano = reader.fixed64();\n                                    break;\n                                }\n                            case 3: {\n                                    message.timeUnixNano = reader.fixed64();\n                                    break;\n                                }\n                            case 4: {\n                                    message.count = reader.fixed64();\n                                    break;\n                                }\n                            case 5: {\n                                    message.sum = reader.double();\n                                    break;\n                                }\n                            case 6: {\n                                    message.scale = reader.sint32();\n                                    break;\n                                }\n                            case 7: {\n                                    message.zeroCount = reader.fixed64();\n                                    break;\n                                }\n                            case 8: {\n                                    message.positive = $root.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets.decode(reader, reader.uint32());\n                                    break;\n                                }\n                            case 9: {\n                                    message.negative = $root.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets.decode(reader, reader.uint32());\n                                    break;\n                                }\n                            case 10: {\n                                    message.flags = reader.uint32();\n                                    break;\n                                }\n                            case 11: {\n                                    if (!(message.exemplars && message.exemplars.length))\n                                        message.exemplars = [];\n                                    message.exemplars.push($root.opentelemetry.proto.metrics.v1.Exemplar.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                            case 12: {\n                                    message.min = reader.double();\n                                    break;\n                                }\n                            case 13: {\n                                    message.max = reader.double();\n                                    break;\n                                }\n                            case 14: {\n                                    message.zeroThreshold = reader.double();\n                                    break;\n                                }\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes an ExponentialHistogramDataPoint message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint} ExponentialHistogramDataPoint\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    ExponentialHistogramDataPoint.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies an ExponentialHistogramDataPoint message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    ExponentialHistogramDataPoint.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        var properties = {};\n                        if (message.attributes != null && message.hasOwnProperty(\"attributes\")) {\n                            if (!Array.isArray(message.attributes))\n                                return \"attributes: array expected\";\n                            for (var i = 0; i < message.attributes.length; ++i) {\n                                var error = $root.opentelemetry.proto.common.v1.KeyValue.verify(message.attributes[i]);\n                                if (error)\n                                    return \"attributes.\" + error;\n                            }\n                        }\n                        if (message.startTimeUnixNano != null && message.hasOwnProperty(\"startTimeUnixNano\"))\n                            if (!$util.isInteger(message.startTimeUnixNano) && !(message.startTimeUnixNano && $util.isInteger(message.startTimeUnixNano.low) && $util.isInteger(message.startTimeUnixNano.high)))\n                                return \"startTimeUnixNano: integer|Long expected\";\n                        if (message.timeUnixNano != null && message.hasOwnProperty(\"timeUnixNano\"))\n                            if (!$util.isInteger(message.timeUnixNano) && !(message.timeUnixNano && $util.isInteger(message.timeUnixNano.low) && $util.isInteger(message.timeUnixNano.high)))\n                                return \"timeUnixNano: integer|Long expected\";\n                        if (message.count != null && message.hasOwnProperty(\"count\"))\n                            if (!$util.isInteger(message.count) && !(message.count && $util.isInteger(message.count.low) && $util.isInteger(message.count.high)))\n                                return \"count: integer|Long expected\";\n                        if (message.sum != null && message.hasOwnProperty(\"sum\")) {\n                            properties._sum = 1;\n                            if (typeof message.sum !== \"number\")\n                                return \"sum: number expected\";\n                        }\n                        if (message.scale != null && message.hasOwnProperty(\"scale\"))\n                            if (!$util.isInteger(message.scale))\n                                return \"scale: integer expected\";\n                        if (message.zeroCount != null && message.hasOwnProperty(\"zeroCount\"))\n                            if (!$util.isInteger(message.zeroCount) && !(message.zeroCount && $util.isInteger(message.zeroCount.low) && $util.isInteger(message.zeroCount.high)))\n                                return \"zeroCount: integer|Long expected\";\n                        if (message.positive != null && message.hasOwnProperty(\"positive\")) {\n                            var error = $root.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets.verify(message.positive);\n                            if (error)\n                                return \"positive.\" + error;\n                        }\n                        if (message.negative != null && message.hasOwnProperty(\"negative\")) {\n                            var error = $root.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets.verify(message.negative);\n                            if (error)\n                                return \"negative.\" + error;\n                        }\n                        if (message.flags != null && message.hasOwnProperty(\"flags\"))\n                            if (!$util.isInteger(message.flags))\n                                return \"flags: integer expected\";\n                        if (message.exemplars != null && message.hasOwnProperty(\"exemplars\")) {\n                            if (!Array.isArray(message.exemplars))\n                                return \"exemplars: array expected\";\n                            for (var i = 0; i < message.exemplars.length; ++i) {\n                                var error = $root.opentelemetry.proto.metrics.v1.Exemplar.verify(message.exemplars[i]);\n                                if (error)\n                                    return \"exemplars.\" + error;\n                            }\n                        }\n                        if (message.min != null && message.hasOwnProperty(\"min\")) {\n                            properties._min = 1;\n                            if (typeof message.min !== \"number\")\n                                return \"min: number expected\";\n                        }\n                        if (message.max != null && message.hasOwnProperty(\"max\")) {\n                            properties._max = 1;\n                            if (typeof message.max !== \"number\")\n                                return \"max: number expected\";\n                        }\n                        if (message.zeroThreshold != null && message.hasOwnProperty(\"zeroThreshold\"))\n                            if (typeof message.zeroThreshold !== \"number\")\n                                return \"zeroThreshold: number expected\";\n                        return null;\n                    };\n\n                    /**\n                     * Creates an ExponentialHistogramDataPoint message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint} ExponentialHistogramDataPoint\n                     */\n                    ExponentialHistogramDataPoint.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint)\n                            return object;\n                        var message = new $root.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint();\n                        if (object.attributes) {\n                            if (!Array.isArray(object.attributes))\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.attributes: array expected\");\n                            message.attributes = [];\n                            for (var i = 0; i < object.attributes.length; ++i) {\n                                if (typeof object.attributes[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.attributes: object expected\");\n                                message.attributes[i] = $root.opentelemetry.proto.common.v1.KeyValue.fromObject(object.attributes[i]);\n                            }\n                        }\n                        if (object.startTimeUnixNano != null)\n                            if ($util.Long)\n                                (message.startTimeUnixNano = $util.Long.fromValue(object.startTimeUnixNano)).unsigned = false;\n                            else if (typeof object.startTimeUnixNano === \"string\")\n                                message.startTimeUnixNano = parseInt(object.startTimeUnixNano, 10);\n                            else if (typeof object.startTimeUnixNano === \"number\")\n                                message.startTimeUnixNano = object.startTimeUnixNano;\n                            else if (typeof object.startTimeUnixNano === \"object\")\n                                message.startTimeUnixNano = new $util.LongBits(object.startTimeUnixNano.low >>> 0, object.startTimeUnixNano.high >>> 0).toNumber();\n                        if (object.timeUnixNano != null)\n                            if ($util.Long)\n                                (message.timeUnixNano = $util.Long.fromValue(object.timeUnixNano)).unsigned = false;\n                            else if (typeof object.timeUnixNano === \"string\")\n                                message.timeUnixNano = parseInt(object.timeUnixNano, 10);\n                            else if (typeof object.timeUnixNano === \"number\")\n                                message.timeUnixNano = object.timeUnixNano;\n                            else if (typeof object.timeUnixNano === \"object\")\n                                message.timeUnixNano = new $util.LongBits(object.timeUnixNano.low >>> 0, object.timeUnixNano.high >>> 0).toNumber();\n                        if (object.count != null)\n                            if ($util.Long)\n                                (message.count = $util.Long.fromValue(object.count)).unsigned = false;\n                            else if (typeof object.count === \"string\")\n                                message.count = parseInt(object.count, 10);\n                            else if (typeof object.count === \"number\")\n                                message.count = object.count;\n                            else if (typeof object.count === \"object\")\n                                message.count = new $util.LongBits(object.count.low >>> 0, object.count.high >>> 0).toNumber();\n                        if (object.sum != null)\n                            message.sum = Number(object.sum);\n                        if (object.scale != null)\n                            message.scale = object.scale | 0;\n                        if (object.zeroCount != null)\n                            if ($util.Long)\n                                (message.zeroCount = $util.Long.fromValue(object.zeroCount)).unsigned = false;\n                            else if (typeof object.zeroCount === \"string\")\n                                message.zeroCount = parseInt(object.zeroCount, 10);\n                            else if (typeof object.zeroCount === \"number\")\n                                message.zeroCount = object.zeroCount;\n                            else if (typeof object.zeroCount === \"object\")\n                                message.zeroCount = new $util.LongBits(object.zeroCount.low >>> 0, object.zeroCount.high >>> 0).toNumber();\n                        if (object.positive != null) {\n                            if (typeof object.positive !== \"object\")\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.positive: object expected\");\n                            message.positive = $root.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets.fromObject(object.positive);\n                        }\n                        if (object.negative != null) {\n                            if (typeof object.negative !== \"object\")\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.negative: object expected\");\n                            message.negative = $root.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets.fromObject(object.negative);\n                        }\n                        if (object.flags != null)\n                            message.flags = object.flags >>> 0;\n                        if (object.exemplars) {\n                            if (!Array.isArray(object.exemplars))\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.exemplars: array expected\");\n                            message.exemplars = [];\n                            for (var i = 0; i < object.exemplars.length; ++i) {\n                                if (typeof object.exemplars[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.exemplars: object expected\");\n                                message.exemplars[i] = $root.opentelemetry.proto.metrics.v1.Exemplar.fromObject(object.exemplars[i]);\n                            }\n                        }\n                        if (object.min != null)\n                            message.min = Number(object.min);\n                        if (object.max != null)\n                            message.max = Number(object.max);\n                        if (object.zeroThreshold != null)\n                            message.zeroThreshold = Number(object.zeroThreshold);\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from an ExponentialHistogramDataPoint message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint} message ExponentialHistogramDataPoint\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    ExponentialHistogramDataPoint.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults) {\n                            object.attributes = [];\n                            object.exemplars = [];\n                        }\n                        if (options.defaults) {\n                            if ($util.Long) {\n                                var long = new $util.Long(0, 0, false);\n                                object.startTimeUnixNano = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                            } else\n                                object.startTimeUnixNano = options.longs === String ? \"0\" : 0;\n                            if ($util.Long) {\n                                var long = new $util.Long(0, 0, false);\n                                object.timeUnixNano = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                            } else\n                                object.timeUnixNano = options.longs === String ? \"0\" : 0;\n                            if ($util.Long) {\n                                var long = new $util.Long(0, 0, false);\n                                object.count = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                            } else\n                                object.count = options.longs === String ? \"0\" : 0;\n                            object.scale = 0;\n                            if ($util.Long) {\n                                var long = new $util.Long(0, 0, false);\n                                object.zeroCount = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                            } else\n                                object.zeroCount = options.longs === String ? \"0\" : 0;\n                            object.positive = null;\n                            object.negative = null;\n                            object.flags = 0;\n                            object.zeroThreshold = 0;\n                        }\n                        if (message.attributes && message.attributes.length) {\n                            object.attributes = [];\n                            for (var j = 0; j < message.attributes.length; ++j)\n                                object.attributes[j] = $root.opentelemetry.proto.common.v1.KeyValue.toObject(message.attributes[j], options);\n                        }\n                        if (message.startTimeUnixNano != null && message.hasOwnProperty(\"startTimeUnixNano\"))\n                            if (typeof message.startTimeUnixNano === \"number\")\n                                object.startTimeUnixNano = options.longs === String ? String(message.startTimeUnixNano) : message.startTimeUnixNano;\n                            else\n                                object.startTimeUnixNano = options.longs === String ? $util.Long.prototype.toString.call(message.startTimeUnixNano) : options.longs === Number ? new $util.LongBits(message.startTimeUnixNano.low >>> 0, message.startTimeUnixNano.high >>> 0).toNumber() : message.startTimeUnixNano;\n                        if (message.timeUnixNano != null && message.hasOwnProperty(\"timeUnixNano\"))\n                            if (typeof message.timeUnixNano === \"number\")\n                                object.timeUnixNano = options.longs === String ? String(message.timeUnixNano) : message.timeUnixNano;\n                            else\n                                object.timeUnixNano = options.longs === String ? $util.Long.prototype.toString.call(message.timeUnixNano) : options.longs === Number ? new $util.LongBits(message.timeUnixNano.low >>> 0, message.timeUnixNano.high >>> 0).toNumber() : message.timeUnixNano;\n                        if (message.count != null && message.hasOwnProperty(\"count\"))\n                            if (typeof message.count === \"number\")\n                                object.count = options.longs === String ? String(message.count) : message.count;\n                            else\n                                object.count = options.longs === String ? $util.Long.prototype.toString.call(message.count) : options.longs === Number ? new $util.LongBits(message.count.low >>> 0, message.count.high >>> 0).toNumber() : message.count;\n                        if (message.sum != null && message.hasOwnProperty(\"sum\")) {\n                            object.sum = options.json && !isFinite(message.sum) ? String(message.sum) : message.sum;\n                            if (options.oneofs)\n                                object._sum = \"sum\";\n                        }\n                        if (message.scale != null && message.hasOwnProperty(\"scale\"))\n                            object.scale = message.scale;\n                        if (message.zeroCount != null && message.hasOwnProperty(\"zeroCount\"))\n                            if (typeof message.zeroCount === \"number\")\n                                object.zeroCount = options.longs === String ? String(message.zeroCount) : message.zeroCount;\n                            else\n                                object.zeroCount = options.longs === String ? $util.Long.prototype.toString.call(message.zeroCount) : options.longs === Number ? new $util.LongBits(message.zeroCount.low >>> 0, message.zeroCount.high >>> 0).toNumber() : message.zeroCount;\n                        if (message.positive != null && message.hasOwnProperty(\"positive\"))\n                            object.positive = $root.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets.toObject(message.positive, options);\n                        if (message.negative != null && message.hasOwnProperty(\"negative\"))\n                            object.negative = $root.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets.toObject(message.negative, options);\n                        if (message.flags != null && message.hasOwnProperty(\"flags\"))\n                            object.flags = message.flags;\n                        if (message.exemplars && message.exemplars.length) {\n                            object.exemplars = [];\n                            for (var j = 0; j < message.exemplars.length; ++j)\n                                object.exemplars[j] = $root.opentelemetry.proto.metrics.v1.Exemplar.toObject(message.exemplars[j], options);\n                        }\n                        if (message.min != null && message.hasOwnProperty(\"min\")) {\n                            object.min = options.json && !isFinite(message.min) ? String(message.min) : message.min;\n                            if (options.oneofs)\n                                object._min = \"min\";\n                        }\n                        if (message.max != null && message.hasOwnProperty(\"max\")) {\n                            object.max = options.json && !isFinite(message.max) ? String(message.max) : message.max;\n                            if (options.oneofs)\n                                object._max = \"max\";\n                        }\n                        if (message.zeroThreshold != null && message.hasOwnProperty(\"zeroThreshold\"))\n                            object.zeroThreshold = options.json && !isFinite(message.zeroThreshold) ? String(message.zeroThreshold) : message.zeroThreshold;\n                        return object;\n                    };\n\n                    /**\n                     * Converts this ExponentialHistogramDataPoint to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    ExponentialHistogramDataPoint.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    /**\n                     * Gets the default type url for ExponentialHistogramDataPoint\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    ExponentialHistogramDataPoint.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\";\n                    };\n\n                    ExponentialHistogramDataPoint.Buckets = (function() {\n\n                        /**\n                         * Properties of a Buckets.\n                         * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                         * @interface IBuckets\n                         * @property {number|null} [offset] Buckets offset\n                         * @property {Array.<number|Long>|null} [bucketCounts] Buckets bucketCounts\n                         */\n\n                        /**\n                         * Constructs a new Buckets.\n                         * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                         * @classdesc Represents a Buckets.\n                         * @implements IBuckets\n                         * @constructor\n                         * @param {opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.IBuckets=} [properties] Properties to set\n                         */\n                        function Buckets(properties) {\n                            this.bucketCounts = [];\n                            if (properties)\n                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                    if (properties[keys[i]] != null)\n                                        this[keys[i]] = properties[keys[i]];\n                        }\n\n                        /**\n                         * Buckets offset.\n                         * @member {number|null|undefined} offset\n                         * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets\n                         * @instance\n                         */\n                        Buckets.prototype.offset = null;\n\n                        /**\n                         * Buckets bucketCounts.\n                         * @member {Array.<number|Long>} bucketCounts\n                         * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets\n                         * @instance\n                         */\n                        Buckets.prototype.bucketCounts = $util.emptyArray;\n\n                        /**\n                         * Creates a new Buckets instance using the specified properties.\n                         * @function create\n                         * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets\n                         * @static\n                         * @param {opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.IBuckets=} [properties] Properties to set\n                         * @returns {opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets} Buckets instance\n                         */\n                        Buckets.create = function create(properties) {\n                            return new Buckets(properties);\n                        };\n\n                        /**\n                         * Encodes the specified Buckets message. Does not implicitly {@link opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets.verify|verify} messages.\n                         * @function encode\n                         * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets\n                         * @static\n                         * @param {opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.IBuckets} message Buckets message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        Buckets.encode = function encode(message, writer) {\n                            if (!writer)\n                                writer = $Writer.create();\n                            if (message.offset != null && Object.hasOwnProperty.call(message, \"offset\"))\n                                writer.uint32(/* id 1, wireType 0 =*/8).sint32(message.offset);\n                            if (message.bucketCounts != null && message.bucketCounts.length) {\n                                writer.uint32(/* id 2, wireType 2 =*/18).fork();\n                                for (var i = 0; i < message.bucketCounts.length; ++i)\n                                    writer.uint64(message.bucketCounts[i]);\n                                writer.ldelim();\n                            }\n                            return writer;\n                        };\n\n                        /**\n                         * Encodes the specified Buckets message, length delimited. Does not implicitly {@link opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets.verify|verify} messages.\n                         * @function encodeDelimited\n                         * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets\n                         * @static\n                         * @param {opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.IBuckets} message Buckets message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        Buckets.encodeDelimited = function encodeDelimited(message, writer) {\n                            return this.encode(message, writer).ldelim();\n                        };\n\n                        /**\n                         * Decodes a Buckets message from the specified reader or buffer.\n                         * @function decode\n                         * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @param {number} [length] Message length if known beforehand\n                         * @returns {opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets} Buckets\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        Buckets.decode = function decode(reader, length) {\n                            if (!(reader instanceof $Reader))\n                                reader = $Reader.create(reader);\n                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets();\n                            while (reader.pos < end) {\n                                var tag = reader.uint32();\n                                switch (tag >>> 3) {\n                                case 1: {\n                                        message.offset = reader.sint32();\n                                        break;\n                                    }\n                                case 2: {\n                                        if (!(message.bucketCounts && message.bucketCounts.length))\n                                            message.bucketCounts = [];\n                                        if ((tag & 7) === 2) {\n                                            var end2 = reader.uint32() + reader.pos;\n                                            while (reader.pos < end2)\n                                                message.bucketCounts.push(reader.uint64());\n                                        } else\n                                            message.bucketCounts.push(reader.uint64());\n                                        break;\n                                    }\n                                default:\n                                    reader.skipType(tag & 7);\n                                    break;\n                                }\n                            }\n                            return message;\n                        };\n\n                        /**\n                         * Decodes a Buckets message from the specified reader or buffer, length delimited.\n                         * @function decodeDelimited\n                         * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @returns {opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets} Buckets\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        Buckets.decodeDelimited = function decodeDelimited(reader) {\n                            if (!(reader instanceof $Reader))\n                                reader = new $Reader(reader);\n                            return this.decode(reader, reader.uint32());\n                        };\n\n                        /**\n                         * Verifies a Buckets message.\n                         * @function verify\n                         * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets\n                         * @static\n                         * @param {Object.<string,*>} message Plain object to verify\n                         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                         */\n                        Buckets.verify = function verify(message) {\n                            if (typeof message !== \"object\" || message === null)\n                                return \"object expected\";\n                            if (message.offset != null && message.hasOwnProperty(\"offset\"))\n                                if (!$util.isInteger(message.offset))\n                                    return \"offset: integer expected\";\n                            if (message.bucketCounts != null && message.hasOwnProperty(\"bucketCounts\")) {\n                                if (!Array.isArray(message.bucketCounts))\n                                    return \"bucketCounts: array expected\";\n                                for (var i = 0; i < message.bucketCounts.length; ++i)\n                                    if (!$util.isInteger(message.bucketCounts[i]) && !(message.bucketCounts[i] && $util.isInteger(message.bucketCounts[i].low) && $util.isInteger(message.bucketCounts[i].high)))\n                                        return \"bucketCounts: integer|Long[] expected\";\n                            }\n                            return null;\n                        };\n\n                        /**\n                         * Creates a Buckets message from a plain object. Also converts values to their respective internal types.\n                         * @function fromObject\n                         * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets\n                         * @static\n                         * @param {Object.<string,*>} object Plain object\n                         * @returns {opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets} Buckets\n                         */\n                        Buckets.fromObject = function fromObject(object) {\n                            if (object instanceof $root.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets)\n                                return object;\n                            var message = new $root.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets();\n                            if (object.offset != null)\n                                message.offset = object.offset | 0;\n                            if (object.bucketCounts) {\n                                if (!Array.isArray(object.bucketCounts))\n                                    throw TypeError(\".opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets.bucketCounts: array expected\");\n                                message.bucketCounts = [];\n                                for (var i = 0; i < object.bucketCounts.length; ++i)\n                                    if ($util.Long)\n                                        (message.bucketCounts[i] = $util.Long.fromValue(object.bucketCounts[i])).unsigned = true;\n                                    else if (typeof object.bucketCounts[i] === \"string\")\n                                        message.bucketCounts[i] = parseInt(object.bucketCounts[i], 10);\n                                    else if (typeof object.bucketCounts[i] === \"number\")\n                                        message.bucketCounts[i] = object.bucketCounts[i];\n                                    else if (typeof object.bucketCounts[i] === \"object\")\n                                        message.bucketCounts[i] = new $util.LongBits(object.bucketCounts[i].low >>> 0, object.bucketCounts[i].high >>> 0).toNumber(true);\n                            }\n                            return message;\n                        };\n\n                        /**\n                         * Creates a plain object from a Buckets message. Also converts values to other types if specified.\n                         * @function toObject\n                         * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets\n                         * @static\n                         * @param {opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets} message Buckets\n                         * @param {$protobuf.IConversionOptions} [options] Conversion options\n                         * @returns {Object.<string,*>} Plain object\n                         */\n                        Buckets.toObject = function toObject(message, options) {\n                            if (!options)\n                                options = {};\n                            var object = {};\n                            if (options.arrays || options.defaults)\n                                object.bucketCounts = [];\n                            if (options.defaults)\n                                object.offset = 0;\n                            if (message.offset != null && message.hasOwnProperty(\"offset\"))\n                                object.offset = message.offset;\n                            if (message.bucketCounts && message.bucketCounts.length) {\n                                object.bucketCounts = [];\n                                for (var j = 0; j < message.bucketCounts.length; ++j)\n                                    if (typeof message.bucketCounts[j] === \"number\")\n                                        object.bucketCounts[j] = options.longs === String ? String(message.bucketCounts[j]) : message.bucketCounts[j];\n                                    else\n                                        object.bucketCounts[j] = options.longs === String ? $util.Long.prototype.toString.call(message.bucketCounts[j]) : options.longs === Number ? new $util.LongBits(message.bucketCounts[j].low >>> 0, message.bucketCounts[j].high >>> 0).toNumber(true) : message.bucketCounts[j];\n                            }\n                            return object;\n                        };\n\n                        /**\n                         * Converts this Buckets to JSON.\n                         * @function toJSON\n                         * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets\n                         * @instance\n                         * @returns {Object.<string,*>} JSON object\n                         */\n                        Buckets.prototype.toJSON = function toJSON() {\n                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                        };\n\n                        /**\n                         * Gets the default type url for Buckets\n                         * @function getTypeUrl\n                         * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets\n                         * @static\n                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                         * @returns {string} The default type url\n                         */\n                        Buckets.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                            if (typeUrlPrefix === undefined) {\n                                typeUrlPrefix = \"type.googleapis.com\";\n                            }\n                            return typeUrlPrefix + \"/opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets\";\n                        };\n\n                        return Buckets;\n                    })();\n\n                    return ExponentialHistogramDataPoint;\n                })();\n\n                v1.SummaryDataPoint = (function() {\n\n                    /**\n                     * Properties of a SummaryDataPoint.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @interface ISummaryDataPoint\n                     * @property {Array.<opentelemetry.proto.common.v1.IKeyValue>|null} [attributes] SummaryDataPoint attributes\n                     * @property {number|Long|null} [startTimeUnixNano] SummaryDataPoint startTimeUnixNano\n                     * @property {number|Long|null} [timeUnixNano] SummaryDataPoint timeUnixNano\n                     * @property {number|Long|null} [count] SummaryDataPoint count\n                     * @property {number|null} [sum] SummaryDataPoint sum\n                     * @property {Array.<opentelemetry.proto.metrics.v1.SummaryDataPoint.IValueAtQuantile>|null} [quantileValues] SummaryDataPoint quantileValues\n                     * @property {number|null} [flags] SummaryDataPoint flags\n                     */\n\n                    /**\n                     * Constructs a new SummaryDataPoint.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @classdesc Represents a SummaryDataPoint.\n                     * @implements ISummaryDataPoint\n                     * @constructor\n                     * @param {opentelemetry.proto.metrics.v1.ISummaryDataPoint=} [properties] Properties to set\n                     */\n                    function SummaryDataPoint(properties) {\n                        this.attributes = [];\n                        this.quantileValues = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * SummaryDataPoint attributes.\n                     * @member {Array.<opentelemetry.proto.common.v1.IKeyValue>} attributes\n                     * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint\n                     * @instance\n                     */\n                    SummaryDataPoint.prototype.attributes = $util.emptyArray;\n\n                    /**\n                     * SummaryDataPoint startTimeUnixNano.\n                     * @member {number|Long|null|undefined} startTimeUnixNano\n                     * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint\n                     * @instance\n                     */\n                    SummaryDataPoint.prototype.startTimeUnixNano = null;\n\n                    /**\n                     * SummaryDataPoint timeUnixNano.\n                     * @member {number|Long|null|undefined} timeUnixNano\n                     * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint\n                     * @instance\n                     */\n                    SummaryDataPoint.prototype.timeUnixNano = null;\n\n                    /**\n                     * SummaryDataPoint count.\n                     * @member {number|Long|null|undefined} count\n                     * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint\n                     * @instance\n                     */\n                    SummaryDataPoint.prototype.count = null;\n\n                    /**\n                     * SummaryDataPoint sum.\n                     * @member {number|null|undefined} sum\n                     * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint\n                     * @instance\n                     */\n                    SummaryDataPoint.prototype.sum = null;\n\n                    /**\n                     * SummaryDataPoint quantileValues.\n                     * @member {Array.<opentelemetry.proto.metrics.v1.SummaryDataPoint.IValueAtQuantile>} quantileValues\n                     * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint\n                     * @instance\n                     */\n                    SummaryDataPoint.prototype.quantileValues = $util.emptyArray;\n\n                    /**\n                     * SummaryDataPoint flags.\n                     * @member {number|null|undefined} flags\n                     * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint\n                     * @instance\n                     */\n                    SummaryDataPoint.prototype.flags = null;\n\n                    /**\n                     * Creates a new SummaryDataPoint instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.ISummaryDataPoint=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.metrics.v1.SummaryDataPoint} SummaryDataPoint instance\n                     */\n                    SummaryDataPoint.create = function create(properties) {\n                        return new SummaryDataPoint(properties);\n                    };\n\n                    /**\n                     * Encodes the specified SummaryDataPoint message. Does not implicitly {@link opentelemetry.proto.metrics.v1.SummaryDataPoint.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.ISummaryDataPoint} message SummaryDataPoint message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    SummaryDataPoint.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.startTimeUnixNano != null && Object.hasOwnProperty.call(message, \"startTimeUnixNano\"))\n                            writer.uint32(/* id 2, wireType 1 =*/17).fixed64(message.startTimeUnixNano);\n                        if (message.timeUnixNano != null && Object.hasOwnProperty.call(message, \"timeUnixNano\"))\n                            writer.uint32(/* id 3, wireType 1 =*/25).fixed64(message.timeUnixNano);\n                        if (message.count != null && Object.hasOwnProperty.call(message, \"count\"))\n                            writer.uint32(/* id 4, wireType 1 =*/33).fixed64(message.count);\n                        if (message.sum != null && Object.hasOwnProperty.call(message, \"sum\"))\n                            writer.uint32(/* id 5, wireType 1 =*/41).double(message.sum);\n                        if (message.quantileValues != null && message.quantileValues.length)\n                            for (var i = 0; i < message.quantileValues.length; ++i)\n                                $root.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile.encode(message.quantileValues[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();\n                        if (message.attributes != null && message.attributes.length)\n                            for (var i = 0; i < message.attributes.length; ++i)\n                                $root.opentelemetry.proto.common.v1.KeyValue.encode(message.attributes[i], writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();\n                        if (message.flags != null && Object.hasOwnProperty.call(message, \"flags\"))\n                            writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.flags);\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified SummaryDataPoint message, length delimited. Does not implicitly {@link opentelemetry.proto.metrics.v1.SummaryDataPoint.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.ISummaryDataPoint} message SummaryDataPoint message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    SummaryDataPoint.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes a SummaryDataPoint message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.metrics.v1.SummaryDataPoint} SummaryDataPoint\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    SummaryDataPoint.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.metrics.v1.SummaryDataPoint();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 7: {\n                                    if (!(message.attributes && message.attributes.length))\n                                        message.attributes = [];\n                                    message.attributes.push($root.opentelemetry.proto.common.v1.KeyValue.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                            case 2: {\n                                    message.startTimeUnixNano = reader.fixed64();\n                                    break;\n                                }\n                            case 3: {\n                                    message.timeUnixNano = reader.fixed64();\n                                    break;\n                                }\n                            case 4: {\n                                    message.count = reader.fixed64();\n                                    break;\n                                }\n                            case 5: {\n                                    message.sum = reader.double();\n                                    break;\n                                }\n                            case 6: {\n                                    if (!(message.quantileValues && message.quantileValues.length))\n                                        message.quantileValues = [];\n                                    message.quantileValues.push($root.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                            case 8: {\n                                    message.flags = reader.uint32();\n                                    break;\n                                }\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes a SummaryDataPoint message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.metrics.v1.SummaryDataPoint} SummaryDataPoint\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    SummaryDataPoint.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies a SummaryDataPoint message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    SummaryDataPoint.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.attributes != null && message.hasOwnProperty(\"attributes\")) {\n                            if (!Array.isArray(message.attributes))\n                                return \"attributes: array expected\";\n                            for (var i = 0; i < message.attributes.length; ++i) {\n                                var error = $root.opentelemetry.proto.common.v1.KeyValue.verify(message.attributes[i]);\n                                if (error)\n                                    return \"attributes.\" + error;\n                            }\n                        }\n                        if (message.startTimeUnixNano != null && message.hasOwnProperty(\"startTimeUnixNano\"))\n                            if (!$util.isInteger(message.startTimeUnixNano) && !(message.startTimeUnixNano && $util.isInteger(message.startTimeUnixNano.low) && $util.isInteger(message.startTimeUnixNano.high)))\n                                return \"startTimeUnixNano: integer|Long expected\";\n                        if (message.timeUnixNano != null && message.hasOwnProperty(\"timeUnixNano\"))\n                            if (!$util.isInteger(message.timeUnixNano) && !(message.timeUnixNano && $util.isInteger(message.timeUnixNano.low) && $util.isInteger(message.timeUnixNano.high)))\n                                return \"timeUnixNano: integer|Long expected\";\n                        if (message.count != null && message.hasOwnProperty(\"count\"))\n                            if (!$util.isInteger(message.count) && !(message.count && $util.isInteger(message.count.low) && $util.isInteger(message.count.high)))\n                                return \"count: integer|Long expected\";\n                        if (message.sum != null && message.hasOwnProperty(\"sum\"))\n                            if (typeof message.sum !== \"number\")\n                                return \"sum: number expected\";\n                        if (message.quantileValues != null && message.hasOwnProperty(\"quantileValues\")) {\n                            if (!Array.isArray(message.quantileValues))\n                                return \"quantileValues: array expected\";\n                            for (var i = 0; i < message.quantileValues.length; ++i) {\n                                var error = $root.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile.verify(message.quantileValues[i]);\n                                if (error)\n                                    return \"quantileValues.\" + error;\n                            }\n                        }\n                        if (message.flags != null && message.hasOwnProperty(\"flags\"))\n                            if (!$util.isInteger(message.flags))\n                                return \"flags: integer expected\";\n                        return null;\n                    };\n\n                    /**\n                     * Creates a SummaryDataPoint message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.metrics.v1.SummaryDataPoint} SummaryDataPoint\n                     */\n                    SummaryDataPoint.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.metrics.v1.SummaryDataPoint)\n                            return object;\n                        var message = new $root.opentelemetry.proto.metrics.v1.SummaryDataPoint();\n                        if (object.attributes) {\n                            if (!Array.isArray(object.attributes))\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.SummaryDataPoint.attributes: array expected\");\n                            message.attributes = [];\n                            for (var i = 0; i < object.attributes.length; ++i) {\n                                if (typeof object.attributes[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.metrics.v1.SummaryDataPoint.attributes: object expected\");\n                                message.attributes[i] = $root.opentelemetry.proto.common.v1.KeyValue.fromObject(object.attributes[i]);\n                            }\n                        }\n                        if (object.startTimeUnixNano != null)\n                            if ($util.Long)\n                                (message.startTimeUnixNano = $util.Long.fromValue(object.startTimeUnixNano)).unsigned = false;\n                            else if (typeof object.startTimeUnixNano === \"string\")\n                                message.startTimeUnixNano = parseInt(object.startTimeUnixNano, 10);\n                            else if (typeof object.startTimeUnixNano === \"number\")\n                                message.startTimeUnixNano = object.startTimeUnixNano;\n                            else if (typeof object.startTimeUnixNano === \"object\")\n                                message.startTimeUnixNano = new $util.LongBits(object.startTimeUnixNano.low >>> 0, object.startTimeUnixNano.high >>> 0).toNumber();\n                        if (object.timeUnixNano != null)\n                            if ($util.Long)\n                                (message.timeUnixNano = $util.Long.fromValue(object.timeUnixNano)).unsigned = false;\n                            else if (typeof object.timeUnixNano === \"string\")\n                                message.timeUnixNano = parseInt(object.timeUnixNano, 10);\n                            else if (typeof object.timeUnixNano === \"number\")\n                                message.timeUnixNano = object.timeUnixNano;\n                            else if (typeof object.timeUnixNano === \"object\")\n                                message.timeUnixNano = new $util.LongBits(object.timeUnixNano.low >>> 0, object.timeUnixNano.high >>> 0).toNumber();\n                        if (object.count != null)\n                            if ($util.Long)\n                                (message.count = $util.Long.fromValue(object.count)).unsigned = false;\n                            else if (typeof object.count === \"string\")\n                                message.count = parseInt(object.count, 10);\n                            else if (typeof object.count === \"number\")\n                                message.count = object.count;\n                            else if (typeof object.count === \"object\")\n                                message.count = new $util.LongBits(object.count.low >>> 0, object.count.high >>> 0).toNumber();\n                        if (object.sum != null)\n                            message.sum = Number(object.sum);\n                        if (object.quantileValues) {\n                            if (!Array.isArray(object.quantileValues))\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.SummaryDataPoint.quantileValues: array expected\");\n                            message.quantileValues = [];\n                            for (var i = 0; i < object.quantileValues.length; ++i) {\n                                if (typeof object.quantileValues[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.metrics.v1.SummaryDataPoint.quantileValues: object expected\");\n                                message.quantileValues[i] = $root.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile.fromObject(object.quantileValues[i]);\n                            }\n                        }\n                        if (object.flags != null)\n                            message.flags = object.flags >>> 0;\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from a SummaryDataPoint message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.SummaryDataPoint} message SummaryDataPoint\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    SummaryDataPoint.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults) {\n                            object.quantileValues = [];\n                            object.attributes = [];\n                        }\n                        if (options.defaults) {\n                            if ($util.Long) {\n                                var long = new $util.Long(0, 0, false);\n                                object.startTimeUnixNano = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                            } else\n                                object.startTimeUnixNano = options.longs === String ? \"0\" : 0;\n                            if ($util.Long) {\n                                var long = new $util.Long(0, 0, false);\n                                object.timeUnixNano = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                            } else\n                                object.timeUnixNano = options.longs === String ? \"0\" : 0;\n                            if ($util.Long) {\n                                var long = new $util.Long(0, 0, false);\n                                object.count = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                            } else\n                                object.count = options.longs === String ? \"0\" : 0;\n                            object.sum = 0;\n                            object.flags = 0;\n                        }\n                        if (message.startTimeUnixNano != null && message.hasOwnProperty(\"startTimeUnixNano\"))\n                            if (typeof message.startTimeUnixNano === \"number\")\n                                object.startTimeUnixNano = options.longs === String ? String(message.startTimeUnixNano) : message.startTimeUnixNano;\n                            else\n                                object.startTimeUnixNano = options.longs === String ? $util.Long.prototype.toString.call(message.startTimeUnixNano) : options.longs === Number ? new $util.LongBits(message.startTimeUnixNano.low >>> 0, message.startTimeUnixNano.high >>> 0).toNumber() : message.startTimeUnixNano;\n                        if (message.timeUnixNano != null && message.hasOwnProperty(\"timeUnixNano\"))\n                            if (typeof message.timeUnixNano === \"number\")\n                                object.timeUnixNano = options.longs === String ? String(message.timeUnixNano) : message.timeUnixNano;\n                            else\n                                object.timeUnixNano = options.longs === String ? $util.Long.prototype.toString.call(message.timeUnixNano) : options.longs === Number ? new $util.LongBits(message.timeUnixNano.low >>> 0, message.timeUnixNano.high >>> 0).toNumber() : message.timeUnixNano;\n                        if (message.count != null && message.hasOwnProperty(\"count\"))\n                            if (typeof message.count === \"number\")\n                                object.count = options.longs === String ? String(message.count) : message.count;\n                            else\n                                object.count = options.longs === String ? $util.Long.prototype.toString.call(message.count) : options.longs === Number ? new $util.LongBits(message.count.low >>> 0, message.count.high >>> 0).toNumber() : message.count;\n                        if (message.sum != null && message.hasOwnProperty(\"sum\"))\n                            object.sum = options.json && !isFinite(message.sum) ? String(message.sum) : message.sum;\n                        if (message.quantileValues && message.quantileValues.length) {\n                            object.quantileValues = [];\n                            for (var j = 0; j < message.quantileValues.length; ++j)\n                                object.quantileValues[j] = $root.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile.toObject(message.quantileValues[j], options);\n                        }\n                        if (message.attributes && message.attributes.length) {\n                            object.attributes = [];\n                            for (var j = 0; j < message.attributes.length; ++j)\n                                object.attributes[j] = $root.opentelemetry.proto.common.v1.KeyValue.toObject(message.attributes[j], options);\n                        }\n                        if (message.flags != null && message.hasOwnProperty(\"flags\"))\n                            object.flags = message.flags;\n                        return object;\n                    };\n\n                    /**\n                     * Converts this SummaryDataPoint to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    SummaryDataPoint.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    /**\n                     * Gets the default type url for SummaryDataPoint\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    SummaryDataPoint.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.metrics.v1.SummaryDataPoint\";\n                    };\n\n                    SummaryDataPoint.ValueAtQuantile = (function() {\n\n                        /**\n                         * Properties of a ValueAtQuantile.\n                         * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint\n                         * @interface IValueAtQuantile\n                         * @property {number|null} [quantile] ValueAtQuantile quantile\n                         * @property {number|null} [value] ValueAtQuantile value\n                         */\n\n                        /**\n                         * Constructs a new ValueAtQuantile.\n                         * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint\n                         * @classdesc Represents a ValueAtQuantile.\n                         * @implements IValueAtQuantile\n                         * @constructor\n                         * @param {opentelemetry.proto.metrics.v1.SummaryDataPoint.IValueAtQuantile=} [properties] Properties to set\n                         */\n                        function ValueAtQuantile(properties) {\n                            if (properties)\n                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                    if (properties[keys[i]] != null)\n                                        this[keys[i]] = properties[keys[i]];\n                        }\n\n                        /**\n                         * ValueAtQuantile quantile.\n                         * @member {number|null|undefined} quantile\n                         * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile\n                         * @instance\n                         */\n                        ValueAtQuantile.prototype.quantile = null;\n\n                        /**\n                         * ValueAtQuantile value.\n                         * @member {number|null|undefined} value\n                         * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile\n                         * @instance\n                         */\n                        ValueAtQuantile.prototype.value = null;\n\n                        /**\n                         * Creates a new ValueAtQuantile instance using the specified properties.\n                         * @function create\n                         * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile\n                         * @static\n                         * @param {opentelemetry.proto.metrics.v1.SummaryDataPoint.IValueAtQuantile=} [properties] Properties to set\n                         * @returns {opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile} ValueAtQuantile instance\n                         */\n                        ValueAtQuantile.create = function create(properties) {\n                            return new ValueAtQuantile(properties);\n                        };\n\n                        /**\n                         * Encodes the specified ValueAtQuantile message. Does not implicitly {@link opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile.verify|verify} messages.\n                         * @function encode\n                         * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile\n                         * @static\n                         * @param {opentelemetry.proto.metrics.v1.SummaryDataPoint.IValueAtQuantile} message ValueAtQuantile message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        ValueAtQuantile.encode = function encode(message, writer) {\n                            if (!writer)\n                                writer = $Writer.create();\n                            if (message.quantile != null && Object.hasOwnProperty.call(message, \"quantile\"))\n                                writer.uint32(/* id 1, wireType 1 =*/9).double(message.quantile);\n                            if (message.value != null && Object.hasOwnProperty.call(message, \"value\"))\n                                writer.uint32(/* id 2, wireType 1 =*/17).double(message.value);\n                            return writer;\n                        };\n\n                        /**\n                         * Encodes the specified ValueAtQuantile message, length delimited. Does not implicitly {@link opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile.verify|verify} messages.\n                         * @function encodeDelimited\n                         * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile\n                         * @static\n                         * @param {opentelemetry.proto.metrics.v1.SummaryDataPoint.IValueAtQuantile} message ValueAtQuantile message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        ValueAtQuantile.encodeDelimited = function encodeDelimited(message, writer) {\n                            return this.encode(message, writer).ldelim();\n                        };\n\n                        /**\n                         * Decodes a ValueAtQuantile message from the specified reader or buffer.\n                         * @function decode\n                         * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @param {number} [length] Message length if known beforehand\n                         * @returns {opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile} ValueAtQuantile\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        ValueAtQuantile.decode = function decode(reader, length) {\n                            if (!(reader instanceof $Reader))\n                                reader = $Reader.create(reader);\n                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile();\n                            while (reader.pos < end) {\n                                var tag = reader.uint32();\n                                switch (tag >>> 3) {\n                                case 1: {\n                                        message.quantile = reader.double();\n                                        break;\n                                    }\n                                case 2: {\n                                        message.value = reader.double();\n                                        break;\n                                    }\n                                default:\n                                    reader.skipType(tag & 7);\n                                    break;\n                                }\n                            }\n                            return message;\n                        };\n\n                        /**\n                         * Decodes a ValueAtQuantile message from the specified reader or buffer, length delimited.\n                         * @function decodeDelimited\n                         * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @returns {opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile} ValueAtQuantile\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        ValueAtQuantile.decodeDelimited = function decodeDelimited(reader) {\n                            if (!(reader instanceof $Reader))\n                                reader = new $Reader(reader);\n                            return this.decode(reader, reader.uint32());\n                        };\n\n                        /**\n                         * Verifies a ValueAtQuantile message.\n                         * @function verify\n                         * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile\n                         * @static\n                         * @param {Object.<string,*>} message Plain object to verify\n                         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                         */\n                        ValueAtQuantile.verify = function verify(message) {\n                            if (typeof message !== \"object\" || message === null)\n                                return \"object expected\";\n                            if (message.quantile != null && message.hasOwnProperty(\"quantile\"))\n                                if (typeof message.quantile !== \"number\")\n                                    return \"quantile: number expected\";\n                            if (message.value != null && message.hasOwnProperty(\"value\"))\n                                if (typeof message.value !== \"number\")\n                                    return \"value: number expected\";\n                            return null;\n                        };\n\n                        /**\n                         * Creates a ValueAtQuantile message from a plain object. Also converts values to their respective internal types.\n                         * @function fromObject\n                         * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile\n                         * @static\n                         * @param {Object.<string,*>} object Plain object\n                         * @returns {opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile} ValueAtQuantile\n                         */\n                        ValueAtQuantile.fromObject = function fromObject(object) {\n                            if (object instanceof $root.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile)\n                                return object;\n                            var message = new $root.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile();\n                            if (object.quantile != null)\n                                message.quantile = Number(object.quantile);\n                            if (object.value != null)\n                                message.value = Number(object.value);\n                            return message;\n                        };\n\n                        /**\n                         * Creates a plain object from a ValueAtQuantile message. Also converts values to other types if specified.\n                         * @function toObject\n                         * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile\n                         * @static\n                         * @param {opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile} message ValueAtQuantile\n                         * @param {$protobuf.IConversionOptions} [options] Conversion options\n                         * @returns {Object.<string,*>} Plain object\n                         */\n                        ValueAtQuantile.toObject = function toObject(message, options) {\n                            if (!options)\n                                options = {};\n                            var object = {};\n                            if (options.defaults) {\n                                object.quantile = 0;\n                                object.value = 0;\n                            }\n                            if (message.quantile != null && message.hasOwnProperty(\"quantile\"))\n                                object.quantile = options.json && !isFinite(message.quantile) ? String(message.quantile) : message.quantile;\n                            if (message.value != null && message.hasOwnProperty(\"value\"))\n                                object.value = options.json && !isFinite(message.value) ? String(message.value) : message.value;\n                            return object;\n                        };\n\n                        /**\n                         * Converts this ValueAtQuantile to JSON.\n                         * @function toJSON\n                         * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile\n                         * @instance\n                         * @returns {Object.<string,*>} JSON object\n                         */\n                        ValueAtQuantile.prototype.toJSON = function toJSON() {\n                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                        };\n\n                        /**\n                         * Gets the default type url for ValueAtQuantile\n                         * @function getTypeUrl\n                         * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile\n                         * @static\n                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                         * @returns {string} The default type url\n                         */\n                        ValueAtQuantile.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                            if (typeUrlPrefix === undefined) {\n                                typeUrlPrefix = \"type.googleapis.com\";\n                            }\n                            return typeUrlPrefix + \"/opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile\";\n                        };\n\n                        return ValueAtQuantile;\n                    })();\n\n                    return SummaryDataPoint;\n                })();\n\n                v1.Exemplar = (function() {\n\n                    /**\n                     * Properties of an Exemplar.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @interface IExemplar\n                     * @property {Array.<opentelemetry.proto.common.v1.IKeyValue>|null} [filteredAttributes] Exemplar filteredAttributes\n                     * @property {number|Long|null} [timeUnixNano] Exemplar timeUnixNano\n                     * @property {number|null} [asDouble] Exemplar asDouble\n                     * @property {number|Long|null} [asInt] Exemplar asInt\n                     * @property {Uint8Array|null} [spanId] Exemplar spanId\n                     * @property {Uint8Array|null} [traceId] Exemplar traceId\n                     */\n\n                    /**\n                     * Constructs a new Exemplar.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @classdesc Represents an Exemplar.\n                     * @implements IExemplar\n                     * @constructor\n                     * @param {opentelemetry.proto.metrics.v1.IExemplar=} [properties] Properties to set\n                     */\n                    function Exemplar(properties) {\n                        this.filteredAttributes = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * Exemplar filteredAttributes.\n                     * @member {Array.<opentelemetry.proto.common.v1.IKeyValue>} filteredAttributes\n                     * @memberof opentelemetry.proto.metrics.v1.Exemplar\n                     * @instance\n                     */\n                    Exemplar.prototype.filteredAttributes = $util.emptyArray;\n\n                    /**\n                     * Exemplar timeUnixNano.\n                     * @member {number|Long|null|undefined} timeUnixNano\n                     * @memberof opentelemetry.proto.metrics.v1.Exemplar\n                     * @instance\n                     */\n                    Exemplar.prototype.timeUnixNano = null;\n\n                    /**\n                     * Exemplar asDouble.\n                     * @member {number|null|undefined} asDouble\n                     * @memberof opentelemetry.proto.metrics.v1.Exemplar\n                     * @instance\n                     */\n                    Exemplar.prototype.asDouble = null;\n\n                    /**\n                     * Exemplar asInt.\n                     * @member {number|Long|null|undefined} asInt\n                     * @memberof opentelemetry.proto.metrics.v1.Exemplar\n                     * @instance\n                     */\n                    Exemplar.prototype.asInt = null;\n\n                    /**\n                     * Exemplar spanId.\n                     * @member {Uint8Array|null|undefined} spanId\n                     * @memberof opentelemetry.proto.metrics.v1.Exemplar\n                     * @instance\n                     */\n                    Exemplar.prototype.spanId = null;\n\n                    /**\n                     * Exemplar traceId.\n                     * @member {Uint8Array|null|undefined} traceId\n                     * @memberof opentelemetry.proto.metrics.v1.Exemplar\n                     * @instance\n                     */\n                    Exemplar.prototype.traceId = null;\n\n                    // OneOf field names bound to virtual getters and setters\n                    var $oneOfFields;\n\n                    /**\n                     * Exemplar value.\n                     * @member {\"asDouble\"|\"asInt\"|undefined} value\n                     * @memberof opentelemetry.proto.metrics.v1.Exemplar\n                     * @instance\n                     */\n                    Object.defineProperty(Exemplar.prototype, \"value\", {\n                        get: $util.oneOfGetter($oneOfFields = [\"asDouble\", \"asInt\"]),\n                        set: $util.oneOfSetter($oneOfFields)\n                    });\n\n                    /**\n                     * Creates a new Exemplar instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.metrics.v1.Exemplar\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IExemplar=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.metrics.v1.Exemplar} Exemplar instance\n                     */\n                    Exemplar.create = function create(properties) {\n                        return new Exemplar(properties);\n                    };\n\n                    /**\n                     * Encodes the specified Exemplar message. Does not implicitly {@link opentelemetry.proto.metrics.v1.Exemplar.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.metrics.v1.Exemplar\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IExemplar} message Exemplar message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    Exemplar.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.timeUnixNano != null && Object.hasOwnProperty.call(message, \"timeUnixNano\"))\n                            writer.uint32(/* id 2, wireType 1 =*/17).fixed64(message.timeUnixNano);\n                        if (message.asDouble != null && Object.hasOwnProperty.call(message, \"asDouble\"))\n                            writer.uint32(/* id 3, wireType 1 =*/25).double(message.asDouble);\n                        if (message.spanId != null && Object.hasOwnProperty.call(message, \"spanId\"))\n                            writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.spanId);\n                        if (message.traceId != null && Object.hasOwnProperty.call(message, \"traceId\"))\n                            writer.uint32(/* id 5, wireType 2 =*/42).bytes(message.traceId);\n                        if (message.asInt != null && Object.hasOwnProperty.call(message, \"asInt\"))\n                            writer.uint32(/* id 6, wireType 1 =*/49).sfixed64(message.asInt);\n                        if (message.filteredAttributes != null && message.filteredAttributes.length)\n                            for (var i = 0; i < message.filteredAttributes.length; ++i)\n                                $root.opentelemetry.proto.common.v1.KeyValue.encode(message.filteredAttributes[i], writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified Exemplar message, length delimited. Does not implicitly {@link opentelemetry.proto.metrics.v1.Exemplar.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.Exemplar\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IExemplar} message Exemplar message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    Exemplar.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes an Exemplar message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.metrics.v1.Exemplar\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.metrics.v1.Exemplar} Exemplar\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    Exemplar.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.metrics.v1.Exemplar();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 7: {\n                                    if (!(message.filteredAttributes && message.filteredAttributes.length))\n                                        message.filteredAttributes = [];\n                                    message.filteredAttributes.push($root.opentelemetry.proto.common.v1.KeyValue.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                            case 2: {\n                                    message.timeUnixNano = reader.fixed64();\n                                    break;\n                                }\n                            case 3: {\n                                    message.asDouble = reader.double();\n                                    break;\n                                }\n                            case 6: {\n                                    message.asInt = reader.sfixed64();\n                                    break;\n                                }\n                            case 4: {\n                                    message.spanId = reader.bytes();\n                                    break;\n                                }\n                            case 5: {\n                                    message.traceId = reader.bytes();\n                                    break;\n                                }\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes an Exemplar message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.Exemplar\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.metrics.v1.Exemplar} Exemplar\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    Exemplar.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies an Exemplar message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.metrics.v1.Exemplar\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    Exemplar.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        var properties = {};\n                        if (message.filteredAttributes != null && message.hasOwnProperty(\"filteredAttributes\")) {\n                            if (!Array.isArray(message.filteredAttributes))\n                                return \"filteredAttributes: array expected\";\n                            for (var i = 0; i < message.filteredAttributes.length; ++i) {\n                                var error = $root.opentelemetry.proto.common.v1.KeyValue.verify(message.filteredAttributes[i]);\n                                if (error)\n                                    return \"filteredAttributes.\" + error;\n                            }\n                        }\n                        if (message.timeUnixNano != null && message.hasOwnProperty(\"timeUnixNano\"))\n                            if (!$util.isInteger(message.timeUnixNano) && !(message.timeUnixNano && $util.isInteger(message.timeUnixNano.low) && $util.isInteger(message.timeUnixNano.high)))\n                                return \"timeUnixNano: integer|Long expected\";\n                        if (message.asDouble != null && message.hasOwnProperty(\"asDouble\")) {\n                            properties.value = 1;\n                            if (typeof message.asDouble !== \"number\")\n                                return \"asDouble: number expected\";\n                        }\n                        if (message.asInt != null && message.hasOwnProperty(\"asInt\")) {\n                            if (properties.value === 1)\n                                return \"value: multiple values\";\n                            properties.value = 1;\n                            if (!$util.isInteger(message.asInt) && !(message.asInt && $util.isInteger(message.asInt.low) && $util.isInteger(message.asInt.high)))\n                                return \"asInt: integer|Long expected\";\n                        }\n                        if (message.spanId != null && message.hasOwnProperty(\"spanId\"))\n                            if (!(message.spanId && typeof message.spanId.length === \"number\" || $util.isString(message.spanId)))\n                                return \"spanId: buffer expected\";\n                        if (message.traceId != null && message.hasOwnProperty(\"traceId\"))\n                            if (!(message.traceId && typeof message.traceId.length === \"number\" || $util.isString(message.traceId)))\n                                return \"traceId: buffer expected\";\n                        return null;\n                    };\n\n                    /**\n                     * Creates an Exemplar message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.metrics.v1.Exemplar\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.metrics.v1.Exemplar} Exemplar\n                     */\n                    Exemplar.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.metrics.v1.Exemplar)\n                            return object;\n                        var message = new $root.opentelemetry.proto.metrics.v1.Exemplar();\n                        if (object.filteredAttributes) {\n                            if (!Array.isArray(object.filteredAttributes))\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.Exemplar.filteredAttributes: array expected\");\n                            message.filteredAttributes = [];\n                            for (var i = 0; i < object.filteredAttributes.length; ++i) {\n                                if (typeof object.filteredAttributes[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.metrics.v1.Exemplar.filteredAttributes: object expected\");\n                                message.filteredAttributes[i] = $root.opentelemetry.proto.common.v1.KeyValue.fromObject(object.filteredAttributes[i]);\n                            }\n                        }\n                        if (object.timeUnixNano != null)\n                            if ($util.Long)\n                                (message.timeUnixNano = $util.Long.fromValue(object.timeUnixNano)).unsigned = false;\n                            else if (typeof object.timeUnixNano === \"string\")\n                                message.timeUnixNano = parseInt(object.timeUnixNano, 10);\n                            else if (typeof object.timeUnixNano === \"number\")\n                                message.timeUnixNano = object.timeUnixNano;\n                            else if (typeof object.timeUnixNano === \"object\")\n                                message.timeUnixNano = new $util.LongBits(object.timeUnixNano.low >>> 0, object.timeUnixNano.high >>> 0).toNumber();\n                        if (object.asDouble != null)\n                            message.asDouble = Number(object.asDouble);\n                        if (object.asInt != null)\n                            if ($util.Long)\n                                (message.asInt = $util.Long.fromValue(object.asInt)).unsigned = false;\n                            else if (typeof object.asInt === \"string\")\n                                message.asInt = parseInt(object.asInt, 10);\n                            else if (typeof object.asInt === \"number\")\n                                message.asInt = object.asInt;\n                            else if (typeof object.asInt === \"object\")\n                                message.asInt = new $util.LongBits(object.asInt.low >>> 0, object.asInt.high >>> 0).toNumber();\n                        if (object.spanId != null)\n                            if (typeof object.spanId === \"string\")\n                                $util.base64.decode(object.spanId, message.spanId = $util.newBuffer($util.base64.length(object.spanId)), 0);\n                            else if (object.spanId.length >= 0)\n                                message.spanId = object.spanId;\n                        if (object.traceId != null)\n                            if (typeof object.traceId === \"string\")\n                                $util.base64.decode(object.traceId, message.traceId = $util.newBuffer($util.base64.length(object.traceId)), 0);\n                            else if (object.traceId.length >= 0)\n                                message.traceId = object.traceId;\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from an Exemplar message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.metrics.v1.Exemplar\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.Exemplar} message Exemplar\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    Exemplar.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults)\n                            object.filteredAttributes = [];\n                        if (options.defaults) {\n                            if ($util.Long) {\n                                var long = new $util.Long(0, 0, false);\n                                object.timeUnixNano = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                            } else\n                                object.timeUnixNano = options.longs === String ? \"0\" : 0;\n                            if (options.bytes === String)\n                                object.spanId = \"\";\n                            else {\n                                object.spanId = [];\n                                if (options.bytes !== Array)\n                                    object.spanId = $util.newBuffer(object.spanId);\n                            }\n                            if (options.bytes === String)\n                                object.traceId = \"\";\n                            else {\n                                object.traceId = [];\n                                if (options.bytes !== Array)\n                                    object.traceId = $util.newBuffer(object.traceId);\n                            }\n                        }\n                        if (message.timeUnixNano != null && message.hasOwnProperty(\"timeUnixNano\"))\n                            if (typeof message.timeUnixNano === \"number\")\n                                object.timeUnixNano = options.longs === String ? String(message.timeUnixNano) : message.timeUnixNano;\n                            else\n                                object.timeUnixNano = options.longs === String ? $util.Long.prototype.toString.call(message.timeUnixNano) : options.longs === Number ? new $util.LongBits(message.timeUnixNano.low >>> 0, message.timeUnixNano.high >>> 0).toNumber() : message.timeUnixNano;\n                        if (message.asDouble != null && message.hasOwnProperty(\"asDouble\")) {\n                            object.asDouble = options.json && !isFinite(message.asDouble) ? String(message.asDouble) : message.asDouble;\n                            if (options.oneofs)\n                                object.value = \"asDouble\";\n                        }\n                        if (message.spanId != null && message.hasOwnProperty(\"spanId\"))\n                            object.spanId = options.bytes === String ? $util.base64.encode(message.spanId, 0, message.spanId.length) : options.bytes === Array ? Array.prototype.slice.call(message.spanId) : message.spanId;\n                        if (message.traceId != null && message.hasOwnProperty(\"traceId\"))\n                            object.traceId = options.bytes === String ? $util.base64.encode(message.traceId, 0, message.traceId.length) : options.bytes === Array ? Array.prototype.slice.call(message.traceId) : message.traceId;\n                        if (message.asInt != null && message.hasOwnProperty(\"asInt\")) {\n                            if (typeof message.asInt === \"number\")\n                                object.asInt = options.longs === String ? String(message.asInt) : message.asInt;\n                            else\n                                object.asInt = options.longs === String ? $util.Long.prototype.toString.call(message.asInt) : options.longs === Number ? new $util.LongBits(message.asInt.low >>> 0, message.asInt.high >>> 0).toNumber() : message.asInt;\n                            if (options.oneofs)\n                                object.value = \"asInt\";\n                        }\n                        if (message.filteredAttributes && message.filteredAttributes.length) {\n                            object.filteredAttributes = [];\n                            for (var j = 0; j < message.filteredAttributes.length; ++j)\n                                object.filteredAttributes[j] = $root.opentelemetry.proto.common.v1.KeyValue.toObject(message.filteredAttributes[j], options);\n                        }\n                        return object;\n                    };\n\n                    /**\n                     * Converts this Exemplar to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.metrics.v1.Exemplar\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    Exemplar.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    /**\n                     * Gets the default type url for Exemplar\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.metrics.v1.Exemplar\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    Exemplar.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.metrics.v1.Exemplar\";\n                    };\n\n                    return Exemplar;\n                })();\n\n                return v1;\n            })();\n\n            return metrics;\n        })();\n\n        proto.logs = (function() {\n\n            /**\n             * Namespace logs.\n             * @memberof opentelemetry.proto\n             * @namespace\n             */\n            var logs = {};\n\n            logs.v1 = (function() {\n\n                /**\n                 * Namespace v1.\n                 * @memberof opentelemetry.proto.logs\n                 * @namespace\n                 */\n                var v1 = {};\n\n                v1.LogsData = (function() {\n\n                    /**\n                     * Properties of a LogsData.\n                     * @memberof opentelemetry.proto.logs.v1\n                     * @interface ILogsData\n                     * @property {Array.<opentelemetry.proto.logs.v1.IResourceLogs>|null} [resourceLogs] LogsData resourceLogs\n                     */\n\n                    /**\n                     * Constructs a new LogsData.\n                     * @memberof opentelemetry.proto.logs.v1\n                     * @classdesc Represents a LogsData.\n                     * @implements ILogsData\n                     * @constructor\n                     * @param {opentelemetry.proto.logs.v1.ILogsData=} [properties] Properties to set\n                     */\n                    function LogsData(properties) {\n                        this.resourceLogs = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * LogsData resourceLogs.\n                     * @member {Array.<opentelemetry.proto.logs.v1.IResourceLogs>} resourceLogs\n                     * @memberof opentelemetry.proto.logs.v1.LogsData\n                     * @instance\n                     */\n                    LogsData.prototype.resourceLogs = $util.emptyArray;\n\n                    /**\n                     * Creates a new LogsData instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.logs.v1.LogsData\n                     * @static\n                     * @param {opentelemetry.proto.logs.v1.ILogsData=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.logs.v1.LogsData} LogsData instance\n                     */\n                    LogsData.create = function create(properties) {\n                        return new LogsData(properties);\n                    };\n\n                    /**\n                     * Encodes the specified LogsData message. Does not implicitly {@link opentelemetry.proto.logs.v1.LogsData.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.logs.v1.LogsData\n                     * @static\n                     * @param {opentelemetry.proto.logs.v1.ILogsData} message LogsData message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    LogsData.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.resourceLogs != null && message.resourceLogs.length)\n                            for (var i = 0; i < message.resourceLogs.length; ++i)\n                                $root.opentelemetry.proto.logs.v1.ResourceLogs.encode(message.resourceLogs[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified LogsData message, length delimited. Does not implicitly {@link opentelemetry.proto.logs.v1.LogsData.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.logs.v1.LogsData\n                     * @static\n                     * @param {opentelemetry.proto.logs.v1.ILogsData} message LogsData message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    LogsData.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes a LogsData message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.logs.v1.LogsData\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.logs.v1.LogsData} LogsData\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    LogsData.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.logs.v1.LogsData();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 1: {\n                                    if (!(message.resourceLogs && message.resourceLogs.length))\n                                        message.resourceLogs = [];\n                                    message.resourceLogs.push($root.opentelemetry.proto.logs.v1.ResourceLogs.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes a LogsData message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.logs.v1.LogsData\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.logs.v1.LogsData} LogsData\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    LogsData.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies a LogsData message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.logs.v1.LogsData\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    LogsData.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.resourceLogs != null && message.hasOwnProperty(\"resourceLogs\")) {\n                            if (!Array.isArray(message.resourceLogs))\n                                return \"resourceLogs: array expected\";\n                            for (var i = 0; i < message.resourceLogs.length; ++i) {\n                                var error = $root.opentelemetry.proto.logs.v1.ResourceLogs.verify(message.resourceLogs[i]);\n                                if (error)\n                                    return \"resourceLogs.\" + error;\n                            }\n                        }\n                        return null;\n                    };\n\n                    /**\n                     * Creates a LogsData message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.logs.v1.LogsData\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.logs.v1.LogsData} LogsData\n                     */\n                    LogsData.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.logs.v1.LogsData)\n                            return object;\n                        var message = new $root.opentelemetry.proto.logs.v1.LogsData();\n                        if (object.resourceLogs) {\n                            if (!Array.isArray(object.resourceLogs))\n                                throw TypeError(\".opentelemetry.proto.logs.v1.LogsData.resourceLogs: array expected\");\n                            message.resourceLogs = [];\n                            for (var i = 0; i < object.resourceLogs.length; ++i) {\n                                if (typeof object.resourceLogs[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.logs.v1.LogsData.resourceLogs: object expected\");\n                                message.resourceLogs[i] = $root.opentelemetry.proto.logs.v1.ResourceLogs.fromObject(object.resourceLogs[i]);\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from a LogsData message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.logs.v1.LogsData\n                     * @static\n                     * @param {opentelemetry.proto.logs.v1.LogsData} message LogsData\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    LogsData.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults)\n                            object.resourceLogs = [];\n                        if (message.resourceLogs && message.resourceLogs.length) {\n                            object.resourceLogs = [];\n                            for (var j = 0; j < message.resourceLogs.length; ++j)\n                                object.resourceLogs[j] = $root.opentelemetry.proto.logs.v1.ResourceLogs.toObject(message.resourceLogs[j], options);\n                        }\n                        return object;\n                    };\n\n                    /**\n                     * Converts this LogsData to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.logs.v1.LogsData\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    LogsData.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    /**\n                     * Gets the default type url for LogsData\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.logs.v1.LogsData\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    LogsData.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.logs.v1.LogsData\";\n                    };\n\n                    return LogsData;\n                })();\n\n                v1.ResourceLogs = (function() {\n\n                    /**\n                     * Properties of a ResourceLogs.\n                     * @memberof opentelemetry.proto.logs.v1\n                     * @interface IResourceLogs\n                     * @property {opentelemetry.proto.resource.v1.IResource|null} [resource] ResourceLogs resource\n                     * @property {Array.<opentelemetry.proto.logs.v1.IScopeLogs>|null} [scopeLogs] ResourceLogs scopeLogs\n                     * @property {string|null} [schemaUrl] ResourceLogs schemaUrl\n                     */\n\n                    /**\n                     * Constructs a new ResourceLogs.\n                     * @memberof opentelemetry.proto.logs.v1\n                     * @classdesc Represents a ResourceLogs.\n                     * @implements IResourceLogs\n                     * @constructor\n                     * @param {opentelemetry.proto.logs.v1.IResourceLogs=} [properties] Properties to set\n                     */\n                    function ResourceLogs(properties) {\n                        this.scopeLogs = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * ResourceLogs resource.\n                     * @member {opentelemetry.proto.resource.v1.IResource|null|undefined} resource\n                     * @memberof opentelemetry.proto.logs.v1.ResourceLogs\n                     * @instance\n                     */\n                    ResourceLogs.prototype.resource = null;\n\n                    /**\n                     * ResourceLogs scopeLogs.\n                     * @member {Array.<opentelemetry.proto.logs.v1.IScopeLogs>} scopeLogs\n                     * @memberof opentelemetry.proto.logs.v1.ResourceLogs\n                     * @instance\n                     */\n                    ResourceLogs.prototype.scopeLogs = $util.emptyArray;\n\n                    /**\n                     * ResourceLogs schemaUrl.\n                     * @member {string|null|undefined} schemaUrl\n                     * @memberof opentelemetry.proto.logs.v1.ResourceLogs\n                     * @instance\n                     */\n                    ResourceLogs.prototype.schemaUrl = null;\n\n                    /**\n                     * Creates a new ResourceLogs instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.logs.v1.ResourceLogs\n                     * @static\n                     * @param {opentelemetry.proto.logs.v1.IResourceLogs=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.logs.v1.ResourceLogs} ResourceLogs instance\n                     */\n                    ResourceLogs.create = function create(properties) {\n                        return new ResourceLogs(properties);\n                    };\n\n                    /**\n                     * Encodes the specified ResourceLogs message. Does not implicitly {@link opentelemetry.proto.logs.v1.ResourceLogs.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.logs.v1.ResourceLogs\n                     * @static\n                     * @param {opentelemetry.proto.logs.v1.IResourceLogs} message ResourceLogs message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    ResourceLogs.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.resource != null && Object.hasOwnProperty.call(message, \"resource\"))\n                            $root.opentelemetry.proto.resource.v1.Resource.encode(message.resource, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                        if (message.scopeLogs != null && message.scopeLogs.length)\n                            for (var i = 0; i < message.scopeLogs.length; ++i)\n                                $root.opentelemetry.proto.logs.v1.ScopeLogs.encode(message.scopeLogs[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                        if (message.schemaUrl != null && Object.hasOwnProperty.call(message, \"schemaUrl\"))\n                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.schemaUrl);\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified ResourceLogs message, length delimited. Does not implicitly {@link opentelemetry.proto.logs.v1.ResourceLogs.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.logs.v1.ResourceLogs\n                     * @static\n                     * @param {opentelemetry.proto.logs.v1.IResourceLogs} message ResourceLogs message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    ResourceLogs.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes a ResourceLogs message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.logs.v1.ResourceLogs\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.logs.v1.ResourceLogs} ResourceLogs\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    ResourceLogs.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.logs.v1.ResourceLogs();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 1: {\n                                    message.resource = $root.opentelemetry.proto.resource.v1.Resource.decode(reader, reader.uint32());\n                                    break;\n                                }\n                            case 2: {\n                                    if (!(message.scopeLogs && message.scopeLogs.length))\n                                        message.scopeLogs = [];\n                                    message.scopeLogs.push($root.opentelemetry.proto.logs.v1.ScopeLogs.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                            case 3: {\n                                    message.schemaUrl = reader.string();\n                                    break;\n                                }\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes a ResourceLogs message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.logs.v1.ResourceLogs\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.logs.v1.ResourceLogs} ResourceLogs\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    ResourceLogs.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies a ResourceLogs message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.logs.v1.ResourceLogs\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    ResourceLogs.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.resource != null && message.hasOwnProperty(\"resource\")) {\n                            var error = $root.opentelemetry.proto.resource.v1.Resource.verify(message.resource);\n                            if (error)\n                                return \"resource.\" + error;\n                        }\n                        if (message.scopeLogs != null && message.hasOwnProperty(\"scopeLogs\")) {\n                            if (!Array.isArray(message.scopeLogs))\n                                return \"scopeLogs: array expected\";\n                            for (var i = 0; i < message.scopeLogs.length; ++i) {\n                                var error = $root.opentelemetry.proto.logs.v1.ScopeLogs.verify(message.scopeLogs[i]);\n                                if (error)\n                                    return \"scopeLogs.\" + error;\n                            }\n                        }\n                        if (message.schemaUrl != null && message.hasOwnProperty(\"schemaUrl\"))\n                            if (!$util.isString(message.schemaUrl))\n                                return \"schemaUrl: string expected\";\n                        return null;\n                    };\n\n                    /**\n                     * Creates a ResourceLogs message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.logs.v1.ResourceLogs\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.logs.v1.ResourceLogs} ResourceLogs\n                     */\n                    ResourceLogs.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.logs.v1.ResourceLogs)\n                            return object;\n                        var message = new $root.opentelemetry.proto.logs.v1.ResourceLogs();\n                        if (object.resource != null) {\n                            if (typeof object.resource !== \"object\")\n                                throw TypeError(\".opentelemetry.proto.logs.v1.ResourceLogs.resource: object expected\");\n                            message.resource = $root.opentelemetry.proto.resource.v1.Resource.fromObject(object.resource);\n                        }\n                        if (object.scopeLogs) {\n                            if (!Array.isArray(object.scopeLogs))\n                                throw TypeError(\".opentelemetry.proto.logs.v1.ResourceLogs.scopeLogs: array expected\");\n                            message.scopeLogs = [];\n                            for (var i = 0; i < object.scopeLogs.length; ++i) {\n                                if (typeof object.scopeLogs[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.logs.v1.ResourceLogs.scopeLogs: object expected\");\n                                message.scopeLogs[i] = $root.opentelemetry.proto.logs.v1.ScopeLogs.fromObject(object.scopeLogs[i]);\n                            }\n                        }\n                        if (object.schemaUrl != null)\n                            message.schemaUrl = String(object.schemaUrl);\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from a ResourceLogs message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.logs.v1.ResourceLogs\n                     * @static\n                     * @param {opentelemetry.proto.logs.v1.ResourceLogs} message ResourceLogs\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    ResourceLogs.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults)\n                            object.scopeLogs = [];\n                        if (options.defaults) {\n                            object.resource = null;\n                            object.schemaUrl = \"\";\n                        }\n                        if (message.resource != null && message.hasOwnProperty(\"resource\"))\n                            object.resource = $root.opentelemetry.proto.resource.v1.Resource.toObject(message.resource, options);\n                        if (message.scopeLogs && message.scopeLogs.length) {\n                            object.scopeLogs = [];\n                            for (var j = 0; j < message.scopeLogs.length; ++j)\n                                object.scopeLogs[j] = $root.opentelemetry.proto.logs.v1.ScopeLogs.toObject(message.scopeLogs[j], options);\n                        }\n                        if (message.schemaUrl != null && message.hasOwnProperty(\"schemaUrl\"))\n                            object.schemaUrl = message.schemaUrl;\n                        return object;\n                    };\n\n                    /**\n                     * Converts this ResourceLogs to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.logs.v1.ResourceLogs\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    ResourceLogs.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    /**\n                     * Gets the default type url for ResourceLogs\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.logs.v1.ResourceLogs\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    ResourceLogs.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.logs.v1.ResourceLogs\";\n                    };\n\n                    return ResourceLogs;\n                })();\n\n                v1.ScopeLogs = (function() {\n\n                    /**\n                     * Properties of a ScopeLogs.\n                     * @memberof opentelemetry.proto.logs.v1\n                     * @interface IScopeLogs\n                     * @property {opentelemetry.proto.common.v1.IInstrumentationScope|null} [scope] ScopeLogs scope\n                     * @property {Array.<opentelemetry.proto.logs.v1.ILogRecord>|null} [logRecords] ScopeLogs logRecords\n                     * @property {string|null} [schemaUrl] ScopeLogs schemaUrl\n                     */\n\n                    /**\n                     * Constructs a new ScopeLogs.\n                     * @memberof opentelemetry.proto.logs.v1\n                     * @classdesc Represents a ScopeLogs.\n                     * @implements IScopeLogs\n                     * @constructor\n                     * @param {opentelemetry.proto.logs.v1.IScopeLogs=} [properties] Properties to set\n                     */\n                    function ScopeLogs(properties) {\n                        this.logRecords = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * ScopeLogs scope.\n                     * @member {opentelemetry.proto.common.v1.IInstrumentationScope|null|undefined} scope\n                     * @memberof opentelemetry.proto.logs.v1.ScopeLogs\n                     * @instance\n                     */\n                    ScopeLogs.prototype.scope = null;\n\n                    /**\n                     * ScopeLogs logRecords.\n                     * @member {Array.<opentelemetry.proto.logs.v1.ILogRecord>} logRecords\n                     * @memberof opentelemetry.proto.logs.v1.ScopeLogs\n                     * @instance\n                     */\n                    ScopeLogs.prototype.logRecords = $util.emptyArray;\n\n                    /**\n                     * ScopeLogs schemaUrl.\n                     * @member {string|null|undefined} schemaUrl\n                     * @memberof opentelemetry.proto.logs.v1.ScopeLogs\n                     * @instance\n                     */\n                    ScopeLogs.prototype.schemaUrl = null;\n\n                    /**\n                     * Creates a new ScopeLogs instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.logs.v1.ScopeLogs\n                     * @static\n                     * @param {opentelemetry.proto.logs.v1.IScopeLogs=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.logs.v1.ScopeLogs} ScopeLogs instance\n                     */\n                    ScopeLogs.create = function create(properties) {\n                        return new ScopeLogs(properties);\n                    };\n\n                    /**\n                     * Encodes the specified ScopeLogs message. Does not implicitly {@link opentelemetry.proto.logs.v1.ScopeLogs.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.logs.v1.ScopeLogs\n                     * @static\n                     * @param {opentelemetry.proto.logs.v1.IScopeLogs} message ScopeLogs message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    ScopeLogs.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.scope != null && Object.hasOwnProperty.call(message, \"scope\"))\n                            $root.opentelemetry.proto.common.v1.InstrumentationScope.encode(message.scope, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                        if (message.logRecords != null && message.logRecords.length)\n                            for (var i = 0; i < message.logRecords.length; ++i)\n                                $root.opentelemetry.proto.logs.v1.LogRecord.encode(message.logRecords[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                        if (message.schemaUrl != null && Object.hasOwnProperty.call(message, \"schemaUrl\"))\n                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.schemaUrl);\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified ScopeLogs message, length delimited. Does not implicitly {@link opentelemetry.proto.logs.v1.ScopeLogs.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.logs.v1.ScopeLogs\n                     * @static\n                     * @param {opentelemetry.proto.logs.v1.IScopeLogs} message ScopeLogs message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    ScopeLogs.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes a ScopeLogs message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.logs.v1.ScopeLogs\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.logs.v1.ScopeLogs} ScopeLogs\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    ScopeLogs.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.logs.v1.ScopeLogs();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 1: {\n                                    message.scope = $root.opentelemetry.proto.common.v1.InstrumentationScope.decode(reader, reader.uint32());\n                                    break;\n                                }\n                            case 2: {\n                                    if (!(message.logRecords && message.logRecords.length))\n                                        message.logRecords = [];\n                                    message.logRecords.push($root.opentelemetry.proto.logs.v1.LogRecord.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                            case 3: {\n                                    message.schemaUrl = reader.string();\n                                    break;\n                                }\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes a ScopeLogs message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.logs.v1.ScopeLogs\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.logs.v1.ScopeLogs} ScopeLogs\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    ScopeLogs.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies a ScopeLogs message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.logs.v1.ScopeLogs\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    ScopeLogs.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.scope != null && message.hasOwnProperty(\"scope\")) {\n                            var error = $root.opentelemetry.proto.common.v1.InstrumentationScope.verify(message.scope);\n                            if (error)\n                                return \"scope.\" + error;\n                        }\n                        if (message.logRecords != null && message.hasOwnProperty(\"logRecords\")) {\n                            if (!Array.isArray(message.logRecords))\n                                return \"logRecords: array expected\";\n                            for (var i = 0; i < message.logRecords.length; ++i) {\n                                var error = $root.opentelemetry.proto.logs.v1.LogRecord.verify(message.logRecords[i]);\n                                if (error)\n                                    return \"logRecords.\" + error;\n                            }\n                        }\n                        if (message.schemaUrl != null && message.hasOwnProperty(\"schemaUrl\"))\n                            if (!$util.isString(message.schemaUrl))\n                                return \"schemaUrl: string expected\";\n                        return null;\n                    };\n\n                    /**\n                     * Creates a ScopeLogs message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.logs.v1.ScopeLogs\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.logs.v1.ScopeLogs} ScopeLogs\n                     */\n                    ScopeLogs.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.logs.v1.ScopeLogs)\n                            return object;\n                        var message = new $root.opentelemetry.proto.logs.v1.ScopeLogs();\n                        if (object.scope != null) {\n                            if (typeof object.scope !== \"object\")\n                                throw TypeError(\".opentelemetry.proto.logs.v1.ScopeLogs.scope: object expected\");\n                            message.scope = $root.opentelemetry.proto.common.v1.InstrumentationScope.fromObject(object.scope);\n                        }\n                        if (object.logRecords) {\n                            if (!Array.isArray(object.logRecords))\n                                throw TypeError(\".opentelemetry.proto.logs.v1.ScopeLogs.logRecords: array expected\");\n                            message.logRecords = [];\n                            for (var i = 0; i < object.logRecords.length; ++i) {\n                                if (typeof object.logRecords[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.logs.v1.ScopeLogs.logRecords: object expected\");\n                                message.logRecords[i] = $root.opentelemetry.proto.logs.v1.LogRecord.fromObject(object.logRecords[i]);\n                            }\n                        }\n                        if (object.schemaUrl != null)\n                            message.schemaUrl = String(object.schemaUrl);\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from a ScopeLogs message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.logs.v1.ScopeLogs\n                     * @static\n                     * @param {opentelemetry.proto.logs.v1.ScopeLogs} message ScopeLogs\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    ScopeLogs.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults)\n                            object.logRecords = [];\n                        if (options.defaults) {\n                            object.scope = null;\n                            object.schemaUrl = \"\";\n                        }\n                        if (message.scope != null && message.hasOwnProperty(\"scope\"))\n                            object.scope = $root.opentelemetry.proto.common.v1.InstrumentationScope.toObject(message.scope, options);\n                        if (message.logRecords && message.logRecords.length) {\n                            object.logRecords = [];\n                            for (var j = 0; j < message.logRecords.length; ++j)\n                                object.logRecords[j] = $root.opentelemetry.proto.logs.v1.LogRecord.toObject(message.logRecords[j], options);\n                        }\n                        if (message.schemaUrl != null && message.hasOwnProperty(\"schemaUrl\"))\n                            object.schemaUrl = message.schemaUrl;\n                        return object;\n                    };\n\n                    /**\n                     * Converts this ScopeLogs to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.logs.v1.ScopeLogs\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    ScopeLogs.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    /**\n                     * Gets the default type url for ScopeLogs\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.logs.v1.ScopeLogs\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    ScopeLogs.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.logs.v1.ScopeLogs\";\n                    };\n\n                    return ScopeLogs;\n                })();\n\n                /**\n                 * SeverityNumber enum.\n                 * @name opentelemetry.proto.logs.v1.SeverityNumber\n                 * @enum {number}\n                 * @property {number} SEVERITY_NUMBER_UNSPECIFIED=0 SEVERITY_NUMBER_UNSPECIFIED value\n                 * @property {number} SEVERITY_NUMBER_TRACE=1 SEVERITY_NUMBER_TRACE value\n                 * @property {number} SEVERITY_NUMBER_TRACE2=2 SEVERITY_NUMBER_TRACE2 value\n                 * @property {number} SEVERITY_NUMBER_TRACE3=3 SEVERITY_NUMBER_TRACE3 value\n                 * @property {number} SEVERITY_NUMBER_TRACE4=4 SEVERITY_NUMBER_TRACE4 value\n                 * @property {number} SEVERITY_NUMBER_DEBUG=5 SEVERITY_NUMBER_DEBUG value\n                 * @property {number} SEVERITY_NUMBER_DEBUG2=6 SEVERITY_NUMBER_DEBUG2 value\n                 * @property {number} SEVERITY_NUMBER_DEBUG3=7 SEVERITY_NUMBER_DEBUG3 value\n                 * @property {number} SEVERITY_NUMBER_DEBUG4=8 SEVERITY_NUMBER_DEBUG4 value\n                 * @property {number} SEVERITY_NUMBER_INFO=9 SEVERITY_NUMBER_INFO value\n                 * @property {number} SEVERITY_NUMBER_INFO2=10 SEVERITY_NUMBER_INFO2 value\n                 * @property {number} SEVERITY_NUMBER_INFO3=11 SEVERITY_NUMBER_INFO3 value\n                 * @property {number} SEVERITY_NUMBER_INFO4=12 SEVERITY_NUMBER_INFO4 value\n                 * @property {number} SEVERITY_NUMBER_WARN=13 SEVERITY_NUMBER_WARN value\n                 * @property {number} SEVERITY_NUMBER_WARN2=14 SEVERITY_NUMBER_WARN2 value\n                 * @property {number} SEVERITY_NUMBER_WARN3=15 SEVERITY_NUMBER_WARN3 value\n                 * @property {number} SEVERITY_NUMBER_WARN4=16 SEVERITY_NUMBER_WARN4 value\n                 * @property {number} SEVERITY_NUMBER_ERROR=17 SEVERITY_NUMBER_ERROR value\n                 * @property {number} SEVERITY_NUMBER_ERROR2=18 SEVERITY_NUMBER_ERROR2 value\n                 * @property {number} SEVERITY_NUMBER_ERROR3=19 SEVERITY_NUMBER_ERROR3 value\n                 * @property {number} SEVERITY_NUMBER_ERROR4=20 SEVERITY_NUMBER_ERROR4 value\n                 * @property {number} SEVERITY_NUMBER_FATAL=21 SEVERITY_NUMBER_FATAL value\n                 * @property {number} SEVERITY_NUMBER_FATAL2=22 SEVERITY_NUMBER_FATAL2 value\n                 * @property {number} SEVERITY_NUMBER_FATAL3=23 SEVERITY_NUMBER_FATAL3 value\n                 * @property {number} SEVERITY_NUMBER_FATAL4=24 SEVERITY_NUMBER_FATAL4 value\n                 */\n                v1.SeverityNumber = (function() {\n                    var valuesById = {}, values = Object.create(valuesById);\n                    values[valuesById[0] = \"SEVERITY_NUMBER_UNSPECIFIED\"] = 0;\n                    values[valuesById[1] = \"SEVERITY_NUMBER_TRACE\"] = 1;\n                    values[valuesById[2] = \"SEVERITY_NUMBER_TRACE2\"] = 2;\n                    values[valuesById[3] = \"SEVERITY_NUMBER_TRACE3\"] = 3;\n                    values[valuesById[4] = \"SEVERITY_NUMBER_TRACE4\"] = 4;\n                    values[valuesById[5] = \"SEVERITY_NUMBER_DEBUG\"] = 5;\n                    values[valuesById[6] = \"SEVERITY_NUMBER_DEBUG2\"] = 6;\n                    values[valuesById[7] = \"SEVERITY_NUMBER_DEBUG3\"] = 7;\n                    values[valuesById[8] = \"SEVERITY_NUMBER_DEBUG4\"] = 8;\n                    values[valuesById[9] = \"SEVERITY_NUMBER_INFO\"] = 9;\n                    values[valuesById[10] = \"SEVERITY_NUMBER_INFO2\"] = 10;\n                    values[valuesById[11] = \"SEVERITY_NUMBER_INFO3\"] = 11;\n                    values[valuesById[12] = \"SEVERITY_NUMBER_INFO4\"] = 12;\n                    values[valuesById[13] = \"SEVERITY_NUMBER_WARN\"] = 13;\n                    values[valuesById[14] = \"SEVERITY_NUMBER_WARN2\"] = 14;\n                    values[valuesById[15] = \"SEVERITY_NUMBER_WARN3\"] = 15;\n                    values[valuesById[16] = \"SEVERITY_NUMBER_WARN4\"] = 16;\n                    values[valuesById[17] = \"SEVERITY_NUMBER_ERROR\"] = 17;\n                    values[valuesById[18] = \"SEVERITY_NUMBER_ERROR2\"] = 18;\n                    values[valuesById[19] = \"SEVERITY_NUMBER_ERROR3\"] = 19;\n                    values[valuesById[20] = \"SEVERITY_NUMBER_ERROR4\"] = 20;\n                    values[valuesById[21] = \"SEVERITY_NUMBER_FATAL\"] = 21;\n                    values[valuesById[22] = \"SEVERITY_NUMBER_FATAL2\"] = 22;\n                    values[valuesById[23] = \"SEVERITY_NUMBER_FATAL3\"] = 23;\n                    values[valuesById[24] = \"SEVERITY_NUMBER_FATAL4\"] = 24;\n                    return values;\n                })();\n\n                /**\n                 * LogRecordFlags enum.\n                 * @name opentelemetry.proto.logs.v1.LogRecordFlags\n                 * @enum {number}\n                 * @property {number} LOG_RECORD_FLAGS_DO_NOT_USE=0 LOG_RECORD_FLAGS_DO_NOT_USE value\n                 * @property {number} LOG_RECORD_FLAGS_TRACE_FLAGS_MASK=255 LOG_RECORD_FLAGS_TRACE_FLAGS_MASK value\n                 */\n                v1.LogRecordFlags = (function() {\n                    var valuesById = {}, values = Object.create(valuesById);\n                    values[valuesById[0] = \"LOG_RECORD_FLAGS_DO_NOT_USE\"] = 0;\n                    values[valuesById[255] = \"LOG_RECORD_FLAGS_TRACE_FLAGS_MASK\"] = 255;\n                    return values;\n                })();\n\n                v1.LogRecord = (function() {\n\n                    /**\n                     * Properties of a LogRecord.\n                     * @memberof opentelemetry.proto.logs.v1\n                     * @interface ILogRecord\n                     * @property {number|Long|null} [timeUnixNano] LogRecord timeUnixNano\n                     * @property {number|Long|null} [observedTimeUnixNano] LogRecord observedTimeUnixNano\n                     * @property {opentelemetry.proto.logs.v1.SeverityNumber|null} [severityNumber] LogRecord severityNumber\n                     * @property {string|null} [severityText] LogRecord severityText\n                     * @property {opentelemetry.proto.common.v1.IAnyValue|null} [body] LogRecord body\n                     * @property {Array.<opentelemetry.proto.common.v1.IKeyValue>|null} [attributes] LogRecord attributes\n                     * @property {number|null} [droppedAttributesCount] LogRecord droppedAttributesCount\n                     * @property {number|null} [flags] LogRecord flags\n                     * @property {Uint8Array|null} [traceId] LogRecord traceId\n                     * @property {Uint8Array|null} [spanId] LogRecord spanId\n                     */\n\n                    /**\n                     * Constructs a new LogRecord.\n                     * @memberof opentelemetry.proto.logs.v1\n                     * @classdesc Represents a LogRecord.\n                     * @implements ILogRecord\n                     * @constructor\n                     * @param {opentelemetry.proto.logs.v1.ILogRecord=} [properties] Properties to set\n                     */\n                    function LogRecord(properties) {\n                        this.attributes = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * LogRecord timeUnixNano.\n                     * @member {number|Long|null|undefined} timeUnixNano\n                     * @memberof opentelemetry.proto.logs.v1.LogRecord\n                     * @instance\n                     */\n                    LogRecord.prototype.timeUnixNano = null;\n\n                    /**\n                     * LogRecord observedTimeUnixNano.\n                     * @member {number|Long|null|undefined} observedTimeUnixNano\n                     * @memberof opentelemetry.proto.logs.v1.LogRecord\n                     * @instance\n                     */\n                    LogRecord.prototype.observedTimeUnixNano = null;\n\n                    /**\n                     * LogRecord severityNumber.\n                     * @member {opentelemetry.proto.logs.v1.SeverityNumber|null|undefined} severityNumber\n                     * @memberof opentelemetry.proto.logs.v1.LogRecord\n                     * @instance\n                     */\n                    LogRecord.prototype.severityNumber = null;\n\n                    /**\n                     * LogRecord severityText.\n                     * @member {string|null|undefined} severityText\n                     * @memberof opentelemetry.proto.logs.v1.LogRecord\n                     * @instance\n                     */\n                    LogRecord.prototype.severityText = null;\n\n                    /**\n                     * LogRecord body.\n                     * @member {opentelemetry.proto.common.v1.IAnyValue|null|undefined} body\n                     * @memberof opentelemetry.proto.logs.v1.LogRecord\n                     * @instance\n                     */\n                    LogRecord.prototype.body = null;\n\n                    /**\n                     * LogRecord attributes.\n                     * @member {Array.<opentelemetry.proto.common.v1.IKeyValue>} attributes\n                     * @memberof opentelemetry.proto.logs.v1.LogRecord\n                     * @instance\n                     */\n                    LogRecord.prototype.attributes = $util.emptyArray;\n\n                    /**\n                     * LogRecord droppedAttributesCount.\n                     * @member {number|null|undefined} droppedAttributesCount\n                     * @memberof opentelemetry.proto.logs.v1.LogRecord\n                     * @instance\n                     */\n                    LogRecord.prototype.droppedAttributesCount = null;\n\n                    /**\n                     * LogRecord flags.\n                     * @member {number|null|undefined} flags\n                     * @memberof opentelemetry.proto.logs.v1.LogRecord\n                     * @instance\n                     */\n                    LogRecord.prototype.flags = null;\n\n                    /**\n                     * LogRecord traceId.\n                     * @member {Uint8Array|null|undefined} traceId\n                     * @memberof opentelemetry.proto.logs.v1.LogRecord\n                     * @instance\n                     */\n                    LogRecord.prototype.traceId = null;\n\n                    /**\n                     * LogRecord spanId.\n                     * @member {Uint8Array|null|undefined} spanId\n                     * @memberof opentelemetry.proto.logs.v1.LogRecord\n                     * @instance\n                     */\n                    LogRecord.prototype.spanId = null;\n\n                    /**\n                     * Creates a new LogRecord instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.logs.v1.LogRecord\n                     * @static\n                     * @param {opentelemetry.proto.logs.v1.ILogRecord=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.logs.v1.LogRecord} LogRecord instance\n                     */\n                    LogRecord.create = function create(properties) {\n                        return new LogRecord(properties);\n                    };\n\n                    /**\n                     * Encodes the specified LogRecord message. Does not implicitly {@link opentelemetry.proto.logs.v1.LogRecord.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.logs.v1.LogRecord\n                     * @static\n                     * @param {opentelemetry.proto.logs.v1.ILogRecord} message LogRecord message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    LogRecord.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.timeUnixNano != null && Object.hasOwnProperty.call(message, \"timeUnixNano\"))\n                            writer.uint32(/* id 1, wireType 1 =*/9).fixed64(message.timeUnixNano);\n                        if (message.severityNumber != null && Object.hasOwnProperty.call(message, \"severityNumber\"))\n                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.severityNumber);\n                        if (message.severityText != null && Object.hasOwnProperty.call(message, \"severityText\"))\n                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.severityText);\n                        if (message.body != null && Object.hasOwnProperty.call(message, \"body\"))\n                            $root.opentelemetry.proto.common.v1.AnyValue.encode(message.body, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n                        if (message.attributes != null && message.attributes.length)\n                            for (var i = 0; i < message.attributes.length; ++i)\n                                $root.opentelemetry.proto.common.v1.KeyValue.encode(message.attributes[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();\n                        if (message.droppedAttributesCount != null && Object.hasOwnProperty.call(message, \"droppedAttributesCount\"))\n                            writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.droppedAttributesCount);\n                        if (message.flags != null && Object.hasOwnProperty.call(message, \"flags\"))\n                            writer.uint32(/* id 8, wireType 5 =*/69).fixed32(message.flags);\n                        if (message.traceId != null && Object.hasOwnProperty.call(message, \"traceId\"))\n                            writer.uint32(/* id 9, wireType 2 =*/74).bytes(message.traceId);\n                        if (message.spanId != null && Object.hasOwnProperty.call(message, \"spanId\"))\n                            writer.uint32(/* id 10, wireType 2 =*/82).bytes(message.spanId);\n                        if (message.observedTimeUnixNano != null && Object.hasOwnProperty.call(message, \"observedTimeUnixNano\"))\n                            writer.uint32(/* id 11, wireType 1 =*/89).fixed64(message.observedTimeUnixNano);\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified LogRecord message, length delimited. Does not implicitly {@link opentelemetry.proto.logs.v1.LogRecord.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.logs.v1.LogRecord\n                     * @static\n                     * @param {opentelemetry.proto.logs.v1.ILogRecord} message LogRecord message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    LogRecord.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes a LogRecord message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.logs.v1.LogRecord\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.logs.v1.LogRecord} LogRecord\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    LogRecord.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.logs.v1.LogRecord();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 1: {\n                                    message.timeUnixNano = reader.fixed64();\n                                    break;\n                                }\n                            case 11: {\n                                    message.observedTimeUnixNano = reader.fixed64();\n                                    break;\n                                }\n                            case 2: {\n                                    message.severityNumber = reader.int32();\n                                    break;\n                                }\n                            case 3: {\n                                    message.severityText = reader.string();\n                                    break;\n                                }\n                            case 5: {\n                                    message.body = $root.opentelemetry.proto.common.v1.AnyValue.decode(reader, reader.uint32());\n                                    break;\n                                }\n                            case 6: {\n                                    if (!(message.attributes && message.attributes.length))\n                                        message.attributes = [];\n                                    message.attributes.push($root.opentelemetry.proto.common.v1.KeyValue.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                            case 7: {\n                                    message.droppedAttributesCount = reader.uint32();\n                                    break;\n                                }\n                            case 8: {\n                                    message.flags = reader.fixed32();\n                                    break;\n                                }\n                            case 9: {\n                                    message.traceId = reader.bytes();\n                                    break;\n                                }\n                            case 10: {\n                                    message.spanId = reader.bytes();\n                                    break;\n                                }\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes a LogRecord message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.logs.v1.LogRecord\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.logs.v1.LogRecord} LogRecord\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    LogRecord.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies a LogRecord message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.logs.v1.LogRecord\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    LogRecord.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.timeUnixNano != null && message.hasOwnProperty(\"timeUnixNano\"))\n                            if (!$util.isInteger(message.timeUnixNano) && !(message.timeUnixNano && $util.isInteger(message.timeUnixNano.low) && $util.isInteger(message.timeUnixNano.high)))\n                                return \"timeUnixNano: integer|Long expected\";\n                        if (message.observedTimeUnixNano != null && message.hasOwnProperty(\"observedTimeUnixNano\"))\n                            if (!$util.isInteger(message.observedTimeUnixNano) && !(message.observedTimeUnixNano && $util.isInteger(message.observedTimeUnixNano.low) && $util.isInteger(message.observedTimeUnixNano.high)))\n                                return \"observedTimeUnixNano: integer|Long expected\";\n                        if (message.severityNumber != null && message.hasOwnProperty(\"severityNumber\"))\n                            switch (message.severityNumber) {\n                            default:\n                                return \"severityNumber: enum value expected\";\n                            case 0:\n                            case 1:\n                            case 2:\n                            case 3:\n                            case 4:\n                            case 5:\n                            case 6:\n                            case 7:\n                            case 8:\n                            case 9:\n                            case 10:\n                            case 11:\n                            case 12:\n                            case 13:\n                            case 14:\n                            case 15:\n                            case 16:\n                            case 17:\n                            case 18:\n                            case 19:\n                            case 20:\n                            case 21:\n                            case 22:\n                            case 23:\n                            case 24:\n                                break;\n                            }\n                        if (message.severityText != null && message.hasOwnProperty(\"severityText\"))\n                            if (!$util.isString(message.severityText))\n                                return \"severityText: string expected\";\n                        if (message.body != null && message.hasOwnProperty(\"body\")) {\n                            var error = $root.opentelemetry.proto.common.v1.AnyValue.verify(message.body);\n                            if (error)\n                                return \"body.\" + error;\n                        }\n                        if (message.attributes != null && message.hasOwnProperty(\"attributes\")) {\n                            if (!Array.isArray(message.attributes))\n                                return \"attributes: array expected\";\n                            for (var i = 0; i < message.attributes.length; ++i) {\n                                var error = $root.opentelemetry.proto.common.v1.KeyValue.verify(message.attributes[i]);\n                                if (error)\n                                    return \"attributes.\" + error;\n                            }\n                        }\n                        if (message.droppedAttributesCount != null && message.hasOwnProperty(\"droppedAttributesCount\"))\n                            if (!$util.isInteger(message.droppedAttributesCount))\n                                return \"droppedAttributesCount: integer expected\";\n                        if (message.flags != null && message.hasOwnProperty(\"flags\"))\n                            if (!$util.isInteger(message.flags))\n                                return \"flags: integer expected\";\n                        if (message.traceId != null && message.hasOwnProperty(\"traceId\"))\n                            if (!(message.traceId && typeof message.traceId.length === \"number\" || $util.isString(message.traceId)))\n                                return \"traceId: buffer expected\";\n                        if (message.spanId != null && message.hasOwnProperty(\"spanId\"))\n                            if (!(message.spanId && typeof message.spanId.length === \"number\" || $util.isString(message.spanId)))\n                                return \"spanId: buffer expected\";\n                        return null;\n                    };\n\n                    /**\n                     * Creates a LogRecord message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.logs.v1.LogRecord\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.logs.v1.LogRecord} LogRecord\n                     */\n                    LogRecord.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.logs.v1.LogRecord)\n                            return object;\n                        var message = new $root.opentelemetry.proto.logs.v1.LogRecord();\n                        if (object.timeUnixNano != null)\n                            if ($util.Long)\n                                (message.timeUnixNano = $util.Long.fromValue(object.timeUnixNano)).unsigned = false;\n                            else if (typeof object.timeUnixNano === \"string\")\n                                message.timeUnixNano = parseInt(object.timeUnixNano, 10);\n                            else if (typeof object.timeUnixNano === \"number\")\n                                message.timeUnixNano = object.timeUnixNano;\n                            else if (typeof object.timeUnixNano === \"object\")\n                                message.timeUnixNano = new $util.LongBits(object.timeUnixNano.low >>> 0, object.timeUnixNano.high >>> 0).toNumber();\n                        if (object.observedTimeUnixNano != null)\n                            if ($util.Long)\n                                (message.observedTimeUnixNano = $util.Long.fromValue(object.observedTimeUnixNano)).unsigned = false;\n                            else if (typeof object.observedTimeUnixNano === \"string\")\n                                message.observedTimeUnixNano = parseInt(object.observedTimeUnixNano, 10);\n                            else if (typeof object.observedTimeUnixNano === \"number\")\n                                message.observedTimeUnixNano = object.observedTimeUnixNano;\n                            else if (typeof object.observedTimeUnixNano === \"object\")\n                                message.observedTimeUnixNano = new $util.LongBits(object.observedTimeUnixNano.low >>> 0, object.observedTimeUnixNano.high >>> 0).toNumber();\n                        switch (object.severityNumber) {\n                        default:\n                            if (typeof object.severityNumber === \"number\") {\n                                message.severityNumber = object.severityNumber;\n                                break;\n                            }\n                            break;\n                        case \"SEVERITY_NUMBER_UNSPECIFIED\":\n                        case 0:\n                            message.severityNumber = 0;\n                            break;\n                        case \"SEVERITY_NUMBER_TRACE\":\n                        case 1:\n                            message.severityNumber = 1;\n                            break;\n                        case \"SEVERITY_NUMBER_TRACE2\":\n                        case 2:\n                            message.severityNumber = 2;\n                            break;\n                        case \"SEVERITY_NUMBER_TRACE3\":\n                        case 3:\n                            message.severityNumber = 3;\n                            break;\n                        case \"SEVERITY_NUMBER_TRACE4\":\n                        case 4:\n                            message.severityNumber = 4;\n                            break;\n                        case \"SEVERITY_NUMBER_DEBUG\":\n                        case 5:\n                            message.severityNumber = 5;\n                            break;\n                        case \"SEVERITY_NUMBER_DEBUG2\":\n                        case 6:\n                            message.severityNumber = 6;\n                            break;\n                        case \"SEVERITY_NUMBER_DEBUG3\":\n                        case 7:\n                            message.severityNumber = 7;\n                            break;\n                        case \"SEVERITY_NUMBER_DEBUG4\":\n                        case 8:\n                            message.severityNumber = 8;\n                            break;\n                        case \"SEVERITY_NUMBER_INFO\":\n                        case 9:\n                            message.severityNumber = 9;\n                            break;\n                        case \"SEVERITY_NUMBER_INFO2\":\n                        case 10:\n                            message.severityNumber = 10;\n                            break;\n                        case \"SEVERITY_NUMBER_INFO3\":\n                        case 11:\n                            message.severityNumber = 11;\n                            break;\n                        case \"SEVERITY_NUMBER_INFO4\":\n                        case 12:\n                            message.severityNumber = 12;\n                            break;\n                        case \"SEVERITY_NUMBER_WARN\":\n                        case 13:\n                            message.severityNumber = 13;\n                            break;\n                        case \"SEVERITY_NUMBER_WARN2\":\n                        case 14:\n                            message.severityNumber = 14;\n                            break;\n                        case \"SEVERITY_NUMBER_WARN3\":\n                        case 15:\n                            message.severityNumber = 15;\n                            break;\n                        case \"SEVERITY_NUMBER_WARN4\":\n                        case 16:\n                            message.severityNumber = 16;\n                            break;\n                        case \"SEVERITY_NUMBER_ERROR\":\n                        case 17:\n                            message.severityNumber = 17;\n                            break;\n                        case \"SEVERITY_NUMBER_ERROR2\":\n                        case 18:\n                            message.severityNumber = 18;\n                            break;\n                        case \"SEVERITY_NUMBER_ERROR3\":\n                        case 19:\n                            message.severityNumber = 19;\n                            break;\n                        case \"SEVERITY_NUMBER_ERROR4\":\n                        case 20:\n                            message.severityNumber = 20;\n                            break;\n                        case \"SEVERITY_NUMBER_FATAL\":\n                        case 21:\n                            message.severityNumber = 21;\n                            break;\n                        case \"SEVERITY_NUMBER_FATAL2\":\n                        case 22:\n                            message.severityNumber = 22;\n                            break;\n                        case \"SEVERITY_NUMBER_FATAL3\":\n                        case 23:\n                            message.severityNumber = 23;\n                            break;\n                        case \"SEVERITY_NUMBER_FATAL4\":\n                        case 24:\n                            message.severityNumber = 24;\n                            break;\n                        }\n                        if (object.severityText != null)\n                            message.severityText = String(object.severityText);\n                        if (object.body != null) {\n                            if (typeof object.body !== \"object\")\n                                throw TypeError(\".opentelemetry.proto.logs.v1.LogRecord.body: object expected\");\n                            message.body = $root.opentelemetry.proto.common.v1.AnyValue.fromObject(object.body);\n                        }\n                        if (object.attributes) {\n                            if (!Array.isArray(object.attributes))\n                                throw TypeError(\".opentelemetry.proto.logs.v1.LogRecord.attributes: array expected\");\n                            message.attributes = [];\n                            for (var i = 0; i < object.attributes.length; ++i) {\n                                if (typeof object.attributes[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.logs.v1.LogRecord.attributes: object expected\");\n                                message.attributes[i] = $root.opentelemetry.proto.common.v1.KeyValue.fromObject(object.attributes[i]);\n                            }\n                        }\n                        if (object.droppedAttributesCount != null)\n                            message.droppedAttributesCount = object.droppedAttributesCount >>> 0;\n                        if (object.flags != null)\n                            message.flags = object.flags >>> 0;\n                        if (object.traceId != null)\n                            if (typeof object.traceId === \"string\")\n                                $util.base64.decode(object.traceId, message.traceId = $util.newBuffer($util.base64.length(object.traceId)), 0);\n                            else if (object.traceId.length >= 0)\n                                message.traceId = object.traceId;\n                        if (object.spanId != null)\n                            if (typeof object.spanId === \"string\")\n                                $util.base64.decode(object.spanId, message.spanId = $util.newBuffer($util.base64.length(object.spanId)), 0);\n                            else if (object.spanId.length >= 0)\n                                message.spanId = object.spanId;\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from a LogRecord message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.logs.v1.LogRecord\n                     * @static\n                     * @param {opentelemetry.proto.logs.v1.LogRecord} message LogRecord\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    LogRecord.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults)\n                            object.attributes = [];\n                        if (options.defaults) {\n                            if ($util.Long) {\n                                var long = new $util.Long(0, 0, false);\n                                object.timeUnixNano = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                            } else\n                                object.timeUnixNano = options.longs === String ? \"0\" : 0;\n                            object.severityNumber = options.enums === String ? \"SEVERITY_NUMBER_UNSPECIFIED\" : 0;\n                            object.severityText = \"\";\n                            object.body = null;\n                            object.droppedAttributesCount = 0;\n                            object.flags = 0;\n                            if (options.bytes === String)\n                                object.traceId = \"\";\n                            else {\n                                object.traceId = [];\n                                if (options.bytes !== Array)\n                                    object.traceId = $util.newBuffer(object.traceId);\n                            }\n                            if (options.bytes === String)\n                                object.spanId = \"\";\n                            else {\n                                object.spanId = [];\n                                if (options.bytes !== Array)\n                                    object.spanId = $util.newBuffer(object.spanId);\n                            }\n                            if ($util.Long) {\n                                var long = new $util.Long(0, 0, false);\n                                object.observedTimeUnixNano = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                            } else\n                                object.observedTimeUnixNano = options.longs === String ? \"0\" : 0;\n                        }\n                        if (message.timeUnixNano != null && message.hasOwnProperty(\"timeUnixNano\"))\n                            if (typeof message.timeUnixNano === \"number\")\n                                object.timeUnixNano = options.longs === String ? String(message.timeUnixNano) : message.timeUnixNano;\n                            else\n                                object.timeUnixNano = options.longs === String ? $util.Long.prototype.toString.call(message.timeUnixNano) : options.longs === Number ? new $util.LongBits(message.timeUnixNano.low >>> 0, message.timeUnixNano.high >>> 0).toNumber() : message.timeUnixNano;\n                        if (message.severityNumber != null && message.hasOwnProperty(\"severityNumber\"))\n                            object.severityNumber = options.enums === String ? $root.opentelemetry.proto.logs.v1.SeverityNumber[message.severityNumber] === undefined ? message.severityNumber : $root.opentelemetry.proto.logs.v1.SeverityNumber[message.severityNumber] : message.severityNumber;\n                        if (message.severityText != null && message.hasOwnProperty(\"severityText\"))\n                            object.severityText = message.severityText;\n                        if (message.body != null && message.hasOwnProperty(\"body\"))\n                            object.body = $root.opentelemetry.proto.common.v1.AnyValue.toObject(message.body, options);\n                        if (message.attributes && message.attributes.length) {\n                            object.attributes = [];\n                            for (var j = 0; j < message.attributes.length; ++j)\n                                object.attributes[j] = $root.opentelemetry.proto.common.v1.KeyValue.toObject(message.attributes[j], options);\n                        }\n                        if (message.droppedAttributesCount != null && message.hasOwnProperty(\"droppedAttributesCount\"))\n                            object.droppedAttributesCount = message.droppedAttributesCount;\n                        if (message.flags != null && message.hasOwnProperty(\"flags\"))\n                            object.flags = message.flags;\n                        if (message.traceId != null && message.hasOwnProperty(\"traceId\"))\n                            object.traceId = options.bytes === String ? $util.base64.encode(message.traceId, 0, message.traceId.length) : options.bytes === Array ? Array.prototype.slice.call(message.traceId) : message.traceId;\n                        if (message.spanId != null && message.hasOwnProperty(\"spanId\"))\n                            object.spanId = options.bytes === String ? $util.base64.encode(message.spanId, 0, message.spanId.length) : options.bytes === Array ? Array.prototype.slice.call(message.spanId) : message.spanId;\n                        if (message.observedTimeUnixNano != null && message.hasOwnProperty(\"observedTimeUnixNano\"))\n                            if (typeof message.observedTimeUnixNano === \"number\")\n                                object.observedTimeUnixNano = options.longs === String ? String(message.observedTimeUnixNano) : message.observedTimeUnixNano;\n                            else\n                                object.observedTimeUnixNano = options.longs === String ? $util.Long.prototype.toString.call(message.observedTimeUnixNano) : options.longs === Number ? new $util.LongBits(message.observedTimeUnixNano.low >>> 0, message.observedTimeUnixNano.high >>> 0).toNumber() : message.observedTimeUnixNano;\n                        return object;\n                    };\n\n                    /**\n                     * Converts this LogRecord to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.logs.v1.LogRecord\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    LogRecord.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    /**\n                     * Gets the default type url for LogRecord\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.logs.v1.LogRecord\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    LogRecord.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.logs.v1.LogRecord\";\n                    };\n\n                    return LogRecord;\n                })();\n\n                return v1;\n            })();\n\n            return logs;\n        })();\n\n        return proto;\n    })();\n\n    return opentelemetry;\n})();\n\nmodule.exports = $root;\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as root from '../generated/root';\nimport { ISerializer } from '../common/i-serializer';\nimport {\n  IExportMetricsServiceRequest,\n  IExportMetricsServiceResponse,\n} from '../metrics/types';\nimport { ExportType } from './protobuf-export-type';\nimport {\n  IExportTraceServiceRequest,\n  IExportTraceServiceResponse,\n} from '../trace/types';\nimport {\n  IExportLogsServiceRequest,\n  IExportLogsServiceResponse,\n} from '../logs/types';\nimport { ReadableSpan } from '@opentelemetry/sdk-trace-base';\nimport { createExportTraceServiceRequest } from '../trace';\nimport { createExportMetricsServiceRequest } from '../metrics';\nimport { ResourceMetrics } from '@opentelemetry/sdk-metrics';\nimport { createExportLogsServiceRequest } from '../logs';\nimport { ReadableLogRecord } from '@opentelemetry/sdk-logs';\n\nconst logsResponseType = root.opentelemetry.proto.collector.logs.v1\n  .ExportLogsServiceResponse as ExportType<IExportLogsServiceResponse>;\n\nconst logsRequestType = root.opentelemetry.proto.collector.logs.v1\n  .ExportLogsServiceRequest as ExportType<IExportLogsServiceRequest>;\n\nconst metricsResponseType = root.opentelemetry.proto.collector.metrics.v1\n  .ExportMetricsServiceResponse as ExportType<IExportMetricsServiceResponse>;\n\nconst metricsRequestType = root.opentelemetry.proto.collector.metrics.v1\n  .ExportMetricsServiceRequest as ExportType<IExportMetricsServiceRequest>;\n\nconst traceResponseType = root.opentelemetry.proto.collector.trace.v1\n  .ExportTraceServiceResponse as ExportType<IExportTraceServiceResponse>;\n\nconst traceRequestType = root.opentelemetry.proto.collector.trace.v1\n  .ExportTraceServiceRequest as ExportType<IExportTraceServiceRequest>;\n\nexport const ProtobufLogsSerializer: ISerializer<\n  ReadableLogRecord[],\n  IExportLogsServiceResponse\n> = {\n  serializeRequest: (arg: ReadableLogRecord[]) => {\n    const request = createExportLogsServiceRequest(arg);\n    return logsRequestType.encode(request).finish();\n  },\n  deserializeResponse: (arg: Uint8Array) => {\n    return logsResponseType.decode(arg);\n  },\n};\n\nexport const ProtobufMetricsSerializer: ISerializer<\n  ResourceMetrics[],\n  IExportMetricsServiceResponse\n> = {\n  serializeRequest: (arg: ResourceMetrics[]) => {\n    const request = createExportMetricsServiceRequest(arg);\n    return metricsRequestType.encode(request).finish();\n  },\n  deserializeResponse: (arg: Uint8Array) => {\n    return metricsResponseType.decode(arg);\n  },\n};\n\nexport const ProtobufTraceSerializer: ISerializer<\n  ReadableSpan[],\n  IExportTraceServiceResponse\n> = {\n  serializeRequest: (arg: ReadableSpan[]) => {\n    const request = createExportTraceServiceRequest(arg);\n    return traceRequestType.encode(request).finish();\n  },\n  deserializeResponse: (arg: Uint8Array) => {\n    return traceResponseType.decode(arg);\n  },\n};\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { ISerializer } from '../common/i-serializer';\nimport { ReadableSpan } from '@opentelemetry/sdk-trace-base';\nimport { IExportTraceServiceResponse } from '../trace/types';\nimport { createExportTraceServiceRequest } from '../trace';\nimport { ResourceMetrics } from '@opentelemetry/sdk-metrics';\nimport { createExportMetricsServiceRequest } from '../metrics';\nimport { ReadableLogRecord } from '@opentelemetry/sdk-logs';\nimport { IExportMetricsServiceResponse } from '../metrics/types';\nimport { IExportLogsServiceResponse } from '../logs/types';\nimport { createExportLogsServiceRequest } from '../logs';\n\nexport const JsonTraceSerializer: ISerializer<\n  ReadableSpan[],\n  IExportTraceServiceResponse\n> = {\n  serializeRequest: (arg: ReadableSpan[]) => {\n    const request = createExportTraceServiceRequest(arg, {\n      useHex: true,\n      useLongBits: false,\n    });\n    const encoder = new TextEncoder();\n    return encoder.encode(JSON.stringify(request));\n  },\n  deserializeResponse: (arg: Uint8Array) => {\n    const decoder = new TextDecoder();\n    return JSON.parse(decoder.decode(arg)) as IExportTraceServiceResponse;\n  },\n};\n\nexport const JsonMetricsSerializer: ISerializer<\n  ResourceMetrics[],\n  IExportMetricsServiceResponse\n> = {\n  serializeRequest: (arg: ResourceMetrics[]) => {\n    const request = createExportMetricsServiceRequest(arg, {\n      useLongBits: false,\n    });\n    const encoder = new TextEncoder();\n    return encoder.encode(JSON.stringify(request));\n  },\n  deserializeResponse: (arg: Uint8Array) => {\n    const decoder = new TextDecoder();\n    return JSON.parse(decoder.decode(arg)) as IExportMetricsServiceResponse;\n  },\n};\n\nexport const JsonLogsSerializer: ISerializer<\n  ReadableLogRecord[],\n  IExportLogsServiceResponse\n> = {\n  serializeRequest: (arg: ReadableLogRecord[]) => {\n    const request = createExportLogsServiceRequest(arg, {\n      useHex: true,\n      useLongBits: false,\n    });\n    const encoder = new TextEncoder();\n    return encoder.encode(JSON.stringify(request));\n  },\n  deserializeResponse: (arg: Uint8Array) => {\n    const decoder = new TextDecoder();\n    return JSON.parse(decoder.decode(arg)) as IExportLogsServiceResponse;\n  },\n};\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport {\n  OtlpEncodingOptions,\n  IKeyValueList,\n  IKeyValue,\n  IInstrumentationScope,\n  IArrayValue,\n  LongBits,\n  IAnyValue,\n  Fixed64,\n} from './common/types';\nexport {\n  SpanContextEncodeFunction,\n  toLongBits,\n  OptionalSpanContextEncodeFunction,\n  getOtlpEncoder,\n  Encoder,\n  HrTimeEncodeFunction,\n  encodeAsLongBits,\n  encodeAsString,\n  hrTimeToNanos,\n} from './common';\nexport {\n  IExportMetricsPartialSuccess,\n  IValueAtQuantile,\n  ISummaryDataPoint,\n  ISummary,\n  ISum,\n  IScopeMetrics,\n  IResourceMetrics,\n  INumberDataPoint,\n  IHistogramDataPoint,\n  IHistogram,\n  IExponentialHistogramDataPoint,\n  IExponentialHistogram,\n  IMetric,\n  IGauge,\n  IExemplar,\n  EAggregationTemporality,\n  IExportMetricsServiceRequest,\n  IExportMetricsServiceResponse,\n  IBuckets,\n} from './metrics/types';\nexport { IResource } from './resource/types';\nexport {\n  IExportTracePartialSuccess,\n  IStatus,\n  EStatusCode,\n  ILink,\n  IEvent,\n  IScopeSpans,\n  ISpan,\n  IResourceSpans,\n  ESpanKind,\n  IExportTraceServiceResponse,\n  IExportTraceServiceRequest,\n} from './trace/types';\nexport {\n  IExportLogsServiceResponse,\n  IScopeLogs,\n  IExportLogsServiceRequest,\n  IResourceLogs,\n  ILogRecord,\n  IExportLogsPartialSuccess,\n  ESeverityNumber,\n} from './logs/types';\n\nexport { createExportTraceServiceRequest } from './trace';\nexport { createExportMetricsServiceRequest } from './metrics';\nexport { createExportLogsServiceRequest } from './logs';\n\nexport {\n  ProtobufLogsSerializer,\n  ProtobufMetricsSerializer,\n  ProtobufTraceSerializer,\n} from './protobuf/serializers';\n\nexport {\n  JsonTraceSerializer,\n  JsonLogsSerializer,\n  JsonMetricsSerializer,\n} from './json/serializers';\n\nexport { ISerializer } from './common/i-serializer';\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getEnv } from '@opentelemetry/core';\nimport {\n  appendResourcePathToUrl,\n  appendRootPathToUrlIfNeeded,\n  OTLPExporterConfigBase,\n} from '@opentelemetry/otlp-exporter-base';\n\nconst DEFAULT_COLLECTOR_RESOURCE_PATH = 'v1/logs';\nexport const DEFAULT_COLLECTOR_URL = `http://localhost:4318/${DEFAULT_COLLECTOR_RESOURCE_PATH}`;\n\n/**\n * common get default url\n * @param config exporter config\n * @returns url string\n */\nexport function getDefaultUrl(config: OTLPExporterConfigBase): string {\n  return typeof config.url === 'string'\n    ? config.url\n    : getEnv().OTEL_EXPORTER_OTLP_LOGS_ENDPOINT.length > 0\n    ? appendRootPathToUrlIfNeeded(getEnv().OTEL_EXPORTER_OTLP_LOGS_ENDPOINT)\n    : getEnv().OTEL_EXPORTER_OTLP_ENDPOINT.length > 0\n    ? appendResourcePathToUrl(\n        getEnv().OTEL_EXPORTER_OTLP_ENDPOINT,\n        DEFAULT_COLLECTOR_RESOURCE_PATH\n      )\n    : DEFAULT_COLLECTOR_URL;\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// this is autogenerated file, see scripts/version-update.js\nexport const VERSION = '0.52.1';\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type {\n  ReadableLogRecord,\n  LogRecordExporter,\n} from '@opentelemetry/sdk-logs';\nimport type { OTLPExporterNodeConfigBase } from '@opentelemetry/otlp-exporter-base';\nimport type { IExportLogsServiceResponse } from '@opentelemetry/otlp-transformer';\nimport { getEnv, baggageUtils } from '@opentelemetry/core';\nimport {\n  OTLPExporterNodeBase,\n  parseHeaders,\n} from '@opentelemetry/otlp-exporter-base';\nimport { JsonLogsSerializer } from '@opentelemetry/otlp-transformer';\n\nimport { getDefaultUrl } from '../config';\nimport { VERSION } from '../../version';\n\nconst USER_AGENT = {\n  'User-Agent': `OTel-OTLP-Exporter-JavaScript/${VERSION}`,\n};\n\n/**\n * Collector Logs Exporter for Node\n */\nexport class OTLPLogExporter\n  extends OTLPExporterNodeBase<ReadableLogRecord, IExportLogsServiceResponse>\n  implements LogRecordExporter\n{\n  constructor(config: OTLPExporterNodeConfigBase = {}) {\n    // load  OTEL_EXPORTER_OTLP_LOGS_TIMEOUT env\n    super(\n      {\n        timeoutMillis: getEnv().OTEL_EXPORTER_OTLP_LOGS_TIMEOUT,\n        ...config,\n      },\n      JsonLogsSerializer,\n      'application/json'\n    );\n    this.headers = {\n      ...this.headers,\n      ...USER_AGENT,\n      ...baggageUtils.parseKeyPairsIntoRecord(\n        getEnv().OTEL_EXPORTER_OTLP_LOGS_HEADERS\n      ),\n      ...parseHeaders(config?.headers),\n    };\n  }\n\n  getDefaultUrl(config: OTLPExporterNodeConfigBase): string {\n    return getDefaultUrl(config);\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport { OTLPLogExporter } from './OTLPLogExporter';\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport { OTLPLogExporter } from './node';\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport { OTLPLogExporter } from './platform';\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// this is autogenerated file, see scripts/version-update.js\nexport const VERSION = '0.52.1';\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ReadableSpan, SpanExporter } from '@opentelemetry/sdk-trace-base';\nimport { getEnv, baggageUtils } from '@opentelemetry/core';\nimport {\n  OTLPExporterNodeBase,\n  parseHeaders,\n} from '@opentelemetry/otlp-exporter-base';\nimport {\n  OTLPExporterNodeConfigBase,\n  appendResourcePathToUrl,\n  appendRootPathToUrlIfNeeded,\n} from '@opentelemetry/otlp-exporter-base';\nimport { IExportTraceServiceResponse } from '@opentelemetry/otlp-transformer';\nimport { VERSION } from '../../version';\nimport { JsonTraceSerializer } from '@opentelemetry/otlp-transformer';\n\nconst DEFAULT_COLLECTOR_RESOURCE_PATH = 'v1/traces';\nconst DEFAULT_COLLECTOR_URL = `http://localhost:4318/${DEFAULT_COLLECTOR_RESOURCE_PATH}`;\nconst USER_AGENT = {\n  'User-Agent': `OTel-OTLP-Exporter-JavaScript/${VERSION}`,\n};\n\n/**\n * Collector Trace Exporter for Node\n */\nexport class OTLPTraceExporter\n  extends OTLPExporterNodeBase<ReadableSpan, IExportTraceServiceResponse>\n  implements SpanExporter\n{\n  constructor(config: OTLPExporterNodeConfigBase = {}) {\n    super(config, JsonTraceSerializer, 'application/json');\n    this.headers = {\n      ...this.headers,\n      ...USER_AGENT,\n      ...baggageUtils.parseKeyPairsIntoRecord(\n        getEnv().OTEL_EXPORTER_OTLP_TRACES_HEADERS\n      ),\n      ...parseHeaders(config?.headers),\n    };\n  }\n\n  getDefaultUrl(config: OTLPExporterNodeConfigBase): string {\n    return typeof config.url === 'string'\n      ? config.url\n      : getEnv().OTEL_EXPORTER_OTLP_TRACES_ENDPOINT.length > 0\n      ? appendRootPathToUrlIfNeeded(getEnv().OTEL_EXPORTER_OTLP_TRACES_ENDPOINT)\n      : getEnv().OTEL_EXPORTER_OTLP_ENDPOINT.length > 0\n      ? appendResourcePathToUrl(\n          getEnv().OTEL_EXPORTER_OTLP_ENDPOINT,\n          DEFAULT_COLLECTOR_RESOURCE_PATH\n        )\n      : DEFAULT_COLLECTOR_URL;\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport * from './OTLPTraceExporter';\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport * from './node';\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport * from './platform';\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { TracerProvider, MeterProvider } from '@opentelemetry/api';\nimport { Instrumentation } from './types';\nimport { LoggerProvider } from '@opentelemetry/api-logs';\n\n/**\n * Enable instrumentations\n * @param instrumentations\n * @param tracerProvider\n * @param meterProvider\n */\nexport function enableInstrumentations(\n  instrumentations: Instrumentation[],\n  tracerProvider?: TracerProvider,\n  meterProvider?: MeterProvider,\n  loggerProvider?: LoggerProvider\n): void {\n  for (let i = 0, j = instrumentations.length; i < j; i++) {\n    const instrumentation = instrumentations[i];\n    if (tracerProvider) {\n      instrumentation.setTracerProvider(tracerProvider);\n    }\n    if (meterProvider) {\n      instrumentation.setMeterProvider(meterProvider);\n    }\n    if (loggerProvider && instrumentation.setLoggerProvider) {\n      instrumentation.setLoggerProvider(loggerProvider);\n    }\n    // instrumentations have been already enabled during creation\n    // so enable only if user prevented that by setting enabled to false\n    // this is to prevent double enabling but when calling register all\n    // instrumentations should be now enabled\n    if (!instrumentation.getConfig().enabled) {\n      instrumentation.enable();\n    }\n  }\n}\n\n/**\n * Disable instrumentations\n * @param instrumentations\n */\nexport function disableInstrumentations(\n  instrumentations: Instrumentation[]\n): void {\n  instrumentations.forEach(instrumentation => instrumentation.disable());\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { trace, metrics } from '@opentelemetry/api';\nimport { logs } from '@opentelemetry/api-logs';\nimport {\n  disableInstrumentations,\n  enableInstrumentations,\n} from './autoLoaderUtils';\nimport { AutoLoaderOptions } from './types_internal';\n\n/**\n * It will register instrumentations and plugins\n * @param options\n * @return returns function to unload instrumentation and plugins that were\n *   registered\n */\nexport function registerInstrumentations(\n  options: AutoLoaderOptions\n): () => void {\n  const tracerProvider = options.tracerProvider || trace.getTracerProvider();\n  const meterProvider = options.meterProvider || metrics.getMeterProvider();\n  const loggerProvider = options.loggerProvider || logs.getLoggerProvider();\n  const instrumentations = options.instrumentations?.flat() ?? [];\n\n  enableInstrumentations(\n    instrumentations,\n    tracerProvider,\n    meterProvider,\n    loggerProvider\n  );\n\n  return () => {\n    disableInstrumentations(instrumentations);\n  };\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  diag,\n  DiagLogger,\n  metrics,\n  Meter,\n  MeterProvider,\n  trace,\n  Tracer,\n  TracerProvider,\n  Span,\n} from '@opentelemetry/api';\nimport { Logger, LoggerProvider, logs } from '@opentelemetry/api-logs';\nimport * as shimmer from 'shimmer';\nimport {\n  InstrumentationModuleDefinition,\n  Instrumentation,\n  InstrumentationConfig,\n  SpanCustomizationHook,\n} from './types';\n\n/**\n * Base abstract internal class for instrumenting node and web plugins\n */\nexport abstract class InstrumentationAbstract<\n  ConfigType extends InstrumentationConfig = InstrumentationConfig,\n> implements Instrumentation<ConfigType>\n{\n  protected _config: ConfigType;\n\n  private _tracer: Tracer;\n  private _meter: Meter;\n  private _logger: Logger;\n  protected _diag: DiagLogger;\n\n  constructor(\n    public readonly instrumentationName: string,\n    public readonly instrumentationVersion: string,\n    config: ConfigType\n  ) {\n    // copy config first level properties to ensure they are immutable.\n    // nested properties are not copied, thus are mutable from the outside.\n    this._config = {\n      enabled: true,\n      ...config,\n    };\n\n    this._diag = diag.createComponentLogger({\n      namespace: instrumentationName,\n    });\n\n    this._tracer = trace.getTracer(instrumentationName, instrumentationVersion);\n    this._meter = metrics.getMeter(instrumentationName, instrumentationVersion);\n    this._logger = logs.getLogger(instrumentationName, instrumentationVersion);\n    this._updateMetricInstruments();\n  }\n\n  /* Api to wrap instrumented method */\n  protected _wrap = shimmer.wrap;\n  /* Api to unwrap instrumented methods */\n  protected _unwrap = shimmer.unwrap;\n  /* Api to mass wrap instrumented method */\n  protected _massWrap = shimmer.massWrap;\n  /* Api to mass unwrap instrumented methods */\n  protected _massUnwrap = shimmer.massUnwrap;\n\n  /* Returns meter */\n  protected get meter(): Meter {\n    return this._meter;\n  }\n\n  /**\n   * Sets MeterProvider to this plugin\n   * @param meterProvider\n   */\n  public setMeterProvider(meterProvider: MeterProvider): void {\n    this._meter = meterProvider.getMeter(\n      this.instrumentationName,\n      this.instrumentationVersion\n    );\n\n    this._updateMetricInstruments();\n  }\n\n  /* Returns logger */\n  protected get logger(): Logger {\n    return this._logger;\n  }\n\n  /**\n   * Sets LoggerProvider to this plugin\n   * @param loggerProvider\n   */\n  public setLoggerProvider(loggerProvider: LoggerProvider): void {\n    this._logger = loggerProvider.getLogger(\n      this.instrumentationName,\n      this.instrumentationVersion\n    );\n  }\n\n  /**\n   * @experimental\n   *\n   * Get module definitions defined by {@link init}.\n   * This can be used for experimental compile-time instrumentation.\n   *\n   * @returns an array of {@link InstrumentationModuleDefinition}\n   */\n  public getModuleDefinitions(): InstrumentationModuleDefinition[] {\n    const initResult = this.init() ?? [];\n    if (!Array.isArray(initResult)) {\n      return [initResult];\n    }\n\n    return initResult;\n  }\n\n  /**\n   * Sets the new metric instruments with the current Meter.\n   */\n  protected _updateMetricInstruments(): void {\n    return;\n  }\n\n  /* Returns InstrumentationConfig */\n  public getConfig(): ConfigType {\n    return this._config;\n  }\n\n  /**\n   * Sets InstrumentationConfig to this plugin\n   * @param InstrumentationConfig\n   */\n  public setConfig(config: ConfigType): void {\n    // copy config first level properties to ensure they are immutable.\n    // nested properties are not copied, thus are mutable from the outside.\n    this._config = { ...config };\n  }\n\n  /**\n   * Sets TraceProvider to this plugin\n   * @param tracerProvider\n   */\n  public setTracerProvider(tracerProvider: TracerProvider): void {\n    this._tracer = tracerProvider.getTracer(\n      this.instrumentationName,\n      this.instrumentationVersion\n    );\n  }\n\n  /* Returns tracer */\n  protected get tracer(): Tracer {\n    return this._tracer;\n  }\n\n  /* Disable plugin */\n  public abstract enable(): void;\n\n  /* Enable plugin */\n  public abstract disable(): void;\n\n  /**\n   * Init method in which plugin should define _modules and patches for\n   * methods.\n   */\n  protected abstract init():\n    | InstrumentationModuleDefinition\n    | InstrumentationModuleDefinition[]\n    | void;\n\n  /**\n   * Execute span customization hook, if configured, and log any errors.\n   * Any semantics of the trigger and info are defined by the specific instrumentation.\n   * @param hookHandler The optional hook handler which the user has configured via instrumentation config\n   * @param triggerName The name of the trigger for executing the hook for logging purposes\n   * @param span The span to which the hook should be applied\n   * @param info The info object to be passed to the hook, with useful data the hook may use\n   */\n  protected _runSpanCustomizationHook<SpanCustomizationInfoType>(\n    hookHandler: SpanCustomizationHook<SpanCustomizationInfoType> | undefined,\n    triggerName: string,\n    span: Span,\n    info: SpanCustomizationInfoType\n  ) {\n    if (!hookHandler) {\n      return;\n    }\n\n    try {\n      hookHandler(span, info);\n    } catch (e) {\n      this._diag.error(\n        `Error running span customization hook due to exception in handler`,\n        { triggerName },\n        e\n      );\n    }\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { Hooked } from './RequireInTheMiddleSingleton';\n\nexport const ModuleNameSeparator = '/';\n\n/**\n * Node in a `ModuleNameTrie`\n */\nclass ModuleNameTrieNode {\n  hooks: Array<{ hook: Hooked; insertedId: number }> = [];\n  children: Map<string, ModuleNameTrieNode> = new Map();\n}\n\ntype ModuleNameTrieSearchOptions = {\n  /**\n   * Whether to return the results in insertion order\n   */\n  maintainInsertionOrder?: boolean;\n  /**\n   * Whether to return only full matches\n   */\n  fullOnly?: boolean;\n};\n\n/**\n * Trie containing nodes that represent a part of a module name (i.e. the parts separated by forward slash)\n */\nexport class ModuleNameTrie {\n  private _trie: ModuleNameTrieNode = new ModuleNameTrieNode();\n  private _counter: number = 0;\n\n  /**\n   * Insert a module hook into the trie\n   *\n   * @param {Hooked} hook Hook\n   */\n  insert(hook: Hooked) {\n    let trieNode = this._trie;\n\n    for (const moduleNamePart of hook.moduleName.split(ModuleNameSeparator)) {\n      let nextNode = trieNode.children.get(moduleNamePart);\n      if (!nextNode) {\n        nextNode = new ModuleNameTrieNode();\n        trieNode.children.set(moduleNamePart, nextNode);\n      }\n      trieNode = nextNode;\n    }\n    trieNode.hooks.push({ hook, insertedId: this._counter++ });\n  }\n\n  /**\n   * Search for matching hooks in the trie\n   *\n   * @param {string} moduleName Module name\n   * @param {boolean} maintainInsertionOrder Whether to return the results in insertion order\n   * @param {boolean} fullOnly Whether to return only full matches\n   * @returns {Hooked[]} Matching hooks\n   */\n  search(\n    moduleName: string,\n    { maintainInsertionOrder, fullOnly }: ModuleNameTrieSearchOptions = {}\n  ): Hooked[] {\n    let trieNode = this._trie;\n    const results: ModuleNameTrieNode['hooks'] = [];\n    let foundFull = true;\n\n    for (const moduleNamePart of moduleName.split(ModuleNameSeparator)) {\n      const nextNode = trieNode.children.get(moduleNamePart);\n      if (!nextNode) {\n        foundFull = false;\n        break;\n      }\n      if (!fullOnly) {\n        results.push(...nextNode.hooks);\n      }\n      trieNode = nextNode;\n    }\n\n    if (fullOnly && foundFull) {\n      results.push(...trieNode.hooks);\n    }\n\n    if (results.length === 0) {\n      return [];\n    }\n    if (results.length === 1) {\n      return [results[0].hook];\n    }\n    if (maintainInsertionOrder) {\n      results.sort((a, b) => a.insertedId - b.insertedId);\n    }\n    return results.map(({ hook }) => hook);\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { OnRequireFn } from 'require-in-the-middle';\nimport { Hook } from 'require-in-the-middle';\nimport * as path from 'path';\nimport { ModuleNameTrie, ModuleNameSeparator } from './ModuleNameTrie';\n\nexport type Hooked = {\n  moduleName: string;\n  onRequire: OnRequireFn;\n};\n\n/**\n * Whether Mocha is running in this process\n * Inspired by https://github.com/AndreasPizsa/detect-mocha\n *\n * @type {boolean}\n */\nconst isMocha = [\n  'afterEach',\n  'after',\n  'beforeEach',\n  'before',\n  'describe',\n  'it',\n].every(fn => {\n  // @ts-expect-error TS7053: Element implicitly has an 'any' type\n  return typeof global[fn] === 'function';\n});\n\n/**\n * Singleton class for `require-in-the-middle`\n * Allows instrumentation plugins to patch modules with only a single `require` patch\n * WARNING: Because this class will create its own `require-in-the-middle` (RITM) instance,\n * we should minimize the number of new instances of this class.\n * Multiple instances of `@opentelemetry/instrumentation` (e.g. multiple versions) in a single process\n * will result in multiple instances of RITM, which will have an impact\n * on the performance of instrumentation hooks being applied.\n */\nexport class RequireInTheMiddleSingleton {\n  private _moduleNameTrie: ModuleNameTrie = new ModuleNameTrie();\n  private static _instance?: RequireInTheMiddleSingleton;\n\n  private constructor() {\n    this._initialize();\n  }\n\n  private _initialize() {\n    new Hook(\n      // Intercept all `require` calls; we will filter the matching ones below\n      null,\n      { internals: true },\n      (exports, name, basedir) => {\n        // For internal files on Windows, `name` will use backslash as the path separator\n        const normalizedModuleName = normalizePathSeparators(name);\n\n        const matches = this._moduleNameTrie.search(normalizedModuleName, {\n          maintainInsertionOrder: true,\n          // For core modules (e.g. `fs`), do not match on sub-paths (e.g. `fs/promises').\n          // This matches the behavior of `require-in-the-middle`.\n          // `basedir` is always `undefined` for core modules.\n          fullOnly: basedir === undefined,\n        });\n\n        for (const { onRequire } of matches) {\n          exports = onRequire(exports, name, basedir);\n        }\n\n        return exports;\n      }\n    );\n  }\n\n  /**\n   * Register a hook with `require-in-the-middle`\n   *\n   * @param {string} moduleName Module name\n   * @param {OnRequireFn} onRequire Hook function\n   * @returns {Hooked} Registered hook\n   */\n  register(moduleName: string, onRequire: OnRequireFn): Hooked {\n    const hooked = { moduleName, onRequire };\n    this._moduleNameTrie.insert(hooked);\n    return hooked;\n  }\n\n  /**\n   * Get the `RequireInTheMiddleSingleton` singleton\n   *\n   * @returns {RequireInTheMiddleSingleton} Singleton of `RequireInTheMiddleSingleton`\n   */\n  static getInstance(): RequireInTheMiddleSingleton {\n    // Mocha runs all test suites in the same process\n    // This prevents test suites from sharing a singleton\n    if (isMocha) return new RequireInTheMiddleSingleton();\n\n    return (this._instance =\n      this._instance ?? new RequireInTheMiddleSingleton());\n  }\n}\n\n/**\n * Normalize the path separators to forward slash in a module name or path\n *\n * @param {string} moduleNameOrPath Module name or path\n * @returns {string} Normalized module name or path\n */\nfunction normalizePathSeparators(moduleNameOrPath: string): string {\n  return path.sep !== ModuleNameSeparator\n    ? moduleNameOrPath.split(path.sep).join(ModuleNameSeparator)\n    : moduleNameOrPath;\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ShimWrapped } from './types';\n\n/**\n * function to execute patched function and being able to catch errors\n * @param execute - function to be executed\n * @param onFinish - callback to run when execute finishes\n */\nexport function safeExecuteInTheMiddle<T>(\n  execute: () => T,\n  onFinish: (e: Error | undefined, result: T | undefined) => void,\n  preventThrowingError?: boolean\n): T {\n  let error: Error | undefined;\n  let result: T | undefined;\n  try {\n    result = execute();\n  } catch (e) {\n    error = e;\n  } finally {\n    onFinish(error, result);\n    if (error && !preventThrowingError) {\n      // eslint-disable-next-line no-unsafe-finally\n      throw error;\n    }\n    // eslint-disable-next-line no-unsafe-finally\n    return result as T;\n  }\n}\n\n/**\n * Async function to execute patched function and being able to catch errors\n * @param execute - function to be executed\n * @param onFinish - callback to run when execute finishes\n */\nexport async function safeExecuteInTheMiddleAsync<T>(\n  execute: () => T,\n  onFinish: (e: Error | undefined, result: T | undefined) => void,\n  preventThrowingError?: boolean\n): Promise<T> {\n  let error: Error | undefined;\n  let result: T | undefined;\n  try {\n    result = await execute();\n  } catch (e) {\n    error = e;\n  } finally {\n    onFinish(error, result);\n    if (error && !preventThrowingError) {\n      // eslint-disable-next-line no-unsafe-finally\n      throw error;\n    }\n    // eslint-disable-next-line no-unsafe-finally\n    return result as T;\n  }\n}\n/**\n * Checks if certain function has been already wrapped\n * @param func\n */\nexport function isWrapped(func: unknown): func is ShimWrapped {\n  return (\n    typeof func === 'function' &&\n    typeof (func as ShimWrapped).__original === 'function' &&\n    typeof (func as ShimWrapped).__unwrap === 'function' &&\n    (func as ShimWrapped).__wrapped === true\n  );\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as types from '../../types';\nimport * as path from 'path';\nimport { types as utilTypes } from 'util';\nimport { satisfies } from 'semver';\nimport { wrap, unwrap, massWrap, massUnwrap } from 'shimmer';\nimport { InstrumentationAbstract } from '../../instrumentation';\nimport {\n  RequireInTheMiddleSingleton,\n  Hooked,\n} from './RequireInTheMiddleSingleton';\nimport type { HookFn } from 'import-in-the-middle';\nimport { Hook as HookImport } from 'import-in-the-middle';\nimport {\n  InstrumentationConfig,\n  InstrumentationModuleDefinition,\n} from '../../types';\nimport { diag } from '@opentelemetry/api';\nimport type { OnRequireFn } from 'require-in-the-middle';\nimport { Hook as HookRequire } from 'require-in-the-middle';\nimport { readFileSync } from 'fs';\nimport { isWrapped } from '../../utils';\n\n/**\n * Base abstract class for instrumenting node plugins\n */\nexport abstract class InstrumentationBase<\n    ConfigType extends InstrumentationConfig = InstrumentationConfig,\n  >\n  extends InstrumentationAbstract<ConfigType>\n  implements types.Instrumentation<ConfigType>\n{\n  private _modules: InstrumentationModuleDefinition[];\n  private _hooks: (Hooked | HookRequire)[] = [];\n  private _requireInTheMiddleSingleton: RequireInTheMiddleSingleton =\n    RequireInTheMiddleSingleton.getInstance();\n  private _enabled = false;\n\n  constructor(\n    instrumentationName: string,\n    instrumentationVersion: string,\n    config: ConfigType\n  ) {\n    super(instrumentationName, instrumentationVersion, config);\n\n    let modules = this.init();\n\n    if (modules && !Array.isArray(modules)) {\n      modules = [modules];\n    }\n\n    this._modules = (modules as InstrumentationModuleDefinition[]) || [];\n\n    if (this._modules.length === 0) {\n      diag.debug(\n        'No modules instrumentation has been defined for ' +\n          `'${this.instrumentationName}@${this.instrumentationVersion}'` +\n          ', nothing will be patched'\n      );\n    }\n\n    if (this._config.enabled) {\n      this.enable();\n    }\n  }\n\n  protected override _wrap: typeof wrap = (moduleExports, name, wrapper) => {\n    if (isWrapped(moduleExports[name])) {\n      this._unwrap(moduleExports, name);\n    }\n    if (!utilTypes.isProxy(moduleExports)) {\n      return wrap(moduleExports, name, wrapper);\n    } else {\n      const wrapped = wrap(Object.assign({}, moduleExports), name, wrapper);\n\n      return Object.defineProperty(moduleExports, name, {\n        value: wrapped,\n      });\n    }\n  };\n\n  protected override _unwrap: typeof unwrap = (moduleExports, name) => {\n    if (!utilTypes.isProxy(moduleExports)) {\n      return unwrap(moduleExports, name);\n    } else {\n      return Object.defineProperty(moduleExports, name, {\n        value: moduleExports[name],\n      });\n    }\n  };\n\n  protected override _massWrap: typeof massWrap = (\n    moduleExportsArray,\n    names,\n    wrapper\n  ) => {\n    if (!moduleExportsArray) {\n      diag.error('must provide one or more modules to patch');\n      return;\n    } else if (!Array.isArray(moduleExportsArray)) {\n      moduleExportsArray = [moduleExportsArray];\n    }\n\n    if (!(names && Array.isArray(names))) {\n      diag.error('must provide one or more functions to wrap on modules');\n      return;\n    }\n\n    moduleExportsArray.forEach(moduleExports => {\n      names.forEach(name => {\n        this._wrap(moduleExports, name, wrapper);\n      });\n    });\n  };\n\n  protected override _massUnwrap: typeof massUnwrap = (\n    moduleExportsArray,\n    names\n  ) => {\n    if (!moduleExportsArray) {\n      diag.error('must provide one or more modules to patch');\n      return;\n    } else if (!Array.isArray(moduleExportsArray)) {\n      moduleExportsArray = [moduleExportsArray];\n    }\n\n    if (!(names && Array.isArray(names))) {\n      diag.error('must provide one or more functions to wrap on modules');\n      return;\n    }\n\n    moduleExportsArray.forEach(moduleExports => {\n      names.forEach(name => {\n        this._unwrap(moduleExports, name);\n      });\n    });\n  };\n\n  private _warnOnPreloadedModules(): void {\n    this._modules.forEach((module: InstrumentationModuleDefinition) => {\n      const { name } = module;\n      try {\n        const resolvedModule = require.resolve(name);\n        if (require.cache[resolvedModule]) {\n          // Module is already cached, which means the instrumentation hook might not work\n          this._diag.warn(\n            `Module ${name} has been loaded before ${this.instrumentationName} so it might not work, please initialize it before requiring ${name}`\n          );\n        }\n      } catch {\n        // Module isn't available, we can simply skip\n      }\n    });\n  }\n\n  private _extractPackageVersion(baseDir: string): string | undefined {\n    try {\n      const json = readFileSync(path.join(baseDir, 'package.json'), {\n        encoding: 'utf8',\n      });\n      const version = JSON.parse(json).version;\n      return typeof version === 'string' ? version : undefined;\n    } catch (error) {\n      diag.warn('Failed extracting version', baseDir);\n    }\n\n    return undefined;\n  }\n\n  private _onRequire<T>(\n    module: InstrumentationModuleDefinition,\n    exports: T,\n    name: string,\n    baseDir?: string | void\n  ): T {\n    if (!baseDir) {\n      if (typeof module.patch === 'function') {\n        module.moduleExports = exports;\n        if (this._enabled) {\n          this._diag.debug(\n            'Applying instrumentation patch for nodejs core module on require hook',\n            {\n              module: module.name,\n            }\n          );\n          return module.patch(exports);\n        }\n      }\n      return exports;\n    }\n\n    const version = this._extractPackageVersion(baseDir);\n    module.moduleVersion = version;\n    if (module.name === name) {\n      // main module\n      if (\n        isSupported(module.supportedVersions, version, module.includePrerelease)\n      ) {\n        if (typeof module.patch === 'function') {\n          module.moduleExports = exports;\n          if (this._enabled) {\n            this._diag.debug(\n              'Applying instrumentation patch for module on require hook',\n              {\n                module: module.name,\n                version: module.moduleVersion,\n                baseDir,\n              }\n            );\n            return module.patch(exports, module.moduleVersion);\n          }\n        }\n      }\n      return exports;\n    }\n    // internal file\n    const files = module.files ?? [];\n    const normalizedName = path.normalize(name);\n    const supportedFileInstrumentations = files\n      .filter(f => f.name === normalizedName)\n      .filter(f =>\n        isSupported(f.supportedVersions, version, module.includePrerelease)\n      );\n    return supportedFileInstrumentations.reduce<T>((patchedExports, file) => {\n      file.moduleExports = patchedExports;\n      if (this._enabled) {\n        this._diag.debug(\n          'Applying instrumentation patch for nodejs module file on require hook',\n          {\n            module: module.name,\n            version: module.moduleVersion,\n            fileName: file.name,\n            baseDir,\n          }\n        );\n\n        // patch signature is not typed, so we cast it assuming it's correct\n        return file.patch(patchedExports, module.moduleVersion) as T;\n      }\n      return patchedExports;\n    }, exports);\n  }\n\n  public enable(): void {\n    if (this._enabled) {\n      return;\n    }\n    this._enabled = true;\n\n    // already hooked, just call patch again\n    if (this._hooks.length > 0) {\n      for (const module of this._modules) {\n        if (typeof module.patch === 'function' && module.moduleExports) {\n          this._diag.debug(\n            'Applying instrumentation patch for nodejs module on instrumentation enabled',\n            {\n              module: module.name,\n              version: module.moduleVersion,\n            }\n          );\n          module.patch(module.moduleExports, module.moduleVersion);\n        }\n        for (const file of module.files) {\n          if (file.moduleExports) {\n            this._diag.debug(\n              'Applying instrumentation patch for nodejs module file on instrumentation enabled',\n              {\n                module: module.name,\n                version: module.moduleVersion,\n                fileName: file.name,\n              }\n            );\n            file.patch(file.moduleExports, module.moduleVersion);\n          }\n        }\n      }\n      return;\n    }\n\n    this._warnOnPreloadedModules();\n    for (const module of this._modules) {\n      const hookFn: HookFn = (exports, name, baseDir) => {\n        return this._onRequire<typeof exports>(module, exports, name, baseDir);\n      };\n      const onRequire: OnRequireFn = (exports, name, baseDir) => {\n        return this._onRequire<typeof exports>(module, exports, name, baseDir);\n      };\n\n      // `RequireInTheMiddleSingleton` does not support absolute paths.\n      // For an absolute paths, we must create a separate instance of the\n      // require-in-the-middle `Hook`.\n      const hook = path.isAbsolute(module.name)\n        ? new HookRequire([module.name], { internals: true }, onRequire)\n        : this._requireInTheMiddleSingleton.register(module.name, onRequire);\n\n      this._hooks.push(hook);\n      const esmHook = new HookImport(\n        [module.name],\n        { internals: false },\n        <HookFn>hookFn\n      );\n      this._hooks.push(esmHook);\n    }\n  }\n\n  public disable(): void {\n    if (!this._enabled) {\n      return;\n    }\n    this._enabled = false;\n\n    for (const module of this._modules) {\n      if (typeof module.unpatch === 'function' && module.moduleExports) {\n        this._diag.debug(\n          'Removing instrumentation patch for nodejs module on instrumentation disabled',\n          {\n            module: module.name,\n            version: module.moduleVersion,\n          }\n        );\n        module.unpatch(module.moduleExports, module.moduleVersion);\n      }\n      for (const file of module.files) {\n        if (file.moduleExports) {\n          this._diag.debug(\n            'Removing instrumentation patch for nodejs module file on instrumentation disabled',\n            {\n              module: module.name,\n              version: module.moduleVersion,\n              fileName: file.name,\n            }\n          );\n          file.unpatch(file.moduleExports, module.moduleVersion);\n        }\n      }\n    }\n  }\n\n  public isEnabled(): boolean {\n    return this._enabled;\n  }\n}\n\nfunction isSupported(\n  supportedVersions: string[],\n  version?: string,\n  includePrerelease?: boolean\n): boolean {\n  if (typeof version === 'undefined') {\n    // If we don't have the version, accept the wildcard case only\n    return supportedVersions.includes('*');\n  }\n\n  return supportedVersions.some(supportedVersion => {\n    return satisfies(version, supportedVersion, { includePrerelease });\n  });\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport { normalize } from 'path';\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport { InstrumentationBase } from './instrumentation';\nexport { normalize } from './normalize';\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport { InstrumentationBase, normalize } from './node';\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  InstrumentationModuleDefinition,\n  InstrumentationModuleFile,\n} from './types';\n\nexport class InstrumentationNodeModuleDefinition\n  implements InstrumentationModuleDefinition\n{\n  files: InstrumentationModuleFile[];\n  constructor(\n    public name: string,\n    public supportedVersions: string[],\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    public patch?: (exports: any, moduleVersion?: string) => any,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    public unpatch?: (exports: any, moduleVersion?: string) => void,\n    files?: InstrumentationModuleFile[]\n  ) {\n    this.files = files || [];\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { InstrumentationModuleFile } from './types';\nimport { normalize } from './platform/index';\n\nexport class InstrumentationNodeModuleFile\n  implements InstrumentationModuleFile\n{\n  public name: string;\n  constructor(\n    name: string,\n    public supportedVersions: string[],\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    public patch: (moduleExports: any, moduleVersion?: string) => any,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    public unpatch: (moduleExports?: any, moduleVersion?: string) => void\n  ) {\n    this.name = normalize(name);\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport { registerInstrumentations } from './autoLoader';\nexport { InstrumentationBase } from './platform/index';\nexport { InstrumentationNodeModuleDefinition } from './instrumentationNodeModuleDefinition';\nexport { InstrumentationNodeModuleFile } from './instrumentationNodeModuleFile';\nexport * from './types';\nexport * from './types_internal';\nexport * from './utils';\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AttributeValue, diag } from '@opentelemetry/api';\nimport type * as logsAPI from '@opentelemetry/api-logs';\nimport * as api from '@opentelemetry/api';\nimport {\n  timeInputToHrTime,\n  isAttributeValue,\n  InstrumentationScope,\n} from '@opentelemetry/core';\nimport type { IResource } from '@opentelemetry/resources';\n\nimport type { ReadableLogRecord } from './export/ReadableLogRecord';\nimport type { LogRecordLimits } from './types';\nimport { LogAttributes, LogBody } from '@opentelemetry/api-logs';\nimport { LoggerProviderSharedState } from './internal/LoggerProviderSharedState';\n\nexport class LogRecord implements ReadableLogRecord {\n  readonly hrTime: api.HrTime;\n  readonly hrTimeObserved: api.HrTime;\n  readonly spanContext?: api.SpanContext;\n  readonly resource: IResource;\n  readonly instrumentationScope: InstrumentationScope;\n  readonly attributes: logsAPI.LogAttributes = {};\n  private _severityText?: string;\n  private _severityNumber?: logsAPI.SeverityNumber;\n  private _body?: LogBody;\n  private totalAttributesCount: number = 0;\n\n  private _isReadonly: boolean = false;\n  private readonly _logRecordLimits: Required<LogRecordLimits>;\n\n  set severityText(severityText: string | undefined) {\n    if (this._isLogRecordReadonly()) {\n      return;\n    }\n    this._severityText = severityText;\n  }\n  get severityText(): string | undefined {\n    return this._severityText;\n  }\n\n  set severityNumber(severityNumber: logsAPI.SeverityNumber | undefined) {\n    if (this._isLogRecordReadonly()) {\n      return;\n    }\n    this._severityNumber = severityNumber;\n  }\n  get severityNumber(): logsAPI.SeverityNumber | undefined {\n    return this._severityNumber;\n  }\n\n  set body(body: LogBody | undefined) {\n    if (this._isLogRecordReadonly()) {\n      return;\n    }\n    this._body = body;\n  }\n  get body(): LogBody | undefined {\n    return this._body;\n  }\n\n  get droppedAttributesCount(): number {\n    return this.totalAttributesCount - Object.keys(this.attributes).length;\n  }\n\n  constructor(\n    _sharedState: LoggerProviderSharedState,\n    instrumentationScope: InstrumentationScope,\n    logRecord: logsAPI.LogRecord\n  ) {\n    const {\n      timestamp,\n      observedTimestamp,\n      severityNumber,\n      severityText,\n      body,\n      attributes = {},\n      context,\n    } = logRecord;\n\n    const now = Date.now();\n    this.hrTime = timeInputToHrTime(timestamp ?? now);\n    this.hrTimeObserved = timeInputToHrTime(observedTimestamp ?? now);\n\n    if (context) {\n      const spanContext = api.trace.getSpanContext(context);\n      if (spanContext && api.isSpanContextValid(spanContext)) {\n        this.spanContext = spanContext;\n      }\n    }\n    this.severityNumber = severityNumber;\n    this.severityText = severityText;\n    this.body = body;\n    this.resource = _sharedState.resource;\n    this.instrumentationScope = instrumentationScope;\n    this._logRecordLimits = _sharedState.logRecordLimits;\n    this.setAttributes(attributes);\n  }\n\n  public setAttribute(key: string, value?: LogAttributes | AttributeValue) {\n    if (this._isLogRecordReadonly()) {\n      return this;\n    }\n    if (value === null) {\n      return this;\n    }\n    if (key.length === 0) {\n      api.diag.warn(`Invalid attribute key: ${key}`);\n      return this;\n    }\n    if (\n      !isAttributeValue(value) &&\n      !(\n        typeof value === 'object' &&\n        !Array.isArray(value) &&\n        Object.keys(value).length > 0\n      )\n    ) {\n      api.diag.warn(`Invalid attribute value set for key: ${key}`);\n      return this;\n    }\n    this.totalAttributesCount += 1;\n    if (\n      Object.keys(this.attributes).length >=\n        this._logRecordLimits.attributeCountLimit &&\n      !Object.prototype.hasOwnProperty.call(this.attributes, key)\n    ) {\n      // This logic is to create drop message at most once per LogRecord to prevent excessive logging.\n      if (this.droppedAttributesCount === 1) {\n        api.diag.warn('Dropping extra attributes.');\n      }\n      return this;\n    }\n    if (isAttributeValue(value)) {\n      this.attributes[key] = this._truncateToSize(value);\n    } else {\n      this.attributes[key] = value;\n    }\n    return this;\n  }\n\n  public setAttributes(attributes: LogAttributes) {\n    for (const [k, v] of Object.entries(attributes)) {\n      this.setAttribute(k, v);\n    }\n    return this;\n  }\n\n  public setBody(body: LogBody) {\n    this.body = body;\n    return this;\n  }\n\n  public setSeverityNumber(severityNumber: logsAPI.SeverityNumber) {\n    this.severityNumber = severityNumber;\n    return this;\n  }\n\n  public setSeverityText(severityText: string) {\n    this.severityText = severityText;\n    return this;\n  }\n\n  /**\n   * @internal\n   * A LogRecordProcessor may freely modify logRecord for the duration of the OnEmit call.\n   * If logRecord is needed after OnEmit returns (i.e. for asynchronous processing) only reads are permitted.\n   */\n  _makeReadonly() {\n    this._isReadonly = true;\n  }\n\n  private _truncateToSize(value: AttributeValue): AttributeValue {\n    const limit = this._logRecordLimits.attributeValueLengthLimit;\n    // Check limit\n    if (limit <= 0) {\n      // Negative values are invalid, so do not truncate\n      api.diag.warn(`Attribute value limit must be positive, got ${limit}`);\n      return value;\n    }\n\n    // String\n    if (typeof value === 'string') {\n      return this._truncateToLimitUtil(value, limit);\n    }\n\n    // Array of strings\n    if (Array.isArray(value)) {\n      return (value as []).map(val =>\n        typeof val === 'string' ? this._truncateToLimitUtil(val, limit) : val\n      );\n    }\n\n    // Other types, no need to apply value length limit\n    return value;\n  }\n\n  private _truncateToLimitUtil(value: string, limit: number): string {\n    if (value.length <= limit) {\n      return value;\n    }\n    return value.substring(0, limit);\n  }\n\n  private _isLogRecordReadonly(): boolean {\n    if (this._isReadonly) {\n      diag.warn('Can not execute the operation on emitted log record');\n    }\n    return this._isReadonly;\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type * as logsAPI from '@opentelemetry/api-logs';\nimport type { InstrumentationScope } from '@opentelemetry/core';\nimport { context } from '@opentelemetry/api';\n\nimport { LogRecord } from './LogRecord';\nimport { LoggerProviderSharedState } from './internal/LoggerProviderSharedState';\n\nexport class Logger implements logsAPI.Logger {\n  constructor(\n    public readonly instrumentationScope: InstrumentationScope,\n    private _sharedState: LoggerProviderSharedState\n  ) {}\n\n  public emit(logRecord: logsAPI.LogRecord): void {\n    const currentContext = logRecord.context || context.active();\n    /**\n     * If a Logger was obtained with include_trace_context=true,\n     * the LogRecords it emits MUST automatically include the Trace Context from the active Context,\n     * if Context has not been explicitly set.\n     */\n    const logRecordInstance = new LogRecord(\n      this._sharedState,\n      this.instrumentationScope,\n      {\n        context: currentContext,\n        ...logRecord,\n      }\n    );\n    /**\n     * the explicitly passed Context,\n     * the current Context, or an empty Context if the Logger was obtained with include_trace_context=false\n     */\n    this._sharedState.activeProcessor.onEmit(logRecordInstance, currentContext);\n    /**\n     * A LogRecordProcessor may freely modify logRecord for the duration of the OnEmit call.\n     * If logRecord is needed after OnEmit returns (i.e. for asynchronous processing) only reads are permitted.\n     */\n    logRecordInstance._makeReadonly();\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  DEFAULT_ATTRIBUTE_COUNT_LIMIT,\n  DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT,\n  getEnv,\n  getEnvWithoutDefaults,\n} from '@opentelemetry/core';\nimport { LogRecordLimits } from './types';\n\nexport function loadDefaultConfig() {\n  return {\n    forceFlushTimeoutMillis: 30000,\n    logRecordLimits: {\n      attributeValueLengthLimit:\n        getEnv().OTEL_LOGRECORD_ATTRIBUTE_VALUE_LENGTH_LIMIT,\n      attributeCountLimit: getEnv().OTEL_LOGRECORD_ATTRIBUTE_COUNT_LIMIT,\n    },\n    includeTraceContext: true,\n  };\n}\n\n/**\n * When general limits are provided and model specific limits are not,\n * configures the model specific limits by using the values from the general ones.\n * @param logRecordLimits User provided limits configuration\n */\nexport function reconfigureLimits(\n  logRecordLimits: LogRecordLimits\n): Required<LogRecordLimits> {\n  const parsedEnvConfig = getEnvWithoutDefaults();\n\n  return {\n    /**\n     * Reassign log record attribute count limit to use first non null value defined by user or use default value\n     */\n    attributeCountLimit:\n      logRecordLimits.attributeCountLimit ??\n      parsedEnvConfig.OTEL_LOGRECORD_ATTRIBUTE_COUNT_LIMIT ??\n      parsedEnvConfig.OTEL_ATTRIBUTE_COUNT_LIMIT ??\n      DEFAULT_ATTRIBUTE_COUNT_LIMIT,\n    /**\n     * Reassign log record attribute value length limit to use first non null value defined by user or use default value\n     */\n    attributeValueLengthLimit:\n      logRecordLimits.attributeValueLengthLimit ??\n      parsedEnvConfig.OTEL_LOGRECORD_ATTRIBUTE_VALUE_LENGTH_LIMIT ??\n      parsedEnvConfig.OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT ??\n      DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT,\n  };\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { callWithTimeout } from '@opentelemetry/core';\nimport type { Context } from '@opentelemetry/api';\nimport type { LogRecordProcessor } from './LogRecordProcessor';\nimport type { LogRecord } from './LogRecord';\n\n/**\n * Implementation of the {@link LogRecordProcessor} that simply forwards all\n * received events to a list of {@link LogRecordProcessor}s.\n */\nexport class MultiLogRecordProcessor implements LogRecordProcessor {\n  constructor(\n    public readonly processors: LogRecordProcessor[],\n    public readonly forceFlushTimeoutMillis: number\n  ) {}\n\n  public async forceFlush(): Promise<void> {\n    const timeout = this.forceFlushTimeoutMillis;\n    await Promise.all(\n      this.processors.map(processor =>\n        callWithTimeout(processor.forceFlush(), timeout)\n      )\n    );\n  }\n\n  public onEmit(logRecord: LogRecord, context?: Context): void {\n    this.processors.forEach(processors =>\n      processors.onEmit(logRecord, context)\n    );\n  }\n\n  public async shutdown(): Promise<void> {\n    await Promise.all(this.processors.map(processor => processor.shutdown()));\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Context } from '@opentelemetry/api';\nimport { LogRecordProcessor } from '../LogRecordProcessor';\nimport { ReadableLogRecord } from './ReadableLogRecord';\n\nexport class NoopLogRecordProcessor implements LogRecordProcessor {\n  forceFlush(): Promise<void> {\n    return Promise.resolve();\n  }\n\n  onEmit(_logRecord: ReadableLogRecord, _context: Context): void {}\n\n  shutdown(): Promise<void> {\n    return Promise.resolve();\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger } from '@opentelemetry/api-logs';\nimport { IResource } from '@opentelemetry/resources';\nimport { LogRecordProcessor } from '../LogRecordProcessor';\nimport { LogRecordLimits } from '../types';\nimport { NoopLogRecordProcessor } from '../export/NoopLogRecordProcessor';\n\nexport class LoggerProviderSharedState {\n  readonly loggers: Map<string, Logger> = new Map();\n  activeProcessor: LogRecordProcessor;\n  readonly registeredLogRecordProcessors: LogRecordProcessor[] = [];\n\n  constructor(\n    readonly resource: IResource,\n    readonly forceFlushTimeoutMillis: number,\n    readonly logRecordLimits: Required<LogRecordLimits>\n  ) {\n    this.activeProcessor = new NoopLogRecordProcessor();\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { diag } from '@opentelemetry/api';\nimport type * as logsAPI from '@opentelemetry/api-logs';\nimport { NOOP_LOGGER } from '@opentelemetry/api-logs';\nimport { Resource } from '@opentelemetry/resources';\nimport { BindOnceFuture, merge } from '@opentelemetry/core';\n\nimport type { LoggerProviderConfig } from './types';\nimport type { LogRecordProcessor } from './LogRecordProcessor';\nimport { Logger } from './Logger';\nimport { loadDefaultConfig, reconfigureLimits } from './config';\nimport { MultiLogRecordProcessor } from './MultiLogRecordProcessor';\nimport { LoggerProviderSharedState } from './internal/LoggerProviderSharedState';\n\nexport const DEFAULT_LOGGER_NAME = 'unknown';\n\nexport class LoggerProvider implements logsAPI.LoggerProvider {\n  private _shutdownOnce: BindOnceFuture<void>;\n  private readonly _sharedState: LoggerProviderSharedState;\n\n  constructor(config: LoggerProviderConfig = {}) {\n    const mergedConfig = merge({}, loadDefaultConfig(), config);\n    const resource = Resource.default().merge(\n      mergedConfig.resource ?? Resource.empty()\n    );\n    this._sharedState = new LoggerProviderSharedState(\n      resource,\n      mergedConfig.forceFlushTimeoutMillis,\n      reconfigureLimits(mergedConfig.logRecordLimits)\n    );\n    this._shutdownOnce = new BindOnceFuture(this._shutdown, this);\n  }\n\n  /**\n   * Get a logger with the configuration of the LoggerProvider.\n   */\n  public getLogger(\n    name: string,\n    version?: string,\n    options?: logsAPI.LoggerOptions\n  ): logsAPI.Logger {\n    if (this._shutdownOnce.isCalled) {\n      diag.warn('A shutdown LoggerProvider cannot provide a Logger');\n      return NOOP_LOGGER;\n    }\n\n    if (!name) {\n      diag.warn('Logger requested without instrumentation scope name.');\n    }\n    const loggerName = name || DEFAULT_LOGGER_NAME;\n    const key = `${loggerName}@${version || ''}:${options?.schemaUrl || ''}`;\n    if (!this._sharedState.loggers.has(key)) {\n      this._sharedState.loggers.set(\n        key,\n        new Logger(\n          { name: loggerName, version, schemaUrl: options?.schemaUrl },\n          this._sharedState\n        )\n      );\n    }\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    return this._sharedState.loggers.get(key)!;\n  }\n\n  /**\n   * Adds a new {@link LogRecordProcessor} to this logger.\n   * @param processor the new LogRecordProcessor to be added.\n   */\n  public addLogRecordProcessor(processor: LogRecordProcessor) {\n    if (this._sharedState.registeredLogRecordProcessors.length === 0) {\n      // since we might have enabled by default a batchProcessor, we disable it\n      // before adding the new one\n      this._sharedState.activeProcessor\n        .shutdown()\n        .catch(err =>\n          diag.error(\n            'Error while trying to shutdown current log record processor',\n            err\n          )\n        );\n    }\n    this._sharedState.registeredLogRecordProcessors.push(processor);\n    this._sharedState.activeProcessor = new MultiLogRecordProcessor(\n      this._sharedState.registeredLogRecordProcessors,\n      this._sharedState.forceFlushTimeoutMillis\n    );\n  }\n\n  /**\n   * Notifies all registered LogRecordProcessor to flush any buffered data.\n   *\n   * Returns a promise which is resolved when all flushes are complete.\n   */\n  public forceFlush(): Promise<void> {\n    // do not flush after shutdown\n    if (this._shutdownOnce.isCalled) {\n      diag.warn('invalid attempt to force flush after LoggerProvider shutdown');\n      return this._shutdownOnce.promise;\n    }\n    return this._sharedState.activeProcessor.forceFlush();\n  }\n\n  /**\n   * Flush all buffered data and shut down the LoggerProvider and all registered\n   * LogRecordProcessor.\n   *\n   * Returns a promise which is resolved when all flushes are complete.\n   */\n  public shutdown(): Promise<void> {\n    if (this._shutdownOnce.isCalled) {\n      diag.warn('shutdown may only be called once per LoggerProvider');\n      return this._shutdownOnce.promise;\n    }\n    return this._shutdownOnce.call();\n  }\n\n  private _shutdown(): Promise<void> {\n    return this._sharedState.activeProcessor.shutdown();\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ExportResult, hrTimeToMicroseconds } from '@opentelemetry/core';\nimport { ExportResultCode } from '@opentelemetry/core';\n\nimport type { ReadableLogRecord } from './ReadableLogRecord';\nimport type { LogRecordExporter } from './LogRecordExporter';\n\n/**\n * This is implementation of {@link LogRecordExporter} that prints LogRecords to the\n * console. This class can be used for diagnostic purposes.\n */\n\n/* eslint-disable no-console */\nexport class ConsoleLogRecordExporter implements LogRecordExporter {\n  /**\n   * Export logs.\n   * @param logs\n   * @param resultCallback\n   */\n  public export(\n    logs: ReadableLogRecord[],\n    resultCallback: (result: ExportResult) => void\n  ) {\n    this._sendLogRecords(logs, resultCallback);\n  }\n\n  /**\n   * Shutdown the exporter.\n   */\n  public shutdown(): Promise<void> {\n    return Promise.resolve();\n  }\n\n  /**\n   * converts logRecord info into more readable format\n   * @param logRecord\n   */\n  private _exportInfo(logRecord: ReadableLogRecord) {\n    return {\n      resource: {\n        attributes: logRecord.resource.attributes,\n      },\n      timestamp: hrTimeToMicroseconds(logRecord.hrTime),\n      traceId: logRecord.spanContext?.traceId,\n      spanId: logRecord.spanContext?.spanId,\n      traceFlags: logRecord.spanContext?.traceFlags,\n      severityText: logRecord.severityText,\n      severityNumber: logRecord.severityNumber,\n      body: logRecord.body,\n      attributes: logRecord.attributes,\n    };\n  }\n\n  /**\n   * Showing logs  in console\n   * @param logRecords\n   * @param done\n   */\n  private _sendLogRecords(\n    logRecords: ReadableLogRecord[],\n    done?: (result: ExportResult) => void\n  ): void {\n    for (const logRecord of logRecords) {\n      console.dir(this._exportInfo(logRecord), { depth: 3 });\n    }\n    done?.({ code: ExportResultCode.SUCCESS });\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { ExportResult } from '@opentelemetry/core';\nimport {\n  BindOnceFuture,\n  ExportResultCode,\n  globalErrorHandler,\n  internal,\n} from '@opentelemetry/core';\nimport type { LogRecordExporter } from './LogRecordExporter';\nimport type { LogRecordProcessor } from '../LogRecordProcessor';\nimport type { LogRecord } from './../LogRecord';\n\nexport class SimpleLogRecordProcessor implements LogRecordProcessor {\n  private _shutdownOnce: BindOnceFuture<void>;\n  private _unresolvedExports: Set<Promise<void>>;\n\n  constructor(private readonly _exporter: LogRecordExporter) {\n    this._shutdownOnce = new BindOnceFuture(this._shutdown, this);\n    this._unresolvedExports = new Set<Promise<void>>();\n  }\n\n  public onEmit(logRecord: LogRecord): void {\n    if (this._shutdownOnce.isCalled) {\n      return;\n    }\n\n    const doExport = () =>\n      internal\n        ._export(this._exporter, [logRecord])\n        .then((result: ExportResult) => {\n          if (result.code !== ExportResultCode.SUCCESS) {\n            globalErrorHandler(\n              result.error ??\n                new Error(\n                  `SimpleLogRecordProcessor: log record export failed (status ${result})`\n                )\n            );\n          }\n        })\n        .catch(globalErrorHandler);\n\n    // Avoid scheduling a promise to make the behavior more predictable and easier to test\n    if (logRecord.resource.asyncAttributesPending) {\n      const exportPromise = logRecord.resource\n        .waitForAsyncAttributes?.()\n        .then(() => {\n          // Using TS Non-null assertion operator because exportPromise could not be null in here\n          // if waitForAsyncAttributes is not present this code will never be reached\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n          this._unresolvedExports.delete(exportPromise!);\n          return doExport();\n        }, globalErrorHandler);\n\n      // store the unresolved exports\n      if (exportPromise != null) {\n        this._unresolvedExports.add(exportPromise);\n      }\n    } else {\n      void doExport();\n    }\n  }\n\n  public async forceFlush(): Promise<void> {\n    // await unresolved resources before resolving\n    await Promise.all(Array.from(this._unresolvedExports));\n  }\n\n  public shutdown(): Promise<void> {\n    return this._shutdownOnce.call();\n  }\n\n  private _shutdown(): Promise<void> {\n    return this._exporter.shutdown();\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { ExportResult } from '@opentelemetry/core';\nimport { ExportResultCode } from '@opentelemetry/core';\n\nimport type { ReadableLogRecord } from './ReadableLogRecord';\nimport type { LogRecordExporter } from './LogRecordExporter';\n\n/**\n * This class can be used for testing purposes. It stores the exported LogRecords\n * in a list in memory that can be retrieved using the `getFinishedLogRecords()`\n * method.\n */\nexport class InMemoryLogRecordExporter implements LogRecordExporter {\n  private _finishedLogRecords: ReadableLogRecord[] = [];\n\n  /**\n   * Indicates if the exporter has been \"shutdown.\"\n   * When false, exported log records will not be stored in-memory.\n   */\n  protected _stopped = false;\n\n  public export(\n    logs: ReadableLogRecord[],\n    resultCallback: (result: ExportResult) => void\n  ) {\n    if (this._stopped) {\n      return resultCallback({\n        code: ExportResultCode.FAILED,\n        error: new Error('Exporter has been stopped'),\n      });\n    }\n\n    this._finishedLogRecords.push(...logs);\n    resultCallback({ code: ExportResultCode.SUCCESS });\n  }\n\n  public shutdown(): Promise<void> {\n    this._stopped = true;\n    this.reset();\n    return Promise.resolve();\n  }\n\n  public getFinishedLogRecords(): ReadableLogRecord[] {\n    return this._finishedLogRecords;\n  }\n\n  public reset(): void {\n    this._finishedLogRecords = [];\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { ExportResult } from '@opentelemetry/core';\nimport { diag } from '@opentelemetry/api';\nimport {\n  ExportResultCode,\n  getEnv,\n  globalErrorHandler,\n  unrefTimer,\n  BindOnceFuture,\n  internal,\n  callWithTimeout,\n} from '@opentelemetry/core';\n\nimport type { BufferConfig } from '../types';\nimport type { LogRecord } from '../LogRecord';\nimport type { LogRecordExporter } from './LogRecordExporter';\nimport type { LogRecordProcessor } from '../LogRecordProcessor';\n\nexport abstract class BatchLogRecordProcessorBase<T extends BufferConfig>\n  implements LogRecordProcessor\n{\n  private readonly _maxExportBatchSize: number;\n  private readonly _maxQueueSize: number;\n  private readonly _scheduledDelayMillis: number;\n  private readonly _exportTimeoutMillis: number;\n\n  private _finishedLogRecords: LogRecord[] = [];\n  private _timer: NodeJS.Timeout | undefined;\n  private _shutdownOnce: BindOnceFuture<void>;\n\n  constructor(\n    private readonly _exporter: LogRecordExporter,\n    config?: T\n  ) {\n    const env = getEnv();\n    this._maxExportBatchSize =\n      config?.maxExportBatchSize ?? env.OTEL_BLRP_MAX_EXPORT_BATCH_SIZE;\n    this._maxQueueSize = config?.maxQueueSize ?? env.OTEL_BLRP_MAX_QUEUE_SIZE;\n    this._scheduledDelayMillis =\n      config?.scheduledDelayMillis ?? env.OTEL_BLRP_SCHEDULE_DELAY;\n    this._exportTimeoutMillis =\n      config?.exportTimeoutMillis ?? env.OTEL_BLRP_EXPORT_TIMEOUT;\n\n    this._shutdownOnce = new BindOnceFuture(this._shutdown, this);\n\n    if (this._maxExportBatchSize > this._maxQueueSize) {\n      diag.warn(\n        'BatchLogRecordProcessor: maxExportBatchSize must be smaller or equal to maxQueueSize, setting maxExportBatchSize to match maxQueueSize'\n      );\n      this._maxExportBatchSize = this._maxQueueSize;\n    }\n  }\n\n  public onEmit(logRecord: LogRecord): void {\n    if (this._shutdownOnce.isCalled) {\n      return;\n    }\n    this._addToBuffer(logRecord);\n  }\n\n  public forceFlush(): Promise<void> {\n    if (this._shutdownOnce.isCalled) {\n      return this._shutdownOnce.promise;\n    }\n    return this._flushAll();\n  }\n\n  public shutdown(): Promise<void> {\n    return this._shutdownOnce.call();\n  }\n\n  private async _shutdown(): Promise<void> {\n    this.onShutdown();\n    await this._flushAll();\n    await this._exporter.shutdown();\n  }\n\n  /** Add a LogRecord in the buffer. */\n  private _addToBuffer(logRecord: LogRecord) {\n    if (this._finishedLogRecords.length >= this._maxQueueSize) {\n      return;\n    }\n    this._finishedLogRecords.push(logRecord);\n    this._maybeStartTimer();\n  }\n\n  /**\n   * Send all LogRecords to the exporter respecting the batch size limit\n   * This function is used only on forceFlush or shutdown,\n   * for all other cases _flush should be used\n   * */\n  private _flushAll(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      const promises = [];\n      const batchCount = Math.ceil(\n        this._finishedLogRecords.length / this._maxExportBatchSize\n      );\n      for (let i = 0; i < batchCount; i++) {\n        promises.push(this._flushOneBatch());\n      }\n      Promise.all(promises)\n        .then(() => {\n          resolve();\n        })\n        .catch(reject);\n    });\n  }\n\n  private _flushOneBatch(): Promise<void> {\n    this._clearTimer();\n    if (this._finishedLogRecords.length === 0) {\n      return Promise.resolve();\n    }\n    return new Promise((resolve, reject) => {\n      callWithTimeout(\n        this._export(\n          this._finishedLogRecords.splice(0, this._maxExportBatchSize)\n        ),\n        this._exportTimeoutMillis\n      )\n        .then(() => resolve())\n        .catch(reject);\n    });\n  }\n\n  private _maybeStartTimer() {\n    if (this._timer !== undefined) {\n      return;\n    }\n    this._timer = setTimeout(() => {\n      this._flushOneBatch()\n        .then(() => {\n          if (this._finishedLogRecords.length > 0) {\n            this._clearTimer();\n            this._maybeStartTimer();\n          }\n        })\n        .catch(e => {\n          globalErrorHandler(e);\n        });\n    }, this._scheduledDelayMillis);\n    unrefTimer(this._timer);\n  }\n\n  private _clearTimer() {\n    if (this._timer !== undefined) {\n      clearTimeout(this._timer);\n      this._timer = undefined;\n    }\n  }\n\n  private _export(logRecords: LogRecord[]): Promise<void> {\n    const doExport = () =>\n      internal\n        ._export(this._exporter, logRecords)\n        .then((result: ExportResult) => {\n          if (result.code !== ExportResultCode.SUCCESS) {\n            globalErrorHandler(\n              result.error ??\n                new Error(\n                  `BatchLogRecordProcessor: log record export failed (status ${result})`\n                )\n            );\n          }\n        })\n        .catch(globalErrorHandler);\n\n    const pendingResources = logRecords\n      .map(logRecord => logRecord.resource)\n      .filter(resource => resource.asyncAttributesPending);\n\n    // Avoid scheduling a promise to make the behavior more predictable and easier to test\n    if (pendingResources.length === 0) {\n      return doExport();\n    } else {\n      return Promise.all(\n        pendingResources.map(resource => resource.waitForAsyncAttributes?.())\n      ).then(doExport, globalErrorHandler);\n    }\n  }\n\n  protected abstract onShutdown(): void;\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { BufferConfig } from '../../../types';\nimport { BatchLogRecordProcessorBase } from '../../../export/BatchLogRecordProcessorBase';\n\nexport class BatchLogRecordProcessor extends BatchLogRecordProcessorBase<BufferConfig> {\n  protected onShutdown(): void {}\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport { BatchLogRecordProcessor } from './export/BatchLogRecordProcessor';\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport { BatchLogRecordProcessor } from './node';\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport {\n  LoggerProviderConfig,\n  LogRecordLimits,\n  BufferConfig,\n  BatchLogRecordProcessorBrowserConfig,\n} from './types';\nexport { LoggerProvider } from './LoggerProvider';\nexport { LogRecord } from './LogRecord';\nexport { LogRecordProcessor } from './LogRecordProcessor';\nexport { ReadableLogRecord } from './export/ReadableLogRecord';\nexport { NoopLogRecordProcessor } from './export/NoopLogRecordProcessor';\nexport { ConsoleLogRecordExporter } from './export/ConsoleLogRecordExporter';\nexport { LogRecordExporter } from './export/LogRecordExporter';\nexport { SimpleLogRecordProcessor } from './export/SimpleLogRecordProcessor';\nexport { InMemoryLogRecordExporter } from './export/InMemoryLogRecordExporter';\nexport { BatchLogRecordProcessor } from './platform';\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ContextManager, Context } from '@opentelemetry/api';\nimport { EventEmitter } from 'events';\n\ntype Func<T> = (...args: unknown[]) => T;\n\n/**\n * Store a map for each event of all original listeners and their \"patched\"\n * version. So when a listener is removed by the user, the corresponding\n * patched function will be also removed.\n */\ninterface PatchMap {\n  [name: string]: WeakMap<Func<void>, Func<void>>;\n}\n\nconst ADD_LISTENER_METHODS = [\n  'addListener' as const,\n  'on' as const,\n  'once' as const,\n  'prependListener' as const,\n  'prependOnceListener' as const,\n];\n\nexport abstract class AbstractAsyncHooksContextManager\n  implements ContextManager\n{\n  abstract active(): Context;\n\n  abstract with<A extends unknown[], F extends (...args: A) => ReturnType<F>>(\n    context: Context,\n    fn: F,\n    thisArg?: ThisParameterType<F>,\n    ...args: A\n  ): ReturnType<F>;\n\n  abstract enable(): this;\n\n  abstract disable(): this;\n\n  /**\n   * Binds a the certain context or the active one to the target function and then returns the target\n   * @param context A context (span) to be bind to target\n   * @param target a function or event emitter. When target or one of its callbacks is called,\n   *  the provided context will be used as the active context for the duration of the call.\n   */\n  bind<T>(context: Context, target: T): T {\n    if (target instanceof EventEmitter) {\n      return this._bindEventEmitter(context, target);\n    }\n\n    if (typeof target === 'function') {\n      return this._bindFunction(context, target);\n    }\n    return target;\n  }\n\n  private _bindFunction<T extends Function>(context: Context, target: T): T {\n    const manager = this;\n    const contextWrapper = function (this: never, ...args: unknown[]) {\n      return manager.with(context, () => target.apply(this, args));\n    };\n    Object.defineProperty(contextWrapper, 'length', {\n      enumerable: false,\n      configurable: true,\n      writable: false,\n      value: target.length,\n    });\n    /**\n     * It isn't possible to tell Typescript that contextWrapper is the same as T\n     * so we forced to cast as any here.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return contextWrapper as any;\n  }\n\n  /**\n   * By default, EventEmitter call their callback with their context, which we do\n   * not want, instead we will bind a specific context to all callbacks that\n   * go through it.\n   * @param context the context we want to bind\n   * @param ee EventEmitter an instance of EventEmitter to patch\n   */\n  private _bindEventEmitter<T extends EventEmitter>(\n    context: Context,\n    ee: T\n  ): T {\n    const map = this._getPatchMap(ee);\n    if (map !== undefined) return ee;\n    this._createPatchMap(ee);\n\n    // patch methods that add a listener to propagate context\n    ADD_LISTENER_METHODS.forEach(methodName => {\n      if (ee[methodName] === undefined) return;\n      ee[methodName] = this._patchAddListener(ee, ee[methodName], context);\n    });\n    // patch methods that remove a listener\n    if (typeof ee.removeListener === 'function') {\n      ee.removeListener = this._patchRemoveListener(ee, ee.removeListener);\n    }\n    if (typeof ee.off === 'function') {\n      ee.off = this._patchRemoveListener(ee, ee.off);\n    }\n    // patch method that remove all listeners\n    if (typeof ee.removeAllListeners === 'function') {\n      ee.removeAllListeners = this._patchRemoveAllListeners(\n        ee,\n        ee.removeAllListeners\n      );\n    }\n    return ee;\n  }\n\n  /**\n   * Patch methods that remove a given listener so that we match the \"patched\"\n   * version of that listener (the one that propagate context).\n   * @param ee EventEmitter instance\n   * @param original reference to the patched method\n   */\n  private _patchRemoveListener(ee: EventEmitter, original: Function) {\n    const contextManager = this;\n    return function (this: never, event: string, listener: Func<void>) {\n      const events = contextManager._getPatchMap(ee)?.[event];\n      if (events === undefined) {\n        return original.call(this, event, listener);\n      }\n      const patchedListener = events.get(listener);\n      return original.call(this, event, patchedListener || listener);\n    };\n  }\n\n  /**\n   * Patch methods that remove all listeners so we remove our\n   * internal references for a given event.\n   * @param ee EventEmitter instance\n   * @param original reference to the patched method\n   */\n  private _patchRemoveAllListeners(ee: EventEmitter, original: Function) {\n    const contextManager = this;\n    return function (this: never, event: string) {\n      const map = contextManager._getPatchMap(ee);\n      if (map !== undefined) {\n        if (arguments.length === 0) {\n          contextManager._createPatchMap(ee);\n        } else if (map[event] !== undefined) {\n          delete map[event];\n        }\n      }\n      return original.apply(this, arguments);\n    };\n  }\n\n  /**\n   * Patch methods on an event emitter instance that can add listeners so we\n   * can force them to propagate a given context.\n   * @param ee EventEmitter instance\n   * @param original reference to the patched method\n   * @param [context] context to propagate when calling listeners\n   */\n  private _patchAddListener(\n    ee: EventEmitter,\n    original: Function,\n    context: Context\n  ) {\n    const contextManager = this;\n    return function (this: never, event: string, listener: Func<void>) {\n      /**\n       * This check is required to prevent double-wrapping the listener.\n       * The implementation for ee.once wraps the listener and calls ee.on.\n       * Without this check, we would wrap that wrapped listener.\n       * This causes an issue because ee.removeListener depends on the onceWrapper\n       * to properly remove the listener. If we wrap their wrapper, we break\n       * that detection.\n       */\n      if (contextManager._wrapped) {\n        return original.call(this, event, listener);\n      }\n      let map = contextManager._getPatchMap(ee);\n      if (map === undefined) {\n        map = contextManager._createPatchMap(ee);\n      }\n      let listeners = map[event];\n      if (listeners === undefined) {\n        listeners = new WeakMap();\n        map[event] = listeners;\n      }\n      const patchedListener = contextManager.bind(context, listener);\n      // store a weak reference of the user listener to ours\n      listeners.set(listener, patchedListener);\n\n      /**\n       * See comment at the start of this function for the explanation of this property.\n       */\n      contextManager._wrapped = true;\n      try {\n        return original.call(this, event, patchedListener);\n      } finally {\n        contextManager._wrapped = false;\n      }\n    };\n  }\n\n  private _createPatchMap(ee: EventEmitter): PatchMap {\n    const map = Object.create(null);\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (ee as any)[this._kOtListeners] = map;\n    return map;\n  }\n  private _getPatchMap(ee: EventEmitter): PatchMap | undefined {\n    return (ee as never)[this._kOtListeners];\n  }\n\n  private readonly _kOtListeners = Symbol('OtListeners');\n  private _wrapped = false;\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Context, ROOT_CONTEXT } from '@opentelemetry/api';\nimport * as asyncHooks from 'async_hooks';\nimport { AbstractAsyncHooksContextManager } from './AbstractAsyncHooksContextManager';\n\nexport class AsyncHooksContextManager extends AbstractAsyncHooksContextManager {\n  private _asyncHook: asyncHooks.AsyncHook;\n  private _contexts: Map<number, Context> = new Map();\n  private _stack: Array<Context | undefined> = [];\n\n  constructor() {\n    super();\n    this._asyncHook = asyncHooks.createHook({\n      init: this._init.bind(this),\n      before: this._before.bind(this),\n      after: this._after.bind(this),\n      destroy: this._destroy.bind(this),\n      promiseResolve: this._destroy.bind(this),\n    });\n  }\n\n  active(): Context {\n    return this._stack[this._stack.length - 1] ?? ROOT_CONTEXT;\n  }\n\n  with<A extends unknown[], F extends (...args: A) => ReturnType<F>>(\n    context: Context,\n    fn: F,\n    thisArg?: ThisParameterType<F>,\n    ...args: A\n  ): ReturnType<F> {\n    this._enterContext(context);\n    try {\n      return fn.call(thisArg!, ...args);\n    } finally {\n      this._exitContext();\n    }\n  }\n\n  enable(): this {\n    this._asyncHook.enable();\n    return this;\n  }\n\n  disable(): this {\n    this._asyncHook.disable();\n    this._contexts.clear();\n    this._stack = [];\n    return this;\n  }\n\n  /**\n   * Init hook will be called when userland create a async context, setting the\n   * context as the current one if it exist.\n   * @param uid id of the async context\n   * @param type the resource type\n   */\n  private _init(uid: number, type: string) {\n    // ignore TIMERWRAP as they combine timers with same timeout which can lead to\n    // false context propagation. TIMERWRAP has been removed in node 11\n    // every timer has it's own `Timeout` resource anyway which is used to propagate\n    // context.\n    if (type === 'TIMERWRAP') return;\n\n    const context = this._stack[this._stack.length - 1];\n    if (context !== undefined) {\n      this._contexts.set(uid, context);\n    }\n  }\n\n  /**\n   * Destroy hook will be called when a given context is no longer used so we can\n   * remove its attached context.\n   * @param uid uid of the async context\n   */\n  private _destroy(uid: number) {\n    this._contexts.delete(uid);\n  }\n\n  /**\n   * Before hook is called just before executing a async context.\n   * @param uid uid of the async context\n   */\n  private _before(uid: number) {\n    const context = this._contexts.get(uid);\n    if (context !== undefined) {\n      this._enterContext(context);\n    }\n  }\n\n  /**\n   * After hook is called just after completing the execution of a async context.\n   */\n  private _after() {\n    this._exitContext();\n  }\n\n  /**\n   * Set the given context as active\n   */\n  private _enterContext(context: Context) {\n    this._stack.push(context);\n  }\n\n  /**\n   * Remove the context at the root of the stack\n   */\n  private _exitContext() {\n    this._stack.pop();\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Context, ROOT_CONTEXT } from '@opentelemetry/api';\nimport { AsyncLocalStorage } from 'async_hooks';\nimport { AbstractAsyncHooksContextManager } from './AbstractAsyncHooksContextManager';\n\nexport class AsyncLocalStorageContextManager extends AbstractAsyncHooksContextManager {\n  private _asyncLocalStorage: AsyncLocalStorage<Context>;\n\n  constructor() {\n    super();\n    this._asyncLocalStorage = new AsyncLocalStorage();\n  }\n\n  active(): Context {\n    return this._asyncLocalStorage.getStore() ?? ROOT_CONTEXT;\n  }\n\n  with<A extends unknown[], F extends (...args: A) => ReturnType<F>>(\n    context: Context,\n    fn: F,\n    thisArg?: ThisParameterType<F>,\n    ...args: A\n  ): ReturnType<F> {\n    const cb = thisArg == null ? fn : fn.bind(thisArg);\n    return this._asyncLocalStorage.run(context, cb as never, ...args);\n  }\n\n  enable(): this {\n    return this;\n  }\n\n  disable(): this {\n    this._asyncLocalStorage.disable();\n    return this;\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport { AsyncHooksContextManager } from './AsyncHooksContextManager';\nexport { AsyncLocalStorageContextManager } from './AsyncLocalStorageContextManager';\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { createContextKey } from '@opentelemetry/api';\n\n/** shared context for storing an extracted b3 debug flag */\nexport const B3_DEBUG_FLAG_KEY = createContextKey(\n  'OpenTelemetry Context Key B3 Debug Flag'\n);\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** B3 single-header key */\nexport const B3_CONTEXT_HEADER = 'b3';\n\n/* b3 multi-header keys */\nexport const X_B3_TRACE_ID = 'x-b3-traceid';\nexport const X_B3_SPAN_ID = 'x-b3-spanid';\nexport const X_B3_SAMPLED = 'x-b3-sampled';\nexport const X_B3_PARENT_SPAN_ID = 'x-b3-parentspanid';\nexport const X_B3_FLAGS = 'x-b3-flags';\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Context,\n  isSpanContextValid,\n  isValidSpanId,\n  isValidTraceId,\n  trace,\n  TextMapGetter,\n  TextMapPropagator,\n  TextMapSetter,\n  TraceFlags,\n} from '@opentelemetry/api';\nimport { isTracingSuppressed } from '@opentelemetry/core';\nimport { B3_DEBUG_FLAG_KEY } from './common';\nimport {\n  X_B3_FLAGS,\n  X_B3_PARENT_SPAN_ID,\n  X_B3_SAMPLED,\n  X_B3_SPAN_ID,\n  X_B3_TRACE_ID,\n} from './constants';\n\nconst VALID_SAMPLED_VALUES = new Set([true, 'true', 'True', '1', 1]);\nconst VALID_UNSAMPLED_VALUES = new Set([false, 'false', 'False', '0', 0]);\n\nfunction isValidSampledValue(sampled: TraceFlags | undefined): boolean {\n  return sampled === TraceFlags.SAMPLED || sampled === TraceFlags.NONE;\n}\n\nfunction parseHeader(header: unknown) {\n  return Array.isArray(header) ? header[0] : header;\n}\n\nfunction getHeaderValue(carrier: unknown, getter: TextMapGetter, key: string) {\n  const header = getter.get(carrier, key);\n  return parseHeader(header);\n}\n\nfunction getTraceId(carrier: unknown, getter: TextMapGetter): string {\n  const traceId = getHeaderValue(carrier, getter, X_B3_TRACE_ID);\n  if (typeof traceId === 'string') {\n    return traceId.padStart(32, '0');\n  }\n  return '';\n}\n\nfunction getSpanId(carrier: unknown, getter: TextMapGetter): string {\n  const spanId = getHeaderValue(carrier, getter, X_B3_SPAN_ID);\n  if (typeof spanId === 'string') {\n    return spanId;\n  }\n  return '';\n}\n\nfunction getDebug(carrier: unknown, getter: TextMapGetter): string | undefined {\n  const debug = getHeaderValue(carrier, getter, X_B3_FLAGS);\n  return debug === '1' ? '1' : undefined;\n}\n\nfunction getTraceFlags(\n  carrier: unknown,\n  getter: TextMapGetter\n): TraceFlags | undefined {\n  const traceFlags = getHeaderValue(carrier, getter, X_B3_SAMPLED);\n  const debug = getDebug(carrier, getter);\n  if (debug === '1' || VALID_SAMPLED_VALUES.has(traceFlags)) {\n    return TraceFlags.SAMPLED;\n  }\n  if (traceFlags === undefined || VALID_UNSAMPLED_VALUES.has(traceFlags)) {\n    return TraceFlags.NONE;\n  }\n  // This indicates to isValidSampledValue that this is not valid\n  return;\n}\n\n/**\n * Propagator for the B3 multiple-header HTTP format.\n * Based on: https://github.com/openzipkin/b3-propagation\n */\nexport class B3MultiPropagator implements TextMapPropagator {\n  inject(context: Context, carrier: unknown, setter: TextMapSetter): void {\n    const spanContext = trace.getSpanContext(context);\n    if (\n      !spanContext ||\n      !isSpanContextValid(spanContext) ||\n      isTracingSuppressed(context)\n    )\n      return;\n\n    const debug = context.getValue(B3_DEBUG_FLAG_KEY);\n    setter.set(carrier, X_B3_TRACE_ID, spanContext.traceId);\n    setter.set(carrier, X_B3_SPAN_ID, spanContext.spanId);\n    // According to the B3 spec, if the debug flag is set,\n    // the sampled flag shouldn't be propagated as well.\n    if (debug === '1') {\n      setter.set(carrier, X_B3_FLAGS, debug);\n    } else if (spanContext.traceFlags !== undefined) {\n      // We set the header only if there is an existing sampling decision.\n      // Otherwise we will omit it => Absent.\n      setter.set(\n        carrier,\n        X_B3_SAMPLED,\n        (TraceFlags.SAMPLED & spanContext.traceFlags) === TraceFlags.SAMPLED\n          ? '1'\n          : '0'\n      );\n    }\n  }\n\n  extract(context: Context, carrier: unknown, getter: TextMapGetter): Context {\n    const traceId = getTraceId(carrier, getter);\n    const spanId = getSpanId(carrier, getter);\n    const traceFlags = getTraceFlags(carrier, getter) as TraceFlags;\n    const debug = getDebug(carrier, getter);\n\n    if (\n      isValidTraceId(traceId) &&\n      isValidSpanId(spanId) &&\n      isValidSampledValue(traceFlags)\n    ) {\n      context = context.setValue(B3_DEBUG_FLAG_KEY, debug);\n      return trace.setSpanContext(context, {\n        traceId,\n        spanId,\n        isRemote: true,\n        traceFlags,\n      });\n    }\n    return context;\n  }\n\n  fields(): string[] {\n    return [\n      X_B3_TRACE_ID,\n      X_B3_SPAN_ID,\n      X_B3_FLAGS,\n      X_B3_SAMPLED,\n      X_B3_PARENT_SPAN_ID,\n    ];\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Context,\n  isSpanContextValid,\n  isValidSpanId,\n  isValidTraceId,\n  TextMapGetter,\n  TextMapPropagator,\n  TextMapSetter,\n  trace,\n  TraceFlags,\n} from '@opentelemetry/api';\nimport { isTracingSuppressed } from '@opentelemetry/core';\nimport { B3_DEBUG_FLAG_KEY } from './common';\nimport { B3_CONTEXT_HEADER } from './constants';\n\nconst B3_CONTEXT_REGEX =\n  /((?:[0-9a-f]{16}){1,2})-([0-9a-f]{16})(?:-([01d](?![0-9a-f])))?(?:-([0-9a-f]{16}))?/;\nconst PADDING = '0'.repeat(16);\nconst SAMPLED_VALUES = new Set(['d', '1']);\nconst DEBUG_STATE = 'd';\n\nfunction convertToTraceId128(traceId: string): string {\n  return traceId.length === 32 ? traceId : `${PADDING}${traceId}`;\n}\n\nfunction convertToTraceFlags(samplingState: string | undefined): TraceFlags {\n  if (samplingState && SAMPLED_VALUES.has(samplingState)) {\n    return TraceFlags.SAMPLED;\n  }\n  return TraceFlags.NONE;\n}\n\n/**\n * Propagator for the B3 single-header HTTP format.\n * Based on: https://github.com/openzipkin/b3-propagation\n */\nexport class B3SinglePropagator implements TextMapPropagator {\n  inject(context: Context, carrier: unknown, setter: TextMapSetter): void {\n    const spanContext = trace.getSpanContext(context);\n    if (\n      !spanContext ||\n      !isSpanContextValid(spanContext) ||\n      isTracingSuppressed(context)\n    )\n      return;\n\n    const samplingState =\n      context.getValue(B3_DEBUG_FLAG_KEY) || spanContext.traceFlags & 0x1;\n    const value = `${spanContext.traceId}-${spanContext.spanId}-${samplingState}`;\n    setter.set(carrier, B3_CONTEXT_HEADER, value);\n  }\n\n  extract(context: Context, carrier: unknown, getter: TextMapGetter): Context {\n    const header = getter.get(carrier, B3_CONTEXT_HEADER);\n    const b3Context = Array.isArray(header) ? header[0] : header;\n    if (typeof b3Context !== 'string') return context;\n\n    const match = b3Context.match(B3_CONTEXT_REGEX);\n    if (!match) return context;\n\n    const [, extractedTraceId, spanId, samplingState] = match;\n    const traceId = convertToTraceId128(extractedTraceId);\n\n    if (!isValidTraceId(traceId) || !isValidSpanId(spanId)) return context;\n\n    const traceFlags = convertToTraceFlags(samplingState);\n\n    if (samplingState === DEBUG_STATE) {\n      context = context.setValue(B3_DEBUG_FLAG_KEY, samplingState);\n    }\n\n    return trace.setSpanContext(context, {\n      traceId,\n      spanId,\n      isRemote: true,\n      traceFlags,\n    });\n  }\n\n  fields(): string[] {\n    return [B3_CONTEXT_HEADER];\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Enumeration of B3 inject encodings */\nexport enum B3InjectEncoding {\n  SINGLE_HEADER,\n  MULTI_HEADER,\n}\n\n/** Configuration for the B3Propagator */\nexport interface B3PropagatorConfig {\n  injectEncoding?: B3InjectEncoding;\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Context,\n  TextMapGetter,\n  TextMapPropagator,\n  TextMapSetter,\n} from '@opentelemetry/api';\nimport { isTracingSuppressed } from '@opentelemetry/core';\nimport { B3MultiPropagator } from './B3MultiPropagator';\nimport { B3SinglePropagator } from './B3SinglePropagator';\nimport { B3_CONTEXT_HEADER } from './constants';\nimport { B3InjectEncoding, B3PropagatorConfig } from './types';\n\n/**\n * Propagator that extracts B3 context in both single and multi-header variants,\n * with configurable injection format defaulting to B3 single-header. Due to\n * the asymmetry in injection and extraction formats this is not suitable to\n * be implemented as a composite propagator.\n * Based on: https://github.com/openzipkin/b3-propagation\n */\nexport class B3Propagator implements TextMapPropagator {\n  private readonly _b3MultiPropagator: B3MultiPropagator =\n    new B3MultiPropagator();\n  private readonly _b3SinglePropagator: B3SinglePropagator =\n    new B3SinglePropagator();\n  private readonly _inject: (\n    context: Context,\n    carrier: unknown,\n    setter: TextMapSetter\n  ) => void;\n  public readonly _fields: string[];\n\n  constructor(config: B3PropagatorConfig = {}) {\n    if (config.injectEncoding === B3InjectEncoding.MULTI_HEADER) {\n      this._inject = this._b3MultiPropagator.inject;\n      this._fields = this._b3MultiPropagator.fields();\n    } else {\n      this._inject = this._b3SinglePropagator.inject;\n      this._fields = this._b3SinglePropagator.fields();\n    }\n  }\n\n  inject(context: Context, carrier: unknown, setter: TextMapSetter): void {\n    if (isTracingSuppressed(context)) {\n      return;\n    }\n    this._inject(context, carrier, setter);\n  }\n\n  extract(context: Context, carrier: unknown, getter: TextMapGetter): Context {\n    const header = getter.get(carrier, B3_CONTEXT_HEADER);\n    const b3Context = Array.isArray(header) ? header[0] : header;\n\n    if (b3Context) {\n      return this._b3SinglePropagator.extract(context, carrier, getter);\n    } else {\n      return this._b3MultiPropagator.extract(context, carrier, getter);\n    }\n  }\n\n  fields(): string[] {\n    return this._fields;\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport * from './B3Propagator';\nexport * from './constants';\nexport * from './types';\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Context,\n  SpanContext,\n  TextMapGetter,\n  TextMapPropagator,\n  TextMapSetter,\n  propagation,\n  trace,\n  TraceFlags,\n} from '@opentelemetry/api';\nimport { isTracingSuppressed } from '@opentelemetry/core';\nimport { JaegerPropagatorConfig } from './types';\n\nexport const UBER_TRACE_ID_HEADER = 'uber-trace-id';\nexport const UBER_BAGGAGE_HEADER_PREFIX = 'uberctx';\n\n/**\n * Propagates {@link SpanContext} through Trace Context format propagation.\n * {trace-id}:{span-id}:{parent-span-id}:{flags}\n * {trace-id}\n * 64-bit or 128-bit random number in base16 format.\n * Can be variable length, shorter values are 0-padded on the left.\n * Value of 0 is invalid.\n * {span-id}\n * 64-bit random number in base16 format.\n * {parent-span-id}\n * Set to 0 because this field is deprecated.\n * {flags}\n * One byte bitmap, as two hex digits.\n * Inspired by jaeger-client-node project.\n */\nexport class JaegerPropagator implements TextMapPropagator {\n  private readonly _jaegerTraceHeader: string;\n  private readonly _jaegerBaggageHeaderPrefix: string;\n\n  constructor(customTraceHeader?: string);\n  constructor(config?: JaegerPropagatorConfig);\n  constructor(config?: JaegerPropagatorConfig | string) {\n    if (typeof config === 'string') {\n      this._jaegerTraceHeader = config;\n      this._jaegerBaggageHeaderPrefix = UBER_BAGGAGE_HEADER_PREFIX;\n    } else {\n      this._jaegerTraceHeader =\n        config?.customTraceHeader || UBER_TRACE_ID_HEADER;\n      this._jaegerBaggageHeaderPrefix =\n        config?.customBaggageHeaderPrefix || UBER_BAGGAGE_HEADER_PREFIX;\n    }\n  }\n\n  inject(context: Context, carrier: unknown, setter: TextMapSetter): void {\n    const spanContext = trace.getSpanContext(context);\n    const baggage = propagation.getBaggage(context);\n    if (spanContext && isTracingSuppressed(context) === false) {\n      const traceFlags = `0${(\n        spanContext.traceFlags || TraceFlags.NONE\n      ).toString(16)}`;\n\n      setter.set(\n        carrier,\n        this._jaegerTraceHeader,\n        `${spanContext.traceId}:${spanContext.spanId}:0:${traceFlags}`\n      );\n    }\n\n    if (baggage) {\n      for (const [key, entry] of baggage.getAllEntries()) {\n        setter.set(\n          carrier,\n          `${this._jaegerBaggageHeaderPrefix}-${key}`,\n          encodeURIComponent(entry.value)\n        );\n      }\n    }\n  }\n\n  extract(context: Context, carrier: unknown, getter: TextMapGetter): Context {\n    const uberTraceIdHeader = getter.get(carrier, this._jaegerTraceHeader);\n    const uberTraceId = Array.isArray(uberTraceIdHeader)\n      ? uberTraceIdHeader[0]\n      : uberTraceIdHeader;\n    const baggageValues = getter\n      .keys(carrier)\n      .filter(key => key.startsWith(`${this._jaegerBaggageHeaderPrefix}-`))\n      .map(key => {\n        const value = getter.get(carrier, key);\n        return {\n          key: key.substring(this._jaegerBaggageHeaderPrefix.length + 1),\n          value: Array.isArray(value) ? value[0] : value,\n        };\n      });\n\n    let newContext = context;\n    // if the trace id header is present and valid, inject it into the context\n    if (typeof uberTraceId === 'string') {\n      const spanContext = deserializeSpanContext(uberTraceId);\n      if (spanContext) {\n        newContext = trace.setSpanContext(newContext, spanContext);\n      }\n    }\n    if (baggageValues.length === 0) return newContext;\n\n    // if baggage values are present, inject it into the current baggage\n    let currentBaggage =\n      propagation.getBaggage(context) ?? propagation.createBaggage();\n    for (const baggageEntry of baggageValues) {\n      if (baggageEntry.value === undefined) continue;\n      currentBaggage = currentBaggage.setEntry(baggageEntry.key, {\n        value: decodeURIComponent(baggageEntry.value),\n      });\n    }\n    newContext = propagation.setBaggage(newContext, currentBaggage);\n\n    return newContext;\n  }\n\n  fields(): string[] {\n    return [this._jaegerTraceHeader];\n  }\n}\n\nconst VALID_HEX_RE = /^[0-9a-f]{1,2}$/i;\n\n/**\n * @param {string} serializedString - a serialized span context.\n * @return {SpanContext} - returns a span context represented by the serializedString.\n **/\nfunction deserializeSpanContext(serializedString: string): SpanContext | null {\n  const headers = decodeURIComponent(serializedString).split(':');\n  if (headers.length !== 4) {\n    return null;\n  }\n\n  const [_traceId, _spanId, , flags] = headers;\n\n  const traceId = _traceId.padStart(32, '0');\n  const spanId = _spanId.padStart(16, '0');\n  const traceFlags = VALID_HEX_RE.test(flags) ? parseInt(flags, 16) & 1 : 1;\n\n  return { traceId, spanId, isRemote: true, traceFlags };\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport * from './JaegerPropagator';\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  AsyncHooksContextManager,\n  AsyncLocalStorageContextManager,\n} from '@opentelemetry/context-async-hooks';\nimport { B3Propagator, B3InjectEncoding } from '@opentelemetry/propagator-b3';\nimport {\n  BasicTracerProvider,\n  PROPAGATOR_FACTORY,\n  SDKRegistrationConfig,\n} from '@opentelemetry/sdk-trace-base';\nimport * as semver from 'semver';\nimport { NodeTracerConfig } from './config';\nimport { JaegerPropagator } from '@opentelemetry/propagator-jaeger';\n\n/**\n * Register this TracerProvider for use with the OpenTelemetry API.\n * Undefined values may be replaced with defaults, and\n * null values will be skipped.\n *\n * @param config Configuration object for SDK registration\n */\nexport class NodeTracerProvider extends BasicTracerProvider {\n  protected static override readonly _registeredPropagators = new Map<\n    string,\n    PROPAGATOR_FACTORY\n  >([\n    ...BasicTracerProvider._registeredPropagators,\n    [\n      'b3',\n      () =>\n        new B3Propagator({ injectEncoding: B3InjectEncoding.SINGLE_HEADER }),\n    ],\n    [\n      'b3multi',\n      () => new B3Propagator({ injectEncoding: B3InjectEncoding.MULTI_HEADER }),\n    ],\n    ['jaeger', () => new JaegerPropagator()],\n  ]);\n\n  constructor(config: NodeTracerConfig = {}) {\n    super(config);\n  }\n\n  override register(config: SDKRegistrationConfig = {}): void {\n    if (config.contextManager === undefined) {\n      const ContextManager = semver.gte(process.version, '14.8.0')\n        ? AsyncLocalStorageContextManager\n        : AsyncHooksContextManager;\n      config.contextManager = new ContextManager();\n      config.contextManager.enable();\n    }\n\n    super.register(config);\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport { NodeTracerConfig } from './config';\nexport * from './NodeTracerProvider';\nexport * from '@opentelemetry/sdk-trace-base';\n", "/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nvar intToCharMap = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');\n\n/**\n * Encode an integer in the range of 0 to 63 to a single base 64 digit.\n */\nexports.encode = function (number) {\n  if (0 <= number && number < intToCharMap.length) {\n    return intToCharMap[number];\n  }\n  throw new TypeError(\"Must be between 0 and 63: \" + number);\n};\n\n/**\n * Decode a single base 64 character code digit to an integer. Returns -1 on\n * failure.\n */\nexports.decode = function (charCode) {\n  var bigA = 65;     // 'A'\n  var bigZ = 90;     // 'Z'\n\n  var littleA = 97;  // 'a'\n  var littleZ = 122; // 'z'\n\n  var zero = 48;     // '0'\n  var nine = 57;     // '9'\n\n  var plus = 43;     // '+'\n  var slash = 47;    // '/'\n\n  var littleOffset = 26;\n  var numberOffset = 52;\n\n  // 0 - 25: ABCDEFGHIJKLMNOPQRSTUVWXYZ\n  if (bigA <= charCode && charCode <= bigZ) {\n    return (charCode - bigA);\n  }\n\n  // 26 - 51: abcdefghijklmnopqrstuvwxyz\n  if (littleA <= charCode && charCode <= littleZ) {\n    return (charCode - littleA + littleOffset);\n  }\n\n  // 52 - 61: 0123456789\n  if (zero <= charCode && charCode <= nine) {\n    return (charCode - zero + numberOffset);\n  }\n\n  // 62: +\n  if (charCode == plus) {\n    return 62;\n  }\n\n  // 63: /\n  if (charCode == slash) {\n    return 63;\n  }\n\n  // Invalid base64 digit.\n  return -1;\n};\n", "/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n *\n * Based on the Base 64 VLQ implementation in Closure Compiler:\n * https://code.google.com/p/closure-compiler/source/browse/trunk/src/com/google/debugging/sourcemap/Base64VLQ.java\n *\n * Copyright 2011 The Closure Compiler Authors. All rights reserved.\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *  * Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above\n *    copyright notice, this list of conditions and the following\n *    disclaimer in the documentation and/or other materials provided\n *    with the distribution.\n *  * Neither the name of Google Inc. nor the names of its\n *    contributors may be used to endorse or promote products derived\n *    from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nvar base64 = require('./base64');\n\n// A single base 64 digit can contain 6 bits of data. For the base 64 variable\n// length quantities we use in the source map spec, the first bit is the sign,\n// the next four bits are the actual value, and the 6th bit is the\n// continuation bit. The continuation bit tells us whether there are more\n// digits in this value following this digit.\n//\n//   Continuation\n//   |    Sign\n//   |    |\n//   V    V\n//   101011\n\nvar VLQ_BASE_SHIFT = 5;\n\n// binary: 100000\nvar VLQ_BASE = 1 << VLQ_BASE_SHIFT;\n\n// binary: 011111\nvar VLQ_BASE_MASK = VLQ_BASE - 1;\n\n// binary: 100000\nvar VLQ_CONTINUATION_BIT = VLQ_BASE;\n\n/**\n * Converts from a two-complement value to a value where the sign bit is\n * placed in the least significant bit.  For example, as decimals:\n *   1 becomes 2 (10 binary), -1 becomes 3 (11 binary)\n *   2 becomes 4 (100 binary), -2 becomes 5 (101 binary)\n */\nfunction toVLQSigned(aValue) {\n  return aValue < 0\n    ? ((-aValue) << 1) + 1\n    : (aValue << 1) + 0;\n}\n\n/**\n * Converts to a two-complement value from a value where the sign bit is\n * placed in the least significant bit.  For example, as decimals:\n *   2 (10 binary) becomes 1, 3 (11 binary) becomes -1\n *   4 (100 binary) becomes 2, 5 (101 binary) becomes -2\n */\nfunction fromVLQSigned(aValue) {\n  var isNegative = (aValue & 1) === 1;\n  var shifted = aValue >> 1;\n  return isNegative\n    ? -shifted\n    : shifted;\n}\n\n/**\n * Returns the base 64 VLQ encoded value.\n */\nexports.encode = function base64VLQ_encode(aValue) {\n  var encoded = \"\";\n  var digit;\n\n  var vlq = toVLQSigned(aValue);\n\n  do {\n    digit = vlq & VLQ_BASE_MASK;\n    vlq >>>= VLQ_BASE_SHIFT;\n    if (vlq > 0) {\n      // There are still more digits in this value, so we must make sure the\n      // continuation bit is marked.\n      digit |= VLQ_CONTINUATION_BIT;\n    }\n    encoded += base64.encode(digit);\n  } while (vlq > 0);\n\n  return encoded;\n};\n\n/**\n * Decodes the next base 64 VLQ value from the given string and returns the\n * value and the rest of the string via the out parameter.\n */\nexports.decode = function base64VLQ_decode(aStr, aIndex, aOutParam) {\n  var strLen = aStr.length;\n  var result = 0;\n  var shift = 0;\n  var continuation, digit;\n\n  do {\n    if (aIndex >= strLen) {\n      throw new Error(\"Expected more digits in base 64 VLQ value.\");\n    }\n\n    digit = base64.decode(aStr.charCodeAt(aIndex++));\n    if (digit === -1) {\n      throw new Error(\"Invalid base64 digit: \" + aStr.charAt(aIndex - 1));\n    }\n\n    continuation = !!(digit & VLQ_CONTINUATION_BIT);\n    digit &= VLQ_BASE_MASK;\n    result = result + (digit << shift);\n    shift += VLQ_BASE_SHIFT;\n  } while (continuation);\n\n  aOutParam.value = fromVLQSigned(result);\n  aOutParam.rest = aIndex;\n};\n", "/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\n/**\n * This is a helper function for getting values from parameter/options\n * objects.\n *\n * @param args The object we are extracting values from\n * @param name The name of the property we are getting.\n * @param defaultValue An optional value to return if the property is missing\n * from the object. If this is not specified and the property is missing, an\n * error will be thrown.\n */\nfunction getArg(aArgs, aName, aDefaultValue) {\n  if (aName in aArgs) {\n    return aArgs[aName];\n  } else if (arguments.length === 3) {\n    return aDefaultValue;\n  } else {\n    throw new Error('\"' + aName + '\" is a required argument.');\n  }\n}\nexports.getArg = getArg;\n\nvar urlRegexp = /^(?:([\\w+\\-.]+):)?\\/\\/(?:(\\w+:\\w+)@)?([\\w.-]*)(?::(\\d+))?(.*)$/;\nvar dataUrlRegexp = /^data:.+\\,.+$/;\n\nfunction urlParse(aUrl) {\n  var match = aUrl.match(urlRegexp);\n  if (!match) {\n    return null;\n  }\n  return {\n    scheme: match[1],\n    auth: match[2],\n    host: match[3],\n    port: match[4],\n    path: match[5]\n  };\n}\nexports.urlParse = urlParse;\n\nfunction urlGenerate(aParsedUrl) {\n  var url = '';\n  if (aParsedUrl.scheme) {\n    url += aParsedUrl.scheme + ':';\n  }\n  url += '//';\n  if (aParsedUrl.auth) {\n    url += aParsedUrl.auth + '@';\n  }\n  if (aParsedUrl.host) {\n    url += aParsedUrl.host;\n  }\n  if (aParsedUrl.port) {\n    url += \":\" + aParsedUrl.port\n  }\n  if (aParsedUrl.path) {\n    url += aParsedUrl.path;\n  }\n  return url;\n}\nexports.urlGenerate = urlGenerate;\n\n/**\n * Normalizes a path, or the path portion of a URL:\n *\n * - Replaces consecutive slashes with one slash.\n * - Removes unnecessary '.' parts.\n * - Removes unnecessary '<dir>/..' parts.\n *\n * Based on code in the Node.js 'path' core module.\n *\n * @param aPath The path or url to normalize.\n */\nfunction normalize(aPath) {\n  var path = aPath;\n  var url = urlParse(aPath);\n  if (url) {\n    if (!url.path) {\n      return aPath;\n    }\n    path = url.path;\n  }\n  var isAbsolute = exports.isAbsolute(path);\n\n  var parts = path.split(/\\/+/);\n  for (var part, up = 0, i = parts.length - 1; i >= 0; i--) {\n    part = parts[i];\n    if (part === '.') {\n      parts.splice(i, 1);\n    } else if (part === '..') {\n      up++;\n    } else if (up > 0) {\n      if (part === '') {\n        // The first part is blank if the path is absolute. Trying to go\n        // above the root is a no-op. Therefore we can remove all '..' parts\n        // directly after the root.\n        parts.splice(i + 1, up);\n        up = 0;\n      } else {\n        parts.splice(i, 2);\n        up--;\n      }\n    }\n  }\n  path = parts.join('/');\n\n  if (path === '') {\n    path = isAbsolute ? '/' : '.';\n  }\n\n  if (url) {\n    url.path = path;\n    return urlGenerate(url);\n  }\n  return path;\n}\nexports.normalize = normalize;\n\n/**\n * Joins two paths/URLs.\n *\n * @param aRoot The root path or URL.\n * @param aPath The path or URL to be joined with the root.\n *\n * - If aPath is a URL or a data URI, aPath is returned, unless aPath is a\n *   scheme-relative URL: Then the scheme of aRoot, if any, is prepended\n *   first.\n * - Otherwise aPath is a path. If aRoot is a URL, then its path portion\n *   is updated with the result and aRoot is returned. Otherwise the result\n *   is returned.\n *   - If aPath is absolute, the result is aPath.\n *   - Otherwise the two paths are joined with a slash.\n * - Joining for example 'http://' and 'www.example.com' is also supported.\n */\nfunction join(aRoot, aPath) {\n  if (aRoot === \"\") {\n    aRoot = \".\";\n  }\n  if (aPath === \"\") {\n    aPath = \".\";\n  }\n  var aPathUrl = urlParse(aPath);\n  var aRootUrl = urlParse(aRoot);\n  if (aRootUrl) {\n    aRoot = aRootUrl.path || '/';\n  }\n\n  // `join(foo, '//www.example.org')`\n  if (aPathUrl && !aPathUrl.scheme) {\n    if (aRootUrl) {\n      aPathUrl.scheme = aRootUrl.scheme;\n    }\n    return urlGenerate(aPathUrl);\n  }\n\n  if (aPathUrl || aPath.match(dataUrlRegexp)) {\n    return aPath;\n  }\n\n  // `join('http://', 'www.example.com')`\n  if (aRootUrl && !aRootUrl.host && !aRootUrl.path) {\n    aRootUrl.host = aPath;\n    return urlGenerate(aRootUrl);\n  }\n\n  var joined = aPath.charAt(0) === '/'\n    ? aPath\n    : normalize(aRoot.replace(/\\/+$/, '') + '/' + aPath);\n\n  if (aRootUrl) {\n    aRootUrl.path = joined;\n    return urlGenerate(aRootUrl);\n  }\n  return joined;\n}\nexports.join = join;\n\nexports.isAbsolute = function (aPath) {\n  return aPath.charAt(0) === '/' || urlRegexp.test(aPath);\n};\n\n/**\n * Make a path relative to a URL or another path.\n *\n * @param aRoot The root path or URL.\n * @param aPath The path or URL to be made relative to aRoot.\n */\nfunction relative(aRoot, aPath) {\n  if (aRoot === \"\") {\n    aRoot = \".\";\n  }\n\n  aRoot = aRoot.replace(/\\/$/, '');\n\n  // It is possible for the path to be above the root. In this case, simply\n  // checking whether the root is a prefix of the path won't work. Instead, we\n  // need to remove components from the root one by one, until either we find\n  // a prefix that fits, or we run out of components to remove.\n  var level = 0;\n  while (aPath.indexOf(aRoot + '/') !== 0) {\n    var index = aRoot.lastIndexOf(\"/\");\n    if (index < 0) {\n      return aPath;\n    }\n\n    // If the only part of the root that is left is the scheme (i.e. http://,\n    // file:///, etc.), one or more slashes (/), or simply nothing at all, we\n    // have exhausted all components, so the path is not relative to the root.\n    aRoot = aRoot.slice(0, index);\n    if (aRoot.match(/^([^\\/]+:\\/)?\\/*$/)) {\n      return aPath;\n    }\n\n    ++level;\n  }\n\n  // Make sure we add a \"../\" for each component we removed from the root.\n  return Array(level + 1).join(\"../\") + aPath.substr(aRoot.length + 1);\n}\nexports.relative = relative;\n\nvar supportsNullProto = (function () {\n  var obj = Object.create(null);\n  return !('__proto__' in obj);\n}());\n\nfunction identity (s) {\n  return s;\n}\n\n/**\n * Because behavior goes wacky when you set `__proto__` on objects, we\n * have to prefix all the strings in our set with an arbitrary character.\n *\n * See https://github.com/mozilla/source-map/pull/31 and\n * https://github.com/mozilla/source-map/issues/30\n *\n * @param String aStr\n */\nfunction toSetString(aStr) {\n  if (isProtoString(aStr)) {\n    return '$' + aStr;\n  }\n\n  return aStr;\n}\nexports.toSetString = supportsNullProto ? identity : toSetString;\n\nfunction fromSetString(aStr) {\n  if (isProtoString(aStr)) {\n    return aStr.slice(1);\n  }\n\n  return aStr;\n}\nexports.fromSetString = supportsNullProto ? identity : fromSetString;\n\nfunction isProtoString(s) {\n  if (!s) {\n    return false;\n  }\n\n  var length = s.length;\n\n  if (length < 9 /* \"__proto__\".length */) {\n    return false;\n  }\n\n  if (s.charCodeAt(length - 1) !== 95  /* '_' */ ||\n      s.charCodeAt(length - 2) !== 95  /* '_' */ ||\n      s.charCodeAt(length - 3) !== 111 /* 'o' */ ||\n      s.charCodeAt(length - 4) !== 116 /* 't' */ ||\n      s.charCodeAt(length - 5) !== 111 /* 'o' */ ||\n      s.charCodeAt(length - 6) !== 114 /* 'r' */ ||\n      s.charCodeAt(length - 7) !== 112 /* 'p' */ ||\n      s.charCodeAt(length - 8) !== 95  /* '_' */ ||\n      s.charCodeAt(length - 9) !== 95  /* '_' */) {\n    return false;\n  }\n\n  for (var i = length - 10; i >= 0; i--) {\n    if (s.charCodeAt(i) !== 36 /* '$' */) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * Comparator between two mappings where the original positions are compared.\n *\n * Optionally pass in `true` as `onlyCompareGenerated` to consider two\n * mappings with the same original source/line/column, but different generated\n * line and column the same. Useful when searching for a mapping with a\n * stubbed out mapping.\n */\nfunction compareByOriginalPositions(mappingA, mappingB, onlyCompareOriginal) {\n  var cmp = strcmp(mappingA.source, mappingB.source);\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.originalLine - mappingB.originalLine;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.originalColumn - mappingB.originalColumn;\n  if (cmp !== 0 || onlyCompareOriginal) {\n    return cmp;\n  }\n\n  cmp = mappingA.generatedColumn - mappingB.generatedColumn;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.generatedLine - mappingB.generatedLine;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  return strcmp(mappingA.name, mappingB.name);\n}\nexports.compareByOriginalPositions = compareByOriginalPositions;\n\n/**\n * Comparator between two mappings with deflated source and name indices where\n * the generated positions are compared.\n *\n * Optionally pass in `true` as `onlyCompareGenerated` to consider two\n * mappings with the same generated line and column, but different\n * source/name/original line and column the same. Useful when searching for a\n * mapping with a stubbed out mapping.\n */\nfunction compareByGeneratedPositionsDeflated(mappingA, mappingB, onlyCompareGenerated) {\n  var cmp = mappingA.generatedLine - mappingB.generatedLine;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.generatedColumn - mappingB.generatedColumn;\n  if (cmp !== 0 || onlyCompareGenerated) {\n    return cmp;\n  }\n\n  cmp = strcmp(mappingA.source, mappingB.source);\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.originalLine - mappingB.originalLine;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.originalColumn - mappingB.originalColumn;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  return strcmp(mappingA.name, mappingB.name);\n}\nexports.compareByGeneratedPositionsDeflated = compareByGeneratedPositionsDeflated;\n\nfunction strcmp(aStr1, aStr2) {\n  if (aStr1 === aStr2) {\n    return 0;\n  }\n\n  if (aStr1 === null) {\n    return 1; // aStr2 !== null\n  }\n\n  if (aStr2 === null) {\n    return -1; // aStr1 !== null\n  }\n\n  if (aStr1 > aStr2) {\n    return 1;\n  }\n\n  return -1;\n}\n\n/**\n * Comparator between two mappings with inflated source and name strings where\n * the generated positions are compared.\n */\nfunction compareByGeneratedPositionsInflated(mappingA, mappingB) {\n  var cmp = mappingA.generatedLine - mappingB.generatedLine;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.generatedColumn - mappingB.generatedColumn;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = strcmp(mappingA.source, mappingB.source);\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.originalLine - mappingB.originalLine;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.originalColumn - mappingB.originalColumn;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  return strcmp(mappingA.name, mappingB.name);\n}\nexports.compareByGeneratedPositionsInflated = compareByGeneratedPositionsInflated;\n\n/**\n * Strip any JSON XSSI avoidance prefix from the string (as documented\n * in the source maps specification), and then parse the string as\n * JSON.\n */\nfunction parseSourceMapInput(str) {\n  return JSON.parse(str.replace(/^\\)]}'[^\\n]*\\n/, ''));\n}\nexports.parseSourceMapInput = parseSourceMapInput;\n\n/**\n * Compute the URL of a source given the the source root, the source's\n * URL, and the source map's URL.\n */\nfunction computeSourceURL(sourceRoot, sourceURL, sourceMapURL) {\n  sourceURL = sourceURL || '';\n\n  if (sourceRoot) {\n    // This follows what Chrome does.\n    if (sourceRoot[sourceRoot.length - 1] !== '/' && sourceURL[0] !== '/') {\n      sourceRoot += '/';\n    }\n    // The spec says:\n    //   Line 4: An optional source root, useful for relocating source\n    //   files on a server or removing repeated values in the\n    //   “sources” entry.  This value is prepended to the individual\n    //   entries in the “source” field.\n    sourceURL = sourceRoot + sourceURL;\n  }\n\n  // Historically, SourceMapConsumer did not take the sourceMapURL as\n  // a parameter.  This mode is still somewhat supported, which is why\n  // this code block is conditional.  However, it's preferable to pass\n  // the source map URL to SourceMapConsumer, so that this function\n  // can implement the source URL resolution algorithm as outlined in\n  // the spec.  This block is basically the equivalent of:\n  //    new URL(sourceURL, sourceMapURL).toString()\n  // ... except it avoids using URL, which wasn't available in the\n  // older releases of node still supported by this library.\n  //\n  // The spec says:\n  //   If the sources are not absolute URLs after prepending of the\n  //   “sourceRoot”, the sources are resolved relative to the\n  //   SourceMap (like resolving script src in a html document).\n  if (sourceMapURL) {\n    var parsed = urlParse(sourceMapURL);\n    if (!parsed) {\n      throw new Error(\"sourceMapURL could not be parsed\");\n    }\n    if (parsed.path) {\n      // Strip the last path component, but keep the \"/\".\n      var index = parsed.path.lastIndexOf('/');\n      if (index >= 0) {\n        parsed.path = parsed.path.substring(0, index + 1);\n      }\n    }\n    sourceURL = join(urlGenerate(parsed), sourceURL);\n  }\n\n  return normalize(sourceURL);\n}\nexports.computeSourceURL = computeSourceURL;\n", "/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nvar util = require('./util');\nvar has = Object.prototype.hasOwnProperty;\nvar hasNativeMap = typeof Map !== \"undefined\";\n\n/**\n * A data structure which is a combination of an array and a set. Adding a new\n * member is O(1), testing for membership is O(1), and finding the index of an\n * element is O(1). Removing elements from the set is not supported. Only\n * strings are supported for membership.\n */\nfunction ArraySet() {\n  this._array = [];\n  this._set = hasNativeMap ? new Map() : Object.create(null);\n}\n\n/**\n * Static method for creating ArraySet instances from an existing array.\n */\nArraySet.fromArray = function ArraySet_fromArray(aArray, aAllowDuplicates) {\n  var set = new ArraySet();\n  for (var i = 0, len = aArray.length; i < len; i++) {\n    set.add(aArray[i], aAllowDuplicates);\n  }\n  return set;\n};\n\n/**\n * Return how many unique items are in this ArraySet. If duplicates have been\n * added, than those do not count towards the size.\n *\n * @returns Number\n */\nArraySet.prototype.size = function ArraySet_size() {\n  return hasNativeMap ? this._set.size : Object.getOwnPropertyNames(this._set).length;\n};\n\n/**\n * Add the given string to this set.\n *\n * @param String aStr\n */\nArraySet.prototype.add = function ArraySet_add(aStr, aAllowDuplicates) {\n  var sStr = hasNativeMap ? aStr : util.toSetString(aStr);\n  var isDuplicate = hasNativeMap ? this.has(aStr) : has.call(this._set, sStr);\n  var idx = this._array.length;\n  if (!isDuplicate || aAllowDuplicates) {\n    this._array.push(aStr);\n  }\n  if (!isDuplicate) {\n    if (hasNativeMap) {\n      this._set.set(aStr, idx);\n    } else {\n      this._set[sStr] = idx;\n    }\n  }\n};\n\n/**\n * Is the given string a member of this set?\n *\n * @param String aStr\n */\nArraySet.prototype.has = function ArraySet_has(aStr) {\n  if (hasNativeMap) {\n    return this._set.has(aStr);\n  } else {\n    var sStr = util.toSetString(aStr);\n    return has.call(this._set, sStr);\n  }\n};\n\n/**\n * What is the index of the given string in the array?\n *\n * @param String aStr\n */\nArraySet.prototype.indexOf = function ArraySet_indexOf(aStr) {\n  if (hasNativeMap) {\n    var idx = this._set.get(aStr);\n    if (idx >= 0) {\n        return idx;\n    }\n  } else {\n    var sStr = util.toSetString(aStr);\n    if (has.call(this._set, sStr)) {\n      return this._set[sStr];\n    }\n  }\n\n  throw new Error('\"' + aStr + '\" is not in the set.');\n};\n\n/**\n * What is the element at the given index?\n *\n * @param Number aIdx\n */\nArraySet.prototype.at = function ArraySet_at(aIdx) {\n  if (aIdx >= 0 && aIdx < this._array.length) {\n    return this._array[aIdx];\n  }\n  throw new Error('No element indexed by ' + aIdx);\n};\n\n/**\n * Returns the array representation of this set (which has the proper indices\n * indicated by indexOf). Note that this is a copy of the internal array used\n * for storing the members so that no one can mess with internal state.\n */\nArraySet.prototype.toArray = function ArraySet_toArray() {\n  return this._array.slice();\n};\n\nexports.ArraySet = ArraySet;\n", "/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2014 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nvar util = require('./util');\n\n/**\n * Determine whether mappingB is after mappingA with respect to generated\n * position.\n */\nfunction generatedPositionAfter(mappingA, mappingB) {\n  // Optimized for most common case\n  var lineA = mappingA.generatedLine;\n  var lineB = mappingB.generatedLine;\n  var columnA = mappingA.generatedColumn;\n  var columnB = mappingB.generatedColumn;\n  return lineB > lineA || lineB == lineA && columnB >= columnA ||\n         util.compareByGeneratedPositionsInflated(mappingA, mappingB) <= 0;\n}\n\n/**\n * A data structure to provide a sorted view of accumulated mappings in a\n * performance conscious manner. It trades a neglibable overhead in general\n * case for a large speedup in case of mappings being added in order.\n */\nfunction MappingList() {\n  this._array = [];\n  this._sorted = true;\n  // Serves as infimum\n  this._last = {generatedLine: -1, generatedColumn: 0};\n}\n\n/**\n * Iterate through internal items. This method takes the same arguments that\n * `Array.prototype.forEach` takes.\n *\n * NOTE: The order of the mappings is NOT guaranteed.\n */\nMappingList.prototype.unsortedForEach =\n  function MappingList_forEach(aCallback, aThisArg) {\n    this._array.forEach(aCallback, aThisArg);\n  };\n\n/**\n * Add the given source mapping.\n *\n * @param Object aMapping\n */\nMappingList.prototype.add = function MappingList_add(aMapping) {\n  if (generatedPositionAfter(this._last, aMapping)) {\n    this._last = aMapping;\n    this._array.push(aMapping);\n  } else {\n    this._sorted = false;\n    this._array.push(aMapping);\n  }\n};\n\n/**\n * Returns the flat, sorted array of mappings. The mappings are sorted by\n * generated position.\n *\n * WARNING: This method returns internal data without copying, for\n * performance. The return value must NOT be mutated, and should be treated as\n * an immutable borrow. If you want to take ownership, you must make your own\n * copy.\n */\nMappingList.prototype.toArray = function MappingList_toArray() {\n  if (!this._sorted) {\n    this._array.sort(util.compareByGeneratedPositionsInflated);\n    this._sorted = true;\n  }\n  return this._array;\n};\n\nexports.MappingList = MappingList;\n", "/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nvar base64VLQ = require('./base64-vlq');\nvar util = require('./util');\nvar ArraySet = require('./array-set').ArraySet;\nvar MappingList = require('./mapping-list').MappingList;\n\n/**\n * An instance of the SourceMapGenerator represents a source map which is\n * being built incrementally. You may pass an object with the following\n * properties:\n *\n *   - file: The filename of the generated source.\n *   - sourceRoot: A root for all relative URLs in this source map.\n */\nfunction SourceMapGenerator(aArgs) {\n  if (!aArgs) {\n    aArgs = {};\n  }\n  this._file = util.getArg(aArgs, 'file', null);\n  this._sourceRoot = util.getArg(aArgs, 'sourceRoot', null);\n  this._skipValidation = util.getArg(aArgs, 'skipValidation', false);\n  this._sources = new ArraySet();\n  this._names = new ArraySet();\n  this._mappings = new MappingList();\n  this._sourcesContents = null;\n}\n\nSourceMapGenerator.prototype._version = 3;\n\n/**\n * Creates a new SourceMapGenerator based on a SourceMapConsumer\n *\n * @param aSourceMapConsumer The SourceMap.\n */\nSourceMapGenerator.fromSourceMap =\n  function SourceMapGenerator_fromSourceMap(aSourceMapConsumer) {\n    var sourceRoot = aSourceMapConsumer.sourceRoot;\n    var generator = new SourceMapGenerator({\n      file: aSourceMapConsumer.file,\n      sourceRoot: sourceRoot\n    });\n    aSourceMapConsumer.eachMapping(function (mapping) {\n      var newMapping = {\n        generated: {\n          line: mapping.generatedLine,\n          column: mapping.generatedColumn\n        }\n      };\n\n      if (mapping.source != null) {\n        newMapping.source = mapping.source;\n        if (sourceRoot != null) {\n          newMapping.source = util.relative(sourceRoot, newMapping.source);\n        }\n\n        newMapping.original = {\n          line: mapping.originalLine,\n          column: mapping.originalColumn\n        };\n\n        if (mapping.name != null) {\n          newMapping.name = mapping.name;\n        }\n      }\n\n      generator.addMapping(newMapping);\n    });\n    aSourceMapConsumer.sources.forEach(function (sourceFile) {\n      var sourceRelative = sourceFile;\n      if (sourceRoot !== null) {\n        sourceRelative = util.relative(sourceRoot, sourceFile);\n      }\n\n      if (!generator._sources.has(sourceRelative)) {\n        generator._sources.add(sourceRelative);\n      }\n\n      var content = aSourceMapConsumer.sourceContentFor(sourceFile);\n      if (content != null) {\n        generator.setSourceContent(sourceFile, content);\n      }\n    });\n    return generator;\n  };\n\n/**\n * Add a single mapping from original source line and column to the generated\n * source's line and column for this source map being created. The mapping\n * object should have the following properties:\n *\n *   - generated: An object with the generated line and column positions.\n *   - original: An object with the original line and column positions.\n *   - source: The original source file (relative to the sourceRoot).\n *   - name: An optional original token name for this mapping.\n */\nSourceMapGenerator.prototype.addMapping =\n  function SourceMapGenerator_addMapping(aArgs) {\n    var generated = util.getArg(aArgs, 'generated');\n    var original = util.getArg(aArgs, 'original', null);\n    var source = util.getArg(aArgs, 'source', null);\n    var name = util.getArg(aArgs, 'name', null);\n\n    if (!this._skipValidation) {\n      this._validateMapping(generated, original, source, name);\n    }\n\n    if (source != null) {\n      source = String(source);\n      if (!this._sources.has(source)) {\n        this._sources.add(source);\n      }\n    }\n\n    if (name != null) {\n      name = String(name);\n      if (!this._names.has(name)) {\n        this._names.add(name);\n      }\n    }\n\n    this._mappings.add({\n      generatedLine: generated.line,\n      generatedColumn: generated.column,\n      originalLine: original != null && original.line,\n      originalColumn: original != null && original.column,\n      source: source,\n      name: name\n    });\n  };\n\n/**\n * Set the source content for a source file.\n */\nSourceMapGenerator.prototype.setSourceContent =\n  function SourceMapGenerator_setSourceContent(aSourceFile, aSourceContent) {\n    var source = aSourceFile;\n    if (this._sourceRoot != null) {\n      source = util.relative(this._sourceRoot, source);\n    }\n\n    if (aSourceContent != null) {\n      // Add the source content to the _sourcesContents map.\n      // Create a new _sourcesContents map if the property is null.\n      if (!this._sourcesContents) {\n        this._sourcesContents = Object.create(null);\n      }\n      this._sourcesContents[util.toSetString(source)] = aSourceContent;\n    } else if (this._sourcesContents) {\n      // Remove the source file from the _sourcesContents map.\n      // If the _sourcesContents map is empty, set the property to null.\n      delete this._sourcesContents[util.toSetString(source)];\n      if (Object.keys(this._sourcesContents).length === 0) {\n        this._sourcesContents = null;\n      }\n    }\n  };\n\n/**\n * Applies the mappings of a sub-source-map for a specific source file to the\n * source map being generated. Each mapping to the supplied source file is\n * rewritten using the supplied source map. Note: The resolution for the\n * resulting mappings is the minimium of this map and the supplied map.\n *\n * @param aSourceMapConsumer The source map to be applied.\n * @param aSourceFile Optional. The filename of the source file.\n *        If omitted, SourceMapConsumer's file property will be used.\n * @param aSourceMapPath Optional. The dirname of the path to the source map\n *        to be applied. If relative, it is relative to the SourceMapConsumer.\n *        This parameter is needed when the two source maps aren't in the same\n *        directory, and the source map to be applied contains relative source\n *        paths. If so, those relative source paths need to be rewritten\n *        relative to the SourceMapGenerator.\n */\nSourceMapGenerator.prototype.applySourceMap =\n  function SourceMapGenerator_applySourceMap(aSourceMapConsumer, aSourceFile, aSourceMapPath) {\n    var sourceFile = aSourceFile;\n    // If aSourceFile is omitted, we will use the file property of the SourceMap\n    if (aSourceFile == null) {\n      if (aSourceMapConsumer.file == null) {\n        throw new Error(\n          'SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, ' +\n          'or the source map\\'s \"file\" property. Both were omitted.'\n        );\n      }\n      sourceFile = aSourceMapConsumer.file;\n    }\n    var sourceRoot = this._sourceRoot;\n    // Make \"sourceFile\" relative if an absolute Url is passed.\n    if (sourceRoot != null) {\n      sourceFile = util.relative(sourceRoot, sourceFile);\n    }\n    // Applying the SourceMap can add and remove items from the sources and\n    // the names array.\n    var newSources = new ArraySet();\n    var newNames = new ArraySet();\n\n    // Find mappings for the \"sourceFile\"\n    this._mappings.unsortedForEach(function (mapping) {\n      if (mapping.source === sourceFile && mapping.originalLine != null) {\n        // Check if it can be mapped by the source map, then update the mapping.\n        var original = aSourceMapConsumer.originalPositionFor({\n          line: mapping.originalLine,\n          column: mapping.originalColumn\n        });\n        if (original.source != null) {\n          // Copy mapping\n          mapping.source = original.source;\n          if (aSourceMapPath != null) {\n            mapping.source = util.join(aSourceMapPath, mapping.source)\n          }\n          if (sourceRoot != null) {\n            mapping.source = util.relative(sourceRoot, mapping.source);\n          }\n          mapping.originalLine = original.line;\n          mapping.originalColumn = original.column;\n          if (original.name != null) {\n            mapping.name = original.name;\n          }\n        }\n      }\n\n      var source = mapping.source;\n      if (source != null && !newSources.has(source)) {\n        newSources.add(source);\n      }\n\n      var name = mapping.name;\n      if (name != null && !newNames.has(name)) {\n        newNames.add(name);\n      }\n\n    }, this);\n    this._sources = newSources;\n    this._names = newNames;\n\n    // Copy sourcesContents of applied map.\n    aSourceMapConsumer.sources.forEach(function (sourceFile) {\n      var content = aSourceMapConsumer.sourceContentFor(sourceFile);\n      if (content != null) {\n        if (aSourceMapPath != null) {\n          sourceFile = util.join(aSourceMapPath, sourceFile);\n        }\n        if (sourceRoot != null) {\n          sourceFile = util.relative(sourceRoot, sourceFile);\n        }\n        this.setSourceContent(sourceFile, content);\n      }\n    }, this);\n  };\n\n/**\n * A mapping can have one of the three levels of data:\n *\n *   1. Just the generated position.\n *   2. The Generated position, original position, and original source.\n *   3. Generated and original position, original source, as well as a name\n *      token.\n *\n * To maintain consistency, we validate that any new mapping being added falls\n * in to one of these categories.\n */\nSourceMapGenerator.prototype._validateMapping =\n  function SourceMapGenerator_validateMapping(aGenerated, aOriginal, aSource,\n                                              aName) {\n    // When aOriginal is truthy but has empty values for .line and .column,\n    // it is most likely a programmer error. In this case we throw a very\n    // specific error message to try to guide them the right way.\n    // For example: https://github.com/Polymer/polymer-bundler/pull/519\n    if (aOriginal && typeof aOriginal.line !== 'number' && typeof aOriginal.column !== 'number') {\n        throw new Error(\n            'original.line and original.column are not numbers -- you probably meant to omit ' +\n            'the original mapping entirely and only map the generated position. If so, pass ' +\n            'null for the original mapping instead of an object with empty or null values.'\n        );\n    }\n\n    if (aGenerated && 'line' in aGenerated && 'column' in aGenerated\n        && aGenerated.line > 0 && aGenerated.column >= 0\n        && !aOriginal && !aSource && !aName) {\n      // Case 1.\n      return;\n    }\n    else if (aGenerated && 'line' in aGenerated && 'column' in aGenerated\n             && aOriginal && 'line' in aOriginal && 'column' in aOriginal\n             && aGenerated.line > 0 && aGenerated.column >= 0\n             && aOriginal.line > 0 && aOriginal.column >= 0\n             && aSource) {\n      // Cases 2 and 3.\n      return;\n    }\n    else {\n      throw new Error('Invalid mapping: ' + JSON.stringify({\n        generated: aGenerated,\n        source: aSource,\n        original: aOriginal,\n        name: aName\n      }));\n    }\n  };\n\n/**\n * Serialize the accumulated mappings in to the stream of base 64 VLQs\n * specified by the source map format.\n */\nSourceMapGenerator.prototype._serializeMappings =\n  function SourceMapGenerator_serializeMappings() {\n    var previousGeneratedColumn = 0;\n    var previousGeneratedLine = 1;\n    var previousOriginalColumn = 0;\n    var previousOriginalLine = 0;\n    var previousName = 0;\n    var previousSource = 0;\n    var result = '';\n    var next;\n    var mapping;\n    var nameIdx;\n    var sourceIdx;\n\n    var mappings = this._mappings.toArray();\n    for (var i = 0, len = mappings.length; i < len; i++) {\n      mapping = mappings[i];\n      next = ''\n\n      if (mapping.generatedLine !== previousGeneratedLine) {\n        previousGeneratedColumn = 0;\n        while (mapping.generatedLine !== previousGeneratedLine) {\n          next += ';';\n          previousGeneratedLine++;\n        }\n      }\n      else {\n        if (i > 0) {\n          if (!util.compareByGeneratedPositionsInflated(mapping, mappings[i - 1])) {\n            continue;\n          }\n          next += ',';\n        }\n      }\n\n      next += base64VLQ.encode(mapping.generatedColumn\n                                 - previousGeneratedColumn);\n      previousGeneratedColumn = mapping.generatedColumn;\n\n      if (mapping.source != null) {\n        sourceIdx = this._sources.indexOf(mapping.source);\n        next += base64VLQ.encode(sourceIdx - previousSource);\n        previousSource = sourceIdx;\n\n        // lines are stored 0-based in SourceMap spec version 3\n        next += base64VLQ.encode(mapping.originalLine - 1\n                                   - previousOriginalLine);\n        previousOriginalLine = mapping.originalLine - 1;\n\n        next += base64VLQ.encode(mapping.originalColumn\n                                   - previousOriginalColumn);\n        previousOriginalColumn = mapping.originalColumn;\n\n        if (mapping.name != null) {\n          nameIdx = this._names.indexOf(mapping.name);\n          next += base64VLQ.encode(nameIdx - previousName);\n          previousName = nameIdx;\n        }\n      }\n\n      result += next;\n    }\n\n    return result;\n  };\n\nSourceMapGenerator.prototype._generateSourcesContent =\n  function SourceMapGenerator_generateSourcesContent(aSources, aSourceRoot) {\n    return aSources.map(function (source) {\n      if (!this._sourcesContents) {\n        return null;\n      }\n      if (aSourceRoot != null) {\n        source = util.relative(aSourceRoot, source);\n      }\n      var key = util.toSetString(source);\n      return Object.prototype.hasOwnProperty.call(this._sourcesContents, key)\n        ? this._sourcesContents[key]\n        : null;\n    }, this);\n  };\n\n/**\n * Externalize the source map.\n */\nSourceMapGenerator.prototype.toJSON =\n  function SourceMapGenerator_toJSON() {\n    var map = {\n      version: this._version,\n      sources: this._sources.toArray(),\n      names: this._names.toArray(),\n      mappings: this._serializeMappings()\n    };\n    if (this._file != null) {\n      map.file = this._file;\n    }\n    if (this._sourceRoot != null) {\n      map.sourceRoot = this._sourceRoot;\n    }\n    if (this._sourcesContents) {\n      map.sourcesContent = this._generateSourcesContent(map.sources, map.sourceRoot);\n    }\n\n    return map;\n  };\n\n/**\n * Render the source map being generated to a string.\n */\nSourceMapGenerator.prototype.toString =\n  function SourceMapGenerator_toString() {\n    return JSON.stringify(this.toJSON());\n  };\n\nexports.SourceMapGenerator = SourceMapGenerator;\n", "/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nexports.GREATEST_LOWER_BOUND = 1;\nexports.LEAST_UPPER_BOUND = 2;\n\n/**\n * Recursive implementation of binary search.\n *\n * @param aLow Indices here and lower do not contain the needle.\n * @param aHigh Indices here and higher do not contain the needle.\n * @param aNeedle The element being searched for.\n * @param aHaystack The non-empty array being searched.\n * @param aCompare Function which takes two elements and returns -1, 0, or 1.\n * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or\n *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the\n *     closest element that is smaller than or greater than the one we are\n *     searching for, respectively, if the exact element cannot be found.\n */\nfunction recursiveSearch(aLow, aHigh, aNeedle, aHaystack, aCompare, aBias) {\n  // This function terminates when one of the following is true:\n  //\n  //   1. We find the exact element we are looking for.\n  //\n  //   2. We did not find the exact element, but we can return the index of\n  //      the next-closest element.\n  //\n  //   3. We did not find the exact element, and there is no next-closest\n  //      element than the one we are searching for, so we return -1.\n  var mid = Math.floor((aHigh - aLow) / 2) + aLow;\n  var cmp = aCompare(aNeedle, aHaystack[mid], true);\n  if (cmp === 0) {\n    // Found the element we are looking for.\n    return mid;\n  }\n  else if (cmp > 0) {\n    // Our needle is greater than aHaystack[mid].\n    if (aHigh - mid > 1) {\n      // The element is in the upper half.\n      return recursiveSearch(mid, aHigh, aNeedle, aHaystack, aCompare, aBias);\n    }\n\n    // The exact needle element was not found in this haystack. Determine if\n    // we are in termination case (3) or (2) and return the appropriate thing.\n    if (aBias == exports.LEAST_UPPER_BOUND) {\n      return aHigh < aHaystack.length ? aHigh : -1;\n    } else {\n      return mid;\n    }\n  }\n  else {\n    // Our needle is less than aHaystack[mid].\n    if (mid - aLow > 1) {\n      // The element is in the lower half.\n      return recursiveSearch(aLow, mid, aNeedle, aHaystack, aCompare, aBias);\n    }\n\n    // we are in termination case (3) or (2) and return the appropriate thing.\n    if (aBias == exports.LEAST_UPPER_BOUND) {\n      return mid;\n    } else {\n      return aLow < 0 ? -1 : aLow;\n    }\n  }\n}\n\n/**\n * This is an implementation of binary search which will always try and return\n * the index of the closest element if there is no exact hit. This is because\n * mappings between original and generated line/col pairs are single points,\n * and there is an implicit region between each of them, so a miss just means\n * that you aren't on the very start of a region.\n *\n * @param aNeedle The element you are looking for.\n * @param aHaystack The array that is being searched.\n * @param aCompare A function which takes the needle and an element in the\n *     array and returns -1, 0, or 1 depending on whether the needle is less\n *     than, equal to, or greater than the element, respectively.\n * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or\n *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the\n *     closest element that is smaller than or greater than the one we are\n *     searching for, respectively, if the exact element cannot be found.\n *     Defaults to 'binarySearch.GREATEST_LOWER_BOUND'.\n */\nexports.search = function search(aNeedle, aHaystack, aCompare, aBias) {\n  if (aHaystack.length === 0) {\n    return -1;\n  }\n\n  var index = recursiveSearch(-1, aHaystack.length, aNeedle, aHaystack,\n                              aCompare, aBias || exports.GREATEST_LOWER_BOUND);\n  if (index < 0) {\n    return -1;\n  }\n\n  // We have found either the exact element, or the next-closest element than\n  // the one we are searching for. However, there may be more than one such\n  // element. Make sure we always return the smallest of these.\n  while (index - 1 >= 0) {\n    if (aCompare(aHaystack[index], aHaystack[index - 1], true) !== 0) {\n      break;\n    }\n    --index;\n  }\n\n  return index;\n};\n", "/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\n// It turns out that some (most?) JavaScript engines don't self-host\n// `Array.prototype.sort`. This makes sense because C++ will likely remain\n// faster than JS when doing raw CPU-intensive sorting. However, when using a\n// custom comparator function, calling back and forth between the VM's C++ and\n// JIT'd JS is rather slow *and* loses JIT type information, resulting in\n// worse generated code for the comparator function than would be optimal. In\n// fact, when sorting with a comparator, these costs outweigh the benefits of\n// sorting in C++. By using our own JS-implemented Quick Sort (below), we get\n// a ~3500ms mean speed-up in `bench/bench.html`.\n\n/**\n * Swap the elements indexed by `x` and `y` in the array `ary`.\n *\n * @param {Array} ary\n *        The array.\n * @param {Number} x\n *        The index of the first item.\n * @param {Number} y\n *        The index of the second item.\n */\nfunction swap(ary, x, y) {\n  var temp = ary[x];\n  ary[x] = ary[y];\n  ary[y] = temp;\n}\n\n/**\n * Returns a random integer within the range `low .. high` inclusive.\n *\n * @param {Number} low\n *        The lower bound on the range.\n * @param {Number} high\n *        The upper bound on the range.\n */\nfunction randomIntInRange(low, high) {\n  return Math.round(low + (Math.random() * (high - low)));\n}\n\n/**\n * The Quick Sort algorithm.\n *\n * @param {Array} ary\n *        An array to sort.\n * @param {function} comparator\n *        Function to use to compare two items.\n * @param {Number} p\n *        Start index of the array\n * @param {Number} r\n *        End index of the array\n */\nfunction doQuickSort(ary, comparator, p, r) {\n  // If our lower bound is less than our upper bound, we (1) partition the\n  // array into two pieces and (2) recurse on each half. If it is not, this is\n  // the empty array and our base case.\n\n  if (p < r) {\n    // (1) Partitioning.\n    //\n    // The partitioning chooses a pivot between `p` and `r` and moves all\n    // elements that are less than or equal to the pivot to the before it, and\n    // all the elements that are greater than it after it. The effect is that\n    // once partition is done, the pivot is in the exact place it will be when\n    // the array is put in sorted order, and it will not need to be moved\n    // again. This runs in O(n) time.\n\n    // Always choose a random pivot so that an input array which is reverse\n    // sorted does not cause O(n^2) running time.\n    var pivotIndex = randomIntInRange(p, r);\n    var i = p - 1;\n\n    swap(ary, pivotIndex, r);\n    var pivot = ary[r];\n\n    // Immediately after `j` is incremented in this loop, the following hold\n    // true:\n    //\n    //   * Every element in `ary[p .. i]` is less than or equal to the pivot.\n    //\n    //   * Every element in `ary[i+1 .. j-1]` is greater than the pivot.\n    for (var j = p; j < r; j++) {\n      if (comparator(ary[j], pivot) <= 0) {\n        i += 1;\n        swap(ary, i, j);\n      }\n    }\n\n    swap(ary, i + 1, j);\n    var q = i + 1;\n\n    // (2) Recurse on each half.\n\n    doQuickSort(ary, comparator, p, q - 1);\n    doQuickSort(ary, comparator, q + 1, r);\n  }\n}\n\n/**\n * Sort the given array in-place with the given comparator function.\n *\n * @param {Array} ary\n *        An array to sort.\n * @param {function} comparator\n *        Function to use to compare two items.\n */\nexports.quickSort = function (ary, comparator) {\n  doQuickSort(ary, comparator, 0, ary.length - 1);\n};\n", "/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nvar util = require('./util');\nvar binarySearch = require('./binary-search');\nvar ArraySet = require('./array-set').ArraySet;\nvar base64VLQ = require('./base64-vlq');\nvar quickSort = require('./quick-sort').quickSort;\n\nfunction SourceMapConsumer(aSourceMap, aSourceMapURL) {\n  var sourceMap = aSourceMap;\n  if (typeof aSourceMap === 'string') {\n    sourceMap = util.parseSourceMapInput(aSourceMap);\n  }\n\n  return sourceMap.sections != null\n    ? new IndexedSourceMapConsumer(sourceMap, aSourceMapURL)\n    : new BasicSourceMapConsumer(sourceMap, aSourceMapURL);\n}\n\nSourceMapConsumer.fromSourceMap = function(aSourceMap, aSourceMapURL) {\n  return BasicSourceMapConsumer.fromSourceMap(aSourceMap, aSourceMapURL);\n}\n\n/**\n * The version of the source mapping spec that we are consuming.\n */\nSourceMapConsumer.prototype._version = 3;\n\n// `__generatedMappings` and `__originalMappings` are arrays that hold the\n// parsed mapping coordinates from the source map's \"mappings\" attribute. They\n// are lazily instantiated, accessed via the `_generatedMappings` and\n// `_originalMappings` getters respectively, and we only parse the mappings\n// and create these arrays once queried for a source location. We jump through\n// these hoops because there can be many thousands of mappings, and parsing\n// them is expensive, so we only want to do it if we must.\n//\n// Each object in the arrays is of the form:\n//\n//     {\n//       generatedLine: The line number in the generated code,\n//       generatedColumn: The column number in the generated code,\n//       source: The path to the original source file that generated this\n//               chunk of code,\n//       originalLine: The line number in the original source that\n//                     corresponds to this chunk of generated code,\n//       originalColumn: The column number in the original source that\n//                       corresponds to this chunk of generated code,\n//       name: The name of the original symbol which generated this chunk of\n//             code.\n//     }\n//\n// All properties except for `generatedLine` and `generatedColumn` can be\n// `null`.\n//\n// `_generatedMappings` is ordered by the generated positions.\n//\n// `_originalMappings` is ordered by the original positions.\n\nSourceMapConsumer.prototype.__generatedMappings = null;\nObject.defineProperty(SourceMapConsumer.prototype, '_generatedMappings', {\n  configurable: true,\n  enumerable: true,\n  get: function () {\n    if (!this.__generatedMappings) {\n      this._parseMappings(this._mappings, this.sourceRoot);\n    }\n\n    return this.__generatedMappings;\n  }\n});\n\nSourceMapConsumer.prototype.__originalMappings = null;\nObject.defineProperty(SourceMapConsumer.prototype, '_originalMappings', {\n  configurable: true,\n  enumerable: true,\n  get: function () {\n    if (!this.__originalMappings) {\n      this._parseMappings(this._mappings, this.sourceRoot);\n    }\n\n    return this.__originalMappings;\n  }\n});\n\nSourceMapConsumer.prototype._charIsMappingSeparator =\n  function SourceMapConsumer_charIsMappingSeparator(aStr, index) {\n    var c = aStr.charAt(index);\n    return c === \";\" || c === \",\";\n  };\n\n/**\n * Parse the mappings in a string in to a data structure which we can easily\n * query (the ordered arrays in the `this.__generatedMappings` and\n * `this.__originalMappings` properties).\n */\nSourceMapConsumer.prototype._parseMappings =\n  function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n    throw new Error(\"Subclasses must implement _parseMappings\");\n  };\n\nSourceMapConsumer.GENERATED_ORDER = 1;\nSourceMapConsumer.ORIGINAL_ORDER = 2;\n\nSourceMapConsumer.GREATEST_LOWER_BOUND = 1;\nSourceMapConsumer.LEAST_UPPER_BOUND = 2;\n\n/**\n * Iterate over each mapping between an original source/line/column and a\n * generated line/column in this source map.\n *\n * @param Function aCallback\n *        The function that is called with each mapping.\n * @param Object aContext\n *        Optional. If specified, this object will be the value of `this` every\n *        time that `aCallback` is called.\n * @param aOrder\n *        Either `SourceMapConsumer.GENERATED_ORDER` or\n *        `SourceMapConsumer.ORIGINAL_ORDER`. Specifies whether you want to\n *        iterate over the mappings sorted by the generated file's line/column\n *        order or the original's source/line/column order, respectively. Defaults to\n *        `SourceMapConsumer.GENERATED_ORDER`.\n */\nSourceMapConsumer.prototype.eachMapping =\n  function SourceMapConsumer_eachMapping(aCallback, aContext, aOrder) {\n    var context = aContext || null;\n    var order = aOrder || SourceMapConsumer.GENERATED_ORDER;\n\n    var mappings;\n    switch (order) {\n    case SourceMapConsumer.GENERATED_ORDER:\n      mappings = this._generatedMappings;\n      break;\n    case SourceMapConsumer.ORIGINAL_ORDER:\n      mappings = this._originalMappings;\n      break;\n    default:\n      throw new Error(\"Unknown order of iteration.\");\n    }\n\n    var sourceRoot = this.sourceRoot;\n    mappings.map(function (mapping) {\n      var source = mapping.source === null ? null : this._sources.at(mapping.source);\n      source = util.computeSourceURL(sourceRoot, source, this._sourceMapURL);\n      return {\n        source: source,\n        generatedLine: mapping.generatedLine,\n        generatedColumn: mapping.generatedColumn,\n        originalLine: mapping.originalLine,\n        originalColumn: mapping.originalColumn,\n        name: mapping.name === null ? null : this._names.at(mapping.name)\n      };\n    }, this).forEach(aCallback, context);\n  };\n\n/**\n * Returns all generated line and column information for the original source,\n * line, and column provided. If no column is provided, returns all mappings\n * corresponding to a either the line we are searching for or the next\n * closest line that has any mappings. Otherwise, returns all mappings\n * corresponding to the given line and either the column we are searching for\n * or the next closest column that has any offsets.\n *\n * The only argument is an object with the following properties:\n *\n *   - source: The filename of the original source.\n *   - line: The line number in the original source.  The line number is 1-based.\n *   - column: Optional. the column number in the original source.\n *    The column number is 0-based.\n *\n * and an array of objects is returned, each with the following properties:\n *\n *   - line: The line number in the generated source, or null.  The\n *    line number is 1-based.\n *   - column: The column number in the generated source, or null.\n *    The column number is 0-based.\n */\nSourceMapConsumer.prototype.allGeneratedPositionsFor =\n  function SourceMapConsumer_allGeneratedPositionsFor(aArgs) {\n    var line = util.getArg(aArgs, 'line');\n\n    // When there is no exact match, BasicSourceMapConsumer.prototype._findMapping\n    // returns the index of the closest mapping less than the needle. By\n    // setting needle.originalColumn to 0, we thus find the last mapping for\n    // the given line, provided such a mapping exists.\n    var needle = {\n      source: util.getArg(aArgs, 'source'),\n      originalLine: line,\n      originalColumn: util.getArg(aArgs, 'column', 0)\n    };\n\n    needle.source = this._findSourceIndex(needle.source);\n    if (needle.source < 0) {\n      return [];\n    }\n\n    var mappings = [];\n\n    var index = this._findMapping(needle,\n                                  this._originalMappings,\n                                  \"originalLine\",\n                                  \"originalColumn\",\n                                  util.compareByOriginalPositions,\n                                  binarySearch.LEAST_UPPER_BOUND);\n    if (index >= 0) {\n      var mapping = this._originalMappings[index];\n\n      if (aArgs.column === undefined) {\n        var originalLine = mapping.originalLine;\n\n        // Iterate until either we run out of mappings, or we run into\n        // a mapping for a different line than the one we found. Since\n        // mappings are sorted, this is guaranteed to find all mappings for\n        // the line we found.\n        while (mapping && mapping.originalLine === originalLine) {\n          mappings.push({\n            line: util.getArg(mapping, 'generatedLine', null),\n            column: util.getArg(mapping, 'generatedColumn', null),\n            lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)\n          });\n\n          mapping = this._originalMappings[++index];\n        }\n      } else {\n        var originalColumn = mapping.originalColumn;\n\n        // Iterate until either we run out of mappings, or we run into\n        // a mapping for a different line than the one we were searching for.\n        // Since mappings are sorted, this is guaranteed to find all mappings for\n        // the line we are searching for.\n        while (mapping &&\n               mapping.originalLine === line &&\n               mapping.originalColumn == originalColumn) {\n          mappings.push({\n            line: util.getArg(mapping, 'generatedLine', null),\n            column: util.getArg(mapping, 'generatedColumn', null),\n            lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)\n          });\n\n          mapping = this._originalMappings[++index];\n        }\n      }\n    }\n\n    return mappings;\n  };\n\nexports.SourceMapConsumer = SourceMapConsumer;\n\n/**\n * A BasicSourceMapConsumer instance represents a parsed source map which we can\n * query for information about the original file positions by giving it a file\n * position in the generated source.\n *\n * The first parameter is the raw source map (either as a JSON string, or\n * already parsed to an object). According to the spec, source maps have the\n * following attributes:\n *\n *   - version: Which version of the source map spec this map is following.\n *   - sources: An array of URLs to the original source files.\n *   - names: An array of identifiers which can be referrenced by individual mappings.\n *   - sourceRoot: Optional. The URL root from which all sources are relative.\n *   - sourcesContent: Optional. An array of contents of the original source files.\n *   - mappings: A string of base64 VLQs which contain the actual mappings.\n *   - file: Optional. The generated file this source map is associated with.\n *\n * Here is an example source map, taken from the source map spec[0]:\n *\n *     {\n *       version : 3,\n *       file: \"out.js\",\n *       sourceRoot : \"\",\n *       sources: [\"foo.js\", \"bar.js\"],\n *       names: [\"src\", \"maps\", \"are\", \"fun\"],\n *       mappings: \"AA,AB;;ABCDE;\"\n *     }\n *\n * The second parameter, if given, is a string whose value is the URL\n * at which the source map was found.  This URL is used to compute the\n * sources array.\n *\n * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit?pli=1#\n */\nfunction BasicSourceMapConsumer(aSourceMap, aSourceMapURL) {\n  var sourceMap = aSourceMap;\n  if (typeof aSourceMap === 'string') {\n    sourceMap = util.parseSourceMapInput(aSourceMap);\n  }\n\n  var version = util.getArg(sourceMap, 'version');\n  var sources = util.getArg(sourceMap, 'sources');\n  // Sass 3.3 leaves out the 'names' array, so we deviate from the spec (which\n  // requires the array) to play nice here.\n  var names = util.getArg(sourceMap, 'names', []);\n  var sourceRoot = util.getArg(sourceMap, 'sourceRoot', null);\n  var sourcesContent = util.getArg(sourceMap, 'sourcesContent', null);\n  var mappings = util.getArg(sourceMap, 'mappings');\n  var file = util.getArg(sourceMap, 'file', null);\n\n  // Once again, Sass deviates from the spec and supplies the version as a\n  // string rather than a number, so we use loose equality checking here.\n  if (version != this._version) {\n    throw new Error('Unsupported version: ' + version);\n  }\n\n  if (sourceRoot) {\n    sourceRoot = util.normalize(sourceRoot);\n  }\n\n  sources = sources\n    .map(String)\n    // Some source maps produce relative source paths like \"./foo.js\" instead of\n    // \"foo.js\".  Normalize these first so that future comparisons will succeed.\n    // See bugzil.la/1090768.\n    .map(util.normalize)\n    // Always ensure that absolute sources are internally stored relative to\n    // the source root, if the source root is absolute. Not doing this would\n    // be particularly problematic when the source root is a prefix of the\n    // source (valid, but why??). See github issue #199 and bugzil.la/1188982.\n    .map(function (source) {\n      return sourceRoot && util.isAbsolute(sourceRoot) && util.isAbsolute(source)\n        ? util.relative(sourceRoot, source)\n        : source;\n    });\n\n  // Pass `true` below to allow duplicate names and sources. While source maps\n  // are intended to be compressed and deduplicated, the TypeScript compiler\n  // sometimes generates source maps with duplicates in them. See Github issue\n  // #72 and bugzil.la/889492.\n  this._names = ArraySet.fromArray(names.map(String), true);\n  this._sources = ArraySet.fromArray(sources, true);\n\n  this._absoluteSources = this._sources.toArray().map(function (s) {\n    return util.computeSourceURL(sourceRoot, s, aSourceMapURL);\n  });\n\n  this.sourceRoot = sourceRoot;\n  this.sourcesContent = sourcesContent;\n  this._mappings = mappings;\n  this._sourceMapURL = aSourceMapURL;\n  this.file = file;\n}\n\nBasicSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);\nBasicSourceMapConsumer.prototype.consumer = SourceMapConsumer;\n\n/**\n * Utility function to find the index of a source.  Returns -1 if not\n * found.\n */\nBasicSourceMapConsumer.prototype._findSourceIndex = function(aSource) {\n  var relativeSource = aSource;\n  if (this.sourceRoot != null) {\n    relativeSource = util.relative(this.sourceRoot, relativeSource);\n  }\n\n  if (this._sources.has(relativeSource)) {\n    return this._sources.indexOf(relativeSource);\n  }\n\n  // Maybe aSource is an absolute URL as returned by |sources|.  In\n  // this case we can't simply undo the transform.\n  var i;\n  for (i = 0; i < this._absoluteSources.length; ++i) {\n    if (this._absoluteSources[i] == aSource) {\n      return i;\n    }\n  }\n\n  return -1;\n};\n\n/**\n * Create a BasicSourceMapConsumer from a SourceMapGenerator.\n *\n * @param SourceMapGenerator aSourceMap\n *        The source map that will be consumed.\n * @param String aSourceMapURL\n *        The URL at which the source map can be found (optional)\n * @returns BasicSourceMapConsumer\n */\nBasicSourceMapConsumer.fromSourceMap =\n  function SourceMapConsumer_fromSourceMap(aSourceMap, aSourceMapURL) {\n    var smc = Object.create(BasicSourceMapConsumer.prototype);\n\n    var names = smc._names = ArraySet.fromArray(aSourceMap._names.toArray(), true);\n    var sources = smc._sources = ArraySet.fromArray(aSourceMap._sources.toArray(), true);\n    smc.sourceRoot = aSourceMap._sourceRoot;\n    smc.sourcesContent = aSourceMap._generateSourcesContent(smc._sources.toArray(),\n                                                            smc.sourceRoot);\n    smc.file = aSourceMap._file;\n    smc._sourceMapURL = aSourceMapURL;\n    smc._absoluteSources = smc._sources.toArray().map(function (s) {\n      return util.computeSourceURL(smc.sourceRoot, s, aSourceMapURL);\n    });\n\n    // Because we are modifying the entries (by converting string sources and\n    // names to indices into the sources and names ArraySets), we have to make\n    // a copy of the entry or else bad things happen. Shared mutable state\n    // strikes again! See github issue #191.\n\n    var generatedMappings = aSourceMap._mappings.toArray().slice();\n    var destGeneratedMappings = smc.__generatedMappings = [];\n    var destOriginalMappings = smc.__originalMappings = [];\n\n    for (var i = 0, length = generatedMappings.length; i < length; i++) {\n      var srcMapping = generatedMappings[i];\n      var destMapping = new Mapping;\n      destMapping.generatedLine = srcMapping.generatedLine;\n      destMapping.generatedColumn = srcMapping.generatedColumn;\n\n      if (srcMapping.source) {\n        destMapping.source = sources.indexOf(srcMapping.source);\n        destMapping.originalLine = srcMapping.originalLine;\n        destMapping.originalColumn = srcMapping.originalColumn;\n\n        if (srcMapping.name) {\n          destMapping.name = names.indexOf(srcMapping.name);\n        }\n\n        destOriginalMappings.push(destMapping);\n      }\n\n      destGeneratedMappings.push(destMapping);\n    }\n\n    quickSort(smc.__originalMappings, util.compareByOriginalPositions);\n\n    return smc;\n  };\n\n/**\n * The version of the source mapping spec that we are consuming.\n */\nBasicSourceMapConsumer.prototype._version = 3;\n\n/**\n * The list of original sources.\n */\nObject.defineProperty(BasicSourceMapConsumer.prototype, 'sources', {\n  get: function () {\n    return this._absoluteSources.slice();\n  }\n});\n\n/**\n * Provide the JIT with a nice shape / hidden class.\n */\nfunction Mapping() {\n  this.generatedLine = 0;\n  this.generatedColumn = 0;\n  this.source = null;\n  this.originalLine = null;\n  this.originalColumn = null;\n  this.name = null;\n}\n\n/**\n * Parse the mappings in a string in to a data structure which we can easily\n * query (the ordered arrays in the `this.__generatedMappings` and\n * `this.__originalMappings` properties).\n */\nBasicSourceMapConsumer.prototype._parseMappings =\n  function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n    var generatedLine = 1;\n    var previousGeneratedColumn = 0;\n    var previousOriginalLine = 0;\n    var previousOriginalColumn = 0;\n    var previousSource = 0;\n    var previousName = 0;\n    var length = aStr.length;\n    var index = 0;\n    var cachedSegments = {};\n    var temp = {};\n    var originalMappings = [];\n    var generatedMappings = [];\n    var mapping, str, segment, end, value;\n\n    while (index < length) {\n      if (aStr.charAt(index) === ';') {\n        generatedLine++;\n        index++;\n        previousGeneratedColumn = 0;\n      }\n      else if (aStr.charAt(index) === ',') {\n        index++;\n      }\n      else {\n        mapping = new Mapping();\n        mapping.generatedLine = generatedLine;\n\n        // Because each offset is encoded relative to the previous one,\n        // many segments often have the same encoding. We can exploit this\n        // fact by caching the parsed variable length fields of each segment,\n        // allowing us to avoid a second parse if we encounter the same\n        // segment again.\n        for (end = index; end < length; end++) {\n          if (this._charIsMappingSeparator(aStr, end)) {\n            break;\n          }\n        }\n        str = aStr.slice(index, end);\n\n        segment = cachedSegments[str];\n        if (segment) {\n          index += str.length;\n        } else {\n          segment = [];\n          while (index < end) {\n            base64VLQ.decode(aStr, index, temp);\n            value = temp.value;\n            index = temp.rest;\n            segment.push(value);\n          }\n\n          if (segment.length === 2) {\n            throw new Error('Found a source, but no line and column');\n          }\n\n          if (segment.length === 3) {\n            throw new Error('Found a source and line, but no column');\n          }\n\n          cachedSegments[str] = segment;\n        }\n\n        // Generated column.\n        mapping.generatedColumn = previousGeneratedColumn + segment[0];\n        previousGeneratedColumn = mapping.generatedColumn;\n\n        if (segment.length > 1) {\n          // Original source.\n          mapping.source = previousSource + segment[1];\n          previousSource += segment[1];\n\n          // Original line.\n          mapping.originalLine = previousOriginalLine + segment[2];\n          previousOriginalLine = mapping.originalLine;\n          // Lines are stored 0-based\n          mapping.originalLine += 1;\n\n          // Original column.\n          mapping.originalColumn = previousOriginalColumn + segment[3];\n          previousOriginalColumn = mapping.originalColumn;\n\n          if (segment.length > 4) {\n            // Original name.\n            mapping.name = previousName + segment[4];\n            previousName += segment[4];\n          }\n        }\n\n        generatedMappings.push(mapping);\n        if (typeof mapping.originalLine === 'number') {\n          originalMappings.push(mapping);\n        }\n      }\n    }\n\n    quickSort(generatedMappings, util.compareByGeneratedPositionsDeflated);\n    this.__generatedMappings = generatedMappings;\n\n    quickSort(originalMappings, util.compareByOriginalPositions);\n    this.__originalMappings = originalMappings;\n  };\n\n/**\n * Find the mapping that best matches the hypothetical \"needle\" mapping that\n * we are searching for in the given \"haystack\" of mappings.\n */\nBasicSourceMapConsumer.prototype._findMapping =\n  function SourceMapConsumer_findMapping(aNeedle, aMappings, aLineName,\n                                         aColumnName, aComparator, aBias) {\n    // To return the position we are searching for, we must first find the\n    // mapping for the given position and then return the opposite position it\n    // points to. Because the mappings are sorted, we can use binary search to\n    // find the best mapping.\n\n    if (aNeedle[aLineName] <= 0) {\n      throw new TypeError('Line must be greater than or equal to 1, got '\n                          + aNeedle[aLineName]);\n    }\n    if (aNeedle[aColumnName] < 0) {\n      throw new TypeError('Column must be greater than or equal to 0, got '\n                          + aNeedle[aColumnName]);\n    }\n\n    return binarySearch.search(aNeedle, aMappings, aComparator, aBias);\n  };\n\n/**\n * Compute the last column for each generated mapping. The last column is\n * inclusive.\n */\nBasicSourceMapConsumer.prototype.computeColumnSpans =\n  function SourceMapConsumer_computeColumnSpans() {\n    for (var index = 0; index < this._generatedMappings.length; ++index) {\n      var mapping = this._generatedMappings[index];\n\n      // Mappings do not contain a field for the last generated columnt. We\n      // can come up with an optimistic estimate, however, by assuming that\n      // mappings are contiguous (i.e. given two consecutive mappings, the\n      // first mapping ends where the second one starts).\n      if (index + 1 < this._generatedMappings.length) {\n        var nextMapping = this._generatedMappings[index + 1];\n\n        if (mapping.generatedLine === nextMapping.generatedLine) {\n          mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;\n          continue;\n        }\n      }\n\n      // The last mapping for each line spans the entire line.\n      mapping.lastGeneratedColumn = Infinity;\n    }\n  };\n\n/**\n * Returns the original source, line, and column information for the generated\n * source's line and column positions provided. The only argument is an object\n * with the following properties:\n *\n *   - line: The line number in the generated source.  The line number\n *     is 1-based.\n *   - column: The column number in the generated source.  The column\n *     number is 0-based.\n *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or\n *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the\n *     closest element that is smaller than or greater than the one we are\n *     searching for, respectively, if the exact element cannot be found.\n *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.\n *\n * and an object is returned with the following properties:\n *\n *   - source: The original source file, or null.\n *   - line: The line number in the original source, or null.  The\n *     line number is 1-based.\n *   - column: The column number in the original source, or null.  The\n *     column number is 0-based.\n *   - name: The original identifier, or null.\n */\nBasicSourceMapConsumer.prototype.originalPositionFor =\n  function SourceMapConsumer_originalPositionFor(aArgs) {\n    var needle = {\n      generatedLine: util.getArg(aArgs, 'line'),\n      generatedColumn: util.getArg(aArgs, 'column')\n    };\n\n    var index = this._findMapping(\n      needle,\n      this._generatedMappings,\n      \"generatedLine\",\n      \"generatedColumn\",\n      util.compareByGeneratedPositionsDeflated,\n      util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND)\n    );\n\n    if (index >= 0) {\n      var mapping = this._generatedMappings[index];\n\n      if (mapping.generatedLine === needle.generatedLine) {\n        var source = util.getArg(mapping, 'source', null);\n        if (source !== null) {\n          source = this._sources.at(source);\n          source = util.computeSourceURL(this.sourceRoot, source, this._sourceMapURL);\n        }\n        var name = util.getArg(mapping, 'name', null);\n        if (name !== null) {\n          name = this._names.at(name);\n        }\n        return {\n          source: source,\n          line: util.getArg(mapping, 'originalLine', null),\n          column: util.getArg(mapping, 'originalColumn', null),\n          name: name\n        };\n      }\n    }\n\n    return {\n      source: null,\n      line: null,\n      column: null,\n      name: null\n    };\n  };\n\n/**\n * Return true if we have the source content for every source in the source\n * map, false otherwise.\n */\nBasicSourceMapConsumer.prototype.hasContentsOfAllSources =\n  function BasicSourceMapConsumer_hasContentsOfAllSources() {\n    if (!this.sourcesContent) {\n      return false;\n    }\n    return this.sourcesContent.length >= this._sources.size() &&\n      !this.sourcesContent.some(function (sc) { return sc == null; });\n  };\n\n/**\n * Returns the original source content. The only argument is the url of the\n * original source file. Returns null if no original source content is\n * available.\n */\nBasicSourceMapConsumer.prototype.sourceContentFor =\n  function SourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {\n    if (!this.sourcesContent) {\n      return null;\n    }\n\n    var index = this._findSourceIndex(aSource);\n    if (index >= 0) {\n      return this.sourcesContent[index];\n    }\n\n    var relativeSource = aSource;\n    if (this.sourceRoot != null) {\n      relativeSource = util.relative(this.sourceRoot, relativeSource);\n    }\n\n    var url;\n    if (this.sourceRoot != null\n        && (url = util.urlParse(this.sourceRoot))) {\n      // XXX: file:// URIs and absolute paths lead to unexpected behavior for\n      // many users. We can help them out when they expect file:// URIs to\n      // behave like it would if they were running a local HTTP server. See\n      // https://bugzilla.mozilla.org/show_bug.cgi?id=885597.\n      var fileUriAbsPath = relativeSource.replace(/^file:\\/\\//, \"\");\n      if (url.scheme == \"file\"\n          && this._sources.has(fileUriAbsPath)) {\n        return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)]\n      }\n\n      if ((!url.path || url.path == \"/\")\n          && this._sources.has(\"/\" + relativeSource)) {\n        return this.sourcesContent[this._sources.indexOf(\"/\" + relativeSource)];\n      }\n    }\n\n    // This function is used recursively from\n    // IndexedSourceMapConsumer.prototype.sourceContentFor. In that case, we\n    // don't want to throw if we can't find the source - we just want to\n    // return null, so we provide a flag to exit gracefully.\n    if (nullOnMissing) {\n      return null;\n    }\n    else {\n      throw new Error('\"' + relativeSource + '\" is not in the SourceMap.');\n    }\n  };\n\n/**\n * Returns the generated line and column information for the original source,\n * line, and column positions provided. The only argument is an object with\n * the following properties:\n *\n *   - source: The filename of the original source.\n *   - line: The line number in the original source.  The line number\n *     is 1-based.\n *   - column: The column number in the original source.  The column\n *     number is 0-based.\n *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or\n *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the\n *     closest element that is smaller than or greater than the one we are\n *     searching for, respectively, if the exact element cannot be found.\n *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.\n *\n * and an object is returned with the following properties:\n *\n *   - line: The line number in the generated source, or null.  The\n *     line number is 1-based.\n *   - column: The column number in the generated source, or null.\n *     The column number is 0-based.\n */\nBasicSourceMapConsumer.prototype.generatedPositionFor =\n  function SourceMapConsumer_generatedPositionFor(aArgs) {\n    var source = util.getArg(aArgs, 'source');\n    source = this._findSourceIndex(source);\n    if (source < 0) {\n      return {\n        line: null,\n        column: null,\n        lastColumn: null\n      };\n    }\n\n    var needle = {\n      source: source,\n      originalLine: util.getArg(aArgs, 'line'),\n      originalColumn: util.getArg(aArgs, 'column')\n    };\n\n    var index = this._findMapping(\n      needle,\n      this._originalMappings,\n      \"originalLine\",\n      \"originalColumn\",\n      util.compareByOriginalPositions,\n      util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND)\n    );\n\n    if (index >= 0) {\n      var mapping = this._originalMappings[index];\n\n      if (mapping.source === needle.source) {\n        return {\n          line: util.getArg(mapping, 'generatedLine', null),\n          column: util.getArg(mapping, 'generatedColumn', null),\n          lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)\n        };\n      }\n    }\n\n    return {\n      line: null,\n      column: null,\n      lastColumn: null\n    };\n  };\n\nexports.BasicSourceMapConsumer = BasicSourceMapConsumer;\n\n/**\n * An IndexedSourceMapConsumer instance represents a parsed source map which\n * we can query for information. It differs from BasicSourceMapConsumer in\n * that it takes \"indexed\" source maps (i.e. ones with a \"sections\" field) as\n * input.\n *\n * The first parameter is a raw source map (either as a JSON string, or already\n * parsed to an object). According to the spec for indexed source maps, they\n * have the following attributes:\n *\n *   - version: Which version of the source map spec this map is following.\n *   - file: Optional. The generated file this source map is associated with.\n *   - sections: A list of section definitions.\n *\n * Each value under the \"sections\" field has two fields:\n *   - offset: The offset into the original specified at which this section\n *       begins to apply, defined as an object with a \"line\" and \"column\"\n *       field.\n *   - map: A source map definition. This source map could also be indexed,\n *       but doesn't have to be.\n *\n * Instead of the \"map\" field, it's also possible to have a \"url\" field\n * specifying a URL to retrieve a source map from, but that's currently\n * unsupported.\n *\n * Here's an example source map, taken from the source map spec[0], but\n * modified to omit a section which uses the \"url\" field.\n *\n *  {\n *    version : 3,\n *    file: \"app.js\",\n *    sections: [{\n *      offset: {line:100, column:10},\n *      map: {\n *        version : 3,\n *        file: \"section.js\",\n *        sources: [\"foo.js\", \"bar.js\"],\n *        names: [\"src\", \"maps\", \"are\", \"fun\"],\n *        mappings: \"AAAA,E;;ABCDE;\"\n *      }\n *    }],\n *  }\n *\n * The second parameter, if given, is a string whose value is the URL\n * at which the source map was found.  This URL is used to compute the\n * sources array.\n *\n * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit#heading=h.535es3xeprgt\n */\nfunction IndexedSourceMapConsumer(aSourceMap, aSourceMapURL) {\n  var sourceMap = aSourceMap;\n  if (typeof aSourceMap === 'string') {\n    sourceMap = util.parseSourceMapInput(aSourceMap);\n  }\n\n  var version = util.getArg(sourceMap, 'version');\n  var sections = util.getArg(sourceMap, 'sections');\n\n  if (version != this._version) {\n    throw new Error('Unsupported version: ' + version);\n  }\n\n  this._sources = new ArraySet();\n  this._names = new ArraySet();\n\n  var lastOffset = {\n    line: -1,\n    column: 0\n  };\n  this._sections = sections.map(function (s) {\n    if (s.url) {\n      // The url field will require support for asynchronicity.\n      // See https://github.com/mozilla/source-map/issues/16\n      throw new Error('Support for url field in sections not implemented.');\n    }\n    var offset = util.getArg(s, 'offset');\n    var offsetLine = util.getArg(offset, 'line');\n    var offsetColumn = util.getArg(offset, 'column');\n\n    if (offsetLine < lastOffset.line ||\n        (offsetLine === lastOffset.line && offsetColumn < lastOffset.column)) {\n      throw new Error('Section offsets must be ordered and non-overlapping.');\n    }\n    lastOffset = offset;\n\n    return {\n      generatedOffset: {\n        // The offset fields are 0-based, but we use 1-based indices when\n        // encoding/decoding from VLQ.\n        generatedLine: offsetLine + 1,\n        generatedColumn: offsetColumn + 1\n      },\n      consumer: new SourceMapConsumer(util.getArg(s, 'map'), aSourceMapURL)\n    }\n  });\n}\n\nIndexedSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);\nIndexedSourceMapConsumer.prototype.constructor = SourceMapConsumer;\n\n/**\n * The version of the source mapping spec that we are consuming.\n */\nIndexedSourceMapConsumer.prototype._version = 3;\n\n/**\n * The list of original sources.\n */\nObject.defineProperty(IndexedSourceMapConsumer.prototype, 'sources', {\n  get: function () {\n    var sources = [];\n    for (var i = 0; i < this._sections.length; i++) {\n      for (var j = 0; j < this._sections[i].consumer.sources.length; j++) {\n        sources.push(this._sections[i].consumer.sources[j]);\n      }\n    }\n    return sources;\n  }\n});\n\n/**\n * Returns the original source, line, and column information for the generated\n * source's line and column positions provided. The only argument is an object\n * with the following properties:\n *\n *   - line: The line number in the generated source.  The line number\n *     is 1-based.\n *   - column: The column number in the generated source.  The column\n *     number is 0-based.\n *\n * and an object is returned with the following properties:\n *\n *   - source: The original source file, or null.\n *   - line: The line number in the original source, or null.  The\n *     line number is 1-based.\n *   - column: The column number in the original source, or null.  The\n *     column number is 0-based.\n *   - name: The original identifier, or null.\n */\nIndexedSourceMapConsumer.prototype.originalPositionFor =\n  function IndexedSourceMapConsumer_originalPositionFor(aArgs) {\n    var needle = {\n      generatedLine: util.getArg(aArgs, 'line'),\n      generatedColumn: util.getArg(aArgs, 'column')\n    };\n\n    // Find the section containing the generated position we're trying to map\n    // to an original position.\n    var sectionIndex = binarySearch.search(needle, this._sections,\n      function(needle, section) {\n        var cmp = needle.generatedLine - section.generatedOffset.generatedLine;\n        if (cmp) {\n          return cmp;\n        }\n\n        return (needle.generatedColumn -\n                section.generatedOffset.generatedColumn);\n      });\n    var section = this._sections[sectionIndex];\n\n    if (!section) {\n      return {\n        source: null,\n        line: null,\n        column: null,\n        name: null\n      };\n    }\n\n    return section.consumer.originalPositionFor({\n      line: needle.generatedLine -\n        (section.generatedOffset.generatedLine - 1),\n      column: needle.generatedColumn -\n        (section.generatedOffset.generatedLine === needle.generatedLine\n         ? section.generatedOffset.generatedColumn - 1\n         : 0),\n      bias: aArgs.bias\n    });\n  };\n\n/**\n * Return true if we have the source content for every source in the source\n * map, false otherwise.\n */\nIndexedSourceMapConsumer.prototype.hasContentsOfAllSources =\n  function IndexedSourceMapConsumer_hasContentsOfAllSources() {\n    return this._sections.every(function (s) {\n      return s.consumer.hasContentsOfAllSources();\n    });\n  };\n\n/**\n * Returns the original source content. The only argument is the url of the\n * original source file. Returns null if no original source content is\n * available.\n */\nIndexedSourceMapConsumer.prototype.sourceContentFor =\n  function IndexedSourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {\n    for (var i = 0; i < this._sections.length; i++) {\n      var section = this._sections[i];\n\n      var content = section.consumer.sourceContentFor(aSource, true);\n      if (content) {\n        return content;\n      }\n    }\n    if (nullOnMissing) {\n      return null;\n    }\n    else {\n      throw new Error('\"' + aSource + '\" is not in the SourceMap.');\n    }\n  };\n\n/**\n * Returns the generated line and column information for the original source,\n * line, and column positions provided. The only argument is an object with\n * the following properties:\n *\n *   - source: The filename of the original source.\n *   - line: The line number in the original source.  The line number\n *     is 1-based.\n *   - column: The column number in the original source.  The column\n *     number is 0-based.\n *\n * and an object is returned with the following properties:\n *\n *   - line: The line number in the generated source, or null.  The\n *     line number is 1-based. \n *   - column: The column number in the generated source, or null.\n *     The column number is 0-based.\n */\nIndexedSourceMapConsumer.prototype.generatedPositionFor =\n  function IndexedSourceMapConsumer_generatedPositionFor(aArgs) {\n    for (var i = 0; i < this._sections.length; i++) {\n      var section = this._sections[i];\n\n      // Only consider this section if the requested source is in the list of\n      // sources of the consumer.\n      if (section.consumer._findSourceIndex(util.getArg(aArgs, 'source')) === -1) {\n        continue;\n      }\n      var generatedPosition = section.consumer.generatedPositionFor(aArgs);\n      if (generatedPosition) {\n        var ret = {\n          line: generatedPosition.line +\n            (section.generatedOffset.generatedLine - 1),\n          column: generatedPosition.column +\n            (section.generatedOffset.generatedLine === generatedPosition.line\n             ? section.generatedOffset.generatedColumn - 1\n             : 0)\n        };\n        return ret;\n      }\n    }\n\n    return {\n      line: null,\n      column: null\n    };\n  };\n\n/**\n * Parse the mappings in a string in to a data structure which we can easily\n * query (the ordered arrays in the `this.__generatedMappings` and\n * `this.__originalMappings` properties).\n */\nIndexedSourceMapConsumer.prototype._parseMappings =\n  function IndexedSourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n    this.__generatedMappings = [];\n    this.__originalMappings = [];\n    for (var i = 0; i < this._sections.length; i++) {\n      var section = this._sections[i];\n      var sectionMappings = section.consumer._generatedMappings;\n      for (var j = 0; j < sectionMappings.length; j++) {\n        var mapping = sectionMappings[j];\n\n        var source = section.consumer._sources.at(mapping.source);\n        source = util.computeSourceURL(section.consumer.sourceRoot, source, this._sourceMapURL);\n        this._sources.add(source);\n        source = this._sources.indexOf(source);\n\n        var name = null;\n        if (mapping.name) {\n          name = section.consumer._names.at(mapping.name);\n          this._names.add(name);\n          name = this._names.indexOf(name);\n        }\n\n        // The mappings coming from the consumer for the section have\n        // generated positions relative to the start of the section, so we\n        // need to offset them to be relative to the start of the concatenated\n        // generated file.\n        var adjustedMapping = {\n          source: source,\n          generatedLine: mapping.generatedLine +\n            (section.generatedOffset.generatedLine - 1),\n          generatedColumn: mapping.generatedColumn +\n            (section.generatedOffset.generatedLine === mapping.generatedLine\n            ? section.generatedOffset.generatedColumn - 1\n            : 0),\n          originalLine: mapping.originalLine,\n          originalColumn: mapping.originalColumn,\n          name: name\n        };\n\n        this.__generatedMappings.push(adjustedMapping);\n        if (typeof adjustedMapping.originalLine === 'number') {\n          this.__originalMappings.push(adjustedMapping);\n        }\n      }\n    }\n\n    quickSort(this.__generatedMappings, util.compareByGeneratedPositionsDeflated);\n    quickSort(this.__originalMappings, util.compareByOriginalPositions);\n  };\n\nexports.IndexedSourceMapConsumer = IndexedSourceMapConsumer;\n", "/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nvar SourceMapGenerator = require('./source-map-generator').SourceMapGenerator;\nvar util = require('./util');\n\n// Matches a Windows-style `\\r\\n` newline or a `\\n` newline used by all other\n// operating systems these days (capturing the result).\nvar REGEX_NEWLINE = /(\\r?\\n)/;\n\n// Newline character code for charCodeAt() comparisons\nvar NEWLINE_CODE = 10;\n\n// Private symbol for identifying `SourceNode`s when multiple versions of\n// the source-map library are loaded. This MUST NOT CHANGE across\n// versions!\nvar isSourceNode = \"$$$isSourceNode$$$\";\n\n/**\n * SourceNodes provide a way to abstract over interpolating/concatenating\n * snippets of generated JavaScript source code while maintaining the line and\n * column information associated with the original source code.\n *\n * @param aLine The original line number.\n * @param aColumn The original column number.\n * @param aSource The original source's filename.\n * @param aChunks Optional. An array of strings which are snippets of\n *        generated JS, or other SourceNodes.\n * @param aName The original identifier.\n */\nfunction SourceNode(aLine, aColumn, aSource, aChunks, aName) {\n  this.children = [];\n  this.sourceContents = {};\n  this.line = aLine == null ? null : aLine;\n  this.column = aColumn == null ? null : aColumn;\n  this.source = aSource == null ? null : aSource;\n  this.name = aName == null ? null : aName;\n  this[isSourceNode] = true;\n  if (aChunks != null) this.add(aChunks);\n}\n\n/**\n * Creates a SourceNode from generated code and a SourceMapConsumer.\n *\n * @param aGeneratedCode The generated code\n * @param aSourceMapConsumer The SourceMap for the generated code\n * @param aRelativePath Optional. The path that relative sources in the\n *        SourceMapConsumer should be relative to.\n */\nSourceNode.fromStringWithSourceMap =\n  function SourceNode_fromStringWithSourceMap(aGeneratedCode, aSourceMapConsumer, aRelativePath) {\n    // The SourceNode we want to fill with the generated code\n    // and the SourceMap\n    var node = new SourceNode();\n\n    // All even indices of this array are one line of the generated code,\n    // while all odd indices are the newlines between two adjacent lines\n    // (since `REGEX_NEWLINE` captures its match).\n    // Processed fragments are accessed by calling `shiftNextLine`.\n    var remainingLines = aGeneratedCode.split(REGEX_NEWLINE);\n    var remainingLinesIndex = 0;\n    var shiftNextLine = function() {\n      var lineContents = getNextLine();\n      // The last line of a file might not have a newline.\n      var newLine = getNextLine() || \"\";\n      return lineContents + newLine;\n\n      function getNextLine() {\n        return remainingLinesIndex < remainingLines.length ?\n            remainingLines[remainingLinesIndex++] : undefined;\n      }\n    };\n\n    // We need to remember the position of \"remainingLines\"\n    var lastGeneratedLine = 1, lastGeneratedColumn = 0;\n\n    // The generate SourceNodes we need a code range.\n    // To extract it current and last mapping is used.\n    // Here we store the last mapping.\n    var lastMapping = null;\n\n    aSourceMapConsumer.eachMapping(function (mapping) {\n      if (lastMapping !== null) {\n        // We add the code from \"lastMapping\" to \"mapping\":\n        // First check if there is a new line in between.\n        if (lastGeneratedLine < mapping.generatedLine) {\n          // Associate first line with \"lastMapping\"\n          addMappingWithCode(lastMapping, shiftNextLine());\n          lastGeneratedLine++;\n          lastGeneratedColumn = 0;\n          // The remaining code is added without mapping\n        } else {\n          // There is no new line in between.\n          // Associate the code between \"lastGeneratedColumn\" and\n          // \"mapping.generatedColumn\" with \"lastMapping\"\n          var nextLine = remainingLines[remainingLinesIndex] || '';\n          var code = nextLine.substr(0, mapping.generatedColumn -\n                                        lastGeneratedColumn);\n          remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn -\n                                              lastGeneratedColumn);\n          lastGeneratedColumn = mapping.generatedColumn;\n          addMappingWithCode(lastMapping, code);\n          // No more remaining code, continue\n          lastMapping = mapping;\n          return;\n        }\n      }\n      // We add the generated code until the first mapping\n      // to the SourceNode without any mapping.\n      // Each line is added as separate string.\n      while (lastGeneratedLine < mapping.generatedLine) {\n        node.add(shiftNextLine());\n        lastGeneratedLine++;\n      }\n      if (lastGeneratedColumn < mapping.generatedColumn) {\n        var nextLine = remainingLines[remainingLinesIndex] || '';\n        node.add(nextLine.substr(0, mapping.generatedColumn));\n        remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn);\n        lastGeneratedColumn = mapping.generatedColumn;\n      }\n      lastMapping = mapping;\n    }, this);\n    // We have processed all mappings.\n    if (remainingLinesIndex < remainingLines.length) {\n      if (lastMapping) {\n        // Associate the remaining code in the current line with \"lastMapping\"\n        addMappingWithCode(lastMapping, shiftNextLine());\n      }\n      // and add the remaining lines without any mapping\n      node.add(remainingLines.splice(remainingLinesIndex).join(\"\"));\n    }\n\n    // Copy sourcesContent into SourceNode\n    aSourceMapConsumer.sources.forEach(function (sourceFile) {\n      var content = aSourceMapConsumer.sourceContentFor(sourceFile);\n      if (content != null) {\n        if (aRelativePath != null) {\n          sourceFile = util.join(aRelativePath, sourceFile);\n        }\n        node.setSourceContent(sourceFile, content);\n      }\n    });\n\n    return node;\n\n    function addMappingWithCode(mapping, code) {\n      if (mapping === null || mapping.source === undefined) {\n        node.add(code);\n      } else {\n        var source = aRelativePath\n          ? util.join(aRelativePath, mapping.source)\n          : mapping.source;\n        node.add(new SourceNode(mapping.originalLine,\n                                mapping.originalColumn,\n                                source,\n                                code,\n                                mapping.name));\n      }\n    }\n  };\n\n/**\n * Add a chunk of generated JS to this source node.\n *\n * @param aChunk A string snippet of generated JS code, another instance of\n *        SourceNode, or an array where each member is one of those things.\n */\nSourceNode.prototype.add = function SourceNode_add(aChunk) {\n  if (Array.isArray(aChunk)) {\n    aChunk.forEach(function (chunk) {\n      this.add(chunk);\n    }, this);\n  }\n  else if (aChunk[isSourceNode] || typeof aChunk === \"string\") {\n    if (aChunk) {\n      this.children.push(aChunk);\n    }\n  }\n  else {\n    throw new TypeError(\n      \"Expected a SourceNode, string, or an array of SourceNodes and strings. Got \" + aChunk\n    );\n  }\n  return this;\n};\n\n/**\n * Add a chunk of generated JS to the beginning of this source node.\n *\n * @param aChunk A string snippet of generated JS code, another instance of\n *        SourceNode, or an array where each member is one of those things.\n */\nSourceNode.prototype.prepend = function SourceNode_prepend(aChunk) {\n  if (Array.isArray(aChunk)) {\n    for (var i = aChunk.length-1; i >= 0; i--) {\n      this.prepend(aChunk[i]);\n    }\n  }\n  else if (aChunk[isSourceNode] || typeof aChunk === \"string\") {\n    this.children.unshift(aChunk);\n  }\n  else {\n    throw new TypeError(\n      \"Expected a SourceNode, string, or an array of SourceNodes and strings. Got \" + aChunk\n    );\n  }\n  return this;\n};\n\n/**\n * Walk over the tree of JS snippets in this node and its children. The\n * walking function is called once for each snippet of JS and is passed that\n * snippet and the its original associated source's line/column location.\n *\n * @param aFn The traversal function.\n */\nSourceNode.prototype.walk = function SourceNode_walk(aFn) {\n  var chunk;\n  for (var i = 0, len = this.children.length; i < len; i++) {\n    chunk = this.children[i];\n    if (chunk[isSourceNode]) {\n      chunk.walk(aFn);\n    }\n    else {\n      if (chunk !== '') {\n        aFn(chunk, { source: this.source,\n                     line: this.line,\n                     column: this.column,\n                     name: this.name });\n      }\n    }\n  }\n};\n\n/**\n * Like `String.prototype.join` except for SourceNodes. Inserts `aStr` between\n * each of `this.children`.\n *\n * @param aSep The separator.\n */\nSourceNode.prototype.join = function SourceNode_join(aSep) {\n  var newChildren;\n  var i;\n  var len = this.children.length;\n  if (len > 0) {\n    newChildren = [];\n    for (i = 0; i < len-1; i++) {\n      newChildren.push(this.children[i]);\n      newChildren.push(aSep);\n    }\n    newChildren.push(this.children[i]);\n    this.children = newChildren;\n  }\n  return this;\n};\n\n/**\n * Call String.prototype.replace on the very right-most source snippet. Useful\n * for trimming whitespace from the end of a source node, etc.\n *\n * @param aPattern The pattern to replace.\n * @param aReplacement The thing to replace the pattern with.\n */\nSourceNode.prototype.replaceRight = function SourceNode_replaceRight(aPattern, aReplacement) {\n  var lastChild = this.children[this.children.length - 1];\n  if (lastChild[isSourceNode]) {\n    lastChild.replaceRight(aPattern, aReplacement);\n  }\n  else if (typeof lastChild === 'string') {\n    this.children[this.children.length - 1] = lastChild.replace(aPattern, aReplacement);\n  }\n  else {\n    this.children.push(''.replace(aPattern, aReplacement));\n  }\n  return this;\n};\n\n/**\n * Set the source content for a source file. This will be added to the SourceMapGenerator\n * in the sourcesContent field.\n *\n * @param aSourceFile The filename of the source file\n * @param aSourceContent The content of the source file\n */\nSourceNode.prototype.setSourceContent =\n  function SourceNode_setSourceContent(aSourceFile, aSourceContent) {\n    this.sourceContents[util.toSetString(aSourceFile)] = aSourceContent;\n  };\n\n/**\n * Walk over the tree of SourceNodes. The walking function is called for each\n * source file content and is passed the filename and source content.\n *\n * @param aFn The traversal function.\n */\nSourceNode.prototype.walkSourceContents =\n  function SourceNode_walkSourceContents(aFn) {\n    for (var i = 0, len = this.children.length; i < len; i++) {\n      if (this.children[i][isSourceNode]) {\n        this.children[i].walkSourceContents(aFn);\n      }\n    }\n\n    var sources = Object.keys(this.sourceContents);\n    for (var i = 0, len = sources.length; i < len; i++) {\n      aFn(util.fromSetString(sources[i]), this.sourceContents[sources[i]]);\n    }\n  };\n\n/**\n * Return the string representation of this source node. Walks over the tree\n * and concatenates all the various snippets together to one string.\n */\nSourceNode.prototype.toString = function SourceNode_toString() {\n  var str = \"\";\n  this.walk(function (chunk) {\n    str += chunk;\n  });\n  return str;\n};\n\n/**\n * Returns the string representation of this source node along with a source\n * map.\n */\nSourceNode.prototype.toStringWithSourceMap = function SourceNode_toStringWithSourceMap(aArgs) {\n  var generated = {\n    code: \"\",\n    line: 1,\n    column: 0\n  };\n  var map = new SourceMapGenerator(aArgs);\n  var sourceMappingActive = false;\n  var lastOriginalSource = null;\n  var lastOriginalLine = null;\n  var lastOriginalColumn = null;\n  var lastOriginalName = null;\n  this.walk(function (chunk, original) {\n    generated.code += chunk;\n    if (original.source !== null\n        && original.line !== null\n        && original.column !== null) {\n      if(lastOriginalSource !== original.source\n         || lastOriginalLine !== original.line\n         || lastOriginalColumn !== original.column\n         || lastOriginalName !== original.name) {\n        map.addMapping({\n          source: original.source,\n          original: {\n            line: original.line,\n            column: original.column\n          },\n          generated: {\n            line: generated.line,\n            column: generated.column\n          },\n          name: original.name\n        });\n      }\n      lastOriginalSource = original.source;\n      lastOriginalLine = original.line;\n      lastOriginalColumn = original.column;\n      lastOriginalName = original.name;\n      sourceMappingActive = true;\n    } else if (sourceMappingActive) {\n      map.addMapping({\n        generated: {\n          line: generated.line,\n          column: generated.column\n        }\n      });\n      lastOriginalSource = null;\n      sourceMappingActive = false;\n    }\n    for (var idx = 0, length = chunk.length; idx < length; idx++) {\n      if (chunk.charCodeAt(idx) === NEWLINE_CODE) {\n        generated.line++;\n        generated.column = 0;\n        // Mappings end at eol\n        if (idx + 1 === length) {\n          lastOriginalSource = null;\n          sourceMappingActive = false;\n        } else if (sourceMappingActive) {\n          map.addMapping({\n            source: original.source,\n            original: {\n              line: original.line,\n              column: original.column\n            },\n            generated: {\n              line: generated.line,\n              column: generated.column\n            },\n            name: original.name\n          });\n        }\n      } else {\n        generated.column++;\n      }\n    }\n  });\n  this.walkSourceContents(function (sourceFile, sourceContent) {\n    map.setSourceContent(sourceFile, sourceContent);\n  });\n\n  return { code: generated.code, map: map };\n};\n\nexports.SourceNode = SourceNode;\n", "/*\n * Copyright 2009-2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE.txt or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\nexports.SourceMapGenerator = require('./lib/source-map-generator').SourceMapGenerator;\nexports.SourceMapConsumer = require('./lib/source-map-consumer').SourceMapConsumer;\nexports.SourceNode = require('./lib/source-node').SourceNode;\n", "/* eslint-disable node/no-deprecated-api */\n\nvar toString = Object.prototype.toString\n\nvar isModern = (\n  typeof Buffer !== 'undefined' &&\n  typeof Buffer.alloc === 'function' &&\n  typeof Buffer.allocUnsafe === 'function' &&\n  typeof Buffer.from === 'function'\n)\n\nfunction isArrayBuffer (input) {\n  return toString.call(input).slice(8, -1) === 'ArrayBuffer'\n}\n\nfunction fromArrayBuffer (obj, byteOffset, length) {\n  byteOffset >>>= 0\n\n  var maxLength = obj.byteLength - byteOffset\n\n  if (maxLength < 0) {\n    throw new RangeError(\"'offset' is out of bounds\")\n  }\n\n  if (length === undefined) {\n    length = maxLength\n  } else {\n    length >>>= 0\n\n    if (length > maxLength) {\n      throw new RangeError(\"'length' is out of bounds\")\n    }\n  }\n\n  return isModern\n    ? Buffer.from(obj.slice(byteOffset, byteOffset + length))\n    : new Buffer(new Uint8Array(obj.slice(byteOffset, byteOffset + length)))\n}\n\nfunction fromString (string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  return isModern\n    ? Buffer.from(string, encoding)\n    : new Buffer(string, encoding)\n}\n\nfunction bufferFrom (value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (isArrayBuffer(value)) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(value, encodingOrOffset)\n  }\n\n  return isModern\n    ? Buffer.from(value)\n    : new Buffer(value)\n}\n\nmodule.exports = bufferFrom\n", "var SourceMapConsumer = require('source-map').SourceMapConsumer;\nvar path = require('path');\n\nvar fs;\ntry {\n  fs = require('fs');\n  if (!fs.existsSync || !fs.readFileSync) {\n    // fs doesn't have all methods we need\n    fs = null;\n  }\n} catch (err) {\n  /* nop */\n}\n\nvar bufferFrom = require('buffer-from');\n\n/**\n * Requires a module which is protected against bundler minification.\n *\n * @param {NodeModule} mod\n * @param {string} request\n */\nfunction dynamicRequire(mod, request) {\n  return mod.require(request);\n}\n\n// Only install once if called multiple times\nvar errorFormatterInstalled = false;\nvar uncaughtShimInstalled = false;\n\n// If true, the caches are reset before a stack trace formatting operation\nvar emptyCacheBetweenOperations = false;\n\n// Supports {browser, node, auto}\nvar environment = \"auto\";\n\n// Maps a file path to a string containing the file contents\nvar fileContentsCache = {};\n\n// Maps a file path to a source map for that file\nvar sourceMapCache = {};\n\n// Regex for detecting source maps\nvar reSourceMap = /^data:application\\/json[^,]+base64,/;\n\n// Priority list of retrieve handlers\nvar retrieveFileHandlers = [];\nvar retrieveMapHandlers = [];\n\nfunction isInBrowser() {\n  if (environment === \"browser\")\n    return true;\n  if (environment === \"node\")\n    return false;\n  return ((typeof window !== 'undefined') && (typeof XMLHttpRequest === 'function') && !(window.require && window.module && window.process && window.process.type === \"renderer\"));\n}\n\nfunction hasGlobalProcessEventEmitter() {\n  return ((typeof process === 'object') && (process !== null) && (typeof process.on === 'function'));\n}\n\nfunction globalProcessVersion() {\n  if ((typeof process === 'object') && (process !== null)) {\n    return process.version;\n  } else {\n    return '';\n  }\n}\n\nfunction globalProcessStderr() {\n  if ((typeof process === 'object') && (process !== null)) {\n    return process.stderr;\n  }\n}\n\nfunction globalProcessExit(code) {\n  if ((typeof process === 'object') && (process !== null) && (typeof process.exit === 'function')) {\n    return process.exit(code);\n  }\n}\n\nfunction handlerExec(list) {\n  return function(arg) {\n    for (var i = 0; i < list.length; i++) {\n      var ret = list[i](arg);\n      if (ret) {\n        return ret;\n      }\n    }\n    return null;\n  };\n}\n\nvar retrieveFile = handlerExec(retrieveFileHandlers);\n\nretrieveFileHandlers.push(function(path) {\n  // Trim the path to make sure there is no extra whitespace.\n  path = path.trim();\n  if (/^file:/.test(path)) {\n    // existsSync/readFileSync can't handle file protocol, but once stripped, it works\n    path = path.replace(/file:\\/\\/\\/(\\w:)?/, function(protocol, drive) {\n      return drive ?\n        '' : // file:///C:/dir/file -> C:/dir/file\n        '/'; // file:///root-dir/file -> /root-dir/file\n    });\n  }\n  if (path in fileContentsCache) {\n    return fileContentsCache[path];\n  }\n\n  var contents = '';\n  try {\n    if (!fs) {\n      // Use SJAX if we are in the browser\n      var xhr = new XMLHttpRequest();\n      xhr.open('GET', path, /** async */ false);\n      xhr.send(null);\n      if (xhr.readyState === 4 && xhr.status === 200) {\n        contents = xhr.responseText;\n      }\n    } else if (fs.existsSync(path)) {\n      // Otherwise, use the filesystem\n      contents = fs.readFileSync(path, 'utf8');\n    }\n  } catch (er) {\n    /* ignore any errors */\n  }\n\n  return fileContentsCache[path] = contents;\n});\n\n// Support URLs relative to a directory, but be careful about a protocol prefix\n// in case we are in the browser (i.e. directories may start with \"http://\" or \"file:///\")\nfunction supportRelativeURL(file, url) {\n  if (!file) return url;\n  var dir = path.dirname(file);\n  var match = /^\\w+:\\/\\/[^\\/]*/.exec(dir);\n  var protocol = match ? match[0] : '';\n  var startPath = dir.slice(protocol.length);\n  if (protocol && /^\\/\\w\\:/.test(startPath)) {\n    // handle file:///C:/ paths\n    protocol += '/';\n    return protocol + path.resolve(dir.slice(protocol.length), url).replace(/\\\\/g, '/');\n  }\n  return protocol + path.resolve(dir.slice(protocol.length), url);\n}\n\nfunction retrieveSourceMapURL(source) {\n  var fileData;\n\n  if (isInBrowser()) {\n     try {\n       var xhr = new XMLHttpRequest();\n       xhr.open('GET', source, false);\n       xhr.send(null);\n       fileData = xhr.readyState === 4 ? xhr.responseText : null;\n\n       // Support providing a sourceMappingURL via the SourceMap header\n       var sourceMapHeader = xhr.getResponseHeader(\"SourceMap\") ||\n                             xhr.getResponseHeader(\"X-SourceMap\");\n       if (sourceMapHeader) {\n         return sourceMapHeader;\n       }\n     } catch (e) {\n     }\n  }\n\n  // Get the URL of the source map\n  fileData = retrieveFile(source);\n  var re = /(?:\\/\\/[@#][\\s]*sourceMappingURL=([^\\s'\"]+)[\\s]*$)|(?:\\/\\*[@#][\\s]*sourceMappingURL=([^\\s*'\"]+)[\\s]*(?:\\*\\/)[\\s]*$)/mg;\n  // Keep executing the search to find the *last* sourceMappingURL to avoid\n  // picking up sourceMappingURLs from comments, strings, etc.\n  var lastMatch, match;\n  while (match = re.exec(fileData)) lastMatch = match;\n  if (!lastMatch) return null;\n  return lastMatch[1];\n};\n\n// Can be overridden by the retrieveSourceMap option to install. Takes a\n// generated source filename; returns a {map, optional url} object, or null if\n// there is no source map.  The map field may be either a string or the parsed\n// JSON object (ie, it must be a valid argument to the SourceMapConsumer\n// constructor).\nvar retrieveSourceMap = handlerExec(retrieveMapHandlers);\nretrieveMapHandlers.push(function(source) {\n  var sourceMappingURL = retrieveSourceMapURL(source);\n  if (!sourceMappingURL) return null;\n\n  // Read the contents of the source map\n  var sourceMapData;\n  if (reSourceMap.test(sourceMappingURL)) {\n    // Support source map URL as a data url\n    var rawData = sourceMappingURL.slice(sourceMappingURL.indexOf(',') + 1);\n    sourceMapData = bufferFrom(rawData, \"base64\").toString();\n    sourceMappingURL = source;\n  } else {\n    // Support source map URLs relative to the source URL\n    sourceMappingURL = supportRelativeURL(source, sourceMappingURL);\n    sourceMapData = retrieveFile(sourceMappingURL);\n  }\n\n  if (!sourceMapData) {\n    return null;\n  }\n\n  return {\n    url: sourceMappingURL,\n    map: sourceMapData\n  };\n});\n\nfunction mapSourcePosition(position) {\n  var sourceMap = sourceMapCache[position.source];\n  if (!sourceMap) {\n    // Call the (overrideable) retrieveSourceMap function to get the source map.\n    var urlAndMap = retrieveSourceMap(position.source);\n    if (urlAndMap) {\n      sourceMap = sourceMapCache[position.source] = {\n        url: urlAndMap.url,\n        map: new SourceMapConsumer(urlAndMap.map)\n      };\n\n      // Load all sources stored inline with the source map into the file cache\n      // to pretend like they are already loaded. They may not exist on disk.\n      if (sourceMap.map.sourcesContent) {\n        sourceMap.map.sources.forEach(function(source, i) {\n          var contents = sourceMap.map.sourcesContent[i];\n          if (contents) {\n            var url = supportRelativeURL(sourceMap.url, source);\n            fileContentsCache[url] = contents;\n          }\n        });\n      }\n    } else {\n      sourceMap = sourceMapCache[position.source] = {\n        url: null,\n        map: null\n      };\n    }\n  }\n\n  // Resolve the source URL relative to the URL of the source map\n  if (sourceMap && sourceMap.map && typeof sourceMap.map.originalPositionFor === 'function') {\n    var originalPosition = sourceMap.map.originalPositionFor(position);\n\n    // Only return the original position if a matching line was found. If no\n    // matching line is found then we return position instead, which will cause\n    // the stack trace to print the path and line for the compiled file. It is\n    // better to give a precise location in the compiled file than a vague\n    // location in the original file.\n    if (originalPosition.source !== null) {\n      originalPosition.source = supportRelativeURL(\n        sourceMap.url, originalPosition.source);\n      return originalPosition;\n    }\n  }\n\n  return position;\n}\n\n// Parses code generated by FormatEvalOrigin(), a function inside V8:\n// https://code.google.com/p/v8/source/browse/trunk/src/messages.js\nfunction mapEvalOrigin(origin) {\n  // Most eval() calls are in this format\n  var match = /^eval at ([^(]+) \\((.+):(\\d+):(\\d+)\\)$/.exec(origin);\n  if (match) {\n    var position = mapSourcePosition({\n      source: match[2],\n      line: +match[3],\n      column: match[4] - 1\n    });\n    return 'eval at ' + match[1] + ' (' + position.source + ':' +\n      position.line + ':' + (position.column + 1) + ')';\n  }\n\n  // Parse nested eval() calls using recursion\n  match = /^eval at ([^(]+) \\((.+)\\)$/.exec(origin);\n  if (match) {\n    return 'eval at ' + match[1] + ' (' + mapEvalOrigin(match[2]) + ')';\n  }\n\n  // Make sure we still return useful information if we didn't find anything\n  return origin;\n}\n\n// This is copied almost verbatim from the V8 source code at\n// https://code.google.com/p/v8/source/browse/trunk/src/messages.js. The\n// implementation of wrapCallSite() used to just forward to the actual source\n// code of CallSite.prototype.toString but unfortunately a new release of V8\n// did something to the prototype chain and broke the shim. The only fix I\n// could find was copy/paste.\nfunction CallSiteToString() {\n  var fileName;\n  var fileLocation = \"\";\n  if (this.isNative()) {\n    fileLocation = \"native\";\n  } else {\n    fileName = this.getScriptNameOrSourceURL();\n    if (!fileName && this.isEval()) {\n      fileLocation = this.getEvalOrigin();\n      fileLocation += \", \";  // Expecting source position to follow.\n    }\n\n    if (fileName) {\n      fileLocation += fileName;\n    } else {\n      // Source code does not originate from a file and is not native, but we\n      // can still get the source position inside the source string, e.g. in\n      // an eval string.\n      fileLocation += \"<anonymous>\";\n    }\n    var lineNumber = this.getLineNumber();\n    if (lineNumber != null) {\n      fileLocation += \":\" + lineNumber;\n      var columnNumber = this.getColumnNumber();\n      if (columnNumber) {\n        fileLocation += \":\" + columnNumber;\n      }\n    }\n  }\n\n  var line = \"\";\n  var functionName = this.getFunctionName();\n  var addSuffix = true;\n  var isConstructor = this.isConstructor();\n  var isMethodCall = !(this.isToplevel() || isConstructor);\n  if (isMethodCall) {\n    var typeName = this.getTypeName();\n    // Fixes shim to be backward compatable with Node v0 to v4\n    if (typeName === \"[object Object]\") {\n      typeName = \"null\";\n    }\n    var methodName = this.getMethodName();\n    if (functionName) {\n      if (typeName && functionName.indexOf(typeName) != 0) {\n        line += typeName + \".\";\n      }\n      line += functionName;\n      if (methodName && functionName.indexOf(\".\" + methodName) != functionName.length - methodName.length - 1) {\n        line += \" [as \" + methodName + \"]\";\n      }\n    } else {\n      line += typeName + \".\" + (methodName || \"<anonymous>\");\n    }\n  } else if (isConstructor) {\n    line += \"new \" + (functionName || \"<anonymous>\");\n  } else if (functionName) {\n    line += functionName;\n  } else {\n    line += fileLocation;\n    addSuffix = false;\n  }\n  if (addSuffix) {\n    line += \" (\" + fileLocation + \")\";\n  }\n  return line;\n}\n\nfunction cloneCallSite(frame) {\n  var object = {};\n  Object.getOwnPropertyNames(Object.getPrototypeOf(frame)).forEach(function(name) {\n    object[name] = /^(?:is|get)/.test(name) ? function() { return frame[name].call(frame); } : frame[name];\n  });\n  object.toString = CallSiteToString;\n  return object;\n}\n\nfunction wrapCallSite(frame, state) {\n  // provides interface backward compatibility\n  if (state === undefined) {\n    state = { nextPosition: null, curPosition: null }\n  }\n  if(frame.isNative()) {\n    state.curPosition = null;\n    return frame;\n  }\n\n  // Most call sites will return the source file from getFileName(), but code\n  // passed to eval() ending in \"//# sourceURL=...\" will return the source file\n  // from getScriptNameOrSourceURL() instead\n  var source = frame.getFileName() || frame.getScriptNameOrSourceURL();\n  if (source) {\n    var line = frame.getLineNumber();\n    var column = frame.getColumnNumber() - 1;\n\n    // Fix position in Node where some (internal) code is prepended.\n    // See https://github.com/evanw/node-source-map-support/issues/36\n    // Header removed in node at ^10.16 || >=11.11.0\n    // v11 is not an LTS candidate, we can just test the one version with it.\n    // Test node versions for: 10.16-19, 10.20+, 12-19, 20-99, 100+, or 11.11\n    var noHeader = /^v(10\\.1[6-9]|10\\.[2-9][0-9]|10\\.[0-9]{3,}|1[2-9]\\d*|[2-9]\\d|\\d{3,}|11\\.11)/;\n    var headerLength = noHeader.test(globalProcessVersion()) ? 0 : 62;\n    if (line === 1 && column > headerLength && !isInBrowser() && !frame.isEval()) {\n      column -= headerLength;\n    }\n\n    var position = mapSourcePosition({\n      source: source,\n      line: line,\n      column: column\n    });\n    state.curPosition = position;\n    frame = cloneCallSite(frame);\n    var originalFunctionName = frame.getFunctionName;\n    frame.getFunctionName = function() {\n      if (state.nextPosition == null) {\n        return originalFunctionName();\n      }\n      return state.nextPosition.name || originalFunctionName();\n    };\n    frame.getFileName = function() { return position.source; };\n    frame.getLineNumber = function() { return position.line; };\n    frame.getColumnNumber = function() { return position.column + 1; };\n    frame.getScriptNameOrSourceURL = function() { return position.source; };\n    return frame;\n  }\n\n  // Code called using eval() needs special handling\n  var origin = frame.isEval() && frame.getEvalOrigin();\n  if (origin) {\n    origin = mapEvalOrigin(origin);\n    frame = cloneCallSite(frame);\n    frame.getEvalOrigin = function() { return origin; };\n    return frame;\n  }\n\n  // If we get here then we were unable to change the source position\n  return frame;\n}\n\n// This function is part of the V8 stack trace API, for more info see:\n// https://v8.dev/docs/stack-trace-api\nfunction prepareStackTrace(error, stack) {\n  if (emptyCacheBetweenOperations) {\n    fileContentsCache = {};\n    sourceMapCache = {};\n  }\n\n  var name = error.name || 'Error';\n  var message = error.message || '';\n  var errorString = name + \": \" + message;\n\n  var state = { nextPosition: null, curPosition: null };\n  var processedStack = [];\n  for (var i = stack.length - 1; i >= 0; i--) {\n    processedStack.push('\\n    at ' + wrapCallSite(stack[i], state));\n    state.nextPosition = state.curPosition;\n  }\n  state.curPosition = state.nextPosition = null;\n  return errorString + processedStack.reverse().join('');\n}\n\n// Generate position and snippet of original source with pointer\nfunction getErrorSource(error) {\n  var match = /\\n    at [^(]+ \\((.*):(\\d+):(\\d+)\\)/.exec(error.stack);\n  if (match) {\n    var source = match[1];\n    var line = +match[2];\n    var column = +match[3];\n\n    // Support the inline sourceContents inside the source map\n    var contents = fileContentsCache[source];\n\n    // Support files on disk\n    if (!contents && fs && fs.existsSync(source)) {\n      try {\n        contents = fs.readFileSync(source, 'utf8');\n      } catch (er) {\n        contents = '';\n      }\n    }\n\n    // Format the line from the original source code like node does\n    if (contents) {\n      var code = contents.split(/(?:\\r\\n|\\r|\\n)/)[line - 1];\n      if (code) {\n        return source + ':' + line + '\\n' + code + '\\n' +\n          new Array(column).join(' ') + '^';\n      }\n    }\n  }\n  return null;\n}\n\nfunction printErrorAndExit (error) {\n  var source = getErrorSource(error);\n\n  // Ensure error is printed synchronously and not truncated\n  var stderr = globalProcessStderr();\n  if (stderr && stderr._handle && stderr._handle.setBlocking) {\n    stderr._handle.setBlocking(true);\n  }\n\n  if (source) {\n    console.error();\n    console.error(source);\n  }\n\n  console.error(error.stack);\n  globalProcessExit(1);\n}\n\nfunction shimEmitUncaughtException () {\n  var origEmit = process.emit;\n\n  process.emit = function (type) {\n    if (type === 'uncaughtException') {\n      var hasStack = (arguments[1] && arguments[1].stack);\n      var hasListeners = (this.listeners(type).length > 0);\n\n      if (hasStack && !hasListeners) {\n        return printErrorAndExit(arguments[1]);\n      }\n    }\n\n    return origEmit.apply(this, arguments);\n  };\n}\n\nvar originalRetrieveFileHandlers = retrieveFileHandlers.slice(0);\nvar originalRetrieveMapHandlers = retrieveMapHandlers.slice(0);\n\nexports.wrapCallSite = wrapCallSite;\nexports.getErrorSource = getErrorSource;\nexports.mapSourcePosition = mapSourcePosition;\nexports.retrieveSourceMap = retrieveSourceMap;\n\nexports.install = function(options) {\n  options = options || {};\n\n  if (options.environment) {\n    environment = options.environment;\n    if ([\"node\", \"browser\", \"auto\"].indexOf(environment) === -1) {\n      throw new Error(\"environment \" + environment + \" was unknown. Available options are {auto, browser, node}\")\n    }\n  }\n\n  // Allow sources to be found by methods other than reading the files\n  // directly from disk.\n  if (options.retrieveFile) {\n    if (options.overrideRetrieveFile) {\n      retrieveFileHandlers.length = 0;\n    }\n\n    retrieveFileHandlers.unshift(options.retrieveFile);\n  }\n\n  // Allow source maps to be found by methods other than reading the files\n  // directly from disk.\n  if (options.retrieveSourceMap) {\n    if (options.overrideRetrieveSourceMap) {\n      retrieveMapHandlers.length = 0;\n    }\n\n    retrieveMapHandlers.unshift(options.retrieveSourceMap);\n  }\n\n  // Support runtime transpilers that include inline source maps\n  if (options.hookRequire && !isInBrowser()) {\n    // Use dynamicRequire to avoid including in browser bundles\n    var Module = dynamicRequire(module, 'module');\n    var $compile = Module.prototype._compile;\n\n    if (!$compile.__sourceMapSupport) {\n      Module.prototype._compile = function(content, filename) {\n        fileContentsCache[filename] = content;\n        sourceMapCache[filename] = undefined;\n        return $compile.call(this, content, filename);\n      };\n\n      Module.prototype._compile.__sourceMapSupport = true;\n    }\n  }\n\n  // Configure options\n  if (!emptyCacheBetweenOperations) {\n    emptyCacheBetweenOperations = 'emptyCacheBetweenOperations' in options ?\n      options.emptyCacheBetweenOperations : false;\n  }\n\n  // Install the error reformatter\n  if (!errorFormatterInstalled) {\n    errorFormatterInstalled = true;\n    Error.prepareStackTrace = prepareStackTrace;\n  }\n\n  if (!uncaughtShimInstalled) {\n    var installHandler = 'handleUncaughtExceptions' in options ?\n      options.handleUncaughtExceptions : true;\n\n    // Do not override 'uncaughtException' with our own handler in Node.js\n    // Worker threads. Workers pass the error to the main thread as an event,\n    // rather than printing something to stderr and exiting.\n    try {\n      // We need to use `dynamicRequire` because `require` on it's own will be optimized by WebPack/Browserify.\n      var worker_threads = dynamicRequire(module, 'worker_threads');\n      if (worker_threads.isMainThread === false) {\n        installHandler = false;\n      }\n    } catch(e) {}\n\n    // Provide the option to not install the uncaught exception handler. This is\n    // to support other uncaught exception handlers (in test frameworks, for\n    // example). If this handler is not installed and there are no other uncaught\n    // exception handlers, uncaught exceptions will be caught by node's built-in\n    // exception handler and the process will still be terminated. However, the\n    // generated JavaScript code will be shown above the stack trace instead of\n    // the original source code.\n    if (installHandler && hasGlobalProcessEventEmitter()) {\n      uncaughtShimInstalled = true;\n      shimEmitUncaughtException();\n    }\n  }\n};\n\nexports.resetRetrieveHandlers = function() {\n  retrieveFileHandlers.length = 0;\n  retrieveMapHandlers.length = 0;\n\n  retrieveFileHandlers = originalRetrieveFileHandlers.slice(0);\n  retrieveMapHandlers = originalRetrieveMapHandlers.slice(0);\n\n  retrieveSourceMap = handlerExec(retrieveMapHandlers);\n  retrieveFile = handlerExec(retrieveFileHandlers);\n}\n", null, null, null, null, null, null, null, null, null, null, null, null, "var has = Object.prototype.hasOwnProperty;\n\nexport function dequal(foo, bar) {\n\tvar ctor, len;\n\tif (foo === bar) return true;\n\n\tif (foo && bar && (ctor=foo.constructor) === bar.constructor) {\n\t\tif (ctor === Date) return foo.getTime() === bar.getTime();\n\t\tif (ctor === RegExp) return foo.toString() === bar.toString();\n\n\t\tif (ctor === Array) {\n\t\t\tif ((len=foo.length) === bar.length) {\n\t\t\t\twhile (len-- && dequal(foo[len], bar[len]));\n\t\t\t}\n\t\t\treturn len === -1;\n\t\t}\n\n\t\tif (!ctor || typeof foo === 'object') {\n\t\t\tlen = 0;\n\t\t\tfor (ctor in foo) {\n\t\t\t\tif (has.call(foo, ctor) && ++len && !has.call(bar, ctor)) return false;\n\t\t\t\tif (!(ctor in bar) || !dequal(foo[ctor], bar[ctor])) return false;\n\t\t\t}\n\t\t\treturn Object.keys(bar).length === len;\n\t\t}\n\t}\n\n\treturn foo !== foo && bar !== bar;\n}\n", null, null, null, null, null, null, null, null, null, null, null, null],
  "mappings": "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",
  "names": ["context", "exports", "exports", "exports", "context", "exports", "exports", "exports", "exports", "exports", "_a", "TracesSamplerValues", "exports", "exports", "exports", "exports", "exports", "exports", "RandomIdGenerator", "exports", "exports", "exports", "exports", "exports", "exports", "exports", "exports", "ExportResultCode", "exports", "_a", "context", "exports", "exports", "exports", "exports", "VERSION", "context", "RPCType", "exports", "context", "exports", "exports", "_a", "context", "exports", "context", "exports", "exports", "exports", "exports", "timeout", "exports", "exports", "exports", "exports", "exports", "exports", "exports", "context", "exports", "SamplingDecision", "exports", "exports", "exports", "_a", "context", "exports", "context", "exports", "exports", "exports", "_a", "_a", "exports", "BatchSpanProcessor", "exports", "RandomIdGenerator", "exports", "exports", "exports", "context", "_a", "exports", "exports", "exports", "exports", "Resource", "_a", "exports", "exports", "util", "exports", "exports", "exports", "exports", "process", "exports", "exports", "process", "exports", "exports", "exports", "exports", "exports", "exports", "exports", "exports", "exports", "exports", "_a", "exports", "exports", "exports", "exports", "exports", "exports", "exports", "detectResourcesSync", "_a", "exports", "context", "exports", "exports", "ForceFlushState", "exports", "_a", "timeout", "_a", "exports", "exports", "SimpleSpanProcessor", "_a", "exports", "exports", "exports", "_a", "timeout", "exports", "CompressionAlgorithm", "exports", "exports", "exports", "_a", "exports", "exports", "exports", "_a", "exports", "exports", "exports", "exports", "exports", "_a", "ESpanKind", "exports", "exports", "_a", "exports", "exports", "exports", "AggregationTemporality", "exports", "DataPointType", "exports", "exports", "_a", "timeout", "AggregatorKind", "exports", "exports", "InstrumentType", "exports", "_a", "exports", "mod", "exports", "exports", "exports", "exports", "util", "exports", "util", "exports", "exports", "exports", "exports", "exports", "exports", "exports", "exports", "_a", "exports", "_a", "exports", "exports", "_a", "exports", "exports", "context", "exports", "exports", "exports", "exports", "exports", "exports", "exports", "exports", "exports", "context", "exports", "exports", "exports", "context", "exports", "exports", "exports", "exports", "exports", "_a", "exports", "exports", "_a", "exports", "exports", "_a", "exports", "exports", "exports", "exports", "exports", "_a", "exports", "module", "params", "offset", "exports", "i", "exports", "module", "exports", "module", "exports", "exports", "module", "size", "exports", "module", "util", "exports", "util", "Buffer", "i", "exports", "module", "util", "create", "exports", "module", "util", "exports", "module", "util", "create_array", "create", "buffer", "exports", "module", "util", "exports", "module", "util", "self", "err", "exports", "exports", "module", "exports", "require_minimal", "exports", "module", "exports", "module", "Resource", "logs", "exports", "exports", "exports", "exports", "exports", "OTLPLogExporter", "exports", "exports", "exports", "exports", "exports", "OTLPTraceExporter", "exports", "exports", "exports", "exports", "exports", "registerInstrumentations", "_a", "exports", "_a", "exports", "exports", "moduleName", "exports", "moduleName", "_a", "exports", "module", "_a", "exports", "exports", "exports", "exports", "exports", "exports", "exports", "context", "exports", "exports", "exports", "_a", "timeout", "context", "exports", "exports", "exports", "exports", "LoggerProvider", "_a", "logs", "_a", "exports", "SimpleLogRecordProcessor", "_a", "exports", "logs", "exports", "_a", "exports", "BatchLogRecordProcessor", "exports", "exports", "exports", "exports", "context", "_a", "exports", "_a", "context", "exports", "_a", "context", "exports", "exports", "exports", "exports", "context", "exports", "context", "exports", "B3InjectEncoding", "exports", "context", "exports", "exports", "exports", "context", "_a", "exports", "NodeTracerProvider", "exports", "exports", "require_base64", "exports", "exports", "require_util", "exports", "exports", "util", "has", "exports", "util", "exports", "util", "sourceFile", "exports", "exports", "exports", "util", "context", "needle", "section", "exports", "util", "exports", "exports", "module", "exports", "module", "mod", "path", "init_esm", "context", "logs", "init_esm", "result", "parseError", "import_api_logs", "console", "URL", "timeout", "self", "timeout", "intervalMs", "timeout"]
}
