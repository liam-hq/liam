{
  "version": 3,
  "sources": ["../../../../../../../../../node_modules/.pnpm/@opentelemetry+instrumentation-http@0.57.2_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-http/src/version.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+api-logs@0.57.2/node_modules/@opentelemetry/api-logs/src/types/LogRecord.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+api-logs@0.57.2/node_modules/@opentelemetry/api-logs/src/NoopLogger.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+api-logs@0.57.2/node_modules/@opentelemetry/api-logs/src/NoopLoggerProvider.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+api-logs@0.57.2/node_modules/@opentelemetry/api-logs/src/ProxyLogger.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+api-logs@0.57.2/node_modules/@opentelemetry/api-logs/src/ProxyLoggerProvider.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+api-logs@0.57.2/node_modules/@opentelemetry/api-logs/src/platform/node/globalThis.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+api-logs@0.57.2/node_modules/@opentelemetry/api-logs/src/platform/node/index.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+api-logs@0.57.2/node_modules/@opentelemetry/api-logs/src/platform/index.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+api-logs@0.57.2/node_modules/@opentelemetry/api-logs/src/internal/global-utils.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+api-logs@0.57.2/node_modules/@opentelemetry/api-logs/src/api/logs.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+api-logs@0.57.2/node_modules/@opentelemetry/api-logs/src/index.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+instrumentation@0.57.2_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation/src/autoLoaderUtils.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+instrumentation@0.57.2_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation/src/autoLoader.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+instrumentation@0.57.2_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation/src/instrumentation.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+instrumentation@0.57.2_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation/src/platform/node/ModuleNameTrie.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+instrumentation@0.57.2_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation/src/platform/node/RequireInTheMiddleSingleton.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+instrumentation@0.57.2_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation/src/utils.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+instrumentation@0.57.2_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation/src/platform/node/instrumentation.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+instrumentation@0.57.2_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation/src/platform/node/normalize.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+instrumentation@0.57.2_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation/src/platform/node/index.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+instrumentation@0.57.2_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation/src/platform/index.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+instrumentation@0.57.2_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation/src/instrumentationNodeModuleDefinition.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+instrumentation@0.57.2_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation/src/instrumentationNodeModuleFile.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+instrumentation@0.57.2_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation/src/index.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+instrumentation-http@0.57.2_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-http/src/enums/AttributeNames.ts", "../../../../../../../../../node_modules/.pnpm/forwarded-parse@2.1.2/node_modules/forwarded-parse/lib/error.js", "../../../../../../../../../node_modules/.pnpm/forwarded-parse@2.1.2/node_modules/forwarded-parse/lib/ascii.js", "../../../../../../../../../node_modules/.pnpm/forwarded-parse@2.1.2/node_modules/forwarded-parse/index.js", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+instrumentation-http@0.57.2_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-http/src/utils.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+instrumentation-http@0.57.2_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-http/src/http.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+instrumentation-http@0.57.2_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-http/src/index.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+semantic-conventions@1.34.0/node_modules/@opentelemetry/semantic-conventions/src/internal/utils.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+semantic-conventions@1.34.0/node_modules/@opentelemetry/semantic-conventions/src/trace/SemanticAttributes.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+semantic-conventions@1.34.0/node_modules/@opentelemetry/semantic-conventions/src/trace/index.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+semantic-conventions@1.34.0/node_modules/@opentelemetry/semantic-conventions/src/resource/SemanticResourceAttributes.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+semantic-conventions@1.34.0/node_modules/@opentelemetry/semantic-conventions/src/resource/index.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+semantic-conventions@1.34.0/node_modules/@opentelemetry/semantic-conventions/src/stable_attributes.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+semantic-conventions@1.34.0/node_modules/@opentelemetry/semantic-conventions/src/stable_metrics.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+semantic-conventions@1.34.0/node_modules/@opentelemetry/semantic-conventions/src/index.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+sdk-trace-base@1.30.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/src/enums.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+sdk-trace-base@1.30.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/src/Span.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+sdk-trace-base@1.30.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/src/Sampler.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+sdk-trace-base@1.30.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/src/sampler/AlwaysOffSampler.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+sdk-trace-base@1.30.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/src/sampler/AlwaysOnSampler.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+sdk-trace-base@1.30.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/src/sampler/ParentBasedSampler.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+sdk-trace-base@1.30.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/src/sampler/TraceIdRatioBasedSampler.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+sdk-trace-base@1.30.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/src/config.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+sdk-trace-base@1.30.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/src/utility.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+sdk-trace-base@1.30.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/src/export/BatchSpanProcessorBase.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+sdk-trace-base@1.30.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/src/platform/node/export/BatchSpanProcessor.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+sdk-trace-base@1.30.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/src/platform/node/RandomIdGenerator.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+sdk-trace-base@1.30.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/src/platform/node/index.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+sdk-trace-base@1.30.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/src/platform/index.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+sdk-trace-base@1.30.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/src/Tracer.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+resources@1.30.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/resources/src/platform/node/default-service-name.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+resources@1.30.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/resources/src/platform/node/index.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+resources@1.30.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/resources/src/platform/index.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+resources@1.30.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/resources/src/Resource.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+resources@1.30.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/resources/src/detectors/platform/node/utils.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+resources@1.30.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/resources/src/detectors/platform/node/machine-id/execAsync.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+resources@1.30.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/resources/src/detectors/platform/node/machine-id/getMachineId-darwin.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+resources@1.30.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/resources/src/detectors/platform/node/machine-id/getMachineId-linux.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+resources@1.30.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/resources/src/detectors/platform/node/machine-id/getMachineId-bsd.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+resources@1.30.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/resources/src/detectors/platform/node/machine-id/getMachineId-win.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+resources@1.30.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/resources/src/detectors/platform/node/machine-id/getMachineId-unsupported.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+resources@1.30.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/resources/src/detectors/platform/node/machine-id/getMachineId.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+resources@1.30.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/resources/src/detectors/platform/node/HostDetectorSync.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+resources@1.30.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/resources/src/detectors/platform/node/HostDetector.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+resources@1.30.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/resources/src/detectors/platform/node/OSDetectorSync.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+resources@1.30.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/resources/src/detectors/platform/node/OSDetector.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+resources@1.30.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/resources/src/detectors/platform/node/ProcessDetectorSync.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+resources@1.30.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/resources/src/detectors/platform/node/ProcessDetector.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+resources@1.30.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/resources/src/detectors/platform/node/ServiceInstanceIdDetectorSync.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+resources@1.30.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/resources/src/detectors/platform/node/index.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+resources@1.30.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/resources/src/detectors/platform/index.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+resources@1.30.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/resources/src/detectors/BrowserDetectorSync.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+resources@1.30.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/resources/src/detectors/BrowserDetector.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+resources@1.30.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/resources/src/detectors/EnvDetectorSync.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+resources@1.30.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/resources/src/detectors/EnvDetector.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+resources@1.30.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/resources/src/detectors/index.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+resources@1.30.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/resources/src/utils.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+resources@1.30.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/resources/src/detect-resources.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+resources@1.30.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/resources/src/index.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+sdk-trace-base@1.30.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/src/MultiSpanProcessor.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+sdk-trace-base@1.30.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/src/export/NoopSpanProcessor.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+sdk-trace-base@1.30.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/src/BasicTracerProvider.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+sdk-trace-base@1.30.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/src/export/ConsoleSpanExporter.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+sdk-trace-base@1.30.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/src/export/InMemorySpanExporter.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+sdk-trace-base@1.30.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/src/export/SimpleSpanProcessor.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+sdk-trace-base@1.30.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/src/index.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+instrumentation-undici@0.10.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-undici/src/version.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+instrumentation-undici@0.10.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-undici/src/enums/SemanticAttributes.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+instrumentation-undici@0.10.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-undici/src/undici.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+instrumentation-undici@0.10.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-undici/build/src/types.js", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+instrumentation-undici@0.10.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-undici/src/index.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+instrumentation-express@0.47.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-express/src/enums/ExpressLayerType.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+instrumentation-express@0.47.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-express/src/enums/AttributeNames.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+instrumentation-express@0.47.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-express/src/internal-types.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+instrumentation-express@0.47.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-express/src/utils.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+instrumentation-express@0.47.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-express/src/version.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+instrumentation-express@0.47.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-express/src/instrumentation.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+instrumentation-express@0.47.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-express/src/index.ts", "../../../../../../../../../node_modules/.pnpm/@fastify+otel@https+++codeload.github.com+getsentry+fastify-otel+tar.gz+ae3088d65e286bd_c29c1e17bf697a682932ef1697fd8c7d/node_modules/@fastify/otel/package.json", "../../../../../../../../../node_modules/.pnpm/balanced-match@1.0.2/node_modules/balanced-match/index.js", "../../../../../../../../../node_modules/.pnpm/brace-expansion@2.0.2/node_modules/brace-expansion/index.js", "../../../../../../../../../node_modules/.pnpm/minimatch@9.0.5/node_modules/minimatch/src/assert-valid-pattern.ts", "../../../../../../../../../node_modules/.pnpm/minimatch@9.0.5/node_modules/minimatch/src/brace-expressions.ts", "../../../../../../../../../node_modules/.pnpm/minimatch@9.0.5/node_modules/minimatch/src/unescape.ts", "../../../../../../../../../node_modules/.pnpm/minimatch@9.0.5/node_modules/minimatch/src/ast.ts", "../../../../../../../../../node_modules/.pnpm/minimatch@9.0.5/node_modules/minimatch/src/escape.ts", "../../../../../../../../../node_modules/.pnpm/minimatch@9.0.5/node_modules/minimatch/src/index.ts", "../../../../../../../../../node_modules/.pnpm/@fastify+otel@https+++codeload.github.com+getsentry+fastify-otel+tar.gz+ae3088d65e286bd_c29c1e17bf697a682932ef1697fd8c7d/node_modules/@fastify/otel/index.js", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+instrumentation-graphql@0.47.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-graphql/src/enum.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+instrumentation-graphql@0.47.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-graphql/src/enums/AttributeNames.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+instrumentation-graphql@0.47.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-graphql/src/symbols.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+instrumentation-graphql@0.47.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-graphql/src/internal-types.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+instrumentation-graphql@0.47.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-graphql/src/utils.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+instrumentation-graphql@0.47.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-graphql/src/version.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+instrumentation-graphql@0.47.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-graphql/src/instrumentation.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+instrumentation-graphql@0.47.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-graphql/src/index.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+instrumentation-kafkajs@0.7.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-kafkajs/src/version.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+instrumentation-kafkajs@0.7.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-kafkajs/src/propagator.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+instrumentation-kafkajs@0.7.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-kafkajs/src/instrumentation.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+instrumentation-kafkajs@0.7.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-kafkajs/build/src/types.js", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+instrumentation-kafkajs@0.7.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-kafkajs/src/index.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+instrumentation-lru-memoizer@0.44.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-lru-memoizer/src/version.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+instrumentation-lru-memoizer@0.44.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-lru-memoizer/src/instrumentation.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+instrumentation-lru-memoizer@0.44.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-lru-memoizer/src/index.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+instrumentation-mongodb@0.52.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-mongodb/src/internal-types.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+instrumentation-mongodb@0.52.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-mongodb/src/version.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+instrumentation-mongodb@0.52.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-mongodb/src/instrumentation.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+instrumentation-mongodb@0.52.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-mongodb/src/types.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+instrumentation-mongodb@0.52.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-mongodb/src/index.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+instrumentation-mongoose@0.46.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-mongoose/src/utils.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+instrumentation-mongoose@0.46.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-mongoose/src/version.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+instrumentation-mongoose@0.46.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-mongoose/src/mongoose.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+instrumentation-mongoose@0.46.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-mongoose/build/src/types.js", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+instrumentation-mongoose@0.46.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-mongoose/src/index.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+instrumentation-mysql@0.45.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-mysql/src/AttributeNames.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+instrumentation-mysql@0.45.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-mysql/src/utils.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+instrumentation-mysql@0.45.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-mysql/src/version.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+instrumentation-mysql@0.45.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-mysql/src/instrumentation.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+instrumentation-mysql@0.45.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-mysql/src/index.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+sql-common@0.40.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sql-common/src/index.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+instrumentation-mysql2@0.45.2_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-mysql2/src/utils.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+instrumentation-mysql2@0.45.2_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-mysql2/src/version.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+instrumentation-mysql2@0.45.2_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-mysql2/src/instrumentation.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+instrumentation-mysql2@0.45.2_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-mysql2/src/index.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+instrumentation-ioredis@0.47.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-ioredis/src/utils.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+redis-common@0.36.2/node_modules/@opentelemetry/redis-common/src/index.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+instrumentation-ioredis@0.47.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-ioredis/src/version.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+instrumentation-ioredis@0.47.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-ioredis/src/instrumentation.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+instrumentation-ioredis@0.47.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-ioredis/src/index.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+instrumentation-redis-4@0.46.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-redis-4/src/utils.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+instrumentation-redis-4@0.46.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-redis-4/src/version.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+instrumentation-redis-4@0.46.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-redis-4/src/instrumentation.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+instrumentation-redis-4@0.46.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-redis-4/src/index.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+instrumentation-pg@0.51.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-pg/src/internal-types.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+instrumentation-pg@0.51.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-pg/src/enums/AttributeNames.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+instrumentation-pg@0.51.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-pg/src/semconv.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+instrumentation-pg@0.51.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-pg/src/enums/SpanNames.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+instrumentation-pg@0.51.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-pg/src/utils.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+instrumentation-pg@0.51.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-pg/src/version.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+instrumentation-pg@0.51.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-pg/src/instrumentation.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+instrumentation-pg@0.51.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-pg/src/index.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+instrumentation-hapi@0.45.2_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-hapi/src/version.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+instrumentation-hapi@0.45.2_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-hapi/src/internal-types.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+instrumentation-hapi@0.45.2_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-hapi/src/enums/AttributeNames.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+instrumentation-hapi@0.45.2_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-hapi/src/utils.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+instrumentation-hapi@0.45.2_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-hapi/src/instrumentation.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+instrumentation-hapi@0.45.2_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-hapi/src/index.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+instrumentation-koa@0.47.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-koa/src/types.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+instrumentation-koa@0.47.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-koa/src/version.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+instrumentation-koa@0.47.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-koa/src/enums/AttributeNames.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+instrumentation-koa@0.47.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-koa/src/utils.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+instrumentation-koa@0.47.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-koa/src/internal-types.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+instrumentation-koa@0.47.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-koa/src/instrumentation.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+instrumentation-koa@0.47.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-koa/src/index.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+instrumentation-connect@0.43.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-connect/src/enums/AttributeNames.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+instrumentation-connect@0.43.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-connect/src/version.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+instrumentation-connect@0.43.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-connect/src/internal-types.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+instrumentation-connect@0.43.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-connect/src/utils.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+instrumentation-connect@0.43.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-connect/src/instrumentation.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+instrumentation-connect@0.43.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-connect/src/index.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+instrumentation-tedious@0.18.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-tedious/src/utils.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+instrumentation-tedious@0.18.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-tedious/src/version.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+instrumentation-tedious@0.18.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-tedious/src/instrumentation.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+instrumentation-tedious@0.18.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-tedious/src/index.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+instrumentation-generic-pool@0.43.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-generic-pool/src/version.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+instrumentation-generic-pool@0.43.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-generic-pool/src/instrumentation.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+instrumentation-generic-pool@0.43.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-generic-pool/src/index.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+instrumentation-amqplib@0.46.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-amqplib/src/types.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+instrumentation-amqplib@0.46.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-amqplib/src/utils.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+instrumentation-amqplib@0.46.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-amqplib/src/version.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+instrumentation-amqplib@0.46.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-amqplib/src/amqplib.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+instrumentation-amqplib@0.46.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-amqplib/src/index.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+context-async-hooks@1.30.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/context-async-hooks/src/AbstractAsyncHooksContextManager.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+context-async-hooks@1.30.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/context-async-hooks/src/AsyncHooksContextManager.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+context-async-hooks@1.30.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/context-async-hooks/src/AsyncLocalStorageContextManager.ts", "../../../../../../../../../node_modules/.pnpm/@opentelemetry+context-async-hooks@1.30.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/context-async-hooks/src/index.ts", "../../../../../../../../../node_modules/.pnpm/dotenv@16.5.0/node_modules/dotenv/package.json", "../../../../../../../../../node_modules/.pnpm/dotenv@16.5.0/node_modules/dotenv/lib/main.js", "../../../../../../trigger.config.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+node@9.19.0/node_modules/@sentry/node/build/esm/index.js", "../../../../../../../../../node_modules/.pnpm/@sentry+core@9.19.0/node_modules/@sentry/core/build/esm/index.js", "../../../../../../../../../node_modules/.pnpm/@sentry+core@9.19.0/node_modules/@sentry/core/src/debug-build.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+core@9.19.0/node_modules/@sentry/core/src/utils-hoist/version.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+core@9.19.0/node_modules/@sentry/core/src/utils-hoist/worldwide.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+core@9.19.0/node_modules/@sentry/core/src/carrier.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+core@9.19.0/node_modules/@sentry/core/src/utils-hoist/is.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+core@9.19.0/node_modules/@sentry/core/src/utils-hoist/browser.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+core@9.19.0/node_modules/@sentry/core/src/utils-hoist/logger.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+core@9.19.0/node_modules/@sentry/core/src/utils-hoist/string.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+core@9.19.0/node_modules/@sentry/core/src/utils-hoist/object.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+core@9.19.0/node_modules/@sentry/core/src/utils-hoist/misc.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+core@9.19.0/node_modules/@sentry/core/src/utils-hoist/time.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+core@9.19.0/node_modules/@sentry/core/src/session.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+core@9.19.0/node_modules/@sentry/core/src/utils/merge.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+core@9.19.0/node_modules/@sentry/core/src/utils/spanOnScope.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+core@9.19.0/node_modules/@sentry/core/src/utils-hoist/propagationContext.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+core@9.19.0/node_modules/@sentry/core/src/scope.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+core@9.19.0/node_modules/@sentry/core/src/defaultScopes.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+core@9.19.0/node_modules/@sentry/core/src/asyncContext/stackStrategy.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+core@9.19.0/node_modules/@sentry/core/src/asyncContext/index.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+core@9.19.0/node_modules/@sentry/core/src/currentScopes.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+core@9.19.0/node_modules/@sentry/core/src/semanticAttributes.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+core@9.19.0/node_modules/@sentry/core/src/tracing/spanstatus.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+core@9.19.0/node_modules/@sentry/core/src/tracing/utils.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+core@9.19.0/node_modules/@sentry/core/src/utils/parseSampleRate.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+core@9.19.0/node_modules/@sentry/core/src/utils-hoist/baggage.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+core@9.19.0/node_modules/@sentry/core/src/utils-hoist/tracing.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+core@9.19.0/node_modules/@sentry/core/src/utils/spanUtils.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+core@9.19.0/node_modules/@sentry/core/src/utils-hoist/stacktrace.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+core@9.19.0/node_modules/@sentry/core/src/utils-hoist/instrument/handlers.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+core@9.19.0/node_modules/@sentry/core/src/utils-hoist/instrument/globalError.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+core@9.19.0/node_modules/@sentry/core/src/utils-hoist/instrument/globalUnhandledRejection.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+core@9.19.0/node_modules/@sentry/core/src/tracing/errors.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+core@9.19.0/node_modules/@sentry/core/src/utils/hasSpansEnabled.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+core@9.19.0/node_modules/@sentry/core/src/constants.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+core@9.19.0/node_modules/@sentry/core/src/tracing/dynamicSamplingContext.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+core@9.19.0/node_modules/@sentry/core/src/utils/handleCallbackErrors.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+core@9.19.0/node_modules/@sentry/core/src/tracing/logSpans.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+core@9.19.0/node_modules/@sentry/core/src/tracing/sampling.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+core@9.19.0/node_modules/@sentry/core/src/utils-hoist/dsn.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+core@9.19.0/node_modules/@sentry/core/src/utils-hoist/normalize.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+core@9.19.0/node_modules/@sentry/core/src/utils-hoist/envelope.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+core@9.19.0/node_modules/@sentry/core/src/envelope.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+core@9.19.0/node_modules/@sentry/core/src/tracing/measurement.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+core@9.19.0/node_modules/@sentry/core/src/tracing/trace.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+core@9.19.0/node_modules/@sentry/core/src/utils-hoist/syncpromise.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+core@9.19.0/node_modules/@sentry/core/src/eventProcessors.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+core@9.19.0/node_modules/@sentry/core/src/utils-hoist/debug-ids.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+core@9.19.0/node_modules/@sentry/core/src/utils/applyScopeDataToEvent.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+core@9.19.0/node_modules/@sentry/core/src/utils/prepareEvent.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+core@9.19.0/node_modules/@sentry/core/src/exports.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+core@9.19.0/node_modules/@sentry/core/src/api.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+core@9.19.0/node_modules/@sentry/core/src/integration.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+core@9.19.0/node_modules/@sentry/core/src/utils/eventUtils.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+core@9.19.0/node_modules/@sentry/core/src/utils/transactionEvent.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+core@9.19.0/node_modules/@sentry/core/src/utils-hoist/clientreport.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+core@9.19.0/node_modules/@sentry/core/src/client.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+core@9.19.0/node_modules/@sentry/core/src/checkin.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+core@9.19.0/node_modules/@sentry/core/src/logs/envelope.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+core@9.19.0/node_modules/@sentry/core/src/logs/exports.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+core@9.19.0/node_modules/@sentry/core/src/utils-hoist/eventbuilder.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+core@9.19.0/node_modules/@sentry/core/src/server-runtime-client.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+core@9.19.0/node_modules/@sentry/core/src/utils-hoist/promisebuffer.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+core@9.19.0/node_modules/@sentry/core/src/utils-hoist/ratelimit.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+core@9.19.0/node_modules/@sentry/core/src/transports/base.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+core@9.19.0/node_modules/@sentry/core/src/utils/sdkMetadata.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+core@9.19.0/node_modules/@sentry/core/src/utils/traceData.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+core@9.19.0/node_modules/@sentry/core/src/utils/request.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+core@9.19.0/node_modules/@sentry/core/src/breadcrumbs.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+core@9.19.0/node_modules/@sentry/core/src/integrations/functiontostring.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+core@9.19.0/node_modules/@sentry/core/src/integrations/eventFilters.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+core@9.19.0/node_modules/@sentry/core/src/utils-hoist/aggregate-errors.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+core@9.19.0/node_modules/@sentry/core/src/integrations/linkederrors.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+core@9.19.0/node_modules/@sentry/core/src/utils/cookie.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+core@9.19.0/node_modules/@sentry/core/src/vendor/getIpAddress.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+core@9.19.0/node_modules/@sentry/core/src/integrations/requestdata.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+core@9.19.0/node_modules/@sentry/core/src/utils-hoist/instrument/console.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+core@9.19.0/node_modules/@sentry/core/src/utils-hoist/severity.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+core@9.19.0/node_modules/@sentry/core/src/utils-hoist/path.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+core@9.19.0/node_modules/@sentry/core/src/integrations/console.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+core@9.19.0/node_modules/@sentry/core/src/utils-hoist/url.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+core@9.19.0/node_modules/@sentry/core/src/utils-hoist/breadcrumb-log-level.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+core@9.19.0/node_modules/@sentry/core/src/utils-hoist/node-stack-trace.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+core@9.19.0/node_modules/@sentry/core/src/utils-hoist/lru.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+node@9.19.0/node_modules/@sentry/node/src/otel/instrument.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+node@9.19.0/node_modules/@sentry/node/src/utils/addOriginToSpan.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+node@9.19.0/node_modules/@sentry/node/src/utils/getRequestUrl.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+opentelemetry@9.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hook_7162e68458d9d374b914c20c5b48f4e2/node_modules/@sentry/opentelemetry/src/semanticAttributes.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+opentelemetry@9.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hook_7162e68458d9d374b914c20c5b48f4e2/node_modules/@sentry/opentelemetry/src/utils/getParentSpanId.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+opentelemetry@9.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hook_7162e68458d9d374b914c20c5b48f4e2/node_modules/@sentry/opentelemetry/src/utils/spanTypes.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+opentelemetry@9.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hook_7162e68458d9d374b914c20c5b48f4e2/node_modules/@sentry/opentelemetry/src/utils/getRequestSpanData.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+opentelemetry@9.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hook_7162e68458d9d374b914c20c5b48f4e2/node_modules/@sentry/opentelemetry/src/custom/client.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+opentelemetry@9.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hook_7162e68458d9d374b914c20c5b48f4e2/node_modules/@sentry/opentelemetry/src/utils/getSpanKind.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+opentelemetry@9.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hook_7162e68458d9d374b914c20c5b48f4e2/node_modules/@sentry/opentelemetry/src/constants.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+opentelemetry@9.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hook_7162e68458d9d374b914c20c5b48f4e2/node_modules/@sentry/opentelemetry/src/utils/contextData.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+opentelemetry@9.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hook_7162e68458d9d374b914c20c5b48f4e2/node_modules/@sentry/opentelemetry/src/utils/isSentryRequest.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+opentelemetry@9.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hook_7162e68458d9d374b914c20c5b48f4e2/node_modules/@sentry/opentelemetry/src/utils/getSamplingDecision.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+opentelemetry@9.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hook_7162e68458d9d374b914c20c5b48f4e2/node_modules/@sentry/opentelemetry/src/utils/parseSpanDescription.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+opentelemetry@9.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hook_7162e68458d9d374b914c20c5b48f4e2/node_modules/@sentry/opentelemetry/src/utils/enhanceDscWithOpenTelemetryRootSpanName.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+opentelemetry@9.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hook_7162e68458d9d374b914c20c5b48f4e2/node_modules/@sentry/opentelemetry/src/utils/getActiveSpan.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+opentelemetry@9.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hook_7162e68458d9d374b914c20c5b48f4e2/node_modules/@sentry/opentelemetry/src/debug-build.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+opentelemetry@9.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hook_7162e68458d9d374b914c20c5b48f4e2/node_modules/@sentry/opentelemetry/src/utils/makeTraceState.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+opentelemetry@9.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hook_7162e68458d9d374b914c20c5b48f4e2/node_modules/@sentry/opentelemetry/src/utils/setupCheck.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+opentelemetry@9.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hook_7162e68458d9d374b914c20c5b48f4e2/node_modules/@sentry/opentelemetry/src/propagator.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+opentelemetry@9.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hook_7162e68458d9d374b914c20c5b48f4e2/node_modules/@sentry/opentelemetry/src/trace.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+opentelemetry@9.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hook_7162e68458d9d374b914c20c5b48f4e2/node_modules/@sentry/opentelemetry/src/utils/suppressTracing.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+opentelemetry@9.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hook_7162e68458d9d374b914c20c5b48f4e2/node_modules/@sentry/opentelemetry/src/setupEventContextTrace.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+opentelemetry@9.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hook_7162e68458d9d374b914c20c5b48f4e2/node_modules/@sentry/opentelemetry/src/utils/getTraceData.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+opentelemetry@9.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hook_7162e68458d9d374b914c20c5b48f4e2/node_modules/@sentry/opentelemetry/src/asyncContextStrategy.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+opentelemetry@9.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hook_7162e68458d9d374b914c20c5b48f4e2/node_modules/@sentry/opentelemetry/src/contextManager.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+opentelemetry@9.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hook_7162e68458d9d374b914c20c5b48f4e2/node_modules/@sentry/opentelemetry/src/utils/groupSpansWithParents.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+opentelemetry@9.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hook_7162e68458d9d374b914c20c5b48f4e2/node_modules/@sentry/opentelemetry/src/utils/mapStatus.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+opentelemetry@9.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hook_7162e68458d9d374b914c20c5b48f4e2/node_modules/@sentry/opentelemetry/src/spanExporter.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+opentelemetry@9.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hook_7162e68458d9d374b914c20c5b48f4e2/node_modules/@sentry/opentelemetry/src/spanProcessor.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+opentelemetry@9.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hook_7162e68458d9d374b914c20c5b48f4e2/node_modules/@sentry/opentelemetry/src/sampler.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+node@9.19.0/node_modules/@sentry/node/src/debug-build.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+node@9.19.0/node_modules/@sentry/node/src/utils/baggage.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+node@9.19.0/node_modules/@sentry/node/src/integrations/http/SentryHttpInstrumentation.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+node@9.19.0/node_modules/@sentry/node/src/integrations/http/index.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+node@9.19.0/node_modules/@sentry/node/src/nodeVersion.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+node@9.19.0/node_modules/@sentry/node/src/integrations/node-fetch/SentryNodeFetchInstrumentation.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+node@9.19.0/node_modules/@sentry/node/src/integrations/node-fetch/index.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+node@9.19.0/node_modules/@sentry/node/src/integrations/context.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+node@9.19.0/node_modules/@sentry/node/src/integrations/contextlines.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+node@9.19.0/node_modules/@sentry/node/src/utils/debug.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+node@9.19.0/node_modules/@sentry/node/src/integrations/local-variables/common.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+node@9.19.0/node_modules/@sentry/node/src/integrations/local-variables/local-variables-async.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+node@9.19.0/node_modules/@sentry/node/src/integrations/local-variables/local-variables-sync.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+node@9.19.0/node_modules/@sentry/node/src/integrations/local-variables/index.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+node@9.19.0/node_modules/@sentry/node/src/utils/commonjs.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+node@9.19.0/node_modules/@sentry/node/src/integrations/modules.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+node@9.19.0/node_modules/@sentry/node/src/utils/errorhandling.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+node@9.19.0/node_modules/@sentry/node/src/integrations/onuncaughtexception.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+node@9.19.0/node_modules/@sentry/node/src/integrations/onunhandledrejection.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+node@9.19.0/node_modules/@sentry/node/src/integrations/tracing/express-v5/enums/AttributeNames.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+node@9.19.0/node_modules/@sentry/node/src/integrations/tracing/express-v5/enums/ExpressLayerType.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+node@9.19.0/node_modules/@sentry/node/src/integrations/tracing/express-v5/internal-types.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+node@9.19.0/node_modules/@sentry/node/src/integrations/tracing/express-v5/utils.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+node@9.19.0/node_modules/@sentry/node/src/integrations/tracing/express-v5/instrumentation.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+node@9.19.0/node_modules/@sentry/node/src/integrations/tracing/express.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+node@9.19.0/node_modules/@sentry/node/src/integrations/tracing/fastify/v3/enums/AttributeNames.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+node@9.19.0/node_modules/@sentry/node/src/integrations/tracing/fastify/v3/constants.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+node@9.19.0/node_modules/@sentry/node/src/integrations/tracing/fastify/v3/utils.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+node@9.19.0/node_modules/@sentry/node/src/integrations/tracing/fastify/v3/instrumentation.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+node@9.19.0/node_modules/@sentry/node/src/integrations/tracing/fastify/index.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+node@9.19.0/node_modules/@sentry/node/src/integrations/tracing/graphql.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+node@9.19.0/node_modules/@sentry/node/src/integrations/tracing/kafka.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+node@9.19.0/node_modules/@sentry/node/src/integrations/tracing/lrumemoizer.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+node@9.19.0/node_modules/@sentry/node/src/integrations/tracing/mongo.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+node@9.19.0/node_modules/@sentry/node/src/integrations/tracing/mongoose.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+node@9.19.0/node_modules/@sentry/node/src/integrations/tracing/mysql.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+node@9.19.0/node_modules/@sentry/node/src/integrations/tracing/mysql2.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+node@9.19.0/node_modules/@sentry/node/src/utils/redisCache.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+node@9.19.0/node_modules/@sentry/node/src/integrations/tracing/redis.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+node@9.19.0/node_modules/@sentry/node/src/integrations/tracing/postgres.ts", "../../../../../../../../../node_modules/.pnpm/@prisma+instrumentation@6.7.0_@opentelemetry+api@1.9.0/node_modules/@prisma/instrumentation/dist/index.mjs", "../../../../../../../../../node_modules/.pnpm/@sentry+node@9.19.0/node_modules/@sentry/node/src/integrations/tracing/prisma.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+node@9.19.0/node_modules/@sentry/node/src/integrations/tracing/hapi/index.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+node@9.19.0/node_modules/@sentry/node/src/integrations/tracing/koa.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+node@9.19.0/node_modules/@sentry/node/src/integrations/tracing/connect.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+node@9.19.0/node_modules/@sentry/node/src/integrations/spotlight.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+node@9.19.0/node_modules/@sentry/node/src/integrations/tracing/tedious.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+node@9.19.0/node_modules/@sentry/node/src/integrations/tracing/genericPool.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+node@9.19.0/node_modules/@sentry/node/src/integrations/tracing/amqplib.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+node@9.19.0/node_modules/@sentry/node/src/integrations/tracing/vercelai/instrumentation.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+node@9.19.0/node_modules/@sentry/node/src/integrations/tracing/vercelai/index.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+node@9.19.0/node_modules/@sentry/node/src/integrations/childProcess.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+node@9.19.0/node_modules/@sentry/node/src/otel/contextManager.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+node@9.19.0/node_modules/@sentry/node/src/integrations/processSession.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+node@9.19.0/node_modules/@sentry/node/src/integrations/tracing/index.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+node@9.19.0/node_modules/@sentry/node/src/proxy/base.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+node@9.19.0/node_modules/@sentry/node/src/proxy/parse-proxy-response.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+node@9.19.0/node_modules/@sentry/node/src/proxy/index.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+node@9.19.0/node_modules/@sentry/node/src/transports/http.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+node@9.19.0/node_modules/@sentry/node/src/utils/envToBool.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+node@9.19.0/node_modules/@sentry/node/src/utils/module.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+node@9.19.0/node_modules/@sentry/node/src/sdk/api.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+node@9.19.0/node_modules/@sentry/node/src/sdk/client.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+node@9.19.0/node_modules/@sentry/node/src/sdk/initOtel.ts", "../../../../../../../../../node_modules/.pnpm/@sentry+node@9.19.0/node_modules/@sentry/node/src/sdk/index.ts", "../../../../../../../../../node_modules/.pnpm/glob@11.0.3/node_modules/glob/src/index.ts", "../../../../../../../../../node_modules/.pnpm/minimatch@10.0.3/node_modules/minimatch/src/index.ts", "../../../../../../../../../node_modules/.pnpm/@isaacs+brace-expansion@5.0.0/node_modules/@isaacs/brace-expansion/src/index.ts", "../../../../../../../../../node_modules/.pnpm/@isaacs+balanced-match@4.0.1/node_modules/@isaacs/balanced-match/src/index.ts", "../../../../../../../../../node_modules/.pnpm/minimatch@10.0.3/node_modules/minimatch/src/assert-valid-pattern.ts", "../../../../../../../../../node_modules/.pnpm/minimatch@10.0.3/node_modules/minimatch/src/ast.ts", "../../../../../../../../../node_modules/.pnpm/minimatch@10.0.3/node_modules/minimatch/src/brace-expressions.ts", "../../../../../../../../../node_modules/.pnpm/minimatch@10.0.3/node_modules/minimatch/src/unescape.ts", "../../../../../../../../../node_modules/.pnpm/minimatch@10.0.3/node_modules/minimatch/src/escape.ts", "../../../../../../../../../node_modules/.pnpm/glob@11.0.3/node_modules/glob/src/glob.ts", "../../../../../../../../../node_modules/.pnpm/path-scurry@2.0.0/node_modules/path-scurry/src/index.ts", "../../../../../../../../../node_modules/.pnpm/lru-cache@11.1.0/node_modules/lru-cache/src/index.ts", "../../../../../../../../../node_modules/.pnpm/minipass@7.1.2/node_modules/minipass/src/index.ts", "../../../../../../../../../node_modules/.pnpm/glob@11.0.3/node_modules/glob/src/pattern.ts", "../../../../../../../../../node_modules/.pnpm/glob@11.0.3/node_modules/glob/src/walker.ts", "../../../../../../../../../node_modules/.pnpm/glob@11.0.3/node_modules/glob/src/ignore.ts", "../../../../../../../../../node_modules/.pnpm/glob@11.0.3/node_modules/glob/src/processor.ts", "../../../../../../../../../node_modules/.pnpm/glob@11.0.3/node_modules/glob/src/has-magic.ts"],
  "sourcesContent": ["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// this is autogenerated file, see scripts/version-update.js\nexport const VERSION = '0.57.2';\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Context, TimeInput } from '@opentelemetry/api';\nimport { AnyValue, AnyValueMap } from './AnyValue';\n\nexport type LogBody = AnyValue;\nexport type LogAttributes = AnyValueMap;\n\nexport enum SeverityNumber {\n  UNSPECIFIED = 0,\n  TRACE = 1,\n  TRACE2 = 2,\n  TRACE3 = 3,\n  TRACE4 = 4,\n  DEBUG = 5,\n  DEBUG2 = 6,\n  DEBUG3 = 7,\n  DEBUG4 = 8,\n  INFO = 9,\n  INFO2 = 10,\n  INFO3 = 11,\n  INFO4 = 12,\n  WARN = 13,\n  WARN2 = 14,\n  WARN3 = 15,\n  WARN4 = 16,\n  ERROR = 17,\n  ERROR2 = 18,\n  ERROR3 = 19,\n  ERROR4 = 20,\n  FATAL = 21,\n  FATAL2 = 22,\n  FATAL3 = 23,\n  FATAL4 = 24,\n}\n\nexport interface LogRecord {\n  /**\n   * The time when the log record occurred as UNIX Epoch time in nanoseconds.\n   */\n  timestamp?: TimeInput;\n\n  /**\n   * Time when the event was observed by the collection system.\n   */\n  observedTimestamp?: TimeInput;\n\n  /**\n   * Numerical value of the severity.\n   */\n  severityNumber?: SeverityNumber;\n\n  /**\n   * The severity text.\n   */\n  severityText?: string;\n\n  /**\n   * A value containing the body of the log record.\n   */\n  body?: LogBody;\n\n  /**\n   * Attributes that define the log record.\n   */\n  attributes?: LogAttributes;\n\n  /**\n   * The Context associated with the LogRecord.\n   */\n  context?: Context;\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger } from './types/Logger';\nimport { LogRecord } from './types/LogRecord';\n\nexport class NoopLogger implements Logger {\n  emit(_logRecord: LogRecord): void {}\n}\n\nexport const NOOP_LOGGER = new NoopLogger();\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { LoggerProvider } from './types/LoggerProvider';\nimport { Logger } from './types/Logger';\nimport { LoggerOptions } from './types/LoggerOptions';\nimport { NoopLogger } from './NoopLogger';\n\nexport class NoopLoggerProvider implements LoggerProvider {\n  getLogger(\n    _name: string,\n    _version?: string | undefined,\n    _options?: LoggerOptions | undefined\n  ): Logger {\n    return new NoopLogger();\n  }\n}\n\nexport const NOOP_LOGGER_PROVIDER = new NoopLoggerProvider();\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NOOP_LOGGER } from './NoopLogger';\nimport { Logger } from './types/Logger';\nimport { LoggerOptions } from './types/LoggerOptions';\nimport { LogRecord } from './types/LogRecord';\n\nexport class ProxyLogger implements Logger {\n  // When a real implementation is provided, this will be it\n  private _delegate?: Logger;\n\n  constructor(\n    private _provider: LoggerDelegator,\n    public readonly name: string,\n    public readonly version?: string | undefined,\n    public readonly options?: LoggerOptions | undefined\n  ) {}\n\n  /**\n   * Emit a log record. This method should only be used by log appenders.\n   *\n   * @param logRecord\n   */\n  emit(logRecord: LogRecord): void {\n    this._getLogger().emit(logRecord);\n  }\n\n  /**\n   * Try to get a logger from the proxy logger provider.\n   * If the proxy logger provider has no delegate, return a noop logger.\n   */\n  private _getLogger() {\n    if (this._delegate) {\n      return this._delegate;\n    }\n    const logger = this._provider.getDelegateLogger(\n      this.name,\n      this.version,\n      this.options\n    );\n    if (!logger) {\n      return NOOP_LOGGER;\n    }\n    this._delegate = logger;\n    return this._delegate;\n  }\n}\n\nexport interface LoggerDelegator {\n  getDelegateLogger(\n    name: string,\n    version?: string,\n    options?: LoggerOptions\n  ): Logger | undefined;\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { LoggerProvider } from './types/LoggerProvider';\nimport { Logger } from './types/Logger';\nimport { LoggerOptions } from './types/LoggerOptions';\nimport { NOOP_LOGGER_PROVIDER } from './NoopLoggerProvider';\nimport { ProxyLogger } from './ProxyLogger';\n\nexport class ProxyLoggerProvider implements LoggerProvider {\n  private _delegate?: LoggerProvider;\n\n  getLogger(\n    name: string,\n    version?: string | undefined,\n    options?: LoggerOptions | undefined\n  ): Logger {\n    return (\n      this.getDelegateLogger(name, version, options) ??\n      new ProxyLogger(this, name, version, options)\n    );\n  }\n\n  getDelegate(): LoggerProvider {\n    return this._delegate ?? NOOP_LOGGER_PROVIDER;\n  }\n\n  /**\n   * Set the delegate logger provider\n   */\n  setDelegate(delegate: LoggerProvider) {\n    this._delegate = delegate;\n  }\n\n  getDelegateLogger(\n    name: string,\n    version?: string | undefined,\n    options?: LoggerOptions | undefined\n  ): Logger | undefined {\n    return this._delegate?.getLogger(name, version, options);\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** only globals that common to node and browsers are allowed */\n// eslint-disable-next-line node/no-unsupported-features/es-builtins\nexport const _globalThis = typeof globalThis === 'object' ? globalThis : global;\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport { _globalThis } from './globalThis';\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport { _globalThis } from './node';\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { LoggerProvider } from '../types/LoggerProvider';\nimport { _globalThis } from '../platform';\n\nexport const GLOBAL_LOGS_API_KEY = Symbol.for('io.opentelemetry.js.api.logs');\n\ntype Get<T> = (version: number) => T;\ntype OtelGlobal = Partial<{\n  [GLOBAL_LOGS_API_KEY]: Get<LoggerProvider>;\n}>;\n\nexport const _global = _globalThis as OtelGlobal;\n\n/**\n * Make a function which accepts a version integer and returns the instance of an API if the version\n * is compatible, or a fallback version (usually NOOP) if it is not.\n *\n * @param requiredVersion Backwards compatibility version which is required to return the instance\n * @param instance Instance which should be returned if the required version is compatible\n * @param fallback Fallback instance, usually NOOP, which will be returned if the required version is not compatible\n */\nexport function makeGetter<T>(\n  requiredVersion: number,\n  instance: T,\n  fallback: T\n): Get<T> {\n  return (version: number): T =>\n    version === requiredVersion ? instance : fallback;\n}\n\n/**\n * A number which should be incremented each time a backwards incompatible\n * change is made to the API. This number is used when an API package\n * attempts to access the global API to ensure it is getting a compatible\n * version. If the global API is not compatible with the API package\n * attempting to get it, a NOOP API implementation will be returned.\n */\nexport const API_BACKWARDS_COMPATIBILITY_VERSION = 1;\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  API_BACKWARDS_COMPATIBILITY_VERSION,\n  GLOBAL_LOGS_API_KEY,\n  _global,\n  makeGetter,\n} from '../internal/global-utils';\nimport { LoggerProvider } from '../types/LoggerProvider';\nimport { NOOP_LOGGER_PROVIDER } from '../NoopLoggerProvider';\nimport { Logger } from '../types/Logger';\nimport { LoggerOptions } from '../types/LoggerOptions';\nimport { ProxyLoggerProvider } from '../ProxyLoggerProvider';\n\nexport class LogsAPI {\n  private static _instance?: LogsAPI;\n\n  private _proxyLoggerProvider = new ProxyLoggerProvider();\n\n  private constructor() {}\n\n  public static getInstance(): LogsAPI {\n    if (!this._instance) {\n      this._instance = new LogsAPI();\n    }\n\n    return this._instance;\n  }\n\n  public setGlobalLoggerProvider(provider: LoggerProvider): LoggerProvider {\n    if (_global[GLOBAL_LOGS_API_KEY]) {\n      return this.getLoggerProvider();\n    }\n\n    _global[GLOBAL_LOGS_API_KEY] = makeGetter<LoggerProvider>(\n      API_BACKWARDS_COMPATIBILITY_VERSION,\n      provider,\n      NOOP_LOGGER_PROVIDER\n    );\n    this._proxyLoggerProvider.setDelegate(provider);\n\n    return provider;\n  }\n\n  /**\n   * Returns the global logger provider.\n   *\n   * @returns LoggerProvider\n   */\n  public getLoggerProvider(): LoggerProvider {\n    return (\n      _global[GLOBAL_LOGS_API_KEY]?.(API_BACKWARDS_COMPATIBILITY_VERSION) ??\n      this._proxyLoggerProvider\n    );\n  }\n\n  /**\n   * Returns a logger from the global logger provider.\n   *\n   * @returns Logger\n   */\n  public getLogger(\n    name: string,\n    version?: string,\n    options?: LoggerOptions\n  ): Logger {\n    return this.getLoggerProvider().getLogger(name, version, options);\n  }\n\n  /** Remove the global logger provider */\n  public disable(): void {\n    delete _global[GLOBAL_LOGS_API_KEY];\n    this._proxyLoggerProvider = new ProxyLoggerProvider();\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport { Logger } from './types/Logger';\nexport { LoggerProvider } from './types/LoggerProvider';\nexport {\n  LogAttributes,\n  LogBody,\n  LogRecord,\n  SeverityNumber,\n} from './types/LogRecord';\nexport { LoggerOptions } from './types/LoggerOptions';\nexport { AnyValue, AnyValueMap } from './types/AnyValue';\nexport { NOOP_LOGGER, NoopLogger } from './NoopLogger';\nexport { NOOP_LOGGER_PROVIDER, NoopLoggerProvider } from './NoopLoggerProvider';\nexport { ProxyLogger } from './ProxyLogger';\nexport { ProxyLoggerProvider } from './ProxyLoggerProvider';\n\nimport { LogsAPI } from './api/logs';\nexport const logs = LogsAPI.getInstance();\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { TracerProvider, MeterProvider } from '@opentelemetry/api';\nimport { Instrumentation } from './types';\nimport { LoggerProvider } from '@opentelemetry/api-logs';\n\n/**\n * Enable instrumentations\n * @param instrumentations\n * @param tracerProvider\n * @param meterProvider\n */\nexport function enableInstrumentations(\n  instrumentations: Instrumentation[],\n  tracerProvider?: TracerProvider,\n  meterProvider?: MeterProvider,\n  loggerProvider?: LoggerProvider\n): void {\n  for (let i = 0, j = instrumentations.length; i < j; i++) {\n    const instrumentation = instrumentations[i];\n    if (tracerProvider) {\n      instrumentation.setTracerProvider(tracerProvider);\n    }\n    if (meterProvider) {\n      instrumentation.setMeterProvider(meterProvider);\n    }\n    if (loggerProvider && instrumentation.setLoggerProvider) {\n      instrumentation.setLoggerProvider(loggerProvider);\n    }\n    // instrumentations have been already enabled during creation\n    // so enable only if user prevented that by setting enabled to false\n    // this is to prevent double enabling but when calling register all\n    // instrumentations should be now enabled\n    if (!instrumentation.getConfig().enabled) {\n      instrumentation.enable();\n    }\n  }\n}\n\n/**\n * Disable instrumentations\n * @param instrumentations\n */\nexport function disableInstrumentations(\n  instrumentations: Instrumentation[]\n): void {\n  instrumentations.forEach(instrumentation => instrumentation.disable());\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { trace, metrics } from '@opentelemetry/api';\nimport { logs } from '@opentelemetry/api-logs';\nimport {\n  disableInstrumentations,\n  enableInstrumentations,\n} from './autoLoaderUtils';\nimport { AutoLoaderOptions } from './types_internal';\n\n/**\n * It will register instrumentations and plugins\n * @param options\n * @return returns function to unload instrumentation and plugins that were\n *   registered\n */\nexport function registerInstrumentations(\n  options: AutoLoaderOptions\n): () => void {\n  const tracerProvider = options.tracerProvider || trace.getTracerProvider();\n  const meterProvider = options.meterProvider || metrics.getMeterProvider();\n  const loggerProvider = options.loggerProvider || logs.getLoggerProvider();\n  const instrumentations = options.instrumentations?.flat() ?? [];\n\n  enableInstrumentations(\n    instrumentations,\n    tracerProvider,\n    meterProvider,\n    loggerProvider\n  );\n\n  return () => {\n    disableInstrumentations(instrumentations);\n  };\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  diag,\n  DiagLogger,\n  metrics,\n  Meter,\n  MeterProvider,\n  trace,\n  Tracer,\n  TracerProvider,\n  Span,\n} from '@opentelemetry/api';\nimport { Logger, LoggerProvider, logs } from '@opentelemetry/api-logs';\nimport * as shimmer from 'shimmer';\nimport {\n  InstrumentationModuleDefinition,\n  Instrumentation,\n  InstrumentationConfig,\n  SpanCustomizationHook,\n} from './types';\n\n/**\n * Base abstract internal class for instrumenting node and web plugins\n */\nexport abstract class InstrumentationAbstract<\n  ConfigType extends InstrumentationConfig = InstrumentationConfig,\n> implements Instrumentation<ConfigType>\n{\n  protected _config: ConfigType = {} as ConfigType;\n\n  private _tracer: Tracer;\n  private _meter: Meter;\n  private _logger: Logger;\n  protected _diag: DiagLogger;\n\n  constructor(\n    public readonly instrumentationName: string,\n    public readonly instrumentationVersion: string,\n    config: ConfigType\n  ) {\n    this.setConfig(config);\n\n    this._diag = diag.createComponentLogger({\n      namespace: instrumentationName,\n    });\n\n    this._tracer = trace.getTracer(instrumentationName, instrumentationVersion);\n    this._meter = metrics.getMeter(instrumentationName, instrumentationVersion);\n    this._logger = logs.getLogger(instrumentationName, instrumentationVersion);\n    this._updateMetricInstruments();\n  }\n\n  /* Api to wrap instrumented method */\n  protected _wrap = shimmer.wrap;\n  /* Api to unwrap instrumented methods */\n  protected _unwrap = shimmer.unwrap;\n  /* Api to mass wrap instrumented method */\n  protected _massWrap = shimmer.massWrap;\n  /* Api to mass unwrap instrumented methods */\n  protected _massUnwrap = shimmer.massUnwrap;\n\n  /* Returns meter */\n  protected get meter(): Meter {\n    return this._meter;\n  }\n\n  /**\n   * Sets MeterProvider to this plugin\n   * @param meterProvider\n   */\n  public setMeterProvider(meterProvider: MeterProvider): void {\n    this._meter = meterProvider.getMeter(\n      this.instrumentationName,\n      this.instrumentationVersion\n    );\n\n    this._updateMetricInstruments();\n  }\n\n  /* Returns logger */\n  protected get logger(): Logger {\n    return this._logger;\n  }\n\n  /**\n   * Sets LoggerProvider to this plugin\n   * @param loggerProvider\n   */\n  public setLoggerProvider(loggerProvider: LoggerProvider): void {\n    this._logger = loggerProvider.getLogger(\n      this.instrumentationName,\n      this.instrumentationVersion\n    );\n  }\n\n  /**\n   * @experimental\n   *\n   * Get module definitions defined by {@link init}.\n   * This can be used for experimental compile-time instrumentation.\n   *\n   * @returns an array of {@link InstrumentationModuleDefinition}\n   */\n  public getModuleDefinitions(): InstrumentationModuleDefinition[] {\n    const initResult = this.init() ?? [];\n    if (!Array.isArray(initResult)) {\n      return [initResult];\n    }\n\n    return initResult;\n  }\n\n  /**\n   * Sets the new metric instruments with the current Meter.\n   */\n  protected _updateMetricInstruments(): void {\n    return;\n  }\n\n  /* Returns InstrumentationConfig */\n  public getConfig(): ConfigType {\n    return this._config;\n  }\n\n  /**\n   * Sets InstrumentationConfig to this plugin\n   * @param config\n   */\n  public setConfig(config: ConfigType): void {\n    // copy config first level properties to ensure they are immutable.\n    // nested properties are not copied, thus are mutable from the outside.\n    this._config = {\n      enabled: true,\n      ...config,\n    };\n  }\n\n  /**\n   * Sets TraceProvider to this plugin\n   * @param tracerProvider\n   */\n  public setTracerProvider(tracerProvider: TracerProvider): void {\n    this._tracer = tracerProvider.getTracer(\n      this.instrumentationName,\n      this.instrumentationVersion\n    );\n  }\n\n  /* Returns tracer */\n  protected get tracer(): Tracer {\n    return this._tracer;\n  }\n\n  /* Enable plugin */\n  public abstract enable(): void;\n\n  /* Disable plugin */\n  public abstract disable(): void;\n\n  /**\n   * Init method in which plugin should define _modules and patches for\n   * methods.\n   */\n  protected abstract init():\n    | InstrumentationModuleDefinition\n    | InstrumentationModuleDefinition[]\n    | void;\n\n  /**\n   * Execute span customization hook, if configured, and log any errors.\n   * Any semantics of the trigger and info are defined by the specific instrumentation.\n   * @param hookHandler The optional hook handler which the user has configured via instrumentation config\n   * @param triggerName The name of the trigger for executing the hook for logging purposes\n   * @param span The span to which the hook should be applied\n   * @param info The info object to be passed to the hook, with useful data the hook may use\n   */\n  protected _runSpanCustomizationHook<SpanCustomizationInfoType>(\n    hookHandler: SpanCustomizationHook<SpanCustomizationInfoType> | undefined,\n    triggerName: string,\n    span: Span,\n    info: SpanCustomizationInfoType\n  ) {\n    if (!hookHandler) {\n      return;\n    }\n\n    try {\n      hookHandler(span, info);\n    } catch (e) {\n      this._diag.error(\n        `Error running span customization hook due to exception in handler`,\n        { triggerName },\n        e\n      );\n    }\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { Hooked } from './RequireInTheMiddleSingleton';\n\nexport const ModuleNameSeparator = '/';\n\n/**\n * Node in a `ModuleNameTrie`\n */\nclass ModuleNameTrieNode {\n  hooks: Array<{ hook: Hooked; insertedId: number }> = [];\n  children: Map<string, ModuleNameTrieNode> = new Map();\n}\n\ntype ModuleNameTrieSearchOptions = {\n  /**\n   * Whether to return the results in insertion order\n   */\n  maintainInsertionOrder?: boolean;\n  /**\n   * Whether to return only full matches\n   */\n  fullOnly?: boolean;\n};\n\n/**\n * Trie containing nodes that represent a part of a module name (i.e. the parts separated by forward slash)\n */\nexport class ModuleNameTrie {\n  private _trie: ModuleNameTrieNode = new ModuleNameTrieNode();\n  private _counter: number = 0;\n\n  /**\n   * Insert a module hook into the trie\n   *\n   * @param {Hooked} hook Hook\n   */\n  insert(hook: Hooked) {\n    let trieNode = this._trie;\n\n    for (const moduleNamePart of hook.moduleName.split(ModuleNameSeparator)) {\n      let nextNode = trieNode.children.get(moduleNamePart);\n      if (!nextNode) {\n        nextNode = new ModuleNameTrieNode();\n        trieNode.children.set(moduleNamePart, nextNode);\n      }\n      trieNode = nextNode;\n    }\n    trieNode.hooks.push({ hook, insertedId: this._counter++ });\n  }\n\n  /**\n   * Search for matching hooks in the trie\n   *\n   * @param {string} moduleName Module name\n   * @param {boolean} maintainInsertionOrder Whether to return the results in insertion order\n   * @param {boolean} fullOnly Whether to return only full matches\n   * @returns {Hooked[]} Matching hooks\n   */\n  search(\n    moduleName: string,\n    { maintainInsertionOrder, fullOnly }: ModuleNameTrieSearchOptions = {}\n  ): Hooked[] {\n    let trieNode = this._trie;\n    const results: ModuleNameTrieNode['hooks'] = [];\n    let foundFull = true;\n\n    for (const moduleNamePart of moduleName.split(ModuleNameSeparator)) {\n      const nextNode = trieNode.children.get(moduleNamePart);\n      if (!nextNode) {\n        foundFull = false;\n        break;\n      }\n      if (!fullOnly) {\n        results.push(...nextNode.hooks);\n      }\n      trieNode = nextNode;\n    }\n\n    if (fullOnly && foundFull) {\n      results.push(...trieNode.hooks);\n    }\n\n    if (results.length === 0) {\n      return [];\n    }\n    if (results.length === 1) {\n      return [results[0].hook];\n    }\n    if (maintainInsertionOrder) {\n      results.sort((a, b) => a.insertedId - b.insertedId);\n    }\n    return results.map(({ hook }) => hook);\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { OnRequireFn } from 'require-in-the-middle';\nimport { Hook } from 'require-in-the-middle';\nimport * as path from 'path';\nimport { ModuleNameTrie, ModuleNameSeparator } from './ModuleNameTrie';\n\nexport type Hooked = {\n  moduleName: string;\n  onRequire: OnRequireFn;\n};\n\n/**\n * Whether Mocha is running in this process\n * Inspired by https://github.com/AndreasPizsa/detect-mocha\n *\n * @type {boolean}\n */\nconst isMocha = [\n  'afterEach',\n  'after',\n  'beforeEach',\n  'before',\n  'describe',\n  'it',\n].every(fn => {\n  // @ts-expect-error TS7053: Element implicitly has an 'any' type\n  return typeof global[fn] === 'function';\n});\n\n/**\n * Singleton class for `require-in-the-middle`\n * Allows instrumentation plugins to patch modules with only a single `require` patch\n * WARNING: Because this class will create its own `require-in-the-middle` (RITM) instance,\n * we should minimize the number of new instances of this class.\n * Multiple instances of `@opentelemetry/instrumentation` (e.g. multiple versions) in a single process\n * will result in multiple instances of RITM, which will have an impact\n * on the performance of instrumentation hooks being applied.\n */\nexport class RequireInTheMiddleSingleton {\n  private _moduleNameTrie: ModuleNameTrie = new ModuleNameTrie();\n  private static _instance?: RequireInTheMiddleSingleton;\n\n  private constructor() {\n    this._initialize();\n  }\n\n  private _initialize() {\n    new Hook(\n      // Intercept all `require` calls; we will filter the matching ones below\n      null,\n      { internals: true },\n      (exports, name, basedir) => {\n        // For internal files on Windows, `name` will use backslash as the path separator\n        const normalizedModuleName = normalizePathSeparators(name);\n\n        const matches = this._moduleNameTrie.search(normalizedModuleName, {\n          maintainInsertionOrder: true,\n          // For core modules (e.g. `fs`), do not match on sub-paths (e.g. `fs/promises').\n          // This matches the behavior of `require-in-the-middle`.\n          // `basedir` is always `undefined` for core modules.\n          fullOnly: basedir === undefined,\n        });\n\n        for (const { onRequire } of matches) {\n          exports = onRequire(exports, name, basedir);\n        }\n\n        return exports;\n      }\n    );\n  }\n\n  /**\n   * Register a hook with `require-in-the-middle`\n   *\n   * @param {string} moduleName Module name\n   * @param {OnRequireFn} onRequire Hook function\n   * @returns {Hooked} Registered hook\n   */\n  register(moduleName: string, onRequire: OnRequireFn): Hooked {\n    const hooked = { moduleName, onRequire };\n    this._moduleNameTrie.insert(hooked);\n    return hooked;\n  }\n\n  /**\n   * Get the `RequireInTheMiddleSingleton` singleton\n   *\n   * @returns {RequireInTheMiddleSingleton} Singleton of `RequireInTheMiddleSingleton`\n   */\n  static getInstance(): RequireInTheMiddleSingleton {\n    // Mocha runs all test suites in the same process\n    // This prevents test suites from sharing a singleton\n    if (isMocha) return new RequireInTheMiddleSingleton();\n\n    return (this._instance =\n      this._instance ?? new RequireInTheMiddleSingleton());\n  }\n}\n\n/**\n * Normalize the path separators to forward slash in a module name or path\n *\n * @param {string} moduleNameOrPath Module name or path\n * @returns {string} Normalized module name or path\n */\nfunction normalizePathSeparators(moduleNameOrPath: string): string {\n  return path.sep !== ModuleNameSeparator\n    ? moduleNameOrPath.split(path.sep).join(ModuleNameSeparator)\n    : moduleNameOrPath;\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ShimWrapped } from './types';\n\n/**\n * function to execute patched function and being able to catch errors\n * @param execute - function to be executed\n * @param onFinish - callback to run when execute finishes\n */\nexport function safeExecuteInTheMiddle<T>(\n  execute: () => T,\n  onFinish: (e: Error | undefined, result: T | undefined) => void,\n  preventThrowingError?: boolean\n): T {\n  let error: Error | undefined;\n  let result: T | undefined;\n  try {\n    result = execute();\n  } catch (e) {\n    error = e;\n  } finally {\n    onFinish(error, result);\n    if (error && !preventThrowingError) {\n      // eslint-disable-next-line no-unsafe-finally\n      throw error;\n    }\n    // eslint-disable-next-line no-unsafe-finally\n    return result as T;\n  }\n}\n\n/**\n * Async function to execute patched function and being able to catch errors\n * @param execute - function to be executed\n * @param onFinish - callback to run when execute finishes\n */\nexport async function safeExecuteInTheMiddleAsync<T>(\n  execute: () => T,\n  onFinish: (e: Error | undefined, result: T | undefined) => void,\n  preventThrowingError?: boolean\n): Promise<T> {\n  let error: Error | undefined;\n  let result: T | undefined;\n  try {\n    result = await execute();\n  } catch (e) {\n    error = e;\n  } finally {\n    onFinish(error, result);\n    if (error && !preventThrowingError) {\n      // eslint-disable-next-line no-unsafe-finally\n      throw error;\n    }\n    // eslint-disable-next-line no-unsafe-finally\n    return result as T;\n  }\n}\n/**\n * Checks if certain function has been already wrapped\n * @param func\n */\nexport function isWrapped(func: unknown): func is ShimWrapped {\n  return (\n    typeof func === 'function' &&\n    typeof (func as ShimWrapped).__original === 'function' &&\n    typeof (func as ShimWrapped).__unwrap === 'function' &&\n    (func as ShimWrapped).__wrapped === true\n  );\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as types from '../../types';\nimport * as path from 'path';\nimport { types as utilTypes } from 'util';\nimport { satisfies } from 'semver';\nimport { wrap, unwrap, massWrap, massUnwrap } from 'shimmer';\nimport { InstrumentationAbstract } from '../../instrumentation';\nimport {\n  RequireInTheMiddleSingleton,\n  Hooked,\n} from './RequireInTheMiddleSingleton';\nimport type { HookFn } from 'import-in-the-middle';\nimport { Hook as HookImport } from 'import-in-the-middle';\nimport {\n  InstrumentationConfig,\n  InstrumentationModuleDefinition,\n} from '../../types';\nimport { diag } from '@opentelemetry/api';\nimport type { OnRequireFn } from 'require-in-the-middle';\nimport { Hook as HookRequire } from 'require-in-the-middle';\nimport { readFileSync } from 'fs';\nimport { isWrapped } from '../../utils';\n\n/**\n * Base abstract class for instrumenting node plugins\n */\nexport abstract class InstrumentationBase<\n    ConfigType extends InstrumentationConfig = InstrumentationConfig,\n  >\n  extends InstrumentationAbstract<ConfigType>\n  implements types.Instrumentation<ConfigType>\n{\n  private _modules: InstrumentationModuleDefinition[];\n  private _hooks: (Hooked | HookRequire)[] = [];\n  private _requireInTheMiddleSingleton: RequireInTheMiddleSingleton =\n    RequireInTheMiddleSingleton.getInstance();\n  private _enabled = false;\n\n  constructor(\n    instrumentationName: string,\n    instrumentationVersion: string,\n    config: ConfigType\n  ) {\n    super(instrumentationName, instrumentationVersion, config);\n\n    let modules = this.init();\n\n    if (modules && !Array.isArray(modules)) {\n      modules = [modules];\n    }\n\n    this._modules = (modules as InstrumentationModuleDefinition[]) || [];\n\n    if (this._config.enabled) {\n      this.enable();\n    }\n  }\n\n  protected override _wrap: typeof wrap = (moduleExports, name, wrapper) => {\n    if (isWrapped(moduleExports[name])) {\n      this._unwrap(moduleExports, name);\n    }\n    if (!utilTypes.isProxy(moduleExports)) {\n      return wrap(moduleExports, name, wrapper);\n    } else {\n      const wrapped = wrap(Object.assign({}, moduleExports), name, wrapper);\n      Object.defineProperty(moduleExports, name, {\n        value: wrapped,\n      });\n      return wrapped;\n    }\n  };\n\n  protected override _unwrap: typeof unwrap = (moduleExports, name) => {\n    if (!utilTypes.isProxy(moduleExports)) {\n      return unwrap(moduleExports, name);\n    } else {\n      return Object.defineProperty(moduleExports, name, {\n        value: moduleExports[name],\n      });\n    }\n  };\n\n  protected override _massWrap: typeof massWrap = (\n    moduleExportsArray,\n    names,\n    wrapper\n  ) => {\n    if (!moduleExportsArray) {\n      diag.error('must provide one or more modules to patch');\n      return;\n    } else if (!Array.isArray(moduleExportsArray)) {\n      moduleExportsArray = [moduleExportsArray];\n    }\n\n    if (!(names && Array.isArray(names))) {\n      diag.error('must provide one or more functions to wrap on modules');\n      return;\n    }\n\n    moduleExportsArray.forEach(moduleExports => {\n      names.forEach(name => {\n        this._wrap(moduleExports, name, wrapper);\n      });\n    });\n  };\n\n  protected override _massUnwrap: typeof massUnwrap = (\n    moduleExportsArray,\n    names\n  ) => {\n    if (!moduleExportsArray) {\n      diag.error('must provide one or more modules to patch');\n      return;\n    } else if (!Array.isArray(moduleExportsArray)) {\n      moduleExportsArray = [moduleExportsArray];\n    }\n\n    if (!(names && Array.isArray(names))) {\n      diag.error('must provide one or more functions to wrap on modules');\n      return;\n    }\n\n    moduleExportsArray.forEach(moduleExports => {\n      names.forEach(name => {\n        this._unwrap(moduleExports, name);\n      });\n    });\n  };\n\n  private _warnOnPreloadedModules(): void {\n    this._modules.forEach((module: InstrumentationModuleDefinition) => {\n      const { name } = module;\n      try {\n        const resolvedModule = require.resolve(name);\n        if (require.cache[resolvedModule]) {\n          // Module is already cached, which means the instrumentation hook might not work\n          this._diag.warn(\n            `Module ${name} has been loaded before ${this.instrumentationName} so it might not work, please initialize it before requiring ${name}`\n          );\n        }\n      } catch {\n        // Module isn't available, we can simply skip\n      }\n    });\n  }\n\n  private _extractPackageVersion(baseDir: string): string | undefined {\n    try {\n      const json = readFileSync(path.join(baseDir, 'package.json'), {\n        encoding: 'utf8',\n      });\n      const version = JSON.parse(json).version;\n      return typeof version === 'string' ? version : undefined;\n    } catch (error) {\n      diag.warn('Failed extracting version', baseDir);\n    }\n\n    return undefined;\n  }\n\n  private _onRequire<T>(\n    module: InstrumentationModuleDefinition,\n    exports: T,\n    name: string,\n    baseDir?: string | void\n  ): T {\n    if (!baseDir) {\n      if (typeof module.patch === 'function') {\n        module.moduleExports = exports;\n        if (this._enabled) {\n          this._diag.debug(\n            'Applying instrumentation patch for nodejs core module on require hook',\n            {\n              module: module.name,\n            }\n          );\n          return module.patch(exports);\n        }\n      }\n      return exports;\n    }\n\n    const version = this._extractPackageVersion(baseDir);\n    module.moduleVersion = version;\n    if (module.name === name) {\n      // main module\n      if (\n        isSupported(module.supportedVersions, version, module.includePrerelease)\n      ) {\n        if (typeof module.patch === 'function') {\n          module.moduleExports = exports;\n          if (this._enabled) {\n            this._diag.debug(\n              'Applying instrumentation patch for module on require hook',\n              {\n                module: module.name,\n                version: module.moduleVersion,\n                baseDir,\n              }\n            );\n            return module.patch(exports, module.moduleVersion);\n          }\n        }\n      }\n      return exports;\n    }\n    // internal file\n    const files = module.files ?? [];\n    const normalizedName = path.normalize(name);\n    const supportedFileInstrumentations = files\n      .filter(f => f.name === normalizedName)\n      .filter(f =>\n        isSupported(f.supportedVersions, version, module.includePrerelease)\n      );\n    return supportedFileInstrumentations.reduce<T>((patchedExports, file) => {\n      file.moduleExports = patchedExports;\n      if (this._enabled) {\n        this._diag.debug(\n          'Applying instrumentation patch for nodejs module file on require hook',\n          {\n            module: module.name,\n            version: module.moduleVersion,\n            fileName: file.name,\n            baseDir,\n          }\n        );\n\n        // patch signature is not typed, so we cast it assuming it's correct\n        return file.patch(patchedExports, module.moduleVersion) as T;\n      }\n      return patchedExports;\n    }, exports);\n  }\n\n  public enable(): void {\n    if (this._enabled) {\n      return;\n    }\n    this._enabled = true;\n\n    // already hooked, just call patch again\n    if (this._hooks.length > 0) {\n      for (const module of this._modules) {\n        if (typeof module.patch === 'function' && module.moduleExports) {\n          this._diag.debug(\n            'Applying instrumentation patch for nodejs module on instrumentation enabled',\n            {\n              module: module.name,\n              version: module.moduleVersion,\n            }\n          );\n          module.patch(module.moduleExports, module.moduleVersion);\n        }\n        for (const file of module.files) {\n          if (file.moduleExports) {\n            this._diag.debug(\n              'Applying instrumentation patch for nodejs module file on instrumentation enabled',\n              {\n                module: module.name,\n                version: module.moduleVersion,\n                fileName: file.name,\n              }\n            );\n            file.patch(file.moduleExports, module.moduleVersion);\n          }\n        }\n      }\n      return;\n    }\n\n    this._warnOnPreloadedModules();\n    for (const module of this._modules) {\n      const hookFn: HookFn = (exports, name, baseDir) => {\n        if (!baseDir && path.isAbsolute(name)) {\n          const parsedPath = path.parse(name);\n          name = parsedPath.name;\n          baseDir = parsedPath.dir;\n        }\n        return this._onRequire<typeof exports>(module, exports, name, baseDir);\n      };\n      const onRequire: OnRequireFn = (exports, name, baseDir) => {\n        return this._onRequire<typeof exports>(module, exports, name, baseDir);\n      };\n\n      // `RequireInTheMiddleSingleton` does not support absolute paths.\n      // For an absolute paths, we must create a separate instance of the\n      // require-in-the-middle `Hook`.\n      const hook = path.isAbsolute(module.name)\n        ? new HookRequire([module.name], { internals: true }, onRequire)\n        : this._requireInTheMiddleSingleton.register(module.name, onRequire);\n\n      this._hooks.push(hook);\n      const esmHook = new HookImport(\n        [module.name],\n        { internals: false },\n        <HookFn>hookFn\n      );\n      this._hooks.push(esmHook);\n    }\n  }\n\n  public disable(): void {\n    if (!this._enabled) {\n      return;\n    }\n    this._enabled = false;\n\n    for (const module of this._modules) {\n      if (typeof module.unpatch === 'function' && module.moduleExports) {\n        this._diag.debug(\n          'Removing instrumentation patch for nodejs module on instrumentation disabled',\n          {\n            module: module.name,\n            version: module.moduleVersion,\n          }\n        );\n        module.unpatch(module.moduleExports, module.moduleVersion);\n      }\n      for (const file of module.files) {\n        if (file.moduleExports) {\n          this._diag.debug(\n            'Removing instrumentation patch for nodejs module file on instrumentation disabled',\n            {\n              module: module.name,\n              version: module.moduleVersion,\n              fileName: file.name,\n            }\n          );\n          file.unpatch(file.moduleExports, module.moduleVersion);\n        }\n      }\n    }\n  }\n\n  public isEnabled(): boolean {\n    return this._enabled;\n  }\n}\n\nfunction isSupported(\n  supportedVersions: string[],\n  version?: string,\n  includePrerelease?: boolean\n): boolean {\n  if (typeof version === 'undefined') {\n    // If we don't have the version, accept the wildcard case only\n    return supportedVersions.includes('*');\n  }\n\n  return supportedVersions.some(supportedVersion => {\n    return satisfies(version, supportedVersion, { includePrerelease });\n  });\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport { normalize } from 'path';\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport { InstrumentationBase } from './instrumentation';\nexport { normalize } from './normalize';\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport { InstrumentationBase, normalize } from './node';\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  InstrumentationModuleDefinition,\n  InstrumentationModuleFile,\n} from './types';\n\nexport class InstrumentationNodeModuleDefinition\n  implements InstrumentationModuleDefinition\n{\n  files: InstrumentationModuleFile[];\n  constructor(\n    public name: string,\n    public supportedVersions: string[],\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    public patch?: (exports: any, moduleVersion?: string) => any,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    public unpatch?: (exports: any, moduleVersion?: string) => void,\n    files?: InstrumentationModuleFile[]\n  ) {\n    this.files = files || [];\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { InstrumentationModuleFile } from './types';\nimport { normalize } from './platform/index';\n\nexport class InstrumentationNodeModuleFile\n  implements InstrumentationModuleFile\n{\n  public name: string;\n  constructor(\n    name: string,\n    public supportedVersions: string[],\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    public patch: (moduleExports: any, moduleVersion?: string) => any,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    public unpatch: (moduleExports?: any, moduleVersion?: string) => void\n  ) {\n    this.name = normalize(name);\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport { registerInstrumentations } from './autoLoader';\nexport { InstrumentationBase } from './platform/index';\nexport { InstrumentationNodeModuleDefinition } from './instrumentationNodeModuleDefinition';\nexport { InstrumentationNodeModuleFile } from './instrumentationNodeModuleFile';\nexport {\n  Instrumentation,\n  InstrumentationConfig,\n  InstrumentationModuleDefinition,\n  InstrumentationModuleFile,\n  ShimWrapped,\n  SpanCustomizationHook,\n} from './types';\nexport { AutoLoaderOptions, AutoLoaderResult } from './types_internal';\nexport {\n  isWrapped,\n  safeExecuteInTheMiddle,\n  safeExecuteInTheMiddleAsync,\n} from './utils';\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/trace/semantic_conventions/http.md\n */\nexport enum AttributeNames {\n  HTTP_ERROR_NAME = 'http.error_name',\n  HTTP_ERROR_MESSAGE = 'http.error_message',\n  HTTP_STATUS_TEXT = 'http.status_text',\n}\n", "'use strict';\n\nvar util = require('util');\n\n/**\n * An error thrown by the parser on unexpected input.\n *\n * @constructor\n * @param {string} message The error message.\n * @param {string} input The unexpected input.\n * @public\n */\nfunction ParseError(message, input) {\n  Error.captureStackTrace(this, ParseError);\n\n  this.name = this.constructor.name;\n  this.message = message;\n  this.input = input;\n}\n\nutil.inherits(ParseError, Error);\n\nmodule.exports = ParseError;\n", "'use strict';\n\n/**\n * Check if a character is a delimiter as defined in section 3.2.6 of RFC 7230.\n *\n *\n * @param {number} code The code of the character to check.\n * @returns {boolean} `true` if the character is a delimiter, else `false`.\n * @public\n */\nfunction isDelimiter(code) {\n  return code === 0x22                // '\"'\n    || code === 0x28                  // '('\n    || code === 0x29                  // ')'\n    || code === 0x2C                  // ','\n    || code === 0x2F                  // '/'\n    || code >= 0x3A && code <= 0x40   // ':', ';', '<', '=', '>', '?' '@'\n    || code >= 0x5B && code <= 0x5D   // '[', '\\', ']'\n    || code === 0x7B                  // '{'\n    || code === 0x7D;                 // '}'\n}\n\n/**\n * Check if a character is allowed in a token as defined in section 3.2.6\n * of RFC 7230.\n *\n * @param {number} code The code of the character to check.\n * @returns {boolean} `true` if the character is allowed, else `false`.\n * @public\n */\nfunction isTokenChar(code) {\n  return code === 0x21                // '!'\n    || code >= 0x23 && code <= 0x27   // '#', '$', '%', '&', '''\n    || code === 0x2A                  // '*'\n    || code === 0x2B                  // '+'\n    || code === 0x2D                  // '-'\n    || code === 0x2E                  // '.'\n    || code >= 0x30 && code <= 0x39   // 0-9\n    || code >= 0x41 && code <= 0x5A   // A-Z\n    || code >= 0x5E && code <= 0x7A   // '^', '_', '`', a-z\n    || code === 0x7C                  // '|'\n    || code === 0x7E;                 // '~'\n}\n\n/**\n * Check if a character is a printable ASCII character.\n *\n * @param {number} code The code of the character to check.\n * @returns {boolean} `true` if `code` is in the %x20-7E range, else `false`.\n * @public\n */\nfunction isPrint(code) {\n  return code >= 0x20 && code <= 0x7E;\n}\n\n/**\n * Check if a character is an extended ASCII character.\n *\n * @param {number} code The code of the character to check.\n * @returns {boolean} `true` if `code` is in the %x80-FF range, else `false`.\n * @public\n */\nfunction isExtended(code) {\n  return code >= 0x80 && code <= 0xFF;\n}\n\nmodule.exports = {\n  isDelimiter: isDelimiter,\n  isTokenChar: isTokenChar,\n  isExtended: isExtended,\n  isPrint: isPrint\n};\n", "'use strict';\n\nvar util = require('util');\n\nvar ParseError = require('./lib/error');\nvar ascii = require('./lib/ascii');\n\nvar isDelimiter = ascii.isDelimiter;\nvar isTokenChar = ascii.isTokenChar;\nvar isExtended = ascii.isExtended;\nvar isPrint = ascii.isPrint;\n\n/**\n * Unescape a string.\n *\n * @param {string} str The string to unescape.\n * @returns {string} A new unescaped string.\n * @private\n */\nfunction decode(str) {\n  return str.replace(/\\\\(.)/g, '$1');\n}\n\n/**\n * Build an error message when an unexpected character is found.\n *\n * @param {string} header The header field value.\n * @param {number} position The position of the unexpected character.\n * @returns {string} The error message.\n * @private\n */\nfunction unexpectedCharacterMessage(header, position) {\n  return util.format(\n    \"Unexpected character '%s' at index %d\",\n    header.charAt(position),\n    position\n  );\n}\n\n/**\n * Parse the `Forwarded` header field value into an array of objects.\n *\n * @param {string} header The header field value.\n * @returns {Object[]}\n * @public\n */\nfunction parse(header) {\n  var mustUnescape = false;\n  var isEscaping = false;\n  var inQuotes = false;\n  var forwarded = {};\n  var output = [];\n  var start = -1;\n  var end = -1;\n  var parameter;\n  var code;\n\n  for (var i = 0; i < header.length; i++) {\n    code = header.charCodeAt(i);\n\n    if (parameter === undefined) {\n      if (\n        i !== 0 &&\n        start === -1 &&\n        (code === 0x20/*' '*/ || code === 0x09/*'\\t'*/)\n      ) {\n        continue;\n      }\n\n      if (isTokenChar(code)) {\n        if (start === -1) start = i;\n      } else if (code === 0x3D/*'='*/ && start !== -1) {\n        parameter = header.slice(start, i).toLowerCase();\n        start = -1;\n      } else {\n        throw new ParseError(unexpectedCharacterMessage(header, i), header);\n      }\n    } else {\n      if (isEscaping && (code === 0x09 || isPrint(code) || isExtended(code))) {\n        isEscaping = false;\n      } else if (isTokenChar(code)) {\n        if (end !== -1) {\n          throw new ParseError(unexpectedCharacterMessage(header, i), header);\n        }\n\n        if (start === -1) start = i;\n      } else if (isDelimiter(code) || isExtended(code)) {\n        if (inQuotes) {\n          if (code === 0x22/*'\"'*/) {\n            inQuotes = false;\n            end = i;\n          } else if (code === 0x5C/*'\\'*/) {\n            if (start === -1) start = i;\n            isEscaping = mustUnescape = true;\n          } else if (start === -1) {\n            start = i;\n          }\n        } else if (code === 0x22 && header.charCodeAt(i - 1) === 0x3D) {\n          inQuotes = true;\n        } else if (\n          (code === 0x2C/*','*/|| code === 0x3B/*';'*/) &&\n          (start !== -1 || end !== -1)\n        ) {\n          if (start !== -1) {\n            if (end === -1) end = i;\n            forwarded[parameter] = mustUnescape\n              ? decode(header.slice(start, end))\n              : header.slice(start, end);\n          } else {\n            forwarded[parameter] = '';\n          }\n\n          if (code === 0x2C) {\n            output.push(forwarded);\n            forwarded = {};\n          }\n\n          parameter = undefined;\n          start = end = -1;\n        } else {\n          throw new ParseError(unexpectedCharacterMessage(header, i), header);\n        }\n      } else if (code === 0x20 || code === 0x09) {\n        if (end !== -1) continue;\n\n        if (inQuotes) {\n          if (start === -1) start = i;\n        } else if (start !== -1) {\n          end = i;\n        } else {\n          throw new ParseError(unexpectedCharacterMessage(header, i), header);\n        }\n      } else {\n        throw new ParseError(unexpectedCharacterMessage(header, i), header);\n      }\n    }\n  }\n\n  if (\n    parameter === undefined ||\n    inQuotes ||\n    (start === -1 && end === -1) ||\n    code === 0x20 ||\n    code === 0x09\n  ) {\n    throw new ParseError('Unexpected end of input', header);\n  }\n\n  if (start !== -1) {\n    if (end === -1) end = i;\n    forwarded[parameter] = mustUnescape\n      ? decode(header.slice(start, end))\n      : header.slice(start, end);\n  } else {\n    forwarded[parameter] = '';\n  }\n\n  output.push(forwarded);\n  return output;\n}\n\nmodule.exports = parse;\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  Attributes,\n  SpanStatusCode,\n  Span,\n  context,\n  SpanKind,\n  DiagLogger,\n} from '@opentelemetry/api';\nimport {\n  ATTR_CLIENT_ADDRESS,\n  ATTR_ERROR_TYPE,\n  ATTR_HTTP_REQUEST_METHOD,\n  ATTR_HTTP_REQUEST_METHOD_ORIGINAL,\n  ATTR_HTTP_RESPONSE_STATUS_CODE,\n  ATTR_HTTP_ROUTE,\n  ATTR_NETWORK_PEER_ADDRESS,\n  ATTR_NETWORK_PEER_PORT,\n  ATTR_NETWORK_PROTOCOL_VERSION,\n  ATTR_SERVER_ADDRESS,\n  ATTR_SERVER_PORT,\n  ATTR_URL_FULL,\n  ATTR_URL_PATH,\n  ATTR_URL_SCHEME,\n  ATTR_USER_AGENT_ORIGINAL,\n  NETTRANSPORTVALUES_IP_TCP,\n  NETTRANSPORTVALUES_IP_UDP,\n  SEMATTRS_HTTP_CLIENT_IP,\n  SEMATTRS_HTTP_FLAVOR,\n  SEMATTRS_HTTP_HOST,\n  SEMATTRS_HTTP_METHOD,\n  SEMATTRS_HTTP_REQUEST_CONTENT_LENGTH,\n  SEMATTRS_HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED,\n  SEMATTRS_HTTP_RESPONSE_CONTENT_LENGTH,\n  SEMATTRS_HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED,\n  SEMATTRS_HTTP_ROUTE,\n  SEMATTRS_HTTP_SCHEME,\n  SEMATTRS_HTTP_SERVER_NAME,\n  SEMATTRS_HTTP_STATUS_CODE,\n  SEMATTRS_HTTP_TARGET,\n  SEMATTRS_HTTP_URL,\n  SEMATTRS_HTTP_USER_AGENT,\n  SEMATTRS_NET_HOST_IP,\n  SEMATTRS_NET_HOST_NAME,\n  SEMATTRS_NET_HOST_PORT,\n  SEMATTRS_NET_PEER_IP,\n  SEMATTRS_NET_PEER_NAME,\n  SEMATTRS_NET_PEER_PORT,\n  SEMATTRS_NET_TRANSPORT,\n} from '@opentelemetry/semantic-conventions';\nimport {\n  IncomingHttpHeaders,\n  IncomingMessage,\n  OutgoingHttpHeaders,\n  RequestOptions,\n  ServerResponse,\n} from 'http';\nimport { getRPCMetadata, RPCType } from '@opentelemetry/core';\nimport * as url from 'url';\nimport { AttributeNames } from './enums/AttributeNames';\nimport {\n  Err,\n  IgnoreMatcher,\n  ParsedRequestOptions,\n  SemconvStability,\n} from './internal-types';\nimport forwardedParse = require('forwarded-parse');\n\n/**\n * Get an absolute url\n */\nexport const getAbsoluteUrl = (\n  requestUrl: ParsedRequestOptions | null,\n  headers: IncomingHttpHeaders | OutgoingHttpHeaders,\n  fallbackProtocol = 'http:'\n): string => {\n  const reqUrlObject = requestUrl || {};\n  const protocol = reqUrlObject.protocol || fallbackProtocol;\n  const port = (reqUrlObject.port || '').toString();\n  const path = reqUrlObject.path || '/';\n  let host =\n    reqUrlObject.host || reqUrlObject.hostname || headers.host || 'localhost';\n\n  // if there is no port in host and there is a port\n  // it should be displayed if it's not 80 and 443 (default ports)\n  if (\n    (host as string).indexOf(':') === -1 &&\n    port &&\n    port !== '80' &&\n    port !== '443'\n  ) {\n    host += `:${port}`;\n  }\n\n  return `${protocol}//${host}${path}`;\n};\n\n/**\n * Parse status code from HTTP response. [More details](https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/data-http.md#status)\n */\nexport const parseResponseStatus = (\n  kind: SpanKind,\n  statusCode?: number\n): SpanStatusCode => {\n  const upperBound = kind === SpanKind.CLIENT ? 400 : 500;\n  // 1xx, 2xx, 3xx are OK on client and server\n  // 4xx is OK on server\n  if (statusCode && statusCode >= 100 && statusCode < upperBound) {\n    return SpanStatusCode.UNSET;\n  }\n\n  // All other codes are error\n  return SpanStatusCode.ERROR;\n};\n\n/**\n * Check whether the given obj match pattern\n * @param constant e.g URL of request\n * @param pattern Match pattern\n */\nexport const satisfiesPattern = (\n  constant: string,\n  pattern: IgnoreMatcher\n): boolean => {\n  if (typeof pattern === 'string') {\n    return pattern === constant;\n  } else if (pattern instanceof RegExp) {\n    return pattern.test(constant);\n  } else if (typeof pattern === 'function') {\n    return pattern(constant);\n  } else {\n    throw new TypeError('Pattern is in unsupported datatype');\n  }\n};\n\n/**\n * Sets the span with the error passed in params\n * @param {Span} span the span that need to be set\n * @param {Error} error error that will be set to span\n * @param {SemconvStability} semconvStability determines which semconv version to use\n */\nexport const setSpanWithError = (\n  span: Span,\n  error: Err,\n  semconvStability: SemconvStability\n): void => {\n  const message = error.message;\n\n  if ((semconvStability & SemconvStability.OLD) === SemconvStability.OLD) {\n    span.setAttribute(AttributeNames.HTTP_ERROR_NAME, error.name);\n    span.setAttribute(AttributeNames.HTTP_ERROR_MESSAGE, message);\n  }\n\n  if (\n    (semconvStability & SemconvStability.STABLE) ===\n    SemconvStability.STABLE\n  ) {\n    span.setAttribute(ATTR_ERROR_TYPE, error.name);\n  }\n\n  span.setStatus({ code: SpanStatusCode.ERROR, message });\n  span.recordException(error);\n};\n\n/**\n * Adds attributes for request content-length and content-encoding HTTP headers\n * @param { IncomingMessage } Request object whose headers will be analyzed\n * @param { Attributes } Attributes object to be modified\n */\nexport const setRequestContentLengthAttribute = (\n  request: IncomingMessage,\n  attributes: Attributes\n): void => {\n  const length = getContentLength(request.headers);\n  if (length === null) return;\n\n  if (isCompressed(request.headers)) {\n    attributes[SEMATTRS_HTTP_REQUEST_CONTENT_LENGTH] = length;\n  } else {\n    attributes[SEMATTRS_HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED] = length;\n  }\n};\n\n/**\n * Adds attributes for response content-length and content-encoding HTTP headers\n * @param { IncomingMessage } Response object whose headers will be analyzed\n * @param { Attributes } Attributes object to be modified\n *\n * @deprecated this is for an older version of semconv. It is retained for compatibility using OTEL_SEMCONV_STABILITY_OPT_IN\n */\nexport const setResponseContentLengthAttribute = (\n  response: IncomingMessage,\n  attributes: Attributes\n): void => {\n  const length = getContentLength(response.headers);\n  if (length === null) return;\n\n  if (isCompressed(response.headers)) {\n    attributes[SEMATTRS_HTTP_RESPONSE_CONTENT_LENGTH] = length;\n  } else {\n    attributes[SEMATTRS_HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED] = length;\n  }\n};\n\nfunction getContentLength(\n  headers: OutgoingHttpHeaders | IncomingHttpHeaders\n): number | null {\n  const contentLengthHeader = headers['content-length'];\n  if (contentLengthHeader === undefined) return null;\n\n  const contentLength = parseInt(contentLengthHeader as string, 10);\n  if (isNaN(contentLength)) return null;\n\n  return contentLength;\n}\n\nexport const isCompressed = (\n  headers: OutgoingHttpHeaders | IncomingHttpHeaders\n): boolean => {\n  const encoding = headers['content-encoding'];\n\n  return !!encoding && encoding !== 'identity';\n};\n\n/**\n * Mimics Node.js conversion of URL strings to RequestOptions expected by\n * `http.request` and `https.request` APIs.\n *\n * See https://github.com/nodejs/node/blob/2505e217bba05fc581b572c685c5cf280a16c5a3/lib/internal/url.js#L1415-L1437\n *\n * @param stringUrl\n * @throws TypeError if the URL is not valid.\n */\nfunction stringUrlToHttpOptions(\n  stringUrl: string\n): RequestOptions & { pathname: string } {\n  // This is heavily inspired by Node.js handling of the same situation, trying\n  // to follow it as closely as possible while keeping in mind that we only\n  // deal with string URLs, not URL objects.\n  const {\n    hostname,\n    pathname,\n    port,\n    username,\n    password,\n    search,\n    protocol,\n    hash,\n    href,\n    origin,\n    host,\n  } = new URL(stringUrl);\n\n  const options: RequestOptions & {\n    pathname: string;\n    hash: string;\n    search: string;\n    href: string;\n    origin: string;\n  } = {\n    protocol: protocol,\n    hostname:\n      hostname && hostname[0] === '[' ? hostname.slice(1, -1) : hostname,\n    hash: hash,\n    search: search,\n    pathname: pathname,\n    path: `${pathname || ''}${search || ''}`,\n    href: href,\n    origin: origin,\n    host: host,\n  };\n  if (port !== '') {\n    options.port = Number(port);\n  }\n  if (username || password) {\n    options.auth = `${decodeURIComponent(username)}:${decodeURIComponent(\n      password\n    )}`;\n  }\n  return options;\n}\n\n/**\n * Makes sure options is an url object\n * return an object with default value and parsed options\n * @param logger component logger\n * @param options original options for the request\n * @param [extraOptions] additional options for the request\n */\nexport const getRequestInfo = (\n  logger: DiagLogger,\n  options: url.URL | RequestOptions | string,\n  extraOptions?: RequestOptions\n): {\n  origin: string;\n  pathname: string;\n  method: string;\n  invalidUrl: boolean;\n  optionsParsed: RequestOptions;\n} => {\n  let pathname: string;\n  let origin: string;\n  let optionsParsed: RequestOptions;\n  let invalidUrl = false;\n  if (typeof options === 'string') {\n    try {\n      const convertedOptions = stringUrlToHttpOptions(options);\n      optionsParsed = convertedOptions;\n      pathname = convertedOptions.pathname || '/';\n    } catch (e) {\n      invalidUrl = true;\n      logger.verbose(\n        'Unable to parse URL provided to HTTP request, using fallback to determine path. Original error:',\n        e\n      );\n      // for backward compatibility with how url.parse() behaved.\n      optionsParsed = {\n        path: options,\n      };\n      pathname = optionsParsed.path || '/';\n    }\n\n    origin = `${optionsParsed.protocol || 'http:'}//${optionsParsed.host}`;\n    if (extraOptions !== undefined) {\n      Object.assign(optionsParsed, extraOptions);\n    }\n  } else if (options instanceof url.URL) {\n    optionsParsed = {\n      protocol: options.protocol,\n      hostname:\n        typeof options.hostname === 'string' && options.hostname.startsWith('[')\n          ? options.hostname.slice(1, -1)\n          : options.hostname,\n      path: `${options.pathname || ''}${options.search || ''}`,\n    };\n    if (options.port !== '') {\n      optionsParsed.port = Number(options.port);\n    }\n    if (options.username || options.password) {\n      optionsParsed.auth = `${options.username}:${options.password}`;\n    }\n    pathname = options.pathname;\n    origin = options.origin;\n    if (extraOptions !== undefined) {\n      Object.assign(optionsParsed, extraOptions);\n    }\n  } else {\n    optionsParsed = Object.assign(\n      { protocol: options.host ? 'http:' : undefined },\n      options\n    );\n\n    const hostname =\n      optionsParsed.host ||\n      (optionsParsed.port != null\n        ? `${optionsParsed.hostname}${optionsParsed.port}`\n        : optionsParsed.hostname);\n    origin = `${optionsParsed.protocol || 'http:'}//${hostname}`;\n\n    pathname = (options as url.URL).pathname;\n    if (!pathname && optionsParsed.path) {\n      try {\n        const parsedUrl = new URL(optionsParsed.path, origin);\n        pathname = parsedUrl.pathname || '/';\n      } catch (e) {\n        pathname = '/';\n      }\n    }\n  }\n\n  // some packages return method in lowercase..\n  // ensure upperCase for consistency\n  const method = optionsParsed.method\n    ? optionsParsed.method.toUpperCase()\n    : 'GET';\n\n  return { origin, pathname, method, optionsParsed, invalidUrl };\n};\n\n/**\n * Makes sure options is of type string or object\n * @param options for the request\n */\nexport const isValidOptionsType = (options: unknown): boolean => {\n  if (!options) {\n    return false;\n  }\n\n  const type = typeof options;\n  return type === 'string' || (type === 'object' && !Array.isArray(options));\n};\n\nexport const extractHostnameAndPort = (\n  requestOptions: Pick<\n    ParsedRequestOptions,\n    'hostname' | 'host' | 'port' | 'protocol'\n  >\n): { hostname: string; port: number | string } => {\n  if (requestOptions.hostname && requestOptions.port) {\n    return { hostname: requestOptions.hostname, port: requestOptions.port };\n  }\n  const matches = requestOptions.host?.match(/^([^:/ ]+)(:\\d{1,5})?/) || null;\n  const hostname =\n    requestOptions.hostname || (matches === null ? 'localhost' : matches[1]);\n  let port = requestOptions.port;\n  if (!port) {\n    if (matches && matches[2]) {\n      // remove the leading \":\". The extracted port would be something like \":8080\"\n      port = matches[2].substring(1);\n    } else {\n      port = requestOptions.protocol === 'https:' ? '443' : '80';\n    }\n  }\n  return { hostname, port };\n};\n\n/**\n * Returns outgoing request attributes scoped to the options passed to the request\n * @param {ParsedRequestOptions} requestOptions the same options used to make the request\n * @param {{ component: string, hostname: string, hookAttributes?: Attributes }} options used to pass data needed to create attributes\n * @param {SemconvStability} semconvStability determines which semconv version to use\n */\nexport const getOutgoingRequestAttributes = (\n  requestOptions: ParsedRequestOptions,\n  options: {\n    component: string;\n    hostname: string;\n    port: string | number;\n    hookAttributes?: Attributes;\n  },\n  semconvStability: SemconvStability\n): Attributes => {\n  const hostname = options.hostname;\n  const port = options.port;\n  const method = requestOptions.method ?? 'GET';\n  const normalizedMethod = normalizeMethod(method);\n  const headers = requestOptions.headers || {};\n  const userAgent = headers['user-agent'];\n  const urlFull = getAbsoluteUrl(\n    requestOptions,\n    headers,\n    `${options.component}:`\n  );\n  const oldAttributes: Attributes = {\n    [SEMATTRS_HTTP_URL]: urlFull,\n    [SEMATTRS_HTTP_METHOD]: method,\n    [SEMATTRS_HTTP_TARGET]: requestOptions.path || '/',\n    [SEMATTRS_NET_PEER_NAME]: hostname,\n    [SEMATTRS_HTTP_HOST]: headers.host ?? `${hostname}:${port}`,\n  };\n\n  const newAttributes: Attributes = {\n    // Required attributes\n    [ATTR_HTTP_REQUEST_METHOD]: normalizedMethod,\n    [ATTR_SERVER_ADDRESS]: hostname,\n    [ATTR_SERVER_PORT]: Number(port),\n    [ATTR_URL_FULL]: urlFull,\n    // leaving out protocol version, it is not yet negotiated\n    // leaving out protocol name, it is only required when protocol version is set\n    // retries and redirects not supported\n\n    // Opt-in attributes left off for now\n  };\n\n  // conditionally required if request method required case normalization\n  if (method !== normalizedMethod) {\n    newAttributes[ATTR_HTTP_REQUEST_METHOD_ORIGINAL] = method;\n  }\n\n  if (userAgent !== undefined) {\n    oldAttributes[SEMATTRS_HTTP_USER_AGENT] = userAgent;\n  }\n\n  switch (semconvStability) {\n    case SemconvStability.STABLE:\n      return Object.assign(newAttributes, options.hookAttributes);\n    case SemconvStability.OLD:\n      return Object.assign(oldAttributes, options.hookAttributes);\n  }\n\n  return Object.assign(oldAttributes, newAttributes, options.hookAttributes);\n};\n\n/**\n * Returns outgoing request Metric attributes scoped to the request data\n * @param {Attributes} spanAttributes the span attributes\n */\nexport const getOutgoingRequestMetricAttributes = (\n  spanAttributes: Attributes\n): Attributes => {\n  const metricAttributes: Attributes = {};\n  metricAttributes[SEMATTRS_HTTP_METHOD] = spanAttributes[SEMATTRS_HTTP_METHOD];\n  metricAttributes[SEMATTRS_NET_PEER_NAME] =\n    spanAttributes[SEMATTRS_NET_PEER_NAME];\n  //TODO: http.url attribute, it should substitute any parameters to avoid high cardinality.\n  return metricAttributes;\n};\n\n/**\n * Returns attributes related to the kind of HTTP protocol used\n * @param {string} [kind] Kind of HTTP protocol used: \"1.0\", \"1.1\", \"2\", \"SPDY\" or \"QUIC\".\n */\nexport const setAttributesFromHttpKind = (\n  kind: string | undefined,\n  attributes: Attributes\n): void => {\n  if (kind) {\n    attributes[SEMATTRS_HTTP_FLAVOR] = kind;\n    if (kind.toUpperCase() !== 'QUIC') {\n      attributes[SEMATTRS_NET_TRANSPORT] = NETTRANSPORTVALUES_IP_TCP;\n    } else {\n      attributes[SEMATTRS_NET_TRANSPORT] = NETTRANSPORTVALUES_IP_UDP;\n    }\n  }\n};\n\n/**\n * Returns outgoing request attributes scoped to the response data\n * @param {IncomingMessage} response the response object\n * @param {SemconvStability} semconvStability determines which semconv version to use\n */\nexport const getOutgoingRequestAttributesOnResponse = (\n  response: IncomingMessage,\n  semconvStability: SemconvStability\n): Attributes => {\n  const { statusCode, statusMessage, httpVersion, socket } = response;\n  const oldAttributes: Attributes = {};\n  const stableAttributes: Attributes = {};\n\n  if (statusCode != null) {\n    stableAttributes[ATTR_HTTP_RESPONSE_STATUS_CODE] = statusCode;\n  }\n\n  if (socket) {\n    const { remoteAddress, remotePort } = socket;\n    oldAttributes[SEMATTRS_NET_PEER_IP] = remoteAddress;\n    oldAttributes[SEMATTRS_NET_PEER_PORT] = remotePort;\n\n    // Recommended\n    stableAttributes[ATTR_NETWORK_PEER_ADDRESS] = remoteAddress;\n    stableAttributes[ATTR_NETWORK_PEER_PORT] = remotePort;\n    stableAttributes[ATTR_NETWORK_PROTOCOL_VERSION] = response.httpVersion;\n  }\n  setResponseContentLengthAttribute(response, oldAttributes);\n\n  if (statusCode) {\n    oldAttributes[SEMATTRS_HTTP_STATUS_CODE] = statusCode;\n    oldAttributes[AttributeNames.HTTP_STATUS_TEXT] = (\n      statusMessage || ''\n    ).toUpperCase();\n  }\n\n  setAttributesFromHttpKind(httpVersion, oldAttributes);\n\n  switch (semconvStability) {\n    case SemconvStability.STABLE:\n      return stableAttributes;\n    case SemconvStability.OLD:\n      return oldAttributes;\n  }\n\n  return Object.assign(oldAttributes, stableAttributes);\n};\n\n/**\n * Returns outgoing request Metric attributes scoped to the response data\n * @param {Attributes} spanAttributes the span attributes\n */\nexport const getOutgoingRequestMetricAttributesOnResponse = (\n  spanAttributes: Attributes\n): Attributes => {\n  const metricAttributes: Attributes = {};\n  metricAttributes[SEMATTRS_NET_PEER_PORT] =\n    spanAttributes[SEMATTRS_NET_PEER_PORT];\n  metricAttributes[SEMATTRS_HTTP_STATUS_CODE] =\n    spanAttributes[SEMATTRS_HTTP_STATUS_CODE];\n  metricAttributes[SEMATTRS_HTTP_FLAVOR] = spanAttributes[SEMATTRS_HTTP_FLAVOR];\n  return metricAttributes;\n};\n\nfunction parseHostHeader(\n  hostHeader: string,\n  proto?: string\n): { host: string; port?: string } {\n  const parts = hostHeader.split(':');\n\n  // no semicolon implies ipv4 dotted syntax or host name without port\n  // x.x.x.x\n  // example.com\n  if (parts.length === 1) {\n    if (proto === 'http') {\n      return { host: parts[0], port: '80' };\n    }\n\n    if (proto === 'https') {\n      return { host: parts[0], port: '443' };\n    }\n\n    return { host: parts[0] };\n  }\n\n  // single semicolon implies ipv4 dotted syntax or host name with port\n  // x.x.x.x:yyyy\n  // example.com:yyyy\n  if (parts.length === 2) {\n    return {\n      host: parts[0],\n      port: parts[1],\n    };\n  }\n\n  // more than 2 parts implies ipv6 syntax with multiple colons\n  // [x:x:x:x:x:x:x:x]\n  // [x:x:x:x:x:x:x:x]:yyyy\n  if (parts[0].startsWith('[')) {\n    if (parts[parts.length - 1].endsWith(']')) {\n      if (proto === 'http') {\n        return { host: hostHeader, port: '80' };\n      }\n\n      if (proto === 'https') {\n        return { host: hostHeader, port: '443' };\n      }\n    } else if (parts[parts.length - 2].endsWith(']')) {\n      return {\n        host: parts.slice(0, -1).join(':'),\n        port: parts[parts.length - 1],\n      };\n    }\n  }\n\n  // if nothing above matches just return the host header\n  return { host: hostHeader };\n}\n\n/**\n * Get server.address and port according to http semconv 1.27\n * https://github.com/open-telemetry/semantic-conventions/blob/bf0a2c1134f206f034408b201dbec37960ed60ec/docs/http/http-spans.md#setting-serveraddress-and-serverport-attributes\n */\nfunction getServerAddress(\n  request: IncomingMessage,\n  component: 'http' | 'https'\n): { host: string; port?: string } | null {\n  const forwardedHeader = request.headers['forwarded'];\n  if (forwardedHeader) {\n    for (const entry of parseForwardedHeader(forwardedHeader)) {\n      if (entry.host) {\n        return parseHostHeader(entry.host, entry.proto);\n      }\n    }\n  }\n\n  const xForwardedHost = request.headers['x-forwarded-host'];\n  if (typeof xForwardedHost === 'string') {\n    if (typeof request.headers['x-forwarded-proto'] === 'string') {\n      return parseHostHeader(\n        xForwardedHost,\n        request.headers['x-forwarded-proto']\n      );\n    }\n\n    if (Array.isArray(request.headers['x-forwarded-proto'])) {\n      return parseHostHeader(\n        xForwardedHost,\n        request.headers['x-forwarded-proto'][0]\n      );\n    }\n\n    return parseHostHeader(xForwardedHost);\n  } else if (\n    Array.isArray(xForwardedHost) &&\n    typeof xForwardedHost[0] === 'string' &&\n    xForwardedHost[0].length > 0\n  ) {\n    if (typeof request.headers['x-forwarded-proto'] === 'string') {\n      return parseHostHeader(\n        xForwardedHost[0],\n        request.headers['x-forwarded-proto']\n      );\n    }\n\n    if (Array.isArray(request.headers['x-forwarded-proto'])) {\n      return parseHostHeader(\n        xForwardedHost[0],\n        request.headers['x-forwarded-proto'][0]\n      );\n    }\n\n    return parseHostHeader(xForwardedHost[0]);\n  }\n\n  const host = request.headers['host'];\n  if (typeof host === 'string' && host.length > 0) {\n    return parseHostHeader(host, component);\n  }\n\n  return null;\n}\n\n/**\n * Get server.address and port according to http semconv 1.27\n * https://github.com/open-telemetry/semantic-conventions/blob/bf0a2c1134f206f034408b201dbec37960ed60ec/docs/http/http-spans.md#setting-serveraddress-and-serverport-attributes\n */\nexport function getRemoteClientAddress(\n  request: IncomingMessage\n): string | null {\n  const forwardedHeader = request.headers['forwarded'];\n  if (forwardedHeader) {\n    for (const entry of parseForwardedHeader(forwardedHeader)) {\n      if (entry.for) {\n        return entry.for;\n      }\n    }\n  }\n\n  const xForwardedFor = request.headers['x-forwarded-for'];\n  if (typeof xForwardedFor === 'string') {\n    return xForwardedFor;\n  } else if (Array.isArray(xForwardedFor)) {\n    return xForwardedFor[0];\n  }\n\n  const remote = request.socket.remoteAddress;\n  if (remote) {\n    return remote;\n  }\n\n  return null;\n}\n\nfunction getInfoFromIncomingMessage(\n  component: 'http' | 'https',\n  request: IncomingMessage,\n  logger: DiagLogger\n): { pathname?: string; search?: string; toString: () => string } {\n  try {\n    if (request.headers.host) {\n      return new URL(\n        request.url ?? '/',\n        `${component}://${request.headers.host}`\n      );\n    } else {\n      const unsafeParsedUrl = new URL(\n        request.url ?? '/',\n        // using localhost as a workaround to still use the URL constructor for parsing\n        `${component}://localhost`\n      );\n      // since we use localhost as a workaround, ensure we hide the rest of the properties to avoid\n      // our workaround leaking though.\n      return {\n        pathname: unsafeParsedUrl.pathname,\n        search: unsafeParsedUrl.search,\n        toString: function () {\n          // we cannot use the result of unsafeParsedUrl.toString as it's potentially wrong.\n          return unsafeParsedUrl.pathname + unsafeParsedUrl.search;\n        },\n      };\n    }\n  } catch (e) {\n    // something is wrong, use undefined - this *should* never happen, logging\n    // for troubleshooting in case it does happen.\n    logger.verbose('Unable to get URL from request', e);\n    return {};\n  }\n}\n\n/**\n * Returns incoming request attributes scoped to the request data\n * @param {IncomingMessage} request the request object\n * @param {{ component: string, serverName?: string, hookAttributes?: Attributes }} options used to pass data needed to create attributes\n * @param {SemconvStability} semconvStability determines which semconv version to use\n */\nexport const getIncomingRequestAttributes = (\n  request: IncomingMessage,\n  options: {\n    component: 'http' | 'https';\n    serverName?: string;\n    hookAttributes?: Attributes;\n    semconvStability: SemconvStability;\n  },\n  logger: DiagLogger\n): Attributes => {\n  const headers = request.headers;\n  const userAgent = headers['user-agent'];\n  const ips = headers['x-forwarded-for'];\n  const httpVersion = request.httpVersion;\n  const host = headers.host;\n  const hostname = host?.replace(/^(.*)(:[0-9]{1,5})/, '$1') || 'localhost';\n\n  const method = request.method;\n  const normalizedMethod = normalizeMethod(method);\n\n  const serverAddress = getServerAddress(request, options.component);\n  const serverName = options.serverName;\n\n  const remoteClientAddress = getRemoteClientAddress(request);\n\n  const newAttributes: Attributes = {\n    [ATTR_HTTP_REQUEST_METHOD]: normalizedMethod,\n    [ATTR_URL_SCHEME]: options.component,\n    [ATTR_SERVER_ADDRESS]: serverAddress?.host,\n    [ATTR_NETWORK_PEER_ADDRESS]: request.socket.remoteAddress,\n    [ATTR_NETWORK_PEER_PORT]: request.socket.remotePort,\n    [ATTR_NETWORK_PROTOCOL_VERSION]: request.httpVersion,\n    [ATTR_USER_AGENT_ORIGINAL]: userAgent,\n  };\n\n  const parsedUrl = getInfoFromIncomingMessage(\n    options.component,\n    request,\n    logger\n  );\n\n  if (parsedUrl?.pathname != null) {\n    newAttributes[ATTR_URL_PATH] = parsedUrl.pathname;\n  }\n\n  if (remoteClientAddress != null) {\n    newAttributes[ATTR_CLIENT_ADDRESS] = remoteClientAddress;\n  }\n\n  if (serverAddress?.port != null) {\n    newAttributes[ATTR_SERVER_PORT] = Number(serverAddress.port);\n  }\n\n  // conditionally required if request method required case normalization\n  if (method !== normalizedMethod) {\n    newAttributes[ATTR_HTTP_REQUEST_METHOD_ORIGINAL] = method;\n  }\n\n  const oldAttributes: Attributes = {\n    [SEMATTRS_HTTP_URL]: parsedUrl.toString(),\n    [SEMATTRS_HTTP_HOST]: host,\n    [SEMATTRS_NET_HOST_NAME]: hostname,\n    [SEMATTRS_HTTP_METHOD]: method,\n    [SEMATTRS_HTTP_SCHEME]: options.component,\n  };\n\n  if (typeof ips === 'string') {\n    oldAttributes[SEMATTRS_HTTP_CLIENT_IP] = ips.split(',')[0];\n  }\n\n  if (typeof serverName === 'string') {\n    oldAttributes[SEMATTRS_HTTP_SERVER_NAME] = serverName;\n  }\n\n  if (parsedUrl?.pathname) {\n    oldAttributes[SEMATTRS_HTTP_TARGET] =\n      parsedUrl?.pathname + parsedUrl?.search || '/';\n  }\n\n  if (userAgent !== undefined) {\n    oldAttributes[SEMATTRS_HTTP_USER_AGENT] = userAgent;\n  }\n  setRequestContentLengthAttribute(request, oldAttributes);\n  setAttributesFromHttpKind(httpVersion, oldAttributes);\n\n  switch (options.semconvStability) {\n    case SemconvStability.STABLE:\n      return Object.assign(newAttributes, options.hookAttributes);\n    case SemconvStability.OLD:\n      return Object.assign(oldAttributes, options.hookAttributes);\n  }\n\n  return Object.assign(oldAttributes, newAttributes, options.hookAttributes);\n};\n\n/**\n * Returns incoming request Metric attributes scoped to the request data\n * @param {Attributes} spanAttributes the span attributes\n * @param {{ component: string }} options used to pass data needed to create attributes\n */\nexport const getIncomingRequestMetricAttributes = (\n  spanAttributes: Attributes\n): Attributes => {\n  const metricAttributes: Attributes = {};\n  metricAttributes[SEMATTRS_HTTP_SCHEME] = spanAttributes[SEMATTRS_HTTP_SCHEME];\n  metricAttributes[SEMATTRS_HTTP_METHOD] = spanAttributes[SEMATTRS_HTTP_METHOD];\n  metricAttributes[SEMATTRS_NET_HOST_NAME] =\n    spanAttributes[SEMATTRS_NET_HOST_NAME];\n  metricAttributes[SEMATTRS_HTTP_FLAVOR] = spanAttributes[SEMATTRS_HTTP_FLAVOR];\n  //TODO: http.target attribute, it should substitute any parameters to avoid high cardinality.\n  return metricAttributes;\n};\n\n/**\n * Returns incoming request attributes scoped to the response data\n * @param {(ServerResponse & { socket: Socket; })} response the response object\n */\nexport const getIncomingRequestAttributesOnResponse = (\n  request: IncomingMessage,\n  response: ServerResponse,\n  semconvStability: SemconvStability\n): Attributes => {\n  // take socket from the request,\n  // since it may be detached from the response object in keep-alive mode\n  const { socket } = request;\n  const { statusCode, statusMessage } = response;\n\n  const newAttributes: Attributes = {\n    [ATTR_HTTP_RESPONSE_STATUS_CODE]: statusCode,\n  };\n\n  const rpcMetadata = getRPCMetadata(context.active());\n  const oldAttributes: Attributes = {};\n  if (socket) {\n    const { localAddress, localPort, remoteAddress, remotePort } = socket;\n    oldAttributes[SEMATTRS_NET_HOST_IP] = localAddress;\n    oldAttributes[SEMATTRS_NET_HOST_PORT] = localPort;\n    oldAttributes[SEMATTRS_NET_PEER_IP] = remoteAddress;\n    oldAttributes[SEMATTRS_NET_PEER_PORT] = remotePort;\n  }\n  oldAttributes[SEMATTRS_HTTP_STATUS_CODE] = statusCode;\n  oldAttributes[AttributeNames.HTTP_STATUS_TEXT] = (\n    statusMessage || ''\n  ).toUpperCase();\n\n  if (rpcMetadata?.type === RPCType.HTTP && rpcMetadata.route !== undefined) {\n    oldAttributes[SEMATTRS_HTTP_ROUTE] = rpcMetadata.route;\n    newAttributes[ATTR_HTTP_ROUTE] = rpcMetadata.route;\n  }\n\n  switch (semconvStability) {\n    case SemconvStability.STABLE:\n      return newAttributes;\n    case SemconvStability.OLD:\n      return oldAttributes;\n  }\n\n  return Object.assign(oldAttributes, newAttributes);\n};\n\n/**\n * Returns incoming request Metric attributes scoped to the request data\n * @param {Attributes} spanAttributes the span attributes\n */\nexport const getIncomingRequestMetricAttributesOnResponse = (\n  spanAttributes: Attributes\n): Attributes => {\n  const metricAttributes: Attributes = {};\n  metricAttributes[SEMATTRS_HTTP_STATUS_CODE] =\n    spanAttributes[SEMATTRS_HTTP_STATUS_CODE];\n  metricAttributes[SEMATTRS_NET_HOST_PORT] =\n    spanAttributes[SEMATTRS_NET_HOST_PORT];\n  if (spanAttributes[SEMATTRS_HTTP_ROUTE] !== undefined) {\n    metricAttributes[SEMATTRS_HTTP_ROUTE] = spanAttributes[SEMATTRS_HTTP_ROUTE];\n  }\n  return metricAttributes;\n};\n\nexport const getIncomingStableRequestMetricAttributesOnResponse = (\n  spanAttributes: Attributes\n): Attributes => {\n  const metricAttributes: Attributes = {};\n  if (spanAttributes[ATTR_HTTP_ROUTE] !== undefined) {\n    metricAttributes[ATTR_HTTP_ROUTE] = spanAttributes[SEMATTRS_HTTP_ROUTE];\n  }\n\n  // required if and only if one was sent, same as span requirement\n  if (spanAttributes[ATTR_HTTP_RESPONSE_STATUS_CODE]) {\n    metricAttributes[ATTR_HTTP_RESPONSE_STATUS_CODE] =\n      spanAttributes[ATTR_HTTP_RESPONSE_STATUS_CODE];\n  }\n  return metricAttributes;\n};\n\nexport function headerCapture(type: 'request' | 'response', headers: string[]) {\n  const normalizedHeaders = new Map<string, string>();\n  for (let i = 0, len = headers.length; i < len; i++) {\n    const capturedHeader = headers[i].toLowerCase();\n    normalizedHeaders.set(capturedHeader, capturedHeader.replace(/-/g, '_'));\n  }\n\n  return (\n    span: Span,\n    getHeader: (key: string) => undefined | string | string[] | number\n  ) => {\n    for (const capturedHeader of normalizedHeaders.keys()) {\n      const value = getHeader(capturedHeader);\n\n      if (value === undefined) {\n        continue;\n      }\n\n      const normalizedHeader = normalizedHeaders.get(capturedHeader);\n      const key = `http.${type}.header.${normalizedHeader}`;\n\n      if (typeof value === 'string') {\n        span.setAttribute(key, [value]);\n      } else if (Array.isArray(value)) {\n        span.setAttribute(key, value);\n      } else {\n        span.setAttribute(key, [value]);\n      }\n    }\n  };\n}\n\nconst KNOWN_METHODS = new Set([\n  // methods from https://www.rfc-editor.org/rfc/rfc9110.html#name-methods\n  'GET',\n  'HEAD',\n  'POST',\n  'PUT',\n  'DELETE',\n  'CONNECT',\n  'OPTIONS',\n  'TRACE',\n\n  // PATCH from https://www.rfc-editor.org/rfc/rfc5789.html\n  'PATCH',\n]);\n\nfunction normalizeMethod(method?: string | null) {\n  if (method == null) {\n    return 'GET';\n  }\n\n  const upper = method.toUpperCase();\n  if (KNOWN_METHODS.has(upper)) {\n    return upper;\n  }\n\n  return '_OTHER';\n}\n\nfunction parseForwardedHeader(header: string): Record<string, string>[] {\n  try {\n    return forwardedParse(header);\n  } catch {\n    return [];\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  context,\n  HrTime,\n  INVALID_SPAN_CONTEXT,\n  propagation,\n  ROOT_CONTEXT,\n  Span,\n  SpanKind,\n  SpanOptions,\n  SpanStatus,\n  SpanStatusCode,\n  trace,\n  Histogram,\n  Attributes,\n  ValueType,\n} from '@opentelemetry/api';\nimport {\n  hrTime,\n  hrTimeDuration,\n  hrTimeToMilliseconds,\n  suppressTracing,\n} from '@opentelemetry/core';\nimport type * as http from 'http';\nimport type * as https from 'https';\nimport { Socket } from 'net';\nimport * as semver from 'semver';\nimport * as url from 'url';\nimport { HttpInstrumentationConfig } from './types';\nimport { VERSION } from './version';\nimport {\n  InstrumentationBase,\n  InstrumentationNodeModuleDefinition,\n  safeExecuteInTheMiddle,\n} from '@opentelemetry/instrumentation';\nimport {\n  RPCMetadata,\n  RPCType,\n  setRPCMetadata,\n  getEnv,\n} from '@opentelemetry/core';\nimport { errorMonitor } from 'events';\nimport {\n  ATTR_HTTP_REQUEST_METHOD,\n  ATTR_HTTP_RESPONSE_STATUS_CODE,\n  ATTR_NETWORK_PROTOCOL_VERSION,\n  ATTR_SERVER_ADDRESS,\n  ATTR_SERVER_PORT,\n  ATTR_URL_SCHEME,\n  METRIC_HTTP_CLIENT_REQUEST_DURATION,\n  METRIC_HTTP_SERVER_REQUEST_DURATION,\n  SEMATTRS_HTTP_ROUTE,\n} from '@opentelemetry/semantic-conventions';\nimport {\n  extractHostnameAndPort,\n  getIncomingRequestAttributes,\n  getIncomingRequestAttributesOnResponse,\n  getIncomingRequestMetricAttributes,\n  getIncomingRequestMetricAttributesOnResponse,\n  getIncomingStableRequestMetricAttributesOnResponse,\n  getOutgoingRequestAttributes,\n  getOutgoingRequestAttributesOnResponse,\n  getOutgoingRequestMetricAttributes,\n  getOutgoingRequestMetricAttributesOnResponse,\n  getRequestInfo,\n  headerCapture,\n  isValidOptionsType,\n  parseResponseStatus,\n  setSpanWithError,\n} from './utils';\nimport {\n  Err,\n  Func,\n  Http,\n  HttpRequestArgs,\n  Https,\n  SemconvStability,\n} from './internal-types';\n\n/**\n * `node:http` and `node:https` instrumentation for OpenTelemetry\n */\nexport class HttpInstrumentation extends InstrumentationBase<HttpInstrumentationConfig> {\n  /** keep track on spans not ended */\n  private readonly _spanNotEnded: WeakSet<Span> = new WeakSet<Span>();\n  private _headerCapture;\n  private _oldHttpServerDurationHistogram!: Histogram;\n  private _stableHttpServerDurationHistogram!: Histogram;\n  private _oldHttpClientDurationHistogram!: Histogram;\n  private _stableHttpClientDurationHistogram!: Histogram;\n\n  private _semconvStability = SemconvStability.OLD;\n\n  constructor(config: HttpInstrumentationConfig = {}) {\n    super('@opentelemetry/instrumentation-http', VERSION, config);\n    this._headerCapture = this._createHeaderCapture();\n\n    for (const entry of getEnv().OTEL_SEMCONV_STABILITY_OPT_IN) {\n      if (entry.toLowerCase() === 'http/dup') {\n        // http/dup takes highest precedence. If it is found, there is no need to read the rest of the list\n        this._semconvStability = SemconvStability.DUPLICATE;\n        break;\n      } else if (entry.toLowerCase() === 'http') {\n        this._semconvStability = SemconvStability.STABLE;\n      }\n    }\n  }\n\n  protected override _updateMetricInstruments() {\n    this._oldHttpServerDurationHistogram = this.meter.createHistogram(\n      'http.server.duration',\n      {\n        description: 'Measures the duration of inbound HTTP requests.',\n        unit: 'ms',\n        valueType: ValueType.DOUBLE,\n      }\n    );\n    this._oldHttpClientDurationHistogram = this.meter.createHistogram(\n      'http.client.duration',\n      {\n        description: 'Measures the duration of outbound HTTP requests.',\n        unit: 'ms',\n        valueType: ValueType.DOUBLE,\n      }\n    );\n    this._stableHttpServerDurationHistogram = this.meter.createHistogram(\n      METRIC_HTTP_SERVER_REQUEST_DURATION,\n      {\n        description: 'Duration of HTTP server requests.',\n        unit: 's',\n        valueType: ValueType.DOUBLE,\n        advice: {\n          explicitBucketBoundaries: [\n            0.005, 0.01, 0.025, 0.05, 0.075, 0.1, 0.25, 0.5, 0.75, 1, 2.5, 5,\n            7.5, 10,\n          ],\n        },\n      }\n    );\n    this._stableHttpClientDurationHistogram = this.meter.createHistogram(\n      METRIC_HTTP_CLIENT_REQUEST_DURATION,\n      {\n        description: 'Duration of HTTP client requests.',\n        unit: 's',\n        valueType: ValueType.DOUBLE,\n        advice: {\n          explicitBucketBoundaries: [\n            0.005, 0.01, 0.025, 0.05, 0.075, 0.1, 0.25, 0.5, 0.75, 1, 2.5, 5,\n            7.5, 10,\n          ],\n        },\n      }\n    );\n  }\n\n  private _recordServerDuration(\n    durationMs: number,\n    oldAttributes: Attributes,\n    stableAttributes: Attributes\n  ) {\n    if (\n      (this._semconvStability & SemconvStability.OLD) ===\n      SemconvStability.OLD\n    ) {\n      // old histogram is counted in MS\n      this._oldHttpServerDurationHistogram.record(durationMs, oldAttributes);\n    }\n\n    if (\n      (this._semconvStability & SemconvStability.STABLE) ===\n      SemconvStability.STABLE\n    ) {\n      // stable histogram is counted in S\n      this._stableHttpServerDurationHistogram.record(\n        durationMs / 1000,\n        stableAttributes\n      );\n    }\n  }\n\n  private _recordClientDuration(\n    durationMs: number,\n    oldAttributes: Attributes,\n    stableAttributes: Attributes\n  ) {\n    if (\n      (this._semconvStability & SemconvStability.OLD) ===\n      SemconvStability.OLD\n    ) {\n      // old histogram is counted in MS\n      this._oldHttpClientDurationHistogram.record(durationMs, oldAttributes);\n    }\n\n    if (\n      (this._semconvStability & SemconvStability.STABLE) ===\n      SemconvStability.STABLE\n    ) {\n      // stable histogram is counted in S\n      this._stableHttpClientDurationHistogram.record(\n        durationMs / 1000,\n        stableAttributes\n      );\n    }\n  }\n\n  override setConfig(config: HttpInstrumentationConfig = {}): void {\n    super.setConfig(config);\n    this._headerCapture = this._createHeaderCapture();\n  }\n\n  init(): [\n    InstrumentationNodeModuleDefinition,\n    InstrumentationNodeModuleDefinition,\n  ] {\n    return [this._getHttpsInstrumentation(), this._getHttpInstrumentation()];\n  }\n\n  private _getHttpInstrumentation() {\n    return new InstrumentationNodeModuleDefinition(\n      'http',\n      ['*'],\n      (moduleExports: Http): Http => {\n        const isESM = (moduleExports as any)[Symbol.toStringTag] === 'Module';\n        if (!this.getConfig().disableOutgoingRequestInstrumentation) {\n          const patchedRequest = this._wrap(\n            moduleExports,\n            'request',\n            this._getPatchOutgoingRequestFunction('http')\n          ) as unknown as Func<http.ClientRequest>;\n          const patchedGet = this._wrap(\n            moduleExports,\n            'get',\n            this._getPatchOutgoingGetFunction(patchedRequest)\n          );\n          if (isESM) {\n            // To handle `import http from 'http'`, which returns the default\n            // export, we need to set `module.default.*`.\n            (moduleExports as any).default.request = patchedRequest;\n            (moduleExports as any).default.get = patchedGet;\n          }\n        }\n        if (!this.getConfig().disableIncomingRequestInstrumentation) {\n          this._wrap(\n            moduleExports.Server.prototype,\n            'emit',\n            this._getPatchIncomingRequestFunction('http')\n          );\n        }\n        return moduleExports;\n      },\n      (moduleExports: Http) => {\n        if (moduleExports === undefined) return;\n\n        if (!this.getConfig().disableOutgoingRequestInstrumentation) {\n          this._unwrap(moduleExports, 'request');\n          this._unwrap(moduleExports, 'get');\n        }\n        if (!this.getConfig().disableIncomingRequestInstrumentation) {\n          this._unwrap(moduleExports.Server.prototype, 'emit');\n        }\n      }\n    );\n  }\n\n  private _getHttpsInstrumentation() {\n    return new InstrumentationNodeModuleDefinition(\n      'https',\n      ['*'],\n      (moduleExports: Https): Https => {\n        const isESM = (moduleExports as any)[Symbol.toStringTag] === 'Module';\n        if (!this.getConfig().disableOutgoingRequestInstrumentation) {\n          const patchedRequest = this._wrap(\n            moduleExports,\n            'request',\n            this._getPatchHttpsOutgoingRequestFunction('https')\n          ) as unknown as Func<http.ClientRequest>;\n          const patchedGet = this._wrap(\n            moduleExports,\n            'get',\n            this._getPatchHttpsOutgoingGetFunction(patchedRequest)\n          );\n          if (isESM) {\n            // To handle `import https from 'https'`, which returns the default\n            // export, we need to set `module.default.*`.\n            (moduleExports as any).default.request = patchedRequest;\n            (moduleExports as any).default.get = patchedGet;\n          }\n        }\n        if (!this.getConfig().disableIncomingRequestInstrumentation) {\n          this._wrap(\n            moduleExports.Server.prototype,\n            'emit',\n            this._getPatchIncomingRequestFunction('https')\n          );\n        }\n        return moduleExports;\n      },\n      (moduleExports: Https) => {\n        if (moduleExports === undefined) return;\n\n        if (!this.getConfig().disableOutgoingRequestInstrumentation) {\n          this._unwrap(moduleExports, 'request');\n          this._unwrap(moduleExports, 'get');\n        }\n        if (!this.getConfig().disableIncomingRequestInstrumentation) {\n          this._unwrap(moduleExports.Server.prototype, 'emit');\n        }\n      }\n    );\n  }\n\n  /**\n   * Creates spans for incoming requests, restoring spans' context if applied.\n   */\n  private _getPatchIncomingRequestFunction(component: 'http' | 'https') {\n    return (\n      original: (event: string, ...args: unknown[]) => boolean\n    ): ((this: unknown, event: string, ...args: unknown[]) => boolean) => {\n      return this._incomingRequestFunction(component, original);\n    };\n  }\n\n  /**\n   * Creates spans for outgoing requests, sending spans' context for distributed\n   * tracing.\n   */\n  private _getPatchOutgoingRequestFunction(component: 'http' | 'https') {\n    return (original: Func<http.ClientRequest>): Func<http.ClientRequest> => {\n      return this._outgoingRequestFunction(component, original);\n    };\n  }\n\n  private _getPatchOutgoingGetFunction(\n    clientRequest: (\n      options: http.RequestOptions | string | url.URL,\n      ...args: HttpRequestArgs\n    ) => http.ClientRequest\n  ) {\n    return (_original: Func<http.ClientRequest>): Func<http.ClientRequest> => {\n      // Re-implement http.get. This needs to be done (instead of using\n      // getPatchOutgoingRequestFunction to patch it) because we need to\n      // set the trace context header before the returned http.ClientRequest is\n      // ended. The Node.js docs state that the only differences between\n      // request and get are that (1) get defaults to the HTTP GET method and\n      // (2) the returned request object is ended immediately. The former is\n      // already true (at least in supported Node versions up to v10), so we\n      // simply follow the latter. Ref:\n      // https://nodejs.org/dist/latest/docs/api/http.html#http_http_get_options_callback\n      // https://github.com/googleapis/cloud-trace-nodejs/blob/master/src/instrumentations/instrumentation-http.ts#L198\n      return function outgoingGetRequest<\n        T extends http.RequestOptions | string | url.URL,\n      >(options: T, ...args: HttpRequestArgs): http.ClientRequest {\n        const req = clientRequest(options, ...args);\n        req.end();\n        return req;\n      };\n    };\n  }\n\n  /** Patches HTTPS outgoing requests */\n  private _getPatchHttpsOutgoingRequestFunction(component: 'http' | 'https') {\n    return (original: Func<http.ClientRequest>): Func<http.ClientRequest> => {\n      const instrumentation = this;\n      return function httpsOutgoingRequest(\n        // eslint-disable-next-line node/no-unsupported-features/node-builtins\n        options: https.RequestOptions | string | URL,\n        ...args: HttpRequestArgs\n      ): http.ClientRequest {\n        // Makes sure options will have default HTTPS parameters\n        if (\n          component === 'https' &&\n          typeof options === 'object' &&\n          options?.constructor?.name !== 'URL'\n        ) {\n          options = Object.assign({}, options);\n          instrumentation._setDefaultOptions(options);\n        }\n        return instrumentation._getPatchOutgoingRequestFunction(component)(\n          original\n        )(options, ...args);\n      };\n    };\n  }\n\n  private _setDefaultOptions(options: https.RequestOptions) {\n    options.protocol = options.protocol || 'https:';\n    options.port = options.port || 443;\n  }\n\n  /** Patches HTTPS outgoing get requests */\n  private _getPatchHttpsOutgoingGetFunction(\n    clientRequest: (\n      // eslint-disable-next-line node/no-unsupported-features/node-builtins\n      options: http.RequestOptions | string | URL,\n      ...args: HttpRequestArgs\n    ) => http.ClientRequest\n  ) {\n    return (original: Func<http.ClientRequest>): Func<http.ClientRequest> => {\n      const instrumentation = this;\n      return function httpsOutgoingRequest(\n        // eslint-disable-next-line node/no-unsupported-features/node-builtins\n        options: https.RequestOptions | string | URL,\n        ...args: HttpRequestArgs\n      ): http.ClientRequest {\n        return instrumentation._getPatchOutgoingGetFunction(clientRequest)(\n          original\n        )(options, ...args);\n      };\n    };\n  }\n\n  /**\n   * Attach event listeners to a client request to end span and add span attributes.\n   *\n   * @param request The original request object.\n   * @param span representing the current operation\n   * @param startTime representing the start time of the request to calculate duration in Metric\n   * @param oldMetricAttributes metric attributes for old semantic conventions\n   * @param stableMetricAttributes metric attributes for new semantic conventions\n   */\n  private _traceClientRequest(\n    request: http.ClientRequest,\n    span: Span,\n    startTime: HrTime,\n    oldMetricAttributes: Attributes,\n    stableMetricAttributes: Attributes\n  ): http.ClientRequest {\n    if (this.getConfig().requestHook) {\n      this._callRequestHook(span, request);\n    }\n\n    /**\n     * Determines if the request has errored or the response has ended/errored.\n     */\n    let responseFinished = false;\n\n    /*\n     * User 'response' event listeners can be added before our listener,\n     * force our listener to be the first, so response emitter is bound\n     * before any user listeners are added to it.\n     */\n    request.prependListener(\n      'response',\n      (response: http.IncomingMessage & { aborted?: boolean }) => {\n        this._diag.debug('outgoingRequest on response()');\n        if (request.listenerCount('response') <= 1) {\n          response.resume();\n        }\n        const responseAttributes = getOutgoingRequestAttributesOnResponse(\n          response,\n          this._semconvStability\n        );\n        span.setAttributes(responseAttributes);\n        oldMetricAttributes = Object.assign(\n          oldMetricAttributes,\n          getOutgoingRequestMetricAttributesOnResponse(responseAttributes)\n        );\n\n        if (this.getConfig().responseHook) {\n          this._callResponseHook(span, response);\n        }\n\n        this._headerCapture.client.captureRequestHeaders(span, header =>\n          request.getHeader(header)\n        );\n        this._headerCapture.client.captureResponseHeaders(\n          span,\n          header => response.headers[header]\n        );\n\n        context.bind(context.active(), response);\n\n        const endHandler = () => {\n          this._diag.debug('outgoingRequest on end()');\n          if (responseFinished) {\n            return;\n          }\n          responseFinished = true;\n          let status: SpanStatus;\n\n          if (response.aborted && !response.complete) {\n            status = { code: SpanStatusCode.ERROR };\n          } else {\n            // behaves same for new and old semconv\n            status = {\n              code: parseResponseStatus(SpanKind.CLIENT, response.statusCode),\n            };\n          }\n\n          span.setStatus(status);\n\n          if (this.getConfig().applyCustomAttributesOnSpan) {\n            safeExecuteInTheMiddle(\n              () =>\n                this.getConfig().applyCustomAttributesOnSpan!(\n                  span,\n                  request,\n                  response\n                ),\n              () => {},\n              true\n            );\n          }\n\n          this._closeHttpSpan(\n            span,\n            SpanKind.CLIENT,\n            startTime,\n            oldMetricAttributes,\n            stableMetricAttributes\n          );\n        };\n\n        response.on('end', endHandler);\n        // See https://github.com/open-telemetry/opentelemetry-js/pull/3625#issuecomment-1475673533\n        if (semver.lt(process.version, '16.0.0')) {\n          response.on('close', endHandler);\n        }\n        response.on(errorMonitor, (error: Err) => {\n          this._diag.debug('outgoingRequest on error()', error);\n          if (responseFinished) {\n            return;\n          }\n          responseFinished = true;\n          setSpanWithError(span, error, this._semconvStability);\n          span.setStatus({\n            code: SpanStatusCode.ERROR,\n            message: error.message,\n          });\n          this._closeHttpSpan(\n            span,\n            SpanKind.CLIENT,\n            startTime,\n            oldMetricAttributes,\n            stableMetricAttributes\n          );\n        });\n      }\n    );\n    request.on('close', () => {\n      this._diag.debug('outgoingRequest on request close()');\n      if (request.aborted || responseFinished) {\n        return;\n      }\n      responseFinished = true;\n      this._closeHttpSpan(\n        span,\n        SpanKind.CLIENT,\n        startTime,\n        oldMetricAttributes,\n        stableMetricAttributes\n      );\n    });\n    request.on(errorMonitor, (error: Err) => {\n      this._diag.debug('outgoingRequest on request error()', error);\n      if (responseFinished) {\n        return;\n      }\n      responseFinished = true;\n      setSpanWithError(span, error, this._semconvStability);\n      this._closeHttpSpan(\n        span,\n        SpanKind.CLIENT,\n        startTime,\n        oldMetricAttributes,\n        stableMetricAttributes\n      );\n    });\n\n    this._diag.debug('http.ClientRequest return request');\n    return request;\n  }\n\n  private _incomingRequestFunction(\n    component: 'http' | 'https',\n    original: (event: string, ...args: unknown[]) => boolean\n  ) {\n    const instrumentation = this;\n    return function incomingRequest(\n      this: unknown,\n      event: string,\n      ...args: unknown[]\n    ): boolean {\n      // Only traces request events\n      if (event !== 'request') {\n        return original.apply(this, [event, ...args]);\n      }\n\n      const request = args[0] as http.IncomingMessage;\n      const response = args[1] as http.ServerResponse & { socket: Socket };\n      const method = request.method || 'GET';\n\n      instrumentation._diag.debug(\n        `${component} instrumentation incomingRequest`\n      );\n\n      if (\n        safeExecuteInTheMiddle(\n          () =>\n            instrumentation.getConfig().ignoreIncomingRequestHook?.(request),\n          (e: unknown) => {\n            if (e != null) {\n              instrumentation._diag.error(\n                'caught ignoreIncomingRequestHook error: ',\n                e\n              );\n            }\n          },\n          true\n        )\n      ) {\n        return context.with(suppressTracing(context.active()), () => {\n          context.bind(context.active(), request);\n          context.bind(context.active(), response);\n          return original.apply(this, [event, ...args]);\n        });\n      }\n\n      const headers = request.headers;\n\n      const spanAttributes = getIncomingRequestAttributes(\n        request,\n        {\n          component: component,\n          serverName: instrumentation.getConfig().serverName,\n          hookAttributes: instrumentation._callStartSpanHook(\n            request,\n            instrumentation.getConfig().startIncomingSpanHook\n          ),\n          semconvStability: instrumentation._semconvStability,\n        },\n        instrumentation._diag\n      );\n\n      const spanOptions: SpanOptions = {\n        kind: SpanKind.SERVER,\n        attributes: spanAttributes,\n      };\n\n      const startTime = hrTime();\n      const oldMetricAttributes =\n        getIncomingRequestMetricAttributes(spanAttributes);\n\n      // request method and url.scheme are both required span attributes\n      const stableMetricAttributes: Attributes = {\n        [ATTR_HTTP_REQUEST_METHOD]: spanAttributes[ATTR_HTTP_REQUEST_METHOD],\n        [ATTR_URL_SCHEME]: spanAttributes[ATTR_URL_SCHEME],\n      };\n\n      // recommended if and only if one was sent, same as span recommendation\n      if (spanAttributes[ATTR_NETWORK_PROTOCOL_VERSION]) {\n        stableMetricAttributes[ATTR_NETWORK_PROTOCOL_VERSION] =\n          spanAttributes[ATTR_NETWORK_PROTOCOL_VERSION];\n      }\n\n      const ctx = propagation.extract(ROOT_CONTEXT, headers);\n      const span = instrumentation._startHttpSpan(method, spanOptions, ctx);\n      const rpcMetadata: RPCMetadata = {\n        type: RPCType.HTTP,\n        span,\n      };\n\n      return context.with(\n        setRPCMetadata(trace.setSpan(ctx, span), rpcMetadata),\n        () => {\n          context.bind(context.active(), request);\n          context.bind(context.active(), response);\n\n          if (instrumentation.getConfig().requestHook) {\n            instrumentation._callRequestHook(span, request);\n          }\n          if (instrumentation.getConfig().responseHook) {\n            instrumentation._callResponseHook(span, response);\n          }\n\n          instrumentation._headerCapture.server.captureRequestHeaders(\n            span,\n            header => request.headers[header]\n          );\n\n          // After 'error', no further events other than 'close' should be emitted.\n          let hasError = false;\n          response.on('close', () => {\n            if (hasError) {\n              return;\n            }\n            instrumentation._onServerResponseFinish(\n              request,\n              response,\n              span,\n              oldMetricAttributes,\n              stableMetricAttributes,\n              startTime\n            );\n          });\n          response.on(errorMonitor, (err: Err) => {\n            hasError = true;\n            instrumentation._onServerResponseError(\n              span,\n              oldMetricAttributes,\n              stableMetricAttributes,\n              startTime,\n              err\n            );\n          });\n\n          return safeExecuteInTheMiddle(\n            () => original.apply(this, [event, ...args]),\n            error => {\n              if (error) {\n                setSpanWithError(\n                  span,\n                  error,\n                  instrumentation._semconvStability\n                );\n                instrumentation._closeHttpSpan(\n                  span,\n                  SpanKind.SERVER,\n                  startTime,\n                  oldMetricAttributes,\n                  stableMetricAttributes\n                );\n                throw error;\n              }\n            }\n          );\n        }\n      );\n    };\n  }\n\n  private _outgoingRequestFunction(\n    component: 'http' | 'https',\n    original: Func<http.ClientRequest>\n  ): Func<http.ClientRequest> {\n    const instrumentation = this;\n    return function outgoingRequest(\n      this: unknown,\n      options: url.URL | http.RequestOptions | string,\n      ...args: unknown[]\n    ): http.ClientRequest {\n      if (!isValidOptionsType(options)) {\n        return original.apply(this, [options, ...args]);\n      }\n      const extraOptions =\n        typeof args[0] === 'object' &&\n        (typeof options === 'string' || options instanceof url.URL)\n          ? (args.shift() as http.RequestOptions)\n          : undefined;\n      const { method, invalidUrl, optionsParsed } = getRequestInfo(\n        instrumentation._diag,\n        options,\n        extraOptions\n      );\n      /**\n       * Node 8's https module directly call the http one so to avoid creating\n       * 2 span for the same request we need to check that the protocol is correct\n       * See: https://github.com/nodejs/node/blob/v8.17.0/lib/https.js#L245\n       */\n      if (\n        component === 'http' &&\n        semver.lt(process.version, '9.0.0') &&\n        optionsParsed.protocol === 'https:'\n      ) {\n        return original.apply(this, [optionsParsed, ...args]);\n      }\n\n      if (\n        safeExecuteInTheMiddle(\n          () =>\n            instrumentation\n              .getConfig()\n              .ignoreOutgoingRequestHook?.(optionsParsed),\n          (e: unknown) => {\n            if (e != null) {\n              instrumentation._diag.error(\n                'caught ignoreOutgoingRequestHook error: ',\n                e\n              );\n            }\n          },\n          true\n        )\n      ) {\n        return original.apply(this, [optionsParsed, ...args]);\n      }\n\n      const { hostname, port } = extractHostnameAndPort(optionsParsed);\n\n      const attributes = getOutgoingRequestAttributes(\n        optionsParsed,\n        {\n          component,\n          port,\n          hostname,\n          hookAttributes: instrumentation._callStartSpanHook(\n            optionsParsed,\n            instrumentation.getConfig().startOutgoingSpanHook\n          ),\n        },\n        instrumentation._semconvStability\n      );\n\n      const startTime = hrTime();\n      const oldMetricAttributes: Attributes =\n        getOutgoingRequestMetricAttributes(attributes);\n\n      // request method, server address, and server port are both required span attributes\n      const stableMetricAttributes: Attributes = {\n        [ATTR_HTTP_REQUEST_METHOD]: attributes[ATTR_HTTP_REQUEST_METHOD],\n        [ATTR_SERVER_ADDRESS]: attributes[ATTR_SERVER_ADDRESS],\n        [ATTR_SERVER_PORT]: attributes[ATTR_SERVER_PORT],\n      };\n\n      // required if and only if one was sent, same as span requirement\n      if (attributes[ATTR_HTTP_RESPONSE_STATUS_CODE]) {\n        stableMetricAttributes[ATTR_HTTP_RESPONSE_STATUS_CODE] =\n          attributes[ATTR_HTTP_RESPONSE_STATUS_CODE];\n      }\n\n      // recommended if and only if one was sent, same as span recommendation\n      if (attributes[ATTR_NETWORK_PROTOCOL_VERSION]) {\n        stableMetricAttributes[ATTR_NETWORK_PROTOCOL_VERSION] =\n          attributes[ATTR_NETWORK_PROTOCOL_VERSION];\n      }\n\n      const spanOptions: SpanOptions = {\n        kind: SpanKind.CLIENT,\n        attributes,\n      };\n      const span = instrumentation._startHttpSpan(method, spanOptions);\n\n      const parentContext = context.active();\n      const requestContext = trace.setSpan(parentContext, span);\n\n      if (!optionsParsed.headers) {\n        optionsParsed.headers = {};\n      } else {\n        // Make a copy of the headers object to avoid mutating an object the\n        // caller might have a reference to.\n        optionsParsed.headers = Object.assign({}, optionsParsed.headers);\n      }\n      propagation.inject(requestContext, optionsParsed.headers);\n\n      return context.with(requestContext, () => {\n        /*\n         * The response callback is registered before ClientRequest is bound,\n         * thus it is needed to bind it before the function call.\n         */\n        const cb = args[args.length - 1];\n        if (typeof cb === 'function') {\n          args[args.length - 1] = context.bind(parentContext, cb);\n        }\n\n        const request: http.ClientRequest = safeExecuteInTheMiddle(\n          () => {\n            if (invalidUrl) {\n              // we know that the url is invalid, there's no point in injecting context as it will fail validation.\n              // Passing in what the user provided will give the user an error that matches what they'd see without\n              // the instrumentation.\n              return original.apply(this, [options, ...args]);\n            } else {\n              return original.apply(this, [optionsParsed, ...args]);\n            }\n          },\n          error => {\n            if (error) {\n              setSpanWithError(span, error, instrumentation._semconvStability);\n              instrumentation._closeHttpSpan(\n                span,\n                SpanKind.CLIENT,\n                startTime,\n                oldMetricAttributes,\n                stableMetricAttributes\n              );\n              throw error;\n            }\n          }\n        );\n\n        instrumentation._diag.debug(\n          `${component} instrumentation outgoingRequest`\n        );\n        context.bind(parentContext, request);\n        return instrumentation._traceClientRequest(\n          request,\n          span,\n          startTime,\n          oldMetricAttributes,\n          stableMetricAttributes\n        );\n      });\n    };\n  }\n\n  private _onServerResponseFinish(\n    request: http.IncomingMessage,\n    response: http.ServerResponse,\n    span: Span,\n    oldMetricAttributes: Attributes,\n    stableMetricAttributes: Attributes,\n    startTime: HrTime\n  ) {\n    const attributes = getIncomingRequestAttributesOnResponse(\n      request,\n      response,\n      this._semconvStability\n    );\n    oldMetricAttributes = Object.assign(\n      oldMetricAttributes,\n      getIncomingRequestMetricAttributesOnResponse(attributes)\n    );\n    stableMetricAttributes = Object.assign(\n      stableMetricAttributes,\n      getIncomingStableRequestMetricAttributesOnResponse(attributes)\n    );\n\n    this._headerCapture.server.captureResponseHeaders(span, header =>\n      response.getHeader(header)\n    );\n\n    span.setAttributes(attributes).setStatus({\n      code: parseResponseStatus(SpanKind.SERVER, response.statusCode),\n    });\n\n    const route = attributes[SEMATTRS_HTTP_ROUTE];\n    if (route) {\n      span.updateName(`${request.method || 'GET'} ${route}`);\n    }\n\n    if (this.getConfig().applyCustomAttributesOnSpan) {\n      safeExecuteInTheMiddle(\n        () =>\n          this.getConfig().applyCustomAttributesOnSpan!(\n            span,\n            request,\n            response\n          ),\n        () => {},\n        true\n      );\n    }\n\n    this._closeHttpSpan(\n      span,\n      SpanKind.SERVER,\n      startTime,\n      oldMetricAttributes,\n      stableMetricAttributes\n    );\n  }\n\n  private _onServerResponseError(\n    span: Span,\n    oldMetricAttributes: Attributes,\n    stableMetricAttributes: Attributes,\n    startTime: HrTime,\n    error: Err\n  ) {\n    setSpanWithError(span, error, this._semconvStability);\n    // TODO get error attributes for metrics\n    this._closeHttpSpan(\n      span,\n      SpanKind.SERVER,\n      startTime,\n      oldMetricAttributes,\n      stableMetricAttributes\n    );\n  }\n\n  private _startHttpSpan(\n    name: string,\n    options: SpanOptions,\n    ctx = context.active()\n  ) {\n    /*\n     * If a parent is required but not present, we use a `NoopSpan` to still\n     * propagate context without recording it.\n     */\n    const requireParent =\n      options.kind === SpanKind.CLIENT\n        ? this.getConfig().requireParentforOutgoingSpans\n        : this.getConfig().requireParentforIncomingSpans;\n\n    let span: Span;\n    const currentSpan = trace.getSpan(ctx);\n\n    if (requireParent === true && currentSpan === undefined) {\n      span = trace.wrapSpanContext(INVALID_SPAN_CONTEXT);\n    } else if (requireParent === true && currentSpan?.spanContext().isRemote) {\n      span = currentSpan;\n    } else {\n      span = this.tracer.startSpan(name, options, ctx);\n    }\n    this._spanNotEnded.add(span);\n    return span;\n  }\n\n  private _closeHttpSpan(\n    span: Span,\n    spanKind: SpanKind,\n    startTime: HrTime,\n    oldMetricAttributes: Attributes,\n    stableMetricAttributes: Attributes\n  ) {\n    if (!this._spanNotEnded.has(span)) {\n      return;\n    }\n\n    span.end();\n    this._spanNotEnded.delete(span);\n\n    // Record metrics\n    const duration = hrTimeToMilliseconds(hrTimeDuration(startTime, hrTime()));\n    if (spanKind === SpanKind.SERVER) {\n      this._recordServerDuration(\n        duration,\n        oldMetricAttributes,\n        stableMetricAttributes\n      );\n    } else if (spanKind === SpanKind.CLIENT) {\n      this._recordClientDuration(\n        duration,\n        oldMetricAttributes,\n        stableMetricAttributes\n      );\n    }\n  }\n\n  private _callResponseHook(\n    span: Span,\n    response: http.IncomingMessage | http.ServerResponse\n  ) {\n    safeExecuteInTheMiddle(\n      () => this.getConfig().responseHook!(span, response),\n      () => {},\n      true\n    );\n  }\n\n  private _callRequestHook(\n    span: Span,\n    request: http.ClientRequest | http.IncomingMessage\n  ) {\n    safeExecuteInTheMiddle(\n      () => this.getConfig().requestHook!(span, request),\n      () => {},\n      true\n    );\n  }\n\n  private _callStartSpanHook(\n    request: http.IncomingMessage | http.RequestOptions,\n    hookFunc: Function | undefined\n  ) {\n    if (typeof hookFunc === 'function') {\n      return safeExecuteInTheMiddle(\n        () => hookFunc(request),\n        () => {},\n        true\n      );\n    }\n  }\n\n  private _createHeaderCapture() {\n    const config = this.getConfig();\n\n    return {\n      client: {\n        captureRequestHeaders: headerCapture(\n          'request',\n          config.headersToSpanAttributes?.client?.requestHeaders ?? []\n        ),\n        captureResponseHeaders: headerCapture(\n          'response',\n          config.headersToSpanAttributes?.client?.responseHeaders ?? []\n        ),\n      },\n      server: {\n        captureRequestHeaders: headerCapture(\n          'request',\n          config.headersToSpanAttributes?.server?.requestHeaders ?? []\n        ),\n        captureResponseHeaders: headerCapture(\n          'response',\n          config.headersToSpanAttributes?.server?.responseHeaders ?? []\n        ),\n      },\n    };\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport { HttpInstrumentation } from './http';\nexport {\n  HttpCustomAttributeFunction,\n  HttpInstrumentationConfig,\n  HttpRequestCustomAttributeFunction,\n  HttpResponseCustomAttributeFunction,\n  IgnoreIncomingRequestFunction,\n  IgnoreOutgoingRequestFunction,\n  StartIncomingSpanCustomAttributeFunction,\n  StartOutgoingSpanCustomAttributeFunction,\n} from './types';\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Creates a const map from the given values\n * @param values - An array of values to be used as keys and values in the map.\n * @returns A populated version of the map with the values and keys derived from the values.\n */\n/*#__NO_SIDE_EFFECTS__*/\nexport function createConstMap<T>(values: Array<T[keyof T]>): T {\n  // eslint-disable-next-line prefer-const, @typescript-eslint/no-explicit-any\n  let res: any = {};\n  const len = values.length;\n  for (let lp = 0; lp < len; lp++) {\n    const val = values[lp];\n    if (val) {\n      res[String(val).toUpperCase().replace(/[-.]/g, '_')] = val;\n    }\n  }\n\n  return res as T;\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { createConstMap } from '../internal/utils';\n\n//----------------------------------------------------------------------------------------------------------\n// DO NOT EDIT, this is an Auto-generated file from scripts/semconv/templates//templates/SemanticAttributes.ts.j2\n//----------------------------------------------------------------------------------------------------------\n\n//----------------------------------------------------------------------------------------------------------\n// Constant values for SemanticAttributes\n//----------------------------------------------------------------------------------------------------------\n\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nconst TMP_AWS_LAMBDA_INVOKED_ARN = 'aws.lambda.invoked_arn';\nconst TMP_DB_SYSTEM = 'db.system';\nconst TMP_DB_CONNECTION_STRING = 'db.connection_string';\nconst TMP_DB_USER = 'db.user';\nconst TMP_DB_JDBC_DRIVER_CLASSNAME = 'db.jdbc.driver_classname';\nconst TMP_DB_NAME = 'db.name';\nconst TMP_DB_STATEMENT = 'db.statement';\nconst TMP_DB_OPERATION = 'db.operation';\nconst TMP_DB_MSSQL_INSTANCE_NAME = 'db.mssql.instance_name';\nconst TMP_DB_CASSANDRA_KEYSPACE = 'db.cassandra.keyspace';\nconst TMP_DB_CASSANDRA_PAGE_SIZE = 'db.cassandra.page_size';\nconst TMP_DB_CASSANDRA_CONSISTENCY_LEVEL = 'db.cassandra.consistency_level';\nconst TMP_DB_CASSANDRA_TABLE = 'db.cassandra.table';\nconst TMP_DB_CASSANDRA_IDEMPOTENCE = 'db.cassandra.idempotence';\nconst TMP_DB_CASSANDRA_SPECULATIVE_EXECUTION_COUNT =\n  'db.cassandra.speculative_execution_count';\nconst TMP_DB_CASSANDRA_COORDINATOR_ID = 'db.cassandra.coordinator.id';\nconst TMP_DB_CASSANDRA_COORDINATOR_DC = 'db.cassandra.coordinator.dc';\nconst TMP_DB_HBASE_NAMESPACE = 'db.hbase.namespace';\nconst TMP_DB_REDIS_DATABASE_INDEX = 'db.redis.database_index';\nconst TMP_DB_MONGODB_COLLECTION = 'db.mongodb.collection';\nconst TMP_DB_SQL_TABLE = 'db.sql.table';\nconst TMP_EXCEPTION_TYPE = 'exception.type';\nconst TMP_EXCEPTION_MESSAGE = 'exception.message';\nconst TMP_EXCEPTION_STACKTRACE = 'exception.stacktrace';\nconst TMP_EXCEPTION_ESCAPED = 'exception.escaped';\nconst TMP_FAAS_TRIGGER = 'faas.trigger';\nconst TMP_FAAS_EXECUTION = 'faas.execution';\nconst TMP_FAAS_DOCUMENT_COLLECTION = 'faas.document.collection';\nconst TMP_FAAS_DOCUMENT_OPERATION = 'faas.document.operation';\nconst TMP_FAAS_DOCUMENT_TIME = 'faas.document.time';\nconst TMP_FAAS_DOCUMENT_NAME = 'faas.document.name';\nconst TMP_FAAS_TIME = 'faas.time';\nconst TMP_FAAS_CRON = 'faas.cron';\nconst TMP_FAAS_COLDSTART = 'faas.coldstart';\nconst TMP_FAAS_INVOKED_NAME = 'faas.invoked_name';\nconst TMP_FAAS_INVOKED_PROVIDER = 'faas.invoked_provider';\nconst TMP_FAAS_INVOKED_REGION = 'faas.invoked_region';\nconst TMP_NET_TRANSPORT = 'net.transport';\nconst TMP_NET_PEER_IP = 'net.peer.ip';\nconst TMP_NET_PEER_PORT = 'net.peer.port';\nconst TMP_NET_PEER_NAME = 'net.peer.name';\nconst TMP_NET_HOST_IP = 'net.host.ip';\nconst TMP_NET_HOST_PORT = 'net.host.port';\nconst TMP_NET_HOST_NAME = 'net.host.name';\nconst TMP_NET_HOST_CONNECTION_TYPE = 'net.host.connection.type';\nconst TMP_NET_HOST_CONNECTION_SUBTYPE = 'net.host.connection.subtype';\nconst TMP_NET_HOST_CARRIER_NAME = 'net.host.carrier.name';\nconst TMP_NET_HOST_CARRIER_MCC = 'net.host.carrier.mcc';\nconst TMP_NET_HOST_CARRIER_MNC = 'net.host.carrier.mnc';\nconst TMP_NET_HOST_CARRIER_ICC = 'net.host.carrier.icc';\nconst TMP_PEER_SERVICE = 'peer.service';\nconst TMP_ENDUSER_ID = 'enduser.id';\nconst TMP_ENDUSER_ROLE = 'enduser.role';\nconst TMP_ENDUSER_SCOPE = 'enduser.scope';\nconst TMP_THREAD_ID = 'thread.id';\nconst TMP_THREAD_NAME = 'thread.name';\nconst TMP_CODE_FUNCTION = 'code.function';\nconst TMP_CODE_NAMESPACE = 'code.namespace';\nconst TMP_CODE_FILEPATH = 'code.filepath';\nconst TMP_CODE_LINENO = 'code.lineno';\nconst TMP_HTTP_METHOD = 'http.method';\nconst TMP_HTTP_URL = 'http.url';\nconst TMP_HTTP_TARGET = 'http.target';\nconst TMP_HTTP_HOST = 'http.host';\nconst TMP_HTTP_SCHEME = 'http.scheme';\nconst TMP_HTTP_STATUS_CODE = 'http.status_code';\nconst TMP_HTTP_FLAVOR = 'http.flavor';\nconst TMP_HTTP_USER_AGENT = 'http.user_agent';\nconst TMP_HTTP_REQUEST_CONTENT_LENGTH = 'http.request_content_length';\nconst TMP_HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED =\n  'http.request_content_length_uncompressed';\nconst TMP_HTTP_RESPONSE_CONTENT_LENGTH = 'http.response_content_length';\nconst TMP_HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED =\n  'http.response_content_length_uncompressed';\nconst TMP_HTTP_SERVER_NAME = 'http.server_name';\nconst TMP_HTTP_ROUTE = 'http.route';\nconst TMP_HTTP_CLIENT_IP = 'http.client_ip';\nconst TMP_AWS_DYNAMODB_TABLE_NAMES = 'aws.dynamodb.table_names';\nconst TMP_AWS_DYNAMODB_CONSUMED_CAPACITY = 'aws.dynamodb.consumed_capacity';\nconst TMP_AWS_DYNAMODB_ITEM_COLLECTION_METRICS =\n  'aws.dynamodb.item_collection_metrics';\nconst TMP_AWS_DYNAMODB_PROVISIONED_READ_CAPACITY =\n  'aws.dynamodb.provisioned_read_capacity';\nconst TMP_AWS_DYNAMODB_PROVISIONED_WRITE_CAPACITY =\n  'aws.dynamodb.provisioned_write_capacity';\nconst TMP_AWS_DYNAMODB_CONSISTENT_READ = 'aws.dynamodb.consistent_read';\nconst TMP_AWS_DYNAMODB_PROJECTION = 'aws.dynamodb.projection';\nconst TMP_AWS_DYNAMODB_LIMIT = 'aws.dynamodb.limit';\nconst TMP_AWS_DYNAMODB_ATTRIBUTES_TO_GET = 'aws.dynamodb.attributes_to_get';\nconst TMP_AWS_DYNAMODB_INDEX_NAME = 'aws.dynamodb.index_name';\nconst TMP_AWS_DYNAMODB_SELECT = 'aws.dynamodb.select';\nconst TMP_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEXES =\n  'aws.dynamodb.global_secondary_indexes';\nconst TMP_AWS_DYNAMODB_LOCAL_SECONDARY_INDEXES =\n  'aws.dynamodb.local_secondary_indexes';\nconst TMP_AWS_DYNAMODB_EXCLUSIVE_START_TABLE =\n  'aws.dynamodb.exclusive_start_table';\nconst TMP_AWS_DYNAMODB_TABLE_COUNT = 'aws.dynamodb.table_count';\nconst TMP_AWS_DYNAMODB_SCAN_FORWARD = 'aws.dynamodb.scan_forward';\nconst TMP_AWS_DYNAMODB_SEGMENT = 'aws.dynamodb.segment';\nconst TMP_AWS_DYNAMODB_TOTAL_SEGMENTS = 'aws.dynamodb.total_segments';\nconst TMP_AWS_DYNAMODB_COUNT = 'aws.dynamodb.count';\nconst TMP_AWS_DYNAMODB_SCANNED_COUNT = 'aws.dynamodb.scanned_count';\nconst TMP_AWS_DYNAMODB_ATTRIBUTE_DEFINITIONS =\n  'aws.dynamodb.attribute_definitions';\nconst TMP_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEX_UPDATES =\n  'aws.dynamodb.global_secondary_index_updates';\nconst TMP_MESSAGING_SYSTEM = 'messaging.system';\nconst TMP_MESSAGING_DESTINATION = 'messaging.destination';\nconst TMP_MESSAGING_DESTINATION_KIND = 'messaging.destination_kind';\nconst TMP_MESSAGING_TEMP_DESTINATION = 'messaging.temp_destination';\nconst TMP_MESSAGING_PROTOCOL = 'messaging.protocol';\nconst TMP_MESSAGING_PROTOCOL_VERSION = 'messaging.protocol_version';\nconst TMP_MESSAGING_URL = 'messaging.url';\nconst TMP_MESSAGING_MESSAGE_ID = 'messaging.message_id';\nconst TMP_MESSAGING_CONVERSATION_ID = 'messaging.conversation_id';\nconst TMP_MESSAGING_MESSAGE_PAYLOAD_SIZE_BYTES =\n  'messaging.message_payload_size_bytes';\nconst TMP_MESSAGING_MESSAGE_PAYLOAD_COMPRESSED_SIZE_BYTES =\n  'messaging.message_payload_compressed_size_bytes';\nconst TMP_MESSAGING_OPERATION = 'messaging.operation';\nconst TMP_MESSAGING_CONSUMER_ID = 'messaging.consumer_id';\nconst TMP_MESSAGING_RABBITMQ_ROUTING_KEY = 'messaging.rabbitmq.routing_key';\nconst TMP_MESSAGING_KAFKA_MESSAGE_KEY = 'messaging.kafka.message_key';\nconst TMP_MESSAGING_KAFKA_CONSUMER_GROUP = 'messaging.kafka.consumer_group';\nconst TMP_MESSAGING_KAFKA_CLIENT_ID = 'messaging.kafka.client_id';\nconst TMP_MESSAGING_KAFKA_PARTITION = 'messaging.kafka.partition';\nconst TMP_MESSAGING_KAFKA_TOMBSTONE = 'messaging.kafka.tombstone';\nconst TMP_RPC_SYSTEM = 'rpc.system';\nconst TMP_RPC_SERVICE = 'rpc.service';\nconst TMP_RPC_METHOD = 'rpc.method';\nconst TMP_RPC_GRPC_STATUS_CODE = 'rpc.grpc.status_code';\nconst TMP_RPC_JSONRPC_VERSION = 'rpc.jsonrpc.version';\nconst TMP_RPC_JSONRPC_REQUEST_ID = 'rpc.jsonrpc.request_id';\nconst TMP_RPC_JSONRPC_ERROR_CODE = 'rpc.jsonrpc.error_code';\nconst TMP_RPC_JSONRPC_ERROR_MESSAGE = 'rpc.jsonrpc.error_message';\nconst TMP_MESSAGE_TYPE = 'message.type';\nconst TMP_MESSAGE_ID = 'message.id';\nconst TMP_MESSAGE_COMPRESSED_SIZE = 'message.compressed_size';\nconst TMP_MESSAGE_UNCOMPRESSED_SIZE = 'message.uncompressed_size';\n\n/**\n * The full invoked ARN as provided on the `Context` passed to the function (`Lambda-Runtime-Invoked-Function-Arn` header on the `/runtime/invocation/next` applicable).\n *\n * Note: This may be different from `faas.id` if an alias is involved.\n *\n * @deprecated Use ATTR_AWS_LAMBDA_INVOKED_ARN in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_AWS_LAMBDA_INVOKED_ARN = TMP_AWS_LAMBDA_INVOKED_ARN;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use ATTR_DB_SYSTEM in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_DB_SYSTEM = TMP_DB_SYSTEM;\n\n/**\n * The connection string used to connect to the database. It is recommended to remove embedded credentials.\n *\n * @deprecated Use ATTR_DB_CONNECTION_STRING in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_DB_CONNECTION_STRING = TMP_DB_CONNECTION_STRING;\n\n/**\n * Username for accessing the database.\n *\n * @deprecated Use ATTR_DB_USER in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_DB_USER = TMP_DB_USER;\n\n/**\n * The fully-qualified class name of the [Java Database Connectivity (JDBC)](https://docs.oracle.com/javase/8/docs/technotes/guides/jdbc/) driver used to connect.\n *\n * @deprecated Use ATTR_DB_JDBC_DRIVER_CLASSNAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_DB_JDBC_DRIVER_CLASSNAME = TMP_DB_JDBC_DRIVER_CLASSNAME;\n\n/**\n * If no [tech-specific attribute](#call-level-attributes-for-specific-technologies) is defined, this attribute is used to report the name of the database being accessed. For commands that switch the database, this should be set to the target database (even if the command fails).\n *\n * Note: In some SQL databases, the database name to be used is called &#34;schema name&#34;.\n *\n * @deprecated Use ATTR_DB_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_DB_NAME = TMP_DB_NAME;\n\n/**\n * The database statement being executed.\n *\n * Note: The value may be sanitized to exclude sensitive information.\n *\n * @deprecated Use ATTR_DB_STATEMENT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_DB_STATEMENT = TMP_DB_STATEMENT;\n\n/**\n * The name of the operation being executed, e.g. the [MongoDB command name](https://docs.mongodb.com/manual/reference/command/#database-operations) such as `findAndModify`, or the SQL keyword.\n *\n * Note: When setting this to an SQL keyword, it is not recommended to attempt any client-side parsing of `db.statement` just to get this property, but it should be set if the operation name is provided by the library being instrumented. If the SQL statement has an ambiguous operation, or performs more than one operation, this value may be omitted.\n *\n * @deprecated Use ATTR_DB_OPERATION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_DB_OPERATION = TMP_DB_OPERATION;\n\n/**\n * The Microsoft SQL Server [instance name](https://docs.microsoft.com/en-us/sql/connect/jdbc/building-the-connection-url?view=sql-server-ver15) connecting to. This name is used to determine the port of a named instance.\n *\n * Note: If setting a `db.mssql.instance_name`, `net.peer.port` is no longer required (but still recommended if non-standard).\n *\n * @deprecated Use ATTR_DB_MSSQL_INSTANCE_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_DB_MSSQL_INSTANCE_NAME = TMP_DB_MSSQL_INSTANCE_NAME;\n\n/**\n * The name of the keyspace being accessed. To be used instead of the generic `db.name` attribute.\n *\n * @deprecated Use ATTR_DB_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_DB_CASSANDRA_KEYSPACE = TMP_DB_CASSANDRA_KEYSPACE;\n\n/**\n * The fetch size used for paging, i.e. how many rows will be returned at once.\n *\n * @deprecated Use ATTR_DB_CASSANDRA_PAGE_SIZE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_DB_CASSANDRA_PAGE_SIZE = TMP_DB_CASSANDRA_PAGE_SIZE;\n\n/**\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n *\n * @deprecated Use ATTR_DB_CASSANDRA_CONSISTENCY_LEVEL in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_DB_CASSANDRA_CONSISTENCY_LEVEL =\n  TMP_DB_CASSANDRA_CONSISTENCY_LEVEL;\n\n/**\n * The name of the primary table that the operation is acting upon, including the schema name (if applicable).\n *\n * Note: This mirrors the db.sql.table attribute but references cassandra rather than sql. It is not recommended to attempt any client-side parsing of `db.statement` just to get this property, but it should be set if it is provided by the library being instrumented. If the operation is acting upon an anonymous table, or more than one table, this value MUST NOT be set.\n *\n * @deprecated Use ATTR_DB_CASSANDRA_TABLE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_DB_CASSANDRA_TABLE = TMP_DB_CASSANDRA_TABLE;\n\n/**\n * Whether or not the query is idempotent.\n *\n * @deprecated Use ATTR_DB_CASSANDRA_IDEMPOTENCE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_DB_CASSANDRA_IDEMPOTENCE = TMP_DB_CASSANDRA_IDEMPOTENCE;\n\n/**\n * The number of times a query was speculatively executed. Not set or `0` if the query was not executed speculatively.\n *\n * @deprecated Use ATTR_DB_CASSANDRA_SPECULATIVE_EXECUTION_COUNT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_DB_CASSANDRA_SPECULATIVE_EXECUTION_COUNT =\n  TMP_DB_CASSANDRA_SPECULATIVE_EXECUTION_COUNT;\n\n/**\n * The ID of the coordinating node for a query.\n *\n * @deprecated Use ATTR_DB_CASSANDRA_COORDINATOR_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_DB_CASSANDRA_COORDINATOR_ID =\n  TMP_DB_CASSANDRA_COORDINATOR_ID;\n\n/**\n * The data center of the coordinating node for a query.\n *\n * @deprecated Use ATTR_DB_CASSANDRA_COORDINATOR_DC in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_DB_CASSANDRA_COORDINATOR_DC =\n  TMP_DB_CASSANDRA_COORDINATOR_DC;\n\n/**\n * The [HBase namespace](https://hbase.apache.org/book.html#_namespace) being accessed. To be used instead of the generic `db.name` attribute.\n *\n * @deprecated Use ATTR_DB_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_DB_HBASE_NAMESPACE = TMP_DB_HBASE_NAMESPACE;\n\n/**\n * The index of the database being accessed as used in the [`SELECT` command](https://redis.io/commands/select), provided as an integer. To be used instead of the generic `db.name` attribute.\n *\n * @deprecated Use ATTR_DB_REDIS_DATABASE_INDEX in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_DB_REDIS_DATABASE_INDEX = TMP_DB_REDIS_DATABASE_INDEX;\n\n/**\n * The collection being accessed within the database stated in `db.name`.\n *\n * @deprecated Use ATTR_DB_MONGODB_COLLECTION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_DB_MONGODB_COLLECTION = TMP_DB_MONGODB_COLLECTION;\n\n/**\n * The name of the primary table that the operation is acting upon, including the schema name (if applicable).\n *\n * Note: It is not recommended to attempt any client-side parsing of `db.statement` just to get this property, but it should be set if it is provided by the library being instrumented. If the operation is acting upon an anonymous table, or more than one table, this value MUST NOT be set.\n *\n * @deprecated Use ATTR_DB_SQL_TABLE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_DB_SQL_TABLE = TMP_DB_SQL_TABLE;\n\n/**\n * The type of the exception (its fully-qualified class name, if applicable). The dynamic type of the exception should be preferred over the static type in languages that support it.\n *\n * @deprecated Use ATTR_EXCEPTION_TYPE.\n */\nexport const SEMATTRS_EXCEPTION_TYPE = TMP_EXCEPTION_TYPE;\n\n/**\n * The exception message.\n *\n * @deprecated Use ATTR_EXCEPTION_MESSAGE.\n */\nexport const SEMATTRS_EXCEPTION_MESSAGE = TMP_EXCEPTION_MESSAGE;\n\n/**\n * A stacktrace as a string in the natural representation for the language runtime. The representation is to be determined and documented by each language SIG.\n *\n * @deprecated Use ATTR_EXCEPTION_STACKTRACE.\n */\nexport const SEMATTRS_EXCEPTION_STACKTRACE = TMP_EXCEPTION_STACKTRACE;\n\n/**\n* SHOULD be set to true if the exception event is recorded at a point where it is known that the exception is escaping the scope of the span.\n*\n* Note: An exception is considered to have escaped (or left) the scope of a span,\nif that span is ended while the exception is still logically &#34;in flight&#34;.\nThis may be actually &#34;in flight&#34; in some languages (e.g. if the exception\nis passed to a Context manager&#39;s `__exit__` method in Python) but will\nusually be caught at the point of recording the exception in most languages.\n\nIt is usually not possible to determine at the point where an exception is thrown\nwhether it will escape the scope of a span.\nHowever, it is trivial to know that an exception\nwill escape, if one checks for an active exception just before ending the span,\nas done in the [example above](#exception-end-example).\n\nIt follows that an exception may still escape the scope of the span\neven if the `exception.escaped` attribute was not set or set to false,\nsince the event might have been recorded at a time where it was not\nclear whether the exception will escape.\n*\n* @deprecated Use ATTR_EXCEPTION_ESCAPED.\n*/\nexport const SEMATTRS_EXCEPTION_ESCAPED = TMP_EXCEPTION_ESCAPED;\n\n/**\n * Type of the trigger on which the function is executed.\n *\n * @deprecated Use ATTR_FAAS_TRIGGER in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_FAAS_TRIGGER = TMP_FAAS_TRIGGER;\n\n/**\n * The execution ID of the current function execution.\n *\n * @deprecated Use ATTR_FAAS_INVOCATION_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_FAAS_EXECUTION = TMP_FAAS_EXECUTION;\n\n/**\n * The name of the source on which the triggering operation was performed. For example, in Cloud Storage or S3 corresponds to the bucket name, and in Cosmos DB to the database name.\n *\n * @deprecated Use ATTR_FAAS_DOCUMENT_COLLECTION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_FAAS_DOCUMENT_COLLECTION = TMP_FAAS_DOCUMENT_COLLECTION;\n\n/**\n * Describes the type of the operation that was performed on the data.\n *\n * @deprecated Use ATTR_FAAS_DOCUMENT_OPERATION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_FAAS_DOCUMENT_OPERATION = TMP_FAAS_DOCUMENT_OPERATION;\n\n/**\n * A string containing the time when the data was accessed in the [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format expressed in [UTC](https://www.w3.org/TR/NOTE-datetime).\n *\n * @deprecated Use ATTR_FAAS_DOCUMENT_TIME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_FAAS_DOCUMENT_TIME = TMP_FAAS_DOCUMENT_TIME;\n\n/**\n * The document name/table subjected to the operation. For example, in Cloud Storage or S3 is the name of the file, and in Cosmos DB the table name.\n *\n * @deprecated Use ATTR_FAAS_DOCUMENT_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_FAAS_DOCUMENT_NAME = TMP_FAAS_DOCUMENT_NAME;\n\n/**\n * A string containing the function invocation time in the [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format expressed in [UTC](https://www.w3.org/TR/NOTE-datetime).\n *\n * @deprecated Use ATTR_FAAS_TIME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_FAAS_TIME = TMP_FAAS_TIME;\n\n/**\n * A string containing the schedule period as [Cron Expression](https://docs.oracle.com/cd/E12058_01/doc/doc.1014/e12030/cron_expressions.htm).\n *\n * @deprecated Use ATTR_FAAS_CRON in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_FAAS_CRON = TMP_FAAS_CRON;\n\n/**\n * A boolean that is true if the serverless function is executed for the first time (aka cold-start).\n *\n * @deprecated Use ATTR_FAAS_COLDSTART in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_FAAS_COLDSTART = TMP_FAAS_COLDSTART;\n\n/**\n * The name of the invoked function.\n *\n * Note: SHOULD be equal to the `faas.name` resource attribute of the invoked function.\n *\n * @deprecated Use ATTR_FAAS_INVOKED_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_FAAS_INVOKED_NAME = TMP_FAAS_INVOKED_NAME;\n\n/**\n * The cloud provider of the invoked function.\n *\n * Note: SHOULD be equal to the `cloud.provider` resource attribute of the invoked function.\n *\n * @deprecated Use ATTR_FAAS_INVOKED_PROVIDER in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_FAAS_INVOKED_PROVIDER = TMP_FAAS_INVOKED_PROVIDER;\n\n/**\n * The cloud region of the invoked function.\n *\n * Note: SHOULD be equal to the `cloud.region` resource attribute of the invoked function.\n *\n * @deprecated Use ATTR_FAAS_INVOKED_REGION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_FAAS_INVOKED_REGION = TMP_FAAS_INVOKED_REGION;\n\n/**\n * Transport protocol used. See note below.\n *\n * @deprecated Use ATTR_NET_TRANSPORT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_NET_TRANSPORT = TMP_NET_TRANSPORT;\n\n/**\n * Remote address of the peer (dotted decimal for IPv4 or [RFC5952](https://tools.ietf.org/html/rfc5952) for IPv6).\n *\n * @deprecated Use ATTR_NET_PEER_IP in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_NET_PEER_IP = TMP_NET_PEER_IP;\n\n/**\n * Remote port number.\n *\n * @deprecated Use ATTR_NET_PEER_PORT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_NET_PEER_PORT = TMP_NET_PEER_PORT;\n\n/**\n * Remote hostname or similar, see note below.\n *\n * @deprecated Use ATTR_NET_PEER_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_NET_PEER_NAME = TMP_NET_PEER_NAME;\n\n/**\n * Like `net.peer.ip` but for the host IP. Useful in case of a multi-IP host.\n *\n * @deprecated Use ATTR_NET_HOST_IP in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_NET_HOST_IP = TMP_NET_HOST_IP;\n\n/**\n * Like `net.peer.port` but for the host port.\n *\n * @deprecated Use ATTR_NET_HOST_PORT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_NET_HOST_PORT = TMP_NET_HOST_PORT;\n\n/**\n * Local hostname or similar, see note below.\n *\n * @deprecated Use ATTR_NET_HOST_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_NET_HOST_NAME = TMP_NET_HOST_NAME;\n\n/**\n * The internet connection type currently being used by the host.\n *\n * @deprecated Use ATTR_NETWORK_CONNECTION_TYPE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_NET_HOST_CONNECTION_TYPE = TMP_NET_HOST_CONNECTION_TYPE;\n\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use ATTR_NETWORK_CONNECTION_SUBTYPE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_NET_HOST_CONNECTION_SUBTYPE =\n  TMP_NET_HOST_CONNECTION_SUBTYPE;\n\n/**\n * The name of the mobile carrier.\n *\n * @deprecated Use ATTR_NETWORK_CARRIER_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_NET_HOST_CARRIER_NAME = TMP_NET_HOST_CARRIER_NAME;\n\n/**\n * The mobile carrier country code.\n *\n * @deprecated Use ATTR_NETWORK_CARRIER_MCC in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_NET_HOST_CARRIER_MCC = TMP_NET_HOST_CARRIER_MCC;\n\n/**\n * The mobile carrier network code.\n *\n * @deprecated Use ATTR_NETWORK_CARRIER_MNC in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_NET_HOST_CARRIER_MNC = TMP_NET_HOST_CARRIER_MNC;\n\n/**\n * The ISO 3166-1 alpha-2 2-character country code associated with the mobile carrier network.\n *\n * @deprecated Use ATTR_NETWORK_CARRIER_ICC in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_NET_HOST_CARRIER_ICC = TMP_NET_HOST_CARRIER_ICC;\n\n/**\n * The [`service.name`](../../resource/semantic_conventions/README.md#service) of the remote service. SHOULD be equal to the actual `service.name` resource attribute of the remote service if any.\n *\n * @deprecated Use ATTR_PEER_SERVICE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_PEER_SERVICE = TMP_PEER_SERVICE;\n\n/**\n * Username or client_id extracted from the access token or [Authorization](https://tools.ietf.org/html/rfc7235#section-4.2) header in the inbound request from outside the system.\n *\n * @deprecated Use ATTR_ENDUSER_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_ENDUSER_ID = TMP_ENDUSER_ID;\n\n/**\n * Actual/assumed role the client is making the request under extracted from token or application security context.\n *\n * @deprecated Use ATTR_ENDUSER_ROLE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_ENDUSER_ROLE = TMP_ENDUSER_ROLE;\n\n/**\n * Scopes or granted authorities the client currently possesses extracted from token or application security context. The value would come from the scope associated with an [OAuth 2.0 Access Token](https://tools.ietf.org/html/rfc6749#section-3.3) or an attribute value in a [SAML 2.0 Assertion](http://docs.oasis-open.org/security/saml/Post2.0/sstc-saml-tech-overview-2.0.html).\n *\n * @deprecated Use ATTR_ENDUSER_SCOPE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_ENDUSER_SCOPE = TMP_ENDUSER_SCOPE;\n\n/**\n * Current &#34;managed&#34; thread ID (as opposed to OS thread ID).\n *\n * @deprecated Use ATTR_THREAD_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_THREAD_ID = TMP_THREAD_ID;\n\n/**\n * Current thread name.\n *\n * @deprecated Use ATTR_THREAD_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_THREAD_NAME = TMP_THREAD_NAME;\n\n/**\n * The method or function name, or equivalent (usually rightmost part of the code unit&#39;s name).\n *\n * @deprecated Use ATTR_CODE_FUNCTION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_CODE_FUNCTION = TMP_CODE_FUNCTION;\n\n/**\n * The &#34;namespace&#34; within which `code.function` is defined. Usually the qualified class or module name, such that `code.namespace` + some separator + `code.function` form a unique identifier for the code unit.\n *\n * @deprecated Use ATTR_CODE_NAMESPACE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_CODE_NAMESPACE = TMP_CODE_NAMESPACE;\n\n/**\n * The source code file name that identifies the code unit as uniquely as possible (preferably an absolute file path).\n *\n * @deprecated Use ATTR_CODE_FILEPATH in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_CODE_FILEPATH = TMP_CODE_FILEPATH;\n\n/**\n * The line number in `code.filepath` best representing the operation. It SHOULD point within the code unit named in `code.function`.\n *\n * @deprecated Use ATTR_CODE_LINENO in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_CODE_LINENO = TMP_CODE_LINENO;\n\n/**\n * HTTP request method.\n *\n * @deprecated Use ATTR_HTTP_METHOD in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_HTTP_METHOD = TMP_HTTP_METHOD;\n\n/**\n * Full HTTP request URL in the form `scheme://host[:port]/path?query[#fragment]`. Usually the fragment is not transmitted over HTTP, but if it is known, it should be included nevertheless.\n *\n * Note: `http.url` MUST NOT contain credentials passed via URL in form of `https://username:password@www.example.com/`. In such case the attribute&#39;s value should be `https://www.example.com/`.\n *\n * @deprecated Use ATTR_HTTP_URL in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_HTTP_URL = TMP_HTTP_URL;\n\n/**\n * The full request target as passed in a HTTP request line or equivalent.\n *\n * @deprecated Use ATTR_HTTP_TARGET in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_HTTP_TARGET = TMP_HTTP_TARGET;\n\n/**\n * The value of the [HTTP host header](https://tools.ietf.org/html/rfc7230#section-5.4). An empty Host header should also be reported, see note.\n *\n * Note: When the header is present but empty the attribute SHOULD be set to the empty string. Note that this is a valid situation that is expected in certain cases, according the aforementioned [section of RFC 7230](https://tools.ietf.org/html/rfc7230#section-5.4). When the header is not set the attribute MUST NOT be set.\n *\n * @deprecated Use ATTR_HTTP_HOST in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_HTTP_HOST = TMP_HTTP_HOST;\n\n/**\n * The URI scheme identifying the used protocol.\n *\n * @deprecated Use ATTR_HTTP_SCHEME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_HTTP_SCHEME = TMP_HTTP_SCHEME;\n\n/**\n * [HTTP response status code](https://tools.ietf.org/html/rfc7231#section-6).\n *\n * @deprecated Use ATTR_HTTP_STATUS_CODE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_HTTP_STATUS_CODE = TMP_HTTP_STATUS_CODE;\n\n/**\n * Kind of HTTP protocol used.\n *\n * Note: If `net.transport` is not specified, it can be assumed to be `IP.TCP` except if `http.flavor` is `QUIC`, in which case `IP.UDP` is assumed.\n *\n * @deprecated Use ATTR_HTTP_FLAVOR in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_HTTP_FLAVOR = TMP_HTTP_FLAVOR;\n\n/**\n * Value of the [HTTP User-Agent](https://tools.ietf.org/html/rfc7231#section-5.5.3) header sent by the client.\n *\n * @deprecated Use ATTR_HTTP_USER_AGENT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_HTTP_USER_AGENT = TMP_HTTP_USER_AGENT;\n\n/**\n * The size of the request payload body in bytes. This is the number of bytes transferred excluding headers and is often, but not always, present as the [Content-Length](https://tools.ietf.org/html/rfc7230#section-3.3.2) header. For requests using transport encoding, this should be the compressed size.\n *\n * @deprecated Use ATTR_HTTP_REQUEST_CONTENT_LENGTH in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_HTTP_REQUEST_CONTENT_LENGTH =\n  TMP_HTTP_REQUEST_CONTENT_LENGTH;\n\n/**\n * The size of the uncompressed request payload body after transport decoding. Not set if transport encoding not used.\n *\n * @deprecated Use ATTR_HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED =\n  TMP_HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED;\n\n/**\n * The size of the response payload body in bytes. This is the number of bytes transferred excluding headers and is often, but not always, present as the [Content-Length](https://tools.ietf.org/html/rfc7230#section-3.3.2) header. For requests using transport encoding, this should be the compressed size.\n *\n * @deprecated Use ATTR_HTTP_RESPONSE_CONTENT_LENGTH in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_HTTP_RESPONSE_CONTENT_LENGTH =\n  TMP_HTTP_RESPONSE_CONTENT_LENGTH;\n\n/**\n * The size of the uncompressed response payload body after transport decoding. Not set if transport encoding not used.\n *\n * @deprecated Use ATTR_HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED =\n  TMP_HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED;\n\n/**\n * The primary server name of the matched virtual host. This should be obtained via configuration. If no such configuration can be obtained, this attribute MUST NOT be set ( `net.host.name` should be used instead).\n *\n * Note: `http.url` is usually not readily available on the server side but would have to be assembled in a cumbersome and sometimes lossy process from other information (see e.g. open-telemetry/opentelemetry-python/pull/148). It is thus preferred to supply the raw data that is available.\n *\n * @deprecated Use ATTR_HTTP_SERVER_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_HTTP_SERVER_NAME = TMP_HTTP_SERVER_NAME;\n\n/**\n * The matched route (path template).\n *\n * @deprecated Use ATTR_HTTP_ROUTE.\n */\nexport const SEMATTRS_HTTP_ROUTE = TMP_HTTP_ROUTE;\n\n/**\n* The IP address of the original client behind all proxies, if known (e.g. from [X-Forwarded-For](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Forwarded-For)).\n*\n* Note: This is not necessarily the same as `net.peer.ip`, which would\nidentify the network-level peer, which may be a proxy.\n\nThis attribute should be set when a source of information different\nfrom the one used for `net.peer.ip`, is available even if that other\nsource just confirms the same value as `net.peer.ip`.\nRationale: For `net.peer.ip`, one typically does not know if it\ncomes from a proxy, reverse proxy, or the actual client. Setting\n`http.client_ip` when it&#39;s the same as `net.peer.ip` means that\none is at least somewhat confident that the address is not that of\nthe closest proxy.\n*\n* @deprecated Use ATTR_HTTP_CLIENT_IP in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n*/\nexport const SEMATTRS_HTTP_CLIENT_IP = TMP_HTTP_CLIENT_IP;\n\n/**\n * The keys in the `RequestItems` object field.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_TABLE_NAMES in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_AWS_DYNAMODB_TABLE_NAMES = TMP_AWS_DYNAMODB_TABLE_NAMES;\n\n/**\n * The JSON-serialized value of each item in the `ConsumedCapacity` response field.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_CONSUMED_CAPACITY in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_AWS_DYNAMODB_CONSUMED_CAPACITY =\n  TMP_AWS_DYNAMODB_CONSUMED_CAPACITY;\n\n/**\n * The JSON-serialized value of the `ItemCollectionMetrics` response field.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_ITEM_COLLECTION_METRICS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_AWS_DYNAMODB_ITEM_COLLECTION_METRICS =\n  TMP_AWS_DYNAMODB_ITEM_COLLECTION_METRICS;\n\n/**\n * The value of the `ProvisionedThroughput.ReadCapacityUnits` request parameter.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_PROVISIONED_READ_CAPACITY in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_AWS_DYNAMODB_PROVISIONED_READ_CAPACITY =\n  TMP_AWS_DYNAMODB_PROVISIONED_READ_CAPACITY;\n\n/**\n * The value of the `ProvisionedThroughput.WriteCapacityUnits` request parameter.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_PROVISIONED_WRITE_CAPACITY in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_AWS_DYNAMODB_PROVISIONED_WRITE_CAPACITY =\n  TMP_AWS_DYNAMODB_PROVISIONED_WRITE_CAPACITY;\n\n/**\n * The value of the `ConsistentRead` request parameter.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_CONSISTENT_READ in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_AWS_DYNAMODB_CONSISTENT_READ =\n  TMP_AWS_DYNAMODB_CONSISTENT_READ;\n\n/**\n * The value of the `ProjectionExpression` request parameter.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_PROJECTION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_AWS_DYNAMODB_PROJECTION = TMP_AWS_DYNAMODB_PROJECTION;\n\n/**\n * The value of the `Limit` request parameter.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_LIMIT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_AWS_DYNAMODB_LIMIT = TMP_AWS_DYNAMODB_LIMIT;\n\n/**\n * The value of the `AttributesToGet` request parameter.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_ATTRIBUTES_TO_GET in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_AWS_DYNAMODB_ATTRIBUTES_TO_GET =\n  TMP_AWS_DYNAMODB_ATTRIBUTES_TO_GET;\n\n/**\n * The value of the `IndexName` request parameter.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_INDEX_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_AWS_DYNAMODB_INDEX_NAME = TMP_AWS_DYNAMODB_INDEX_NAME;\n\n/**\n * The value of the `Select` request parameter.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_SELECT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_AWS_DYNAMODB_SELECT = TMP_AWS_DYNAMODB_SELECT;\n\n/**\n * The JSON-serialized value of each item of the `GlobalSecondaryIndexes` request field.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEXES in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEXES =\n  TMP_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEXES;\n\n/**\n * The JSON-serialized value of each item of the `LocalSecondaryIndexes` request field.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_LOCAL_SECONDARY_INDEXES in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_AWS_DYNAMODB_LOCAL_SECONDARY_INDEXES =\n  TMP_AWS_DYNAMODB_LOCAL_SECONDARY_INDEXES;\n\n/**\n * The value of the `ExclusiveStartTableName` request parameter.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_EXCLUSIVE_START_TABLE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_AWS_DYNAMODB_EXCLUSIVE_START_TABLE =\n  TMP_AWS_DYNAMODB_EXCLUSIVE_START_TABLE;\n\n/**\n * The the number of items in the `TableNames` response parameter.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_TABLE_COUNT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_AWS_DYNAMODB_TABLE_COUNT = TMP_AWS_DYNAMODB_TABLE_COUNT;\n\n/**\n * The value of the `ScanIndexForward` request parameter.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_SCAN_FORWARD in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_AWS_DYNAMODB_SCAN_FORWARD = TMP_AWS_DYNAMODB_SCAN_FORWARD;\n\n/**\n * The value of the `Segment` request parameter.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_SEGMENT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_AWS_DYNAMODB_SEGMENT = TMP_AWS_DYNAMODB_SEGMENT;\n\n/**\n * The value of the `TotalSegments` request parameter.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_TOTAL_SEGMENTS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_AWS_DYNAMODB_TOTAL_SEGMENTS =\n  TMP_AWS_DYNAMODB_TOTAL_SEGMENTS;\n\n/**\n * The value of the `Count` response parameter.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_COUNT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_AWS_DYNAMODB_COUNT = TMP_AWS_DYNAMODB_COUNT;\n\n/**\n * The value of the `ScannedCount` response parameter.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_SCANNED_COUNT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_AWS_DYNAMODB_SCANNED_COUNT =\n  TMP_AWS_DYNAMODB_SCANNED_COUNT;\n\n/**\n * The JSON-serialized value of each item in the `AttributeDefinitions` request field.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_ATTRIBUTE_DEFINITIONS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_AWS_DYNAMODB_ATTRIBUTE_DEFINITIONS =\n  TMP_AWS_DYNAMODB_ATTRIBUTE_DEFINITIONS;\n\n/**\n * The JSON-serialized value of each item in the the `GlobalSecondaryIndexUpdates` request field.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEX_UPDATES in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEX_UPDATES =\n  TMP_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEX_UPDATES;\n\n/**\n * A string identifying the messaging system.\n *\n * @deprecated Use ATTR_MESSAGING_SYSTEM in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_MESSAGING_SYSTEM = TMP_MESSAGING_SYSTEM;\n\n/**\n * The message destination name. This might be equal to the span name but is required nevertheless.\n *\n * @deprecated Use ATTR_MESSAGING_DESTINATION_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_MESSAGING_DESTINATION = TMP_MESSAGING_DESTINATION;\n\n/**\n * The kind of message destination.\n *\n * @deprecated Removed in semconv v1.20.0.\n */\nexport const SEMATTRS_MESSAGING_DESTINATION_KIND =\n  TMP_MESSAGING_DESTINATION_KIND;\n\n/**\n * A boolean that is true if the message destination is temporary.\n *\n * @deprecated Use ATTR_MESSAGING_DESTINATION_TEMPORARY in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_MESSAGING_TEMP_DESTINATION =\n  TMP_MESSAGING_TEMP_DESTINATION;\n\n/**\n * The name of the transport protocol.\n *\n * @deprecated Use ATTR_NETWORK_PROTOCOL_NAME.\n */\nexport const SEMATTRS_MESSAGING_PROTOCOL = TMP_MESSAGING_PROTOCOL;\n\n/**\n * The version of the transport protocol.\n *\n * @deprecated Use ATTR_NETWORK_PROTOCOL_VERSION.\n */\nexport const SEMATTRS_MESSAGING_PROTOCOL_VERSION =\n  TMP_MESSAGING_PROTOCOL_VERSION;\n\n/**\n * Connection string.\n *\n * @deprecated Removed in semconv v1.17.0.\n */\nexport const SEMATTRS_MESSAGING_URL = TMP_MESSAGING_URL;\n\n/**\n * A value used by the messaging system as an identifier for the message, represented as a string.\n *\n * @deprecated Use ATTR_MESSAGING_MESSAGE_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_MESSAGING_MESSAGE_ID = TMP_MESSAGING_MESSAGE_ID;\n\n/**\n * The [conversation ID](#conversations) identifying the conversation to which the message belongs, represented as a string. Sometimes called &#34;Correlation ID&#34;.\n *\n * @deprecated Use ATTR_MESSAGING_MESSAGE_CONVERSATION_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_MESSAGING_CONVERSATION_ID = TMP_MESSAGING_CONVERSATION_ID;\n\n/**\n * The (uncompressed) size of the message payload in bytes. Also use this attribute if it is unknown whether the compressed or uncompressed payload size is reported.\n *\n * @deprecated Use ATTR_MESSAGING_MESSAGE_BODY_SIZE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_MESSAGING_MESSAGE_PAYLOAD_SIZE_BYTES =\n  TMP_MESSAGING_MESSAGE_PAYLOAD_SIZE_BYTES;\n\n/**\n * The compressed size of the message payload in bytes.\n *\n * @deprecated Removed in semconv v1.22.0.\n */\nexport const SEMATTRS_MESSAGING_MESSAGE_PAYLOAD_COMPRESSED_SIZE_BYTES =\n  TMP_MESSAGING_MESSAGE_PAYLOAD_COMPRESSED_SIZE_BYTES;\n\n/**\n * A string identifying the kind of message consumption as defined in the [Operation names](#operation-names) section above. If the operation is &#34;send&#34;, this attribute MUST NOT be set, since the operation can be inferred from the span kind in that case.\n *\n * @deprecated Use ATTR_MESSAGING_OPERATION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_MESSAGING_OPERATION = TMP_MESSAGING_OPERATION;\n\n/**\n * The identifier for the consumer receiving a message. For Kafka, set it to `{messaging.kafka.consumer_group} - {messaging.kafka.client_id}`, if both are present, or only `messaging.kafka.consumer_group`. For brokers, such as RabbitMQ and Artemis, set it to the `client_id` of the client consuming the message.\n *\n * @deprecated Removed in semconv v1.21.0.\n */\nexport const SEMATTRS_MESSAGING_CONSUMER_ID = TMP_MESSAGING_CONSUMER_ID;\n\n/**\n * RabbitMQ message routing key.\n *\n * @deprecated Use ATTR_MESSAGING_RABBITMQ_DESTINATION_ROUTING_KEY in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_MESSAGING_RABBITMQ_ROUTING_KEY =\n  TMP_MESSAGING_RABBITMQ_ROUTING_KEY;\n\n/**\n * Message keys in Kafka are used for grouping alike messages to ensure they&#39;re processed on the same partition. They differ from `messaging.message_id` in that they&#39;re not unique. If the key is `null`, the attribute MUST NOT be set.\n *\n * Note: If the key type is not string, it&#39;s string representation has to be supplied for the attribute. If the key has no unambiguous, canonical string form, don&#39;t include its value.\n *\n * @deprecated Use ATTR_MESSAGING_KAFKA_MESSAGE_KEY in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_MESSAGING_KAFKA_MESSAGE_KEY =\n  TMP_MESSAGING_KAFKA_MESSAGE_KEY;\n\n/**\n * Name of the Kafka Consumer Group that is handling the message. Only applies to consumers, not producers.\n *\n * @deprecated Use ATTR_MESSAGING_KAFKA_CONSUMER_GROUP in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_MESSAGING_KAFKA_CONSUMER_GROUP =\n  TMP_MESSAGING_KAFKA_CONSUMER_GROUP;\n\n/**\n * Client Id for the Consumer or Producer that is handling the message.\n *\n * @deprecated Use ATTR_MESSAGING_CLIENT_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_MESSAGING_KAFKA_CLIENT_ID = TMP_MESSAGING_KAFKA_CLIENT_ID;\n\n/**\n * Partition the message is sent to.\n *\n * @deprecated Use ATTR_MESSAGING_KAFKA_DESTINATION_PARTITION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_MESSAGING_KAFKA_PARTITION = TMP_MESSAGING_KAFKA_PARTITION;\n\n/**\n * A boolean that is true if the message is a tombstone.\n *\n * @deprecated Use ATTR_MESSAGING_KAFKA_MESSAGE_TOMBSTONE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_MESSAGING_KAFKA_TOMBSTONE = TMP_MESSAGING_KAFKA_TOMBSTONE;\n\n/**\n * A string identifying the remoting system.\n *\n * @deprecated Use ATTR_RPC_SYSTEM in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_RPC_SYSTEM = TMP_RPC_SYSTEM;\n\n/**\n * The full (logical) name of the service being called, including its package name, if applicable.\n *\n * Note: This is the logical name of the service from the RPC interface perspective, which can be different from the name of any implementing class. The `code.namespace` attribute may be used to store the latter (despite the attribute name, it may include a class name; e.g., class with method actually executing the call on the server side, RPC client stub class on the client side).\n *\n * @deprecated Use ATTR_RPC_SERVICE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_RPC_SERVICE = TMP_RPC_SERVICE;\n\n/**\n * The name of the (logical) method being called, must be equal to the $method part in the span name.\n *\n * Note: This is the logical name of the method from the RPC interface perspective, which can be different from the name of any implementing method/function. The `code.function` attribute may be used to store the latter (e.g., method actually executing the call on the server side, RPC client stub method on the client side).\n *\n * @deprecated Use ATTR_RPC_METHOD in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_RPC_METHOD = TMP_RPC_METHOD;\n\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use ATTR_RPC_GRPC_STATUS_CODE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_RPC_GRPC_STATUS_CODE = TMP_RPC_GRPC_STATUS_CODE;\n\n/**\n * Protocol version as in `jsonrpc` property of request/response. Since JSON-RPC 1.0 does not specify this, the value can be omitted.\n *\n * @deprecated Use ATTR_RPC_JSONRPC_VERSION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_RPC_JSONRPC_VERSION = TMP_RPC_JSONRPC_VERSION;\n\n/**\n * `id` property of request or response. Since protocol allows id to be int, string, `null` or missing (for notifications), value is expected to be cast to string for simplicity. Use empty string in case of `null` value. Omit entirely if this is a notification.\n *\n * @deprecated Use ATTR_RPC_JSONRPC_REQUEST_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_RPC_JSONRPC_REQUEST_ID = TMP_RPC_JSONRPC_REQUEST_ID;\n\n/**\n * `error.code` property of response if it is an error response.\n *\n * @deprecated Use ATTR_RPC_JSONRPC_ERROR_CODE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_RPC_JSONRPC_ERROR_CODE = TMP_RPC_JSONRPC_ERROR_CODE;\n\n/**\n * `error.message` property of response if it is an error response.\n *\n * @deprecated Use ATTR_RPC_JSONRPC_ERROR_MESSAGE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_RPC_JSONRPC_ERROR_MESSAGE = TMP_RPC_JSONRPC_ERROR_MESSAGE;\n\n/**\n * Whether this is a received or sent message.\n *\n * @deprecated Use ATTR_MESSAGE_TYPE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_MESSAGE_TYPE = TMP_MESSAGE_TYPE;\n\n/**\n * MUST be calculated as two different counters starting from `1` one for sent messages and one for received message.\n *\n * Note: This way we guarantee that the values will be consistent between different implementations.\n *\n * @deprecated Use ATTR_MESSAGE_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_MESSAGE_ID = TMP_MESSAGE_ID;\n\n/**\n * Compressed size of the message in bytes.\n *\n * @deprecated Use ATTR_MESSAGE_COMPRESSED_SIZE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_MESSAGE_COMPRESSED_SIZE = TMP_MESSAGE_COMPRESSED_SIZE;\n\n/**\n * Uncompressed size of the message in bytes.\n *\n * @deprecated Use ATTR_MESSAGE_UNCOMPRESSED_SIZE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_MESSAGE_UNCOMPRESSED_SIZE = TMP_MESSAGE_UNCOMPRESSED_SIZE;\n\n/**\n * Definition of available values for SemanticAttributes\n * This type is used for backward compatibility, you should use the individual exported\n * constants SemanticAttributes_XXXXX rather than the exported constant map. As any single reference\n * to a constant map value will result in all strings being included into your bundle.\n * @deprecated Use the SEMATTRS_XXXXX constants rather than the SemanticAttributes.XXXXX for bundle minification.\n */\nexport type SemanticAttributes = {\n  /**\n   * The full invoked ARN as provided on the `Context` passed to the function (`Lambda-Runtime-Invoked-Function-Arn` header on the `/runtime/invocation/next` applicable).\n   *\n   * Note: This may be different from `faas.id` if an alias is involved.\n   */\n  AWS_LAMBDA_INVOKED_ARN: 'aws.lambda.invoked_arn';\n\n  /**\n   * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n   */\n  DB_SYSTEM: 'db.system';\n\n  /**\n   * The connection string used to connect to the database. It is recommended to remove embedded credentials.\n   */\n  DB_CONNECTION_STRING: 'db.connection_string';\n\n  /**\n   * Username for accessing the database.\n   */\n  DB_USER: 'db.user';\n\n  /**\n   * The fully-qualified class name of the [Java Database Connectivity (JDBC)](https://docs.oracle.com/javase/8/docs/technotes/guides/jdbc/) driver used to connect.\n   */\n  DB_JDBC_DRIVER_CLASSNAME: 'db.jdbc.driver_classname';\n\n  /**\n   * If no [tech-specific attribute](#call-level-attributes-for-specific-technologies) is defined, this attribute is used to report the name of the database being accessed. For commands that switch the database, this should be set to the target database (even if the command fails).\n   *\n   * Note: In some SQL databases, the database name to be used is called &#34;schema name&#34;.\n   */\n  DB_NAME: 'db.name';\n\n  /**\n   * The database statement being executed.\n   *\n   * Note: The value may be sanitized to exclude sensitive information.\n   */\n  DB_STATEMENT: 'db.statement';\n\n  /**\n   * The name of the operation being executed, e.g. the [MongoDB command name](https://docs.mongodb.com/manual/reference/command/#database-operations) such as `findAndModify`, or the SQL keyword.\n   *\n   * Note: When setting this to an SQL keyword, it is not recommended to attempt any client-side parsing of `db.statement` just to get this property, but it should be set if the operation name is provided by the library being instrumented. If the SQL statement has an ambiguous operation, or performs more than one operation, this value may be omitted.\n   */\n  DB_OPERATION: 'db.operation';\n\n  /**\n   * The Microsoft SQL Server [instance name](https://docs.microsoft.com/en-us/sql/connect/jdbc/building-the-connection-url?view=sql-server-ver15) connecting to. This name is used to determine the port of a named instance.\n   *\n   * Note: If setting a `db.mssql.instance_name`, `net.peer.port` is no longer required (but still recommended if non-standard).\n   */\n  DB_MSSQL_INSTANCE_NAME: 'db.mssql.instance_name';\n\n  /**\n   * The name of the keyspace being accessed. To be used instead of the generic `db.name` attribute.\n   */\n  DB_CASSANDRA_KEYSPACE: 'db.cassandra.keyspace';\n\n  /**\n   * The fetch size used for paging, i.e. how many rows will be returned at once.\n   */\n  DB_CASSANDRA_PAGE_SIZE: 'db.cassandra.page_size';\n\n  /**\n   * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n   */\n  DB_CASSANDRA_CONSISTENCY_LEVEL: 'db.cassandra.consistency_level';\n\n  /**\n   * The name of the primary table that the operation is acting upon, including the schema name (if applicable).\n   *\n   * Note: This mirrors the db.sql.table attribute but references cassandra rather than sql. It is not recommended to attempt any client-side parsing of `db.statement` just to get this property, but it should be set if it is provided by the library being instrumented. If the operation is acting upon an anonymous table, or more than one table, this value MUST NOT be set.\n   */\n  DB_CASSANDRA_TABLE: 'db.cassandra.table';\n\n  /**\n   * Whether or not the query is idempotent.\n   */\n  DB_CASSANDRA_IDEMPOTENCE: 'db.cassandra.idempotence';\n\n  /**\n   * The number of times a query was speculatively executed. Not set or `0` if the query was not executed speculatively.\n   */\n  DB_CASSANDRA_SPECULATIVE_EXECUTION_COUNT: 'db.cassandra.speculative_execution_count';\n\n  /**\n   * The ID of the coordinating node for a query.\n   */\n  DB_CASSANDRA_COORDINATOR_ID: 'db.cassandra.coordinator.id';\n\n  /**\n   * The data center of the coordinating node for a query.\n   */\n  DB_CASSANDRA_COORDINATOR_DC: 'db.cassandra.coordinator.dc';\n\n  /**\n   * The [HBase namespace](https://hbase.apache.org/book.html#_namespace) being accessed. To be used instead of the generic `db.name` attribute.\n   */\n  DB_HBASE_NAMESPACE: 'db.hbase.namespace';\n\n  /**\n   * The index of the database being accessed as used in the [`SELECT` command](https://redis.io/commands/select), provided as an integer. To be used instead of the generic `db.name` attribute.\n   */\n  DB_REDIS_DATABASE_INDEX: 'db.redis.database_index';\n\n  /**\n   * The collection being accessed within the database stated in `db.name`.\n   */\n  DB_MONGODB_COLLECTION: 'db.mongodb.collection';\n\n  /**\n   * The name of the primary table that the operation is acting upon, including the schema name (if applicable).\n   *\n   * Note: It is not recommended to attempt any client-side parsing of `db.statement` just to get this property, but it should be set if it is provided by the library being instrumented. If the operation is acting upon an anonymous table, or more than one table, this value MUST NOT be set.\n   */\n  DB_SQL_TABLE: 'db.sql.table';\n\n  /**\n   * The type of the exception (its fully-qualified class name, if applicable). The dynamic type of the exception should be preferred over the static type in languages that support it.\n   */\n  EXCEPTION_TYPE: 'exception.type';\n\n  /**\n   * The exception message.\n   */\n  EXCEPTION_MESSAGE: 'exception.message';\n\n  /**\n   * A stacktrace as a string in the natural representation for the language runtime. The representation is to be determined and documented by each language SIG.\n   */\n  EXCEPTION_STACKTRACE: 'exception.stacktrace';\n\n  /**\n  * SHOULD be set to true if the exception event is recorded at a point where it is known that the exception is escaping the scope of the span.\n  *\n  * Note: An exception is considered to have escaped (or left) the scope of a span,\nif that span is ended while the exception is still logically &#34;in flight&#34;.\nThis may be actually &#34;in flight&#34; in some languages (e.g. if the exception\nis passed to a Context manager&#39;s `__exit__` method in Python) but will\nusually be caught at the point of recording the exception in most languages.\n\nIt is usually not possible to determine at the point where an exception is thrown\nwhether it will escape the scope of a span.\nHowever, it is trivial to know that an exception\nwill escape, if one checks for an active exception just before ending the span,\nas done in the [example above](#exception-end-example).\n\nIt follows that an exception may still escape the scope of the span\neven if the `exception.escaped` attribute was not set or set to false,\nsince the event might have been recorded at a time where it was not\nclear whether the exception will escape.\n  */\n  EXCEPTION_ESCAPED: 'exception.escaped';\n\n  /**\n   * Type of the trigger on which the function is executed.\n   */\n  FAAS_TRIGGER: 'faas.trigger';\n\n  /**\n   * The execution ID of the current function execution.\n   */\n  FAAS_EXECUTION: 'faas.execution';\n\n  /**\n   * The name of the source on which the triggering operation was performed. For example, in Cloud Storage or S3 corresponds to the bucket name, and in Cosmos DB to the database name.\n   */\n  FAAS_DOCUMENT_COLLECTION: 'faas.document.collection';\n\n  /**\n   * Describes the type of the operation that was performed on the data.\n   */\n  FAAS_DOCUMENT_OPERATION: 'faas.document.operation';\n\n  /**\n   * A string containing the time when the data was accessed in the [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format expressed in [UTC](https://www.w3.org/TR/NOTE-datetime).\n   */\n  FAAS_DOCUMENT_TIME: 'faas.document.time';\n\n  /**\n   * The document name/table subjected to the operation. For example, in Cloud Storage or S3 is the name of the file, and in Cosmos DB the table name.\n   */\n  FAAS_DOCUMENT_NAME: 'faas.document.name';\n\n  /**\n   * A string containing the function invocation time in the [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format expressed in [UTC](https://www.w3.org/TR/NOTE-datetime).\n   */\n  FAAS_TIME: 'faas.time';\n\n  /**\n   * A string containing the schedule period as [Cron Expression](https://docs.oracle.com/cd/E12058_01/doc/doc.1014/e12030/cron_expressions.htm).\n   */\n  FAAS_CRON: 'faas.cron';\n\n  /**\n   * A boolean that is true if the serverless function is executed for the first time (aka cold-start).\n   */\n  FAAS_COLDSTART: 'faas.coldstart';\n\n  /**\n   * The name of the invoked function.\n   *\n   * Note: SHOULD be equal to the `faas.name` resource attribute of the invoked function.\n   */\n  FAAS_INVOKED_NAME: 'faas.invoked_name';\n\n  /**\n   * The cloud provider of the invoked function.\n   *\n   * Note: SHOULD be equal to the `cloud.provider` resource attribute of the invoked function.\n   */\n  FAAS_INVOKED_PROVIDER: 'faas.invoked_provider';\n\n  /**\n   * The cloud region of the invoked function.\n   *\n   * Note: SHOULD be equal to the `cloud.region` resource attribute of the invoked function.\n   */\n  FAAS_INVOKED_REGION: 'faas.invoked_region';\n\n  /**\n   * Transport protocol used. See note below.\n   */\n  NET_TRANSPORT: 'net.transport';\n\n  /**\n   * Remote address of the peer (dotted decimal for IPv4 or [RFC5952](https://tools.ietf.org/html/rfc5952) for IPv6).\n   */\n  NET_PEER_IP: 'net.peer.ip';\n\n  /**\n   * Remote port number.\n   */\n  NET_PEER_PORT: 'net.peer.port';\n\n  /**\n   * Remote hostname or similar, see note below.\n   */\n  NET_PEER_NAME: 'net.peer.name';\n\n  /**\n   * Like `net.peer.ip` but for the host IP. Useful in case of a multi-IP host.\n   */\n  NET_HOST_IP: 'net.host.ip';\n\n  /**\n   * Like `net.peer.port` but for the host port.\n   */\n  NET_HOST_PORT: 'net.host.port';\n\n  /**\n   * Local hostname or similar, see note below.\n   */\n  NET_HOST_NAME: 'net.host.name';\n\n  /**\n   * The internet connection type currently being used by the host.\n   */\n  NET_HOST_CONNECTION_TYPE: 'net.host.connection.type';\n\n  /**\n   * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n   */\n  NET_HOST_CONNECTION_SUBTYPE: 'net.host.connection.subtype';\n\n  /**\n   * The name of the mobile carrier.\n   */\n  NET_HOST_CARRIER_NAME: 'net.host.carrier.name';\n\n  /**\n   * The mobile carrier country code.\n   */\n  NET_HOST_CARRIER_MCC: 'net.host.carrier.mcc';\n\n  /**\n   * The mobile carrier network code.\n   */\n  NET_HOST_CARRIER_MNC: 'net.host.carrier.mnc';\n\n  /**\n   * The ISO 3166-1 alpha-2 2-character country code associated with the mobile carrier network.\n   */\n  NET_HOST_CARRIER_ICC: 'net.host.carrier.icc';\n\n  /**\n   * The [`service.name`](../../resource/semantic_conventions/README.md#service) of the remote service. SHOULD be equal to the actual `service.name` resource attribute of the remote service if any.\n   */\n  PEER_SERVICE: 'peer.service';\n\n  /**\n   * Username or client_id extracted from the access token or [Authorization](https://tools.ietf.org/html/rfc7235#section-4.2) header in the inbound request from outside the system.\n   */\n  ENDUSER_ID: 'enduser.id';\n\n  /**\n   * Actual/assumed role the client is making the request under extracted from token or application security context.\n   */\n  ENDUSER_ROLE: 'enduser.role';\n\n  /**\n   * Scopes or granted authorities the client currently possesses extracted from token or application security context. The value would come from the scope associated with an [OAuth 2.0 Access Token](https://tools.ietf.org/html/rfc6749#section-3.3) or an attribute value in a [SAML 2.0 Assertion](http://docs.oasis-open.org/security/saml/Post2.0/sstc-saml-tech-overview-2.0.html).\n   */\n  ENDUSER_SCOPE: 'enduser.scope';\n\n  /**\n   * Current &#34;managed&#34; thread ID (as opposed to OS thread ID).\n   */\n  THREAD_ID: 'thread.id';\n\n  /**\n   * Current thread name.\n   */\n  THREAD_NAME: 'thread.name';\n\n  /**\n   * The method or function name, or equivalent (usually rightmost part of the code unit&#39;s name).\n   */\n  CODE_FUNCTION: 'code.function';\n\n  /**\n   * The &#34;namespace&#34; within which `code.function` is defined. Usually the qualified class or module name, such that `code.namespace` + some separator + `code.function` form a unique identifier for the code unit.\n   */\n  CODE_NAMESPACE: 'code.namespace';\n\n  /**\n   * The source code file name that identifies the code unit as uniquely as possible (preferably an absolute file path).\n   */\n  CODE_FILEPATH: 'code.filepath';\n\n  /**\n   * The line number in `code.filepath` best representing the operation. It SHOULD point within the code unit named in `code.function`.\n   */\n  CODE_LINENO: 'code.lineno';\n\n  /**\n   * HTTP request method.\n   */\n  HTTP_METHOD: 'http.method';\n\n  /**\n   * Full HTTP request URL in the form `scheme://host[:port]/path?query[#fragment]`. Usually the fragment is not transmitted over HTTP, but if it is known, it should be included nevertheless.\n   *\n   * Note: `http.url` MUST NOT contain credentials passed via URL in form of `https://username:password@www.example.com/`. In such case the attribute&#39;s value should be `https://www.example.com/`.\n   */\n  HTTP_URL: 'http.url';\n\n  /**\n   * The full request target as passed in a HTTP request line or equivalent.\n   */\n  HTTP_TARGET: 'http.target';\n\n  /**\n   * The value of the [HTTP host header](https://tools.ietf.org/html/rfc7230#section-5.4). An empty Host header should also be reported, see note.\n   *\n   * Note: When the header is present but empty the attribute SHOULD be set to the empty string. Note that this is a valid situation that is expected in certain cases, according the aforementioned [section of RFC 7230](https://tools.ietf.org/html/rfc7230#section-5.4). When the header is not set the attribute MUST NOT be set.\n   */\n  HTTP_HOST: 'http.host';\n\n  /**\n   * The URI scheme identifying the used protocol.\n   */\n  HTTP_SCHEME: 'http.scheme';\n\n  /**\n   * [HTTP response status code](https://tools.ietf.org/html/rfc7231#section-6).\n   */\n  HTTP_STATUS_CODE: 'http.status_code';\n\n  /**\n   * Kind of HTTP protocol used.\n   *\n   * Note: If `net.transport` is not specified, it can be assumed to be `IP.TCP` except if `http.flavor` is `QUIC`, in which case `IP.UDP` is assumed.\n   */\n  HTTP_FLAVOR: 'http.flavor';\n\n  /**\n   * Value of the [HTTP User-Agent](https://tools.ietf.org/html/rfc7231#section-5.5.3) header sent by the client.\n   */\n  HTTP_USER_AGENT: 'http.user_agent';\n\n  /**\n   * The size of the request payload body in bytes. This is the number of bytes transferred excluding headers and is often, but not always, present as the [Content-Length](https://tools.ietf.org/html/rfc7230#section-3.3.2) header. For requests using transport encoding, this should be the compressed size.\n   */\n  HTTP_REQUEST_CONTENT_LENGTH: 'http.request_content_length';\n\n  /**\n   * The size of the uncompressed request payload body after transport decoding. Not set if transport encoding not used.\n   */\n  HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED: 'http.request_content_length_uncompressed';\n\n  /**\n   * The size of the response payload body in bytes. This is the number of bytes transferred excluding headers and is often, but not always, present as the [Content-Length](https://tools.ietf.org/html/rfc7230#section-3.3.2) header. For requests using transport encoding, this should be the compressed size.\n   */\n  HTTP_RESPONSE_CONTENT_LENGTH: 'http.response_content_length';\n\n  /**\n   * The size of the uncompressed response payload body after transport decoding. Not set if transport encoding not used.\n   */\n  HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED: 'http.response_content_length_uncompressed';\n\n  /**\n   * The primary server name of the matched virtual host. This should be obtained via configuration. If no such configuration can be obtained, this attribute MUST NOT be set ( `net.host.name` should be used instead).\n   *\n   * Note: `http.url` is usually not readily available on the server side but would have to be assembled in a cumbersome and sometimes lossy process from other information (see e.g. open-telemetry/opentelemetry-python/pull/148). It is thus preferred to supply the raw data that is available.\n   */\n  HTTP_SERVER_NAME: 'http.server_name';\n\n  /**\n   * The matched route (path template).\n   */\n  HTTP_ROUTE: 'http.route';\n\n  /**\n  * The IP address of the original client behind all proxies, if known (e.g. from [X-Forwarded-For](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Forwarded-For)).\n  *\n  * Note: This is not necessarily the same as `net.peer.ip`, which would\nidentify the network-level peer, which may be a proxy.\n\nThis attribute should be set when a source of information different\nfrom the one used for `net.peer.ip`, is available even if that other\nsource just confirms the same value as `net.peer.ip`.\nRationale: For `net.peer.ip`, one typically does not know if it\ncomes from a proxy, reverse proxy, or the actual client. Setting\n`http.client_ip` when it&#39;s the same as `net.peer.ip` means that\none is at least somewhat confident that the address is not that of\nthe closest proxy.\n  */\n  HTTP_CLIENT_IP: 'http.client_ip';\n\n  /**\n   * The keys in the `RequestItems` object field.\n   */\n  AWS_DYNAMODB_TABLE_NAMES: 'aws.dynamodb.table_names';\n\n  /**\n   * The JSON-serialized value of each item in the `ConsumedCapacity` response field.\n   */\n  AWS_DYNAMODB_CONSUMED_CAPACITY: 'aws.dynamodb.consumed_capacity';\n\n  /**\n   * The JSON-serialized value of the `ItemCollectionMetrics` response field.\n   */\n  AWS_DYNAMODB_ITEM_COLLECTION_METRICS: 'aws.dynamodb.item_collection_metrics';\n\n  /**\n   * The value of the `ProvisionedThroughput.ReadCapacityUnits` request parameter.\n   */\n  AWS_DYNAMODB_PROVISIONED_READ_CAPACITY: 'aws.dynamodb.provisioned_read_capacity';\n\n  /**\n   * The value of the `ProvisionedThroughput.WriteCapacityUnits` request parameter.\n   */\n  AWS_DYNAMODB_PROVISIONED_WRITE_CAPACITY: 'aws.dynamodb.provisioned_write_capacity';\n\n  /**\n   * The value of the `ConsistentRead` request parameter.\n   */\n  AWS_DYNAMODB_CONSISTENT_READ: 'aws.dynamodb.consistent_read';\n\n  /**\n   * The value of the `ProjectionExpression` request parameter.\n   */\n  AWS_DYNAMODB_PROJECTION: 'aws.dynamodb.projection';\n\n  /**\n   * The value of the `Limit` request parameter.\n   */\n  AWS_DYNAMODB_LIMIT: 'aws.dynamodb.limit';\n\n  /**\n   * The value of the `AttributesToGet` request parameter.\n   */\n  AWS_DYNAMODB_ATTRIBUTES_TO_GET: 'aws.dynamodb.attributes_to_get';\n\n  /**\n   * The value of the `IndexName` request parameter.\n   */\n  AWS_DYNAMODB_INDEX_NAME: 'aws.dynamodb.index_name';\n\n  /**\n   * The value of the `Select` request parameter.\n   */\n  AWS_DYNAMODB_SELECT: 'aws.dynamodb.select';\n\n  /**\n   * The JSON-serialized value of each item of the `GlobalSecondaryIndexes` request field.\n   */\n  AWS_DYNAMODB_GLOBAL_SECONDARY_INDEXES: 'aws.dynamodb.global_secondary_indexes';\n\n  /**\n   * The JSON-serialized value of each item of the `LocalSecondaryIndexes` request field.\n   */\n  AWS_DYNAMODB_LOCAL_SECONDARY_INDEXES: 'aws.dynamodb.local_secondary_indexes';\n\n  /**\n   * The value of the `ExclusiveStartTableName` request parameter.\n   */\n  AWS_DYNAMODB_EXCLUSIVE_START_TABLE: 'aws.dynamodb.exclusive_start_table';\n\n  /**\n   * The the number of items in the `TableNames` response parameter.\n   */\n  AWS_DYNAMODB_TABLE_COUNT: 'aws.dynamodb.table_count';\n\n  /**\n   * The value of the `ScanIndexForward` request parameter.\n   */\n  AWS_DYNAMODB_SCAN_FORWARD: 'aws.dynamodb.scan_forward';\n\n  /**\n   * The value of the `Segment` request parameter.\n   */\n  AWS_DYNAMODB_SEGMENT: 'aws.dynamodb.segment';\n\n  /**\n   * The value of the `TotalSegments` request parameter.\n   */\n  AWS_DYNAMODB_TOTAL_SEGMENTS: 'aws.dynamodb.total_segments';\n\n  /**\n   * The value of the `Count` response parameter.\n   */\n  AWS_DYNAMODB_COUNT: 'aws.dynamodb.count';\n\n  /**\n   * The value of the `ScannedCount` response parameter.\n   */\n  AWS_DYNAMODB_SCANNED_COUNT: 'aws.dynamodb.scanned_count';\n\n  /**\n   * The JSON-serialized value of each item in the `AttributeDefinitions` request field.\n   */\n  AWS_DYNAMODB_ATTRIBUTE_DEFINITIONS: 'aws.dynamodb.attribute_definitions';\n\n  /**\n   * The JSON-serialized value of each item in the the `GlobalSecondaryIndexUpdates` request field.\n   */\n  AWS_DYNAMODB_GLOBAL_SECONDARY_INDEX_UPDATES: 'aws.dynamodb.global_secondary_index_updates';\n\n  /**\n   * A string identifying the messaging system.\n   */\n  MESSAGING_SYSTEM: 'messaging.system';\n\n  /**\n   * The message destination name. This might be equal to the span name but is required nevertheless.\n   */\n  MESSAGING_DESTINATION: 'messaging.destination';\n\n  /**\n   * The kind of message destination.\n   */\n  MESSAGING_DESTINATION_KIND: 'messaging.destination_kind';\n\n  /**\n   * A boolean that is true if the message destination is temporary.\n   */\n  MESSAGING_TEMP_DESTINATION: 'messaging.temp_destination';\n\n  /**\n   * The name of the transport protocol.\n   */\n  MESSAGING_PROTOCOL: 'messaging.protocol';\n\n  /**\n   * The version of the transport protocol.\n   */\n  MESSAGING_PROTOCOL_VERSION: 'messaging.protocol_version';\n\n  /**\n   * Connection string.\n   */\n  MESSAGING_URL: 'messaging.url';\n\n  /**\n   * A value used by the messaging system as an identifier for the message, represented as a string.\n   */\n  MESSAGING_MESSAGE_ID: 'messaging.message_id';\n\n  /**\n   * The [conversation ID](#conversations) identifying the conversation to which the message belongs, represented as a string. Sometimes called &#34;Correlation ID&#34;.\n   */\n  MESSAGING_CONVERSATION_ID: 'messaging.conversation_id';\n\n  /**\n   * The (uncompressed) size of the message payload in bytes. Also use this attribute if it is unknown whether the compressed or uncompressed payload size is reported.\n   */\n  MESSAGING_MESSAGE_PAYLOAD_SIZE_BYTES: 'messaging.message_payload_size_bytes';\n\n  /**\n   * The compressed size of the message payload in bytes.\n   */\n  MESSAGING_MESSAGE_PAYLOAD_COMPRESSED_SIZE_BYTES: 'messaging.message_payload_compressed_size_bytes';\n\n  /**\n   * A string identifying the kind of message consumption as defined in the [Operation names](#operation-names) section above. If the operation is &#34;send&#34;, this attribute MUST NOT be set, since the operation can be inferred from the span kind in that case.\n   */\n  MESSAGING_OPERATION: 'messaging.operation';\n\n  /**\n   * The identifier for the consumer receiving a message. For Kafka, set it to `{messaging.kafka.consumer_group} - {messaging.kafka.client_id}`, if both are present, or only `messaging.kafka.consumer_group`. For brokers, such as RabbitMQ and Artemis, set it to the `client_id` of the client consuming the message.\n   */\n  MESSAGING_CONSUMER_ID: 'messaging.consumer_id';\n\n  /**\n   * RabbitMQ message routing key.\n   */\n  MESSAGING_RABBITMQ_ROUTING_KEY: 'messaging.rabbitmq.routing_key';\n\n  /**\n   * Message keys in Kafka are used for grouping alike messages to ensure they&#39;re processed on the same partition. They differ from `messaging.message_id` in that they&#39;re not unique. If the key is `null`, the attribute MUST NOT be set.\n   *\n   * Note: If the key type is not string, it&#39;s string representation has to be supplied for the attribute. If the key has no unambiguous, canonical string form, don&#39;t include its value.\n   */\n  MESSAGING_KAFKA_MESSAGE_KEY: 'messaging.kafka.message_key';\n\n  /**\n   * Name of the Kafka Consumer Group that is handling the message. Only applies to consumers, not producers.\n   */\n  MESSAGING_KAFKA_CONSUMER_GROUP: 'messaging.kafka.consumer_group';\n\n  /**\n   * Client Id for the Consumer or Producer that is handling the message.\n   */\n  MESSAGING_KAFKA_CLIENT_ID: 'messaging.kafka.client_id';\n\n  /**\n   * Partition the message is sent to.\n   */\n  MESSAGING_KAFKA_PARTITION: 'messaging.kafka.partition';\n\n  /**\n   * A boolean that is true if the message is a tombstone.\n   */\n  MESSAGING_KAFKA_TOMBSTONE: 'messaging.kafka.tombstone';\n\n  /**\n   * A string identifying the remoting system.\n   */\n  RPC_SYSTEM: 'rpc.system';\n\n  /**\n   * The full (logical) name of the service being called, including its package name, if applicable.\n   *\n   * Note: This is the logical name of the service from the RPC interface perspective, which can be different from the name of any implementing class. The `code.namespace` attribute may be used to store the latter (despite the attribute name, it may include a class name; e.g., class with method actually executing the call on the server side, RPC client stub class on the client side).\n   */\n  RPC_SERVICE: 'rpc.service';\n\n  /**\n   * The name of the (logical) method being called, must be equal to the $method part in the span name.\n   *\n   * Note: This is the logical name of the method from the RPC interface perspective, which can be different from the name of any implementing method/function. The `code.function` attribute may be used to store the latter (e.g., method actually executing the call on the server side, RPC client stub method on the client side).\n   */\n  RPC_METHOD: 'rpc.method';\n\n  /**\n   * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n   */\n  RPC_GRPC_STATUS_CODE: 'rpc.grpc.status_code';\n\n  /**\n   * Protocol version as in `jsonrpc` property of request/response. Since JSON-RPC 1.0 does not specify this, the value can be omitted.\n   */\n  RPC_JSONRPC_VERSION: 'rpc.jsonrpc.version';\n\n  /**\n   * `id` property of request or response. Since protocol allows id to be int, string, `null` or missing (for notifications), value is expected to be cast to string for simplicity. Use empty string in case of `null` value. Omit entirely if this is a notification.\n   */\n  RPC_JSONRPC_REQUEST_ID: 'rpc.jsonrpc.request_id';\n\n  /**\n   * `error.code` property of response if it is an error response.\n   */\n  RPC_JSONRPC_ERROR_CODE: 'rpc.jsonrpc.error_code';\n\n  /**\n   * `error.message` property of response if it is an error response.\n   */\n  RPC_JSONRPC_ERROR_MESSAGE: 'rpc.jsonrpc.error_message';\n\n  /**\n   * Whether this is a received or sent message.\n   */\n  MESSAGE_TYPE: 'message.type';\n\n  /**\n   * MUST be calculated as two different counters starting from `1` one for sent messages and one for received message.\n   *\n   * Note: This way we guarantee that the values will be consistent between different implementations.\n   */\n  MESSAGE_ID: 'message.id';\n\n  /**\n   * Compressed size of the message in bytes.\n   */\n  MESSAGE_COMPRESSED_SIZE: 'message.compressed_size';\n\n  /**\n   * Uncompressed size of the message in bytes.\n   */\n  MESSAGE_UNCOMPRESSED_SIZE: 'message.uncompressed_size';\n};\n\n/**\n * Create exported Value Map for SemanticAttributes values\n * @deprecated Use the SEMATTRS_XXXXX constants rather than the SemanticAttributes.XXXXX for bundle minification\n */\nexport const SemanticAttributes: SemanticAttributes =\n  /*#__PURE__*/ createConstMap<SemanticAttributes>([\n    TMP_AWS_LAMBDA_INVOKED_ARN,\n    TMP_DB_SYSTEM,\n    TMP_DB_CONNECTION_STRING,\n    TMP_DB_USER,\n    TMP_DB_JDBC_DRIVER_CLASSNAME,\n    TMP_DB_NAME,\n    TMP_DB_STATEMENT,\n    TMP_DB_OPERATION,\n    TMP_DB_MSSQL_INSTANCE_NAME,\n    TMP_DB_CASSANDRA_KEYSPACE,\n    TMP_DB_CASSANDRA_PAGE_SIZE,\n    TMP_DB_CASSANDRA_CONSISTENCY_LEVEL,\n    TMP_DB_CASSANDRA_TABLE,\n    TMP_DB_CASSANDRA_IDEMPOTENCE,\n    TMP_DB_CASSANDRA_SPECULATIVE_EXECUTION_COUNT,\n    TMP_DB_CASSANDRA_COORDINATOR_ID,\n    TMP_DB_CASSANDRA_COORDINATOR_DC,\n    TMP_DB_HBASE_NAMESPACE,\n    TMP_DB_REDIS_DATABASE_INDEX,\n    TMP_DB_MONGODB_COLLECTION,\n    TMP_DB_SQL_TABLE,\n    TMP_EXCEPTION_TYPE,\n    TMP_EXCEPTION_MESSAGE,\n    TMP_EXCEPTION_STACKTRACE,\n    TMP_EXCEPTION_ESCAPED,\n    TMP_FAAS_TRIGGER,\n    TMP_FAAS_EXECUTION,\n    TMP_FAAS_DOCUMENT_COLLECTION,\n    TMP_FAAS_DOCUMENT_OPERATION,\n    TMP_FAAS_DOCUMENT_TIME,\n    TMP_FAAS_DOCUMENT_NAME,\n    TMP_FAAS_TIME,\n    TMP_FAAS_CRON,\n    TMP_FAAS_COLDSTART,\n    TMP_FAAS_INVOKED_NAME,\n    TMP_FAAS_INVOKED_PROVIDER,\n    TMP_FAAS_INVOKED_REGION,\n    TMP_NET_TRANSPORT,\n    TMP_NET_PEER_IP,\n    TMP_NET_PEER_PORT,\n    TMP_NET_PEER_NAME,\n    TMP_NET_HOST_IP,\n    TMP_NET_HOST_PORT,\n    TMP_NET_HOST_NAME,\n    TMP_NET_HOST_CONNECTION_TYPE,\n    TMP_NET_HOST_CONNECTION_SUBTYPE,\n    TMP_NET_HOST_CARRIER_NAME,\n    TMP_NET_HOST_CARRIER_MCC,\n    TMP_NET_HOST_CARRIER_MNC,\n    TMP_NET_HOST_CARRIER_ICC,\n    TMP_PEER_SERVICE,\n    TMP_ENDUSER_ID,\n    TMP_ENDUSER_ROLE,\n    TMP_ENDUSER_SCOPE,\n    TMP_THREAD_ID,\n    TMP_THREAD_NAME,\n    TMP_CODE_FUNCTION,\n    TMP_CODE_NAMESPACE,\n    TMP_CODE_FILEPATH,\n    TMP_CODE_LINENO,\n    TMP_HTTP_METHOD,\n    TMP_HTTP_URL,\n    TMP_HTTP_TARGET,\n    TMP_HTTP_HOST,\n    TMP_HTTP_SCHEME,\n    TMP_HTTP_STATUS_CODE,\n    TMP_HTTP_FLAVOR,\n    TMP_HTTP_USER_AGENT,\n    TMP_HTTP_REQUEST_CONTENT_LENGTH,\n    TMP_HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED,\n    TMP_HTTP_RESPONSE_CONTENT_LENGTH,\n    TMP_HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED,\n    TMP_HTTP_SERVER_NAME,\n    TMP_HTTP_ROUTE,\n    TMP_HTTP_CLIENT_IP,\n    TMP_AWS_DYNAMODB_TABLE_NAMES,\n    TMP_AWS_DYNAMODB_CONSUMED_CAPACITY,\n    TMP_AWS_DYNAMODB_ITEM_COLLECTION_METRICS,\n    TMP_AWS_DYNAMODB_PROVISIONED_READ_CAPACITY,\n    TMP_AWS_DYNAMODB_PROVISIONED_WRITE_CAPACITY,\n    TMP_AWS_DYNAMODB_CONSISTENT_READ,\n    TMP_AWS_DYNAMODB_PROJECTION,\n    TMP_AWS_DYNAMODB_LIMIT,\n    TMP_AWS_DYNAMODB_ATTRIBUTES_TO_GET,\n    TMP_AWS_DYNAMODB_INDEX_NAME,\n    TMP_AWS_DYNAMODB_SELECT,\n    TMP_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEXES,\n    TMP_AWS_DYNAMODB_LOCAL_SECONDARY_INDEXES,\n    TMP_AWS_DYNAMODB_EXCLUSIVE_START_TABLE,\n    TMP_AWS_DYNAMODB_TABLE_COUNT,\n    TMP_AWS_DYNAMODB_SCAN_FORWARD,\n    TMP_AWS_DYNAMODB_SEGMENT,\n    TMP_AWS_DYNAMODB_TOTAL_SEGMENTS,\n    TMP_AWS_DYNAMODB_COUNT,\n    TMP_AWS_DYNAMODB_SCANNED_COUNT,\n    TMP_AWS_DYNAMODB_ATTRIBUTE_DEFINITIONS,\n    TMP_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEX_UPDATES,\n    TMP_MESSAGING_SYSTEM,\n    TMP_MESSAGING_DESTINATION,\n    TMP_MESSAGING_DESTINATION_KIND,\n    TMP_MESSAGING_TEMP_DESTINATION,\n    TMP_MESSAGING_PROTOCOL,\n    TMP_MESSAGING_PROTOCOL_VERSION,\n    TMP_MESSAGING_URL,\n    TMP_MESSAGING_MESSAGE_ID,\n    TMP_MESSAGING_CONVERSATION_ID,\n    TMP_MESSAGING_MESSAGE_PAYLOAD_SIZE_BYTES,\n    TMP_MESSAGING_MESSAGE_PAYLOAD_COMPRESSED_SIZE_BYTES,\n    TMP_MESSAGING_OPERATION,\n    TMP_MESSAGING_CONSUMER_ID,\n    TMP_MESSAGING_RABBITMQ_ROUTING_KEY,\n    TMP_MESSAGING_KAFKA_MESSAGE_KEY,\n    TMP_MESSAGING_KAFKA_CONSUMER_GROUP,\n    TMP_MESSAGING_KAFKA_CLIENT_ID,\n    TMP_MESSAGING_KAFKA_PARTITION,\n    TMP_MESSAGING_KAFKA_TOMBSTONE,\n    TMP_RPC_SYSTEM,\n    TMP_RPC_SERVICE,\n    TMP_RPC_METHOD,\n    TMP_RPC_GRPC_STATUS_CODE,\n    TMP_RPC_JSONRPC_VERSION,\n    TMP_RPC_JSONRPC_REQUEST_ID,\n    TMP_RPC_JSONRPC_ERROR_CODE,\n    TMP_RPC_JSONRPC_ERROR_MESSAGE,\n    TMP_MESSAGE_TYPE,\n    TMP_MESSAGE_ID,\n    TMP_MESSAGE_COMPRESSED_SIZE,\n    TMP_MESSAGE_UNCOMPRESSED_SIZE,\n  ]);\n\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for DbSystemValues enum definition\n *\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n * ---------------------------------------------------------------------------------------------------------- */\n\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nconst TMP_DBSYSTEMVALUES_OTHER_SQL = 'other_sql';\nconst TMP_DBSYSTEMVALUES_MSSQL = 'mssql';\nconst TMP_DBSYSTEMVALUES_MYSQL = 'mysql';\nconst TMP_DBSYSTEMVALUES_ORACLE = 'oracle';\nconst TMP_DBSYSTEMVALUES_DB2 = 'db2';\nconst TMP_DBSYSTEMVALUES_POSTGRESQL = 'postgresql';\nconst TMP_DBSYSTEMVALUES_REDSHIFT = 'redshift';\nconst TMP_DBSYSTEMVALUES_HIVE = 'hive';\nconst TMP_DBSYSTEMVALUES_CLOUDSCAPE = 'cloudscape';\nconst TMP_DBSYSTEMVALUES_HSQLDB = 'hsqldb';\nconst TMP_DBSYSTEMVALUES_PROGRESS = 'progress';\nconst TMP_DBSYSTEMVALUES_MAXDB = 'maxdb';\nconst TMP_DBSYSTEMVALUES_HANADB = 'hanadb';\nconst TMP_DBSYSTEMVALUES_INGRES = 'ingres';\nconst TMP_DBSYSTEMVALUES_FIRSTSQL = 'firstsql';\nconst TMP_DBSYSTEMVALUES_EDB = 'edb';\nconst TMP_DBSYSTEMVALUES_CACHE = 'cache';\nconst TMP_DBSYSTEMVALUES_ADABAS = 'adabas';\nconst TMP_DBSYSTEMVALUES_FIREBIRD = 'firebird';\nconst TMP_DBSYSTEMVALUES_DERBY = 'derby';\nconst TMP_DBSYSTEMVALUES_FILEMAKER = 'filemaker';\nconst TMP_DBSYSTEMVALUES_INFORMIX = 'informix';\nconst TMP_DBSYSTEMVALUES_INSTANTDB = 'instantdb';\nconst TMP_DBSYSTEMVALUES_INTERBASE = 'interbase';\nconst TMP_DBSYSTEMVALUES_MARIADB = 'mariadb';\nconst TMP_DBSYSTEMVALUES_NETEZZA = 'netezza';\nconst TMP_DBSYSTEMVALUES_PERVASIVE = 'pervasive';\nconst TMP_DBSYSTEMVALUES_POINTBASE = 'pointbase';\nconst TMP_DBSYSTEMVALUES_SQLITE = 'sqlite';\nconst TMP_DBSYSTEMVALUES_SYBASE = 'sybase';\nconst TMP_DBSYSTEMVALUES_TERADATA = 'teradata';\nconst TMP_DBSYSTEMVALUES_VERTICA = 'vertica';\nconst TMP_DBSYSTEMVALUES_H2 = 'h2';\nconst TMP_DBSYSTEMVALUES_COLDFUSION = 'coldfusion';\nconst TMP_DBSYSTEMVALUES_CASSANDRA = 'cassandra';\nconst TMP_DBSYSTEMVALUES_HBASE = 'hbase';\nconst TMP_DBSYSTEMVALUES_MONGODB = 'mongodb';\nconst TMP_DBSYSTEMVALUES_REDIS = 'redis';\nconst TMP_DBSYSTEMVALUES_COUCHBASE = 'couchbase';\nconst TMP_DBSYSTEMVALUES_COUCHDB = 'couchdb';\nconst TMP_DBSYSTEMVALUES_COSMOSDB = 'cosmosdb';\nconst TMP_DBSYSTEMVALUES_DYNAMODB = 'dynamodb';\nconst TMP_DBSYSTEMVALUES_NEO4J = 'neo4j';\nconst TMP_DBSYSTEMVALUES_GEODE = 'geode';\nconst TMP_DBSYSTEMVALUES_ELASTICSEARCH = 'elasticsearch';\nconst TMP_DBSYSTEMVALUES_MEMCACHED = 'memcached';\nconst TMP_DBSYSTEMVALUES_COCKROACHDB = 'cockroachdb';\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_OTHER_SQL in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_OTHER_SQL = TMP_DBSYSTEMVALUES_OTHER_SQL;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_MSSQL in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_MSSQL = TMP_DBSYSTEMVALUES_MSSQL;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_MYSQL in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_MYSQL = TMP_DBSYSTEMVALUES_MYSQL;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_ORACLE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_ORACLE = TMP_DBSYSTEMVALUES_ORACLE;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_DB2 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_DB2 = TMP_DBSYSTEMVALUES_DB2;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_POSTGRESQL in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_POSTGRESQL = TMP_DBSYSTEMVALUES_POSTGRESQL;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_REDSHIFT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_REDSHIFT = TMP_DBSYSTEMVALUES_REDSHIFT;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_HIVE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_HIVE = TMP_DBSYSTEMVALUES_HIVE;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_CLOUDSCAPE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_CLOUDSCAPE = TMP_DBSYSTEMVALUES_CLOUDSCAPE;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_HSQLDB in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_HSQLDB = TMP_DBSYSTEMVALUES_HSQLDB;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_PROGRESS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_PROGRESS = TMP_DBSYSTEMVALUES_PROGRESS;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_MAXDB in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_MAXDB = TMP_DBSYSTEMVALUES_MAXDB;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_HANADB in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_HANADB = TMP_DBSYSTEMVALUES_HANADB;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_INGRES in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_INGRES = TMP_DBSYSTEMVALUES_INGRES;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_FIRSTSQL in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_FIRSTSQL = TMP_DBSYSTEMVALUES_FIRSTSQL;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_EDB in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_EDB = TMP_DBSYSTEMVALUES_EDB;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_CACHE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_CACHE = TMP_DBSYSTEMVALUES_CACHE;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_ADABAS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_ADABAS = TMP_DBSYSTEMVALUES_ADABAS;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_FIREBIRD in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_FIREBIRD = TMP_DBSYSTEMVALUES_FIREBIRD;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_DERBY in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_DERBY = TMP_DBSYSTEMVALUES_DERBY;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_FILEMAKER in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_FILEMAKER = TMP_DBSYSTEMVALUES_FILEMAKER;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_INFORMIX in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_INFORMIX = TMP_DBSYSTEMVALUES_INFORMIX;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_INSTANTDB in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_INSTANTDB = TMP_DBSYSTEMVALUES_INSTANTDB;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_INTERBASE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_INTERBASE = TMP_DBSYSTEMVALUES_INTERBASE;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_MARIADB in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_MARIADB = TMP_DBSYSTEMVALUES_MARIADB;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_NETEZZA in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_NETEZZA = TMP_DBSYSTEMVALUES_NETEZZA;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_PERVASIVE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_PERVASIVE = TMP_DBSYSTEMVALUES_PERVASIVE;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_POINTBASE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_POINTBASE = TMP_DBSYSTEMVALUES_POINTBASE;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_SQLITE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_SQLITE = TMP_DBSYSTEMVALUES_SQLITE;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_SYBASE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_SYBASE = TMP_DBSYSTEMVALUES_SYBASE;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_TERADATA in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_TERADATA = TMP_DBSYSTEMVALUES_TERADATA;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_VERTICA in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_VERTICA = TMP_DBSYSTEMVALUES_VERTICA;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_H2 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_H2 = TMP_DBSYSTEMVALUES_H2;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_COLDFUSION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_COLDFUSION = TMP_DBSYSTEMVALUES_COLDFUSION;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_CASSANDRA in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_CASSANDRA = TMP_DBSYSTEMVALUES_CASSANDRA;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_HBASE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_HBASE = TMP_DBSYSTEMVALUES_HBASE;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_MONGODB in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_MONGODB = TMP_DBSYSTEMVALUES_MONGODB;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_REDIS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_REDIS = TMP_DBSYSTEMVALUES_REDIS;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_COUCHBASE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_COUCHBASE = TMP_DBSYSTEMVALUES_COUCHBASE;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_COUCHDB in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_COUCHDB = TMP_DBSYSTEMVALUES_COUCHDB;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_COSMOSDB in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_COSMOSDB = TMP_DBSYSTEMVALUES_COSMOSDB;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_DYNAMODB in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_DYNAMODB = TMP_DBSYSTEMVALUES_DYNAMODB;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_NEO4J in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_NEO4J = TMP_DBSYSTEMVALUES_NEO4J;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_GEODE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_GEODE = TMP_DBSYSTEMVALUES_GEODE;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_ELASTICSEARCH in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_ELASTICSEARCH = TMP_DBSYSTEMVALUES_ELASTICSEARCH;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_MEMCACHED in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_MEMCACHED = TMP_DBSYSTEMVALUES_MEMCACHED;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_COCKROACHDB in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_COCKROACHDB = TMP_DBSYSTEMVALUES_COCKROACHDB;\n\n/**\n * Identifies the Values for DbSystemValues enum definition\n *\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n * @deprecated Use the DBSYSTEMVALUES_XXXXX constants rather than the DbSystemValues.XXXXX for bundle minification.\n */\nexport type DbSystemValues = {\n  /** Some other SQL database. Fallback only. See notes. */\n  OTHER_SQL: 'other_sql';\n\n  /** Microsoft SQL Server. */\n  MSSQL: 'mssql';\n\n  /** MySQL. */\n  MYSQL: 'mysql';\n\n  /** Oracle Database. */\n  ORACLE: 'oracle';\n\n  /** IBM Db2. */\n  DB2: 'db2';\n\n  /** PostgreSQL. */\n  POSTGRESQL: 'postgresql';\n\n  /** Amazon Redshift. */\n  REDSHIFT: 'redshift';\n\n  /** Apache Hive. */\n  HIVE: 'hive';\n\n  /** Cloudscape. */\n  CLOUDSCAPE: 'cloudscape';\n\n  /** HyperSQL DataBase. */\n  HSQLDB: 'hsqldb';\n\n  /** Progress Database. */\n  PROGRESS: 'progress';\n\n  /** SAP MaxDB. */\n  MAXDB: 'maxdb';\n\n  /** SAP HANA. */\n  HANADB: 'hanadb';\n\n  /** Ingres. */\n  INGRES: 'ingres';\n\n  /** FirstSQL. */\n  FIRSTSQL: 'firstsql';\n\n  /** EnterpriseDB. */\n  EDB: 'edb';\n\n  /** InterSystems Caché. */\n  CACHE: 'cache';\n\n  /** Adabas (Adaptable Database System). */\n  ADABAS: 'adabas';\n\n  /** Firebird. */\n  FIREBIRD: 'firebird';\n\n  /** Apache Derby. */\n  DERBY: 'derby';\n\n  /** FileMaker. */\n  FILEMAKER: 'filemaker';\n\n  /** Informix. */\n  INFORMIX: 'informix';\n\n  /** InstantDB. */\n  INSTANTDB: 'instantdb';\n\n  /** InterBase. */\n  INTERBASE: 'interbase';\n\n  /** MariaDB. */\n  MARIADB: 'mariadb';\n\n  /** Netezza. */\n  NETEZZA: 'netezza';\n\n  /** Pervasive PSQL. */\n  PERVASIVE: 'pervasive';\n\n  /** PointBase. */\n  POINTBASE: 'pointbase';\n\n  /** SQLite. */\n  SQLITE: 'sqlite';\n\n  /** Sybase. */\n  SYBASE: 'sybase';\n\n  /** Teradata. */\n  TERADATA: 'teradata';\n\n  /** Vertica. */\n  VERTICA: 'vertica';\n\n  /** H2. */\n  H2: 'h2';\n\n  /** ColdFusion IMQ. */\n  COLDFUSION: 'coldfusion';\n\n  /** Apache Cassandra. */\n  CASSANDRA: 'cassandra';\n\n  /** Apache HBase. */\n  HBASE: 'hbase';\n\n  /** MongoDB. */\n  MONGODB: 'mongodb';\n\n  /** Redis. */\n  REDIS: 'redis';\n\n  /** Couchbase. */\n  COUCHBASE: 'couchbase';\n\n  /** CouchDB. */\n  COUCHDB: 'couchdb';\n\n  /** Microsoft Azure Cosmos DB. */\n  COSMOSDB: 'cosmosdb';\n\n  /** Amazon DynamoDB. */\n  DYNAMODB: 'dynamodb';\n\n  /** Neo4j. */\n  NEO4J: 'neo4j';\n\n  /** Apache Geode. */\n  GEODE: 'geode';\n\n  /** Elasticsearch. */\n  ELASTICSEARCH: 'elasticsearch';\n\n  /** Memcached. */\n  MEMCACHED: 'memcached';\n\n  /** CockroachDB. */\n  COCKROACHDB: 'cockroachdb';\n};\n\n/**\n * The constant map of values for DbSystemValues.\n * @deprecated Use the DBSYSTEMVALUES_XXXXX constants rather than the DbSystemValues.XXXXX for bundle minification.\n */\nexport const DbSystemValues: DbSystemValues =\n  /*#__PURE__*/ createConstMap<DbSystemValues>([\n    TMP_DBSYSTEMVALUES_OTHER_SQL,\n    TMP_DBSYSTEMVALUES_MSSQL,\n    TMP_DBSYSTEMVALUES_MYSQL,\n    TMP_DBSYSTEMVALUES_ORACLE,\n    TMP_DBSYSTEMVALUES_DB2,\n    TMP_DBSYSTEMVALUES_POSTGRESQL,\n    TMP_DBSYSTEMVALUES_REDSHIFT,\n    TMP_DBSYSTEMVALUES_HIVE,\n    TMP_DBSYSTEMVALUES_CLOUDSCAPE,\n    TMP_DBSYSTEMVALUES_HSQLDB,\n    TMP_DBSYSTEMVALUES_PROGRESS,\n    TMP_DBSYSTEMVALUES_MAXDB,\n    TMP_DBSYSTEMVALUES_HANADB,\n    TMP_DBSYSTEMVALUES_INGRES,\n    TMP_DBSYSTEMVALUES_FIRSTSQL,\n    TMP_DBSYSTEMVALUES_EDB,\n    TMP_DBSYSTEMVALUES_CACHE,\n    TMP_DBSYSTEMVALUES_ADABAS,\n    TMP_DBSYSTEMVALUES_FIREBIRD,\n    TMP_DBSYSTEMVALUES_DERBY,\n    TMP_DBSYSTEMVALUES_FILEMAKER,\n    TMP_DBSYSTEMVALUES_INFORMIX,\n    TMP_DBSYSTEMVALUES_INSTANTDB,\n    TMP_DBSYSTEMVALUES_INTERBASE,\n    TMP_DBSYSTEMVALUES_MARIADB,\n    TMP_DBSYSTEMVALUES_NETEZZA,\n    TMP_DBSYSTEMVALUES_PERVASIVE,\n    TMP_DBSYSTEMVALUES_POINTBASE,\n    TMP_DBSYSTEMVALUES_SQLITE,\n    TMP_DBSYSTEMVALUES_SYBASE,\n    TMP_DBSYSTEMVALUES_TERADATA,\n    TMP_DBSYSTEMVALUES_VERTICA,\n    TMP_DBSYSTEMVALUES_H2,\n    TMP_DBSYSTEMVALUES_COLDFUSION,\n    TMP_DBSYSTEMVALUES_CASSANDRA,\n    TMP_DBSYSTEMVALUES_HBASE,\n    TMP_DBSYSTEMVALUES_MONGODB,\n    TMP_DBSYSTEMVALUES_REDIS,\n    TMP_DBSYSTEMVALUES_COUCHBASE,\n    TMP_DBSYSTEMVALUES_COUCHDB,\n    TMP_DBSYSTEMVALUES_COSMOSDB,\n    TMP_DBSYSTEMVALUES_DYNAMODB,\n    TMP_DBSYSTEMVALUES_NEO4J,\n    TMP_DBSYSTEMVALUES_GEODE,\n    TMP_DBSYSTEMVALUES_ELASTICSEARCH,\n    TMP_DBSYSTEMVALUES_MEMCACHED,\n    TMP_DBSYSTEMVALUES_COCKROACHDB,\n  ]);\n\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for DbCassandraConsistencyLevelValues enum definition\n *\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n * ---------------------------------------------------------------------------------------------------------- */\n\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nconst TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ALL = 'all';\nconst TMP_DBCASSANDRACONSISTENCYLEVELVALUES_EACH_QUORUM = 'each_quorum';\nconst TMP_DBCASSANDRACONSISTENCYLEVELVALUES_QUORUM = 'quorum';\nconst TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_QUORUM = 'local_quorum';\nconst TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ONE = 'one';\nconst TMP_DBCASSANDRACONSISTENCYLEVELVALUES_TWO = 'two';\nconst TMP_DBCASSANDRACONSISTENCYLEVELVALUES_THREE = 'three';\nconst TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_ONE = 'local_one';\nconst TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ANY = 'any';\nconst TMP_DBCASSANDRACONSISTENCYLEVELVALUES_SERIAL = 'serial';\nconst TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_SERIAL = 'local_serial';\n\n/**\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n *\n * @deprecated Use DB_CASSANDRA_CONSISTENCY_LEVEL_VALUE_ALL in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBCASSANDRACONSISTENCYLEVELVALUES_ALL =\n  TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ALL;\n\n/**\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n *\n * @deprecated Use DB_CASSANDRA_CONSISTENCY_LEVEL_VALUE_EACH_QUORUM in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBCASSANDRACONSISTENCYLEVELVALUES_EACH_QUORUM =\n  TMP_DBCASSANDRACONSISTENCYLEVELVALUES_EACH_QUORUM;\n\n/**\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n *\n * @deprecated Use DB_CASSANDRA_CONSISTENCY_LEVEL_VALUE_QUORUM in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBCASSANDRACONSISTENCYLEVELVALUES_QUORUM =\n  TMP_DBCASSANDRACONSISTENCYLEVELVALUES_QUORUM;\n\n/**\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n *\n * @deprecated Use DB_CASSANDRA_CONSISTENCY_LEVEL_VALUE_LOCAL_QUORUM in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_QUORUM =\n  TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_QUORUM;\n\n/**\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n *\n * @deprecated Use DB_CASSANDRA_CONSISTENCY_LEVEL_VALUE_ONE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBCASSANDRACONSISTENCYLEVELVALUES_ONE =\n  TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ONE;\n\n/**\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n *\n * @deprecated Use DB_CASSANDRA_CONSISTENCY_LEVEL_VALUE_TWO in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBCASSANDRACONSISTENCYLEVELVALUES_TWO =\n  TMP_DBCASSANDRACONSISTENCYLEVELVALUES_TWO;\n\n/**\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n *\n * @deprecated Use DB_CASSANDRA_CONSISTENCY_LEVEL_VALUE_THREE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBCASSANDRACONSISTENCYLEVELVALUES_THREE =\n  TMP_DBCASSANDRACONSISTENCYLEVELVALUES_THREE;\n\n/**\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n *\n * @deprecated Use DB_CASSANDRA_CONSISTENCY_LEVEL_VALUE_LOCAL_ONE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_ONE =\n  TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_ONE;\n\n/**\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n *\n * @deprecated Use DB_CASSANDRA_CONSISTENCY_LEVEL_VALUE_ANY in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBCASSANDRACONSISTENCYLEVELVALUES_ANY =\n  TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ANY;\n\n/**\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n *\n * @deprecated Use DB_CASSANDRA_CONSISTENCY_LEVEL_VALUE_SERIAL in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBCASSANDRACONSISTENCYLEVELVALUES_SERIAL =\n  TMP_DBCASSANDRACONSISTENCYLEVELVALUES_SERIAL;\n\n/**\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n *\n * @deprecated Use DB_CASSANDRA_CONSISTENCY_LEVEL_VALUE_LOCAL_SERIAL in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_SERIAL =\n  TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_SERIAL;\n\n/**\n * Identifies the Values for DbCassandraConsistencyLevelValues enum definition\n *\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n * @deprecated Use the DBCASSANDRACONSISTENCYLEVELVALUES_XXXXX constants rather than the DbCassandraConsistencyLevelValues.XXXXX for bundle minification.\n */\nexport type DbCassandraConsistencyLevelValues = {\n  /** all. */\n  ALL: 'all';\n\n  /** each_quorum. */\n  EACH_QUORUM: 'each_quorum';\n\n  /** quorum. */\n  QUORUM: 'quorum';\n\n  /** local_quorum. */\n  LOCAL_QUORUM: 'local_quorum';\n\n  /** one. */\n  ONE: 'one';\n\n  /** two. */\n  TWO: 'two';\n\n  /** three. */\n  THREE: 'three';\n\n  /** local_one. */\n  LOCAL_ONE: 'local_one';\n\n  /** any. */\n  ANY: 'any';\n\n  /** serial. */\n  SERIAL: 'serial';\n\n  /** local_serial. */\n  LOCAL_SERIAL: 'local_serial';\n};\n\n/**\n * The constant map of values for DbCassandraConsistencyLevelValues.\n * @deprecated Use the DBCASSANDRACONSISTENCYLEVELVALUES_XXXXX constants rather than the DbCassandraConsistencyLevelValues.XXXXX for bundle minification.\n */\nexport const DbCassandraConsistencyLevelValues: DbCassandraConsistencyLevelValues =\n  /*#__PURE__*/ createConstMap<DbCassandraConsistencyLevelValues>([\n    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ALL,\n    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_EACH_QUORUM,\n    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_QUORUM,\n    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_QUORUM,\n    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ONE,\n    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_TWO,\n    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_THREE,\n    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_ONE,\n    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ANY,\n    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_SERIAL,\n    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_SERIAL,\n  ]);\n\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for FaasTriggerValues enum definition\n *\n * Type of the trigger on which the function is executed.\n * ---------------------------------------------------------------------------------------------------------- */\n\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nconst TMP_FAASTRIGGERVALUES_DATASOURCE = 'datasource';\nconst TMP_FAASTRIGGERVALUES_HTTP = 'http';\nconst TMP_FAASTRIGGERVALUES_PUBSUB = 'pubsub';\nconst TMP_FAASTRIGGERVALUES_TIMER = 'timer';\nconst TMP_FAASTRIGGERVALUES_OTHER = 'other';\n\n/**\n * Type of the trigger on which the function is executed.\n *\n * @deprecated Use FAAS_TRIGGER_VALUE_DATASOURCE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const FAASTRIGGERVALUES_DATASOURCE = TMP_FAASTRIGGERVALUES_DATASOURCE;\n\n/**\n * Type of the trigger on which the function is executed.\n *\n * @deprecated Use FAAS_TRIGGER_VALUE_HTTP in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const FAASTRIGGERVALUES_HTTP = TMP_FAASTRIGGERVALUES_HTTP;\n\n/**\n * Type of the trigger on which the function is executed.\n *\n * @deprecated Use FAAS_TRIGGER_VALUE_PUBSUB in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const FAASTRIGGERVALUES_PUBSUB = TMP_FAASTRIGGERVALUES_PUBSUB;\n\n/**\n * Type of the trigger on which the function is executed.\n *\n * @deprecated Use FAAS_TRIGGER_VALUE_TIMER in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const FAASTRIGGERVALUES_TIMER = TMP_FAASTRIGGERVALUES_TIMER;\n\n/**\n * Type of the trigger on which the function is executed.\n *\n * @deprecated Use FAAS_TRIGGER_VALUE_OTHER in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const FAASTRIGGERVALUES_OTHER = TMP_FAASTRIGGERVALUES_OTHER;\n\n/**\n * Identifies the Values for FaasTriggerValues enum definition\n *\n * Type of the trigger on which the function is executed.\n * @deprecated Use the FAASTRIGGERVALUES_XXXXX constants rather than the FaasTriggerValues.XXXXX for bundle minification.\n */\nexport type FaasTriggerValues = {\n  /** A response to some data source operation such as a database or filesystem read/write. */\n  DATASOURCE: 'datasource';\n\n  /** To provide an answer to an inbound HTTP request. */\n  HTTP: 'http';\n\n  /** A function is set to be executed when messages are sent to a messaging system. */\n  PUBSUB: 'pubsub';\n\n  /** A function is scheduled to be executed regularly. */\n  TIMER: 'timer';\n\n  /** If none of the others apply. */\n  OTHER: 'other';\n};\n\n/**\n * The constant map of values for FaasTriggerValues.\n * @deprecated Use the FAASTRIGGERVALUES_XXXXX constants rather than the FaasTriggerValues.XXXXX for bundle minification.\n */\nexport const FaasTriggerValues: FaasTriggerValues =\n  /*#__PURE__*/ createConstMap<FaasTriggerValues>([\n    TMP_FAASTRIGGERVALUES_DATASOURCE,\n    TMP_FAASTRIGGERVALUES_HTTP,\n    TMP_FAASTRIGGERVALUES_PUBSUB,\n    TMP_FAASTRIGGERVALUES_TIMER,\n    TMP_FAASTRIGGERVALUES_OTHER,\n  ]);\n\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for FaasDocumentOperationValues enum definition\n *\n * Describes the type of the operation that was performed on the data.\n * ---------------------------------------------------------------------------------------------------------- */\n\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nconst TMP_FAASDOCUMENTOPERATIONVALUES_INSERT = 'insert';\nconst TMP_FAASDOCUMENTOPERATIONVALUES_EDIT = 'edit';\nconst TMP_FAASDOCUMENTOPERATIONVALUES_DELETE = 'delete';\n\n/**\n * Describes the type of the operation that was performed on the data.\n *\n * @deprecated Use FAAS_DOCUMENT_OPERATION_VALUE_INSERT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const FAASDOCUMENTOPERATIONVALUES_INSERT =\n  TMP_FAASDOCUMENTOPERATIONVALUES_INSERT;\n\n/**\n * Describes the type of the operation that was performed on the data.\n *\n * @deprecated Use FAAS_DOCUMENT_OPERATION_VALUE_EDIT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const FAASDOCUMENTOPERATIONVALUES_EDIT =\n  TMP_FAASDOCUMENTOPERATIONVALUES_EDIT;\n\n/**\n * Describes the type of the operation that was performed on the data.\n *\n * @deprecated Use FAAS_DOCUMENT_OPERATION_VALUE_DELETE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const FAASDOCUMENTOPERATIONVALUES_DELETE =\n  TMP_FAASDOCUMENTOPERATIONVALUES_DELETE;\n\n/**\n * Identifies the Values for FaasDocumentOperationValues enum definition\n *\n * Describes the type of the operation that was performed on the data.\n * @deprecated Use the FAASDOCUMENTOPERATIONVALUES_XXXXX constants rather than the FaasDocumentOperationValues.XXXXX for bundle minification.\n */\nexport type FaasDocumentOperationValues = {\n  /** When a new object is created. */\n  INSERT: 'insert';\n\n  /** When an object is modified. */\n  EDIT: 'edit';\n\n  /** When an object is deleted. */\n  DELETE: 'delete';\n};\n\n/**\n * The constant map of values for FaasDocumentOperationValues.\n * @deprecated Use the FAASDOCUMENTOPERATIONVALUES_XXXXX constants rather than the FaasDocumentOperationValues.XXXXX for bundle minification.\n */\nexport const FaasDocumentOperationValues: FaasDocumentOperationValues =\n  /*#__PURE__*/ createConstMap<FaasDocumentOperationValues>([\n    TMP_FAASDOCUMENTOPERATIONVALUES_INSERT,\n    TMP_FAASDOCUMENTOPERATIONVALUES_EDIT,\n    TMP_FAASDOCUMENTOPERATIONVALUES_DELETE,\n  ]);\n\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for FaasInvokedProviderValues enum definition\n *\n * The cloud provider of the invoked function.\n *\n * Note: SHOULD be equal to the `cloud.provider` resource attribute of the invoked function.\n * ---------------------------------------------------------------------------------------------------------- */\n\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nconst TMP_FAASINVOKEDPROVIDERVALUES_ALIBABA_CLOUD = 'alibaba_cloud';\nconst TMP_FAASINVOKEDPROVIDERVALUES_AWS = 'aws';\nconst TMP_FAASINVOKEDPROVIDERVALUES_AZURE = 'azure';\nconst TMP_FAASINVOKEDPROVIDERVALUES_GCP = 'gcp';\n\n/**\n * The cloud provider of the invoked function.\n *\n * Note: SHOULD be equal to the `cloud.provider` resource attribute of the invoked function.\n *\n * @deprecated Use FAAS_INVOKED_PROVIDER_VALUE_ALIBABA_CLOUD in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const FAASINVOKEDPROVIDERVALUES_ALIBABA_CLOUD =\n  TMP_FAASINVOKEDPROVIDERVALUES_ALIBABA_CLOUD;\n\n/**\n * The cloud provider of the invoked function.\n *\n * Note: SHOULD be equal to the `cloud.provider` resource attribute of the invoked function.\n *\n * @deprecated Use FAAS_INVOKED_PROVIDER_VALUE_AWS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const FAASINVOKEDPROVIDERVALUES_AWS = TMP_FAASINVOKEDPROVIDERVALUES_AWS;\n\n/**\n * The cloud provider of the invoked function.\n *\n * Note: SHOULD be equal to the `cloud.provider` resource attribute of the invoked function.\n *\n * @deprecated Use FAAS_INVOKED_PROVIDER_VALUE_AZURE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const FAASINVOKEDPROVIDERVALUES_AZURE =\n  TMP_FAASINVOKEDPROVIDERVALUES_AZURE;\n\n/**\n * The cloud provider of the invoked function.\n *\n * Note: SHOULD be equal to the `cloud.provider` resource attribute of the invoked function.\n *\n * @deprecated Use FAAS_INVOKED_PROVIDER_VALUE_GCP in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const FAASINVOKEDPROVIDERVALUES_GCP = TMP_FAASINVOKEDPROVIDERVALUES_GCP;\n\n/**\n * Identifies the Values for FaasInvokedProviderValues enum definition\n *\n * The cloud provider of the invoked function.\n *\n * Note: SHOULD be equal to the `cloud.provider` resource attribute of the invoked function.\n * @deprecated Use the FAASINVOKEDPROVIDERVALUES_XXXXX constants rather than the FaasInvokedProviderValues.XXXXX for bundle minification.\n */\nexport type FaasInvokedProviderValues = {\n  /** Alibaba Cloud. */\n  ALIBABA_CLOUD: 'alibaba_cloud';\n\n  /** Amazon Web Services. */\n  AWS: 'aws';\n\n  /** Microsoft Azure. */\n  AZURE: 'azure';\n\n  /** Google Cloud Platform. */\n  GCP: 'gcp';\n};\n\n/**\n * The constant map of values for FaasInvokedProviderValues.\n * @deprecated Use the FAASINVOKEDPROVIDERVALUES_XXXXX constants rather than the FaasInvokedProviderValues.XXXXX for bundle minification.\n */\nexport const FaasInvokedProviderValues: FaasInvokedProviderValues =\n  /*#__PURE__*/ createConstMap<FaasInvokedProviderValues>([\n    TMP_FAASINVOKEDPROVIDERVALUES_ALIBABA_CLOUD,\n    TMP_FAASINVOKEDPROVIDERVALUES_AWS,\n    TMP_FAASINVOKEDPROVIDERVALUES_AZURE,\n    TMP_FAASINVOKEDPROVIDERVALUES_GCP,\n  ]);\n\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for NetTransportValues enum definition\n *\n * Transport protocol used. See note below.\n * ---------------------------------------------------------------------------------------------------------- */\n\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nconst TMP_NETTRANSPORTVALUES_IP_TCP = 'ip_tcp';\nconst TMP_NETTRANSPORTVALUES_IP_UDP = 'ip_udp';\nconst TMP_NETTRANSPORTVALUES_IP = 'ip';\nconst TMP_NETTRANSPORTVALUES_UNIX = 'unix';\nconst TMP_NETTRANSPORTVALUES_PIPE = 'pipe';\nconst TMP_NETTRANSPORTVALUES_INPROC = 'inproc';\nconst TMP_NETTRANSPORTVALUES_OTHER = 'other';\n\n/**\n * Transport protocol used. See note below.\n *\n * @deprecated Use NET_TRANSPORT_VALUE_IP_TCP in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const NETTRANSPORTVALUES_IP_TCP = TMP_NETTRANSPORTVALUES_IP_TCP;\n\n/**\n * Transport protocol used. See note below.\n *\n * @deprecated Use NET_TRANSPORT_VALUE_IP_UDP in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const NETTRANSPORTVALUES_IP_UDP = TMP_NETTRANSPORTVALUES_IP_UDP;\n\n/**\n * Transport protocol used. See note below.\n *\n * @deprecated Removed in v1.21.0.\n */\nexport const NETTRANSPORTVALUES_IP = TMP_NETTRANSPORTVALUES_IP;\n\n/**\n * Transport protocol used. See note below.\n *\n * @deprecated Removed in v1.21.0.\n */\nexport const NETTRANSPORTVALUES_UNIX = TMP_NETTRANSPORTVALUES_UNIX;\n\n/**\n * Transport protocol used. See note below.\n *\n * @deprecated Use NET_TRANSPORT_VALUE_PIPE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const NETTRANSPORTVALUES_PIPE = TMP_NETTRANSPORTVALUES_PIPE;\n\n/**\n * Transport protocol used. See note below.\n *\n * @deprecated Use NET_TRANSPORT_VALUE_INPROC in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const NETTRANSPORTVALUES_INPROC = TMP_NETTRANSPORTVALUES_INPROC;\n\n/**\n * Transport protocol used. See note below.\n *\n * @deprecated Use NET_TRANSPORT_VALUE_OTHER in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const NETTRANSPORTVALUES_OTHER = TMP_NETTRANSPORTVALUES_OTHER;\n\n/**\n * Identifies the Values for NetTransportValues enum definition\n *\n * Transport protocol used. See note below.\n * @deprecated Use the NETTRANSPORTVALUES_XXXXX constants rather than the NetTransportValues.XXXXX for bundle minification.\n */\nexport type NetTransportValues = {\n  /** ip_tcp. */\n  IP_TCP: 'ip_tcp';\n\n  /** ip_udp. */\n  IP_UDP: 'ip_udp';\n\n  /** Another IP-based protocol. */\n  IP: 'ip';\n\n  /** Unix Domain socket. See below. */\n  UNIX: 'unix';\n\n  /** Named or anonymous pipe. See note below. */\n  PIPE: 'pipe';\n\n  /** In-process communication. */\n  INPROC: 'inproc';\n\n  /** Something else (non IP-based). */\n  OTHER: 'other';\n};\n\n/**\n * The constant map of values for NetTransportValues.\n * @deprecated Use the NETTRANSPORTVALUES_XXXXX constants rather than the NetTransportValues.XXXXX for bundle minification.\n */\nexport const NetTransportValues: NetTransportValues =\n  /*#__PURE__*/ createConstMap<NetTransportValues>([\n    TMP_NETTRANSPORTVALUES_IP_TCP,\n    TMP_NETTRANSPORTVALUES_IP_UDP,\n    TMP_NETTRANSPORTVALUES_IP,\n    TMP_NETTRANSPORTVALUES_UNIX,\n    TMP_NETTRANSPORTVALUES_PIPE,\n    TMP_NETTRANSPORTVALUES_INPROC,\n    TMP_NETTRANSPORTVALUES_OTHER,\n  ]);\n\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for NetHostConnectionTypeValues enum definition\n *\n * The internet connection type currently being used by the host.\n * ---------------------------------------------------------------------------------------------------------- */\n\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nconst TMP_NETHOSTCONNECTIONTYPEVALUES_WIFI = 'wifi';\nconst TMP_NETHOSTCONNECTIONTYPEVALUES_WIRED = 'wired';\nconst TMP_NETHOSTCONNECTIONTYPEVALUES_CELL = 'cell';\nconst TMP_NETHOSTCONNECTIONTYPEVALUES_UNAVAILABLE = 'unavailable';\nconst TMP_NETHOSTCONNECTIONTYPEVALUES_UNKNOWN = 'unknown';\n\n/**\n * The internet connection type currently being used by the host.\n *\n * @deprecated Use NETWORK_CONNECTION_TYPE_VALUE_WIFI in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const NETHOSTCONNECTIONTYPEVALUES_WIFI =\n  TMP_NETHOSTCONNECTIONTYPEVALUES_WIFI;\n\n/**\n * The internet connection type currently being used by the host.\n *\n * @deprecated Use NETWORK_CONNECTION_TYPE_VALUE_WIRED in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const NETHOSTCONNECTIONTYPEVALUES_WIRED =\n  TMP_NETHOSTCONNECTIONTYPEVALUES_WIRED;\n\n/**\n * The internet connection type currently being used by the host.\n *\n * @deprecated Use NETWORK_CONNECTION_TYPE_VALUE_CELL in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const NETHOSTCONNECTIONTYPEVALUES_CELL =\n  TMP_NETHOSTCONNECTIONTYPEVALUES_CELL;\n\n/**\n * The internet connection type currently being used by the host.\n *\n * @deprecated Use NETWORK_CONNECTION_TYPE_VALUE_UNAVAILABLE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const NETHOSTCONNECTIONTYPEVALUES_UNAVAILABLE =\n  TMP_NETHOSTCONNECTIONTYPEVALUES_UNAVAILABLE;\n\n/**\n * The internet connection type currently being used by the host.\n *\n * @deprecated Use NETWORK_CONNECTION_TYPE_VALUE_UNKNOWN in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const NETHOSTCONNECTIONTYPEVALUES_UNKNOWN =\n  TMP_NETHOSTCONNECTIONTYPEVALUES_UNKNOWN;\n\n/**\n * Identifies the Values for NetHostConnectionTypeValues enum definition\n *\n * The internet connection type currently being used by the host.\n * @deprecated Use the NETHOSTCONNECTIONTYPEVALUES_XXXXX constants rather than the NetHostConnectionTypeValues.XXXXX for bundle minification.\n */\nexport type NetHostConnectionTypeValues = {\n  /** wifi. */\n  WIFI: 'wifi';\n\n  /** wired. */\n  WIRED: 'wired';\n\n  /** cell. */\n  CELL: 'cell';\n\n  /** unavailable. */\n  UNAVAILABLE: 'unavailable';\n\n  /** unknown. */\n  UNKNOWN: 'unknown';\n};\n\n/**\n * The constant map of values for NetHostConnectionTypeValues.\n * @deprecated Use the NETHOSTCONNECTIONTYPEVALUES_XXXXX constants rather than the NetHostConnectionTypeValues.XXXXX for bundle minification.\n */\nexport const NetHostConnectionTypeValues: NetHostConnectionTypeValues =\n  /*#__PURE__*/ createConstMap<NetHostConnectionTypeValues>([\n    TMP_NETHOSTCONNECTIONTYPEVALUES_WIFI,\n    TMP_NETHOSTCONNECTIONTYPEVALUES_WIRED,\n    TMP_NETHOSTCONNECTIONTYPEVALUES_CELL,\n    TMP_NETHOSTCONNECTIONTYPEVALUES_UNAVAILABLE,\n    TMP_NETHOSTCONNECTIONTYPEVALUES_UNKNOWN,\n  ]);\n\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for NetHostConnectionSubtypeValues enum definition\n *\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n * ---------------------------------------------------------------------------------------------------------- */\n\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_GPRS = 'gprs';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EDGE = 'edge';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_UMTS = 'umts';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_CDMA = 'cdma';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_0 = 'evdo_0';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_A = 'evdo_a';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_CDMA2000_1XRTT = 'cdma2000_1xrtt';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSDPA = 'hsdpa';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSUPA = 'hsupa';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSPA = 'hspa';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_IDEN = 'iden';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_B = 'evdo_b';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_LTE = 'lte';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EHRPD = 'ehrpd';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSPAP = 'hspap';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_GSM = 'gsm';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_TD_SCDMA = 'td_scdma';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_IWLAN = 'iwlan';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_NR = 'nr';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_NRNSA = 'nrnsa';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_LTE_CA = 'lte_ca';\n\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_GPRS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const NETHOSTCONNECTIONSUBTYPEVALUES_GPRS =\n  TMP_NETHOSTCONNECTIONSUBTYPEVALUES_GPRS;\n\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_EDGE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const NETHOSTCONNECTIONSUBTYPEVALUES_EDGE =\n  TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EDGE;\n\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_UMTS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const NETHOSTCONNECTIONSUBTYPEVALUES_UMTS =\n  TMP_NETHOSTCONNECTIONSUBTYPEVALUES_UMTS;\n\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_CDMA in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const NETHOSTCONNECTIONSUBTYPEVALUES_CDMA =\n  TMP_NETHOSTCONNECTIONSUBTYPEVALUES_CDMA;\n\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_EVDO_0 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_0 =\n  TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_0;\n\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_EVDO_A in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_A =\n  TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_A;\n\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_CDMA2000_1XRTT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const NETHOSTCONNECTIONSUBTYPEVALUES_CDMA2000_1XRTT =\n  TMP_NETHOSTCONNECTIONSUBTYPEVALUES_CDMA2000_1XRTT;\n\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_HSDPA in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const NETHOSTCONNECTIONSUBTYPEVALUES_HSDPA =\n  TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSDPA;\n\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_HSUPA in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const NETHOSTCONNECTIONSUBTYPEVALUES_HSUPA =\n  TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSUPA;\n\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_HSPA in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const NETHOSTCONNECTIONSUBTYPEVALUES_HSPA =\n  TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSPA;\n\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_IDEN in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const NETHOSTCONNECTIONSUBTYPEVALUES_IDEN =\n  TMP_NETHOSTCONNECTIONSUBTYPEVALUES_IDEN;\n\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_EVDO_B in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_B =\n  TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_B;\n\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_LTE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const NETHOSTCONNECTIONSUBTYPEVALUES_LTE =\n  TMP_NETHOSTCONNECTIONSUBTYPEVALUES_LTE;\n\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_EHRPD in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const NETHOSTCONNECTIONSUBTYPEVALUES_EHRPD =\n  TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EHRPD;\n\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_HSPAP in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const NETHOSTCONNECTIONSUBTYPEVALUES_HSPAP =\n  TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSPAP;\n\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_GSM in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const NETHOSTCONNECTIONSUBTYPEVALUES_GSM =\n  TMP_NETHOSTCONNECTIONSUBTYPEVALUES_GSM;\n\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_TD_SCDMA in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const NETHOSTCONNECTIONSUBTYPEVALUES_TD_SCDMA =\n  TMP_NETHOSTCONNECTIONSUBTYPEVALUES_TD_SCDMA;\n\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_IWLAN in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const NETHOSTCONNECTIONSUBTYPEVALUES_IWLAN =\n  TMP_NETHOSTCONNECTIONSUBTYPEVALUES_IWLAN;\n\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_NR in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const NETHOSTCONNECTIONSUBTYPEVALUES_NR =\n  TMP_NETHOSTCONNECTIONSUBTYPEVALUES_NR;\n\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_NRNSA in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const NETHOSTCONNECTIONSUBTYPEVALUES_NRNSA =\n  TMP_NETHOSTCONNECTIONSUBTYPEVALUES_NRNSA;\n\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_LTE_CA in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const NETHOSTCONNECTIONSUBTYPEVALUES_LTE_CA =\n  TMP_NETHOSTCONNECTIONSUBTYPEVALUES_LTE_CA;\n\n/**\n * Identifies the Values for NetHostConnectionSubtypeValues enum definition\n *\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n * @deprecated Use the NETHOSTCONNECTIONSUBTYPEVALUES_XXXXX constants rather than the NetHostConnectionSubtypeValues.XXXXX for bundle minification.\n */\nexport type NetHostConnectionSubtypeValues = {\n  /** GPRS. */\n  GPRS: 'gprs';\n\n  /** EDGE. */\n  EDGE: 'edge';\n\n  /** UMTS. */\n  UMTS: 'umts';\n\n  /** CDMA. */\n  CDMA: 'cdma';\n\n  /** EVDO Rel. 0. */\n  EVDO_0: 'evdo_0';\n\n  /** EVDO Rev. A. */\n  EVDO_A: 'evdo_a';\n\n  /** CDMA2000 1XRTT. */\n  CDMA2000_1XRTT: 'cdma2000_1xrtt';\n\n  /** HSDPA. */\n  HSDPA: 'hsdpa';\n\n  /** HSUPA. */\n  HSUPA: 'hsupa';\n\n  /** HSPA. */\n  HSPA: 'hspa';\n\n  /** IDEN. */\n  IDEN: 'iden';\n\n  /** EVDO Rev. B. */\n  EVDO_B: 'evdo_b';\n\n  /** LTE. */\n  LTE: 'lte';\n\n  /** EHRPD. */\n  EHRPD: 'ehrpd';\n\n  /** HSPAP. */\n  HSPAP: 'hspap';\n\n  /** GSM. */\n  GSM: 'gsm';\n\n  /** TD-SCDMA. */\n  TD_SCDMA: 'td_scdma';\n\n  /** IWLAN. */\n  IWLAN: 'iwlan';\n\n  /** 5G NR (New Radio). */\n  NR: 'nr';\n\n  /** 5G NRNSA (New Radio Non-Standalone). */\n  NRNSA: 'nrnsa';\n\n  /** LTE CA. */\n  LTE_CA: 'lte_ca';\n};\n\n/**\n * The constant map of values for NetHostConnectionSubtypeValues.\n * @deprecated Use the NETHOSTCONNECTIONSUBTYPEVALUES_XXXXX constants rather than the NetHostConnectionSubtypeValues.XXXXX for bundle minification.\n */\nexport const NetHostConnectionSubtypeValues: NetHostConnectionSubtypeValues =\n  /*#__PURE__*/ createConstMap<NetHostConnectionSubtypeValues>([\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_GPRS,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EDGE,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_UMTS,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_CDMA,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_0,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_A,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_CDMA2000_1XRTT,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSDPA,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSUPA,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSPA,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_IDEN,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_B,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_LTE,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EHRPD,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSPAP,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_GSM,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_TD_SCDMA,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_IWLAN,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_NR,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_NRNSA,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_LTE_CA,\n  ]);\n\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for HttpFlavorValues enum definition\n *\n * Kind of HTTP protocol used.\n *\n * Note: If `net.transport` is not specified, it can be assumed to be `IP.TCP` except if `http.flavor` is `QUIC`, in which case `IP.UDP` is assumed.\n * ---------------------------------------------------------------------------------------------------------- */\n\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nconst TMP_HTTPFLAVORVALUES_HTTP_1_0 = '1.0';\nconst TMP_HTTPFLAVORVALUES_HTTP_1_1 = '1.1';\nconst TMP_HTTPFLAVORVALUES_HTTP_2_0 = '2.0';\nconst TMP_HTTPFLAVORVALUES_SPDY = 'SPDY';\nconst TMP_HTTPFLAVORVALUES_QUIC = 'QUIC';\n\n/**\n * Kind of HTTP protocol used.\n *\n * Note: If `net.transport` is not specified, it can be assumed to be `IP.TCP` except if `http.flavor` is `QUIC`, in which case `IP.UDP` is assumed.\n *\n * @deprecated Use HTTP_FLAVOR_VALUE_HTTP_1_0 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const HTTPFLAVORVALUES_HTTP_1_0 = TMP_HTTPFLAVORVALUES_HTTP_1_0;\n\n/**\n * Kind of HTTP protocol used.\n *\n * Note: If `net.transport` is not specified, it can be assumed to be `IP.TCP` except if `http.flavor` is `QUIC`, in which case `IP.UDP` is assumed.\n *\n * @deprecated Use HTTP_FLAVOR_VALUE_HTTP_1_1 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const HTTPFLAVORVALUES_HTTP_1_1 = TMP_HTTPFLAVORVALUES_HTTP_1_1;\n\n/**\n * Kind of HTTP protocol used.\n *\n * Note: If `net.transport` is not specified, it can be assumed to be `IP.TCP` except if `http.flavor` is `QUIC`, in which case `IP.UDP` is assumed.\n *\n * @deprecated Use HTTP_FLAVOR_VALUE_HTTP_2_0 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const HTTPFLAVORVALUES_HTTP_2_0 = TMP_HTTPFLAVORVALUES_HTTP_2_0;\n\n/**\n * Kind of HTTP protocol used.\n *\n * Note: If `net.transport` is not specified, it can be assumed to be `IP.TCP` except if `http.flavor` is `QUIC`, in which case `IP.UDP` is assumed.\n *\n * @deprecated Use HTTP_FLAVOR_VALUE_SPDY in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const HTTPFLAVORVALUES_SPDY = TMP_HTTPFLAVORVALUES_SPDY;\n\n/**\n * Kind of HTTP protocol used.\n *\n * Note: If `net.transport` is not specified, it can be assumed to be `IP.TCP` except if `http.flavor` is `QUIC`, in which case `IP.UDP` is assumed.\n *\n * @deprecated Use HTTP_FLAVOR_VALUE_QUIC in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const HTTPFLAVORVALUES_QUIC = TMP_HTTPFLAVORVALUES_QUIC;\n\n/**\n * Identifies the Values for HttpFlavorValues enum definition\n *\n * Kind of HTTP protocol used.\n *\n * Note: If `net.transport` is not specified, it can be assumed to be `IP.TCP` except if `http.flavor` is `QUIC`, in which case `IP.UDP` is assumed.\n * @deprecated Use the HTTPFLAVORVALUES_XXXXX constants rather than the HttpFlavorValues.XXXXX for bundle minification.\n */\nexport type HttpFlavorValues = {\n  /** HTTP 1.0. */\n  HTTP_1_0: '1.0';\n\n  /** HTTP 1.1. */\n  HTTP_1_1: '1.1';\n\n  /** HTTP 2. */\n  HTTP_2_0: '2.0';\n\n  /** SPDY protocol. */\n  SPDY: 'SPDY';\n\n  /** QUIC protocol. */\n  QUIC: 'QUIC';\n};\n\n/**\n * The constant map of values for HttpFlavorValues.\n * @deprecated Use the HTTPFLAVORVALUES_XXXXX constants rather than the HttpFlavorValues.XXXXX for bundle minification.\n */\nexport const HttpFlavorValues: HttpFlavorValues = {\n  HTTP_1_0: TMP_HTTPFLAVORVALUES_HTTP_1_0,\n  HTTP_1_1: TMP_HTTPFLAVORVALUES_HTTP_1_1,\n  HTTP_2_0: TMP_HTTPFLAVORVALUES_HTTP_2_0,\n  SPDY: TMP_HTTPFLAVORVALUES_SPDY,\n  QUIC: TMP_HTTPFLAVORVALUES_QUIC,\n};\n\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for MessagingDestinationKindValues enum definition\n *\n * The kind of message destination.\n * ---------------------------------------------------------------------------------------------------------- */\n\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nconst TMP_MESSAGINGDESTINATIONKINDVALUES_QUEUE = 'queue';\nconst TMP_MESSAGINGDESTINATIONKINDVALUES_TOPIC = 'topic';\n\n/**\n * The kind of message destination.\n *\n * @deprecated Removed in semconv v1.20.0.\n */\nexport const MESSAGINGDESTINATIONKINDVALUES_QUEUE =\n  TMP_MESSAGINGDESTINATIONKINDVALUES_QUEUE;\n\n/**\n * The kind of message destination.\n *\n * @deprecated Removed in semconv v1.20.0.\n */\nexport const MESSAGINGDESTINATIONKINDVALUES_TOPIC =\n  TMP_MESSAGINGDESTINATIONKINDVALUES_TOPIC;\n\n/**\n * Identifies the Values for MessagingDestinationKindValues enum definition\n *\n * The kind of message destination.\n * @deprecated Use the MESSAGINGDESTINATIONKINDVALUES_XXXXX constants rather than the MessagingDestinationKindValues.XXXXX for bundle minification.\n */\nexport type MessagingDestinationKindValues = {\n  /** A message sent to a queue. */\n  QUEUE: 'queue';\n\n  /** A message sent to a topic. */\n  TOPIC: 'topic';\n};\n\n/**\n * The constant map of values for MessagingDestinationKindValues.\n * @deprecated Use the MESSAGINGDESTINATIONKINDVALUES_XXXXX constants rather than the MessagingDestinationKindValues.XXXXX for bundle minification.\n */\nexport const MessagingDestinationKindValues: MessagingDestinationKindValues =\n  /*#__PURE__*/ createConstMap<MessagingDestinationKindValues>([\n    TMP_MESSAGINGDESTINATIONKINDVALUES_QUEUE,\n    TMP_MESSAGINGDESTINATIONKINDVALUES_TOPIC,\n  ]);\n\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for MessagingOperationValues enum definition\n *\n * A string identifying the kind of message consumption as defined in the [Operation names](#operation-names) section above. If the operation is &#34;send&#34;, this attribute MUST NOT be set, since the operation can be inferred from the span kind in that case.\n * ---------------------------------------------------------------------------------------------------------- */\n\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nconst TMP_MESSAGINGOPERATIONVALUES_RECEIVE = 'receive';\nconst TMP_MESSAGINGOPERATIONVALUES_PROCESS = 'process';\n\n/**\n * A string identifying the kind of message consumption as defined in the [Operation names](#operation-names) section above. If the operation is &#34;send&#34;, this attribute MUST NOT be set, since the operation can be inferred from the span kind in that case.\n *\n * @deprecated Use MESSAGING_OPERATION_TYPE_VALUE_RECEIVE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const MESSAGINGOPERATIONVALUES_RECEIVE =\n  TMP_MESSAGINGOPERATIONVALUES_RECEIVE;\n\n/**\n * A string identifying the kind of message consumption as defined in the [Operation names](#operation-names) section above. If the operation is &#34;send&#34;, this attribute MUST NOT be set, since the operation can be inferred from the span kind in that case.\n *\n * @deprecated Use MESSAGING_OPERATION_TYPE_VALUE_PROCESS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const MESSAGINGOPERATIONVALUES_PROCESS =\n  TMP_MESSAGINGOPERATIONVALUES_PROCESS;\n\n/**\n * Identifies the Values for MessagingOperationValues enum definition\n *\n * A string identifying the kind of message consumption as defined in the [Operation names](#operation-names) section above. If the operation is &#34;send&#34;, this attribute MUST NOT be set, since the operation can be inferred from the span kind in that case.\n * @deprecated Use the MESSAGINGOPERATIONVALUES_XXXXX constants rather than the MessagingOperationValues.XXXXX for bundle minification.\n */\nexport type MessagingOperationValues = {\n  /** receive. */\n  RECEIVE: 'receive';\n\n  /** process. */\n  PROCESS: 'process';\n};\n\n/**\n * The constant map of values for MessagingOperationValues.\n * @deprecated Use the MESSAGINGOPERATIONVALUES_XXXXX constants rather than the MessagingOperationValues.XXXXX for bundle minification.\n */\nexport const MessagingOperationValues: MessagingOperationValues =\n  /*#__PURE__*/ createConstMap<MessagingOperationValues>([\n    TMP_MESSAGINGOPERATIONVALUES_RECEIVE,\n    TMP_MESSAGINGOPERATIONVALUES_PROCESS,\n  ]);\n\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for RpcGrpcStatusCodeValues enum definition\n *\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n * ---------------------------------------------------------------------------------------------------------- */\n\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nconst TMP_RPCGRPCSTATUSCODEVALUES_OK = 0;\nconst TMP_RPCGRPCSTATUSCODEVALUES_CANCELLED = 1;\nconst TMP_RPCGRPCSTATUSCODEVALUES_UNKNOWN = 2;\nconst TMP_RPCGRPCSTATUSCODEVALUES_INVALID_ARGUMENT = 3;\nconst TMP_RPCGRPCSTATUSCODEVALUES_DEADLINE_EXCEEDED = 4;\nconst TMP_RPCGRPCSTATUSCODEVALUES_NOT_FOUND = 5;\nconst TMP_RPCGRPCSTATUSCODEVALUES_ALREADY_EXISTS = 6;\nconst TMP_RPCGRPCSTATUSCODEVALUES_PERMISSION_DENIED = 7;\nconst TMP_RPCGRPCSTATUSCODEVALUES_RESOURCE_EXHAUSTED = 8;\nconst TMP_RPCGRPCSTATUSCODEVALUES_FAILED_PRECONDITION = 9;\nconst TMP_RPCGRPCSTATUSCODEVALUES_ABORTED = 10;\nconst TMP_RPCGRPCSTATUSCODEVALUES_OUT_OF_RANGE = 11;\nconst TMP_RPCGRPCSTATUSCODEVALUES_UNIMPLEMENTED = 12;\nconst TMP_RPCGRPCSTATUSCODEVALUES_INTERNAL = 13;\nconst TMP_RPCGRPCSTATUSCODEVALUES_UNAVAILABLE = 14;\nconst TMP_RPCGRPCSTATUSCODEVALUES_DATA_LOSS = 15;\nconst TMP_RPCGRPCSTATUSCODEVALUES_UNAUTHENTICATED = 16;\n\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_OK in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const RPCGRPCSTATUSCODEVALUES_OK = TMP_RPCGRPCSTATUSCODEVALUES_OK;\n\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_CANCELLED in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const RPCGRPCSTATUSCODEVALUES_CANCELLED =\n  TMP_RPCGRPCSTATUSCODEVALUES_CANCELLED;\n\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_UNKNOWN in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const RPCGRPCSTATUSCODEVALUES_UNKNOWN =\n  TMP_RPCGRPCSTATUSCODEVALUES_UNKNOWN;\n\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_INVALID_ARGUMENT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const RPCGRPCSTATUSCODEVALUES_INVALID_ARGUMENT =\n  TMP_RPCGRPCSTATUSCODEVALUES_INVALID_ARGUMENT;\n\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_DEADLINE_EXCEEDED in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const RPCGRPCSTATUSCODEVALUES_DEADLINE_EXCEEDED =\n  TMP_RPCGRPCSTATUSCODEVALUES_DEADLINE_EXCEEDED;\n\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_NOT_FOUND in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const RPCGRPCSTATUSCODEVALUES_NOT_FOUND =\n  TMP_RPCGRPCSTATUSCODEVALUES_NOT_FOUND;\n\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_ALREADY_EXISTS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const RPCGRPCSTATUSCODEVALUES_ALREADY_EXISTS =\n  TMP_RPCGRPCSTATUSCODEVALUES_ALREADY_EXISTS;\n\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_PERMISSION_DENIED in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const RPCGRPCSTATUSCODEVALUES_PERMISSION_DENIED =\n  TMP_RPCGRPCSTATUSCODEVALUES_PERMISSION_DENIED;\n\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_RESOURCE_EXHAUSTED in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const RPCGRPCSTATUSCODEVALUES_RESOURCE_EXHAUSTED =\n  TMP_RPCGRPCSTATUSCODEVALUES_RESOURCE_EXHAUSTED;\n\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_FAILED_PRECONDITION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const RPCGRPCSTATUSCODEVALUES_FAILED_PRECONDITION =\n  TMP_RPCGRPCSTATUSCODEVALUES_FAILED_PRECONDITION;\n\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_ABORTED in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const RPCGRPCSTATUSCODEVALUES_ABORTED =\n  TMP_RPCGRPCSTATUSCODEVALUES_ABORTED;\n\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_OUT_OF_RANGE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const RPCGRPCSTATUSCODEVALUES_OUT_OF_RANGE =\n  TMP_RPCGRPCSTATUSCODEVALUES_OUT_OF_RANGE;\n\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_UNIMPLEMENTED in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const RPCGRPCSTATUSCODEVALUES_UNIMPLEMENTED =\n  TMP_RPCGRPCSTATUSCODEVALUES_UNIMPLEMENTED;\n\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_INTERNAL in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const RPCGRPCSTATUSCODEVALUES_INTERNAL =\n  TMP_RPCGRPCSTATUSCODEVALUES_INTERNAL;\n\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_UNAVAILABLE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const RPCGRPCSTATUSCODEVALUES_UNAVAILABLE =\n  TMP_RPCGRPCSTATUSCODEVALUES_UNAVAILABLE;\n\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_DATA_LOSS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const RPCGRPCSTATUSCODEVALUES_DATA_LOSS =\n  TMP_RPCGRPCSTATUSCODEVALUES_DATA_LOSS;\n\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_UNAUTHENTICATED in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const RPCGRPCSTATUSCODEVALUES_UNAUTHENTICATED =\n  TMP_RPCGRPCSTATUSCODEVALUES_UNAUTHENTICATED;\n\n/**\n * Identifies the Values for RpcGrpcStatusCodeValues enum definition\n *\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n * @deprecated Use the RPCGRPCSTATUSCODEVALUES_XXXXX constants rather than the RpcGrpcStatusCodeValues.XXXXX for bundle minification.\n */\nexport type RpcGrpcStatusCodeValues = {\n  /** OK. */\n  OK: 0;\n\n  /** CANCELLED. */\n  CANCELLED: 1;\n\n  /** UNKNOWN. */\n  UNKNOWN: 2;\n\n  /** INVALID_ARGUMENT. */\n  INVALID_ARGUMENT: 3;\n\n  /** DEADLINE_EXCEEDED. */\n  DEADLINE_EXCEEDED: 4;\n\n  /** NOT_FOUND. */\n  NOT_FOUND: 5;\n\n  /** ALREADY_EXISTS. */\n  ALREADY_EXISTS: 6;\n\n  /** PERMISSION_DENIED. */\n  PERMISSION_DENIED: 7;\n\n  /** RESOURCE_EXHAUSTED. */\n  RESOURCE_EXHAUSTED: 8;\n\n  /** FAILED_PRECONDITION. */\n  FAILED_PRECONDITION: 9;\n\n  /** ABORTED. */\n  ABORTED: 10;\n\n  /** OUT_OF_RANGE. */\n  OUT_OF_RANGE: 11;\n\n  /** UNIMPLEMENTED. */\n  UNIMPLEMENTED: 12;\n\n  /** INTERNAL. */\n  INTERNAL: 13;\n\n  /** UNAVAILABLE. */\n  UNAVAILABLE: 14;\n\n  /** DATA_LOSS. */\n  DATA_LOSS: 15;\n\n  /** UNAUTHENTICATED. */\n  UNAUTHENTICATED: 16;\n};\n\n/**\n * The constant map of values for RpcGrpcStatusCodeValues.\n * @deprecated Use the RPCGRPCSTATUSCODEVALUES_XXXXX constants rather than the RpcGrpcStatusCodeValues.XXXXX for bundle minification.\n */\nexport const RpcGrpcStatusCodeValues: RpcGrpcStatusCodeValues = {\n  OK: TMP_RPCGRPCSTATUSCODEVALUES_OK,\n  CANCELLED: TMP_RPCGRPCSTATUSCODEVALUES_CANCELLED,\n  UNKNOWN: TMP_RPCGRPCSTATUSCODEVALUES_UNKNOWN,\n  INVALID_ARGUMENT: TMP_RPCGRPCSTATUSCODEVALUES_INVALID_ARGUMENT,\n  DEADLINE_EXCEEDED: TMP_RPCGRPCSTATUSCODEVALUES_DEADLINE_EXCEEDED,\n  NOT_FOUND: TMP_RPCGRPCSTATUSCODEVALUES_NOT_FOUND,\n  ALREADY_EXISTS: TMP_RPCGRPCSTATUSCODEVALUES_ALREADY_EXISTS,\n  PERMISSION_DENIED: TMP_RPCGRPCSTATUSCODEVALUES_PERMISSION_DENIED,\n  RESOURCE_EXHAUSTED: TMP_RPCGRPCSTATUSCODEVALUES_RESOURCE_EXHAUSTED,\n  FAILED_PRECONDITION: TMP_RPCGRPCSTATUSCODEVALUES_FAILED_PRECONDITION,\n  ABORTED: TMP_RPCGRPCSTATUSCODEVALUES_ABORTED,\n  OUT_OF_RANGE: TMP_RPCGRPCSTATUSCODEVALUES_OUT_OF_RANGE,\n  UNIMPLEMENTED: TMP_RPCGRPCSTATUSCODEVALUES_UNIMPLEMENTED,\n  INTERNAL: TMP_RPCGRPCSTATUSCODEVALUES_INTERNAL,\n  UNAVAILABLE: TMP_RPCGRPCSTATUSCODEVALUES_UNAVAILABLE,\n  DATA_LOSS: TMP_RPCGRPCSTATUSCODEVALUES_DATA_LOSS,\n  UNAUTHENTICATED: TMP_RPCGRPCSTATUSCODEVALUES_UNAUTHENTICATED,\n};\n\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for MessageTypeValues enum definition\n *\n * Whether this is a received or sent message.\n * ---------------------------------------------------------------------------------------------------------- */\n\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nconst TMP_MESSAGETYPEVALUES_SENT = 'SENT';\nconst TMP_MESSAGETYPEVALUES_RECEIVED = 'RECEIVED';\n\n/**\n * Whether this is a received or sent message.\n *\n * @deprecated Use MESSAGE_TYPE_VALUE_SENT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const MESSAGETYPEVALUES_SENT = TMP_MESSAGETYPEVALUES_SENT;\n\n/**\n * Whether this is a received or sent message.\n *\n * @deprecated Use MESSAGE_TYPE_VALUE_RECEIVED in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const MESSAGETYPEVALUES_RECEIVED = TMP_MESSAGETYPEVALUES_RECEIVED;\n\n/**\n * Identifies the Values for MessageTypeValues enum definition\n *\n * Whether this is a received or sent message.\n * @deprecated Use the MESSAGETYPEVALUES_XXXXX constants rather than the MessageTypeValues.XXXXX for bundle minification.\n */\nexport type MessageTypeValues = {\n  /** sent. */\n  SENT: 'SENT';\n\n  /** received. */\n  RECEIVED: 'RECEIVED';\n};\n\n/**\n * The constant map of values for MessageTypeValues.\n * @deprecated Use the MESSAGETYPEVALUES_XXXXX constants rather than the MessageTypeValues.XXXXX for bundle minification.\n */\nexport const MessageTypeValues: MessageTypeValues =\n  /*#__PURE__*/ createConstMap<MessageTypeValues>([\n    TMP_MESSAGETYPEVALUES_SENT,\n    TMP_MESSAGETYPEVALUES_RECEIVED,\n  ]);\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* eslint-disable no-restricted-syntax --\n * These re-exports are only of constants, only one-level deep at this point,\n * and should not cause problems for tree-shakers.\n */\nexport * from './SemanticAttributes';\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { createConstMap } from '../internal/utils';\n\n//----------------------------------------------------------------------------------------------------------\n// DO NOT EDIT, this is an Auto-generated file from scripts/semconv/templates//templates/SemanticAttributes.ts.j2\n//----------------------------------------------------------------------------------------------------------\n\n//----------------------------------------------------------------------------------------------------------\n// Constant values for SemanticResourceAttributes\n//----------------------------------------------------------------------------------------------------------\n\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nconst TMP_CLOUD_PROVIDER = 'cloud.provider';\nconst TMP_CLOUD_ACCOUNT_ID = 'cloud.account.id';\nconst TMP_CLOUD_REGION = 'cloud.region';\nconst TMP_CLOUD_AVAILABILITY_ZONE = 'cloud.availability_zone';\nconst TMP_CLOUD_PLATFORM = 'cloud.platform';\nconst TMP_AWS_ECS_CONTAINER_ARN = 'aws.ecs.container.arn';\nconst TMP_AWS_ECS_CLUSTER_ARN = 'aws.ecs.cluster.arn';\nconst TMP_AWS_ECS_LAUNCHTYPE = 'aws.ecs.launchtype';\nconst TMP_AWS_ECS_TASK_ARN = 'aws.ecs.task.arn';\nconst TMP_AWS_ECS_TASK_FAMILY = 'aws.ecs.task.family';\nconst TMP_AWS_ECS_TASK_REVISION = 'aws.ecs.task.revision';\nconst TMP_AWS_EKS_CLUSTER_ARN = 'aws.eks.cluster.arn';\nconst TMP_AWS_LOG_GROUP_NAMES = 'aws.log.group.names';\nconst TMP_AWS_LOG_GROUP_ARNS = 'aws.log.group.arns';\nconst TMP_AWS_LOG_STREAM_NAMES = 'aws.log.stream.names';\nconst TMP_AWS_LOG_STREAM_ARNS = 'aws.log.stream.arns';\nconst TMP_CONTAINER_NAME = 'container.name';\nconst TMP_CONTAINER_ID = 'container.id';\nconst TMP_CONTAINER_RUNTIME = 'container.runtime';\nconst TMP_CONTAINER_IMAGE_NAME = 'container.image.name';\nconst TMP_CONTAINER_IMAGE_TAG = 'container.image.tag';\nconst TMP_DEPLOYMENT_ENVIRONMENT = 'deployment.environment';\nconst TMP_DEVICE_ID = 'device.id';\nconst TMP_DEVICE_MODEL_IDENTIFIER = 'device.model.identifier';\nconst TMP_DEVICE_MODEL_NAME = 'device.model.name';\nconst TMP_FAAS_NAME = 'faas.name';\nconst TMP_FAAS_ID = 'faas.id';\nconst TMP_FAAS_VERSION = 'faas.version';\nconst TMP_FAAS_INSTANCE = 'faas.instance';\nconst TMP_FAAS_MAX_MEMORY = 'faas.max_memory';\nconst TMP_HOST_ID = 'host.id';\nconst TMP_HOST_NAME = 'host.name';\nconst TMP_HOST_TYPE = 'host.type';\nconst TMP_HOST_ARCH = 'host.arch';\nconst TMP_HOST_IMAGE_NAME = 'host.image.name';\nconst TMP_HOST_IMAGE_ID = 'host.image.id';\nconst TMP_HOST_IMAGE_VERSION = 'host.image.version';\nconst TMP_K8S_CLUSTER_NAME = 'k8s.cluster.name';\nconst TMP_K8S_NODE_NAME = 'k8s.node.name';\nconst TMP_K8S_NODE_UID = 'k8s.node.uid';\nconst TMP_K8S_NAMESPACE_NAME = 'k8s.namespace.name';\nconst TMP_K8S_POD_UID = 'k8s.pod.uid';\nconst TMP_K8S_POD_NAME = 'k8s.pod.name';\nconst TMP_K8S_CONTAINER_NAME = 'k8s.container.name';\nconst TMP_K8S_REPLICASET_UID = 'k8s.replicaset.uid';\nconst TMP_K8S_REPLICASET_NAME = 'k8s.replicaset.name';\nconst TMP_K8S_DEPLOYMENT_UID = 'k8s.deployment.uid';\nconst TMP_K8S_DEPLOYMENT_NAME = 'k8s.deployment.name';\nconst TMP_K8S_STATEFULSET_UID = 'k8s.statefulset.uid';\nconst TMP_K8S_STATEFULSET_NAME = 'k8s.statefulset.name';\nconst TMP_K8S_DAEMONSET_UID = 'k8s.daemonset.uid';\nconst TMP_K8S_DAEMONSET_NAME = 'k8s.daemonset.name';\nconst TMP_K8S_JOB_UID = 'k8s.job.uid';\nconst TMP_K8S_JOB_NAME = 'k8s.job.name';\nconst TMP_K8S_CRONJOB_UID = 'k8s.cronjob.uid';\nconst TMP_K8S_CRONJOB_NAME = 'k8s.cronjob.name';\nconst TMP_OS_TYPE = 'os.type';\nconst TMP_OS_DESCRIPTION = 'os.description';\nconst TMP_OS_NAME = 'os.name';\nconst TMP_OS_VERSION = 'os.version';\nconst TMP_PROCESS_PID = 'process.pid';\nconst TMP_PROCESS_EXECUTABLE_NAME = 'process.executable.name';\nconst TMP_PROCESS_EXECUTABLE_PATH = 'process.executable.path';\nconst TMP_PROCESS_COMMAND = 'process.command';\nconst TMP_PROCESS_COMMAND_LINE = 'process.command_line';\nconst TMP_PROCESS_COMMAND_ARGS = 'process.command_args';\nconst TMP_PROCESS_OWNER = 'process.owner';\nconst TMP_PROCESS_RUNTIME_NAME = 'process.runtime.name';\nconst TMP_PROCESS_RUNTIME_VERSION = 'process.runtime.version';\nconst TMP_PROCESS_RUNTIME_DESCRIPTION = 'process.runtime.description';\nconst TMP_SERVICE_NAME = 'service.name';\nconst TMP_SERVICE_NAMESPACE = 'service.namespace';\nconst TMP_SERVICE_INSTANCE_ID = 'service.instance.id';\nconst TMP_SERVICE_VERSION = 'service.version';\nconst TMP_TELEMETRY_SDK_NAME = 'telemetry.sdk.name';\nconst TMP_TELEMETRY_SDK_LANGUAGE = 'telemetry.sdk.language';\nconst TMP_TELEMETRY_SDK_VERSION = 'telemetry.sdk.version';\nconst TMP_TELEMETRY_AUTO_VERSION = 'telemetry.auto.version';\nconst TMP_WEBENGINE_NAME = 'webengine.name';\nconst TMP_WEBENGINE_VERSION = 'webengine.version';\nconst TMP_WEBENGINE_DESCRIPTION = 'webengine.description';\n\n/**\n * Name of the cloud provider.\n *\n * @deprecated Use ATTR_CLOUD_PROVIDER in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_CLOUD_PROVIDER = TMP_CLOUD_PROVIDER;\n\n/**\n * The cloud account ID the resource is assigned to.\n *\n * @deprecated Use ATTR_CLOUD_ACCOUNT_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_CLOUD_ACCOUNT_ID = TMP_CLOUD_ACCOUNT_ID;\n\n/**\n * The geographical region the resource is running. Refer to your provider&#39;s docs to see the available regions, for example [Alibaba Cloud regions](https://www.alibabacloud.com/help/doc-detail/40654.htm), [AWS regions](https://aws.amazon.com/about-aws/global-infrastructure/regions_az/), [Azure regions](https://azure.microsoft.com/en-us/global-infrastructure/geographies/), or [Google Cloud regions](https://cloud.google.com/about/locations).\n *\n * @deprecated Use ATTR_CLOUD_REGION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_CLOUD_REGION = TMP_CLOUD_REGION;\n\n/**\n * Cloud regions often have multiple, isolated locations known as zones to increase availability. Availability zone represents the zone where the resource is running.\n *\n * Note: Availability zones are called &#34;zones&#34; on Alibaba Cloud and Google Cloud.\n *\n * @deprecated Use ATTR_CLOUD_AVAILABILITY_ZONE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_CLOUD_AVAILABILITY_ZONE = TMP_CLOUD_AVAILABILITY_ZONE;\n\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use ATTR_CLOUD_PLATFORM in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_CLOUD_PLATFORM = TMP_CLOUD_PLATFORM;\n\n/**\n * The Amazon Resource Name (ARN) of an [ECS container instance](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ECS_instances.html).\n *\n * @deprecated Use ATTR_AWS_ECS_CONTAINER_ARN in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_AWS_ECS_CONTAINER_ARN = TMP_AWS_ECS_CONTAINER_ARN;\n\n/**\n * The ARN of an [ECS cluster](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/clusters.html).\n *\n * @deprecated Use ATTR_AWS_ECS_CLUSTER_ARN in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_AWS_ECS_CLUSTER_ARN = TMP_AWS_ECS_CLUSTER_ARN;\n\n/**\n * The [launch type](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html) for an ECS task.\n *\n * @deprecated Use ATTR_AWS_ECS_LAUNCHTYPE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_AWS_ECS_LAUNCHTYPE = TMP_AWS_ECS_LAUNCHTYPE;\n\n/**\n * The ARN of an [ECS task definition](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definitions.html).\n *\n * @deprecated Use ATTR_AWS_ECS_TASK_ARN in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_AWS_ECS_TASK_ARN = TMP_AWS_ECS_TASK_ARN;\n\n/**\n * The task definition family this task definition is a member of.\n *\n * @deprecated Use ATTR_AWS_ECS_TASK_FAMILY in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_AWS_ECS_TASK_FAMILY = TMP_AWS_ECS_TASK_FAMILY;\n\n/**\n * The revision for this task definition.\n *\n * @deprecated Use ATTR_AWS_ECS_TASK_REVISION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_AWS_ECS_TASK_REVISION = TMP_AWS_ECS_TASK_REVISION;\n\n/**\n * The ARN of an EKS cluster.\n *\n * @deprecated Use ATTR_AWS_EKS_CLUSTER_ARN in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_AWS_EKS_CLUSTER_ARN = TMP_AWS_EKS_CLUSTER_ARN;\n\n/**\n * The name(s) of the AWS log group(s) an application is writing to.\n *\n * Note: Multiple log groups must be supported for cases like multi-container applications, where a single application has sidecar containers, and each write to their own log group.\n *\n * @deprecated Use ATTR_AWS_LOG_GROUP_NAMES in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_AWS_LOG_GROUP_NAMES = TMP_AWS_LOG_GROUP_NAMES;\n\n/**\n * The Amazon Resource Name(s) (ARN) of the AWS log group(s).\n *\n * Note: See the [log group ARN format documentation](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/iam-access-control-overview-cwl.html#CWL_ARN_Format).\n *\n * @deprecated Use ATTR_AWS_LOG_GROUP_ARNS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_AWS_LOG_GROUP_ARNS = TMP_AWS_LOG_GROUP_ARNS;\n\n/**\n * The name(s) of the AWS log stream(s) an application is writing to.\n *\n * @deprecated Use ATTR_AWS_LOG_STREAM_NAMES in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_AWS_LOG_STREAM_NAMES = TMP_AWS_LOG_STREAM_NAMES;\n\n/**\n * The ARN(s) of the AWS log stream(s).\n *\n * Note: See the [log stream ARN format documentation](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/iam-access-control-overview-cwl.html#CWL_ARN_Format). One log group can contain several log streams, so these ARNs necessarily identify both a log group and a log stream.\n *\n * @deprecated Use ATTR_AWS_LOG_STREAM_ARNS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_AWS_LOG_STREAM_ARNS = TMP_AWS_LOG_STREAM_ARNS;\n\n/**\n * Container name.\n *\n * @deprecated Use ATTR_CONTAINER_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_CONTAINER_NAME = TMP_CONTAINER_NAME;\n\n/**\n * Container ID. Usually a UUID, as for example used to [identify Docker containers](https://docs.docker.com/engine/reference/run/#container-identification). The UUID might be abbreviated.\n *\n * @deprecated Use ATTR_CONTAINER_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_CONTAINER_ID = TMP_CONTAINER_ID;\n\n/**\n * The container runtime managing this container.\n *\n * @deprecated Use ATTR_CONTAINER_RUNTIME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_CONTAINER_RUNTIME = TMP_CONTAINER_RUNTIME;\n\n/**\n * Name of the image the container was built on.\n *\n * @deprecated Use ATTR_CONTAINER_IMAGE_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_CONTAINER_IMAGE_NAME = TMP_CONTAINER_IMAGE_NAME;\n\n/**\n * Container image tag.\n *\n * @deprecated Use ATTR_CONTAINER_IMAGE_TAGS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_CONTAINER_IMAGE_TAG = TMP_CONTAINER_IMAGE_TAG;\n\n/**\n * Name of the [deployment environment](https://en.wikipedia.org/wiki/Deployment_environment) (aka deployment tier).\n *\n * @deprecated Use ATTR_DEPLOYMENT_ENVIRONMENT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_DEPLOYMENT_ENVIRONMENT = TMP_DEPLOYMENT_ENVIRONMENT;\n\n/**\n * A unique identifier representing the device.\n *\n * Note: The device identifier MUST only be defined using the values outlined below. This value is not an advertising identifier and MUST NOT be used as such. On iOS (Swift or Objective-C), this value MUST be equal to the [vendor identifier](https://developer.apple.com/documentation/uikit/uidevice/1620059-identifierforvendor). On Android (Java or Kotlin), this value MUST be equal to the Firebase Installation ID or a globally unique UUID which is persisted across sessions in your application. More information can be found [here](https://developer.android.com/training/articles/user-data-ids) on best practices and exact implementation details. Caution should be taken when storing personal data or anything which can identify a user. GDPR and data protection laws may apply, ensure you do your own due diligence.\n *\n * @deprecated Use ATTR_DEVICE_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_DEVICE_ID = TMP_DEVICE_ID;\n\n/**\n * The model identifier for the device.\n *\n * Note: It&#39;s recommended this value represents a machine readable version of the model identifier rather than the market or consumer-friendly name of the device.\n *\n * @deprecated Use ATTR_DEVICE_MODEL_IDENTIFIER in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_DEVICE_MODEL_IDENTIFIER = TMP_DEVICE_MODEL_IDENTIFIER;\n\n/**\n * The marketing name for the device model.\n *\n * Note: It&#39;s recommended this value represents a human readable version of the device model rather than a machine readable alternative.\n *\n * @deprecated Use ATTR_DEVICE_MODEL_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_DEVICE_MODEL_NAME = TMP_DEVICE_MODEL_NAME;\n\n/**\n * The name of the single function that this runtime instance executes.\n *\n * Note: This is the name of the function as configured/deployed on the FaaS platform and is usually different from the name of the callback function (which may be stored in the [`code.namespace`/`code.function`](../../trace/semantic_conventions/span-general.md#source-code-attributes) span attributes).\n *\n * @deprecated Use ATTR_FAAS_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_FAAS_NAME = TMP_FAAS_NAME;\n\n/**\n* The unique ID of the single function that this runtime instance executes.\n*\n* Note: Depending on the cloud provider, use:\n\n* **AWS Lambda:** The function [ARN](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html).\nTake care not to use the &#34;invoked ARN&#34; directly but replace any\n[alias suffix](https://docs.aws.amazon.com/lambda/latest/dg/configuration-aliases.html) with the resolved function version, as the same runtime instance may be invokable with multiple\ndifferent aliases.\n* **GCP:** The [URI of the resource](https://cloud.google.com/iam/docs/full-resource-names)\n* **Azure:** The [Fully Qualified Resource ID](https://docs.microsoft.com/en-us/rest/api/resources/resources/get-by-id).\n\nOn some providers, it may not be possible to determine the full ID at startup,\nwhich is why this field cannot be made required. For example, on AWS the account ID\npart of the ARN is not available without calling another AWS API\nwhich may be deemed too slow for a short-running lambda function.\nAs an alternative, consider setting `faas.id` as a span attribute instead.\n*\n* @deprecated Use ATTR_CLOUD_RESOURCE_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n*/\nexport const SEMRESATTRS_FAAS_ID = TMP_FAAS_ID;\n\n/**\n* The immutable version of the function being executed.\n*\n* Note: Depending on the cloud provider and platform, use:\n\n* **AWS Lambda:** The [function version](https://docs.aws.amazon.com/lambda/latest/dg/configuration-versions.html)\n  (an integer represented as a decimal string).\n* **Google Cloud Run:** The [revision](https://cloud.google.com/run/docs/managing/revisions)\n  (i.e., the function name plus the revision suffix).\n* **Google Cloud Functions:** The value of the\n  [`K_REVISION` environment variable](https://cloud.google.com/functions/docs/env-var#runtime_environment_variables_set_automatically).\n* **Azure Functions:** Not applicable. Do not set this attribute.\n*\n* @deprecated Use ATTR_FAAS_VERSION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n*/\nexport const SEMRESATTRS_FAAS_VERSION = TMP_FAAS_VERSION;\n\n/**\n * The execution environment ID as a string, that will be potentially reused for other invocations to the same function/function version.\n *\n * Note: * **AWS Lambda:** Use the (full) log stream name.\n *\n * @deprecated Use ATTR_FAAS_INSTANCE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_FAAS_INSTANCE = TMP_FAAS_INSTANCE;\n\n/**\n * The amount of memory available to the serverless function in MiB.\n *\n * Note: It&#39;s recommended to set this attribute since e.g. too little memory can easily stop a Java AWS Lambda function from working correctly. On AWS Lambda, the environment variable `AWS_LAMBDA_FUNCTION_MEMORY_SIZE` provides this information.\n *\n * @deprecated Use ATTR_FAAS_MAX_MEMORY in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_FAAS_MAX_MEMORY = TMP_FAAS_MAX_MEMORY;\n\n/**\n * Unique host ID. For Cloud, this must be the instance_id assigned by the cloud provider.\n *\n * @deprecated Use ATTR_HOST_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_HOST_ID = TMP_HOST_ID;\n\n/**\n * Name of the host. On Unix systems, it may contain what the hostname command returns, or the fully qualified hostname, or another name specified by the user.\n *\n * @deprecated Use ATTR_HOST_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_HOST_NAME = TMP_HOST_NAME;\n\n/**\n * Type of host. For Cloud, this must be the machine type.\n *\n * @deprecated Use ATTR_HOST_TYPE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_HOST_TYPE = TMP_HOST_TYPE;\n\n/**\n * The CPU architecture the host system is running on.\n *\n * @deprecated Use ATTR_HOST_ARCH in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_HOST_ARCH = TMP_HOST_ARCH;\n\n/**\n * Name of the VM image or OS install the host was instantiated from.\n *\n * @deprecated Use ATTR_HOST_IMAGE_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_HOST_IMAGE_NAME = TMP_HOST_IMAGE_NAME;\n\n/**\n * VM image ID. For Cloud, this value is from the provider.\n *\n * @deprecated Use ATTR_HOST_IMAGE_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_HOST_IMAGE_ID = TMP_HOST_IMAGE_ID;\n\n/**\n * The version string of the VM image as defined in [Version Attributes](README.md#version-attributes).\n *\n * @deprecated Use ATTR_HOST_IMAGE_VERSION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_HOST_IMAGE_VERSION = TMP_HOST_IMAGE_VERSION;\n\n/**\n * The name of the cluster.\n *\n * @deprecated Use ATTR_K8S_CLUSTER_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_K8S_CLUSTER_NAME = TMP_K8S_CLUSTER_NAME;\n\n/**\n * The name of the Node.\n *\n * @deprecated Use ATTR_K8S_NODE_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_K8S_NODE_NAME = TMP_K8S_NODE_NAME;\n\n/**\n * The UID of the Node.\n *\n * @deprecated Use ATTR_K8S_NODE_UID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_K8S_NODE_UID = TMP_K8S_NODE_UID;\n\n/**\n * The name of the namespace that the pod is running in.\n *\n * @deprecated Use ATTR_K8S_NAMESPACE_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_K8S_NAMESPACE_NAME = TMP_K8S_NAMESPACE_NAME;\n\n/**\n * The UID of the Pod.\n *\n * @deprecated Use ATTR_K8S_POD_UID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_K8S_POD_UID = TMP_K8S_POD_UID;\n\n/**\n * The name of the Pod.\n *\n * @deprecated Use ATTR_K8S_POD_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_K8S_POD_NAME = TMP_K8S_POD_NAME;\n\n/**\n * The name of the Container in a Pod template.\n *\n * @deprecated Use ATTR_K8S_CONTAINER_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_K8S_CONTAINER_NAME = TMP_K8S_CONTAINER_NAME;\n\n/**\n * The UID of the ReplicaSet.\n *\n * @deprecated Use ATTR_K8S_REPLICASET_UID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_K8S_REPLICASET_UID = TMP_K8S_REPLICASET_UID;\n\n/**\n * The name of the ReplicaSet.\n *\n * @deprecated Use ATTR_K8S_REPLICASET_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_K8S_REPLICASET_NAME = TMP_K8S_REPLICASET_NAME;\n\n/**\n * The UID of the Deployment.\n *\n * @deprecated Use ATTR_K8S_DEPLOYMENT_UID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_K8S_DEPLOYMENT_UID = TMP_K8S_DEPLOYMENT_UID;\n\n/**\n * The name of the Deployment.\n *\n * @deprecated Use ATTR_K8S_DEPLOYMENT_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_K8S_DEPLOYMENT_NAME = TMP_K8S_DEPLOYMENT_NAME;\n\n/**\n * The UID of the StatefulSet.\n *\n * @deprecated Use ATTR_K8S_STATEFULSET_UID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_K8S_STATEFULSET_UID = TMP_K8S_STATEFULSET_UID;\n\n/**\n * The name of the StatefulSet.\n *\n * @deprecated Use ATTR_K8S_STATEFULSET_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_K8S_STATEFULSET_NAME = TMP_K8S_STATEFULSET_NAME;\n\n/**\n * The UID of the DaemonSet.\n *\n * @deprecated Use ATTR_K8S_DAEMONSET_UID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_K8S_DAEMONSET_UID = TMP_K8S_DAEMONSET_UID;\n\n/**\n * The name of the DaemonSet.\n *\n * @deprecated Use ATTR_K8S_DAEMONSET_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_K8S_DAEMONSET_NAME = TMP_K8S_DAEMONSET_NAME;\n\n/**\n * The UID of the Job.\n *\n * @deprecated Use ATTR_K8S_JOB_UID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_K8S_JOB_UID = TMP_K8S_JOB_UID;\n\n/**\n * The name of the Job.\n *\n * @deprecated Use ATTR_K8S_JOB_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_K8S_JOB_NAME = TMP_K8S_JOB_NAME;\n\n/**\n * The UID of the CronJob.\n *\n * @deprecated Use ATTR_K8S_CRONJOB_UID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_K8S_CRONJOB_UID = TMP_K8S_CRONJOB_UID;\n\n/**\n * The name of the CronJob.\n *\n * @deprecated Use ATTR_K8S_CRONJOB_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_K8S_CRONJOB_NAME = TMP_K8S_CRONJOB_NAME;\n\n/**\n * The operating system type.\n *\n * @deprecated Use ATTR_OS_TYPE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_OS_TYPE = TMP_OS_TYPE;\n\n/**\n * Human readable (not intended to be parsed) OS version information, like e.g. reported by `ver` or `lsb_release -a` commands.\n *\n * @deprecated Use ATTR_OS_DESCRIPTION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_OS_DESCRIPTION = TMP_OS_DESCRIPTION;\n\n/**\n * Human readable operating system name.\n *\n * @deprecated Use ATTR_OS_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_OS_NAME = TMP_OS_NAME;\n\n/**\n * The version string of the operating system as defined in [Version Attributes](../../resource/semantic_conventions/README.md#version-attributes).\n *\n * @deprecated Use ATTR_OS_VERSION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_OS_VERSION = TMP_OS_VERSION;\n\n/**\n * Process identifier (PID).\n *\n * @deprecated Use ATTR_PROCESS_PID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_PROCESS_PID = TMP_PROCESS_PID;\n\n/**\n * The name of the process executable. On Linux based systems, can be set to the `Name` in `proc/[pid]/status`. On Windows, can be set to the base name of `GetProcessImageFileNameW`.\n *\n * @deprecated Use ATTR_PROCESS_EXECUTABLE_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_PROCESS_EXECUTABLE_NAME = TMP_PROCESS_EXECUTABLE_NAME;\n\n/**\n * The full path to the process executable. On Linux based systems, can be set to the target of `proc/[pid]/exe`. On Windows, can be set to the result of `GetProcessImageFileNameW`.\n *\n * @deprecated Use ATTR_PROCESS_EXECUTABLE_PATH in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_PROCESS_EXECUTABLE_PATH = TMP_PROCESS_EXECUTABLE_PATH;\n\n/**\n * The command used to launch the process (i.e. the command name). On Linux based systems, can be set to the zeroth string in `proc/[pid]/cmdline`. On Windows, can be set to the first parameter extracted from `GetCommandLineW`.\n *\n * @deprecated Use ATTR_PROCESS_COMMAND in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_PROCESS_COMMAND = TMP_PROCESS_COMMAND;\n\n/**\n * The full command used to launch the process as a single string representing the full command. On Windows, can be set to the result of `GetCommandLineW`. Do not set this if you have to assemble it just for monitoring; use `process.command_args` instead.\n *\n * @deprecated Use ATTR_PROCESS_COMMAND_LINE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_PROCESS_COMMAND_LINE = TMP_PROCESS_COMMAND_LINE;\n\n/**\n * All the command arguments (including the command/executable itself) as received by the process. On Linux-based systems (and some other Unixoid systems supporting procfs), can be set according to the list of null-delimited strings extracted from `proc/[pid]/cmdline`. For libc-based executables, this would be the full argv vector passed to `main`.\n *\n * @deprecated Use ATTR_PROCESS_COMMAND_ARGS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_PROCESS_COMMAND_ARGS = TMP_PROCESS_COMMAND_ARGS;\n\n/**\n * The username of the user that owns the process.\n *\n * @deprecated Use ATTR_PROCESS_OWNER in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_PROCESS_OWNER = TMP_PROCESS_OWNER;\n\n/**\n * The name of the runtime of this process. For compiled native binaries, this SHOULD be the name of the compiler.\n *\n * @deprecated Use ATTR_PROCESS_RUNTIME_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_PROCESS_RUNTIME_NAME = TMP_PROCESS_RUNTIME_NAME;\n\n/**\n * The version of the runtime of this process, as returned by the runtime without modification.\n *\n * @deprecated Use ATTR_PROCESS_RUNTIME_VERSION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_PROCESS_RUNTIME_VERSION = TMP_PROCESS_RUNTIME_VERSION;\n\n/**\n * An additional description about the runtime of the process, for example a specific vendor customization of the runtime environment.\n *\n * @deprecated Use ATTR_PROCESS_RUNTIME_DESCRIPTION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_PROCESS_RUNTIME_DESCRIPTION =\n  TMP_PROCESS_RUNTIME_DESCRIPTION;\n\n/**\n * Logical name of the service.\n *\n * Note: MUST be the same for all instances of horizontally scaled services. If the value was not specified, SDKs MUST fallback to `unknown_service:` concatenated with [`process.executable.name`](process.md#process), e.g. `unknown_service:bash`. If `process.executable.name` is not available, the value MUST be set to `unknown_service`.\n *\n * @deprecated Use ATTR_SERVICE_NAME.\n */\nexport const SEMRESATTRS_SERVICE_NAME = TMP_SERVICE_NAME;\n\n/**\n * A namespace for `service.name`.\n *\n * Note: A string value having a meaning that helps to distinguish a group of services, for example the team name that owns a group of services. `service.name` is expected to be unique within the same namespace. If `service.namespace` is not specified in the Resource then `service.name` is expected to be unique for all services that have no explicit namespace defined (so the empty/unspecified namespace is simply one more valid namespace). Zero-length namespace string is assumed equal to unspecified namespace.\n *\n * @deprecated Use ATTR_SERVICE_NAMESPACE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_SERVICE_NAMESPACE = TMP_SERVICE_NAMESPACE;\n\n/**\n * The string ID of the service instance.\n *\n * Note: MUST be unique for each instance of the same `service.namespace,service.name` pair (in other words `service.namespace,service.name,service.instance.id` triplet MUST be globally unique). The ID helps to distinguish instances of the same service that exist at the same time (e.g. instances of a horizontally scaled service). It is preferable for the ID to be persistent and stay the same for the lifetime of the service instance, however it is acceptable that the ID is ephemeral and changes during important lifetime events for the service (e.g. service restarts). If the service has no inherent unique ID that can be used as the value of this attribute it is recommended to generate a random Version 1 or Version 4 RFC 4122 UUID (services aiming for reproducible UUIDs may also use Version 5, see RFC 4122 for more recommendations).\n *\n * @deprecated Use ATTR_SERVICE_INSTANCE_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_SERVICE_INSTANCE_ID = TMP_SERVICE_INSTANCE_ID;\n\n/**\n * The version string of the service API or implementation.\n *\n * @deprecated Use ATTR_SERVICE_VERSION.\n */\nexport const SEMRESATTRS_SERVICE_VERSION = TMP_SERVICE_VERSION;\n\n/**\n * The name of the telemetry SDK as defined above.\n *\n * @deprecated Use ATTR_TELEMETRY_SDK_NAME.\n */\nexport const SEMRESATTRS_TELEMETRY_SDK_NAME = TMP_TELEMETRY_SDK_NAME;\n\n/**\n * The language of the telemetry SDK.\n *\n * @deprecated Use ATTR_TELEMETRY_SDK_LANGUAGE.\n */\nexport const SEMRESATTRS_TELEMETRY_SDK_LANGUAGE = TMP_TELEMETRY_SDK_LANGUAGE;\n\n/**\n * The version string of the telemetry SDK.\n *\n * @deprecated Use ATTR_TELEMETRY_SDK_VERSION.\n */\nexport const SEMRESATTRS_TELEMETRY_SDK_VERSION = TMP_TELEMETRY_SDK_VERSION;\n\n/**\n * The version string of the auto instrumentation agent, if used.\n *\n * @deprecated Use ATTR_TELEMETRY_DISTRO_VERSION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_TELEMETRY_AUTO_VERSION = TMP_TELEMETRY_AUTO_VERSION;\n\n/**\n * The name of the web engine.\n *\n * @deprecated Use ATTR_WEBENGINE_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_WEBENGINE_NAME = TMP_WEBENGINE_NAME;\n\n/**\n * The version of the web engine.\n *\n * @deprecated Use ATTR_WEBENGINE_VERSION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_WEBENGINE_VERSION = TMP_WEBENGINE_VERSION;\n\n/**\n * Additional description of the web engine (e.g. detailed version and edition information).\n *\n * @deprecated Use ATTR_WEBENGINE_DESCRIPTION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_WEBENGINE_DESCRIPTION = TMP_WEBENGINE_DESCRIPTION;\n\n/**\n * Definition of available values for SemanticResourceAttributes\n * This type is used for backward compatibility, you should use the individual exported\n * constants SemanticResourceAttributes_XXXXX rather than the exported constant map. As any single reference\n * to a constant map value will result in all strings being included into your bundle.\n * @deprecated Use the SEMRESATTRS_XXXXX constants rather than the SemanticResourceAttributes.XXXXX for bundle minification.\n */\nexport type SemanticResourceAttributes = {\n  /**\n   * Name of the cloud provider.\n   */\n  CLOUD_PROVIDER: 'cloud.provider';\n\n  /**\n   * The cloud account ID the resource is assigned to.\n   */\n  CLOUD_ACCOUNT_ID: 'cloud.account.id';\n\n  /**\n   * The geographical region the resource is running. Refer to your provider&#39;s docs to see the available regions, for example [Alibaba Cloud regions](https://www.alibabacloud.com/help/doc-detail/40654.htm), [AWS regions](https://aws.amazon.com/about-aws/global-infrastructure/regions_az/), [Azure regions](https://azure.microsoft.com/en-us/global-infrastructure/geographies/), or [Google Cloud regions](https://cloud.google.com/about/locations).\n   */\n  CLOUD_REGION: 'cloud.region';\n\n  /**\n   * Cloud regions often have multiple, isolated locations known as zones to increase availability. Availability zone represents the zone where the resource is running.\n   *\n   * Note: Availability zones are called &#34;zones&#34; on Alibaba Cloud and Google Cloud.\n   */\n  CLOUD_AVAILABILITY_ZONE: 'cloud.availability_zone';\n\n  /**\n   * The cloud platform in use.\n   *\n   * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n   */\n  CLOUD_PLATFORM: 'cloud.platform';\n\n  /**\n   * The Amazon Resource Name (ARN) of an [ECS container instance](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ECS_instances.html).\n   */\n  AWS_ECS_CONTAINER_ARN: 'aws.ecs.container.arn';\n\n  /**\n   * The ARN of an [ECS cluster](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/clusters.html).\n   */\n  AWS_ECS_CLUSTER_ARN: 'aws.ecs.cluster.arn';\n\n  /**\n   * The [launch type](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html) for an ECS task.\n   */\n  AWS_ECS_LAUNCHTYPE: 'aws.ecs.launchtype';\n\n  /**\n   * The ARN of an [ECS task definition](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definitions.html).\n   */\n  AWS_ECS_TASK_ARN: 'aws.ecs.task.arn';\n\n  /**\n   * The task definition family this task definition is a member of.\n   */\n  AWS_ECS_TASK_FAMILY: 'aws.ecs.task.family';\n\n  /**\n   * The revision for this task definition.\n   */\n  AWS_ECS_TASK_REVISION: 'aws.ecs.task.revision';\n\n  /**\n   * The ARN of an EKS cluster.\n   */\n  AWS_EKS_CLUSTER_ARN: 'aws.eks.cluster.arn';\n\n  /**\n   * The name(s) of the AWS log group(s) an application is writing to.\n   *\n   * Note: Multiple log groups must be supported for cases like multi-container applications, where a single application has sidecar containers, and each write to their own log group.\n   */\n  AWS_LOG_GROUP_NAMES: 'aws.log.group.names';\n\n  /**\n   * The Amazon Resource Name(s) (ARN) of the AWS log group(s).\n   *\n   * Note: See the [log group ARN format documentation](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/iam-access-control-overview-cwl.html#CWL_ARN_Format).\n   */\n  AWS_LOG_GROUP_ARNS: 'aws.log.group.arns';\n\n  /**\n   * The name(s) of the AWS log stream(s) an application is writing to.\n   */\n  AWS_LOG_STREAM_NAMES: 'aws.log.stream.names';\n\n  /**\n   * The ARN(s) of the AWS log stream(s).\n   *\n   * Note: See the [log stream ARN format documentation](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/iam-access-control-overview-cwl.html#CWL_ARN_Format). One log group can contain several log streams, so these ARNs necessarily identify both a log group and a log stream.\n   */\n  AWS_LOG_STREAM_ARNS: 'aws.log.stream.arns';\n\n  /**\n   * Container name.\n   */\n  CONTAINER_NAME: 'container.name';\n\n  /**\n   * Container ID. Usually a UUID, as for example used to [identify Docker containers](https://docs.docker.com/engine/reference/run/#container-identification). The UUID might be abbreviated.\n   */\n  CONTAINER_ID: 'container.id';\n\n  /**\n   * The container runtime managing this container.\n   */\n  CONTAINER_RUNTIME: 'container.runtime';\n\n  /**\n   * Name of the image the container was built on.\n   */\n  CONTAINER_IMAGE_NAME: 'container.image.name';\n\n  /**\n   * Container image tag.\n   */\n  CONTAINER_IMAGE_TAG: 'container.image.tag';\n\n  /**\n   * Name of the [deployment environment](https://en.wikipedia.org/wiki/Deployment_environment) (aka deployment tier).\n   */\n  DEPLOYMENT_ENVIRONMENT: 'deployment.environment';\n\n  /**\n   * A unique identifier representing the device.\n   *\n   * Note: The device identifier MUST only be defined using the values outlined below. This value is not an advertising identifier and MUST NOT be used as such. On iOS (Swift or Objective-C), this value MUST be equal to the [vendor identifier](https://developer.apple.com/documentation/uikit/uidevice/1620059-identifierforvendor). On Android (Java or Kotlin), this value MUST be equal to the Firebase Installation ID or a globally unique UUID which is persisted across sessions in your application. More information can be found [here](https://developer.android.com/training/articles/user-data-ids) on best practices and exact implementation details. Caution should be taken when storing personal data or anything which can identify a user. GDPR and data protection laws may apply, ensure you do your own due diligence.\n   */\n  DEVICE_ID: 'device.id';\n\n  /**\n   * The model identifier for the device.\n   *\n   * Note: It&#39;s recommended this value represents a machine readable version of the model identifier rather than the market or consumer-friendly name of the device.\n   */\n  DEVICE_MODEL_IDENTIFIER: 'device.model.identifier';\n\n  /**\n   * The marketing name for the device model.\n   *\n   * Note: It&#39;s recommended this value represents a human readable version of the device model rather than a machine readable alternative.\n   */\n  DEVICE_MODEL_NAME: 'device.model.name';\n\n  /**\n   * The name of the single function that this runtime instance executes.\n   *\n   * Note: This is the name of the function as configured/deployed on the FaaS platform and is usually different from the name of the callback function (which may be stored in the [`code.namespace`/`code.function`](../../trace/semantic_conventions/span-general.md#source-code-attributes) span attributes).\n   */\n  FAAS_NAME: 'faas.name';\n\n  /**\n  * The unique ID of the single function that this runtime instance executes.\n  *\n  * Note: Depending on the cloud provider, use:\n\n* **AWS Lambda:** The function [ARN](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html).\nTake care not to use the &#34;invoked ARN&#34; directly but replace any\n[alias suffix](https://docs.aws.amazon.com/lambda/latest/dg/configuration-aliases.html) with the resolved function version, as the same runtime instance may be invokable with multiple\ndifferent aliases.\n* **GCP:** The [URI of the resource](https://cloud.google.com/iam/docs/full-resource-names)\n* **Azure:** The [Fully Qualified Resource ID](https://docs.microsoft.com/en-us/rest/api/resources/resources/get-by-id).\n\nOn some providers, it may not be possible to determine the full ID at startup,\nwhich is why this field cannot be made required. For example, on AWS the account ID\npart of the ARN is not available without calling another AWS API\nwhich may be deemed too slow for a short-running lambda function.\nAs an alternative, consider setting `faas.id` as a span attribute instead.\n  */\n  FAAS_ID: 'faas.id';\n\n  /**\n  * The immutable version of the function being executed.\n  *\n  * Note: Depending on the cloud provider and platform, use:\n\n* **AWS Lambda:** The [function version](https://docs.aws.amazon.com/lambda/latest/dg/configuration-versions.html)\n  (an integer represented as a decimal string).\n* **Google Cloud Run:** The [revision](https://cloud.google.com/run/docs/managing/revisions)\n  (i.e., the function name plus the revision suffix).\n* **Google Cloud Functions:** The value of the\n  [`K_REVISION` environment variable](https://cloud.google.com/functions/docs/env-var#runtime_environment_variables_set_automatically).\n* **Azure Functions:** Not applicable. Do not set this attribute.\n  */\n  FAAS_VERSION: 'faas.version';\n\n  /**\n   * The execution environment ID as a string, that will be potentially reused for other invocations to the same function/function version.\n   *\n   * Note: * **AWS Lambda:** Use the (full) log stream name.\n   */\n  FAAS_INSTANCE: 'faas.instance';\n\n  /**\n   * The amount of memory available to the serverless function in MiB.\n   *\n   * Note: It&#39;s recommended to set this attribute since e.g. too little memory can easily stop a Java AWS Lambda function from working correctly. On AWS Lambda, the environment variable `AWS_LAMBDA_FUNCTION_MEMORY_SIZE` provides this information.\n   */\n  FAAS_MAX_MEMORY: 'faas.max_memory';\n\n  /**\n   * Unique host ID. For Cloud, this must be the instance_id assigned by the cloud provider.\n   */\n  HOST_ID: 'host.id';\n\n  /**\n   * Name of the host. On Unix systems, it may contain what the hostname command returns, or the fully qualified hostname, or another name specified by the user.\n   */\n  HOST_NAME: 'host.name';\n\n  /**\n   * Type of host. For Cloud, this must be the machine type.\n   */\n  HOST_TYPE: 'host.type';\n\n  /**\n   * The CPU architecture the host system is running on.\n   */\n  HOST_ARCH: 'host.arch';\n\n  /**\n   * Name of the VM image or OS install the host was instantiated from.\n   */\n  HOST_IMAGE_NAME: 'host.image.name';\n\n  /**\n   * VM image ID. For Cloud, this value is from the provider.\n   */\n  HOST_IMAGE_ID: 'host.image.id';\n\n  /**\n   * The version string of the VM image as defined in [Version Attributes](README.md#version-attributes).\n   */\n  HOST_IMAGE_VERSION: 'host.image.version';\n\n  /**\n   * The name of the cluster.\n   */\n  K8S_CLUSTER_NAME: 'k8s.cluster.name';\n\n  /**\n   * The name of the Node.\n   */\n  K8S_NODE_NAME: 'k8s.node.name';\n\n  /**\n   * The UID of the Node.\n   */\n  K8S_NODE_UID: 'k8s.node.uid';\n\n  /**\n   * The name of the namespace that the pod is running in.\n   */\n  K8S_NAMESPACE_NAME: 'k8s.namespace.name';\n\n  /**\n   * The UID of the Pod.\n   */\n  K8S_POD_UID: 'k8s.pod.uid';\n\n  /**\n   * The name of the Pod.\n   */\n  K8S_POD_NAME: 'k8s.pod.name';\n\n  /**\n   * The name of the Container in a Pod template.\n   */\n  K8S_CONTAINER_NAME: 'k8s.container.name';\n\n  /**\n   * The UID of the ReplicaSet.\n   */\n  K8S_REPLICASET_UID: 'k8s.replicaset.uid';\n\n  /**\n   * The name of the ReplicaSet.\n   */\n  K8S_REPLICASET_NAME: 'k8s.replicaset.name';\n\n  /**\n   * The UID of the Deployment.\n   */\n  K8S_DEPLOYMENT_UID: 'k8s.deployment.uid';\n\n  /**\n   * The name of the Deployment.\n   */\n  K8S_DEPLOYMENT_NAME: 'k8s.deployment.name';\n\n  /**\n   * The UID of the StatefulSet.\n   */\n  K8S_STATEFULSET_UID: 'k8s.statefulset.uid';\n\n  /**\n   * The name of the StatefulSet.\n   */\n  K8S_STATEFULSET_NAME: 'k8s.statefulset.name';\n\n  /**\n   * The UID of the DaemonSet.\n   */\n  K8S_DAEMONSET_UID: 'k8s.daemonset.uid';\n\n  /**\n   * The name of the DaemonSet.\n   */\n  K8S_DAEMONSET_NAME: 'k8s.daemonset.name';\n\n  /**\n   * The UID of the Job.\n   */\n  K8S_JOB_UID: 'k8s.job.uid';\n\n  /**\n   * The name of the Job.\n   */\n  K8S_JOB_NAME: 'k8s.job.name';\n\n  /**\n   * The UID of the CronJob.\n   */\n  K8S_CRONJOB_UID: 'k8s.cronjob.uid';\n\n  /**\n   * The name of the CronJob.\n   */\n  K8S_CRONJOB_NAME: 'k8s.cronjob.name';\n\n  /**\n   * The operating system type.\n   */\n  OS_TYPE: 'os.type';\n\n  /**\n   * Human readable (not intended to be parsed) OS version information, like e.g. reported by `ver` or `lsb_release -a` commands.\n   */\n  OS_DESCRIPTION: 'os.description';\n\n  /**\n   * Human readable operating system name.\n   */\n  OS_NAME: 'os.name';\n\n  /**\n   * The version string of the operating system as defined in [Version Attributes](../../resource/semantic_conventions/README.md#version-attributes).\n   */\n  OS_VERSION: 'os.version';\n\n  /**\n   * Process identifier (PID).\n   */\n  PROCESS_PID: 'process.pid';\n\n  /**\n   * The name of the process executable. On Linux based systems, can be set to the `Name` in `proc/[pid]/status`. On Windows, can be set to the base name of `GetProcessImageFileNameW`.\n   */\n  PROCESS_EXECUTABLE_NAME: 'process.executable.name';\n\n  /**\n   * The full path to the process executable. On Linux based systems, can be set to the target of `proc/[pid]/exe`. On Windows, can be set to the result of `GetProcessImageFileNameW`.\n   */\n  PROCESS_EXECUTABLE_PATH: 'process.executable.path';\n\n  /**\n   * The command used to launch the process (i.e. the command name). On Linux based systems, can be set to the zeroth string in `proc/[pid]/cmdline`. On Windows, can be set to the first parameter extracted from `GetCommandLineW`.\n   */\n  PROCESS_COMMAND: 'process.command';\n\n  /**\n   * The full command used to launch the process as a single string representing the full command. On Windows, can be set to the result of `GetCommandLineW`. Do not set this if you have to assemble it just for monitoring; use `process.command_args` instead.\n   */\n  PROCESS_COMMAND_LINE: 'process.command_line';\n\n  /**\n   * All the command arguments (including the command/executable itself) as received by the process. On Linux-based systems (and some other Unixoid systems supporting procfs), can be set according to the list of null-delimited strings extracted from `proc/[pid]/cmdline`. For libc-based executables, this would be the full argv vector passed to `main`.\n   */\n  PROCESS_COMMAND_ARGS: 'process.command_args';\n\n  /**\n   * The username of the user that owns the process.\n   */\n  PROCESS_OWNER: 'process.owner';\n\n  /**\n   * The name of the runtime of this process. For compiled native binaries, this SHOULD be the name of the compiler.\n   */\n  PROCESS_RUNTIME_NAME: 'process.runtime.name';\n\n  /**\n   * The version of the runtime of this process, as returned by the runtime without modification.\n   */\n  PROCESS_RUNTIME_VERSION: 'process.runtime.version';\n\n  /**\n   * An additional description about the runtime of the process, for example a specific vendor customization of the runtime environment.\n   */\n  PROCESS_RUNTIME_DESCRIPTION: 'process.runtime.description';\n\n  /**\n   * Logical name of the service.\n   *\n   * Note: MUST be the same for all instances of horizontally scaled services. If the value was not specified, SDKs MUST fallback to `unknown_service:` concatenated with [`process.executable.name`](process.md#process), e.g. `unknown_service:bash`. If `process.executable.name` is not available, the value MUST be set to `unknown_service`.\n   */\n  SERVICE_NAME: 'service.name';\n\n  /**\n   * A namespace for `service.name`.\n   *\n   * Note: A string value having a meaning that helps to distinguish a group of services, for example the team name that owns a group of services. `service.name` is expected to be unique within the same namespace. If `service.namespace` is not specified in the Resource then `service.name` is expected to be unique for all services that have no explicit namespace defined (so the empty/unspecified namespace is simply one more valid namespace). Zero-length namespace string is assumed equal to unspecified namespace.\n   */\n  SERVICE_NAMESPACE: 'service.namespace';\n\n  /**\n   * The string ID of the service instance.\n   *\n   * Note: MUST be unique for each instance of the same `service.namespace,service.name` pair (in other words `service.namespace,service.name,service.instance.id` triplet MUST be globally unique). The ID helps to distinguish instances of the same service that exist at the same time (e.g. instances of a horizontally scaled service). It is preferable for the ID to be persistent and stay the same for the lifetime of the service instance, however it is acceptable that the ID is ephemeral and changes during important lifetime events for the service (e.g. service restarts). If the service has no inherent unique ID that can be used as the value of this attribute it is recommended to generate a random Version 1 or Version 4 RFC 4122 UUID (services aiming for reproducible UUIDs may also use Version 5, see RFC 4122 for more recommendations).\n   */\n  SERVICE_INSTANCE_ID: 'service.instance.id';\n\n  /**\n   * The version string of the service API or implementation.\n   */\n  SERVICE_VERSION: 'service.version';\n\n  /**\n   * The name of the telemetry SDK as defined above.\n   */\n  TELEMETRY_SDK_NAME: 'telemetry.sdk.name';\n\n  /**\n   * The language of the telemetry SDK.\n   */\n  TELEMETRY_SDK_LANGUAGE: 'telemetry.sdk.language';\n\n  /**\n   * The version string of the telemetry SDK.\n   */\n  TELEMETRY_SDK_VERSION: 'telemetry.sdk.version';\n\n  /**\n   * The version string of the auto instrumentation agent, if used.\n   */\n  TELEMETRY_AUTO_VERSION: 'telemetry.auto.version';\n\n  /**\n   * The name of the web engine.\n   */\n  WEBENGINE_NAME: 'webengine.name';\n\n  /**\n   * The version of the web engine.\n   */\n  WEBENGINE_VERSION: 'webengine.version';\n\n  /**\n   * Additional description of the web engine (e.g. detailed version and edition information).\n   */\n  WEBENGINE_DESCRIPTION: 'webengine.description';\n};\n\n/**\n * Create exported Value Map for SemanticResourceAttributes values\n * @deprecated Use the SEMRESATTRS_XXXXX constants rather than the SemanticResourceAttributes.XXXXX for bundle minification\n */\nexport const SemanticResourceAttributes: SemanticResourceAttributes =\n  /*#__PURE__*/ createConstMap<SemanticResourceAttributes>([\n    TMP_CLOUD_PROVIDER,\n    TMP_CLOUD_ACCOUNT_ID,\n    TMP_CLOUD_REGION,\n    TMP_CLOUD_AVAILABILITY_ZONE,\n    TMP_CLOUD_PLATFORM,\n    TMP_AWS_ECS_CONTAINER_ARN,\n    TMP_AWS_ECS_CLUSTER_ARN,\n    TMP_AWS_ECS_LAUNCHTYPE,\n    TMP_AWS_ECS_TASK_ARN,\n    TMP_AWS_ECS_TASK_FAMILY,\n    TMP_AWS_ECS_TASK_REVISION,\n    TMP_AWS_EKS_CLUSTER_ARN,\n    TMP_AWS_LOG_GROUP_NAMES,\n    TMP_AWS_LOG_GROUP_ARNS,\n    TMP_AWS_LOG_STREAM_NAMES,\n    TMP_AWS_LOG_STREAM_ARNS,\n    TMP_CONTAINER_NAME,\n    TMP_CONTAINER_ID,\n    TMP_CONTAINER_RUNTIME,\n    TMP_CONTAINER_IMAGE_NAME,\n    TMP_CONTAINER_IMAGE_TAG,\n    TMP_DEPLOYMENT_ENVIRONMENT,\n    TMP_DEVICE_ID,\n    TMP_DEVICE_MODEL_IDENTIFIER,\n    TMP_DEVICE_MODEL_NAME,\n    TMP_FAAS_NAME,\n    TMP_FAAS_ID,\n    TMP_FAAS_VERSION,\n    TMP_FAAS_INSTANCE,\n    TMP_FAAS_MAX_MEMORY,\n    TMP_HOST_ID,\n    TMP_HOST_NAME,\n    TMP_HOST_TYPE,\n    TMP_HOST_ARCH,\n    TMP_HOST_IMAGE_NAME,\n    TMP_HOST_IMAGE_ID,\n    TMP_HOST_IMAGE_VERSION,\n    TMP_K8S_CLUSTER_NAME,\n    TMP_K8S_NODE_NAME,\n    TMP_K8S_NODE_UID,\n    TMP_K8S_NAMESPACE_NAME,\n    TMP_K8S_POD_UID,\n    TMP_K8S_POD_NAME,\n    TMP_K8S_CONTAINER_NAME,\n    TMP_K8S_REPLICASET_UID,\n    TMP_K8S_REPLICASET_NAME,\n    TMP_K8S_DEPLOYMENT_UID,\n    TMP_K8S_DEPLOYMENT_NAME,\n    TMP_K8S_STATEFULSET_UID,\n    TMP_K8S_STATEFULSET_NAME,\n    TMP_K8S_DAEMONSET_UID,\n    TMP_K8S_DAEMONSET_NAME,\n    TMP_K8S_JOB_UID,\n    TMP_K8S_JOB_NAME,\n    TMP_K8S_CRONJOB_UID,\n    TMP_K8S_CRONJOB_NAME,\n    TMP_OS_TYPE,\n    TMP_OS_DESCRIPTION,\n    TMP_OS_NAME,\n    TMP_OS_VERSION,\n    TMP_PROCESS_PID,\n    TMP_PROCESS_EXECUTABLE_NAME,\n    TMP_PROCESS_EXECUTABLE_PATH,\n    TMP_PROCESS_COMMAND,\n    TMP_PROCESS_COMMAND_LINE,\n    TMP_PROCESS_COMMAND_ARGS,\n    TMP_PROCESS_OWNER,\n    TMP_PROCESS_RUNTIME_NAME,\n    TMP_PROCESS_RUNTIME_VERSION,\n    TMP_PROCESS_RUNTIME_DESCRIPTION,\n    TMP_SERVICE_NAME,\n    TMP_SERVICE_NAMESPACE,\n    TMP_SERVICE_INSTANCE_ID,\n    TMP_SERVICE_VERSION,\n    TMP_TELEMETRY_SDK_NAME,\n    TMP_TELEMETRY_SDK_LANGUAGE,\n    TMP_TELEMETRY_SDK_VERSION,\n    TMP_TELEMETRY_AUTO_VERSION,\n    TMP_WEBENGINE_NAME,\n    TMP_WEBENGINE_VERSION,\n    TMP_WEBENGINE_DESCRIPTION,\n  ]);\n\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for CloudProviderValues enum definition\n *\n * Name of the cloud provider.\n * ---------------------------------------------------------------------------------------------------------- */\n\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nconst TMP_CLOUDPROVIDERVALUES_ALIBABA_CLOUD = 'alibaba_cloud';\nconst TMP_CLOUDPROVIDERVALUES_AWS = 'aws';\nconst TMP_CLOUDPROVIDERVALUES_AZURE = 'azure';\nconst TMP_CLOUDPROVIDERVALUES_GCP = 'gcp';\n\n/**\n * Name of the cloud provider.\n *\n * @deprecated Use CLOUD_PROVIDER_VALUE_ALIBABA_CLOUD in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const CLOUDPROVIDERVALUES_ALIBABA_CLOUD =\n  TMP_CLOUDPROVIDERVALUES_ALIBABA_CLOUD;\n\n/**\n * Name of the cloud provider.\n *\n * @deprecated Use CLOUD_PROVIDER_VALUE_AWS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const CLOUDPROVIDERVALUES_AWS = TMP_CLOUDPROVIDERVALUES_AWS;\n\n/**\n * Name of the cloud provider.\n *\n * @deprecated Use CLOUD_PROVIDER_VALUE_AZURE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const CLOUDPROVIDERVALUES_AZURE = TMP_CLOUDPROVIDERVALUES_AZURE;\n\n/**\n * Name of the cloud provider.\n *\n * @deprecated Use CLOUD_PROVIDER_VALUE_GCP in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const CLOUDPROVIDERVALUES_GCP = TMP_CLOUDPROVIDERVALUES_GCP;\n\n/**\n * Identifies the Values for CloudProviderValues enum definition\n *\n * Name of the cloud provider.\n * @deprecated Use the CLOUDPROVIDERVALUES_XXXXX constants rather than the CloudProviderValues.XXXXX for bundle minification.\n */\nexport type CloudProviderValues = {\n  /** Alibaba Cloud. */\n  ALIBABA_CLOUD: 'alibaba_cloud';\n\n  /** Amazon Web Services. */\n  AWS: 'aws';\n\n  /** Microsoft Azure. */\n  AZURE: 'azure';\n\n  /** Google Cloud Platform. */\n  GCP: 'gcp';\n};\n\n/**\n * The constant map of values for CloudProviderValues.\n * @deprecated Use the CLOUDPROVIDERVALUES_XXXXX constants rather than the CloudProviderValues.XXXXX for bundle minification.\n */\nexport const CloudProviderValues: CloudProviderValues =\n  /*#__PURE__*/ createConstMap<CloudProviderValues>([\n    TMP_CLOUDPROVIDERVALUES_ALIBABA_CLOUD,\n    TMP_CLOUDPROVIDERVALUES_AWS,\n    TMP_CLOUDPROVIDERVALUES_AZURE,\n    TMP_CLOUDPROVIDERVALUES_GCP,\n  ]);\n\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for CloudPlatformValues enum definition\n *\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n * ---------------------------------------------------------------------------------------------------------- */\n\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nconst TMP_CLOUDPLATFORMVALUES_ALIBABA_CLOUD_ECS = 'alibaba_cloud_ecs';\nconst TMP_CLOUDPLATFORMVALUES_ALIBABA_CLOUD_FC = 'alibaba_cloud_fc';\nconst TMP_CLOUDPLATFORMVALUES_AWS_EC2 = 'aws_ec2';\nconst TMP_CLOUDPLATFORMVALUES_AWS_ECS = 'aws_ecs';\nconst TMP_CLOUDPLATFORMVALUES_AWS_EKS = 'aws_eks';\nconst TMP_CLOUDPLATFORMVALUES_AWS_LAMBDA = 'aws_lambda';\nconst TMP_CLOUDPLATFORMVALUES_AWS_ELASTIC_BEANSTALK = 'aws_elastic_beanstalk';\nconst TMP_CLOUDPLATFORMVALUES_AZURE_VM = 'azure_vm';\nconst TMP_CLOUDPLATFORMVALUES_AZURE_CONTAINER_INSTANCES =\n  'azure_container_instances';\nconst TMP_CLOUDPLATFORMVALUES_AZURE_AKS = 'azure_aks';\nconst TMP_CLOUDPLATFORMVALUES_AZURE_FUNCTIONS = 'azure_functions';\nconst TMP_CLOUDPLATFORMVALUES_AZURE_APP_SERVICE = 'azure_app_service';\nconst TMP_CLOUDPLATFORMVALUES_GCP_COMPUTE_ENGINE = 'gcp_compute_engine';\nconst TMP_CLOUDPLATFORMVALUES_GCP_CLOUD_RUN = 'gcp_cloud_run';\nconst TMP_CLOUDPLATFORMVALUES_GCP_KUBERNETES_ENGINE = 'gcp_kubernetes_engine';\nconst TMP_CLOUDPLATFORMVALUES_GCP_CLOUD_FUNCTIONS = 'gcp_cloud_functions';\nconst TMP_CLOUDPLATFORMVALUES_GCP_APP_ENGINE = 'gcp_app_engine';\n\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_ALIBABA_CLOUD_ECS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const CLOUDPLATFORMVALUES_ALIBABA_CLOUD_ECS =\n  TMP_CLOUDPLATFORMVALUES_ALIBABA_CLOUD_ECS;\n\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_ALIBABA_CLOUD_FC in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const CLOUDPLATFORMVALUES_ALIBABA_CLOUD_FC =\n  TMP_CLOUDPLATFORMVALUES_ALIBABA_CLOUD_FC;\n\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_AWS_EC2 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const CLOUDPLATFORMVALUES_AWS_EC2 = TMP_CLOUDPLATFORMVALUES_AWS_EC2;\n\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_AWS_ECS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const CLOUDPLATFORMVALUES_AWS_ECS = TMP_CLOUDPLATFORMVALUES_AWS_ECS;\n\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_AWS_EKS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const CLOUDPLATFORMVALUES_AWS_EKS = TMP_CLOUDPLATFORMVALUES_AWS_EKS;\n\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_AWS_LAMBDA in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const CLOUDPLATFORMVALUES_AWS_LAMBDA =\n  TMP_CLOUDPLATFORMVALUES_AWS_LAMBDA;\n\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_AWS_ELASTIC_BEANSTALK in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const CLOUDPLATFORMVALUES_AWS_ELASTIC_BEANSTALK =\n  TMP_CLOUDPLATFORMVALUES_AWS_ELASTIC_BEANSTALK;\n\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_AZURE_VM in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const CLOUDPLATFORMVALUES_AZURE_VM = TMP_CLOUDPLATFORMVALUES_AZURE_VM;\n\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_AZURE_CONTAINER_INSTANCES in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const CLOUDPLATFORMVALUES_AZURE_CONTAINER_INSTANCES =\n  TMP_CLOUDPLATFORMVALUES_AZURE_CONTAINER_INSTANCES;\n\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_AZURE_AKS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const CLOUDPLATFORMVALUES_AZURE_AKS = TMP_CLOUDPLATFORMVALUES_AZURE_AKS;\n\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_AZURE_FUNCTIONS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const CLOUDPLATFORMVALUES_AZURE_FUNCTIONS =\n  TMP_CLOUDPLATFORMVALUES_AZURE_FUNCTIONS;\n\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_AZURE_APP_SERVICE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const CLOUDPLATFORMVALUES_AZURE_APP_SERVICE =\n  TMP_CLOUDPLATFORMVALUES_AZURE_APP_SERVICE;\n\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_GCP_COMPUTE_ENGINE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const CLOUDPLATFORMVALUES_GCP_COMPUTE_ENGINE =\n  TMP_CLOUDPLATFORMVALUES_GCP_COMPUTE_ENGINE;\n\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_GCP_CLOUD_RUN in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const CLOUDPLATFORMVALUES_GCP_CLOUD_RUN =\n  TMP_CLOUDPLATFORMVALUES_GCP_CLOUD_RUN;\n\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_GCP_KUBERNETES_ENGINE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const CLOUDPLATFORMVALUES_GCP_KUBERNETES_ENGINE =\n  TMP_CLOUDPLATFORMVALUES_GCP_KUBERNETES_ENGINE;\n\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_GCP_CLOUD_FUNCTIONS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const CLOUDPLATFORMVALUES_GCP_CLOUD_FUNCTIONS =\n  TMP_CLOUDPLATFORMVALUES_GCP_CLOUD_FUNCTIONS;\n\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_GCP_APP_ENGINE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const CLOUDPLATFORMVALUES_GCP_APP_ENGINE =\n  TMP_CLOUDPLATFORMVALUES_GCP_APP_ENGINE;\n\n/**\n * Identifies the Values for CloudPlatformValues enum definition\n *\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n * @deprecated Use the CLOUDPLATFORMVALUES_XXXXX constants rather than the CloudPlatformValues.XXXXX for bundle minification.\n */\nexport type CloudPlatformValues = {\n  /** Alibaba Cloud Elastic Compute Service. */\n  ALIBABA_CLOUD_ECS: 'alibaba_cloud_ecs';\n\n  /** Alibaba Cloud Function Compute. */\n  ALIBABA_CLOUD_FC: 'alibaba_cloud_fc';\n\n  /** AWS Elastic Compute Cloud. */\n  AWS_EC2: 'aws_ec2';\n\n  /** AWS Elastic Container Service. */\n  AWS_ECS: 'aws_ecs';\n\n  /** AWS Elastic Kubernetes Service. */\n  AWS_EKS: 'aws_eks';\n\n  /** AWS Lambda. */\n  AWS_LAMBDA: 'aws_lambda';\n\n  /** AWS Elastic Beanstalk. */\n  AWS_ELASTIC_BEANSTALK: 'aws_elastic_beanstalk';\n\n  /** Azure Virtual Machines. */\n  AZURE_VM: 'azure_vm';\n\n  /** Azure Container Instances. */\n  AZURE_CONTAINER_INSTANCES: 'azure_container_instances';\n\n  /** Azure Kubernetes Service. */\n  AZURE_AKS: 'azure_aks';\n\n  /** Azure Functions. */\n  AZURE_FUNCTIONS: 'azure_functions';\n\n  /** Azure App Service. */\n  AZURE_APP_SERVICE: 'azure_app_service';\n\n  /** Google Cloud Compute Engine (GCE). */\n  GCP_COMPUTE_ENGINE: 'gcp_compute_engine';\n\n  /** Google Cloud Run. */\n  GCP_CLOUD_RUN: 'gcp_cloud_run';\n\n  /** Google Cloud Kubernetes Engine (GKE). */\n  GCP_KUBERNETES_ENGINE: 'gcp_kubernetes_engine';\n\n  /** Google Cloud Functions (GCF). */\n  GCP_CLOUD_FUNCTIONS: 'gcp_cloud_functions';\n\n  /** Google Cloud App Engine (GAE). */\n  GCP_APP_ENGINE: 'gcp_app_engine';\n};\n\n/**\n * The constant map of values for CloudPlatformValues.\n * @deprecated Use the CLOUDPLATFORMVALUES_XXXXX constants rather than the CloudPlatformValues.XXXXX for bundle minification.\n */\nexport const CloudPlatformValues: CloudPlatformValues =\n  /*#__PURE__*/ createConstMap<CloudPlatformValues>([\n    TMP_CLOUDPLATFORMVALUES_ALIBABA_CLOUD_ECS,\n    TMP_CLOUDPLATFORMVALUES_ALIBABA_CLOUD_FC,\n    TMP_CLOUDPLATFORMVALUES_AWS_EC2,\n    TMP_CLOUDPLATFORMVALUES_AWS_ECS,\n    TMP_CLOUDPLATFORMVALUES_AWS_EKS,\n    TMP_CLOUDPLATFORMVALUES_AWS_LAMBDA,\n    TMP_CLOUDPLATFORMVALUES_AWS_ELASTIC_BEANSTALK,\n    TMP_CLOUDPLATFORMVALUES_AZURE_VM,\n    TMP_CLOUDPLATFORMVALUES_AZURE_CONTAINER_INSTANCES,\n    TMP_CLOUDPLATFORMVALUES_AZURE_AKS,\n    TMP_CLOUDPLATFORMVALUES_AZURE_FUNCTIONS,\n    TMP_CLOUDPLATFORMVALUES_AZURE_APP_SERVICE,\n    TMP_CLOUDPLATFORMVALUES_GCP_COMPUTE_ENGINE,\n    TMP_CLOUDPLATFORMVALUES_GCP_CLOUD_RUN,\n    TMP_CLOUDPLATFORMVALUES_GCP_KUBERNETES_ENGINE,\n    TMP_CLOUDPLATFORMVALUES_GCP_CLOUD_FUNCTIONS,\n    TMP_CLOUDPLATFORMVALUES_GCP_APP_ENGINE,\n  ]);\n\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for AwsEcsLaunchtypeValues enum definition\n *\n * The [launch type](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html) for an ECS task.\n * ---------------------------------------------------------------------------------------------------------- */\n\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nconst TMP_AWSECSLAUNCHTYPEVALUES_EC2 = 'ec2';\nconst TMP_AWSECSLAUNCHTYPEVALUES_FARGATE = 'fargate';\n\n/**\n * The [launch type](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html) for an ECS task.\n *\n * @deprecated Use AWS_ECS_LAUNCHTYPE_VALUE_EC2 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const AWSECSLAUNCHTYPEVALUES_EC2 = TMP_AWSECSLAUNCHTYPEVALUES_EC2;\n\n/**\n * The [launch type](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html) for an ECS task.\n *\n * @deprecated Use AWS_ECS_LAUNCHTYPE_VALUE_FARGATE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const AWSECSLAUNCHTYPEVALUES_FARGATE =\n  TMP_AWSECSLAUNCHTYPEVALUES_FARGATE;\n\n/**\n * Identifies the Values for AwsEcsLaunchtypeValues enum definition\n *\n * The [launch type](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html) for an ECS task.\n * @deprecated Use the AWSECSLAUNCHTYPEVALUES_XXXXX constants rather than the AwsEcsLaunchtypeValues.XXXXX for bundle minification.\n */\nexport type AwsEcsLaunchtypeValues = {\n  /** ec2. */\n  EC2: 'ec2';\n\n  /** fargate. */\n  FARGATE: 'fargate';\n};\n\n/**\n * The constant map of values for AwsEcsLaunchtypeValues.\n * @deprecated Use the AWSECSLAUNCHTYPEVALUES_XXXXX constants rather than the AwsEcsLaunchtypeValues.XXXXX for bundle minification.\n */\nexport const AwsEcsLaunchtypeValues: AwsEcsLaunchtypeValues =\n  /*#__PURE__*/ createConstMap<AwsEcsLaunchtypeValues>([\n    TMP_AWSECSLAUNCHTYPEVALUES_EC2,\n    TMP_AWSECSLAUNCHTYPEVALUES_FARGATE,\n  ]);\n\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for HostArchValues enum definition\n *\n * The CPU architecture the host system is running on.\n * ---------------------------------------------------------------------------------------------------------- */\n\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nconst TMP_HOSTARCHVALUES_AMD64 = 'amd64';\nconst TMP_HOSTARCHVALUES_ARM32 = 'arm32';\nconst TMP_HOSTARCHVALUES_ARM64 = 'arm64';\nconst TMP_HOSTARCHVALUES_IA64 = 'ia64';\nconst TMP_HOSTARCHVALUES_PPC32 = 'ppc32';\nconst TMP_HOSTARCHVALUES_PPC64 = 'ppc64';\nconst TMP_HOSTARCHVALUES_X86 = 'x86';\n\n/**\n * The CPU architecture the host system is running on.\n *\n * @deprecated Use HOST_ARCH_VALUE_AMD64 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const HOSTARCHVALUES_AMD64 = TMP_HOSTARCHVALUES_AMD64;\n\n/**\n * The CPU architecture the host system is running on.\n *\n * @deprecated Use HOST_ARCH_VALUE_ARM32 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const HOSTARCHVALUES_ARM32 = TMP_HOSTARCHVALUES_ARM32;\n\n/**\n * The CPU architecture the host system is running on.\n *\n * @deprecated Use HOST_ARCH_VALUE_ARM64 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const HOSTARCHVALUES_ARM64 = TMP_HOSTARCHVALUES_ARM64;\n\n/**\n * The CPU architecture the host system is running on.\n *\n * @deprecated Use HOST_ARCH_VALUE_IA64 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const HOSTARCHVALUES_IA64 = TMP_HOSTARCHVALUES_IA64;\n\n/**\n * The CPU architecture the host system is running on.\n *\n * @deprecated Use HOST_ARCH_VALUE_PPC32 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const HOSTARCHVALUES_PPC32 = TMP_HOSTARCHVALUES_PPC32;\n\n/**\n * The CPU architecture the host system is running on.\n *\n * @deprecated Use HOST_ARCH_VALUE_PPC64 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const HOSTARCHVALUES_PPC64 = TMP_HOSTARCHVALUES_PPC64;\n\n/**\n * The CPU architecture the host system is running on.\n *\n * @deprecated Use HOST_ARCH_VALUE_X86 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const HOSTARCHVALUES_X86 = TMP_HOSTARCHVALUES_X86;\n\n/**\n * Identifies the Values for HostArchValues enum definition\n *\n * The CPU architecture the host system is running on.\n * @deprecated Use the HOSTARCHVALUES_XXXXX constants rather than the HostArchValues.XXXXX for bundle minification.\n */\nexport type HostArchValues = {\n  /** AMD64. */\n  AMD64: 'amd64';\n\n  /** ARM32. */\n  ARM32: 'arm32';\n\n  /** ARM64. */\n  ARM64: 'arm64';\n\n  /** Itanium. */\n  IA64: 'ia64';\n\n  /** 32-bit PowerPC. */\n  PPC32: 'ppc32';\n\n  /** 64-bit PowerPC. */\n  PPC64: 'ppc64';\n\n  /** 32-bit x86. */\n  X86: 'x86';\n};\n\n/**\n * The constant map of values for HostArchValues.\n * @deprecated Use the HOSTARCHVALUES_XXXXX constants rather than the HostArchValues.XXXXX for bundle minification.\n */\nexport const HostArchValues: HostArchValues =\n  /*#__PURE__*/ createConstMap<HostArchValues>([\n    TMP_HOSTARCHVALUES_AMD64,\n    TMP_HOSTARCHVALUES_ARM32,\n    TMP_HOSTARCHVALUES_ARM64,\n    TMP_HOSTARCHVALUES_IA64,\n    TMP_HOSTARCHVALUES_PPC32,\n    TMP_HOSTARCHVALUES_PPC64,\n    TMP_HOSTARCHVALUES_X86,\n  ]);\n\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for OsTypeValues enum definition\n *\n * The operating system type.\n * ---------------------------------------------------------------------------------------------------------- */\n\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nconst TMP_OSTYPEVALUES_WINDOWS = 'windows';\nconst TMP_OSTYPEVALUES_LINUX = 'linux';\nconst TMP_OSTYPEVALUES_DARWIN = 'darwin';\nconst TMP_OSTYPEVALUES_FREEBSD = 'freebsd';\nconst TMP_OSTYPEVALUES_NETBSD = 'netbsd';\nconst TMP_OSTYPEVALUES_OPENBSD = 'openbsd';\nconst TMP_OSTYPEVALUES_DRAGONFLYBSD = 'dragonflybsd';\nconst TMP_OSTYPEVALUES_HPUX = 'hpux';\nconst TMP_OSTYPEVALUES_AIX = 'aix';\nconst TMP_OSTYPEVALUES_SOLARIS = 'solaris';\nconst TMP_OSTYPEVALUES_Z_OS = 'z_os';\n\n/**\n * The operating system type.\n *\n * @deprecated Use OS_TYPE_VALUE_WINDOWS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const OSTYPEVALUES_WINDOWS = TMP_OSTYPEVALUES_WINDOWS;\n\n/**\n * The operating system type.\n *\n * @deprecated Use OS_TYPE_VALUE_LINUX in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const OSTYPEVALUES_LINUX = TMP_OSTYPEVALUES_LINUX;\n\n/**\n * The operating system type.\n *\n * @deprecated Use OS_TYPE_VALUE_DARWIN in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const OSTYPEVALUES_DARWIN = TMP_OSTYPEVALUES_DARWIN;\n\n/**\n * The operating system type.\n *\n * @deprecated Use OS_TYPE_VALUE_FREEBSD in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const OSTYPEVALUES_FREEBSD = TMP_OSTYPEVALUES_FREEBSD;\n\n/**\n * The operating system type.\n *\n * @deprecated Use OS_TYPE_VALUE_NETBSD in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const OSTYPEVALUES_NETBSD = TMP_OSTYPEVALUES_NETBSD;\n\n/**\n * The operating system type.\n *\n * @deprecated Use OS_TYPE_VALUE_OPENBSD in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const OSTYPEVALUES_OPENBSD = TMP_OSTYPEVALUES_OPENBSD;\n\n/**\n * The operating system type.\n *\n * @deprecated Use OS_TYPE_VALUE_DRAGONFLYBSD in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const OSTYPEVALUES_DRAGONFLYBSD = TMP_OSTYPEVALUES_DRAGONFLYBSD;\n\n/**\n * The operating system type.\n *\n * @deprecated Use OS_TYPE_VALUE_HPUX in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const OSTYPEVALUES_HPUX = TMP_OSTYPEVALUES_HPUX;\n\n/**\n * The operating system type.\n *\n * @deprecated Use OS_TYPE_VALUE_AIX in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const OSTYPEVALUES_AIX = TMP_OSTYPEVALUES_AIX;\n\n/**\n * The operating system type.\n *\n * @deprecated Use OS_TYPE_VALUE_SOLARIS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const OSTYPEVALUES_SOLARIS = TMP_OSTYPEVALUES_SOLARIS;\n\n/**\n * The operating system type.\n *\n * @deprecated Use OS_TYPE_VALUE_Z_OS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const OSTYPEVALUES_Z_OS = TMP_OSTYPEVALUES_Z_OS;\n\n/**\n * Identifies the Values for OsTypeValues enum definition\n *\n * The operating system type.\n * @deprecated Use the OSTYPEVALUES_XXXXX constants rather than the OsTypeValues.XXXXX for bundle minification.\n */\nexport type OsTypeValues = {\n  /** Microsoft Windows. */\n  WINDOWS: 'windows';\n\n  /** Linux. */\n  LINUX: 'linux';\n\n  /** Apple Darwin. */\n  DARWIN: 'darwin';\n\n  /** FreeBSD. */\n  FREEBSD: 'freebsd';\n\n  /** NetBSD. */\n  NETBSD: 'netbsd';\n\n  /** OpenBSD. */\n  OPENBSD: 'openbsd';\n\n  /** DragonFly BSD. */\n  DRAGONFLYBSD: 'dragonflybsd';\n\n  /** HP-UX (Hewlett Packard Unix). */\n  HPUX: 'hpux';\n\n  /** AIX (Advanced Interactive eXecutive). */\n  AIX: 'aix';\n\n  /** Oracle Solaris. */\n  SOLARIS: 'solaris';\n\n  /** IBM z/OS. */\n  Z_OS: 'z_os';\n};\n\n/**\n * The constant map of values for OsTypeValues.\n * @deprecated Use the OSTYPEVALUES_XXXXX constants rather than the OsTypeValues.XXXXX for bundle minification.\n */\nexport const OsTypeValues: OsTypeValues =\n  /*#__PURE__*/ createConstMap<OsTypeValues>([\n    TMP_OSTYPEVALUES_WINDOWS,\n    TMP_OSTYPEVALUES_LINUX,\n    TMP_OSTYPEVALUES_DARWIN,\n    TMP_OSTYPEVALUES_FREEBSD,\n    TMP_OSTYPEVALUES_NETBSD,\n    TMP_OSTYPEVALUES_OPENBSD,\n    TMP_OSTYPEVALUES_DRAGONFLYBSD,\n    TMP_OSTYPEVALUES_HPUX,\n    TMP_OSTYPEVALUES_AIX,\n    TMP_OSTYPEVALUES_SOLARIS,\n    TMP_OSTYPEVALUES_Z_OS,\n  ]);\n\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for TelemetrySdkLanguageValues enum definition\n *\n * The language of the telemetry SDK.\n * ---------------------------------------------------------------------------------------------------------- */\n\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nconst TMP_TELEMETRYSDKLANGUAGEVALUES_CPP = 'cpp';\nconst TMP_TELEMETRYSDKLANGUAGEVALUES_DOTNET = 'dotnet';\nconst TMP_TELEMETRYSDKLANGUAGEVALUES_ERLANG = 'erlang';\nconst TMP_TELEMETRYSDKLANGUAGEVALUES_GO = 'go';\nconst TMP_TELEMETRYSDKLANGUAGEVALUES_JAVA = 'java';\nconst TMP_TELEMETRYSDKLANGUAGEVALUES_NODEJS = 'nodejs';\nconst TMP_TELEMETRYSDKLANGUAGEVALUES_PHP = 'php';\nconst TMP_TELEMETRYSDKLANGUAGEVALUES_PYTHON = 'python';\nconst TMP_TELEMETRYSDKLANGUAGEVALUES_RUBY = 'ruby';\nconst TMP_TELEMETRYSDKLANGUAGEVALUES_WEBJS = 'webjs';\n\n/**\n * The language of the telemetry SDK.\n *\n * @deprecated Use TELEMETRY_SDK_LANGUAGE_VALUE_CPP.\n */\nexport const TELEMETRYSDKLANGUAGEVALUES_CPP =\n  TMP_TELEMETRYSDKLANGUAGEVALUES_CPP;\n\n/**\n * The language of the telemetry SDK.\n *\n * @deprecated Use TELEMETRY_SDK_LANGUAGE_VALUE_DOTNET.\n */\nexport const TELEMETRYSDKLANGUAGEVALUES_DOTNET =\n  TMP_TELEMETRYSDKLANGUAGEVALUES_DOTNET;\n\n/**\n * The language of the telemetry SDK.\n *\n * @deprecated Use TELEMETRY_SDK_LANGUAGE_VALUE_ERLANG.\n */\nexport const TELEMETRYSDKLANGUAGEVALUES_ERLANG =\n  TMP_TELEMETRYSDKLANGUAGEVALUES_ERLANG;\n\n/**\n * The language of the telemetry SDK.\n *\n * @deprecated Use TELEMETRY_SDK_LANGUAGE_VALUE_GO.\n */\nexport const TELEMETRYSDKLANGUAGEVALUES_GO = TMP_TELEMETRYSDKLANGUAGEVALUES_GO;\n\n/**\n * The language of the telemetry SDK.\n *\n * @deprecated Use TELEMETRY_SDK_LANGUAGE_VALUE_JAVA.\n */\nexport const TELEMETRYSDKLANGUAGEVALUES_JAVA =\n  TMP_TELEMETRYSDKLANGUAGEVALUES_JAVA;\n\n/**\n * The language of the telemetry SDK.\n *\n * @deprecated Use TELEMETRY_SDK_LANGUAGE_VALUE_NODEJS.\n */\nexport const TELEMETRYSDKLANGUAGEVALUES_NODEJS =\n  TMP_TELEMETRYSDKLANGUAGEVALUES_NODEJS;\n\n/**\n * The language of the telemetry SDK.\n *\n * @deprecated Use TELEMETRY_SDK_LANGUAGE_VALUE_PHP.\n */\nexport const TELEMETRYSDKLANGUAGEVALUES_PHP =\n  TMP_TELEMETRYSDKLANGUAGEVALUES_PHP;\n\n/**\n * The language of the telemetry SDK.\n *\n * @deprecated Use TELEMETRY_SDK_LANGUAGE_VALUE_PYTHON.\n */\nexport const TELEMETRYSDKLANGUAGEVALUES_PYTHON =\n  TMP_TELEMETRYSDKLANGUAGEVALUES_PYTHON;\n\n/**\n * The language of the telemetry SDK.\n *\n * @deprecated Use TELEMETRY_SDK_LANGUAGE_VALUE_RUBY.\n */\nexport const TELEMETRYSDKLANGUAGEVALUES_RUBY =\n  TMP_TELEMETRYSDKLANGUAGEVALUES_RUBY;\n\n/**\n * The language of the telemetry SDK.\n *\n * @deprecated Use TELEMETRY_SDK_LANGUAGE_VALUE_WEBJS.\n */\nexport const TELEMETRYSDKLANGUAGEVALUES_WEBJS =\n  TMP_TELEMETRYSDKLANGUAGEVALUES_WEBJS;\n\n/**\n * Identifies the Values for TelemetrySdkLanguageValues enum definition\n *\n * The language of the telemetry SDK.\n * @deprecated Use the TELEMETRYSDKLANGUAGEVALUES_XXXXX constants rather than the TelemetrySdkLanguageValues.XXXXX for bundle minification.\n */\nexport type TelemetrySdkLanguageValues = {\n  /** cpp. */\n  CPP: 'cpp';\n\n  /** dotnet. */\n  DOTNET: 'dotnet';\n\n  /** erlang. */\n  ERLANG: 'erlang';\n\n  /** go. */\n  GO: 'go';\n\n  /** java. */\n  JAVA: 'java';\n\n  /** nodejs. */\n  NODEJS: 'nodejs';\n\n  /** php. */\n  PHP: 'php';\n\n  /** python. */\n  PYTHON: 'python';\n\n  /** ruby. */\n  RUBY: 'ruby';\n\n  /** webjs. */\n  WEBJS: 'webjs';\n};\n\n/**\n * The constant map of values for TelemetrySdkLanguageValues.\n * @deprecated Use the TELEMETRYSDKLANGUAGEVALUES_XXXXX constants rather than the TelemetrySdkLanguageValues.XXXXX for bundle minification.\n */\nexport const TelemetrySdkLanguageValues: TelemetrySdkLanguageValues =\n  /*#__PURE__*/ createConstMap<TelemetrySdkLanguageValues>([\n    TMP_TELEMETRYSDKLANGUAGEVALUES_CPP,\n    TMP_TELEMETRYSDKLANGUAGEVALUES_DOTNET,\n    TMP_TELEMETRYSDKLANGUAGEVALUES_ERLANG,\n    TMP_TELEMETRYSDKLANGUAGEVALUES_GO,\n    TMP_TELEMETRYSDKLANGUAGEVALUES_JAVA,\n    TMP_TELEMETRYSDKLANGUAGEVALUES_NODEJS,\n    TMP_TELEMETRYSDKLANGUAGEVALUES_PHP,\n    TMP_TELEMETRYSDKLANGUAGEVALUES_PYTHON,\n    TMP_TELEMETRYSDKLANGUAGEVALUES_RUBY,\n    TMP_TELEMETRYSDKLANGUAGEVALUES_WEBJS,\n  ]);\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* eslint-disable no-restricted-syntax --\n * These re-exports are only of constants, only one-level deep at this point,\n * and should not cause problems for tree-shakers.\n */\nexport * from './SemanticResourceAttributes';\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n//----------------------------------------------------------------------------------------------------------\n// DO NOT EDIT, this is an Auto-generated file from scripts/semconv/templates/registry/stable/attributes.ts.j2\n//----------------------------------------------------------------------------------------------------------\n\n/**\n * ASP.NET Core exception middleware handling result\n *\n * @example handled\n * @example unhandled\n */\nexport const ATTR_ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT = 'aspnetcore.diagnostics.exception.result' as const;\n\n/**\n * Enum value \"aborted\" for attribute {@link ATTR_ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT}.\n */\nexport const ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT_VALUE_ABORTED = \"aborted\" as const;\n\n/**\n * Enum value \"handled\" for attribute {@link ATTR_ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT}.\n */\nexport const ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT_VALUE_HANDLED = \"handled\" as const;\n\n/**\n * Enum value \"skipped\" for attribute {@link ATTR_ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT}.\n */\nexport const ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT_VALUE_SKIPPED = \"skipped\" as const;\n\n/**\n * Enum value \"unhandled\" for attribute {@link ATTR_ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT}.\n */\nexport const ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT_VALUE_UNHANDLED = \"unhandled\" as const;\n\n/**\n * Full type name of the [`IExceptionHandler`](https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.diagnostics.iexceptionhandler) implementation that handled the exception.\n *\n * @example Contoso.MyHandler\n */\nexport const ATTR_ASPNETCORE_DIAGNOSTICS_HANDLER_TYPE = 'aspnetcore.diagnostics.handler.type' as const;\n\n/**\n * Rate limiting policy name.\n *\n * @example fixed\n * @example sliding\n * @example token\n */\nexport const ATTR_ASPNETCORE_RATE_LIMITING_POLICY = 'aspnetcore.rate_limiting.policy' as const;\n\n/**\n * Rate-limiting result, shows whether the lease was acquired or contains a rejection reason\n *\n * @example acquired\n * @example request_canceled\n */\nexport const ATTR_ASPNETCORE_RATE_LIMITING_RESULT = 'aspnetcore.rate_limiting.result' as const;\n\n/**\n * Enum value \"acquired\" for attribute {@link ATTR_ASPNETCORE_RATE_LIMITING_RESULT}.\n */\nexport const ASPNETCORE_RATE_LIMITING_RESULT_VALUE_ACQUIRED = \"acquired\" as const;\n\n/**\n * Enum value \"endpoint_limiter\" for attribute {@link ATTR_ASPNETCORE_RATE_LIMITING_RESULT}.\n */\nexport const ASPNETCORE_RATE_LIMITING_RESULT_VALUE_ENDPOINT_LIMITER = \"endpoint_limiter\" as const;\n\n/**\n * Enum value \"global_limiter\" for attribute {@link ATTR_ASPNETCORE_RATE_LIMITING_RESULT}.\n */\nexport const ASPNETCORE_RATE_LIMITING_RESULT_VALUE_GLOBAL_LIMITER = \"global_limiter\" as const;\n\n/**\n * Enum value \"request_canceled\" for attribute {@link ATTR_ASPNETCORE_RATE_LIMITING_RESULT}.\n */\nexport const ASPNETCORE_RATE_LIMITING_RESULT_VALUE_REQUEST_CANCELED = \"request_canceled\" as const;\n\n/**\n * Flag indicating if request was handled by the application pipeline.\n *\n * @example true\n */\nexport const ATTR_ASPNETCORE_REQUEST_IS_UNHANDLED = 'aspnetcore.request.is_unhandled' as const;\n\n/**\n * A value that indicates whether the matched route is a fallback route.\n *\n * @example true\n */\nexport const ATTR_ASPNETCORE_ROUTING_IS_FALLBACK = 'aspnetcore.routing.is_fallback' as const;\n\n/**\n * Match result - success or failure\n *\n * @example success\n * @example failure\n */\nexport const ATTR_ASPNETCORE_ROUTING_MATCH_STATUS = 'aspnetcore.routing.match_status' as const;\n\n/**\n * Enum value \"failure\" for attribute {@link ATTR_ASPNETCORE_ROUTING_MATCH_STATUS}.\n */\nexport const ASPNETCORE_ROUTING_MATCH_STATUS_VALUE_FAILURE = \"failure\" as const;\n\n/**\n * Enum value \"success\" for attribute {@link ATTR_ASPNETCORE_ROUTING_MATCH_STATUS}.\n */\nexport const ASPNETCORE_ROUTING_MATCH_STATUS_VALUE_SUCCESS = \"success\" as const;\n\n/**\n * Client address - domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.\n *\n * @example client.example.com\n * @example 10.1.2.80\n * @example /tmp/my.sock\n *\n * @note When observed from the server side, and when communicating through an intermediary, `client.address` **SHOULD** represent the client address behind any intermediaries,  for example proxies, if it's available.\n */\nexport const ATTR_CLIENT_ADDRESS = 'client.address' as const;\n\n/**\n * Client port number.\n *\n * @example 65123\n *\n * @note When observed from the server side, and when communicating through an intermediary, `client.port` **SHOULD** represent the client port behind any intermediaries,  for example proxies, if it's available.\n */\nexport const ATTR_CLIENT_PORT = 'client.port' as const;\n\n/**\n * The column number in `code.file.path` best representing the operation. It **SHOULD** point within the code unit named in `code.function.name`. This attribute **MUST NOT** be used on the Profile signal since the data is already captured in 'message Line'. This constraint is imposed to prevent redundancy and maintain data integrity.\n *\n * @example 16\n */\nexport const ATTR_CODE_COLUMN_NUMBER = 'code.column.number' as const;\n\n/**\n * The source code file name that identifies the code unit as uniquely as possible (preferably an absolute file path). This attribute **MUST NOT** be used on the Profile signal since the data is already captured in 'message Function'. This constraint is imposed to prevent redundancy and maintain data integrity.\n *\n * @example \"/usr/local/MyApplication/content_root/app/index.php\"\n */\nexport const ATTR_CODE_FILE_PATH = 'code.file.path' as const;\n\n/**\n * The method or function fully-qualified name without arguments. The value should fit the natural representation of the language runtime, which is also likely the same used within `code.stacktrace` attribute value. This attribute **MUST NOT** be used on the Profile signal since the data is already captured in 'message Function'. This constraint is imposed to prevent redundancy and maintain data integrity.\n *\n * @example com.example.MyHttpService.serveRequest\n * @example GuzzleHttp\\\\Client::transfer\n * @example fopen\n *\n * @note Values and format depends on each language runtime, thus it is impossible to provide an exhaustive list of examples.\n * The values are usually the same (or prefixes of) the ones found in native stack trace representation stored in\n * `code.stacktrace` without information on arguments.\n *\n * Examples:\n *\n *   - Java method: `com.example.MyHttpService.serveRequest`\n *   - Java anonymous class method: `com.mycompany.Main$1.myMethod`\n *   - Java lambda method: `com.mycompany.Main$$Lambda/0x0000748ae4149c00.myMethod`\n *   - PHP function: `GuzzleHttp\\Client::transfer`\n *   - Go function: `github.com/my/repo/pkg.foo.func5`\n *   - Elixir: `OpenTelemetry.Ctx.new`\n *   - Erlang: `opentelemetry_ctx:new`\n *   - Rust: `playground::my_module::my_cool_func`\n *   - C function: `fopen`\n */\nexport const ATTR_CODE_FUNCTION_NAME = 'code.function.name' as const;\n\n/**\n * The line number in `code.file.path` best representing the operation. It **SHOULD** point within the code unit named in `code.function.name`. This attribute **MUST NOT** be used on the Profile signal since the data is already captured in 'message Line'. This constraint is imposed to prevent redundancy and maintain data integrity.\n *\n * @example 42\n */\nexport const ATTR_CODE_LINE_NUMBER = 'code.line.number' as const;\n\n/**\n * A stacktrace as a string in the natural representation for the language runtime. The representation is identical to [`exception.stacktrace`](/docs/exceptions/exceptions-spans.md#stacktrace-representation). This attribute **MUST NOT** be used on the Profile signal since the data is already captured in 'message Location'. This constraint is imposed to prevent redundancy and maintain data integrity.\n *\n * @example \"at com.example.GenerateTrace.methodB(GenerateTrace.java:13)\\\\n at com.example.GenerateTrace.methodA(GenerateTrace.java:9)\\\\n at com.example.GenerateTrace.main(GenerateTrace.java:5)\\\\n\"\n */\nexport const ATTR_CODE_STACKTRACE = 'code.stacktrace' as const;\n\n/**\n * The name of a collection (table, container) within the database.\n *\n * @example public.users\n * @example customers\n *\n * @note It is **RECOMMENDED** to capture the value as provided by the application\n * without attempting to do any case normalization.\n *\n * The collection name **SHOULD NOT** be extracted from `db.query.text`,\n * when the database system supports query text with multiple collections\n * in non-batch operations.\n *\n * For batch operations, if the individual operations are known to have the same\n * collection name then that collection name **SHOULD** be used.\n */\nexport const ATTR_DB_COLLECTION_NAME = 'db.collection.name' as const;\n\n/**\n * The name of the database, fully qualified within the server address and port.\n *\n * @example customers\n * @example test.users\n *\n * @note If a database system has multiple namespace components, they **SHOULD** be concatenated from the most general to the most specific namespace component, using `|` as a separator between the components. Any missing components (and their associated separators) **SHOULD** be omitted.\n * Semantic conventions for individual database systems **SHOULD** document what `db.namespace` means in the context of that system.\n * It is **RECOMMENDED** to capture the value as provided by the application without attempting to do any case normalization.\n */\nexport const ATTR_DB_NAMESPACE = 'db.namespace' as const;\n\n/**\n * The number of queries included in a batch operation.\n *\n * @example 2\n * @example 3\n * @example 4\n *\n * @note Operations are only considered batches when they contain two or more operations, and so `db.operation.batch.size` **SHOULD** never be `1`.\n */\nexport const ATTR_DB_OPERATION_BATCH_SIZE = 'db.operation.batch.size' as const;\n\n/**\n * The name of the operation or command being executed.\n *\n * @example findAndModify\n * @example HMSET\n * @example SELECT\n *\n * @note It is **RECOMMENDED** to capture the value as provided by the application\n * without attempting to do any case normalization.\n *\n * The operation name **SHOULD NOT** be extracted from `db.query.text`,\n * when the database system supports query text with multiple operations\n * in non-batch operations.\n *\n * If spaces can occur in the operation name, multiple consecutive spaces\n * **SHOULD** be normalized to a single space.\n *\n * For batch operations, if the individual operations are known to have the same operation name\n * then that operation name **SHOULD** be used prepended by `BATCH `,\n * otherwise `db.operation.name` **SHOULD** be `BATCH` or some other database\n * system specific term if more applicable.\n */\nexport const ATTR_DB_OPERATION_NAME = 'db.operation.name' as const;\n\n/**\n * Low cardinality summary of a database query.\n *\n * @example SELECT wuser_table\n * @example INSERT shipping_details SELECT orders\n * @example get user by id\n *\n * @note The query summary describes a class of database queries and is useful\n * as a grouping key, especially when analyzing telemetry for database\n * calls involving complex queries.\n *\n * Summary may be available to the instrumentation through\n * instrumentation hooks or other means. If it is not available, instrumentations\n * that support query parsing **SHOULD** generate a summary following\n * [Generating query summary](/docs/database/database-spans.md#generating-a-summary-of-the-query)\n * section.\n */\nexport const ATTR_DB_QUERY_SUMMARY = 'db.query.summary' as const;\n\n/**\n * The database query being executed.\n *\n * @example SELECT * FROM wuser_table where username = ?\n * @example SET mykey ?\n *\n * @note For sanitization see [Sanitization of `db.query.text`](/docs/database/database-spans.md#sanitization-of-dbquerytext).\n * For batch operations, if the individual operations are known to have the same query text then that query text **SHOULD** be used, otherwise all of the individual query texts **SHOULD** be concatenated with separator `; ` or some other database system specific separator if more applicable.\n * Parameterized query text **SHOULD NOT** be sanitized. Even though parameterized query text can potentially have sensitive data, by using a parameterized query the user is giving a strong signal that any sensitive data will be passed as parameter values, and the benefit to observability of capturing the static part of the query text by default outweighs the risk.\n */\nexport const ATTR_DB_QUERY_TEXT = 'db.query.text' as const;\n\n/**\n * Database response status code.\n *\n * @example 102\n * @example ORA-17002\n * @example 08P01\n * @example 404\n *\n * @note The status code returned by the database. Usually it represents an error code, but may also represent partial success, warning, or differentiate between various types of successful outcomes.\n * Semantic conventions for individual database systems **SHOULD** document what `db.response.status_code` means in the context of that system.\n */\nexport const ATTR_DB_RESPONSE_STATUS_CODE = 'db.response.status_code' as const;\n\n/**\n * The name of a stored procedure within the database.\n *\n * @example GetCustomer\n *\n * @note It is **RECOMMENDED** to capture the value as provided by the application\n * without attempting to do any case normalization.\n *\n * For batch operations, if the individual operations are known to have the same\n * stored procedure name then that stored procedure name **SHOULD** be used.\n */\nexport const ATTR_DB_STORED_PROCEDURE_NAME = 'db.stored_procedure.name' as const;\n\n/**\n * The database management system (DBMS) product as identified by the client instrumentation.\n *\n * @note The actual DBMS may differ from the one identified by the client. For example, when using PostgreSQL client libraries to connect to a CockroachDB, the `db.system.name` is set to `postgresql` based on the instrumentation's best knowledge.\n */\nexport const ATTR_DB_SYSTEM_NAME = 'db.system.name' as const;\n\n/**\n * Enum value \"mariadb\" for attribute {@link ATTR_DB_SYSTEM_NAME}.\n */\nexport const DB_SYSTEM_NAME_VALUE_MARIADB = \"mariadb\" as const;\n\n/**\n * Enum value \"microsoft.sql_server\" for attribute {@link ATTR_DB_SYSTEM_NAME}.\n */\nexport const DB_SYSTEM_NAME_VALUE_MICROSOFT_SQL_SERVER = \"microsoft.sql_server\" as const;\n\n/**\n * Enum value \"mysql\" for attribute {@link ATTR_DB_SYSTEM_NAME}.\n */\nexport const DB_SYSTEM_NAME_VALUE_MYSQL = \"mysql\" as const;\n\n/**\n * Enum value \"postgresql\" for attribute {@link ATTR_DB_SYSTEM_NAME}.\n */\nexport const DB_SYSTEM_NAME_VALUE_POSTGRESQL = \"postgresql\" as const;\n\n/**\n * Name of the garbage collector managed heap generation.\n *\n * @example gen0\n * @example gen1\n * @example gen2\n */\nexport const ATTR_DOTNET_GC_HEAP_GENERATION = 'dotnet.gc.heap.generation' as const;\n\n/**\n * Enum value \"gen0\" for attribute {@link ATTR_DOTNET_GC_HEAP_GENERATION}.\n */\nexport const DOTNET_GC_HEAP_GENERATION_VALUE_GEN0 = \"gen0\" as const;\n\n/**\n * Enum value \"gen1\" for attribute {@link ATTR_DOTNET_GC_HEAP_GENERATION}.\n */\nexport const DOTNET_GC_HEAP_GENERATION_VALUE_GEN1 = \"gen1\" as const;\n\n/**\n * Enum value \"gen2\" for attribute {@link ATTR_DOTNET_GC_HEAP_GENERATION}.\n */\nexport const DOTNET_GC_HEAP_GENERATION_VALUE_GEN2 = \"gen2\" as const;\n\n/**\n * Enum value \"loh\" for attribute {@link ATTR_DOTNET_GC_HEAP_GENERATION}.\n */\nexport const DOTNET_GC_HEAP_GENERATION_VALUE_LOH = \"loh\" as const;\n\n/**\n * Enum value \"poh\" for attribute {@link ATTR_DOTNET_GC_HEAP_GENERATION}.\n */\nexport const DOTNET_GC_HEAP_GENERATION_VALUE_POH = \"poh\" as const;\n\n/**\n * Describes a class of error the operation ended with.\n *\n * @example timeout\n * @example java.net.UnknownHostException\n * @example server_certificate_invalid\n * @example 500\n *\n * @note The `error.type` **SHOULD** be predictable, and **SHOULD** have low cardinality.\n *\n * When `error.type` is set to a type (e.g., an exception type), its\n * canonical class name identifying the type within the artifact **SHOULD** be used.\n *\n * Instrumentations **SHOULD** document the list of errors they report.\n *\n * The cardinality of `error.type` within one instrumentation library **SHOULD** be low.\n * Telemetry consumers that aggregate data from multiple instrumentation libraries and applications\n * should be prepared for `error.type` to have high cardinality at query time when no\n * additional filters are applied.\n *\n * If the operation has completed successfully, instrumentations **SHOULD NOT** set `error.type`.\n *\n * If a specific domain defines its own set of error identifiers (such as HTTP or gRPC status codes),\n * it's **RECOMMENDED** to:\n *\n *   - Use a domain-specific attribute\n *   - Set `error.type` to capture all errors, regardless of whether they are defined within the domain-specific set or not.\n */\nexport const ATTR_ERROR_TYPE = 'error.type' as const;\n\n/**\n * Enum value \"_OTHER\" for attribute {@link ATTR_ERROR_TYPE}.\n */\nexport const ERROR_TYPE_VALUE_OTHER = \"_OTHER\" as const;\n\n/**\n * Indicates that the exception is escaping the scope of the span.\n *\n * @deprecated It's no longer recommended to record exceptions that are handled and do not escape the scope of a span.\n */\nexport const ATTR_EXCEPTION_ESCAPED = 'exception.escaped' as const;\n\n/**\n * The exception message.\n *\n * @example Division by zero\n * @example Can't convert 'int' object to str implicitly\n */\nexport const ATTR_EXCEPTION_MESSAGE = 'exception.message' as const;\n\n/**\n * A stacktrace as a string in the natural representation for the language runtime. The representation is to be determined and documented by each language SIG.\n *\n * @example \"Exception in thread \"main\" java.lang.RuntimeException: Test exception\\\\n at com.example.GenerateTrace.methodB(GenerateTrace.java:13)\\\\n at com.example.GenerateTrace.methodA(GenerateTrace.java:9)\\\\n at com.example.GenerateTrace.main(GenerateTrace.java:5)\\\\n\"\n */\nexport const ATTR_EXCEPTION_STACKTRACE = 'exception.stacktrace' as const;\n\n/**\n * The type of the exception (its fully-qualified class name, if applicable). The dynamic type of the exception should be preferred over the static type in languages that support it.\n *\n * @example java.net.ConnectException\n * @example OSError\n */\nexport const ATTR_EXCEPTION_TYPE = 'exception.type' as const;\n\n/**\n * HTTP request headers, `<key>` being the normalized HTTP Header name (lowercase), the value being the header values.\n *\n * @example [\"application/json\"]\n * @example [\"1.2.3.4\", \"1.2.3.5\"]\n *\n * @note Instrumentations **SHOULD** require an explicit configuration of which headers are to be captured.\n * Including all request headers can be a security risk - explicit configuration helps avoid leaking sensitive information.\n *\n * The `User-Agent` header is already captured in the `user_agent.original` attribute.\n * Users **MAY** explicitly configure instrumentations to capture them even though it is not recommended.\n *\n * The attribute value **MUST** consist of either multiple header values as an array of strings\n * or a single-item array containing a possibly comma-concatenated string, depending on the way\n * the HTTP library provides access to headers.\n *\n * Examples:\n *\n *   - A header `Content-Type: application/json` **SHOULD** be recorded as the `http.request.header.content-type`\n *     attribute with value `[\"application/json\"]`.\n *   - A header `X-Forwarded-For: 1.2.3.4, 1.2.3.5` **SHOULD** be recorded as the `http.request.header.x-forwarded-for`\n *     attribute with value `[\"1.2.3.4\", \"1.2.3.5\"]` or `[\"1.2.3.4, 1.2.3.5\"]` depending on the HTTP library.\n */\nexport const ATTR_HTTP_REQUEST_HEADER = (key: string) => `http.request.header.${key}`;\n\n/**\n * HTTP request method.\n *\n * @example GET\n * @example POST\n * @example HEAD\n *\n * @note HTTP request method value **SHOULD** be \"known\" to the instrumentation.\n * By default, this convention defines \"known\" methods as the ones listed in [RFC9110](https://www.rfc-editor.org/rfc/rfc9110.html#name-methods)\n * and the PATCH method defined in [RFC5789](https://www.rfc-editor.org/rfc/rfc5789.html).\n *\n * If the HTTP request method is not known to instrumentation, it **MUST** set the `http.request.method` attribute to `_OTHER`.\n *\n * If the HTTP instrumentation could end up converting valid HTTP request methods to `_OTHER`, then it **MUST** provide a way to override\n * the list of known HTTP methods. If this override is done via environment variable, then the environment variable **MUST** be named\n * OTEL_INSTRUMENTATION_HTTP_KNOWN_METHODS and support a comma-separated list of case-sensitive known HTTP methods\n * (this list **MUST** be a full override of the default known method, it is not a list of known methods in addition to the defaults).\n *\n * HTTP method names are case-sensitive and `http.request.method` attribute value **MUST** match a known HTTP method name exactly.\n * Instrumentations for specific web frameworks that consider HTTP methods to be case insensitive, **SHOULD** populate a canonical equivalent.\n * Tracing instrumentations that do so, **MUST** also set `http.request.method_original` to the original value.\n */\nexport const ATTR_HTTP_REQUEST_METHOD = 'http.request.method' as const;\n\n/**\n * Enum value \"_OTHER\" for attribute {@link ATTR_HTTP_REQUEST_METHOD}.\n */\nexport const HTTP_REQUEST_METHOD_VALUE_OTHER = \"_OTHER\" as const;\n\n/**\n * Enum value \"CONNECT\" for attribute {@link ATTR_HTTP_REQUEST_METHOD}.\n */\nexport const HTTP_REQUEST_METHOD_VALUE_CONNECT = \"CONNECT\" as const;\n\n/**\n * Enum value \"DELETE\" for attribute {@link ATTR_HTTP_REQUEST_METHOD}.\n */\nexport const HTTP_REQUEST_METHOD_VALUE_DELETE = \"DELETE\" as const;\n\n/**\n * Enum value \"GET\" for attribute {@link ATTR_HTTP_REQUEST_METHOD}.\n */\nexport const HTTP_REQUEST_METHOD_VALUE_GET = \"GET\" as const;\n\n/**\n * Enum value \"HEAD\" for attribute {@link ATTR_HTTP_REQUEST_METHOD}.\n */\nexport const HTTP_REQUEST_METHOD_VALUE_HEAD = \"HEAD\" as const;\n\n/**\n * Enum value \"OPTIONS\" for attribute {@link ATTR_HTTP_REQUEST_METHOD}.\n */\nexport const HTTP_REQUEST_METHOD_VALUE_OPTIONS = \"OPTIONS\" as const;\n\n/**\n * Enum value \"PATCH\" for attribute {@link ATTR_HTTP_REQUEST_METHOD}.\n */\nexport const HTTP_REQUEST_METHOD_VALUE_PATCH = \"PATCH\" as const;\n\n/**\n * Enum value \"POST\" for attribute {@link ATTR_HTTP_REQUEST_METHOD}.\n */\nexport const HTTP_REQUEST_METHOD_VALUE_POST = \"POST\" as const;\n\n/**\n * Enum value \"PUT\" for attribute {@link ATTR_HTTP_REQUEST_METHOD}.\n */\nexport const HTTP_REQUEST_METHOD_VALUE_PUT = \"PUT\" as const;\n\n/**\n * Enum value \"TRACE\" for attribute {@link ATTR_HTTP_REQUEST_METHOD}.\n */\nexport const HTTP_REQUEST_METHOD_VALUE_TRACE = \"TRACE\" as const;\n\n/**\n * Original HTTP method sent by the client in the request line.\n *\n * @example GeT\n * @example ACL\n * @example foo\n */\nexport const ATTR_HTTP_REQUEST_METHOD_ORIGINAL = 'http.request.method_original' as const;\n\n/**\n * The ordinal number of request resending attempt (for any reason, including redirects).\n *\n * @example 3\n *\n * @note The resend count **SHOULD** be updated each time an HTTP request gets resent by the client, regardless of what was the cause of the resending (e.g. redirection, authorization failure, 503 Server Unavailable, network issues, or any other).\n */\nexport const ATTR_HTTP_REQUEST_RESEND_COUNT = 'http.request.resend_count' as const;\n\n/**\n * HTTP response headers, `<key>` being the normalized HTTP Header name (lowercase), the value being the header values.\n *\n * @example [\"application/json\"]\n * @example [\"abc\", \"def\"]\n *\n * @note Instrumentations **SHOULD** require an explicit configuration of which headers are to be captured.\n * Including all response headers can be a security risk - explicit configuration helps avoid leaking sensitive information.\n *\n * Users **MAY** explicitly configure instrumentations to capture them even though it is not recommended.\n *\n * The attribute value **MUST** consist of either multiple header values as an array of strings\n * or a single-item array containing a possibly comma-concatenated string, depending on the way\n * the HTTP library provides access to headers.\n *\n * Examples:\n *\n *   - A header `Content-Type: application/json` header **SHOULD** be recorded as the `http.request.response.content-type`\n *     attribute with value `[\"application/json\"]`.\n *   - A header `My-custom-header: abc, def` header **SHOULD** be recorded as the `http.response.header.my-custom-header`\n *     attribute with value `[\"abc\", \"def\"]` or `[\"abc, def\"]` depending on the HTTP library.\n */\nexport const ATTR_HTTP_RESPONSE_HEADER = (key: string) => `http.response.header.${key}`;\n\n/**\n * [HTTP response status code](https://tools.ietf.org/html/rfc7231#section-6).\n *\n * @example 200\n */\nexport const ATTR_HTTP_RESPONSE_STATUS_CODE = 'http.response.status_code' as const;\n\n/**\n * The matched route, that is, the path template in the format used by the respective server framework.\n *\n * @example /users/:userID?\n * @example {controller}/{action}/{id?}\n *\n * @note **MUST NOT** be populated when this is not supported by the HTTP server framework as the route attribute should have low-cardinality and the URI path can NOT substitute it.\n * **SHOULD** include the [application root](/docs/http/http-spans.md#http-server-definitions) if there is one.\n */\nexport const ATTR_HTTP_ROUTE = 'http.route' as const;\n\n/**\n * Name of the garbage collector action.\n *\n * @example end of minor GC\n * @example end of major GC\n *\n * @note Garbage collector action is generally obtained via [GarbageCollectionNotificationInfo#getGcAction()](https://docs.oracle.com/en/java/javase/11/docs/api/jdk.management/com/sun/management/GarbageCollectionNotificationInfo.html#getGcAction()).\n */\nexport const ATTR_JVM_GC_ACTION = 'jvm.gc.action' as const;\n\n/**\n * Name of the garbage collector.\n *\n * @example G1 Young Generation\n * @example G1 Old Generation\n *\n * @note Garbage collector name is generally obtained via [GarbageCollectionNotificationInfo#getGcName()](https://docs.oracle.com/en/java/javase/11/docs/api/jdk.management/com/sun/management/GarbageCollectionNotificationInfo.html#getGcName()).\n */\nexport const ATTR_JVM_GC_NAME = 'jvm.gc.name' as const;\n\n/**\n * Name of the memory pool.\n *\n * @example G1 Old Gen\n * @example G1 Eden space\n * @example G1 Survivor Space\n *\n * @note Pool names are generally obtained via [MemoryPoolMXBean#getName()](https://docs.oracle.com/en/java/javase/11/docs/api/java.management/java/lang/management/MemoryPoolMXBean.html#getName()).\n */\nexport const ATTR_JVM_MEMORY_POOL_NAME = 'jvm.memory.pool.name' as const;\n\n/**\n * The type of memory.\n *\n * @example heap\n * @example non_heap\n */\nexport const ATTR_JVM_MEMORY_TYPE = 'jvm.memory.type' as const;\n\n/**\n * Enum value \"heap\" for attribute {@link ATTR_JVM_MEMORY_TYPE}.\n */\nexport const JVM_MEMORY_TYPE_VALUE_HEAP = \"heap\" as const;\n\n/**\n * Enum value \"non_heap\" for attribute {@link ATTR_JVM_MEMORY_TYPE}.\n */\nexport const JVM_MEMORY_TYPE_VALUE_NON_HEAP = \"non_heap\" as const;\n\n/**\n * Whether the thread is daemon or not.\n */\nexport const ATTR_JVM_THREAD_DAEMON = 'jvm.thread.daemon' as const;\n\n/**\n * State of the thread.\n *\n * @example runnable\n * @example blocked\n */\nexport const ATTR_JVM_THREAD_STATE = 'jvm.thread.state' as const;\n\n/**\n * Enum value \"blocked\" for attribute {@link ATTR_JVM_THREAD_STATE}.\n */\nexport const JVM_THREAD_STATE_VALUE_BLOCKED = \"blocked\" as const;\n\n/**\n * Enum value \"new\" for attribute {@link ATTR_JVM_THREAD_STATE}.\n */\nexport const JVM_THREAD_STATE_VALUE_NEW = \"new\" as const;\n\n/**\n * Enum value \"runnable\" for attribute {@link ATTR_JVM_THREAD_STATE}.\n */\nexport const JVM_THREAD_STATE_VALUE_RUNNABLE = \"runnable\" as const;\n\n/**\n * Enum value \"terminated\" for attribute {@link ATTR_JVM_THREAD_STATE}.\n */\nexport const JVM_THREAD_STATE_VALUE_TERMINATED = \"terminated\" as const;\n\n/**\n * Enum value \"timed_waiting\" for attribute {@link ATTR_JVM_THREAD_STATE}.\n */\nexport const JVM_THREAD_STATE_VALUE_TIMED_WAITING = \"timed_waiting\" as const;\n\n/**\n * Enum value \"waiting\" for attribute {@link ATTR_JVM_THREAD_STATE}.\n */\nexport const JVM_THREAD_STATE_VALUE_WAITING = \"waiting\" as const;\n\n/**\n * Local address of the network connection - IP address or Unix domain socket name.\n *\n * @example 10.1.2.80\n * @example /tmp/my.sock\n */\nexport const ATTR_NETWORK_LOCAL_ADDRESS = 'network.local.address' as const;\n\n/**\n * Local port number of the network connection.\n *\n * @example 65123\n */\nexport const ATTR_NETWORK_LOCAL_PORT = 'network.local.port' as const;\n\n/**\n * Peer address of the network connection - IP address or Unix domain socket name.\n *\n * @example 10.1.2.80\n * @example /tmp/my.sock\n */\nexport const ATTR_NETWORK_PEER_ADDRESS = 'network.peer.address' as const;\n\n/**\n * Peer port number of the network connection.\n *\n * @example 65123\n */\nexport const ATTR_NETWORK_PEER_PORT = 'network.peer.port' as const;\n\n/**\n * [OSI application layer](https://wikipedia.org/wiki/Application_layer) or non-OSI equivalent.\n *\n * @example amqp\n * @example http\n * @example mqtt\n *\n * @note The value **SHOULD** be normalized to lowercase.\n */\nexport const ATTR_NETWORK_PROTOCOL_NAME = 'network.protocol.name' as const;\n\n/**\n * The actual version of the protocol used for network communication.\n *\n * @example 1.1\n * @example 2\n *\n * @note If protocol version is subject to negotiation (for example using [ALPN](https://www.rfc-editor.org/rfc/rfc7301.html)), this attribute **SHOULD** be set to the negotiated version. If the actual protocol version is not known, this attribute **SHOULD NOT** be set.\n */\nexport const ATTR_NETWORK_PROTOCOL_VERSION = 'network.protocol.version' as const;\n\n/**\n * [OSI transport layer](https://wikipedia.org/wiki/Transport_layer) or [inter-process communication method](https://wikipedia.org/wiki/Inter-process_communication).\n *\n * @example tcp\n * @example udp\n *\n * @note The value **SHOULD** be normalized to lowercase.\n *\n * Consider always setting the transport when setting a port number, since\n * a port number is ambiguous without knowing the transport. For example\n * different processes could be listening on TCP port 12345 and UDP port 12345.\n */\nexport const ATTR_NETWORK_TRANSPORT = 'network.transport' as const;\n\n/**\n * Enum value \"pipe\" for attribute {@link ATTR_NETWORK_TRANSPORT}.\n */\nexport const NETWORK_TRANSPORT_VALUE_PIPE = \"pipe\" as const;\n\n/**\n * Enum value \"quic\" for attribute {@link ATTR_NETWORK_TRANSPORT}.\n */\nexport const NETWORK_TRANSPORT_VALUE_QUIC = \"quic\" as const;\n\n/**\n * Enum value \"tcp\" for attribute {@link ATTR_NETWORK_TRANSPORT}.\n */\nexport const NETWORK_TRANSPORT_VALUE_TCP = \"tcp\" as const;\n\n/**\n * Enum value \"udp\" for attribute {@link ATTR_NETWORK_TRANSPORT}.\n */\nexport const NETWORK_TRANSPORT_VALUE_UDP = \"udp\" as const;\n\n/**\n * Enum value \"unix\" for attribute {@link ATTR_NETWORK_TRANSPORT}.\n */\nexport const NETWORK_TRANSPORT_VALUE_UNIX = \"unix\" as const;\n\n/**\n * [OSI network layer](https://wikipedia.org/wiki/Network_layer) or non-OSI equivalent.\n *\n * @example ipv4\n * @example ipv6\n *\n * @note The value **SHOULD** be normalized to lowercase.\n */\nexport const ATTR_NETWORK_TYPE = 'network.type' as const;\n\n/**\n * Enum value \"ipv4\" for attribute {@link ATTR_NETWORK_TYPE}.\n */\nexport const NETWORK_TYPE_VALUE_IPV4 = \"ipv4\" as const;\n\n/**\n * Enum value \"ipv6\" for attribute {@link ATTR_NETWORK_TYPE}.\n */\nexport const NETWORK_TYPE_VALUE_IPV6 = \"ipv6\" as const;\n\n/**\n * The name of the instrumentation scope - (`InstrumentationScope.Name` in OTLP).\n *\n * @example io.opentelemetry.contrib.mongodb\n */\nexport const ATTR_OTEL_SCOPE_NAME = 'otel.scope.name' as const;\n\n/**\n * The version of the instrumentation scope - (`InstrumentationScope.Version` in OTLP).\n *\n * @example 1.0.0\n */\nexport const ATTR_OTEL_SCOPE_VERSION = 'otel.scope.version' as const;\n\n/**\n * Name of the code, either \"OK\" or \"ERROR\". **MUST NOT** be set if the status code is UNSET.\n */\nexport const ATTR_OTEL_STATUS_CODE = 'otel.status_code' as const;\n\n/**\n * Enum value \"ERROR\" for attribute {@link ATTR_OTEL_STATUS_CODE}.\n */\nexport const OTEL_STATUS_CODE_VALUE_ERROR = \"ERROR\" as const;\n\n/**\n * Enum value \"OK\" for attribute {@link ATTR_OTEL_STATUS_CODE}.\n */\nexport const OTEL_STATUS_CODE_VALUE_OK = \"OK\" as const;\n\n/**\n * Description of the Status if it has a value, otherwise not set.\n *\n * @example resource not found\n */\nexport const ATTR_OTEL_STATUS_DESCRIPTION = 'otel.status_description' as const;\n\n/**\n * Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.\n *\n * @example example.com\n * @example 10.1.2.80\n * @example /tmp/my.sock\n *\n * @note When observed from the client side, and when communicating through an intermediary, `server.address` **SHOULD** represent the server address behind any intermediaries, for example proxies, if it's available.\n */\nexport const ATTR_SERVER_ADDRESS = 'server.address' as const;\n\n/**\n * Server port number.\n *\n * @example 80\n * @example 8080\n * @example 443\n *\n * @note When observed from the client side, and when communicating through an intermediary, `server.port` **SHOULD** represent the server port behind any intermediaries, for example proxies, if it's available.\n */\nexport const ATTR_SERVER_PORT = 'server.port' as const;\n\n/**\n * Logical name of the service.\n *\n * @example shoppingcart\n *\n * @note **MUST** be the same for all instances of horizontally scaled services. If the value was not specified, SDKs **MUST** fallback to `unknown_service:` concatenated with [`process.executable.name`](process.md), e.g. `unknown_service:bash`. If `process.executable.name` is not available, the value **MUST** be set to `unknown_service`.\n */\nexport const ATTR_SERVICE_NAME = 'service.name' as const;\n\n/**\n * The version string of the service API or implementation. The format is not defined by these conventions.\n *\n * @example 2.0.0\n * @example a01dbef8a\n */\nexport const ATTR_SERVICE_VERSION = 'service.version' as const;\n\n/**\n * SignalR HTTP connection closure status.\n *\n * @example app_shutdown\n * @example timeout\n */\nexport const ATTR_SIGNALR_CONNECTION_STATUS = 'signalr.connection.status' as const;\n\n/**\n * Enum value \"app_shutdown\" for attribute {@link ATTR_SIGNALR_CONNECTION_STATUS}.\n */\nexport const SIGNALR_CONNECTION_STATUS_VALUE_APP_SHUTDOWN = \"app_shutdown\" as const;\n\n/**\n * Enum value \"normal_closure\" for attribute {@link ATTR_SIGNALR_CONNECTION_STATUS}.\n */\nexport const SIGNALR_CONNECTION_STATUS_VALUE_NORMAL_CLOSURE = \"normal_closure\" as const;\n\n/**\n * Enum value \"timeout\" for attribute {@link ATTR_SIGNALR_CONNECTION_STATUS}.\n */\nexport const SIGNALR_CONNECTION_STATUS_VALUE_TIMEOUT = \"timeout\" as const;\n\n/**\n * [SignalR transport type](https://github.com/dotnet/aspnetcore/blob/main/src/SignalR/docs/specs/TransportProtocols.md)\n *\n * @example web_sockets\n * @example long_polling\n */\nexport const ATTR_SIGNALR_TRANSPORT = 'signalr.transport' as const;\n\n/**\n * Enum value \"long_polling\" for attribute {@link ATTR_SIGNALR_TRANSPORT}.\n */\nexport const SIGNALR_TRANSPORT_VALUE_LONG_POLLING = \"long_polling\" as const;\n\n/**\n * Enum value \"server_sent_events\" for attribute {@link ATTR_SIGNALR_TRANSPORT}.\n */\nexport const SIGNALR_TRANSPORT_VALUE_SERVER_SENT_EVENTS = \"server_sent_events\" as const;\n\n/**\n * Enum value \"web_sockets\" for attribute {@link ATTR_SIGNALR_TRANSPORT}.\n */\nexport const SIGNALR_TRANSPORT_VALUE_WEB_SOCKETS = \"web_sockets\" as const;\n\n/**\n * The language of the telemetry SDK.\n */\nexport const ATTR_TELEMETRY_SDK_LANGUAGE = 'telemetry.sdk.language' as const;\n\n/**\n * Enum value \"cpp\" for attribute {@link ATTR_TELEMETRY_SDK_LANGUAGE}.\n */\nexport const TELEMETRY_SDK_LANGUAGE_VALUE_CPP = \"cpp\" as const;\n\n/**\n * Enum value \"dotnet\" for attribute {@link ATTR_TELEMETRY_SDK_LANGUAGE}.\n */\nexport const TELEMETRY_SDK_LANGUAGE_VALUE_DOTNET = \"dotnet\" as const;\n\n/**\n * Enum value \"erlang\" for attribute {@link ATTR_TELEMETRY_SDK_LANGUAGE}.\n */\nexport const TELEMETRY_SDK_LANGUAGE_VALUE_ERLANG = \"erlang\" as const;\n\n/**\n * Enum value \"go\" for attribute {@link ATTR_TELEMETRY_SDK_LANGUAGE}.\n */\nexport const TELEMETRY_SDK_LANGUAGE_VALUE_GO = \"go\" as const;\n\n/**\n * Enum value \"java\" for attribute {@link ATTR_TELEMETRY_SDK_LANGUAGE}.\n */\nexport const TELEMETRY_SDK_LANGUAGE_VALUE_JAVA = \"java\" as const;\n\n/**\n * Enum value \"nodejs\" for attribute {@link ATTR_TELEMETRY_SDK_LANGUAGE}.\n */\nexport const TELEMETRY_SDK_LANGUAGE_VALUE_NODEJS = \"nodejs\" as const;\n\n/**\n * Enum value \"php\" for attribute {@link ATTR_TELEMETRY_SDK_LANGUAGE}.\n */\nexport const TELEMETRY_SDK_LANGUAGE_VALUE_PHP = \"php\" as const;\n\n/**\n * Enum value \"python\" for attribute {@link ATTR_TELEMETRY_SDK_LANGUAGE}.\n */\nexport const TELEMETRY_SDK_LANGUAGE_VALUE_PYTHON = \"python\" as const;\n\n/**\n * Enum value \"ruby\" for attribute {@link ATTR_TELEMETRY_SDK_LANGUAGE}.\n */\nexport const TELEMETRY_SDK_LANGUAGE_VALUE_RUBY = \"ruby\" as const;\n\n/**\n * Enum value \"rust\" for attribute {@link ATTR_TELEMETRY_SDK_LANGUAGE}.\n */\nexport const TELEMETRY_SDK_LANGUAGE_VALUE_RUST = \"rust\" as const;\n\n/**\n * Enum value \"swift\" for attribute {@link ATTR_TELEMETRY_SDK_LANGUAGE}.\n */\nexport const TELEMETRY_SDK_LANGUAGE_VALUE_SWIFT = \"swift\" as const;\n\n/**\n * Enum value \"webjs\" for attribute {@link ATTR_TELEMETRY_SDK_LANGUAGE}.\n */\nexport const TELEMETRY_SDK_LANGUAGE_VALUE_WEBJS = \"webjs\" as const;\n\n/**\n * The name of the telemetry SDK as defined above.\n *\n * @example opentelemetry\n *\n * @note The OpenTelemetry SDK **MUST** set the `telemetry.sdk.name` attribute to `opentelemetry`.\n * If another SDK, like a fork or a vendor-provided implementation, is used, this SDK **MUST** set the\n * `telemetry.sdk.name` attribute to the fully-qualified class or module name of this SDK's main entry point\n * or another suitable identifier depending on the language.\n * The identifier `opentelemetry` is reserved and **MUST NOT** be used in this case.\n * All custom identifiers **SHOULD** be stable across different versions of an implementation.\n */\nexport const ATTR_TELEMETRY_SDK_NAME = 'telemetry.sdk.name' as const;\n\n/**\n * The version string of the telemetry SDK.\n *\n * @example 1.2.3\n */\nexport const ATTR_TELEMETRY_SDK_VERSION = 'telemetry.sdk.version' as const;\n\n/**\n * The [URI fragment](https://www.rfc-editor.org/rfc/rfc3986#section-3.5) component\n *\n * @example SemConv\n */\nexport const ATTR_URL_FRAGMENT = 'url.fragment' as const;\n\n/**\n * Absolute URL describing a network resource according to [RFC3986](https://www.rfc-editor.org/rfc/rfc3986)\n *\n * @example https://www.foo.bar/search?q=OpenTelemetry#SemConv\n * @example //localhost\n *\n * @note For network calls, URL usually has `scheme://host[:port][path][?query][#fragment]` format, where the fragment\n * is not transmitted over HTTP, but if it is known, it **SHOULD** be included nevertheless.\n *\n * `url.full` **MUST NOT** contain credentials passed via URL in form of `https://username:password@www.example.com/`.\n * In such case username and password **SHOULD** be redacted and attribute's value **SHOULD** be `https://REDACTED:REDACTED@www.example.com/`.\n *\n * `url.full` **SHOULD** capture the absolute URL when it is available (or can be reconstructed).\n *\n * Sensitive content provided in `url.full` **SHOULD** be scrubbed when instrumentations can identify it.\n *\n *\n * Query string values for the following keys **SHOULD** be redacted by default and replaced by the\n * value `REDACTED`:\n *\n *   - [`AWSAccessKeyId`](https://docs.aws.amazon.com/AmazonS3/latest/userguide/RESTAuthentication.html#RESTAuthenticationQueryStringAuth)\n *   - [`Signature`](https://docs.aws.amazon.com/AmazonS3/latest/userguide/RESTAuthentication.html#RESTAuthenticationQueryStringAuth)\n *   - [`sig`](https://learn.microsoft.com/azure/storage/common/storage-sas-overview#sas-token)\n *   - [`X-Goog-Signature`](https://cloud.google.com/storage/docs/access-control/signed-urls)\n *\n * This list is subject to change over time.\n *\n * When a query string value is redacted, the query string key **SHOULD** still be preserved, e.g.\n * `https://www.example.com/path?color=blue&sig=REDACTED`.\n */\nexport const ATTR_URL_FULL = 'url.full' as const;\n\n/**\n * The [URI path](https://www.rfc-editor.org/rfc/rfc3986#section-3.3) component\n *\n * @example /search\n *\n * @note Sensitive content provided in `url.path` **SHOULD** be scrubbed when instrumentations can identify it.\n */\nexport const ATTR_URL_PATH = 'url.path' as const;\n\n/**\n * The [URI query](https://www.rfc-editor.org/rfc/rfc3986#section-3.4) component\n *\n * @example q=OpenTelemetry\n *\n * @note Sensitive content provided in `url.query` **SHOULD** be scrubbed when instrumentations can identify it.\n *\n *\n * Query string values for the following keys **SHOULD** be redacted by default and replaced by the value `REDACTED`:\n *\n *   - [`AWSAccessKeyId`](https://docs.aws.amazon.com/AmazonS3/latest/userguide/RESTAuthentication.html#RESTAuthenticationQueryStringAuth)\n *   - [`Signature`](https://docs.aws.amazon.com/AmazonS3/latest/userguide/RESTAuthentication.html#RESTAuthenticationQueryStringAuth)\n *   - [`sig`](https://learn.microsoft.com/azure/storage/common/storage-sas-overview#sas-token)\n *   - [`X-Goog-Signature`](https://cloud.google.com/storage/docs/access-control/signed-urls)\n *\n * This list is subject to change over time.\n *\n * When a query string value is redacted, the query string key **SHOULD** still be preserved, e.g.\n * `q=OpenTelemetry&sig=REDACTED`.\n */\nexport const ATTR_URL_QUERY = 'url.query' as const;\n\n/**\n * The [URI scheme](https://www.rfc-editor.org/rfc/rfc3986#section-3.1) component identifying the used protocol.\n *\n * @example https\n * @example ftp\n * @example telnet\n */\nexport const ATTR_URL_SCHEME = 'url.scheme' as const;\n\n/**\n * Value of the [HTTP User-Agent](https://www.rfc-editor.org/rfc/rfc9110.html#field.user-agent) header sent by the client.\n *\n * @example CERN-LineMode/2.15 libwww/2.17b3\n * @example Mozilla/5.0 (iPhone; CPU iPhone OS 14_7_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.1.2 Mobile/15E148 Safari/604.1\n * @example YourApp/1.0.0 grpc-java-okhttp/1.27.2\n */\nexport const ATTR_USER_AGENT_ORIGINAL = 'user_agent.original' as const;\n\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n//----------------------------------------------------------------------------------------------------------\n// DO NOT EDIT, this is an Auto-generated file from scripts/semconv/templates/register/stable/metrics.ts.j2\n//----------------------------------------------------------------------------------------------------------\n\n/**\n * Number of exceptions caught by exception handling middleware.\n *\n * @note Meter name: `Microsoft.AspNetCore.Diagnostics`; Added in: ASP.NET Core 8.0\n */\nexport const METRIC_ASPNETCORE_DIAGNOSTICS_EXCEPTIONS = 'aspnetcore.diagnostics.exceptions' as const;\n\n/**\n * Number of requests that are currently active on the server that hold a rate limiting lease.\n *\n * @note Meter name: `Microsoft.AspNetCore.RateLimiting`; Added in: ASP.NET Core 8.0\n */\nexport const METRIC_ASPNETCORE_RATE_LIMITING_ACTIVE_REQUEST_LEASES = 'aspnetcore.rate_limiting.active_request_leases' as const;\n\n/**\n * Number of requests that are currently queued, waiting to acquire a rate limiting lease.\n *\n * @note Meter name: `Microsoft.AspNetCore.RateLimiting`; Added in: ASP.NET Core 8.0\n */\nexport const METRIC_ASPNETCORE_RATE_LIMITING_QUEUED_REQUESTS = 'aspnetcore.rate_limiting.queued_requests' as const;\n\n/**\n * The time the request spent in a queue waiting to acquire a rate limiting lease.\n *\n * @note Meter name: `Microsoft.AspNetCore.RateLimiting`; Added in: ASP.NET Core 8.0\n */\nexport const METRIC_ASPNETCORE_RATE_LIMITING_REQUEST_TIME_IN_QUEUE = 'aspnetcore.rate_limiting.request.time_in_queue' as const;\n\n/**\n * The duration of rate limiting lease held by requests on the server.\n *\n * @note Meter name: `Microsoft.AspNetCore.RateLimiting`; Added in: ASP.NET Core 8.0\n */\nexport const METRIC_ASPNETCORE_RATE_LIMITING_REQUEST_LEASE_DURATION = 'aspnetcore.rate_limiting.request_lease.duration' as const;\n\n/**\n * Number of requests that tried to acquire a rate limiting lease.\n *\n * @note Requests could be:\n *\n *   - Rejected by global or endpoint rate limiting policies\n *   - Canceled while waiting for the lease.\n *\n * Meter name: `Microsoft.AspNetCore.RateLimiting`; Added in: ASP.NET Core 8.0\n */\nexport const METRIC_ASPNETCORE_RATE_LIMITING_REQUESTS = 'aspnetcore.rate_limiting.requests' as const;\n\n/**\n * Number of requests that were attempted to be matched to an endpoint.\n *\n * @note Meter name: `Microsoft.AspNetCore.Routing`; Added in: ASP.NET Core 8.0\n */\nexport const METRIC_ASPNETCORE_ROUTING_MATCH_ATTEMPTS = 'aspnetcore.routing.match_attempts' as const;\n\n/**\n * Duration of database client operations.\n *\n * @note Batch operations **SHOULD** be recorded as a single operation.\n */\nexport const METRIC_DB_CLIENT_OPERATION_DURATION = 'db.client.operation.duration' as const;\n\n/**\n * The number of .NET assemblies that are currently loaded.\n *\n * @note Meter name: `System.Runtime`; Added in: .NET 9.0.\n * This metric reports the same values as calling [`AppDomain.CurrentDomain.GetAssemblies().Length`](https://learn.microsoft.com/dotnet/api/system.appdomain.getassemblies).\n */\nexport const METRIC_DOTNET_ASSEMBLY_COUNT = 'dotnet.assembly.count' as const;\n\n/**\n * The number of exceptions that have been thrown in managed code.\n *\n * @note Meter name: `System.Runtime`; Added in: .NET 9.0.\n * This metric reports the same values as counting calls to [`AppDomain.CurrentDomain.FirstChanceException`](https://learn.microsoft.com/dotnet/api/system.appdomain.firstchanceexception).\n */\nexport const METRIC_DOTNET_EXCEPTIONS = 'dotnet.exceptions' as const;\n\n/**\n * The number of garbage collections that have occurred since the process has started.\n *\n * @note Meter name: `System.Runtime`; Added in: .NET 9.0.\n * This metric uses the [`GC.CollectionCount(int generation)`](https://learn.microsoft.com/dotnet/api/system.gc.collectioncount) API to calculate exclusive collections per generation.\n */\nexport const METRIC_DOTNET_GC_COLLECTIONS = 'dotnet.gc.collections' as const;\n\n/**\n * The *approximate* number of bytes allocated on the managed GC heap since the process has started. The returned value does not include any native allocations.\n *\n * @note Meter name: `System.Runtime`; Added in: .NET 9.0.\n * This metric reports the same values as calling [`GC.GetTotalAllocatedBytes()`](https://learn.microsoft.com/dotnet/api/system.gc.gettotalallocatedbytes).\n */\nexport const METRIC_DOTNET_GC_HEAP_TOTAL_ALLOCATED = 'dotnet.gc.heap.total_allocated' as const;\n\n/**\n * The heap fragmentation, as observed during the latest garbage collection.\n *\n * @note Meter name: `System.Runtime`; Added in: .NET 9.0.\n * This metric reports the same values as calling [`GC.GetGCMemoryInfo().GenerationInfo.FragmentationAfterBytes`](https://learn.microsoft.com/dotnet/api/system.gcgenerationinfo.fragmentationafterbytes).\n */\nexport const METRIC_DOTNET_GC_LAST_COLLECTION_HEAP_FRAGMENTATION_SIZE = 'dotnet.gc.last_collection.heap.fragmentation.size' as const;\n\n/**\n * The managed GC heap size (including fragmentation), as observed during the latest garbage collection.\n *\n * @note Meter name: `System.Runtime`; Added in: .NET 9.0.\n * This metric reports the same values as calling [`GC.GetGCMemoryInfo().GenerationInfo.SizeAfterBytes`](https://learn.microsoft.com/dotnet/api/system.gcgenerationinfo.sizeafterbytes).\n */\nexport const METRIC_DOTNET_GC_LAST_COLLECTION_HEAP_SIZE = 'dotnet.gc.last_collection.heap.size' as const;\n\n/**\n * The amount of committed virtual memory in use by the .NET GC, as observed during the latest garbage collection.\n *\n * @note Meter name: `System.Runtime`; Added in: .NET 9.0.\n * This metric reports the same values as calling [`GC.GetGCMemoryInfo().TotalCommittedBytes`](https://learn.microsoft.com/dotnet/api/system.gcmemoryinfo.totalcommittedbytes). Committed virtual memory may be larger than the heap size because it includes both memory for storing existing objects (the heap size) and some extra memory that is ready to handle newly allocated objects in the future.\n */\nexport const METRIC_DOTNET_GC_LAST_COLLECTION_MEMORY_COMMITTED_SIZE = 'dotnet.gc.last_collection.memory.committed_size' as const;\n\n/**\n * The total amount of time paused in GC since the process has started.\n *\n * @note Meter name: `System.Runtime`; Added in: .NET 9.0.\n * This metric reports the same values as calling [`GC.GetTotalPauseDuration()`](https://learn.microsoft.com/dotnet/api/system.gc.gettotalpauseduration).\n */\nexport const METRIC_DOTNET_GC_PAUSE_TIME = 'dotnet.gc.pause.time' as const;\n\n/**\n * The amount of time the JIT compiler has spent compiling methods since the process has started.\n *\n * @note Meter name: `System.Runtime`; Added in: .NET 9.0.\n * This metric reports the same values as calling [`JitInfo.GetCompilationTime()`](https://learn.microsoft.com/dotnet/api/system.runtime.jitinfo.getcompilationtime).\n */\nexport const METRIC_DOTNET_JIT_COMPILATION_TIME = 'dotnet.jit.compilation.time' as const;\n\n/**\n * Count of bytes of intermediate language that have been compiled since the process has started.\n *\n * @note Meter name: `System.Runtime`; Added in: .NET 9.0.\n * This metric reports the same values as calling [`JitInfo.GetCompiledILBytes()`](https://learn.microsoft.com/dotnet/api/system.runtime.jitinfo.getcompiledilbytes).\n */\nexport const METRIC_DOTNET_JIT_COMPILED_IL_SIZE = 'dotnet.jit.compiled_il.size' as const;\n\n/**\n * The number of times the JIT compiler (re)compiled methods since the process has started.\n *\n * @note Meter name: `System.Runtime`; Added in: .NET 9.0.\n * This metric reports the same values as calling [`JitInfo.GetCompiledMethodCount()`](https://learn.microsoft.com/dotnet/api/system.runtime.jitinfo.getcompiledmethodcount).\n */\nexport const METRIC_DOTNET_JIT_COMPILED_METHODS = 'dotnet.jit.compiled_methods' as const;\n\n/**\n * The number of times there was contention when trying to acquire a monitor lock since the process has started.\n *\n * @note Meter name: `System.Runtime`; Added in: .NET 9.0.\n * This metric reports the same values as calling [`Monitor.LockContentionCount`](https://learn.microsoft.com/dotnet/api/system.threading.monitor.lockcontentioncount).\n */\nexport const METRIC_DOTNET_MONITOR_LOCK_CONTENTIONS = 'dotnet.monitor.lock_contentions' as const;\n\n/**\n * The number of processors available to the process.\n *\n * @note Meter name: `System.Runtime`; Added in: .NET 9.0.\n * This metric reports the same values as accessing [`Environment.ProcessorCount`](https://learn.microsoft.com/dotnet/api/system.environment.processorcount).\n */\nexport const METRIC_DOTNET_PROCESS_CPU_COUNT = 'dotnet.process.cpu.count' as const;\n\n/**\n * CPU time used by the process.\n *\n * @note Meter name: `System.Runtime`; Added in: .NET 9.0.\n * This metric reports the same values as accessing the corresponding processor time properties on [`System.Diagnostics.Process`](https://learn.microsoft.com/dotnet/api/system.diagnostics.process).\n */\nexport const METRIC_DOTNET_PROCESS_CPU_TIME = 'dotnet.process.cpu.time' as const;\n\n/**\n * The number of bytes of physical memory mapped to the process context.\n *\n * @note Meter name: `System.Runtime`; Added in: .NET 9.0.\n * This metric reports the same values as calling [`Environment.WorkingSet`](https://learn.microsoft.com/dotnet/api/system.environment.workingset).\n */\nexport const METRIC_DOTNET_PROCESS_MEMORY_WORKING_SET = 'dotnet.process.memory.working_set' as const;\n\n/**\n * The number of work items that are currently queued to be processed by the thread pool.\n *\n * @note Meter name: `System.Runtime`; Added in: .NET 9.0.\n * This metric reports the same values as calling [`ThreadPool.PendingWorkItemCount`](https://learn.microsoft.com/dotnet/api/system.threading.threadpool.pendingworkitemcount).\n */\nexport const METRIC_DOTNET_THREAD_POOL_QUEUE_LENGTH = 'dotnet.thread_pool.queue.length' as const;\n\n/**\n * The number of thread pool threads that currently exist.\n *\n * @note Meter name: `System.Runtime`; Added in: .NET 9.0.\n * This metric reports the same values as calling [`ThreadPool.ThreadCount`](https://learn.microsoft.com/dotnet/api/system.threading.threadpool.threadcount).\n */\nexport const METRIC_DOTNET_THREAD_POOL_THREAD_COUNT = 'dotnet.thread_pool.thread.count' as const;\n\n/**\n * The number of work items that the thread pool has completed since the process has started.\n *\n * @note Meter name: `System.Runtime`; Added in: .NET 9.0.\n * This metric reports the same values as calling [`ThreadPool.CompletedWorkItemCount`](https://learn.microsoft.com/dotnet/api/system.threading.threadpool.completedworkitemcount).\n */\nexport const METRIC_DOTNET_THREAD_POOL_WORK_ITEM_COUNT = 'dotnet.thread_pool.work_item.count' as const;\n\n/**\n * The number of timer instances that are currently active.\n *\n * @note Meter name: `System.Runtime`; Added in: .NET 9.0.\n * This metric reports the same values as calling [`Timer.ActiveCount`](https://learn.microsoft.com/dotnet/api/system.threading.timer.activecount).\n */\nexport const METRIC_DOTNET_TIMER_COUNT = 'dotnet.timer.count' as const;\n\n/**\n * Duration of HTTP client requests.\n */\nexport const METRIC_HTTP_CLIENT_REQUEST_DURATION = 'http.client.request.duration' as const;\n\n/**\n * Duration of HTTP server requests.\n */\nexport const METRIC_HTTP_SERVER_REQUEST_DURATION = 'http.server.request.duration' as const;\n\n/**\n * Number of classes currently loaded.\n */\nexport const METRIC_JVM_CLASS_COUNT = 'jvm.class.count' as const;\n\n/**\n * Number of classes loaded since JVM start.\n */\nexport const METRIC_JVM_CLASS_LOADED = 'jvm.class.loaded' as const;\n\n/**\n * Number of classes unloaded since JVM start.\n */\nexport const METRIC_JVM_CLASS_UNLOADED = 'jvm.class.unloaded' as const;\n\n/**\n * Number of processors available to the Java virtual machine.\n */\nexport const METRIC_JVM_CPU_COUNT = 'jvm.cpu.count' as const;\n\n/**\n * Recent CPU utilization for the process as reported by the JVM.\n *\n * @note The value range is [0.0,1.0]. This utilization is not defined as being for the specific interval since last measurement (unlike `system.cpu.utilization`). [Reference](https://docs.oracle.com/en/java/javase/17/docs/api/jdk.management/com/sun/management/OperatingSystemMXBean.html#getProcessCpuLoad()).\n */\nexport const METRIC_JVM_CPU_RECENT_UTILIZATION = 'jvm.cpu.recent_utilization' as const;\n\n/**\n * CPU time used by the process as reported by the JVM.\n */\nexport const METRIC_JVM_CPU_TIME = 'jvm.cpu.time' as const;\n\n/**\n * Duration of JVM garbage collection actions.\n */\nexport const METRIC_JVM_GC_DURATION = 'jvm.gc.duration' as const;\n\n/**\n * Measure of memory committed.\n */\nexport const METRIC_JVM_MEMORY_COMMITTED = 'jvm.memory.committed' as const;\n\n/**\n * Measure of max obtainable memory.\n */\nexport const METRIC_JVM_MEMORY_LIMIT = 'jvm.memory.limit' as const;\n\n/**\n * Measure of memory used.\n */\nexport const METRIC_JVM_MEMORY_USED = 'jvm.memory.used' as const;\n\n/**\n * Measure of memory used, as measured after the most recent garbage collection event on this pool.\n */\nexport const METRIC_JVM_MEMORY_USED_AFTER_LAST_GC = 'jvm.memory.used_after_last_gc' as const;\n\n/**\n * Number of executing platform threads.\n */\nexport const METRIC_JVM_THREAD_COUNT = 'jvm.thread.count' as const;\n\n/**\n * Number of connections that are currently active on the server.\n *\n * @note Meter name: `Microsoft.AspNetCore.Server.Kestrel`; Added in: ASP.NET Core 8.0\n */\nexport const METRIC_KESTREL_ACTIVE_CONNECTIONS = 'kestrel.active_connections' as const;\n\n/**\n * Number of TLS handshakes that are currently in progress on the server.\n *\n * @note Meter name: `Microsoft.AspNetCore.Server.Kestrel`; Added in: ASP.NET Core 8.0\n */\nexport const METRIC_KESTREL_ACTIVE_TLS_HANDSHAKES = 'kestrel.active_tls_handshakes' as const;\n\n/**\n * The duration of connections on the server.\n *\n * @note Meter name: `Microsoft.AspNetCore.Server.Kestrel`; Added in: ASP.NET Core 8.0\n */\nexport const METRIC_KESTREL_CONNECTION_DURATION = 'kestrel.connection.duration' as const;\n\n/**\n * Number of connections that are currently queued and are waiting to start.\n *\n * @note Meter name: `Microsoft.AspNetCore.Server.Kestrel`; Added in: ASP.NET Core 8.0\n */\nexport const METRIC_KESTREL_QUEUED_CONNECTIONS = 'kestrel.queued_connections' as const;\n\n/**\n * Number of HTTP requests on multiplexed connections (HTTP/2 and HTTP/3) that are currently queued and are waiting to start.\n *\n * @note Meter name: `Microsoft.AspNetCore.Server.Kestrel`; Added in: ASP.NET Core 8.0\n */\nexport const METRIC_KESTREL_QUEUED_REQUESTS = 'kestrel.queued_requests' as const;\n\n/**\n * Number of connections rejected by the server.\n *\n * @note Connections are rejected when the currently active count exceeds the value configured with `MaxConcurrentConnections`.\n * Meter name: `Microsoft.AspNetCore.Server.Kestrel`; Added in: ASP.NET Core 8.0\n */\nexport const METRIC_KESTREL_REJECTED_CONNECTIONS = 'kestrel.rejected_connections' as const;\n\n/**\n * The duration of TLS handshakes on the server.\n *\n * @note Meter name: `Microsoft.AspNetCore.Server.Kestrel`; Added in: ASP.NET Core 8.0\n */\nexport const METRIC_KESTREL_TLS_HANDSHAKE_DURATION = 'kestrel.tls_handshake.duration' as const;\n\n/**\n * Number of connections that are currently upgraded (WebSockets). .\n *\n * @note The counter only tracks HTTP/1.1 connections.\n *\n * Meter name: `Microsoft.AspNetCore.Server.Kestrel`; Added in: ASP.NET Core 8.0\n */\nexport const METRIC_KESTREL_UPGRADED_CONNECTIONS = 'kestrel.upgraded_connections' as const;\n\n/**\n * Number of connections that are currently active on the server.\n *\n * @note Meter name: `Microsoft.AspNetCore.Http.Connections`; Added in: ASP.NET Core 8.0\n */\nexport const METRIC_SIGNALR_SERVER_ACTIVE_CONNECTIONS = 'signalr.server.active_connections' as const;\n\n/**\n * The duration of connections on the server.\n *\n * @note Meter name: `Microsoft.AspNetCore.Http.Connections`; Added in: ASP.NET Core 8.0\n */\nexport const METRIC_SIGNALR_SERVER_CONNECTION_DURATION = 'signalr.server.connection.duration' as const;\n\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* eslint-disable no-restricted-syntax --\n * These re-exports are only of constants, only two-levels deep, and\n * should not cause problems for tree-shakers.\n */\n\n// Deprecated. These are kept around for compatibility purposes\nexport * from './trace';\nexport * from './resource';\n\n// Use these instead\nexport * from './stable_attributes';\nexport * from './stable_metrics';\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Event name definitions\nexport const ExceptionEventName = 'exception';\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Context,\n  diag,\n  Exception,\n  HrTime,\n  Link,\n  Span as APISpan,\n  SpanAttributes,\n  SpanAttributeValue,\n  SpanContext,\n  SpanKind,\n  SpanStatus,\n  SpanStatusCode,\n  TimeInput,\n} from '@opentelemetry/api';\nimport {\n  addHrTimes,\n  millisToHrTime,\n  getTimeOrigin,\n  hrTime,\n  hrTimeDuration,\n  InstrumentationLibrary,\n  isAttributeValue,\n  isTimeInput,\n  isTimeInputHrTime,\n  otperformance,\n  sanitizeAttributes,\n} from '@opentelemetry/core';\nimport { IResource } from '@opentelemetry/resources';\nimport {\n  SEMATTRS_EXCEPTION_MESSAGE,\n  SEMATTRS_EXCEPTION_STACKTRACE,\n  SEMATTRS_EXCEPTION_TYPE,\n} from '@opentelemetry/semantic-conventions';\nimport { ExceptionEventName } from './enums';\nimport { ReadableSpan } from './export/ReadableSpan';\nimport { SpanProcessor } from './SpanProcessor';\nimport { TimedEvent } from './TimedEvent';\nimport { Tracer } from './Tracer';\nimport { SpanLimits } from './types';\n\n/**\n * This class represents a span.\n */\nexport class Span implements APISpan, ReadableSpan {\n  // Below properties are included to implement ReadableSpan for export\n  // purposes but are not intended to be written-to directly.\n  private readonly _spanContext: SpanContext;\n  readonly kind: SpanKind;\n  readonly parentSpanId?: string;\n  readonly attributes: SpanAttributes = {};\n  readonly links: Link[] = [];\n  readonly events: TimedEvent[] = [];\n  readonly startTime: HrTime;\n  readonly resource: IResource;\n  readonly instrumentationLibrary: InstrumentationLibrary;\n\n  private _droppedAttributesCount = 0;\n  private _droppedEventsCount: number = 0;\n  private _droppedLinksCount: number = 0;\n\n  name: string;\n  status: SpanStatus = {\n    code: SpanStatusCode.UNSET,\n  };\n  endTime: HrTime = [0, 0];\n  private _ended = false;\n  private _duration: HrTime = [-1, -1];\n  private readonly _spanProcessor: SpanProcessor;\n  private readonly _spanLimits: SpanLimits;\n  private readonly _attributeValueLengthLimit: number;\n\n  private readonly _performanceStartTime: number;\n  private readonly _performanceOffset: number;\n  private readonly _startTimeProvided: boolean;\n\n  /**\n   * Constructs a new Span instance.\n   *\n   * @deprecated calling Span constructor directly is not supported. Please use tracer.startSpan.\n   * */\n  constructor(\n    parentTracer: Tracer,\n    context: Context,\n    spanName: string,\n    spanContext: SpanContext,\n    kind: SpanKind,\n    parentSpanId?: string,\n    links: Link[] = [],\n    startTime?: TimeInput,\n    _deprecatedClock?: unknown, // keeping this argument even though it is unused to ensure backwards compatibility\n    attributes?: SpanAttributes\n  ) {\n    this.name = spanName;\n    this._spanContext = spanContext;\n    this.parentSpanId = parentSpanId;\n    this.kind = kind;\n    this.links = links;\n\n    const now = Date.now();\n    this._performanceStartTime = otperformance.now();\n    this._performanceOffset =\n      now - (this._performanceStartTime + getTimeOrigin());\n    this._startTimeProvided = startTime != null;\n\n    this.startTime = this._getTime(startTime ?? now);\n\n    this.resource = parentTracer.resource;\n    this.instrumentationLibrary = parentTracer.instrumentationLibrary;\n    this._spanLimits = parentTracer.getSpanLimits();\n    this._attributeValueLengthLimit =\n      this._spanLimits.attributeValueLengthLimit || 0;\n\n    if (attributes != null) {\n      this.setAttributes(attributes);\n    }\n\n    this._spanProcessor = parentTracer.getActiveSpanProcessor();\n    this._spanProcessor.onStart(this, context);\n  }\n\n  spanContext(): SpanContext {\n    return this._spanContext;\n  }\n\n  setAttribute(key: string, value?: SpanAttributeValue): this;\n  setAttribute(key: string, value: unknown): this {\n    if (value == null || this._isSpanEnded()) return this;\n    if (key.length === 0) {\n      diag.warn(`Invalid attribute key: ${key}`);\n      return this;\n    }\n    if (!isAttributeValue(value)) {\n      diag.warn(`Invalid attribute value set for key: ${key}`);\n      return this;\n    }\n\n    if (\n      Object.keys(this.attributes).length >=\n        this._spanLimits.attributeCountLimit! &&\n      !Object.prototype.hasOwnProperty.call(this.attributes, key)\n    ) {\n      this._droppedAttributesCount++;\n      return this;\n    }\n    this.attributes[key] = this._truncateToSize(value);\n    return this;\n  }\n\n  setAttributes(attributes: SpanAttributes): this {\n    for (const [k, v] of Object.entries(attributes)) {\n      this.setAttribute(k, v);\n    }\n    return this;\n  }\n\n  /**\n   *\n   * @param name Span Name\n   * @param [attributesOrStartTime] Span attributes or start time\n   *     if type is {@type TimeInput} and 3rd param is undefined\n   * @param [timeStamp] Specified time stamp for the event\n   */\n  addEvent(\n    name: string,\n    attributesOrStartTime?: SpanAttributes | TimeInput,\n    timeStamp?: TimeInput\n  ): this {\n    if (this._isSpanEnded()) return this;\n    if (this._spanLimits.eventCountLimit === 0) {\n      diag.warn('No events allowed.');\n      this._droppedEventsCount++;\n      return this;\n    }\n    if (this.events.length >= this._spanLimits.eventCountLimit!) {\n      if (this._droppedEventsCount === 0) {\n        diag.debug('Dropping extra events.');\n      }\n      this.events.shift();\n      this._droppedEventsCount++;\n    }\n\n    if (isTimeInput(attributesOrStartTime)) {\n      if (!isTimeInput(timeStamp)) {\n        timeStamp = attributesOrStartTime;\n      }\n      attributesOrStartTime = undefined;\n    }\n\n    const attributes = sanitizeAttributes(attributesOrStartTime);\n\n    this.events.push({\n      name,\n      attributes,\n      time: this._getTime(timeStamp),\n      droppedAttributesCount: 0,\n    });\n    return this;\n  }\n\n  addLink(link: Link): this {\n    this.links.push(link);\n    return this;\n  }\n\n  addLinks(links: Link[]): this {\n    this.links.push(...links);\n    return this;\n  }\n\n  setStatus(status: SpanStatus): this {\n    if (this._isSpanEnded()) return this;\n    this.status = { ...status };\n\n    // When using try-catch, the caught \"error\" is of type `any`. When then assigning `any` to `status.message`,\n    // TypeScript will not error. While this can happen during use of any API, it is more common on Span#setStatus()\n    // as it's likely used in a catch-block. Therefore, we validate if `status.message` is actually a string, null, or\n    // undefined to avoid an incorrect type causing issues downstream.\n    if (this.status.message != null && typeof status.message !== 'string') {\n      diag.warn(\n        `Dropping invalid status.message of type '${typeof status.message}', expected 'string'`\n      );\n      delete this.status.message;\n    }\n\n    return this;\n  }\n\n  updateName(name: string): this {\n    if (this._isSpanEnded()) return this;\n    this.name = name;\n    return this;\n  }\n\n  end(endTime?: TimeInput): void {\n    if (this._isSpanEnded()) {\n      diag.error(\n        `${this.name} ${this._spanContext.traceId}-${this._spanContext.spanId} - You can only call end() on a span once.`\n      );\n      return;\n    }\n    this._ended = true;\n\n    this.endTime = this._getTime(endTime);\n    this._duration = hrTimeDuration(this.startTime, this.endTime);\n\n    if (this._duration[0] < 0) {\n      diag.warn(\n        'Inconsistent start and end time, startTime > endTime. Setting span duration to 0ms.',\n        this.startTime,\n        this.endTime\n      );\n      this.endTime = this.startTime.slice() as HrTime;\n      this._duration = [0, 0];\n    }\n\n    if (this._droppedEventsCount > 0) {\n      diag.warn(\n        `Dropped ${this._droppedEventsCount} events because eventCountLimit reached`\n      );\n    }\n\n    this._spanProcessor.onEnd(this);\n  }\n\n  private _getTime(inp?: TimeInput): HrTime {\n    if (typeof inp === 'number' && inp <= otperformance.now()) {\n      // must be a performance timestamp\n      // apply correction and convert to hrtime\n      return hrTime(inp + this._performanceOffset);\n    }\n\n    if (typeof inp === 'number') {\n      return millisToHrTime(inp);\n    }\n\n    if (inp instanceof Date) {\n      return millisToHrTime(inp.getTime());\n    }\n\n    if (isTimeInputHrTime(inp)) {\n      return inp;\n    }\n\n    if (this._startTimeProvided) {\n      // if user provided a time for the start manually\n      // we can't use duration to calculate event/end times\n      return millisToHrTime(Date.now());\n    }\n\n    const msDuration = otperformance.now() - this._performanceStartTime;\n    return addHrTimes(this.startTime, millisToHrTime(msDuration));\n  }\n\n  isRecording(): boolean {\n    return this._ended === false;\n  }\n\n  recordException(exception: Exception, time?: TimeInput): void {\n    const attributes: SpanAttributes = {};\n    if (typeof exception === 'string') {\n      attributes[SEMATTRS_EXCEPTION_MESSAGE] = exception;\n    } else if (exception) {\n      if (exception.code) {\n        attributes[SEMATTRS_EXCEPTION_TYPE] = exception.code.toString();\n      } else if (exception.name) {\n        attributes[SEMATTRS_EXCEPTION_TYPE] = exception.name;\n      }\n      if (exception.message) {\n        attributes[SEMATTRS_EXCEPTION_MESSAGE] = exception.message;\n      }\n      if (exception.stack) {\n        attributes[SEMATTRS_EXCEPTION_STACKTRACE] = exception.stack;\n      }\n    }\n\n    // these are minimum requirements from spec\n    if (\n      attributes[SEMATTRS_EXCEPTION_TYPE] ||\n      attributes[SEMATTRS_EXCEPTION_MESSAGE]\n    ) {\n      this.addEvent(ExceptionEventName, attributes, time);\n    } else {\n      diag.warn(`Failed to record an exception ${exception}`);\n    }\n  }\n\n  get duration(): HrTime {\n    return this._duration;\n  }\n\n  get ended(): boolean {\n    return this._ended;\n  }\n\n  get droppedAttributesCount(): number {\n    return this._droppedAttributesCount;\n  }\n\n  get droppedEventsCount(): number {\n    return this._droppedEventsCount;\n  }\n\n  get droppedLinksCount(): number {\n    return this._droppedLinksCount;\n  }\n\n  private _isSpanEnded(): boolean {\n    if (this._ended) {\n      diag.warn(\n        `Can not execute the operation on ended Span {traceId: ${this._spanContext.traceId}, spanId: ${this._spanContext.spanId}}`\n      );\n    }\n    return this._ended;\n  }\n\n  // Utility function to truncate given value within size\n  // for value type of string, will truncate to given limit\n  // for type of non-string, will return same value\n  private _truncateToLimitUtil(value: string, limit: number): string {\n    if (value.length <= limit) {\n      return value;\n    }\n    return value.substring(0, limit);\n  }\n\n  /**\n   * If the given attribute value is of type string and has more characters than given {@code attributeValueLengthLimit} then\n   * return string with truncated to {@code attributeValueLengthLimit} characters\n   *\n   * If the given attribute value is array of strings then\n   * return new array of strings with each element truncated to {@code attributeValueLengthLimit} characters\n   *\n   * Otherwise return same Attribute {@code value}\n   *\n   * @param value Attribute value\n   * @returns truncated attribute value if required, otherwise same value\n   */\n  private _truncateToSize(value: SpanAttributeValue): SpanAttributeValue {\n    const limit = this._attributeValueLengthLimit;\n    // Check limit\n    if (limit <= 0) {\n      // Negative values are invalid, so do not truncate\n      diag.warn(`Attribute value limit must be positive, got ${limit}`);\n      return value;\n    }\n\n    // String\n    if (typeof value === 'string') {\n      return this._truncateToLimitUtil(value, limit);\n    }\n\n    // Array of strings\n    if (Array.isArray(value)) {\n      return (value as []).map(val =>\n        typeof val === 'string' ? this._truncateToLimitUtil(val, limit) : val\n      );\n    }\n\n    // Other types, no need to apply value length limit\n    return value;\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Context,\n  Link,\n  SpanAttributes,\n  SpanKind,\n  TraceState,\n} from '@opentelemetry/api';\n\n/**\n * A sampling decision that determines how a {@link Span} will be recorded\n * and collected.\n */\nexport enum SamplingDecision {\n  /**\n   * `Span.isRecording() === false`, span will not be recorded and all events\n   * and attributes will be dropped.\n   */\n  NOT_RECORD,\n  /**\n   * `Span.isRecording() === true`, but `Sampled` flag in {@link TraceFlags}\n   * MUST NOT be set.\n   */\n  RECORD,\n  /**\n   * `Span.isRecording() === true` AND `Sampled` flag in {@link TraceFlags}\n   * MUST be set.\n   */\n  RECORD_AND_SAMPLED,\n}\n\n/**\n * A sampling result contains a decision for a {@link Span} and additional\n * attributes the sampler would like to added to the Span.\n */\nexport interface SamplingResult {\n  /**\n   * A sampling decision, refer to {@link SamplingDecision} for details.\n   */\n  decision: SamplingDecision;\n  /**\n   * The list of attributes returned by SamplingResult MUST be immutable.\n   * Caller may call {@link Sampler}.shouldSample any number of times and\n   * can safely cache the returned value.\n   */\n  attributes?: Readonly<SpanAttributes>;\n  /**\n   * A {@link TraceState} that will be associated with the {@link Span} through\n   * the new {@link SpanContext}. Samplers SHOULD return the TraceState from\n   * the passed-in {@link Context} if they do not intend to change it. Leaving\n   * the value undefined will also leave the TraceState unchanged.\n   */\n  traceState?: TraceState;\n}\n\n/**\n * This interface represent a sampler. Sampling is a mechanism to control the\n * noise and overhead introduced by OpenTelemetry by reducing the number of\n * samples of traces collected and sent to the backend.\n */\nexport interface Sampler {\n  /**\n   * Checks whether span needs to be created and tracked.\n   *\n   * @param context Parent Context which may contain a span.\n   * @param traceId of the span to be created. It can be different from the\n   *     traceId in the {@link SpanContext}. Typically in situations when the\n   *     span to be created starts a new trace.\n   * @param spanName of the span to be created.\n   * @param spanKind of the span to be created.\n   * @param attributes Initial set of SpanAttributes for the Span being constructed.\n   * @param links Collection of links that will be associated with the Span to\n   *     be created. Typically useful for batch operations.\n   * @returns a {@link SamplingResult}.\n   */\n  shouldSample(\n    context: Context,\n    traceId: string,\n    spanName: string,\n    spanKind: SpanKind,\n    attributes: SpanAttributes,\n    links: Link[]\n  ): SamplingResult;\n\n  /** Returns the sampler name or short description with the configuration. */\n  toString(): string;\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Sampler, SamplingDecision, SamplingResult } from '../Sampler';\n\n/** Sampler that samples no traces. */\nexport class AlwaysOffSampler implements Sampler {\n  shouldSample(): SamplingResult {\n    return {\n      decision: SamplingDecision.NOT_RECORD,\n    };\n  }\n\n  toString(): string {\n    return 'AlwaysOffSampler';\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Sampler, SamplingDecision, SamplingResult } from '../Sampler';\n\n/** Sampler that samples all traces. */\nexport class AlwaysOnSampler implements Sampler {\n  shouldSample(): SamplingResult {\n    return {\n      decision: SamplingDecision.RECORD_AND_SAMPLED,\n    };\n  }\n\n  toString(): string {\n    return 'AlwaysOnSampler';\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Context,\n  isSpanContextValid,\n  Link,\n  SpanAttributes,\n  SpanKind,\n  TraceFlags,\n  trace,\n} from '@opentelemetry/api';\nimport { globalErrorHandler } from '@opentelemetry/core';\nimport { AlwaysOffSampler } from './AlwaysOffSampler';\nimport { AlwaysOnSampler } from './AlwaysOnSampler';\nimport { Sampler, SamplingResult } from '../Sampler';\n\n/**\n * A composite sampler that either respects the parent span's sampling decision\n * or delegates to `delegateSampler` for root spans.\n */\nexport class ParentBasedSampler implements Sampler {\n  private _root: Sampler;\n  private _remoteParentSampled: Sampler;\n  private _remoteParentNotSampled: Sampler;\n  private _localParentSampled: Sampler;\n  private _localParentNotSampled: Sampler;\n\n  constructor(config: ParentBasedSamplerConfig) {\n    this._root = config.root;\n\n    if (!this._root) {\n      globalErrorHandler(\n        new Error('ParentBasedSampler must have a root sampler configured')\n      );\n      this._root = new AlwaysOnSampler();\n    }\n\n    this._remoteParentSampled =\n      config.remoteParentSampled ?? new AlwaysOnSampler();\n    this._remoteParentNotSampled =\n      config.remoteParentNotSampled ?? new AlwaysOffSampler();\n    this._localParentSampled =\n      config.localParentSampled ?? new AlwaysOnSampler();\n    this._localParentNotSampled =\n      config.localParentNotSampled ?? new AlwaysOffSampler();\n  }\n\n  shouldSample(\n    context: Context,\n    traceId: string,\n    spanName: string,\n    spanKind: SpanKind,\n    attributes: SpanAttributes,\n    links: Link[]\n  ): SamplingResult {\n    const parentContext = trace.getSpanContext(context);\n\n    if (!parentContext || !isSpanContextValid(parentContext)) {\n      return this._root.shouldSample(\n        context,\n        traceId,\n        spanName,\n        spanKind,\n        attributes,\n        links\n      );\n    }\n\n    if (parentContext.isRemote) {\n      if (parentContext.traceFlags & TraceFlags.SAMPLED) {\n        return this._remoteParentSampled.shouldSample(\n          context,\n          traceId,\n          spanName,\n          spanKind,\n          attributes,\n          links\n        );\n      }\n      return this._remoteParentNotSampled.shouldSample(\n        context,\n        traceId,\n        spanName,\n        spanKind,\n        attributes,\n        links\n      );\n    }\n\n    if (parentContext.traceFlags & TraceFlags.SAMPLED) {\n      return this._localParentSampled.shouldSample(\n        context,\n        traceId,\n        spanName,\n        spanKind,\n        attributes,\n        links\n      );\n    }\n\n    return this._localParentNotSampled.shouldSample(\n      context,\n      traceId,\n      spanName,\n      spanKind,\n      attributes,\n      links\n    );\n  }\n\n  toString(): string {\n    return `ParentBased{root=${this._root.toString()}, remoteParentSampled=${this._remoteParentSampled.toString()}, remoteParentNotSampled=${this._remoteParentNotSampled.toString()}, localParentSampled=${this._localParentSampled.toString()}, localParentNotSampled=${this._localParentNotSampled.toString()}}`;\n  }\n}\n\ninterface ParentBasedSamplerConfig {\n  /** Sampler called for spans with no parent */\n  root: Sampler;\n  /** Sampler called for spans with a remote parent which was sampled. Default AlwaysOn */\n  remoteParentSampled?: Sampler;\n  /** Sampler called for spans with a remote parent which was not sampled. Default AlwaysOff */\n  remoteParentNotSampled?: Sampler;\n  /** Sampler called for spans with a local parent which was sampled. Default AlwaysOn */\n  localParentSampled?: Sampler;\n  /** Sampler called for spans with a local parent which was not sampled. Default AlwaysOff */\n  localParentNotSampled?: Sampler;\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { isValidTraceId } from '@opentelemetry/api';\nimport { Sampler, SamplingDecision, SamplingResult } from '../Sampler';\n\n/** Sampler that samples a given fraction of traces based of trace id deterministically. */\nexport class TraceIdRatioBasedSampler implements Sampler {\n  private _upperBound: number;\n\n  constructor(private readonly _ratio: number = 0) {\n    this._ratio = this._normalize(_ratio);\n    this._upperBound = Math.floor(this._ratio * 0xffffffff);\n  }\n\n  shouldSample(context: unknown, traceId: string): SamplingResult {\n    return {\n      decision:\n        isValidTraceId(traceId) && this._accumulate(traceId) < this._upperBound\n          ? SamplingDecision.RECORD_AND_SAMPLED\n          : SamplingDecision.NOT_RECORD,\n    };\n  }\n\n  toString(): string {\n    return `TraceIdRatioBased{${this._ratio}}`;\n  }\n\n  private _normalize(ratio: number): number {\n    if (typeof ratio !== 'number' || isNaN(ratio)) return 0;\n    return ratio >= 1 ? 1 : ratio <= 0 ? 0 : ratio;\n  }\n\n  private _accumulate(traceId: string): number {\n    let accumulation = 0;\n    for (let i = 0; i < traceId.length / 8; i++) {\n      const pos = i * 8;\n      const part = parseInt(traceId.slice(pos, pos + 8), 16);\n      accumulation = (accumulation ^ part) >>> 0;\n    }\n    return accumulation;\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { diag } from '@opentelemetry/api';\nimport { getEnv, TracesSamplerValues, ENVIRONMENT } from '@opentelemetry/core';\nimport { Sampler } from './Sampler';\nimport { AlwaysOffSampler } from './sampler/AlwaysOffSampler';\nimport { AlwaysOnSampler } from './sampler/AlwaysOnSampler';\nimport { ParentBasedSampler } from './sampler/ParentBasedSampler';\nimport { TraceIdRatioBasedSampler } from './sampler/TraceIdRatioBasedSampler';\n\nconst FALLBACK_OTEL_TRACES_SAMPLER = TracesSamplerValues.AlwaysOn;\nconst DEFAULT_RATIO = 1;\n\n/**\n * Load default configuration. For fields with primitive values, any user-provided\n * value will override the corresponding default value. For fields with\n * non-primitive values (like `spanLimits`), the user-provided value will be\n * used to extend the default value.\n */\n\n// object needs to be wrapped in this function and called when needed otherwise\n// envs are parsed before tests are ran - causes tests using these envs to fail\nexport function loadDefaultConfig() {\n  const env = getEnv();\n\n  return {\n    sampler: buildSamplerFromEnv(env),\n    forceFlushTimeoutMillis: 30000,\n    generalLimits: {\n      attributeValueLengthLimit: env.OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT,\n      attributeCountLimit: env.OTEL_ATTRIBUTE_COUNT_LIMIT,\n    },\n    spanLimits: {\n      attributeValueLengthLimit: env.OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT,\n      attributeCountLimit: env.OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT,\n      linkCountLimit: env.OTEL_SPAN_LINK_COUNT_LIMIT,\n      eventCountLimit: env.OTEL_SPAN_EVENT_COUNT_LIMIT,\n      attributePerEventCountLimit:\n        env.OTEL_SPAN_ATTRIBUTE_PER_EVENT_COUNT_LIMIT,\n      attributePerLinkCountLimit: env.OTEL_SPAN_ATTRIBUTE_PER_LINK_COUNT_LIMIT,\n    },\n    mergeResourceWithDefaults: true,\n  };\n}\n\n/**\n * Based on environment, builds a sampler, complies with specification.\n * @param environment optional, by default uses getEnv(), but allows passing a value to reuse parsed environment\n */\nexport function buildSamplerFromEnv(\n  environment: Required<ENVIRONMENT> = getEnv()\n): Sampler {\n  switch (environment.OTEL_TRACES_SAMPLER) {\n    case TracesSamplerValues.AlwaysOn:\n      return new AlwaysOnSampler();\n    case TracesSamplerValues.AlwaysOff:\n      return new AlwaysOffSampler();\n    case TracesSamplerValues.ParentBasedAlwaysOn:\n      return new ParentBasedSampler({\n        root: new AlwaysOnSampler(),\n      });\n    case TracesSamplerValues.ParentBasedAlwaysOff:\n      return new ParentBasedSampler({\n        root: new AlwaysOffSampler(),\n      });\n    case TracesSamplerValues.TraceIdRatio:\n      return new TraceIdRatioBasedSampler(\n        getSamplerProbabilityFromEnv(environment)\n      );\n    case TracesSamplerValues.ParentBasedTraceIdRatio:\n      return new ParentBasedSampler({\n        root: new TraceIdRatioBasedSampler(\n          getSamplerProbabilityFromEnv(environment)\n        ),\n      });\n    default:\n      diag.error(\n        `OTEL_TRACES_SAMPLER value \"${environment.OTEL_TRACES_SAMPLER} invalid, defaulting to ${FALLBACK_OTEL_TRACES_SAMPLER}\".`\n      );\n      return new AlwaysOnSampler();\n  }\n}\n\nfunction getSamplerProbabilityFromEnv(\n  environment: Required<ENVIRONMENT>\n): number | undefined {\n  if (\n    environment.OTEL_TRACES_SAMPLER_ARG === undefined ||\n    environment.OTEL_TRACES_SAMPLER_ARG === ''\n  ) {\n    diag.error(\n      `OTEL_TRACES_SAMPLER_ARG is blank, defaulting to ${DEFAULT_RATIO}.`\n    );\n    return DEFAULT_RATIO;\n  }\n\n  const probability = Number(environment.OTEL_TRACES_SAMPLER_ARG);\n\n  if (isNaN(probability)) {\n    diag.error(\n      `OTEL_TRACES_SAMPLER_ARG=${environment.OTEL_TRACES_SAMPLER_ARG} was given, but it is invalid, defaulting to ${DEFAULT_RATIO}.`\n    );\n    return DEFAULT_RATIO;\n  }\n\n  if (probability < 0 || probability > 1) {\n    diag.error(\n      `OTEL_TRACES_SAMPLER_ARG=${environment.OTEL_TRACES_SAMPLER_ARG} was given, but it is out of range ([0..1]), defaulting to ${DEFAULT_RATIO}.`\n    );\n    return DEFAULT_RATIO;\n  }\n\n  return probability;\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { buildSamplerFromEnv, loadDefaultConfig } from './config';\nimport { Sampler } from './Sampler';\nimport { SpanLimits, TracerConfig, GeneralLimits } from './types';\nimport {\n  DEFAULT_ATTRIBUTE_COUNT_LIMIT,\n  DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT,\n  getEnvWithoutDefaults,\n} from '@opentelemetry/core';\n\n/**\n * Function to merge Default configuration (as specified in './config') with\n * user provided configurations.\n */\nexport function mergeConfig(userConfig: TracerConfig): TracerConfig & {\n  sampler: Sampler;\n  spanLimits: SpanLimits;\n  generalLimits: GeneralLimits;\n} {\n  const perInstanceDefaults: Partial<TracerConfig> = {\n    sampler: buildSamplerFromEnv(),\n  };\n\n  const DEFAULT_CONFIG = loadDefaultConfig();\n\n  const target = Object.assign(\n    {},\n    DEFAULT_CONFIG,\n    perInstanceDefaults,\n    userConfig\n  );\n\n  target.generalLimits = Object.assign(\n    {},\n    DEFAULT_CONFIG.generalLimits,\n    userConfig.generalLimits || {}\n  );\n\n  target.spanLimits = Object.assign(\n    {},\n    DEFAULT_CONFIG.spanLimits,\n    userConfig.spanLimits || {}\n  );\n\n  return target;\n}\n\n/**\n * When general limits are provided and model specific limits are not,\n * configures the model specific limits by using the values from the general ones.\n * @param userConfig User provided tracer configuration\n */\nexport function reconfigureLimits(userConfig: TracerConfig): TracerConfig {\n  const spanLimits = Object.assign({}, userConfig.spanLimits);\n\n  const parsedEnvConfig = getEnvWithoutDefaults();\n\n  /**\n   * Reassign span attribute count limit to use first non null value defined by user or use default value\n   */\n  spanLimits.attributeCountLimit =\n    userConfig.spanLimits?.attributeCountLimit ??\n    userConfig.generalLimits?.attributeCountLimit ??\n    parsedEnvConfig.OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT ??\n    parsedEnvConfig.OTEL_ATTRIBUTE_COUNT_LIMIT ??\n    DEFAULT_ATTRIBUTE_COUNT_LIMIT;\n\n  /**\n   * Reassign span attribute value length limit to use first non null value defined by user or use default value\n   */\n  spanLimits.attributeValueLengthLimit =\n    userConfig.spanLimits?.attributeValueLengthLimit ??\n    userConfig.generalLimits?.attributeValueLengthLimit ??\n    parsedEnvConfig.OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT ??\n    parsedEnvConfig.OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT ??\n    DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT;\n\n  return Object.assign({}, userConfig, { spanLimits });\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { context, Context, diag, TraceFlags } from '@opentelemetry/api';\nimport {\n  BindOnceFuture,\n  ExportResultCode,\n  getEnv,\n  globalErrorHandler,\n  suppressTracing,\n  unrefTimer,\n} from '@opentelemetry/core';\nimport { Span } from '../Span';\nimport { SpanProcessor } from '../SpanProcessor';\nimport { BufferConfig } from '../types';\nimport { ReadableSpan } from './ReadableSpan';\nimport { SpanExporter } from './SpanExporter';\n\n/**\n * Implementation of the {@link SpanProcessor} that batches spans exported by\n * the SDK then pushes them to the exporter pipeline.\n */\nexport abstract class BatchSpanProcessorBase<T extends BufferConfig>\n  implements SpanProcessor\n{\n  private readonly _maxExportBatchSize: number;\n  private readonly _maxQueueSize: number;\n  private readonly _scheduledDelayMillis: number;\n  private readonly _exportTimeoutMillis: number;\n\n  private _isExporting = false;\n  private _finishedSpans: ReadableSpan[] = [];\n  private _timer: NodeJS.Timeout | undefined;\n  private _shutdownOnce: BindOnceFuture<void>;\n  private _droppedSpansCount: number = 0;\n\n  constructor(\n    private readonly _exporter: SpanExporter,\n    config?: T\n  ) {\n    const env = getEnv();\n    this._maxExportBatchSize =\n      typeof config?.maxExportBatchSize === 'number'\n        ? config.maxExportBatchSize\n        : env.OTEL_BSP_MAX_EXPORT_BATCH_SIZE;\n    this._maxQueueSize =\n      typeof config?.maxQueueSize === 'number'\n        ? config.maxQueueSize\n        : env.OTEL_BSP_MAX_QUEUE_SIZE;\n    this._scheduledDelayMillis =\n      typeof config?.scheduledDelayMillis === 'number'\n        ? config.scheduledDelayMillis\n        : env.OTEL_BSP_SCHEDULE_DELAY;\n    this._exportTimeoutMillis =\n      typeof config?.exportTimeoutMillis === 'number'\n        ? config.exportTimeoutMillis\n        : env.OTEL_BSP_EXPORT_TIMEOUT;\n\n    this._shutdownOnce = new BindOnceFuture(this._shutdown, this);\n\n    if (this._maxExportBatchSize > this._maxQueueSize) {\n      diag.warn(\n        'BatchSpanProcessor: maxExportBatchSize must be smaller or equal to maxQueueSize, setting maxExportBatchSize to match maxQueueSize'\n      );\n      this._maxExportBatchSize = this._maxQueueSize;\n    }\n  }\n\n  forceFlush(): Promise<void> {\n    if (this._shutdownOnce.isCalled) {\n      return this._shutdownOnce.promise;\n    }\n    return this._flushAll();\n  }\n\n  // does nothing.\n  onStart(_span: Span, _parentContext: Context): void {}\n\n  onEnd(span: ReadableSpan): void {\n    if (this._shutdownOnce.isCalled) {\n      return;\n    }\n\n    if ((span.spanContext().traceFlags & TraceFlags.SAMPLED) === 0) {\n      return;\n    }\n\n    this._addToBuffer(span);\n  }\n\n  shutdown(): Promise<void> {\n    return this._shutdownOnce.call();\n  }\n\n  private _shutdown() {\n    return Promise.resolve()\n      .then(() => {\n        return this.onShutdown();\n      })\n      .then(() => {\n        return this._flushAll();\n      })\n      .then(() => {\n        return this._exporter.shutdown();\n      });\n  }\n\n  /** Add a span in the buffer. */\n  private _addToBuffer(span: ReadableSpan) {\n    if (this._finishedSpans.length >= this._maxQueueSize) {\n      // limit reached, drop span\n\n      if (this._droppedSpansCount === 0) {\n        diag.debug('maxQueueSize reached, dropping spans');\n      }\n      this._droppedSpansCount++;\n\n      return;\n    }\n\n    if (this._droppedSpansCount > 0) {\n      // some spans were dropped, log once with count of spans dropped\n      diag.warn(\n        `Dropped ${this._droppedSpansCount} spans because maxQueueSize reached`\n      );\n      this._droppedSpansCount = 0;\n    }\n\n    this._finishedSpans.push(span);\n    this._maybeStartTimer();\n  }\n\n  /**\n   * Send all spans to the exporter respecting the batch size limit\n   * This function is used only on forceFlush or shutdown,\n   * for all other cases _flush should be used\n   * */\n  private _flushAll(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      const promises = [];\n      // calculate number of batches\n      const count = Math.ceil(\n        this._finishedSpans.length / this._maxExportBatchSize\n      );\n      for (let i = 0, j = count; i < j; i++) {\n        promises.push(this._flushOneBatch());\n      }\n      Promise.all(promises)\n        .then(() => {\n          resolve();\n        })\n        .catch(reject);\n    });\n  }\n\n  private _flushOneBatch(): Promise<void> {\n    this._clearTimer();\n    if (this._finishedSpans.length === 0) {\n      return Promise.resolve();\n    }\n    return new Promise((resolve, reject) => {\n      const timer = setTimeout(() => {\n        // don't wait anymore for export, this way the next batch can start\n        reject(new Error('Timeout'));\n      }, this._exportTimeoutMillis);\n      // prevent downstream exporter calls from generating spans\n      context.with(suppressTracing(context.active()), () => {\n        // Reset the finished spans buffer here because the next invocations of the _flush method\n        // could pass the same finished spans to the exporter if the buffer is cleared\n        // outside the execution of this callback.\n        let spans: ReadableSpan[];\n        if (this._finishedSpans.length <= this._maxExportBatchSize) {\n          spans = this._finishedSpans;\n          this._finishedSpans = [];\n        } else {\n          spans = this._finishedSpans.splice(0, this._maxExportBatchSize);\n        }\n\n        const doExport = () =>\n          this._exporter.export(spans, result => {\n            clearTimeout(timer);\n            if (result.code === ExportResultCode.SUCCESS) {\n              resolve();\n            } else {\n              reject(\n                result.error ??\n                  new Error('BatchSpanProcessor: span export failed')\n              );\n            }\n          });\n\n        let pendingResources: Array<Promise<void>> | null = null;\n        for (let i = 0, len = spans.length; i < len; i++) {\n          const span = spans[i];\n          if (\n            span.resource.asyncAttributesPending &&\n            span.resource.waitForAsyncAttributes\n          ) {\n            pendingResources ??= [];\n            pendingResources.push(span.resource.waitForAsyncAttributes());\n          }\n        }\n\n        // Avoid scheduling a promise to make the behavior more predictable and easier to test\n        if (pendingResources === null) {\n          doExport();\n        } else {\n          Promise.all(pendingResources).then(doExport, err => {\n            globalErrorHandler(err);\n            reject(err);\n          });\n        }\n      });\n    });\n  }\n\n  private _maybeStartTimer() {\n    if (this._isExporting) return;\n    const flush = () => {\n      this._isExporting = true;\n      this._flushOneBatch()\n        .finally(() => {\n          this._isExporting = false;\n          if (this._finishedSpans.length > 0) {\n            this._clearTimer();\n            this._maybeStartTimer();\n          }\n        })\n        .catch(e => {\n          this._isExporting = false;\n          globalErrorHandler(e);\n        });\n    };\n    // we only wait if the queue doesn't have enough elements yet\n    if (this._finishedSpans.length >= this._maxExportBatchSize) {\n      return flush();\n    }\n    if (this._timer !== undefined) return;\n    this._timer = setTimeout(() => flush(), this._scheduledDelayMillis);\n    unrefTimer(this._timer);\n  }\n\n  private _clearTimer() {\n    if (this._timer !== undefined) {\n      clearTimeout(this._timer);\n      this._timer = undefined;\n    }\n  }\n\n  protected abstract onShutdown(): void;\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { BatchSpanProcessorBase } from '../../../export/BatchSpanProcessorBase';\nimport { BufferConfig } from '../../../types';\n\nexport class BatchSpanProcessor extends BatchSpanProcessorBase<BufferConfig> {\n  protected onShutdown(): void {}\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { IdGenerator } from '../../IdGenerator';\n\nconst SPAN_ID_BYTES = 8;\nconst TRACE_ID_BYTES = 16;\n\nexport class RandomIdGenerator implements IdGenerator {\n  /**\n   * Returns a random 16-byte trace ID formatted/encoded as a 32 lowercase hex\n   * characters corresponding to 128 bits.\n   */\n  generateTraceId = getIdGenerator(TRACE_ID_BYTES);\n\n  /**\n   * Returns a random 8-byte span ID formatted/encoded as a 16 lowercase hex\n   * characters corresponding to 64 bits.\n   */\n  generateSpanId = getIdGenerator(SPAN_ID_BYTES);\n}\n\nconst SHARED_BUFFER = Buffer.allocUnsafe(TRACE_ID_BYTES);\nfunction getIdGenerator(bytes: number): () => string {\n  return function generateId() {\n    for (let i = 0; i < bytes / 4; i++) {\n      // unsigned right shift drops decimal part of the number\n      // it is required because if a number between 2**32 and 2**32 - 1 is generated, an out of range error is thrown by writeUInt32BE\n      SHARED_BUFFER.writeUInt32BE((Math.random() * 2 ** 32) >>> 0, i * 4);\n    }\n\n    // If buffer is all 0, set the last byte to 1 to guarantee a valid w3c id is generated\n    for (let i = 0; i < bytes; i++) {\n      if (SHARED_BUFFER[i] > 0) {\n        break;\n      } else if (i === bytes - 1) {\n        SHARED_BUFFER[bytes - 1] = 1;\n      }\n    }\n\n    return SHARED_BUFFER.toString('hex', 0, bytes);\n  };\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport { BatchSpanProcessor } from './export/BatchSpanProcessor';\nexport { RandomIdGenerator } from './RandomIdGenerator';\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport { BatchSpanProcessor, RandomIdGenerator } from './node';\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as api from '@opentelemetry/api';\nimport {\n  InstrumentationLibrary,\n  sanitizeAttributes,\n  isTracingSuppressed,\n} from '@opentelemetry/core';\nimport { IResource } from '@opentelemetry/resources';\nimport { BasicTracerProvider } from './BasicTracerProvider';\nimport { Span } from './Span';\nimport { GeneralLimits, SpanLimits, TracerConfig } from './types';\nimport { mergeConfig } from './utility';\nimport { SpanProcessor } from './SpanProcessor';\nimport { Sampler } from './Sampler';\nimport { IdGenerator } from './IdGenerator';\nimport { RandomIdGenerator } from './platform';\n\n/**\n * This class represents a basic tracer.\n */\nexport class Tracer implements api.Tracer {\n  private readonly _sampler: Sampler;\n  private readonly _generalLimits: GeneralLimits;\n  private readonly _spanLimits: SpanLimits;\n  private readonly _idGenerator: IdGenerator;\n  readonly resource: IResource;\n  readonly instrumentationLibrary: InstrumentationLibrary;\n\n  /**\n   * Constructs a new Tracer instance.\n   */\n  constructor(\n    instrumentationLibrary: InstrumentationLibrary,\n    config: TracerConfig,\n    private _tracerProvider: BasicTracerProvider\n  ) {\n    const localConfig = mergeConfig(config);\n    this._sampler = localConfig.sampler;\n    this._generalLimits = localConfig.generalLimits;\n    this._spanLimits = localConfig.spanLimits;\n    this._idGenerator = config.idGenerator || new RandomIdGenerator();\n    this.resource = _tracerProvider.resource;\n    this.instrumentationLibrary = instrumentationLibrary;\n  }\n\n  /**\n   * Starts a new Span or returns the default NoopSpan based on the sampling\n   * decision.\n   */\n  startSpan(\n    name: string,\n    options: api.SpanOptions = {},\n    context = api.context.active()\n  ): api.Span {\n    // remove span from context in case a root span is requested via options\n    if (options.root) {\n      context = api.trace.deleteSpan(context);\n    }\n    const parentSpan = api.trace.getSpan(context);\n\n    if (isTracingSuppressed(context)) {\n      api.diag.debug('Instrumentation suppressed, returning Noop Span');\n      const nonRecordingSpan = api.trace.wrapSpanContext(\n        api.INVALID_SPAN_CONTEXT\n      );\n      return nonRecordingSpan;\n    }\n\n    const parentSpanContext = parentSpan?.spanContext();\n    const spanId = this._idGenerator.generateSpanId();\n    let traceId;\n    let traceState;\n    let parentSpanId;\n    if (\n      !parentSpanContext ||\n      !api.trace.isSpanContextValid(parentSpanContext)\n    ) {\n      // New root span.\n      traceId = this._idGenerator.generateTraceId();\n    } else {\n      // New child span.\n      traceId = parentSpanContext.traceId;\n      traceState = parentSpanContext.traceState;\n      parentSpanId = parentSpanContext.spanId;\n    }\n\n    const spanKind = options.kind ?? api.SpanKind.INTERNAL;\n    const links = (options.links ?? []).map(link => {\n      return {\n        context: link.context,\n        attributes: sanitizeAttributes(link.attributes),\n      };\n    });\n    const attributes = sanitizeAttributes(options.attributes);\n    // make sampling decision\n    const samplingResult = this._sampler.shouldSample(\n      context,\n      traceId,\n      name,\n      spanKind,\n      attributes,\n      links\n    );\n\n    traceState = samplingResult.traceState ?? traceState;\n\n    const traceFlags =\n      samplingResult.decision === api.SamplingDecision.RECORD_AND_SAMPLED\n        ? api.TraceFlags.SAMPLED\n        : api.TraceFlags.NONE;\n    const spanContext = { traceId, spanId, traceFlags, traceState };\n    if (samplingResult.decision === api.SamplingDecision.NOT_RECORD) {\n      api.diag.debug(\n        'Recording is off, propagating context in a non-recording span'\n      );\n      const nonRecordingSpan = api.trace.wrapSpanContext(spanContext);\n      return nonRecordingSpan;\n    }\n\n    // Set initial span attributes. The attributes object may have been mutated\n    // by the sampler, so we sanitize the merged attributes before setting them.\n    const initAttributes = sanitizeAttributes(\n      Object.assign(attributes, samplingResult.attributes)\n    );\n\n    const span = new Span(\n      this,\n      context,\n      name,\n      spanContext,\n      spanKind,\n      parentSpanId,\n      links,\n      options.startTime,\n      undefined,\n      initAttributes\n    );\n    return span;\n  }\n\n  /**\n   * Starts a new {@link Span} and calls the given function passing it the\n   * created span as first argument.\n   * Additionally the new span gets set in context and this context is activated\n   * for the duration of the function call.\n   *\n   * @param name The name of the span\n   * @param [options] SpanOptions used for span creation\n   * @param [context] Context to use to extract parent\n   * @param fn function called in the context of the span and receives the newly created span as an argument\n   * @returns return value of fn\n   * @example\n   *   const something = tracer.startActiveSpan('op', span => {\n   *     try {\n   *       do some work\n   *       span.setStatus({code: SpanStatusCode.OK});\n   *       return something;\n   *     } catch (err) {\n   *       span.setStatus({\n   *         code: SpanStatusCode.ERROR,\n   *         message: err.message,\n   *       });\n   *       throw err;\n   *     } finally {\n   *       span.end();\n   *     }\n   *   });\n   * @example\n   *   const span = tracer.startActiveSpan('op', span => {\n   *     try {\n   *       do some work\n   *       return span;\n   *     } catch (err) {\n   *       span.setStatus({\n   *         code: SpanStatusCode.ERROR,\n   *         message: err.message,\n   *       });\n   *       throw err;\n   *     }\n   *   });\n   *   do some more work\n   *   span.end();\n   */\n  startActiveSpan<F extends (span: api.Span) => ReturnType<F>>(\n    name: string,\n    fn: F\n  ): ReturnType<F>;\n  startActiveSpan<F extends (span: api.Span) => ReturnType<F>>(\n    name: string,\n    opts: api.SpanOptions,\n    fn: F\n  ): ReturnType<F>;\n  startActiveSpan<F extends (span: api.Span) => ReturnType<F>>(\n    name: string,\n    opts: api.SpanOptions,\n    ctx: api.Context,\n    fn: F\n  ): ReturnType<F>;\n  startActiveSpan<F extends (span: api.Span) => ReturnType<F>>(\n    name: string,\n    arg2?: F | api.SpanOptions,\n    arg3?: F | api.Context,\n    arg4?: F\n  ): ReturnType<F> | undefined {\n    let opts: api.SpanOptions | undefined;\n    let ctx: api.Context | undefined;\n    let fn: F;\n\n    if (arguments.length < 2) {\n      return;\n    } else if (arguments.length === 2) {\n      fn = arg2 as F;\n    } else if (arguments.length === 3) {\n      opts = arg2 as api.SpanOptions | undefined;\n      fn = arg3 as F;\n    } else {\n      opts = arg2 as api.SpanOptions | undefined;\n      ctx = arg3 as api.Context | undefined;\n      fn = arg4 as F;\n    }\n\n    const parentContext = ctx ?? api.context.active();\n    const span = this.startSpan(name, opts, parentContext);\n    const contextWithSpanSet = api.trace.setSpan(parentContext, span);\n\n    return api.context.with(contextWithSpanSet, fn, undefined, span);\n  }\n\n  /** Returns the active {@link GeneralLimits}. */\n  getGeneralLimits(): GeneralLimits {\n    return this._generalLimits;\n  }\n\n  /** Returns the active {@link SpanLimits}. */\n  getSpanLimits(): SpanLimits {\n    return this._spanLimits;\n  }\n\n  getActiveSpanProcessor(): SpanProcessor {\n    return this._tracerProvider.getActiveSpanProcessor();\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport function defaultServiceName(): string {\n  return `unknown_service:${process.argv0}`;\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport { defaultServiceName } from './default-service-name';\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport { defaultServiceName } from './node';\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { diag } from '@opentelemetry/api';\nimport {\n  SEMRESATTRS_SERVICE_NAME,\n  SEMRESATTRS_TELEMETRY_SDK_LANGUAGE,\n  SEMRESATTRS_TELEMETRY_SDK_NAME,\n  SEMRESATTRS_TELEMETRY_SDK_VERSION,\n} from '@opentelemetry/semantic-conventions';\nimport { SDK_INFO } from '@opentelemetry/core';\nimport { ResourceAttributes } from './types';\nimport { defaultServiceName } from './platform';\nimport { IResource } from './IResource';\n\n/**\n * A Resource describes the entity for which a signals (metrics or trace) are\n * collected.\n */\nexport class Resource implements IResource {\n  static readonly EMPTY = new Resource({});\n  private _syncAttributes?: ResourceAttributes;\n  private _asyncAttributesPromise?: Promise<ResourceAttributes>;\n  private _attributes?: ResourceAttributes;\n\n  /**\n   * Check if async attributes have resolved. This is useful to avoid awaiting\n   * waitForAsyncAttributes (which will introduce asynchronous behavior) when not necessary.\n   *\n   * @returns true if the resource \"attributes\" property is not yet settled to its final value\n   */\n  public asyncAttributesPending?: boolean;\n\n  /**\n   * Returns an empty Resource\n   */\n  static empty(): IResource {\n    return Resource.EMPTY;\n  }\n\n  /**\n   * Returns a Resource that identifies the SDK in use.\n   */\n  static default(): IResource {\n    return new Resource({\n      [SEMRESATTRS_SERVICE_NAME]: defaultServiceName(),\n      [SEMRESATTRS_TELEMETRY_SDK_LANGUAGE]:\n        SDK_INFO[SEMRESATTRS_TELEMETRY_SDK_LANGUAGE],\n      [SEMRESATTRS_TELEMETRY_SDK_NAME]:\n        SDK_INFO[SEMRESATTRS_TELEMETRY_SDK_NAME],\n      [SEMRESATTRS_TELEMETRY_SDK_VERSION]:\n        SDK_INFO[SEMRESATTRS_TELEMETRY_SDK_VERSION],\n    });\n  }\n\n  constructor(\n    /**\n     * A dictionary of attributes with string keys and values that provide\n     * information about the entity as numbers, strings or booleans\n     * TODO: Consider to add check/validation on attributes.\n     */\n    attributes: ResourceAttributes,\n    asyncAttributesPromise?: Promise<ResourceAttributes>\n  ) {\n    this._attributes = attributes;\n    this.asyncAttributesPending = asyncAttributesPromise != null;\n    this._syncAttributes = this._attributes ?? {};\n    this._asyncAttributesPromise = asyncAttributesPromise?.then(\n      asyncAttributes => {\n        this._attributes = Object.assign({}, this._attributes, asyncAttributes);\n        this.asyncAttributesPending = false;\n        return asyncAttributes;\n      },\n      err => {\n        diag.debug(\"a resource's async attributes promise rejected: %s\", err);\n        this.asyncAttributesPending = false;\n        return {};\n      }\n    );\n  }\n\n  get attributes(): ResourceAttributes {\n    if (this.asyncAttributesPending) {\n      diag.error(\n        'Accessing resource attributes before async attributes settled'\n      );\n    }\n\n    return this._attributes ?? {};\n  }\n\n  /**\n   * Returns a promise that will never be rejected. Resolves when all async attributes have finished being added to\n   * this Resource's attributes. This is useful in exporters to block until resource detection\n   * has finished.\n   */\n  async waitForAsyncAttributes?(): Promise<void> {\n    if (this.asyncAttributesPending) {\n      await this._asyncAttributesPromise;\n    }\n  }\n\n  /**\n   * Returns a new, merged {@link Resource} by merging the current Resource\n   * with the other Resource. In case of a collision, other Resource takes\n   * precedence.\n   *\n   * @param other the Resource that will be merged with this.\n   * @returns the newly merged Resource.\n   */\n  merge(other: IResource | null): IResource {\n    if (!other) return this;\n\n    // SpanAttributes from other resource overwrite attributes from this resource.\n    const mergedSyncAttributes = {\n      ...this._syncAttributes,\n      //Support for old resource implementation where _syncAttributes is not defined\n      ...((other as Resource)._syncAttributes ?? other.attributes),\n    };\n\n    if (\n      !this._asyncAttributesPromise &&\n      !(other as Resource)._asyncAttributesPromise\n    ) {\n      return new Resource(mergedSyncAttributes);\n    }\n\n    const mergedAttributesPromise = Promise.all([\n      this._asyncAttributesPromise,\n      (other as Resource)._asyncAttributesPromise,\n    ]).then(([thisAsyncAttributes, otherAsyncAttributes]) => {\n      return {\n        ...this._syncAttributes,\n        ...thisAsyncAttributes,\n        //Support for old resource implementation where _syncAttributes is not defined\n        ...((other as Resource)._syncAttributes ?? other.attributes),\n        ...otherAsyncAttributes,\n      };\n    });\n\n    return new Resource(mergedSyncAttributes, mergedAttributesPromise);\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport const normalizeArch = (nodeArchString: string): string => {\n  // Maps from https://nodejs.org/api/os.html#osarch to arch values in spec:\n  // https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/resource/semantic_conventions/host.md\n  switch (nodeArchString) {\n    case 'arm':\n      return 'arm32';\n    case 'ppc':\n      return 'ppc32';\n    case 'x64':\n      return 'amd64';\n    default:\n      return nodeArchString;\n  }\n};\n\nexport const normalizeType = (nodePlatform: string): string => {\n  // Maps from https://nodejs.org/api/os.html#osplatform to arch values in spec:\n  // https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/resource/semantic_conventions/os.md\n  switch (nodePlatform) {\n    case 'sunos':\n      return 'solaris';\n    case 'win32':\n      return 'windows';\n    default:\n      return nodePlatform;\n  }\n};\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as child_process from 'child_process';\nimport * as util from 'util';\n\nexport const execAsync = util.promisify(child_process.exec);\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { execAsync } from './execAsync';\nimport { diag } from '@opentelemetry/api';\n\nexport async function getMachineId(): Promise<string> {\n  try {\n    const result = await execAsync('ioreg -rd1 -c \"IOPlatformExpertDevice\"');\n\n    const idLine = result.stdout\n      .split('\\n')\n      .find(line => line.includes('IOPlatformUUID'));\n\n    if (!idLine) {\n      return '';\n    }\n\n    const parts = idLine.split('\" = \"');\n    if (parts.length === 2) {\n      return parts[1].slice(0, -1);\n    }\n  } catch (e) {\n    diag.debug(`error reading machine id: ${e}`);\n  }\n\n  return '';\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { promises as fs } from 'fs';\nimport { diag } from '@opentelemetry/api';\n\nexport async function getMachineId(): Promise<string> {\n  const paths = ['/etc/machine-id', '/var/lib/dbus/machine-id'];\n\n  for (const path of paths) {\n    try {\n      const result = await fs.readFile(path, { encoding: 'utf8' });\n      return result.trim();\n    } catch (e) {\n      diag.debug(`error reading machine id: ${e}`);\n    }\n  }\n\n  return '';\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { promises as fs } from 'fs';\nimport { execAsync } from './execAsync';\nimport { diag } from '@opentelemetry/api';\n\nexport async function getMachineId(): Promise<string> {\n  try {\n    const result = await fs.readFile('/etc/hostid', { encoding: 'utf8' });\n    return result.trim();\n  } catch (e) {\n    diag.debug(`error reading machine id: ${e}`);\n  }\n\n  try {\n    const result = await execAsync('kenv -q smbios.system.uuid');\n    return result.stdout.trim();\n  } catch (e) {\n    diag.debug(`error reading machine id: ${e}`);\n  }\n\n  return '';\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as process from 'process';\nimport { execAsync } from './execAsync';\nimport { diag } from '@opentelemetry/api';\n\nexport async function getMachineId(): Promise<string> {\n  const args =\n    'QUERY HKEY_LOCAL_MACHINE\\\\SOFTWARE\\\\Microsoft\\\\Cryptography /v MachineGuid';\n  let command = '%windir%\\\\System32\\\\REG.exe';\n  if (process.arch === 'ia32' && 'PROCESSOR_ARCHITEW6432' in process.env) {\n    command = '%windir%\\\\sysnative\\\\cmd.exe /c ' + command;\n  }\n\n  try {\n    const result = await execAsync(`${command} ${args}`);\n    const parts = result.stdout.split('REG_SZ');\n    if (parts.length === 2) {\n      return parts[1].trim();\n    }\n  } catch (e) {\n    diag.debug(`error reading machine id: ${e}`);\n  }\n\n  return '';\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { diag } from '@opentelemetry/api';\n\nexport async function getMachineId(): Promise<string> {\n  diag.debug('could not read machine-id: unsupported platform');\n  return '';\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as process from 'process';\n\nlet getMachineId: () => Promise<string>;\n\nswitch (process.platform) {\n  case 'darwin':\n    ({ getMachineId } = require('./getMachineId-darwin'));\n    break;\n  case 'linux':\n    ({ getMachineId } = require('./getMachineId-linux'));\n    break;\n  case 'freebsd':\n    ({ getMachineId } = require('./getMachineId-bsd'));\n    break;\n  case 'win32':\n    ({ getMachineId } = require('./getMachineId-win'));\n    break;\n  default:\n    ({ getMachineId } = require('./getMachineId-unsupported'));\n}\n\nexport { getMachineId };\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  SEMRESATTRS_HOST_ARCH,\n  SEMRESATTRS_HOST_ID,\n  SEMRESATTRS_HOST_NAME,\n} from '@opentelemetry/semantic-conventions';\nimport { Resource } from '../../../Resource';\nimport { DetectorSync, ResourceAttributes } from '../../../types';\nimport { ResourceDetectionConfig } from '../../../config';\nimport { arch, hostname } from 'os';\nimport { normalizeArch } from './utils';\nimport { getMachineId } from './machine-id/getMachineId';\n\n/**\n * HostDetectorSync detects the resources related to the host current process is\n * running on. Currently only non-cloud-based attributes are included.\n */\nclass HostDetectorSync implements DetectorSync {\n  detect(_config?: ResourceDetectionConfig): Resource {\n    const attributes: ResourceAttributes = {\n      [SEMRESATTRS_HOST_NAME]: hostname(),\n      [SEMRESATTRS_HOST_ARCH]: normalizeArch(arch()),\n    };\n\n    return new Resource(attributes, this._getAsyncAttributes());\n  }\n\n  private _getAsyncAttributes(): Promise<ResourceAttributes> {\n    return getMachineId().then(machineId => {\n      const attributes: ResourceAttributes = {};\n      if (machineId) {\n        attributes[SEMRESATTRS_HOST_ID] = machineId;\n      }\n      return attributes;\n    });\n  }\n}\n\nexport const hostDetectorSync = new HostDetectorSync();\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Detector } from '../../../types';\nimport { ResourceDetectionConfig } from '../../../config';\nimport { IResource } from '../../../IResource';\nimport { hostDetectorSync } from './HostDetectorSync';\n\n/**\n * HostDetector detects the resources related to the host current process is\n * running on. Currently only non-cloud-based attributes are included.\n */\nclass HostDetector implements Detector {\n  detect(_config?: ResourceDetectionConfig): Promise<IResource> {\n    return Promise.resolve(hostDetectorSync.detect(_config));\n  }\n}\n\nexport const hostDetector = new HostDetector();\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  SEMRESATTRS_OS_TYPE,\n  SEMRESATTRS_OS_VERSION,\n} from '@opentelemetry/semantic-conventions';\nimport { Resource } from '../../../Resource';\nimport { DetectorSync, ResourceAttributes } from '../../../types';\nimport { ResourceDetectionConfig } from '../../../config';\nimport { platform, release } from 'os';\nimport { normalizeType } from './utils';\n\n/**\n * OSDetectorSync detects the resources related to the operating system (OS) on\n * which the process represented by this resource is running.\n */\nclass OSDetectorSync implements DetectorSync {\n  detect(_config?: ResourceDetectionConfig): Resource {\n    const attributes: ResourceAttributes = {\n      [SEMRESATTRS_OS_TYPE]: normalizeType(platform()),\n      [SEMRESATTRS_OS_VERSION]: release(),\n    };\n    return new Resource(attributes);\n  }\n}\n\nexport const osDetectorSync = new OSDetectorSync();\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Detector } from '../../../types';\nimport { ResourceDetectionConfig } from '../../../config';\nimport { IResource } from '../../../IResource';\nimport { osDetectorSync } from './OSDetectorSync';\n\n/**\n * OSDetector detects the resources related to the operating system (OS) on\n * which the process represented by this resource is running.\n */\nclass OSDetector implements Detector {\n  detect(_config?: ResourceDetectionConfig): Promise<IResource> {\n    return Promise.resolve(osDetectorSync.detect(_config));\n  }\n}\n\nexport const osDetector = new OSDetector();\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { diag } from '@opentelemetry/api';\nimport {\n  SEMRESATTRS_PROCESS_COMMAND,\n  SEMRESATTRS_PROCESS_COMMAND_ARGS,\n  SEMRESATTRS_PROCESS_EXECUTABLE_NAME,\n  SEMRESATTRS_PROCESS_EXECUTABLE_PATH,\n  SEMRESATTRS_PROCESS_OWNER,\n  SEMRESATTRS_PROCESS_PID,\n  SEMRESATTRS_PROCESS_RUNTIME_DESCRIPTION,\n  SEMRESATTRS_PROCESS_RUNTIME_NAME,\n  SEMRESATTRS_PROCESS_RUNTIME_VERSION,\n} from '@opentelemetry/semantic-conventions';\nimport { Resource } from '../../../Resource';\nimport { DetectorSync, ResourceAttributes } from '../../../types';\nimport { ResourceDetectionConfig } from '../../../config';\nimport { IResource } from '../../../IResource';\nimport * as os from 'os';\n\n/**\n * ProcessDetectorSync will be used to detect the resources related current process running\n * and being instrumented from the NodeJS Process module.\n */\nclass ProcessDetectorSync implements DetectorSync {\n  detect(_config?: ResourceDetectionConfig): IResource {\n    const attributes: ResourceAttributes = {\n      [SEMRESATTRS_PROCESS_PID]: process.pid,\n      [SEMRESATTRS_PROCESS_EXECUTABLE_NAME]: process.title,\n      [SEMRESATTRS_PROCESS_EXECUTABLE_PATH]: process.execPath,\n      [SEMRESATTRS_PROCESS_COMMAND_ARGS]: [\n        process.argv[0],\n        ...process.execArgv,\n        ...process.argv.slice(1),\n      ],\n      [SEMRESATTRS_PROCESS_RUNTIME_VERSION]: process.versions.node,\n      [SEMRESATTRS_PROCESS_RUNTIME_NAME]: 'nodejs',\n      [SEMRESATTRS_PROCESS_RUNTIME_DESCRIPTION]: 'Node.js',\n    };\n\n    if (process.argv.length > 1) {\n      attributes[SEMRESATTRS_PROCESS_COMMAND] = process.argv[1];\n    }\n\n    try {\n      const userInfo = os.userInfo();\n      attributes[SEMRESATTRS_PROCESS_OWNER] = userInfo.username;\n    } catch (e) {\n      diag.debug(`error obtaining process owner: ${e}`);\n    }\n\n    return new Resource(attributes);\n  }\n}\n\nexport const processDetectorSync = new ProcessDetectorSync();\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Detector } from '../../../types';\nimport { ResourceDetectionConfig } from '../../../config';\nimport { IResource } from '../../../IResource';\nimport { processDetectorSync } from './ProcessDetectorSync';\n\n/**\n * ProcessDetector will be used to detect the resources related current process running\n * and being instrumented from the NodeJS Process module.\n */\nclass ProcessDetector implements Detector {\n  detect(config?: ResourceDetectionConfig): Promise<IResource> {\n    return Promise.resolve(processDetectorSync.detect(config));\n  }\n}\n\nexport const processDetector = new ProcessDetector();\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SEMRESATTRS_SERVICE_INSTANCE_ID } from '@opentelemetry/semantic-conventions';\nimport { Resource } from '../../../Resource';\nimport { DetectorSync, ResourceAttributes } from '../../../types';\nimport { ResourceDetectionConfig } from '../../../config';\nimport { randomUUID } from 'crypto';\n\n/**\n * ServiceInstanceIdDetectorSync detects the resources related to the service instance ID.\n */\nclass ServiceInstanceIdDetectorSync implements DetectorSync {\n  detect(_config?: ResourceDetectionConfig): Resource {\n    const attributes: ResourceAttributes = {\n      [SEMRESATTRS_SERVICE_INSTANCE_ID]: randomUUID(),\n    };\n\n    return new Resource(attributes);\n  }\n}\n\n/**\n * @experimental\n */\nexport const serviceInstanceIdDetectorSync =\n  new ServiceInstanceIdDetectorSync();\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport { hostDetector } from './HostDetector';\nexport { hostDetectorSync } from './HostDetectorSync';\nexport { osDetector } from './OSDetector';\nexport { osDetectorSync } from './OSDetectorSync';\nexport { processDetector } from './ProcessDetector';\nexport { processDetectorSync } from './ProcessDetectorSync';\nexport { serviceInstanceIdDetectorSync } from './ServiceInstanceIdDetectorSync';\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport {\n  hostDetector,\n  hostDetectorSync,\n  osDetector,\n  osDetectorSync,\n  processDetector,\n  processDetectorSync,\n  serviceInstanceIdDetectorSync,\n} from './node';\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  SEMRESATTRS_PROCESS_RUNTIME_DESCRIPTION,\n  SEMRESATTRS_PROCESS_RUNTIME_NAME,\n  SEMRESATTRS_PROCESS_RUNTIME_VERSION,\n} from '@opentelemetry/semantic-conventions';\nimport { DetectorSync, ResourceAttributes } from '../types';\nimport { diag } from '@opentelemetry/api';\nimport { ResourceDetectionConfig } from '../config';\nimport { IResource } from '../IResource';\nimport { Resource } from '../Resource';\n\n/**\n * BrowserDetectorSync will be used to detect the resources related to browser.\n */\nclass BrowserDetectorSync implements DetectorSync {\n  detect(config?: ResourceDetectionConfig): IResource {\n    const isBrowser =\n      typeof navigator !== 'undefined' &&\n      global.process?.versions?.node === undefined && // Node.js v21 adds `navigator`\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore don't have Bun types\n      global.Bun?.version === undefined; // Bun (bun.sh) defines `navigator`\n    if (!isBrowser) {\n      return Resource.empty();\n    }\n    const browserResource: ResourceAttributes = {\n      [SEMRESATTRS_PROCESS_RUNTIME_NAME]: 'browser',\n      [SEMRESATTRS_PROCESS_RUNTIME_DESCRIPTION]: 'Web Browser',\n      [SEMRESATTRS_PROCESS_RUNTIME_VERSION]: navigator.userAgent,\n    };\n    return this._getResourceAttributes(browserResource, config);\n  }\n  /**\n   * Validates process resource attribute map from process variables\n   *\n   * @param browserResource The un-sanitized resource attributes from process as key/value pairs.\n   * @param config: Config\n   * @returns The sanitized resource attributes.\n   */\n  private _getResourceAttributes(\n    browserResource: ResourceAttributes,\n    _config?: ResourceDetectionConfig\n  ) {\n    if (browserResource[SEMRESATTRS_PROCESS_RUNTIME_VERSION] === '') {\n      diag.debug(\n        'BrowserDetector failed: Unable to find required browser resources. '\n      );\n      return Resource.empty();\n    } else {\n      return new Resource({\n        ...browserResource,\n      });\n    }\n  }\n}\n\nexport const browserDetectorSync = new BrowserDetectorSync();\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { IResource } from '../IResource';\nimport { ResourceDetectionConfig } from '../config';\nimport { Detector } from '../types';\nimport { browserDetectorSync } from './BrowserDetectorSync';\n\n/**\n * BrowserDetector will be used to detect the resources related to browser.\n */\nclass BrowserDetector implements Detector {\n  detect(config?: ResourceDetectionConfig): Promise<IResource> {\n    return Promise.resolve(browserDetectorSync.detect(config));\n  }\n}\n\nexport const browserDetector = new BrowserDetector();\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { diag } from '@opentelemetry/api';\nimport { getEnv } from '@opentelemetry/core';\nimport { SEMRESATTRS_SERVICE_NAME } from '@opentelemetry/semantic-conventions';\nimport { Resource } from '../Resource';\nimport { DetectorSync, ResourceAttributes } from '../types';\nimport { ResourceDetectionConfig } from '../config';\nimport { IResource } from '../IResource';\n\n/**\n * EnvDetectorSync can be used to detect the presence of and create a Resource\n * from the OTEL_RESOURCE_ATTRIBUTES environment variable.\n */\nclass EnvDetectorSync implements DetectorSync {\n  // Type, attribute keys, and attribute values should not exceed 256 characters.\n  private readonly _MAX_LENGTH = 255;\n\n  // OTEL_RESOURCE_ATTRIBUTES is a comma-separated list of attributes.\n  private readonly _COMMA_SEPARATOR = ',';\n\n  // OTEL_RESOURCE_ATTRIBUTES contains key value pair separated by '='.\n  private readonly _LABEL_KEY_VALUE_SPLITTER = '=';\n\n  private readonly _ERROR_MESSAGE_INVALID_CHARS =\n    'should be a ASCII string with a length greater than 0 and not exceed ' +\n    this._MAX_LENGTH +\n    ' characters.';\n\n  private readonly _ERROR_MESSAGE_INVALID_VALUE =\n    'should be a ASCII string with a length not exceed ' +\n    this._MAX_LENGTH +\n    ' characters.';\n\n  /**\n   * Returns a {@link Resource} populated with attributes from the\n   * OTEL_RESOURCE_ATTRIBUTES environment variable. Note this is an async\n   * function to conform to the Detector interface.\n   *\n   * @param config The resource detection config\n   */\n  detect(_config?: ResourceDetectionConfig): IResource {\n    const attributes: ResourceAttributes = {};\n    const env = getEnv();\n\n    const rawAttributes = env.OTEL_RESOURCE_ATTRIBUTES;\n    const serviceName = env.OTEL_SERVICE_NAME;\n\n    if (rawAttributes) {\n      try {\n        const parsedAttributes = this._parseResourceAttributes(rawAttributes);\n        Object.assign(attributes, parsedAttributes);\n      } catch (e) {\n        diag.debug(`EnvDetector failed: ${e.message}`);\n      }\n    }\n\n    if (serviceName) {\n      attributes[SEMRESATTRS_SERVICE_NAME] = serviceName;\n    }\n\n    return new Resource(attributes);\n  }\n\n  /**\n   * Creates an attribute map from the OTEL_RESOURCE_ATTRIBUTES environment\n   * variable.\n   *\n   * OTEL_RESOURCE_ATTRIBUTES: A comma-separated list of attributes describing\n   * the source in more detail, e.g. “key1=val1,key2=val2”. Domain names and\n   * paths are accepted as attribute keys. Values may be quoted or unquoted in\n   * general. If a value contains whitespace, =, or \" characters, it must\n   * always be quoted.\n   *\n   * @param rawEnvAttributes The resource attributes as a comma-separated list\n   * of key/value pairs.\n   * @returns The sanitized resource attributes.\n   */\n  private _parseResourceAttributes(\n    rawEnvAttributes?: string\n  ): ResourceAttributes {\n    if (!rawEnvAttributes) return {};\n\n    const attributes: ResourceAttributes = {};\n    const rawAttributes: string[] = rawEnvAttributes.split(\n      this._COMMA_SEPARATOR,\n      -1\n    );\n    for (const rawAttribute of rawAttributes) {\n      const keyValuePair: string[] = rawAttribute.split(\n        this._LABEL_KEY_VALUE_SPLITTER,\n        -1\n      );\n      if (keyValuePair.length !== 2) {\n        continue;\n      }\n      let [key, value] = keyValuePair;\n      // Leading and trailing whitespaces are trimmed.\n      key = key.trim();\n      value = value.trim().split(/^\"|\"$/).join('');\n      if (!this._isValidAndNotEmpty(key)) {\n        throw new Error(`Attribute key ${this._ERROR_MESSAGE_INVALID_CHARS}`);\n      }\n      if (!this._isValid(value)) {\n        throw new Error(`Attribute value ${this._ERROR_MESSAGE_INVALID_VALUE}`);\n      }\n      attributes[key] = decodeURIComponent(value);\n    }\n    return attributes;\n  }\n\n  /**\n   * Determines whether the given String is a valid printable ASCII string with\n   * a length not exceed _MAX_LENGTH characters.\n   *\n   * @param str The String to be validated.\n   * @returns Whether the String is valid.\n   */\n  private _isValid(name: string): boolean {\n    return name.length <= this._MAX_LENGTH && this._isBaggageOctetString(name);\n  }\n\n  // https://www.w3.org/TR/baggage/#definition\n  private _isBaggageOctetString(str: string): boolean {\n    for (let i = 0; i < str.length; i++) {\n      const ch = str.charCodeAt(i);\n      if (ch < 0x21 || ch === 0x2c || ch === 0x3b || ch === 0x5c || ch > 0x7e) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Determines whether the given String is a valid printable ASCII string with\n   * a length greater than 0 and not exceed _MAX_LENGTH characters.\n   *\n   * @param str The String to be validated.\n   * @returns Whether the String is valid and not empty.\n   */\n  private _isValidAndNotEmpty(str: string): boolean {\n    return str.length > 0 && this._isValid(str);\n  }\n}\n\nexport const envDetectorSync = new EnvDetectorSync();\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Detector } from '../types';\nimport { ResourceDetectionConfig } from '../config';\nimport { IResource } from '../IResource';\nimport { envDetectorSync } from './EnvDetectorSync';\n\n/**\n * EnvDetector can be used to detect the presence of and create a Resource\n * from the OTEL_RESOURCE_ATTRIBUTES environment variable.\n */\nclass EnvDetector implements Detector {\n  /**\n   * Returns a {@link Resource} populated with attributes from the\n   * OTEL_RESOURCE_ATTRIBUTES environment variable. Note this is an async\n   * function to conform to the Detector interface.\n   *\n   * @param config The resource detection config\n   */\n  detect(config?: ResourceDetectionConfig): Promise<IResource> {\n    return Promise.resolve(envDetectorSync.detect(config));\n  }\n}\n\nexport const envDetector = new EnvDetector();\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport {\n  hostDetector,\n  hostDetectorSync,\n  osDetector,\n  osDetectorSync,\n  processDetector,\n  processDetectorSync,\n  serviceInstanceIdDetectorSync,\n} from './platform';\nexport { browserDetector } from './BrowserDetector';\nexport { envDetector } from './EnvDetector';\nexport { browserDetectorSync } from './BrowserDetectorSync';\nexport { envDetectorSync } from './EnvDetectorSync';\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const isPromiseLike = <R>(val: any): val is PromiseLike<R> => {\n  return (\n    val !== null && typeof val === 'object' && typeof val.then === 'function'\n  );\n};\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Resource } from './Resource';\nimport { ResourceDetectionConfig } from './config';\nimport { diag } from '@opentelemetry/api';\nimport { isPromiseLike } from './utils';\nimport { Detector, DetectorSync } from './types';\nimport { IResource } from './IResource';\n\n/**\n * Runs all resource detectors and returns the results merged into a single Resource. Promise\n * does not resolve until all the underlying detectors have resolved, unlike\n * detectResourcesSync.\n *\n * @deprecated use detectResourcesSync() instead.\n * @param config Configuration for resource detection\n */\nexport const detectResources = async (\n  config: ResourceDetectionConfig = {}\n): Promise<IResource> => {\n  const resources: IResource[] = await Promise.all(\n    (config.detectors || []).map(async d => {\n      try {\n        const resource = await d.detect(config);\n        diag.debug(`${d.constructor.name} found resource.`, resource);\n        return resource;\n      } catch (e) {\n        diag.debug(`${d.constructor.name} failed: ${e.message}`);\n        return Resource.empty();\n      }\n    })\n  );\n\n  // Future check if verbose logging is enabled issue #1903\n  logResources(resources);\n\n  return resources.reduce(\n    (acc, resource) => acc.merge(resource),\n    Resource.empty()\n  );\n};\n\n/**\n * Runs all resource detectors synchronously, merging their results. In case of attribute collision later resources will take precedence.\n *\n * @param config Configuration for resource detection\n */\nexport const detectResourcesSync = (\n  config: ResourceDetectionConfig = {}\n): IResource => {\n  const resources: IResource[] = (config.detectors ?? []).map(\n    (d: Detector | DetectorSync) => {\n      try {\n        const resourceOrPromise = d.detect(config);\n        let resource: IResource;\n        if (isPromiseLike<Resource>(resourceOrPromise)) {\n          const createPromise = async () => {\n            const resolvedResource = await resourceOrPromise;\n            await resolvedResource.waitForAsyncAttributes?.();\n            return resolvedResource.attributes;\n          };\n          resource = new Resource({}, createPromise());\n        } else {\n          resource = resourceOrPromise as IResource;\n        }\n\n        if (resource.waitForAsyncAttributes) {\n          void resource\n            .waitForAsyncAttributes()\n            .then(() =>\n              diag.debug(`${d.constructor.name} found resource.`, resource)\n            );\n        } else {\n          diag.debug(`${d.constructor.name} found resource.`, resource);\n        }\n\n        return resource;\n      } catch (e) {\n        diag.error(`${d.constructor.name} failed: ${e.message}`);\n        return Resource.empty();\n      }\n    }\n  );\n\n  const mergedResources = resources.reduce(\n    (acc, resource) => acc.merge(resource),\n    Resource.empty()\n  );\n\n  if (mergedResources.waitForAsyncAttributes) {\n    void mergedResources.waitForAsyncAttributes().then(() => {\n      // Future check if verbose logging is enabled issue #1903\n      logResources(resources);\n    });\n  }\n\n  return mergedResources;\n};\n\n/**\n * Writes debug information about the detected resources to the logger defined in the resource detection config, if one is provided.\n *\n * @param resources The array of {@link Resource} that should be logged. Empty entries will be ignored.\n */\nconst logResources = (resources: Array<IResource>) => {\n  resources.forEach(resource => {\n    // Print only populated resources\n    if (Object.keys(resource.attributes).length > 0) {\n      const resourceDebugString = JSON.stringify(resource.attributes, null, 4);\n      diag.verbose(resourceDebugString);\n    }\n  });\n};\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport { Resource } from './Resource';\nexport { IResource } from './IResource';\nexport { defaultServiceName } from './platform';\nexport { DetectorSync, ResourceAttributes, Detector } from './types';\nexport { ResourceDetectionConfig } from './config';\nexport {\n  browserDetector,\n  browserDetectorSync,\n  envDetector,\n  envDetectorSync,\n  hostDetector,\n  hostDetectorSync,\n  osDetector,\n  osDetectorSync,\n  processDetector,\n  processDetectorSync,\n  serviceInstanceIdDetectorSync,\n} from './detectors';\nexport { detectResourcesSync, detectResources } from './detect-resources';\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Context } from '@opentelemetry/api';\nimport { globalErrorHandler } from '@opentelemetry/core';\nimport { ReadableSpan } from './export/ReadableSpan';\nimport { Span } from './Span';\nimport { SpanProcessor } from './SpanProcessor';\n\n/**\n * Implementation of the {@link SpanProcessor} that simply forwards all\n * received events to a list of {@link SpanProcessor}s.\n */\nexport class MultiSpanProcessor implements SpanProcessor {\n  constructor(private readonly _spanProcessors: SpanProcessor[]) {}\n\n  forceFlush(): Promise<void> {\n    const promises: Promise<void>[] = [];\n\n    for (const spanProcessor of this._spanProcessors) {\n      promises.push(spanProcessor.forceFlush());\n    }\n    return new Promise(resolve => {\n      Promise.all(promises)\n        .then(() => {\n          resolve();\n        })\n        .catch(error => {\n          globalErrorHandler(\n            error || new Error('MultiSpanProcessor: forceFlush failed')\n          );\n          resolve();\n        });\n    });\n  }\n\n  onStart(span: Span, context: Context): void {\n    for (const spanProcessor of this._spanProcessors) {\n      spanProcessor.onStart(span, context);\n    }\n  }\n\n  onEnd(span: ReadableSpan): void {\n    for (const spanProcessor of this._spanProcessors) {\n      spanProcessor.onEnd(span);\n    }\n  }\n\n  shutdown(): Promise<void> {\n    const promises: Promise<void>[] = [];\n\n    for (const spanProcessor of this._spanProcessors) {\n      promises.push(spanProcessor.shutdown());\n    }\n    return new Promise((resolve, reject) => {\n      Promise.all(promises).then(() => {\n        resolve();\n      }, reject);\n    });\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Context } from '@opentelemetry/api';\nimport { ReadableSpan } from './ReadableSpan';\nimport { Span } from '../Span';\nimport { SpanProcessor } from '../SpanProcessor';\n\n/** No-op implementation of SpanProcessor */\nexport class NoopSpanProcessor implements SpanProcessor {\n  onStart(_span: Span, _context: Context): void {}\n  onEnd(_span: ReadableSpan): void {}\n  shutdown(): Promise<void> {\n    return Promise.resolve();\n  }\n  forceFlush(): Promise<void> {\n    return Promise.resolve();\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  context,\n  diag,\n  propagation,\n  TextMapPropagator,\n  trace,\n  TracerProvider,\n} from '@opentelemetry/api';\nimport {\n  CompositePropagator,\n  W3CBaggagePropagator,\n  W3CTraceContextPropagator,\n  getEnv,\n  merge,\n} from '@opentelemetry/core';\nimport { IResource, Resource } from '@opentelemetry/resources';\nimport { SpanProcessor } from './SpanProcessor';\nimport { Tracer } from './Tracer';\nimport { loadDefaultConfig } from './config';\nimport { MultiSpanProcessor } from './MultiSpanProcessor';\nimport { NoopSpanProcessor } from './export/NoopSpanProcessor';\nimport { SDKRegistrationConfig, TracerConfig } from './types';\nimport { SpanExporter } from './export/SpanExporter';\nimport { BatchSpanProcessor } from './platform';\nimport { reconfigureLimits } from './utility';\n\nexport type PROPAGATOR_FACTORY = () => TextMapPropagator;\nexport type EXPORTER_FACTORY = () => SpanExporter;\n\nexport enum ForceFlushState {\n  'resolved',\n  'timeout',\n  'error',\n  'unresolved',\n}\n\n/**\n * This class represents a basic tracer provider which platform libraries can extend\n */\nexport class BasicTracerProvider implements TracerProvider {\n  protected static readonly _registeredPropagators = new Map<\n    string,\n    PROPAGATOR_FACTORY\n  >([\n    ['tracecontext', () => new W3CTraceContextPropagator()],\n    ['baggage', () => new W3CBaggagePropagator()],\n  ]);\n\n  protected static readonly _registeredExporters = new Map<\n    string,\n    EXPORTER_FACTORY\n  >();\n\n  private readonly _config: TracerConfig;\n  private readonly _registeredSpanProcessors: SpanProcessor[] = [];\n  private readonly _tracers: Map<string, Tracer> = new Map();\n\n  activeSpanProcessor: SpanProcessor;\n  readonly resource: IResource;\n\n  constructor(config: TracerConfig = {}) {\n    const mergedConfig = merge(\n      {},\n      loadDefaultConfig(),\n      reconfigureLimits(config)\n    );\n    this.resource = mergedConfig.resource ?? Resource.empty();\n\n    if (mergedConfig.mergeResourceWithDefaults) {\n      this.resource = Resource.default().merge(this.resource);\n    }\n\n    this._config = Object.assign({}, mergedConfig, {\n      resource: this.resource,\n    });\n\n    if (config.spanProcessors?.length) {\n      this._registeredSpanProcessors = [...config.spanProcessors];\n      this.activeSpanProcessor = new MultiSpanProcessor(\n        this._registeredSpanProcessors\n      );\n    } else {\n      const defaultExporter = this._buildExporterFromEnv();\n      if (defaultExporter !== undefined) {\n        const batchProcessor = new BatchSpanProcessor(defaultExporter);\n        this.activeSpanProcessor = batchProcessor;\n      } else {\n        this.activeSpanProcessor = new NoopSpanProcessor();\n      }\n    }\n  }\n\n  getTracer(\n    name: string,\n    version?: string,\n    options?: { schemaUrl?: string }\n  ): Tracer {\n    const key = `${name}@${version || ''}:${options?.schemaUrl || ''}`;\n    if (!this._tracers.has(key)) {\n      this._tracers.set(\n        key,\n        new Tracer(\n          { name, version, schemaUrl: options?.schemaUrl },\n          this._config,\n          this\n        )\n      );\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    return this._tracers.get(key)!;\n  }\n\n  /**\n   * @deprecated please use {@link TracerConfig} spanProcessors property\n   * Adds a new {@link SpanProcessor} to this tracer.\n   * @param spanProcessor the new SpanProcessor to be added.\n   */\n  addSpanProcessor(spanProcessor: SpanProcessor): void {\n    if (this._registeredSpanProcessors.length === 0) {\n      // since we might have enabled by default a batchProcessor, we disable it\n      // before adding the new one\n      this.activeSpanProcessor\n        .shutdown()\n        .catch(err =>\n          diag.error(\n            'Error while trying to shutdown current span processor',\n            err\n          )\n        );\n    }\n    this._registeredSpanProcessors.push(spanProcessor);\n    this.activeSpanProcessor = new MultiSpanProcessor(\n      this._registeredSpanProcessors\n    );\n  }\n\n  getActiveSpanProcessor(): SpanProcessor {\n    return this.activeSpanProcessor;\n  }\n\n  /**\n   * Register this TracerProvider for use with the OpenTelemetry API.\n   * Undefined values may be replaced with defaults, and\n   * null values will be skipped.\n   *\n   * @param config Configuration object for SDK registration\n   */\n  register(config: SDKRegistrationConfig = {}): void {\n    trace.setGlobalTracerProvider(this);\n    if (config.propagator === undefined) {\n      config.propagator = this._buildPropagatorFromEnv();\n    }\n\n    if (config.contextManager) {\n      context.setGlobalContextManager(config.contextManager);\n    }\n\n    if (config.propagator) {\n      propagation.setGlobalPropagator(config.propagator);\n    }\n  }\n\n  forceFlush(): Promise<void> {\n    const timeout = this._config.forceFlushTimeoutMillis;\n    const promises = this._registeredSpanProcessors.map(\n      (spanProcessor: SpanProcessor) => {\n        return new Promise(resolve => {\n          let state: ForceFlushState;\n          const timeoutInterval = setTimeout(() => {\n            resolve(\n              new Error(\n                `Span processor did not completed within timeout period of ${timeout} ms`\n              )\n            );\n            state = ForceFlushState.timeout;\n          }, timeout);\n\n          spanProcessor\n            .forceFlush()\n            .then(() => {\n              clearTimeout(timeoutInterval);\n              if (state !== ForceFlushState.timeout) {\n                state = ForceFlushState.resolved;\n                resolve(state);\n              }\n            })\n            .catch(error => {\n              clearTimeout(timeoutInterval);\n              state = ForceFlushState.error;\n              resolve(error);\n            });\n        });\n      }\n    );\n\n    return new Promise<void>((resolve, reject) => {\n      Promise.all(promises)\n        .then(results => {\n          const errors = results.filter(\n            result => result !== ForceFlushState.resolved\n          );\n          if (errors.length > 0) {\n            reject(errors);\n          } else {\n            resolve();\n          }\n        })\n        .catch(error => reject([error]));\n    });\n  }\n\n  shutdown(): Promise<void> {\n    return this.activeSpanProcessor.shutdown();\n  }\n\n  /**\n   * TS cannot yet infer the type of this.constructor:\n   * https://github.com/Microsoft/TypeScript/issues/3841#issuecomment-337560146\n   * There is no need to override either of the getters in your child class.\n   * The type of the registered component maps should be the same across all\n   * classes in the inheritance tree.\n   */\n  protected _getPropagator(name: string): TextMapPropagator | undefined {\n    return (\n      this.constructor as typeof BasicTracerProvider\n    )._registeredPropagators.get(name)?.();\n  }\n\n  protected _getSpanExporter(name: string): SpanExporter | undefined {\n    return (\n      this.constructor as typeof BasicTracerProvider\n    )._registeredExporters.get(name)?.();\n  }\n\n  protected _buildPropagatorFromEnv(): TextMapPropagator | undefined {\n    // per spec, propagators from env must be deduplicated\n    const uniquePropagatorNames = Array.from(\n      new Set(getEnv().OTEL_PROPAGATORS)\n    );\n\n    const propagators = uniquePropagatorNames.map(name => {\n      const propagator = this._getPropagator(name);\n      if (!propagator) {\n        diag.warn(\n          `Propagator \"${name}\" requested through environment variable is unavailable.`\n        );\n      }\n\n      return propagator;\n    });\n    const validPropagators = propagators.reduce<TextMapPropagator[]>(\n      (list, item) => {\n        if (item) {\n          list.push(item);\n        }\n        return list;\n      },\n      []\n    );\n\n    if (validPropagators.length === 0) {\n      return;\n    } else if (uniquePropagatorNames.length === 1) {\n      return validPropagators[0];\n    } else {\n      return new CompositePropagator({\n        propagators: validPropagators,\n      });\n    }\n  }\n\n  protected _buildExporterFromEnv(): SpanExporter | undefined {\n    const exporterName = getEnv().OTEL_TRACES_EXPORTER;\n    if (exporterName === 'none' || exporterName === '') return;\n    const exporter = this._getSpanExporter(exporterName);\n    if (!exporter) {\n      diag.error(\n        `Exporter \"${exporterName}\" requested through environment variable is unavailable.`\n      );\n    }\n    return exporter;\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SpanExporter } from './SpanExporter';\nimport { ReadableSpan } from './ReadableSpan';\nimport {\n  ExportResult,\n  ExportResultCode,\n  hrTimeToMicroseconds,\n} from '@opentelemetry/core';\n\n/**\n * This is implementation of {@link SpanExporter} that prints spans to the\n * console. This class can be used for diagnostic purposes.\n *\n * NOTE: This {@link SpanExporter} is intended for diagnostics use only, output rendered to the console may change at any time.\n */\n\n/* eslint-disable no-console */\nexport class ConsoleSpanExporter implements SpanExporter {\n  /**\n   * Export spans.\n   * @param spans\n   * @param resultCallback\n   */\n  export(\n    spans: ReadableSpan[],\n    resultCallback: (result: ExportResult) => void\n  ): void {\n    return this._sendSpans(spans, resultCallback);\n  }\n\n  /**\n   * Shutdown the exporter.\n   */\n  shutdown(): Promise<void> {\n    this._sendSpans([]);\n    return this.forceFlush();\n  }\n\n  /**\n   * Exports any pending spans in exporter\n   */\n  forceFlush(): Promise<void> {\n    return Promise.resolve();\n  }\n\n  /**\n   * converts span info into more readable format\n   * @param span\n   */\n  private _exportInfo(span: ReadableSpan) {\n    return {\n      resource: {\n        attributes: span.resource.attributes,\n      },\n      instrumentationScope: span.instrumentationLibrary,\n      traceId: span.spanContext().traceId,\n      parentId: span.parentSpanId,\n      traceState: span.spanContext().traceState?.serialize(),\n      name: span.name,\n      id: span.spanContext().spanId,\n      kind: span.kind,\n      timestamp: hrTimeToMicroseconds(span.startTime),\n      duration: hrTimeToMicroseconds(span.duration),\n      attributes: span.attributes,\n      status: span.status,\n      events: span.events,\n      links: span.links,\n    };\n  }\n\n  /**\n   * Showing spans in console\n   * @param spans\n   * @param done\n   */\n  private _sendSpans(\n    spans: ReadableSpan[],\n    done?: (result: ExportResult) => void\n  ): void {\n    for (const span of spans) {\n      console.dir(this._exportInfo(span), { depth: 3 });\n    }\n    if (done) {\n      return done({ code: ExportResultCode.SUCCESS });\n    }\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SpanExporter } from './SpanExporter';\nimport { ReadableSpan } from './ReadableSpan';\nimport { ExportResult, ExportResultCode } from '@opentelemetry/core';\n\n/**\n * This class can be used for testing purposes. It stores the exported spans\n * in a list in memory that can be retrieved using the `getFinishedSpans()`\n * method.\n */\nexport class InMemorySpanExporter implements SpanExporter {\n  private _finishedSpans: ReadableSpan[] = [];\n  /**\n   * Indicates if the exporter has been \"shutdown.\"\n   * When false, exported spans will not be stored in-memory.\n   */\n  protected _stopped = false;\n\n  export(\n    spans: ReadableSpan[],\n    resultCallback: (result: ExportResult) => void\n  ): void {\n    if (this._stopped)\n      return resultCallback({\n        code: ExportResultCode.FAILED,\n        error: new Error('Exporter has been stopped'),\n      });\n    this._finishedSpans.push(...spans);\n\n    setTimeout(() => resultCallback({ code: ExportResultCode.SUCCESS }), 0);\n  }\n\n  shutdown(): Promise<void> {\n    this._stopped = true;\n    this._finishedSpans = [];\n    return this.forceFlush();\n  }\n\n  /**\n   * Exports any pending spans in the exporter\n   */\n  forceFlush(): Promise<void> {\n    return Promise.resolve();\n  }\n\n  reset(): void {\n    this._finishedSpans = [];\n  }\n\n  getFinishedSpans(): ReadableSpan[] {\n    return this._finishedSpans;\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Context, TraceFlags } from '@opentelemetry/api';\nimport {\n  internal,\n  ExportResultCode,\n  globalErrorHandler,\n  BindOnceFuture,\n  ExportResult,\n} from '@opentelemetry/core';\nimport { Span } from '../Span';\nimport { SpanProcessor } from '../SpanProcessor';\nimport { ReadableSpan } from './ReadableSpan';\nimport { SpanExporter } from './SpanExporter';\nimport { Resource } from '@opentelemetry/resources';\n\n/**\n * An implementation of the {@link SpanProcessor} that converts the {@link Span}\n * to {@link ReadableSpan} and passes it to the configured exporter.\n *\n * Only spans that are sampled are converted.\n *\n * NOTE: This {@link SpanProcessor} exports every ended span individually instead of batching spans together, which causes significant performance overhead with most exporters. For production use, please consider using the {@link BatchSpanProcessor} instead.\n */\nexport class SimpleSpanProcessor implements SpanProcessor {\n  private _shutdownOnce: BindOnceFuture<void>;\n  private _unresolvedExports: Set<Promise<void>>;\n\n  constructor(private readonly _exporter: SpanExporter) {\n    this._shutdownOnce = new BindOnceFuture(this._shutdown, this);\n    this._unresolvedExports = new Set<Promise<void>>();\n  }\n\n  async forceFlush(): Promise<void> {\n    // await unresolved resources before resolving\n    await Promise.all(Array.from(this._unresolvedExports));\n    if (this._exporter.forceFlush) {\n      await this._exporter.forceFlush();\n    }\n  }\n\n  onStart(_span: Span, _parentContext: Context): void {}\n\n  onEnd(span: ReadableSpan): void {\n    if (this._shutdownOnce.isCalled) {\n      return;\n    }\n\n    if ((span.spanContext().traceFlags & TraceFlags.SAMPLED) === 0) {\n      return;\n    }\n\n    const doExport = () =>\n      internal\n        ._export(this._exporter, [span])\n        .then((result: ExportResult) => {\n          if (result.code !== ExportResultCode.SUCCESS) {\n            globalErrorHandler(\n              result.error ??\n                new Error(\n                  `SimpleSpanProcessor: span export failed (status ${result})`\n                )\n            );\n          }\n        })\n        .catch(error => {\n          globalErrorHandler(error);\n        });\n\n    // Avoid scheduling a promise to make the behavior more predictable and easier to test\n    if (span.resource.asyncAttributesPending) {\n      const exportPromise = (span.resource as Resource)\n        .waitForAsyncAttributes?.()\n        .then(\n          () => {\n            if (exportPromise != null) {\n              this._unresolvedExports.delete(exportPromise);\n            }\n            return doExport();\n          },\n          err => globalErrorHandler(err)\n        );\n\n      // store the unresolved exports\n      if (exportPromise != null) {\n        this._unresolvedExports.add(exportPromise);\n      }\n    } else {\n      void doExport();\n    }\n  }\n\n  shutdown(): Promise<void> {\n    return this._shutdownOnce.call();\n  }\n\n  private _shutdown(): Promise<void> {\n    return this._exporter.shutdown();\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport { Tracer } from './Tracer';\nexport {\n  BasicTracerProvider,\n  EXPORTER_FACTORY,\n  ForceFlushState,\n  PROPAGATOR_FACTORY,\n} from './BasicTracerProvider';\nexport { BatchSpanProcessor, RandomIdGenerator } from './platform';\nexport { ConsoleSpanExporter } from './export/ConsoleSpanExporter';\nexport { InMemorySpanExporter } from './export/InMemorySpanExporter';\nexport { ReadableSpan } from './export/ReadableSpan';\nexport { SimpleSpanProcessor } from './export/SimpleSpanProcessor';\nexport { SpanExporter } from './export/SpanExporter';\nexport { NoopSpanProcessor } from './export/NoopSpanProcessor';\nexport { AlwaysOffSampler } from './sampler/AlwaysOffSampler';\nexport { AlwaysOnSampler } from './sampler/AlwaysOnSampler';\nexport { ParentBasedSampler } from './sampler/ParentBasedSampler';\nexport { TraceIdRatioBasedSampler } from './sampler/TraceIdRatioBasedSampler';\nexport { Sampler, SamplingDecision, SamplingResult } from './Sampler';\nexport { Span } from './Span';\nexport { SpanProcessor } from './SpanProcessor';\nexport { TimedEvent } from './TimedEvent';\nexport {\n  BatchSpanProcessorBrowserConfig,\n  BufferConfig,\n  GeneralLimits,\n  SDKRegistrationConfig,\n  SpanLimits,\n  TracerConfig,\n} from './types';\nexport { IdGenerator } from './IdGenerator';\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// this is autogenerated file, see scripts/version-update.js\nexport const PACKAGE_VERSION = '0.10.1';\nexport const PACKAGE_NAME = '@opentelemetry/instrumentation-undici';\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// DO NOT EDIT, this is an Auto-generated file from scripts/semconv/templates//templates/SemanticAttributes.ts.j2\nexport const SemanticAttributes = {\n  /**\n   * State of the HTTP connection in the HTTP connection pool.\n   */\n  HTTP_CONNECTION_STATE: 'http.connection.state',\n\n  /**\n  * Describes a class of error the operation ended with.\n  *\n  * Note: The `error.type` SHOULD be predictable and SHOULD have low cardinality.\nInstrumentations SHOULD document the list of errors they report.\n\nThe cardinality of `error.type` within one instrumentation library SHOULD be low.\nTelemetry consumers that aggregate data from multiple instrumentation libraries and applications\nshould be prepared for `error.type` to have high cardinality at query time when no\nadditional filters are applied.\n\nIf the operation has completed successfully, instrumentations SHOULD NOT set `error.type`.\n\nIf a specific domain defines its own set of error identifiers (such as HTTP or gRPC status codes),\nit&#39;s RECOMMENDED to:\n\n* Use a domain-specific attribute\n* Set `error.type` to capture all errors, regardless of whether they are defined within the domain-specific set or not.\n  */\n  ERROR_TYPE: 'error.type',\n\n  /**\n   * The size of the request payload body in bytes. This is the number of bytes transferred excluding headers and is often, but not always, present as the [Content-Length](https://www.rfc-editor.org/rfc/rfc9110.html#field.content-length) header. For requests using transport encoding, this should be the compressed size.\n   */\n  HTTP_REQUEST_BODY_SIZE: 'http.request.body.size',\n\n  /**\n  * HTTP request method.\n  *\n  * Note: HTTP request method value SHOULD be &#34;known&#34; to the instrumentation.\nBy default, this convention defines &#34;known&#34; methods as the ones listed in [RFC9110](https://www.rfc-editor.org/rfc/rfc9110.html#name-methods)\nand the PATCH method defined in [RFC5789](https://www.rfc-editor.org/rfc/rfc5789.html).\n\nIf the HTTP request method is not known to instrumentation, it MUST set the `http.request.method` attribute to `_OTHER`.\n\nIf the HTTP instrumentation could end up converting valid HTTP request methods to `_OTHER`, then it MUST provide a way to override\nthe list of known HTTP methods. If this override is done via environment variable, then the environment variable MUST be named\nOTEL_INSTRUMENTATION_HTTP_KNOWN_METHODS and support a comma-separated list of case-sensitive known HTTP methods\n(this list MUST be a full override of the default known method, it is not a list of known methods in addition to the defaults).\n\nHTTP method names are case-sensitive and `http.request.method` attribute value MUST match a known HTTP method name exactly.\nInstrumentations for specific web frameworks that consider HTTP methods to be case insensitive, SHOULD populate a canonical equivalent.\nTracing instrumentations that do so, MUST also set `http.request.method_original` to the original value.\n  */\n  HTTP_REQUEST_METHOD: 'http.request.method',\n\n  /**\n   * Original HTTP method sent by the client in the request line.\n   */\n  HTTP_REQUEST_METHOD_ORIGINAL: 'http.request.method_original',\n\n  /**\n   * The ordinal number of request resending attempt (for any reason, including redirects).\n   *\n   * Note: The resend count SHOULD be updated each time an HTTP request gets resent by the client, regardless of what was the cause of the resending (e.g. redirection, authorization failure, 503 Server Unavailable, network issues, or any other).\n   */\n  HTTP_REQUEST_RESEND_COUNT: 'http.request.resend_count',\n\n  /**\n   * The size of the response payload body in bytes. This is the number of bytes transferred excluding headers and is often, but not always, present as the [Content-Length](https://www.rfc-editor.org/rfc/rfc9110.html#field.content-length) header. For requests using transport encoding, this should be the compressed size.\n   */\n  HTTP_RESPONSE_BODY_SIZE: 'http.response.body.size',\n\n  /**\n   * [HTTP response status code](https://tools.ietf.org/html/rfc7231#section-6).\n   */\n  HTTP_RESPONSE_STATUS_CODE: 'http.response.status_code',\n\n  /**\n  * The matched route, that is, the path template in the format used by the respective server framework.\n  *\n  * Note: MUST NOT be populated when this is not supported by the HTTP server framework as the route attribute should have low-cardinality and the URI path can NOT substitute it.\nSHOULD include the [application root](/docs/http/http-spans.md#http-server-definitions) if there is one.\n  */\n  HTTP_ROUTE: 'http.route',\n\n  /**\n   * Peer address of the network connection - IP address or Unix domain socket name.\n   */\n  NETWORK_PEER_ADDRESS: 'network.peer.address',\n\n  /**\n   * Peer port number of the network connection.\n   */\n  NETWORK_PEER_PORT: 'network.peer.port',\n\n  /**\n   * [OSI application layer](https://osi-model.com/application-layer/) or non-OSI equivalent.\n   *\n   * Note: The value SHOULD be normalized to lowercase.\n   */\n  NETWORK_PROTOCOL_NAME: 'network.protocol.name',\n\n  /**\n   * Version of the protocol specified in `network.protocol.name`.\n   *\n   * Note: `network.protocol.version` refers to the version of the protocol used and might be different from the protocol client&#39;s version. If the HTTP client has a version of `0.27.2`, but sends HTTP version `1.1`, this attribute should be set to `1.1`.\n   */\n  NETWORK_PROTOCOL_VERSION: 'network.protocol.version',\n\n  /**\n   * Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.\n   *\n   * Note: When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it&#39;s available.\n   */\n  SERVER_ADDRESS: 'server.address',\n\n  /**\n   * Server port number.\n   *\n   * Note: When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it&#39;s available.\n   */\n  SERVER_PORT: 'server.port',\n\n  /**\n  * Absolute URL describing a network resource according to [RFC3986](https://www.rfc-editor.org/rfc/rfc3986).\n  *\n  * Note: For network calls, URL usually has `scheme://host[:port][path][?query][#fragment]` format, where the fragment is not transmitted over HTTP, but if it is known, it SHOULD be included nevertheless.\n`url.full` MUST NOT contain credentials passed via URL in form of `https://username:password@www.example.com/`. In such case username and password SHOULD be redacted and attribute&#39;s value SHOULD be `https://REDACTED:REDACTED@www.example.com/`.\n`url.full` SHOULD capture the absolute URL when it is available (or can be reconstructed) and SHOULD NOT be validated or modified except for sanitizing purposes.\n  */\n  URL_FULL: 'url.full',\n\n  /**\n   * The [URI path](https://www.rfc-editor.org/rfc/rfc3986#section-3.3) component.\n   */\n  URL_PATH: 'url.path',\n\n  /**\n   * The [URI query](https://www.rfc-editor.org/rfc/rfc3986#section-3.4) component.\n   *\n   * Note: Sensitive content provided in query string SHOULD be scrubbed when instrumentations can identify it.\n   */\n  URL_QUERY: 'url.query',\n\n  /**\n   * The [URI scheme](https://www.rfc-editor.org/rfc/rfc3986#section-3.1) component identifying the used protocol.\n   */\n  URL_SCHEME: 'url.scheme',\n\n  /**\n   * Value of the [HTTP User-Agent](https://www.rfc-editor.org/rfc/rfc9110.html#field.user-agent) header sent by the client.\n   */\n  USER_AGENT_ORIGINAL: 'user_agent.original',\n};\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as diagch from 'diagnostics_channel';\nimport { URL } from 'url';\n\nimport {\n  InstrumentationBase,\n  safeExecuteInTheMiddle,\n} from '@opentelemetry/instrumentation';\nimport {\n  Attributes,\n  context,\n  Histogram,\n  HrTime,\n  INVALID_SPAN_CONTEXT,\n  propagation,\n  Span,\n  SpanKind,\n  SpanStatusCode,\n  trace,\n  ValueType,\n} from '@opentelemetry/api';\n\n/** @knipignore */\nimport { PACKAGE_NAME, PACKAGE_VERSION } from './version';\n\nimport {\n  ListenerRecord,\n  RequestHeadersMessage,\n  RequestMessage,\n  RequestTrailersMessage,\n  ResponseHeadersMessage,\n} from './internal-types';\nimport { UndiciInstrumentationConfig, UndiciRequest } from './types';\nimport { SemanticAttributes } from './enums/SemanticAttributes';\nimport {\n  hrTime,\n  hrTimeDuration,\n  hrTimeToMilliseconds,\n} from '@opentelemetry/core';\n\ninterface InstrumentationRecord {\n  span: Span;\n  attributes: Attributes;\n  startTime: HrTime;\n}\n\n// A combination of https://github.com/elastic/apm-agent-nodejs and\n// https://github.com/gadget-inc/opentelemetry-instrumentations/blob/main/packages/opentelemetry-instrumentation-undici/src/index.ts\nexport class UndiciInstrumentation extends InstrumentationBase<UndiciInstrumentationConfig> {\n  // Keep ref to avoid https://github.com/nodejs/node/issues/42170 bug and for\n  // unsubscribing.\n  private _channelSubs!: Array<ListenerRecord>;\n  private _recordFromReq = new WeakMap<UndiciRequest, InstrumentationRecord>();\n\n  private _httpClientDurationHistogram!: Histogram;\n  constructor(config: UndiciInstrumentationConfig = {}) {\n    super(PACKAGE_NAME, PACKAGE_VERSION, config);\n  }\n\n  // No need to instrument files/modules\n  protected override init() {\n    return undefined;\n  }\n\n  override disable(): void {\n    super.disable();\n    this._channelSubs.forEach(sub => sub.unsubscribe());\n    this._channelSubs.length = 0;\n  }\n\n  override enable(): void {\n    // \"enabled\" handling is currently a bit messy with InstrumentationBase.\n    // If constructed with `{enabled: false}`, this `.enable()` is still called,\n    // and `this.getConfig().enabled !== this.isEnabled()`, creating confusion.\n    //\n    // For now, this class will setup for instrumenting if `.enable()` is\n    // called, but use `this.getConfig().enabled` to determine if\n    // instrumentation should be generated. This covers the more likely common\n    // case of config being given a construction time, rather than later via\n    // `instance.enable()`, `.disable()`, or `.setConfig()` calls.\n    super.enable();\n\n    // This method is called by the super-class constructor before ours is\n    // called. So we need to ensure the property is initalized.\n    this._channelSubs = this._channelSubs || [];\n\n    // Avoid to duplicate subscriptions\n    if (this._channelSubs.length > 0) {\n      return;\n    }\n\n    this.subscribeToChannel(\n      'undici:request:create',\n      this.onRequestCreated.bind(this)\n    );\n    this.subscribeToChannel(\n      'undici:client:sendHeaders',\n      this.onRequestHeaders.bind(this)\n    );\n    this.subscribeToChannel(\n      'undici:request:headers',\n      this.onResponseHeaders.bind(this)\n    );\n    this.subscribeToChannel('undici:request:trailers', this.onDone.bind(this));\n    this.subscribeToChannel('undici:request:error', this.onError.bind(this));\n  }\n\n  protected override _updateMetricInstruments() {\n    this._httpClientDurationHistogram = this.meter.createHistogram(\n      'http.client.request.duration',\n      {\n        description: 'Measures the duration of outbound HTTP requests.',\n        unit: 's',\n        valueType: ValueType.DOUBLE,\n        advice: {\n          explicitBucketBoundaries: [\n            0.005, 0.01, 0.025, 0.05, 0.075, 0.1, 0.25, 0.5, 0.75, 1, 2.5, 5,\n            7.5, 10,\n          ],\n        },\n      }\n    );\n  }\n\n  private subscribeToChannel(\n    diagnosticChannel: string,\n    onMessage: (message: any, name: string | symbol) => void\n  ) {\n    // `diagnostics_channel` had a ref counting bug until v18.19.0.\n    // https://github.com/nodejs/node/pull/47520\n    const [major, minor] = process.version\n      .replace('v', '')\n      .split('.')\n      .map(n => Number(n));\n    const useNewSubscribe = major > 18 || (major === 18 && minor >= 19);\n\n    let unsubscribe: () => void;\n    if (useNewSubscribe) {\n      diagch.subscribe?.(diagnosticChannel, onMessage);\n      unsubscribe = () => diagch.unsubscribe?.(diagnosticChannel, onMessage);\n    } else {\n      const channel = diagch.channel(diagnosticChannel);\n      channel.subscribe(onMessage);\n      unsubscribe = () => channel.unsubscribe(onMessage);\n    }\n\n    this._channelSubs.push({\n      name: diagnosticChannel,\n      unsubscribe,\n    });\n  }\n\n  // This is the 1st message we receive for each request (fired after request creation). Here we will\n  // create the span and populate some atttributes, then link the span to the request for further\n  // span processing\n  private onRequestCreated({ request }: RequestMessage): void {\n    // Ignore if:\n    // - instrumentation is disabled\n    // - ignored by config\n    // - method is 'CONNECT'\n    const config = this.getConfig();\n    const enabled = config.enabled !== false;\n    const shouldIgnoreReq = safeExecuteInTheMiddle(\n      () =>\n        !enabled ||\n        request.method === 'CONNECT' ||\n        config.ignoreRequestHook?.(request),\n      e => e && this._diag.error('caught ignoreRequestHook error: ', e),\n      true\n    );\n\n    if (shouldIgnoreReq) {\n      return;\n    }\n\n    const startTime = hrTime();\n    let requestUrl;\n    try {\n      requestUrl = new URL(request.path, request.origin);\n    } catch (err) {\n      this._diag.warn('could not determine url.full:', err);\n      // Skip instrumenting this request.\n      return;\n    }\n    const urlScheme = requestUrl.protocol.replace(':', '');\n    const requestMethod = this.getRequestMethod(request.method);\n    const attributes: Attributes = {\n      [SemanticAttributes.HTTP_REQUEST_METHOD]: requestMethod,\n      [SemanticAttributes.HTTP_REQUEST_METHOD_ORIGINAL]: request.method,\n      [SemanticAttributes.URL_FULL]: requestUrl.toString(),\n      [SemanticAttributes.URL_PATH]: requestUrl.pathname,\n      [SemanticAttributes.URL_QUERY]: requestUrl.search,\n      [SemanticAttributes.URL_SCHEME]: urlScheme,\n    };\n\n    const schemePorts: Record<string, string> = { https: '443', http: '80' };\n    const serverAddress = requestUrl.hostname;\n    const serverPort = requestUrl.port || schemePorts[urlScheme];\n\n    attributes[SemanticAttributes.SERVER_ADDRESS] = serverAddress;\n    if (serverPort && !isNaN(Number(serverPort))) {\n      attributes[SemanticAttributes.SERVER_PORT] = Number(serverPort);\n    }\n\n    // Get user agent from headers\n    let userAgent;\n    if (Array.isArray(request.headers)) {\n      const idx = request.headers.findIndex(\n        h => h.toLowerCase() === 'user-agent'\n      );\n      if (idx >= 0) {\n        userAgent = request.headers[idx + 1];\n      }\n    } else if (typeof request.headers === 'string') {\n      const headers = request.headers.split('\\r\\n');\n      const uaHeader = headers.find(h =>\n        h.toLowerCase().startsWith('user-agent')\n      );\n      userAgent =\n        uaHeader && uaHeader.substring(uaHeader.indexOf(':') + 1).trim();\n    }\n\n    if (userAgent) {\n      attributes[SemanticAttributes.USER_AGENT_ORIGINAL] = userAgent;\n    }\n\n    // Get attributes from the hook if present\n    const hookAttributes = safeExecuteInTheMiddle(\n      () => config.startSpanHook?.(request),\n      e => e && this._diag.error('caught startSpanHook error: ', e),\n      true\n    );\n    if (hookAttributes) {\n      Object.entries(hookAttributes).forEach(([key, val]) => {\n        attributes[key] = val;\n      });\n    }\n\n    // Check if parent span is required via config and:\n    // - if a parent is required but not present, we use a `NoopSpan` to still\n    //   propagate context without recording it.\n    // - create a span otherwise\n    const activeCtx = context.active();\n    const currentSpan = trace.getSpan(activeCtx);\n    let span: Span;\n\n    if (\n      config.requireParentforSpans &&\n      (!currentSpan || !trace.isSpanContextValid(currentSpan.spanContext()))\n    ) {\n      span = trace.wrapSpanContext(INVALID_SPAN_CONTEXT);\n    } else {\n      span = this.tracer.startSpan(\n        requestMethod === '_OTHER' ? 'HTTP' : requestMethod,\n        {\n          kind: SpanKind.CLIENT,\n          attributes: attributes,\n        },\n        activeCtx\n      );\n    }\n\n    // Execute the request hook if defined\n    safeExecuteInTheMiddle(\n      () => config.requestHook?.(span, request),\n      e => e && this._diag.error('caught requestHook error: ', e),\n      true\n    );\n\n    // Context propagation goes last so no hook can tamper\n    // the propagation headers\n    const requestContext = trace.setSpan(context.active(), span);\n    const addedHeaders: Record<string, string> = {};\n    propagation.inject(requestContext, addedHeaders);\n\n    const headerEntries = Object.entries(addedHeaders);\n\n    for (let i = 0; i < headerEntries.length; i++) {\n      const [k, v] = headerEntries[i];\n\n      if (typeof request.addHeader === 'function') {\n        request.addHeader(k, v);\n      } else if (typeof request.headers === 'string') {\n        request.headers += `${k}: ${v}\\r\\n`;\n      } else if (Array.isArray(request.headers)) {\n        // undici@6.11.0 accidentally, briefly removed `request.addHeader()`.\n        request.headers.push(k, v);\n      }\n    }\n    this._recordFromReq.set(request, { span, attributes, startTime });\n  }\n\n  // This is the 2nd message we receive for each request. It is fired when connection with\n  // the remote is established and about to send the first byte. Here we do have info about the\n  // remote address and port so we can populate some `network.*` attributes into the span\n  private onRequestHeaders({ request, socket }: RequestHeadersMessage): void {\n    const record = this._recordFromReq.get(request as UndiciRequest);\n\n    if (!record) {\n      return;\n    }\n\n    const config = this.getConfig();\n    const { span } = record;\n    const { remoteAddress, remotePort } = socket;\n    const spanAttributes: Attributes = {\n      [SemanticAttributes.NETWORK_PEER_ADDRESS]: remoteAddress,\n      [SemanticAttributes.NETWORK_PEER_PORT]: remotePort,\n    };\n\n    // After hooks have been processed (which may modify request headers)\n    // we can collect the headers based on the configuration\n    if (config.headersToSpanAttributes?.requestHeaders) {\n      const headersToAttribs = new Set(\n        config.headersToSpanAttributes.requestHeaders.map(n => n.toLowerCase())\n      );\n\n      // headers could be in form\n      // ['name: value', ...] for v5\n      // ['name', 'value', ...] for v6\n      const rawHeaders = Array.isArray(request.headers)\n        ? request.headers\n        : request.headers.split('\\r\\n');\n      rawHeaders.forEach((h, idx) => {\n        const sepIndex = h.indexOf(':');\n        const hasSeparator = sepIndex !== -1;\n        const name = (\n          hasSeparator ? h.substring(0, sepIndex) : h\n        ).toLowerCase();\n        const value = hasSeparator\n          ? h.substring(sepIndex + 1)\n          : rawHeaders[idx + 1];\n\n        if (headersToAttribs.has(name)) {\n          spanAttributes[`http.request.header.${name}`] = value.trim();\n        }\n      });\n    }\n\n    span.setAttributes(spanAttributes);\n  }\n\n  // This is the 3rd message we get for each request and it's fired when the server\n  // headers are received, body may not be accessible yet.\n  // From the response headers we can set the status and content length\n  private onResponseHeaders({\n    request,\n    response,\n  }: ResponseHeadersMessage): void {\n    const record = this._recordFromReq.get(request);\n\n    if (!record) {\n      return;\n    }\n\n    const { span, attributes } = record;\n    const spanAttributes: Attributes = {\n      [SemanticAttributes.HTTP_RESPONSE_STATUS_CODE]: response.statusCode,\n    };\n\n    const config = this.getConfig();\n\n    // Execute the response hook if defined\n    safeExecuteInTheMiddle(\n      () => config.responseHook?.(span, { request, response }),\n      e => e && this._diag.error('caught responseHook error: ', e),\n      true\n    );\n\n    const headersToAttribs = new Set();\n\n    if (config.headersToSpanAttributes?.responseHeaders) {\n      config.headersToSpanAttributes?.responseHeaders.forEach(name =>\n        headersToAttribs.add(name.toLowerCase())\n      );\n    }\n\n    for (let idx = 0; idx < response.headers.length; idx = idx + 2) {\n      const name = response.headers[idx].toString().toLowerCase();\n      const value = response.headers[idx + 1];\n\n      if (headersToAttribs.has(name)) {\n        spanAttributes[`http.response.header.${name}`] = value.toString();\n      }\n\n      if (name === 'content-length') {\n        const contentLength = Number(value.toString());\n        if (!isNaN(contentLength)) {\n          spanAttributes['http.response.header.content-length'] = contentLength;\n        }\n      }\n    }\n\n    span.setAttributes(spanAttributes);\n    span.setStatus({\n      code:\n        response.statusCode >= 400\n          ? SpanStatusCode.ERROR\n          : SpanStatusCode.UNSET,\n    });\n    record.attributes = Object.assign(attributes, spanAttributes);\n  }\n\n  // This is the last event we receive if the request went without any errors\n  private onDone({ request }: RequestTrailersMessage): void {\n    const record = this._recordFromReq.get(request);\n\n    if (!record) {\n      return;\n    }\n\n    const { span, attributes, startTime } = record;\n\n    // End the span\n    span.end();\n    this._recordFromReq.delete(request);\n\n    // Record metrics\n    this.recordRequestDuration(attributes, startTime);\n  }\n\n  // This is the event we get when something is wrong in the request like\n  // - invalid options when calling `fetch` global API or any undici method for request\n  // - connectivity errors such as unreachable host\n  // - requests aborted through an `AbortController.signal`\n  // NOTE: server errors are considered valid responses and it's the lib consumer\n  // who should deal with that.\n  private onError({ request, error }: any): void {\n    const record = this._recordFromReq.get(request);\n\n    if (!record) {\n      return;\n    }\n\n    const { span, attributes, startTime } = record;\n\n    // NOTE: in `undici@6.3.0` when request aborted the error type changes from\n    // a custom error (`RequestAbortedError`) to a built-in `DOMException` carrying\n    // some differences:\n    // - `code` is from DOMEXception (ABORT_ERR: 20)\n    // - `message` changes\n    // - stacktrace is smaller and contains node internal frames\n    span.recordException(error);\n    span.setStatus({\n      code: SpanStatusCode.ERROR,\n      message: error.message,\n    });\n    span.end();\n    this._recordFromReq.delete(request);\n\n    // Record metrics (with the error)\n    attributes[SemanticAttributes.ERROR_TYPE] = error.message;\n    this.recordRequestDuration(attributes, startTime);\n  }\n\n  private recordRequestDuration(attributes: Attributes, startTime: HrTime) {\n    // Time to record metrics\n    const metricsAttributes: Attributes = {};\n    // Get the attribs already in span attributes\n    const keysToCopy = [\n      SemanticAttributes.HTTP_RESPONSE_STATUS_CODE,\n      SemanticAttributes.HTTP_REQUEST_METHOD,\n      SemanticAttributes.SERVER_ADDRESS,\n      SemanticAttributes.SERVER_PORT,\n      SemanticAttributes.URL_SCHEME,\n      SemanticAttributes.ERROR_TYPE,\n    ];\n    keysToCopy.forEach(key => {\n      if (key in attributes) {\n        metricsAttributes[key] = attributes[key];\n      }\n    });\n\n    // Take the duration and record it\n    const durationSeconds =\n      hrTimeToMilliseconds(hrTimeDuration(startTime, hrTime())) / 1000;\n    this._httpClientDurationHistogram.record(\n      durationSeconds,\n      metricsAttributes\n    );\n  }\n\n  private getRequestMethod(original: string): string {\n    const knownMethods = {\n      CONNECT: true,\n      OPTIONS: true,\n      HEAD: true,\n      GET: true,\n      POST: true,\n      PUT: true,\n      PATCH: true,\n      DELETE: true,\n      TRACE: true,\n    };\n\n    if (original.toUpperCase() in knownMethods) {\n      return original.toUpperCase();\n    }\n\n    return '_OTHER';\n  }\n}\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=types.js.map", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport * from './undici';\nexport * from './types';\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport enum ExpressLayerType {\n  ROUTER = 'router',\n  MIDDLEWARE = 'middleware',\n  REQUEST_HANDLER = 'request_handler',\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport enum AttributeNames {\n  EXPRESS_TYPE = 'express.type',\n  EXPRESS_NAME = 'express.name',\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { Request } from 'express';\nimport { Attributes } from '@opentelemetry/api';\n\n/**\n * This symbol is used to mark express layer as being already instrumented\n * since its possible to use a given layer multiple times (ex: middlewares)\n */\nexport const kLayerPatched: unique symbol = Symbol('express-layer-patched');\n\n/**\n * This const define where on the `request` object the Instrumentation will mount the\n * current stack of express layer.\n *\n * It is necessary because express doesn't store the different layers\n * (ie: middleware, router etc) that it called to get to the current layer.\n * Given that, the only way to know the route of a given layer is to\n * store the path of where each previous layer has been mounted.\n *\n * ex: bodyParser > auth middleware > /users router > get /:id\n *  in this case the stack would be: [\"/users\", \"/:id\"]\n *\n * ex2: bodyParser > /api router > /v1 router > /users router > get /:id\n *  stack: [\"/api\", \"/v1\", \"/users\", \":id\"]\n *\n */\nexport const _LAYERS_STORE_PROPERTY = '__ot_middlewares';\n\nexport type PatchedRequest = {\n  [_LAYERS_STORE_PROPERTY]?: string[];\n} & Request;\nexport type PathParams = string | RegExp | Array<string | RegExp>;\n\n// https://github.com/expressjs/express/blob/main/lib/router/index.js#L53\nexport type ExpressRouter = {\n  params: { [key: string]: string };\n  _params: string[];\n  caseSensitive: boolean;\n  mergeParams: boolean;\n  strict: boolean;\n  stack: ExpressLayer[];\n};\n\n// https://github.com/expressjs/express/blob/main/lib/router/layer.js#L33\nexport type ExpressLayer = {\n  handle: Function & Record<string, any>;\n  [kLayerPatched]?: boolean;\n  name: string;\n  params: { [key: string]: string };\n  path: string;\n  regexp: RegExp;\n  route?: ExpressLayer;\n};\n\nexport type LayerMetadata = {\n  attributes: Attributes;\n  name: string;\n};\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Attributes } from '@opentelemetry/api';\nimport {\n  IgnoreMatcher,\n  ExpressInstrumentationConfig,\n  LayerPathSegment,\n} from './types';\nimport { ExpressLayerType } from './enums/ExpressLayerType';\nimport { AttributeNames } from './enums/AttributeNames';\nimport {\n  ExpressLayer,\n  PatchedRequest,\n  _LAYERS_STORE_PROPERTY,\n} from './internal-types';\n\n/**\n * Store layers path in the request to be able to construct route later\n * @param request The request where\n * @param [value] the value to push into the array\n */\nexport const storeLayerPath = (request: PatchedRequest, value?: string) => {\n  if (Array.isArray(request[_LAYERS_STORE_PROPERTY]) === false) {\n    Object.defineProperty(request, _LAYERS_STORE_PROPERTY, {\n      enumerable: false,\n      value: [],\n    });\n  }\n  if (value === undefined) return;\n  (request[_LAYERS_STORE_PROPERTY] as string[]).push(value);\n};\n\n/**\n * Recursively search the router path from layer stack\n * @param path The path to reconstruct\n * @param layer The layer to reconstruct from\n * @returns The reconstructed path\n */\nexport const getRouterPath = (path: string, layer: ExpressLayer): string => {\n  const stackLayer = layer.handle?.stack?.[0];\n\n  if (stackLayer?.route?.path) {\n    return `${path}${stackLayer.route.path}`;\n  }\n\n  if (stackLayer?.handle?.stack) {\n    return getRouterPath(path, stackLayer);\n  }\n\n  return path;\n};\n\n/**\n * Parse express layer context to retrieve a name and attributes.\n * @param route The route of the layer\n * @param layer Express layer\n * @param [layerPath] if present, the path on which the layer has been mounted\n */\nexport const getLayerMetadata = (\n  route: string,\n  layer: ExpressLayer,\n  layerPath?: string\n): {\n  attributes: Attributes;\n  name: string;\n} => {\n  if (layer.name === 'router') {\n    const maybeRouterPath = getRouterPath('', layer);\n    const extractedRouterPath = maybeRouterPath\n      ? maybeRouterPath\n      : layerPath || route || '/';\n\n    return {\n      attributes: {\n        [AttributeNames.EXPRESS_NAME]: extractedRouterPath,\n        [AttributeNames.EXPRESS_TYPE]: ExpressLayerType.ROUTER,\n      },\n      name: `router - ${extractedRouterPath}`,\n    };\n  } else if (layer.name === 'bound dispatch') {\n    return {\n      attributes: {\n        [AttributeNames.EXPRESS_NAME]:\n          (route || layerPath) ?? 'request handler',\n        [AttributeNames.EXPRESS_TYPE]: ExpressLayerType.REQUEST_HANDLER,\n      },\n      name: `request handler${layer.path ? ` - ${route || layerPath}` : ''}`,\n    };\n  } else {\n    return {\n      attributes: {\n        [AttributeNames.EXPRESS_NAME]: layer.name,\n        [AttributeNames.EXPRESS_TYPE]: ExpressLayerType.MIDDLEWARE,\n      },\n      name: `middleware - ${layer.name}`,\n    };\n  }\n};\n\n/**\n * Check whether the given obj match pattern\n * @param constant e.g URL of request\n * @param obj obj to inspect\n * @param pattern Match pattern\n */\nconst satisfiesPattern = (\n  constant: string,\n  pattern: IgnoreMatcher\n): boolean => {\n  if (typeof pattern === 'string') {\n    return pattern === constant;\n  } else if (pattern instanceof RegExp) {\n    return pattern.test(constant);\n  } else if (typeof pattern === 'function') {\n    return pattern(constant);\n  } else {\n    throw new TypeError('Pattern is in unsupported datatype');\n  }\n};\n\n/**\n * Check whether the given request is ignored by configuration\n * It will not re-throw exceptions from `list` provided by the client\n * @param constant e.g URL of request\n * @param [list] List of ignore patterns\n * @param [onException] callback for doing something when an exception has\n *     occurred\n */\nexport const isLayerIgnored = (\n  name: string,\n  type: ExpressLayerType,\n  config?: ExpressInstrumentationConfig\n): boolean => {\n  if (\n    Array.isArray(config?.ignoreLayersType) &&\n    config?.ignoreLayersType?.includes(type)\n  ) {\n    return true;\n  }\n  if (Array.isArray(config?.ignoreLayers) === false) return false;\n  try {\n    for (const pattern of config!.ignoreLayers!) {\n      if (satisfiesPattern(name, pattern)) {\n        return true;\n      }\n    }\n  } catch (e) {\n    /* catch block*/\n  }\n\n  return false;\n};\n\n/**\n * Converts a user-provided error value into an error and error message pair\n *\n * @param error - User-provided error value\n * @returns Both an Error or string representation of the value and an error message\n */\nexport const asErrorAndMessage = (\n  error: unknown\n): [error: string | Error, message: string] =>\n  error instanceof Error\n    ? [error, error.message]\n    : [String(error), String(error)];\n\n/**\n * Extracts the layer path from the route arguments\n *\n * @param args - Arguments of the route\n * @returns The layer path\n */\nexport const getLayerPath = (\n  args: [LayerPathSegment | LayerPathSegment[], ...unknown[]]\n): string | undefined => {\n  const firstArg = args[0];\n\n  if (Array.isArray(firstArg)) {\n    return firstArg.map(arg => extractLayerPathSegment(arg) || '').join(',');\n  }\n\n  return extractLayerPathSegment(firstArg);\n};\n\nconst extractLayerPathSegment = (arg: LayerPathSegment) => {\n  if (typeof arg === 'string') {\n    return arg;\n  }\n\n  if (arg instanceof RegExp || typeof arg === 'number') {\n    return arg.toString();\n  }\n\n  return;\n};\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// this is autogenerated file, see scripts/version-update.js\nexport const PACKAGE_VERSION = '0.47.1';\nexport const PACKAGE_NAME = '@opentelemetry/instrumentation-express';\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getRPCMetadata, RPCType } from '@opentelemetry/core';\nimport {\n  trace,\n  context,\n  diag,\n  Attributes,\n  SpanStatusCode,\n} from '@opentelemetry/api';\nimport type * as express from 'express';\nimport { ExpressInstrumentationConfig, ExpressRequestInfo } from './types';\nimport { ExpressLayerType } from './enums/ExpressLayerType';\nimport { AttributeNames } from './enums/AttributeNames';\nimport {\n  asErrorAndMessage,\n  getLayerMetadata,\n  getLayerPath,\n  isLayerIgnored,\n  storeLayerPath,\n} from './utils';\n/** @knipignore */\nimport { PACKAGE_NAME, PACKAGE_VERSION } from './version';\nimport {\n  InstrumentationBase,\n  InstrumentationNodeModuleDefinition,\n  isWrapped,\n  safeExecuteInTheMiddle,\n} from '@opentelemetry/instrumentation';\nimport { SEMATTRS_HTTP_ROUTE } from '@opentelemetry/semantic-conventions';\nimport {\n  ExpressLayer,\n  ExpressRouter,\n  kLayerPatched,\n  PatchedRequest,\n  _LAYERS_STORE_PROPERTY,\n} from './internal-types';\n\n/** Express instrumentation for OpenTelemetry */\nexport class ExpressInstrumentation extends InstrumentationBase<ExpressInstrumentationConfig> {\n  constructor(config: ExpressInstrumentationConfig = {}) {\n    super(PACKAGE_NAME, PACKAGE_VERSION, config);\n  }\n\n  init() {\n    return [\n      new InstrumentationNodeModuleDefinition(\n        'express',\n        ['>=4.0.0 <5'],\n        moduleExports => {\n          const routerProto = moduleExports.Router as unknown as express.Router;\n          // patch express.Router.route\n          if (isWrapped(routerProto.route)) {\n            this._unwrap(routerProto, 'route');\n          }\n          this._wrap(routerProto, 'route', this._getRoutePatch());\n          // patch express.Router.use\n          if (isWrapped(routerProto.use)) {\n            this._unwrap(routerProto, 'use');\n          }\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          this._wrap(routerProto, 'use', this._getRouterUsePatch() as any);\n          // patch express.Application.use\n          if (isWrapped(moduleExports.application.use)) {\n            this._unwrap(moduleExports.application, 'use');\n          }\n          this._wrap(\n            moduleExports.application,\n            'use',\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            this._getAppUsePatch() as any\n          );\n          return moduleExports;\n        },\n        moduleExports => {\n          if (moduleExports === undefined) return;\n          const routerProto = moduleExports.Router as unknown as express.Router;\n          this._unwrap(routerProto, 'route');\n          this._unwrap(routerProto, 'use');\n          this._unwrap(moduleExports.application, 'use');\n        }\n      ),\n    ];\n  }\n\n  /**\n   * Get the patch for Router.route function\n   */\n  private _getRoutePatch() {\n    const instrumentation = this;\n    return function (original: express.Router['route']) {\n      return function route_trace(\n        this: ExpressRouter,\n        ...args: Parameters<typeof original>\n      ) {\n        const route = original.apply(this, args);\n        const layer = this.stack[this.stack.length - 1] as ExpressLayer;\n        instrumentation._applyPatch(layer, getLayerPath(args));\n        return route;\n      };\n    };\n  }\n\n  /**\n   * Get the patch for Router.use function\n   */\n  private _getRouterUsePatch() {\n    const instrumentation = this;\n    return function (original: express.Router['use']) {\n      return function use(\n        this: express.Application,\n        ...args: Parameters<typeof original>\n      ) {\n        const route = original.apply(this, args);\n        const layer = this.stack[this.stack.length - 1] as ExpressLayer;\n        instrumentation._applyPatch(layer, getLayerPath(args));\n        return route;\n      };\n    };\n  }\n\n  /**\n   * Get the patch for Application.use function\n   */\n  private _getAppUsePatch() {\n    const instrumentation = this;\n    return function (original: express.Application['use']) {\n      return function use(\n        this: { _router: ExpressRouter },\n        ...args: Parameters<typeof original>\n      ) {\n        const route = original.apply(this, args);\n        const layer = this._router.stack[this._router.stack.length - 1];\n        instrumentation._applyPatch(layer, getLayerPath(args));\n        return route;\n      };\n    };\n  }\n\n  /** Patch each express layer to create span and propagate context */\n  private _applyPatch(\n    this: ExpressInstrumentation,\n    layer: ExpressLayer,\n    layerPath?: string\n  ) {\n    const instrumentation = this;\n    // avoid patching multiple times the same layer\n    if (layer[kLayerPatched] === true) return;\n    layer[kLayerPatched] = true;\n\n    this._wrap(layer, 'handle', original => {\n      // TODO: instrument error handlers\n      if (original.length === 4) return original;\n\n      const patched = function (\n        this: ExpressLayer,\n        req: PatchedRequest,\n        res: express.Response\n      ) {\n        storeLayerPath(req, layerPath);\n        const route = (req[_LAYERS_STORE_PROPERTY] as string[])\n          .filter(path => path !== '/' && path !== '/*')\n          .join('')\n          // remove duplicate slashes to normalize route\n          .replace(/\\/{2,}/g, '/');\n\n        const attributes: Attributes = {\n          [SEMATTRS_HTTP_ROUTE]: route.length > 0 ? route : '/',\n        };\n        const metadata = getLayerMetadata(route, layer, layerPath);\n        const type = metadata.attributes[\n          AttributeNames.EXPRESS_TYPE\n        ] as ExpressLayerType;\n\n        const rpcMetadata = getRPCMetadata(context.active());\n        if (rpcMetadata?.type === RPCType.HTTP) {\n          rpcMetadata.route = route || '/';\n        }\n\n        // verify against the config if the layer should be ignored\n        if (isLayerIgnored(metadata.name, type, instrumentation.getConfig())) {\n          if (type === ExpressLayerType.MIDDLEWARE) {\n            (req[_LAYERS_STORE_PROPERTY] as string[]).pop();\n          }\n          return original.apply(this, arguments);\n        }\n\n        if (trace.getSpan(context.active()) === undefined) {\n          return original.apply(this, arguments);\n        }\n\n        const spanName = instrumentation._getSpanName(\n          {\n            request: req,\n            layerType: type,\n            route,\n          },\n          metadata.name\n        );\n        const span = instrumentation.tracer.startSpan(spanName, {\n          attributes: Object.assign(attributes, metadata.attributes),\n        });\n\n        const { requestHook } = instrumentation.getConfig();\n        if (requestHook) {\n          safeExecuteInTheMiddle(\n            () =>\n              requestHook(span, {\n                request: req,\n                layerType: type,\n                route,\n              }),\n            e => {\n              if (e) {\n                diag.error('express instrumentation: request hook failed', e);\n              }\n            },\n            true\n          );\n        }\n\n        let spanHasEnded = false;\n        if (\n          metadata.attributes[AttributeNames.EXPRESS_TYPE] !==\n          ExpressLayerType.MIDDLEWARE\n        ) {\n          span.end();\n          spanHasEnded = true;\n        }\n        // listener for response.on('finish')\n        const onResponseFinish = () => {\n          if (spanHasEnded === false) {\n            spanHasEnded = true;\n            span.end();\n          }\n        };\n\n        // verify we have a callback\n        const args = Array.from(arguments);\n        const callbackIdx = args.findIndex(arg => typeof arg === 'function');\n        if (callbackIdx >= 0) {\n          arguments[callbackIdx] = function () {\n            // express considers anything but an empty value, \"route\" or \"router\"\n            // passed to its callback to be an error\n            const maybeError = arguments[0];\n            const isError = ![undefined, null, 'route', 'router'].includes(\n              maybeError\n            );\n            if (!spanHasEnded && isError) {\n              const [error, message] = asErrorAndMessage(maybeError);\n              span.recordException(error);\n              span.setStatus({\n                code: SpanStatusCode.ERROR,\n                message,\n              });\n            }\n\n            if (spanHasEnded === false) {\n              spanHasEnded = true;\n              req.res?.removeListener('finish', onResponseFinish);\n              span.end();\n            }\n            if (!(req.route && isError)) {\n              (req[_LAYERS_STORE_PROPERTY] as string[]).pop();\n            }\n            const callback = args[callbackIdx] as Function;\n            return callback.apply(this, arguments);\n          };\n        }\n\n        try {\n          return original.apply(this, arguments);\n        } catch (anyError) {\n          const [error, message] = asErrorAndMessage(anyError);\n          span.recordException(error);\n          span.setStatus({\n            code: SpanStatusCode.ERROR,\n            message,\n          });\n          throw anyError;\n        } finally {\n          /**\n           * At this point if the callback wasn't called, that means either the\n           * layer is asynchronous (so it will call the callback later on) or that\n           * the layer directly end the http response, so we'll hook into the \"finish\"\n           * event to handle the later case.\n           */\n          if (!spanHasEnded) {\n            res.once('finish', onResponseFinish);\n          }\n        }\n      };\n\n      // `handle` isn't just a regular function in some cases. It also contains\n      // some properties holding metadata and state so we need to proxy them\n      // through through patched function\n      // ref: https://github.com/open-telemetry/opentelemetry-js-contrib/issues/1950\n      // Also some apps/libs do their own patching before OTEL and have these properties\n      // in the proptotype. So we use a `for...in` loop to get own properties and also\n      // any enumerable prop in the prototype chain\n      // ref: https://github.com/open-telemetry/opentelemetry-js-contrib/issues/2271\n      for (const key in original) {\n        Object.defineProperty(patched, key, {\n          get() {\n            return original[key];\n          },\n          set(value) {\n            original[key] = value;\n          },\n        });\n      }\n      return patched;\n    });\n  }\n\n  _getSpanName(info: ExpressRequestInfo, defaultName: string) {\n    const { spanNameHook } = this.getConfig();\n\n    if (!(spanNameHook instanceof Function)) {\n      return defaultName;\n    }\n\n    try {\n      return spanNameHook(info, defaultName) ?? defaultName;\n    } catch (err) {\n      diag.error(\n        'express instrumentation: error calling span name rewrite hook',\n        err\n      );\n      return defaultName;\n    }\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport * from './instrumentation';\nexport * from './enums/ExpressLayerType';\nexport * from './enums/AttributeNames';\nexport * from './types';\n", "{\n  \"name\": \"@fastify/otel\",\n  \"version\": \"0.8.0\",\n  \"description\": \"Official Fastify OpenTelemetry Instrumentation\",\n  \"main\": \"index.js\",\n  \"type\": \"commonjs\",\n  \"types\": \"index.d.ts\",\n  \"scripts\": {\n    \"lint\": \"eslint\",\n    \"lint:fix\": \"eslint --fix\",\n    \"test\": \"npm run test:all && npm run test:typescript\",\n    \"test:unit\": \"c8 --100 node --test\",\n    \"test:all\": \"npm run test:v4 && npm run test:v5\",\n    \"test:v4\": \"cross-env FASTIFY_VERSION=fastifyv4 npm run test:unit\",\n    \"test:v5\": \"cross-env FASTIFY_VERSION=fastify npm run test:unit\",\n    \"test:coverage\": \"c8 node --test && c8 report --reporter=html\",\n    \"test:typescript\": \"tsd\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/fastify/otel.git\"\n  },\n  \"keywords\": [\n    \"plugin\",\n    \"helper\",\n    \"fastify\",\n    \"instrumentation\",\n    \"otel\",\n    \"opentelemetry\"\n  ],\n  \"author\": \"Carlos Fuentes - @metcoder95 (https://metcoder.dev)\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/fastify/otel/issues\"\n  },\n  \"homepage\": \"https://github.com/fastify/otel#readme\",\n  \"funding\": [\n    {\n      \"type\": \"github\",\n      \"url\": \"https://github.com/sponsors/fastify\"\n    },\n    {\n      \"type\": \"opencollective\",\n      \"url\": \"https://opencollective.com/fastify\"\n    }\n  ],\n  \"devDependencies\": {\n    \"@fastify/pre-commit\": \"^2.1.0\",\n    \"@fastify/type-provider-typebox\": \"^5.0.0-pre.fv5.1\",\n    \"@opentelemetry/context-async-hooks\": \"^1.30.1\",\n    \"@opentelemetry/contrib-test-utils\": \"^0.46.0\",\n    \"@opentelemetry/instrumentation-http\": \"0.57.2\",\n    \"@opentelemetry/propagator-jaeger\": \"^1.30.1\",\n    \"@opentelemetry/sdk-trace-base\": \"^1.30.1\",\n    \"@opentelemetry/sdk-trace-node\": \"^1.29.0\",\n    \"@types/node\": \"^22.0.0\",\n    \"c8\": \"^10.1.2\",\n    \"cross-env\": \"^7.0.3\",\n    \"eslint\": \"^9.16.0\",\n    \"fastify\": \"^5.1.0\",\n    \"fastifyv4\": \"npm:fastify@^4.0.0\",\n    \"neostandard\": \"^0.12.0\",\n    \"tsd\": \"^0.32.0\"\n  },\n  \"dependencies\": {\n    \"@opentelemetry/core\": \"^1.30.1\",\n    \"@opentelemetry/instrumentation\": \"^0.57.2\",\n    \"@opentelemetry/semantic-conventions\": \"^1.28.0\",\n    \"minimatch\": \"^9\"\n  },\n  \"peerDependencies\": {\n    \"@opentelemetry/api\": \"^1.9.0\"\n  },\n  \"tsd\": {\n    \"directory\": \"test\"\n  }\n}\n", "'use strict';\nmodule.exports = balanced;\nfunction balanced(a, b, str) {\n  if (a instanceof RegExp) a = maybeMatch(a, str);\n  if (b instanceof RegExp) b = maybeMatch(b, str);\n\n  var r = range(a, b, str);\n\n  return r && {\n    start: r[0],\n    end: r[1],\n    pre: str.slice(0, r[0]),\n    body: str.slice(r[0] + a.length, r[1]),\n    post: str.slice(r[1] + b.length)\n  };\n}\n\nfunction maybeMatch(reg, str) {\n  var m = str.match(reg);\n  return m ? m[0] : null;\n}\n\nbalanced.range = range;\nfunction range(a, b, str) {\n  var begs, beg, left, right, result;\n  var ai = str.indexOf(a);\n  var bi = str.indexOf(b, ai + 1);\n  var i = ai;\n\n  if (ai >= 0 && bi > 0) {\n    if(a===b) {\n      return [ai, bi];\n    }\n    begs = [];\n    left = str.length;\n\n    while (i >= 0 && !result) {\n      if (i == ai) {\n        begs.push(i);\n        ai = str.indexOf(a, i + 1);\n      } else if (begs.length == 1) {\n        result = [ begs.pop(), bi ];\n      } else {\n        beg = begs.pop();\n        if (beg < left) {\n          left = beg;\n          right = bi;\n        }\n\n        bi = str.indexOf(b, i + 1);\n      }\n\n      i = ai < bi && ai >= 0 ? ai : bi;\n    }\n\n    if (begs.length) {\n      result = [ left, right ];\n    }\n  }\n\n  return result;\n}\n", "var balanced = require('balanced-match');\n\nmodule.exports = expandTop;\n\nvar escSlash = '\\0SLASH'+Math.random()+'\\0';\nvar escOpen = '\\0OPEN'+Math.random()+'\\0';\nvar escClose = '\\0CLOSE'+Math.random()+'\\0';\nvar escComma = '\\0COMMA'+Math.random()+'\\0';\nvar escPeriod = '\\0PERIOD'+Math.random()+'\\0';\n\nfunction numeric(str) {\n  return parseInt(str, 10) == str\n    ? parseInt(str, 10)\n    : str.charCodeAt(0);\n}\n\nfunction escapeBraces(str) {\n  return str.split('\\\\\\\\').join(escSlash)\n            .split('\\\\{').join(escOpen)\n            .split('\\\\}').join(escClose)\n            .split('\\\\,').join(escComma)\n            .split('\\\\.').join(escPeriod);\n}\n\nfunction unescapeBraces(str) {\n  return str.split(escSlash).join('\\\\')\n            .split(escOpen).join('{')\n            .split(escClose).join('}')\n            .split(escComma).join(',')\n            .split(escPeriod).join('.');\n}\n\n\n// Basically just str.split(\",\"), but handling cases\n// where we have nested braced sections, which should be\n// treated as individual members, like {a,{b,c},d}\nfunction parseCommaParts(str) {\n  if (!str)\n    return [''];\n\n  var parts = [];\n  var m = balanced('{', '}', str);\n\n  if (!m)\n    return str.split(',');\n\n  var pre = m.pre;\n  var body = m.body;\n  var post = m.post;\n  var p = pre.split(',');\n\n  p[p.length-1] += '{' + body + '}';\n  var postParts = parseCommaParts(post);\n  if (post.length) {\n    p[p.length-1] += postParts.shift();\n    p.push.apply(p, postParts);\n  }\n\n  parts.push.apply(parts, p);\n\n  return parts;\n}\n\nfunction expandTop(str) {\n  if (!str)\n    return [];\n\n  // I don't know why Bash 4.3 does this, but it does.\n  // Anything starting with {} will have the first two bytes preserved\n  // but *only* at the top level, so {},a}b will not expand to anything,\n  // but a{},b}c will be expanded to [a}c,abc].\n  // One could argue that this is a bug in Bash, but since the goal of\n  // this module is to match Bash's rules, we escape a leading {}\n  if (str.substr(0, 2) === '{}') {\n    str = '\\\\{\\\\}' + str.substr(2);\n  }\n\n  return expand(escapeBraces(str), true).map(unescapeBraces);\n}\n\nfunction embrace(str) {\n  return '{' + str + '}';\n}\nfunction isPadded(el) {\n  return /^-?0\\d/.test(el);\n}\n\nfunction lte(i, y) {\n  return i <= y;\n}\nfunction gte(i, y) {\n  return i >= y;\n}\n\nfunction expand(str, isTop) {\n  var expansions = [];\n\n  var m = balanced('{', '}', str);\n  if (!m) return [str];\n\n  // no need to expand pre, since it is guaranteed to be free of brace-sets\n  var pre = m.pre;\n  var post = m.post.length\n    ? expand(m.post, false)\n    : [''];\n\n  if (/\\$$/.test(m.pre)) {    \n    for (var k = 0; k < post.length; k++) {\n      var expansion = pre+ '{' + m.body + '}' + post[k];\n      expansions.push(expansion);\n    }\n  } else {\n    var isNumericSequence = /^-?\\d+\\.\\.-?\\d+(?:\\.\\.-?\\d+)?$/.test(m.body);\n    var isAlphaSequence = /^[a-zA-Z]\\.\\.[a-zA-Z](?:\\.\\.-?\\d+)?$/.test(m.body);\n    var isSequence = isNumericSequence || isAlphaSequence;\n    var isOptions = m.body.indexOf(',') >= 0;\n    if (!isSequence && !isOptions) {\n      // {a},b}\n      if (m.post.match(/,(?!,).*\\}/)) {\n        str = m.pre + '{' + m.body + escClose + m.post;\n        return expand(str);\n      }\n      return [str];\n    }\n\n    var n;\n    if (isSequence) {\n      n = m.body.split(/\\.\\./);\n    } else {\n      n = parseCommaParts(m.body);\n      if (n.length === 1) {\n        // x{{a,b}}y ==> x{a}y x{b}y\n        n = expand(n[0], false).map(embrace);\n        if (n.length === 1) {\n          return post.map(function(p) {\n            return m.pre + n[0] + p;\n          });\n        }\n      }\n    }\n\n    // at this point, n is the parts, and we know it's not a comma set\n    // with a single entry.\n    var N;\n\n    if (isSequence) {\n      var x = numeric(n[0]);\n      var y = numeric(n[1]);\n      var width = Math.max(n[0].length, n[1].length)\n      var incr = n.length == 3\n        ? Math.abs(numeric(n[2]))\n        : 1;\n      var test = lte;\n      var reverse = y < x;\n      if (reverse) {\n        incr *= -1;\n        test = gte;\n      }\n      var pad = n.some(isPadded);\n\n      N = [];\n\n      for (var i = x; test(i, y); i += incr) {\n        var c;\n        if (isAlphaSequence) {\n          c = String.fromCharCode(i);\n          if (c === '\\\\')\n            c = '';\n        } else {\n          c = String(i);\n          if (pad) {\n            var need = width - c.length;\n            if (need > 0) {\n              var z = new Array(need + 1).join('0');\n              if (i < 0)\n                c = '-' + z + c.slice(1);\n              else\n                c = z + c;\n            }\n          }\n        }\n        N.push(c);\n      }\n    } else {\n      N = [];\n\n      for (var j = 0; j < n.length; j++) {\n        N.push.apply(N, expand(n[j], false));\n      }\n    }\n\n    for (var j = 0; j < N.length; j++) {\n      for (var k = 0; k < post.length; k++) {\n        var expansion = pre + N[j] + post[k];\n        if (!isTop || isSequence || expansion)\n          expansions.push(expansion);\n      }\n    }\n  }\n\n  return expansions;\n}\n\n", "const MAX_PATTERN_LENGTH = 1024 * 64\nexport const assertValidPattern: (pattern: any) => void = (\n  pattern: any\n): asserts pattern is string => {\n  if (typeof pattern !== 'string') {\n    throw new TypeError('invalid pattern')\n  }\n\n  if (pattern.length > MAX_PATTERN_LENGTH) {\n    throw new TypeError('pattern is too long')\n  }\n}\n", "// translate the various posix character classes into unicode properties\n// this works across all unicode locales\n\n// { <posix class>: [<translation>, /u flag required, negated]\nconst posixClasses: { [k: string]: [e: string, u: boolean, n?: boolean] } = {\n  '[:alnum:]': ['\\\\p{L}\\\\p{Nl}\\\\p{Nd}', true],\n  '[:alpha:]': ['\\\\p{L}\\\\p{Nl}', true],\n  '[:ascii:]': ['\\\\x' + '00-\\\\x' + '7f', false],\n  '[:blank:]': ['\\\\p{Zs}\\\\t', true],\n  '[:cntrl:]': ['\\\\p{Cc}', true],\n  '[:digit:]': ['\\\\p{Nd}', true],\n  '[:graph:]': ['\\\\p{Z}\\\\p{C}', true, true],\n  '[:lower:]': ['\\\\p{Ll}', true],\n  '[:print:]': ['\\\\p{C}', true],\n  '[:punct:]': ['\\\\p{P}', true],\n  '[:space:]': ['\\\\p{Z}\\\\t\\\\r\\\\n\\\\v\\\\f', true],\n  '[:upper:]': ['\\\\p{Lu}', true],\n  '[:word:]': ['\\\\p{L}\\\\p{Nl}\\\\p{Nd}\\\\p{Pc}', true],\n  '[:xdigit:]': ['A-Fa-f0-9', false],\n}\n\n// only need to escape a few things inside of brace expressions\n// escapes: [ \\ ] -\nconst braceEscape = (s: string) => s.replace(/[[\\]\\\\-]/g, '\\\\$&')\n// escape all regexp magic characters\nconst regexpEscape = (s: string) =>\n  s.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&')\n\n// everything has already been escaped, we just have to join\nconst rangesToString = (ranges: string[]): string => ranges.join('')\n\nexport type ParseClassResult = [\n  src: string,\n  uFlag: boolean,\n  consumed: number,\n  hasMagic: boolean\n]\n\n// takes a glob string at a posix brace expression, and returns\n// an equivalent regular expression source, and boolean indicating\n// whether the /u flag needs to be applied, and the number of chars\n// consumed to parse the character class.\n// This also removes out of order ranges, and returns ($.) if the\n// entire class just no good.\nexport const parseClass = (\n  glob: string,\n  position: number\n): ParseClassResult => {\n  const pos = position\n  /* c8 ignore start */\n  if (glob.charAt(pos) !== '[') {\n    throw new Error('not in a brace expression')\n  }\n  /* c8 ignore stop */\n  const ranges: string[] = []\n  const negs: string[] = []\n\n  let i = pos + 1\n  let sawStart = false\n  let uflag = false\n  let escaping = false\n  let negate = false\n  let endPos = pos\n  let rangeStart = ''\n  WHILE: while (i < glob.length) {\n    const c = glob.charAt(i)\n    if ((c === '!' || c === '^') && i === pos + 1) {\n      negate = true\n      i++\n      continue\n    }\n\n    if (c === ']' && sawStart && !escaping) {\n      endPos = i + 1\n      break\n    }\n\n    sawStart = true\n    if (c === '\\\\') {\n      if (!escaping) {\n        escaping = true\n        i++\n        continue\n      }\n      // escaped \\ char, fall through and treat like normal char\n    }\n    if (c === '[' && !escaping) {\n      // either a posix class, a collation equivalent, or just a [\n      for (const [cls, [unip, u, neg]] of Object.entries(posixClasses)) {\n        if (glob.startsWith(cls, i)) {\n          // invalid, [a-[] is fine, but not [a-[:alpha]]\n          if (rangeStart) {\n            return ['$.', false, glob.length - pos, true]\n          }\n          i += cls.length\n          if (neg) negs.push(unip)\n          else ranges.push(unip)\n          uflag = uflag || u\n          continue WHILE\n        }\n      }\n    }\n\n    // now it's just a normal character, effectively\n    escaping = false\n    if (rangeStart) {\n      // throw this range away if it's not valid, but others\n      // can still match.\n      if (c > rangeStart) {\n        ranges.push(braceEscape(rangeStart) + '-' + braceEscape(c))\n      } else if (c === rangeStart) {\n        ranges.push(braceEscape(c))\n      }\n      rangeStart = ''\n      i++\n      continue\n    }\n\n    // now might be the start of a range.\n    // can be either c-d or c-] or c<more...>] or c] at this point\n    if (glob.startsWith('-]', i + 1)) {\n      ranges.push(braceEscape(c + '-'))\n      i += 2\n      continue\n    }\n    if (glob.startsWith('-', i + 1)) {\n      rangeStart = c\n      i += 2\n      continue\n    }\n\n    // not the start of a range, just a single character\n    ranges.push(braceEscape(c))\n    i++\n  }\n\n  if (endPos < i) {\n    // didn't see the end of the class, not a valid class,\n    // but might still be valid as a literal match.\n    return ['', false, 0, false]\n  }\n\n  // if we got no ranges and no negates, then we have a range that\n  // cannot possibly match anything, and that poisons the whole glob\n  if (!ranges.length && !negs.length) {\n    return ['$.', false, glob.length - pos, true]\n  }\n\n  // if we got one positive range, and it's a single character, then that's\n  // not actually a magic pattern, it's just that one literal character.\n  // we should not treat that as \"magic\", we should just return the literal\n  // character. [_] is a perfectly valid way to escape glob magic chars.\n  if (\n    negs.length === 0 &&\n    ranges.length === 1 &&\n    /^\\\\?.$/.test(ranges[0]) &&\n    !negate\n  ) {\n    const r = ranges[0].length === 2 ? ranges[0].slice(-1) : ranges[0]\n    return [regexpEscape(r), false, endPos - pos, false]\n  }\n\n  const sranges = '[' + (negate ? '^' : '') + rangesToString(ranges) + ']'\n  const snegs = '[' + (negate ? '' : '^') + rangesToString(negs) + ']'\n  const comb =\n    ranges.length && negs.length\n      ? '(' + sranges + '|' + snegs + ')'\n      : ranges.length\n      ? sranges\n      : snegs\n\n  return [comb, uflag, endPos - pos, true]\n}\n", "import { MinimatchOptions } from './index.js'\n/**\n * Un-escape a string that has been escaped with {@link escape}.\n *\n * If the {@link windowsPathsNoEscape} option is used, then square-brace\n * escapes are removed, but not backslash escapes.  For example, it will turn\n * the string `'[*]'` into `*`, but it will not turn `'\\\\*'` into `'*'`,\n * becuase `\\` is a path separator in `windowsPathsNoEscape` mode.\n *\n * When `windowsPathsNoEscape` is not set, then both brace escapes and\n * backslash escapes are removed.\n *\n * Slashes (and backslashes in `windowsPathsNoEscape` mode) cannot be escaped\n * or unescaped.\n */\nexport const unescape = (\n  s: string,\n  {\n    windowsPathsNoEscape = false,\n  }: Pick<MinimatchOptions, 'windowsPathsNoEscape'> = {}\n) => {\n  return windowsPathsNoEscape\n    ? s.replace(/\\[([^\\/\\\\])\\]/g, '$1')\n    : s.replace(/((?!\\\\).|^)\\[([^\\/\\\\])\\]/g, '$1$2').replace(/\\\\([^\\/])/g, '$1')\n}\n", "// parse a single path portion\n\nimport { parseClass } from './brace-expressions.js'\nimport { MinimatchOptions, MMRegExp } from './index.js'\nimport { unescape } from './unescape.js'\n\n// classes [] are handled by the parseClass method\n// for positive extglobs, we sub-parse the contents, and combine,\n// with the appropriate regexp close.\n// for negative extglobs, we sub-parse the contents, but then\n// have to include the rest of the pattern, then the parent, etc.,\n// as the thing that cannot be because RegExp negative lookaheads\n// are different from globs.\n//\n// So for example:\n// a@(i|w!(x|y)z|j)b => ^a(i|w((!?(x|y)zb).*)z|j)b$\n//   1   2 3   4 5 6      1   2    3   46      5 6\n//\n// Assembling the extglob requires not just the negated patterns themselves,\n// but also anything following the negative patterns up to the boundary\n// of the current pattern, plus anything following in the parent pattern.\n//\n//\n// So, first, we parse the string into an AST of extglobs, without turning\n// anything into regexps yet.\n//\n// ['a', {@ [['i'], ['w', {!['x', 'y']}, 'z'], ['j']]}, 'b']\n//\n// Then, for all the negative extglobs, we append whatever comes after in\n// each parent as their tail\n//\n// ['a', {@ [['i'], ['w', {!['x', 'y'], 'z', 'b'}, 'z'], ['j']]}, 'b']\n//\n// Lastly, we turn each of these pieces into a regexp, and join\n//\n//                                 v----- .* because there's more following,\n//                                 v    v  otherwise, .+ because it must be\n//                                 v    v  *something* there.\n// ['^a', {@ ['i', 'w(?:(!?(?:x|y).*zb$).*)z', 'j' ]}, 'b$']\n//   copy what follows into here--^^^^^\n// ['^a', '(?:i|w(?:(?!(?:x|y).*zb$).*)z|j)', 'b$']\n// ['^a(?:i|w(?:(?!(?:x|y).*zb$).*)z|j)b$']\n\nexport type ExtglobType = '!' | '?' | '+' | '*' | '@'\nconst types = new Set<ExtglobType>(['!', '?', '+', '*', '@'])\nconst isExtglobType = (c: string): c is ExtglobType =>\n  types.has(c as ExtglobType)\n\n// Patterns that get prepended to bind to the start of either the\n// entire string, or just a single path portion, to prevent dots\n// and/or traversal patterns, when needed.\n// Exts don't need the ^ or / bit, because the root binds that already.\nconst startNoTraversal = '(?!(?:^|/)\\\\.\\\\.?(?:$|/))'\nconst startNoDot = '(?!\\\\.)'\n\n// characters that indicate a start of pattern needs the \"no dots\" bit,\n// because a dot *might* be matched. ( is not in the list, because in\n// the case of a child extglob, it will handle the prevention itself.\nconst addPatternStart = new Set(['[', '.'])\n// cases where traversal is A-OK, no dot prevention needed\nconst justDots = new Set(['..', '.'])\nconst reSpecials = new Set('().*{}+?[]^$\\\\!')\nconst regExpEscape = (s: string) =>\n  s.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&')\n\n// any single thing other than /\nconst qmark = '[^/]'\n\n// * => any number of characters\nconst star = qmark + '*?'\n// use + when we need to ensure that *something* matches, because the * is\n// the only thing in the path portion.\nconst starNoEmpty = qmark + '+?'\n\n// remove the \\ chars that we added if we end up doing a nonmagic compare\n// const deslash = (s: string) => s.replace(/\\\\(.)/g, '$1')\n\nexport class AST {\n  type: ExtglobType | null\n  readonly #root: AST\n\n  #hasMagic?: boolean\n  #uflag: boolean = false\n  #parts: (string | AST)[] = []\n  readonly #parent?: AST\n  readonly #parentIndex: number\n  #negs: AST[]\n  #filledNegs: boolean = false\n  #options: MinimatchOptions\n  #toString?: string\n  // set to true if it's an extglob with no children\n  // (which really means one child of '')\n  #emptyExt: boolean = false\n\n  constructor(\n    type: ExtglobType | null,\n    parent?: AST,\n    options: MinimatchOptions = {}\n  ) {\n    this.type = type\n    // extglobs are inherently magical\n    if (type) this.#hasMagic = true\n    this.#parent = parent\n    this.#root = this.#parent ? this.#parent.#root : this\n    this.#options = this.#root === this ? options : this.#root.#options\n    this.#negs = this.#root === this ? [] : this.#root.#negs\n    if (type === '!' && !this.#root.#filledNegs) this.#negs.push(this)\n    this.#parentIndex = this.#parent ? this.#parent.#parts.length : 0\n  }\n\n  get hasMagic(): boolean | undefined {\n    /* c8 ignore start */\n    if (this.#hasMagic !== undefined) return this.#hasMagic\n    /* c8 ignore stop */\n    for (const p of this.#parts) {\n      if (typeof p === 'string') continue\n      if (p.type || p.hasMagic) return (this.#hasMagic = true)\n    }\n    // note: will be undefined until we generate the regexp src and find out\n    return this.#hasMagic\n  }\n\n  // reconstructs the pattern\n  toString(): string {\n    if (this.#toString !== undefined) return this.#toString\n    if (!this.type) {\n      return (this.#toString = this.#parts.map(p => String(p)).join(''))\n    } else {\n      return (this.#toString =\n        this.type + '(' + this.#parts.map(p => String(p)).join('|') + ')')\n    }\n  }\n\n  #fillNegs() {\n    /* c8 ignore start */\n    if (this !== this.#root) throw new Error('should only call on root')\n    if (this.#filledNegs) return this\n    /* c8 ignore stop */\n\n    // call toString() once to fill this out\n    this.toString()\n    this.#filledNegs = true\n    let n: AST | undefined\n    while ((n = this.#negs.pop())) {\n      if (n.type !== '!') continue\n      // walk up the tree, appending everthing that comes AFTER parentIndex\n      let p: AST | undefined = n\n      let pp = p.#parent\n      while (pp) {\n        for (\n          let i = p.#parentIndex + 1;\n          !pp.type && i < pp.#parts.length;\n          i++\n        ) {\n          for (const part of n.#parts) {\n            /* c8 ignore start */\n            if (typeof part === 'string') {\n              throw new Error('string part in extglob AST??')\n            }\n            /* c8 ignore stop */\n            part.copyIn(pp.#parts[i])\n          }\n        }\n        p = pp\n        pp = p.#parent\n      }\n    }\n    return this\n  }\n\n  push(...parts: (string | AST)[]) {\n    for (const p of parts) {\n      if (p === '') continue\n      /* c8 ignore start */\n      if (typeof p !== 'string' && !(p instanceof AST && p.#parent === this)) {\n        throw new Error('invalid part: ' + p)\n      }\n      /* c8 ignore stop */\n      this.#parts.push(p)\n    }\n  }\n\n  toJSON() {\n    const ret: any[] =\n      this.type === null\n        ? this.#parts.slice().map(p => (typeof p === 'string' ? p : p.toJSON()))\n        : [this.type, ...this.#parts.map(p => (p as AST).toJSON())]\n    if (this.isStart() && !this.type) ret.unshift([])\n    if (\n      this.isEnd() &&\n      (this === this.#root ||\n        (this.#root.#filledNegs && this.#parent?.type === '!'))\n    ) {\n      ret.push({})\n    }\n    return ret\n  }\n\n  isStart(): boolean {\n    if (this.#root === this) return true\n    // if (this.type) return !!this.#parent?.isStart()\n    if (!this.#parent?.isStart()) return false\n    if (this.#parentIndex === 0) return true\n    // if everything AHEAD of this is a negation, then it's still the \"start\"\n    const p = this.#parent\n    for (let i = 0; i < this.#parentIndex; i++) {\n      const pp = p.#parts[i]\n      if (!(pp instanceof AST && pp.type === '!')) {\n        return false\n      }\n    }\n    return true\n  }\n\n  isEnd(): boolean {\n    if (this.#root === this) return true\n    if (this.#parent?.type === '!') return true\n    if (!this.#parent?.isEnd()) return false\n    if (!this.type) return this.#parent?.isEnd()\n    // if not root, it'll always have a parent\n    /* c8 ignore start */\n    const pl = this.#parent ? this.#parent.#parts.length : 0\n    /* c8 ignore stop */\n    return this.#parentIndex === pl - 1\n  }\n\n  copyIn(part: AST | string) {\n    if (typeof part === 'string') this.push(part)\n    else this.push(part.clone(this))\n  }\n\n  clone(parent: AST) {\n    const c = new AST(this.type, parent)\n    for (const p of this.#parts) {\n      c.copyIn(p)\n    }\n    return c\n  }\n\n  static #parseAST(\n    str: string,\n    ast: AST,\n    pos: number,\n    opt: MinimatchOptions\n  ): number {\n    let escaping = false\n    let inBrace = false\n    let braceStart = -1\n    let braceNeg = false\n    if (ast.type === null) {\n      // outside of a extglob, append until we find a start\n      let i = pos\n      let acc = ''\n      while (i < str.length) {\n        const c = str.charAt(i++)\n        // still accumulate escapes at this point, but we do ignore\n        // starts that are escaped\n        if (escaping || c === '\\\\') {\n          escaping = !escaping\n          acc += c\n          continue\n        }\n\n        if (inBrace) {\n          if (i === braceStart + 1) {\n            if (c === '^' || c === '!') {\n              braceNeg = true\n            }\n          } else if (c === ']' && !(i === braceStart + 2 && braceNeg)) {\n            inBrace = false\n          }\n          acc += c\n          continue\n        } else if (c === '[') {\n          inBrace = true\n          braceStart = i\n          braceNeg = false\n          acc += c\n          continue\n        }\n\n        if (!opt.noext && isExtglobType(c) && str.charAt(i) === '(') {\n          ast.push(acc)\n          acc = ''\n          const ext = new AST(c, ast)\n          i = AST.#parseAST(str, ext, i, opt)\n          ast.push(ext)\n          continue\n        }\n        acc += c\n      }\n      ast.push(acc)\n      return i\n    }\n\n    // some kind of extglob, pos is at the (\n    // find the next | or )\n    let i = pos + 1\n    let part = new AST(null, ast)\n    const parts: AST[] = []\n    let acc = ''\n    while (i < str.length) {\n      const c = str.charAt(i++)\n      // still accumulate escapes at this point, but we do ignore\n      // starts that are escaped\n      if (escaping || c === '\\\\') {\n        escaping = !escaping\n        acc += c\n        continue\n      }\n\n      if (inBrace) {\n        if (i === braceStart + 1) {\n          if (c === '^' || c === '!') {\n            braceNeg = true\n          }\n        } else if (c === ']' && !(i === braceStart + 2 && braceNeg)) {\n          inBrace = false\n        }\n        acc += c\n        continue\n      } else if (c === '[') {\n        inBrace = true\n        braceStart = i\n        braceNeg = false\n        acc += c\n        continue\n      }\n\n      if (isExtglobType(c) && str.charAt(i) === '(') {\n        part.push(acc)\n        acc = ''\n        const ext = new AST(c, part)\n        part.push(ext)\n        i = AST.#parseAST(str, ext, i, opt)\n        continue\n      }\n      if (c === '|') {\n        part.push(acc)\n        acc = ''\n        parts.push(part)\n        part = new AST(null, ast)\n        continue\n      }\n      if (c === ')') {\n        if (acc === '' && ast.#parts.length === 0) {\n          ast.#emptyExt = true\n        }\n        part.push(acc)\n        acc = ''\n        ast.push(...parts, part)\n        return i\n      }\n      acc += c\n    }\n\n    // unfinished extglob\n    // if we got here, it was a malformed extglob! not an extglob, but\n    // maybe something else in there.\n    ast.type = null\n    ast.#hasMagic = undefined\n    ast.#parts = [str.substring(pos - 1)]\n    return i\n  }\n\n  static fromGlob(pattern: string, options: MinimatchOptions = {}) {\n    const ast = new AST(null, undefined, options)\n    AST.#parseAST(pattern, ast, 0, options)\n    return ast\n  }\n\n  // returns the regular expression if there's magic, or the unescaped\n  // string if not.\n  toMMPattern(): MMRegExp | string {\n    // should only be called on root\n    /* c8 ignore start */\n    if (this !== this.#root) return this.#root.toMMPattern()\n    /* c8 ignore stop */\n    const glob = this.toString()\n    const [re, body, hasMagic, uflag] = this.toRegExpSource()\n    // if we're in nocase mode, and not nocaseMagicOnly, then we do\n    // still need a regular expression if we have to case-insensitively\n    // match capital/lowercase characters.\n    const anyMagic =\n      hasMagic ||\n      this.#hasMagic ||\n      (this.#options.nocase &&\n        !this.#options.nocaseMagicOnly &&\n        glob.toUpperCase() !== glob.toLowerCase())\n    if (!anyMagic) {\n      return body\n    }\n\n    const flags = (this.#options.nocase ? 'i' : '') + (uflag ? 'u' : '')\n    return Object.assign(new RegExp(`^${re}$`, flags), {\n      _src: re,\n      _glob: glob,\n    })\n  }\n\n  get options() {\n    return this.#options\n  }\n\n  // returns the string match, the regexp source, whether there's magic\n  // in the regexp (so a regular expression is required) and whether or\n  // not the uflag is needed for the regular expression (for posix classes)\n  // TODO: instead of injecting the start/end at this point, just return\n  // the BODY of the regexp, along with the start/end portions suitable\n  // for binding the start/end in either a joined full-path makeRe context\n  // (where we bind to (^|/), or a standalone matchPart context (where\n  // we bind to ^, and not /).  Otherwise slashes get duped!\n  //\n  // In part-matching mode, the start is:\n  // - if not isStart: nothing\n  // - if traversal possible, but not allowed: ^(?!\\.\\.?$)\n  // - if dots allowed or not possible: ^\n  // - if dots possible and not allowed: ^(?!\\.)\n  // end is:\n  // - if not isEnd(): nothing\n  // - else: $\n  //\n  // In full-path matching mode, we put the slash at the START of the\n  // pattern, so start is:\n  // - if first pattern: same as part-matching mode\n  // - if not isStart(): nothing\n  // - if traversal possible, but not allowed: /(?!\\.\\.?(?:$|/))\n  // - if dots allowed or not possible: /\n  // - if dots possible and not allowed: /(?!\\.)\n  // end is:\n  // - if last pattern, same as part-matching mode\n  // - else nothing\n  //\n  // Always put the (?:$|/) on negated tails, though, because that has to be\n  // there to bind the end of the negated pattern portion, and it's easier to\n  // just stick it in now rather than try to inject it later in the middle of\n  // the pattern.\n  //\n  // We can just always return the same end, and leave it up to the caller\n  // to know whether it's going to be used joined or in parts.\n  // And, if the start is adjusted slightly, can do the same there:\n  // - if not isStart: nothing\n  // - if traversal possible, but not allowed: (?:/|^)(?!\\.\\.?$)\n  // - if dots allowed or not possible: (?:/|^)\n  // - if dots possible and not allowed: (?:/|^)(?!\\.)\n  //\n  // But it's better to have a simpler binding without a conditional, for\n  // performance, so probably better to return both start options.\n  //\n  // Then the caller just ignores the end if it's not the first pattern,\n  // and the start always gets applied.\n  //\n  // But that's always going to be $ if it's the ending pattern, or nothing,\n  // so the caller can just attach $ at the end of the pattern when building.\n  //\n  // So the todo is:\n  // - better detect what kind of start is needed\n  // - return both flavors of starting pattern\n  // - attach $ at the end of the pattern when creating the actual RegExp\n  //\n  // Ah, but wait, no, that all only applies to the root when the first pattern\n  // is not an extglob. If the first pattern IS an extglob, then we need all\n  // that dot prevention biz to live in the extglob portions, because eg\n  // +(*|.x*) can match .xy but not .yx.\n  //\n  // So, return the two flavors if it's #root and the first child is not an\n  // AST, otherwise leave it to the child AST to handle it, and there,\n  // use the (?:^|/) style of start binding.\n  //\n  // Even simplified further:\n  // - Since the start for a join is eg /(?!\\.) and the start for a part\n  // is ^(?!\\.), we can just prepend (?!\\.) to the pattern (either root\n  // or start or whatever) and prepend ^ or / at the Regexp construction.\n  toRegExpSource(\n    allowDot?: boolean\n  ): [re: string, body: string, hasMagic: boolean, uflag: boolean] {\n    const dot = allowDot ?? !!this.#options.dot\n    if (this.#root === this) this.#fillNegs()\n    if (!this.type) {\n      const noEmpty = this.isStart() && this.isEnd()\n      const src = this.#parts\n        .map(p => {\n          const [re, _, hasMagic, uflag] =\n            typeof p === 'string'\n              ? AST.#parseGlob(p, this.#hasMagic, noEmpty)\n              : p.toRegExpSource(allowDot)\n          this.#hasMagic = this.#hasMagic || hasMagic\n          this.#uflag = this.#uflag || uflag\n          return re\n        })\n        .join('')\n\n      let start = ''\n      if (this.isStart()) {\n        if (typeof this.#parts[0] === 'string') {\n          // this is the string that will match the start of the pattern,\n          // so we need to protect against dots and such.\n\n          // '.' and '..' cannot match unless the pattern is that exactly,\n          // even if it starts with . or dot:true is set.\n          const dotTravAllowed =\n            this.#parts.length === 1 && justDots.has(this.#parts[0])\n          if (!dotTravAllowed) {\n            const aps = addPatternStart\n            // check if we have a possibility of matching . or ..,\n            // and prevent that.\n            const needNoTrav =\n              // dots are allowed, and the pattern starts with [ or .\n              (dot && aps.has(src.charAt(0))) ||\n              // the pattern starts with \\., and then [ or .\n              (src.startsWith('\\\\.') && aps.has(src.charAt(2))) ||\n              // the pattern starts with \\.\\., and then [ or .\n              (src.startsWith('\\\\.\\\\.') && aps.has(src.charAt(4)))\n            // no need to prevent dots if it can't match a dot, or if a\n            // sub-pattern will be preventing it anyway.\n            const needNoDot = !dot && !allowDot && aps.has(src.charAt(0))\n\n            start = needNoTrav ? startNoTraversal : needNoDot ? startNoDot : ''\n          }\n        }\n      }\n\n      // append the \"end of path portion\" pattern to negation tails\n      let end = ''\n      if (\n        this.isEnd() &&\n        this.#root.#filledNegs &&\n        this.#parent?.type === '!'\n      ) {\n        end = '(?:$|\\\\/)'\n      }\n      const final = start + src + end\n      return [\n        final,\n        unescape(src),\n        (this.#hasMagic = !!this.#hasMagic),\n        this.#uflag,\n      ]\n    }\n\n    // We need to calculate the body *twice* if it's a repeat pattern\n    // at the start, once in nodot mode, then again in dot mode, so a\n    // pattern like *(?) can match 'x.y'\n\n    const repeated = this.type === '*' || this.type === '+'\n    // some kind of extglob\n    const start = this.type === '!' ? '(?:(?!(?:' : '(?:'\n    let body = this.#partsToRegExp(dot)\n\n    if (this.isStart() && this.isEnd() && !body && this.type !== '!') {\n      // invalid extglob, has to at least be *something* present, if it's\n      // the entire path portion.\n      const s = this.toString()\n      this.#parts = [s]\n      this.type = null\n      this.#hasMagic = undefined\n      return [s, unescape(this.toString()), false, false]\n    }\n\n    // XXX abstract out this map method\n    let bodyDotAllowed =\n      !repeated || allowDot || dot || !startNoDot\n        ? ''\n        : this.#partsToRegExp(true)\n    if (bodyDotAllowed === body) {\n      bodyDotAllowed = ''\n    }\n    if (bodyDotAllowed) {\n      body = `(?:${body})(?:${bodyDotAllowed})*?`\n    }\n\n    // an empty !() is exactly equivalent to a starNoEmpty\n    let final = ''\n    if (this.type === '!' && this.#emptyExt) {\n      final = (this.isStart() && !dot ? startNoDot : '') + starNoEmpty\n    } else {\n      const close =\n        this.type === '!'\n          ? // !() must match something,but !(x) can match ''\n            '))' +\n            (this.isStart() && !dot && !allowDot ? startNoDot : '') +\n            star +\n            ')'\n          : this.type === '@'\n          ? ')'\n          : this.type === '?'\n          ? ')?'\n          : this.type === '+' && bodyDotAllowed\n          ? ')'\n          : this.type === '*' && bodyDotAllowed\n          ? `)?`\n          : `)${this.type}`\n      final = start + body + close\n    }\n    return [\n      final,\n      unescape(body),\n      (this.#hasMagic = !!this.#hasMagic),\n      this.#uflag,\n    ]\n  }\n\n  #partsToRegExp(dot: boolean) {\n    return this.#parts\n      .map(p => {\n        // extglob ASTs should only contain parent ASTs\n        /* c8 ignore start */\n        if (typeof p === 'string') {\n          throw new Error('string type in extglob ast??')\n        }\n        /* c8 ignore stop */\n        // can ignore hasMagic, because extglobs are already always magic\n        const [re, _, _hasMagic, uflag] = p.toRegExpSource(dot)\n        this.#uflag = this.#uflag || uflag\n        return re\n      })\n      .filter(p => !(this.isStart() && this.isEnd()) || !!p)\n      .join('|')\n  }\n\n  static #parseGlob(\n    glob: string,\n    hasMagic: boolean | undefined,\n    noEmpty: boolean = false\n  ): [re: string, body: string, hasMagic: boolean, uflag: boolean] {\n    let escaping = false\n    let re = ''\n    let uflag = false\n    for (let i = 0; i < glob.length; i++) {\n      const c = glob.charAt(i)\n      if (escaping) {\n        escaping = false\n        re += (reSpecials.has(c) ? '\\\\' : '') + c\n        continue\n      }\n      if (c === '\\\\') {\n        if (i === glob.length - 1) {\n          re += '\\\\\\\\'\n        } else {\n          escaping = true\n        }\n        continue\n      }\n      if (c === '[') {\n        const [src, needUflag, consumed, magic] = parseClass(glob, i)\n        if (consumed) {\n          re += src\n          uflag = uflag || needUflag\n          i += consumed - 1\n          hasMagic = hasMagic || magic\n          continue\n        }\n      }\n      if (c === '*') {\n        if (noEmpty && glob === '*') re += starNoEmpty\n        else re += star\n        hasMagic = true\n        continue\n      }\n      if (c === '?') {\n        re += qmark\n        hasMagic = true\n        continue\n      }\n      re += regExpEscape(c)\n    }\n    return [re, unescape(glob), !!hasMagic, uflag]\n  }\n}\n", "import { MinimatchOptions } from './index.js'\n/**\n * Escape all magic characters in a glob pattern.\n *\n * If the {@link windowsPathsNoEscape | GlobOptions.windowsPathsNoEscape}\n * option is used, then characters are escaped by wrapping in `[]`, because\n * a magic character wrapped in a character class can only be satisfied by\n * that exact character.  In this mode, `\\` is _not_ escaped, because it is\n * not interpreted as a magic character, but instead as a path separator.\n */\nexport const escape = (\n  s: string,\n  {\n    windowsPathsNoEscape = false,\n  }: Pick<MinimatchOptions, 'windowsPathsNoEscape'> = {}\n) => {\n  // don't need to escape +@! because we escape the parens\n  // that make those magic, and escaping ! as [!] isn't valid,\n  // because [!]] is a valid glob class meaning not ']'.\n  return windowsPathsNoEscape\n    ? s.replace(/[?*()[\\]]/g, '[$&]')\n    : s.replace(/[?*()[\\]\\\\]/g, '\\\\$&')\n}\n", "import expand from 'brace-expansion'\nimport { assertValidPattern } from './assert-valid-pattern.js'\nimport { AST, ExtglobType } from './ast.js'\nimport { escape } from './escape.js'\nimport { unescape } from './unescape.js'\n\ntype Platform =\n  | 'aix'\n  | 'android'\n  | 'darwin'\n  | 'freebsd'\n  | 'haiku'\n  | 'linux'\n  | 'openbsd'\n  | 'sunos'\n  | 'win32'\n  | 'cygwin'\n  | 'netbsd'\n\nexport interface MinimatchOptions {\n  nobrace?: boolean\n  nocomment?: boolean\n  nonegate?: boolean\n  debug?: boolean\n  noglobstar?: boolean\n  noext?: boolean\n  nonull?: boolean\n  windowsPathsNoEscape?: boolean\n  allowWindowsEscape?: boolean\n  partial?: boolean\n  dot?: boolean\n  nocase?: boolean\n  nocaseMagicOnly?: boolean\n  magicalBraces?: boolean\n  matchBase?: boolean\n  flipNegate?: boolean\n  preserveMultipleSlashes?: boolean\n  optimizationLevel?: number\n  platform?: Platform\n  windowsNoMagicRoot?: boolean\n}\n\nexport const minimatch = (\n  p: string,\n  pattern: string,\n  options: MinimatchOptions = {}\n) => {\n  assertValidPattern(pattern)\n\n  // shortcut: comments match nothing.\n  if (!options.nocomment && pattern.charAt(0) === '#') {\n    return false\n  }\n\n  return new Minimatch(pattern, options).match(p)\n}\n\n// Optimized checking for the most common glob patterns.\nconst starDotExtRE = /^\\*+([^+@!?\\*\\[\\(]*)$/\nconst starDotExtTest = (ext: string) => (f: string) =>\n  !f.startsWith('.') && f.endsWith(ext)\nconst starDotExtTestDot = (ext: string) => (f: string) => f.endsWith(ext)\nconst starDotExtTestNocase = (ext: string) => {\n  ext = ext.toLowerCase()\n  return (f: string) => !f.startsWith('.') && f.toLowerCase().endsWith(ext)\n}\nconst starDotExtTestNocaseDot = (ext: string) => {\n  ext = ext.toLowerCase()\n  return (f: string) => f.toLowerCase().endsWith(ext)\n}\nconst starDotStarRE = /^\\*+\\.\\*+$/\nconst starDotStarTest = (f: string) => !f.startsWith('.') && f.includes('.')\nconst starDotStarTestDot = (f: string) =>\n  f !== '.' && f !== '..' && f.includes('.')\nconst dotStarRE = /^\\.\\*+$/\nconst dotStarTest = (f: string) => f !== '.' && f !== '..' && f.startsWith('.')\nconst starRE = /^\\*+$/\nconst starTest = (f: string) => f.length !== 0 && !f.startsWith('.')\nconst starTestDot = (f: string) => f.length !== 0 && f !== '.' && f !== '..'\nconst qmarksRE = /^\\?+([^+@!?\\*\\[\\(]*)?$/\nconst qmarksTestNocase = ([$0, ext = '']: RegExpMatchArray) => {\n  const noext = qmarksTestNoExt([$0])\n  if (!ext) return noext\n  ext = ext.toLowerCase()\n  return (f: string) => noext(f) && f.toLowerCase().endsWith(ext)\n}\nconst qmarksTestNocaseDot = ([$0, ext = '']: RegExpMatchArray) => {\n  const noext = qmarksTestNoExtDot([$0])\n  if (!ext) return noext\n  ext = ext.toLowerCase()\n  return (f: string) => noext(f) && f.toLowerCase().endsWith(ext)\n}\nconst qmarksTestDot = ([$0, ext = '']: RegExpMatchArray) => {\n  const noext = qmarksTestNoExtDot([$0])\n  return !ext ? noext : (f: string) => noext(f) && f.endsWith(ext)\n}\nconst qmarksTest = ([$0, ext = '']: RegExpMatchArray) => {\n  const noext = qmarksTestNoExt([$0])\n  return !ext ? noext : (f: string) => noext(f) && f.endsWith(ext)\n}\nconst qmarksTestNoExt = ([$0]: RegExpMatchArray) => {\n  const len = $0.length\n  return (f: string) => f.length === len && !f.startsWith('.')\n}\nconst qmarksTestNoExtDot = ([$0]: RegExpMatchArray) => {\n  const len = $0.length\n  return (f: string) => f.length === len && f !== '.' && f !== '..'\n}\n\n/* c8 ignore start */\nconst defaultPlatform: Platform = (\n  typeof process === 'object' && process\n    ? (typeof process.env === 'object' &&\n        process.env &&\n        process.env.__MINIMATCH_TESTING_PLATFORM__) ||\n      process.platform\n    : 'posix'\n) as Platform\ntype Sep = '\\\\' | '/'\nconst path: { [k: string]: { sep: Sep } } = {\n  win32: { sep: '\\\\' },\n  posix: { sep: '/' },\n}\n/* c8 ignore stop */\n\nexport const sep = defaultPlatform === 'win32' ? path.win32.sep : path.posix.sep\nminimatch.sep = sep\n\nexport const GLOBSTAR = Symbol('globstar **')\nminimatch.GLOBSTAR = GLOBSTAR\n\n// any single thing other than /\n// don't need to escape / when using new RegExp()\nconst qmark = '[^/]'\n\n// * => any number of characters\nconst star = qmark + '*?'\n\n// ** when dots are allowed.  Anything goes, except .. and .\n// not (^ or / followed by one or two dots followed by $ or /),\n// followed by anything, any number of times.\nconst twoStarDot = '(?:(?!(?:\\\\/|^)(?:\\\\.{1,2})($|\\\\/)).)*?'\n\n// not a ^ or / followed by a dot,\n// followed by anything, any number of times.\nconst twoStarNoDot = '(?:(?!(?:\\\\/|^)\\\\.).)*?'\n\nexport const filter =\n  (pattern: string, options: MinimatchOptions = {}) =>\n  (p: string) =>\n    minimatch(p, pattern, options)\nminimatch.filter = filter\n\nconst ext = (a: MinimatchOptions, b: MinimatchOptions = {}) =>\n  Object.assign({}, a, b)\n\nexport const defaults = (def: MinimatchOptions): typeof minimatch => {\n  if (!def || typeof def !== 'object' || !Object.keys(def).length) {\n    return minimatch\n  }\n\n  const orig = minimatch\n\n  const m = (p: string, pattern: string, options: MinimatchOptions = {}) =>\n    orig(p, pattern, ext(def, options))\n\n  return Object.assign(m, {\n    Minimatch: class Minimatch extends orig.Minimatch {\n      constructor(pattern: string, options: MinimatchOptions = {}) {\n        super(pattern, ext(def, options))\n      }\n      static defaults(options: MinimatchOptions) {\n        return orig.defaults(ext(def, options)).Minimatch\n      }\n    },\n\n    AST: class AST extends orig.AST {\n      /* c8 ignore start */\n      constructor(\n        type: ExtglobType | null,\n        parent?: AST,\n        options: MinimatchOptions = {}\n      ) {\n        super(type, parent, ext(def, options))\n      }\n      /* c8 ignore stop */\n\n      static fromGlob(pattern: string, options: MinimatchOptions = {}) {\n        return orig.AST.fromGlob(pattern, ext(def, options))\n      }\n    },\n\n    unescape: (\n      s: string,\n      options: Pick<MinimatchOptions, 'windowsPathsNoEscape'> = {}\n    ) => orig.unescape(s, ext(def, options)),\n\n    escape: (\n      s: string,\n      options: Pick<MinimatchOptions, 'windowsPathsNoEscape'> = {}\n    ) => orig.escape(s, ext(def, options)),\n\n    filter: (pattern: string, options: MinimatchOptions = {}) =>\n      orig.filter(pattern, ext(def, options)),\n\n    defaults: (options: MinimatchOptions) => orig.defaults(ext(def, options)),\n\n    makeRe: (pattern: string, options: MinimatchOptions = {}) =>\n      orig.makeRe(pattern, ext(def, options)),\n\n    braceExpand: (pattern: string, options: MinimatchOptions = {}) =>\n      orig.braceExpand(pattern, ext(def, options)),\n\n    match: (list: string[], pattern: string, options: MinimatchOptions = {}) =>\n      orig.match(list, pattern, ext(def, options)),\n\n    sep: orig.sep,\n    GLOBSTAR: GLOBSTAR as typeof GLOBSTAR,\n  })\n}\nminimatch.defaults = defaults\n\n// Brace expansion:\n// a{b,c}d -> abd acd\n// a{b,}c -> abc ac\n// a{0..3}d -> a0d a1d a2d a3d\n// a{b,c{d,e}f}g -> abg acdfg acefg\n// a{b,c}d{e,f}g -> abdeg acdeg abdeg abdfg\n//\n// Invalid sets are not expanded.\n// a{2..}b -> a{2..}b\n// a{b}c -> a{b}c\nexport const braceExpand = (\n  pattern: string,\n  options: MinimatchOptions = {}\n) => {\n  assertValidPattern(pattern)\n\n  // Thanks to Yeting Li <https://github.com/yetingli> for\n  // improving this regexp to avoid a ReDOS vulnerability.\n  if (options.nobrace || !/\\{(?:(?!\\{).)*\\}/.test(pattern)) {\n    // shortcut. no need to expand.\n    return [pattern]\n  }\n\n  return expand(pattern)\n}\nminimatch.braceExpand = braceExpand\n\n// parse a component of the expanded set.\n// At this point, no pattern may contain \"/\" in it\n// so we're going to return a 2d array, where each entry is the full\n// pattern, split on '/', and then turned into a regular expression.\n// A regexp is made at the end which joins each array with an\n// escaped /, and another full one which joins each regexp with |.\n//\n// Following the lead of Bash 4.1, note that \"**\" only has special meaning\n// when it is the *only* thing in a path portion.  Otherwise, any series\n// of * is equivalent to a single *.  Globstar behavior is enabled by\n// default, and can be disabled by setting options.noglobstar.\n\nexport const makeRe = (pattern: string, options: MinimatchOptions = {}) =>\n  new Minimatch(pattern, options).makeRe()\nminimatch.makeRe = makeRe\n\nexport const match = (\n  list: string[],\n  pattern: string,\n  options: MinimatchOptions = {}\n) => {\n  const mm = new Minimatch(pattern, options)\n  list = list.filter(f => mm.match(f))\n  if (mm.options.nonull && !list.length) {\n    list.push(pattern)\n  }\n  return list\n}\nminimatch.match = match\n\n// replace stuff like \\* with *\nconst globMagic = /[?*]|[+@!]\\(.*?\\)|\\[|\\]/\nconst regExpEscape = (s: string) =>\n  s.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&')\n\nexport type MMRegExp = RegExp & {\n  _src?: string\n  _glob?: string\n}\n\nexport type ParseReturnFiltered = string | MMRegExp | typeof GLOBSTAR\nexport type ParseReturn = ParseReturnFiltered | false\n\nexport class Minimatch {\n  options: MinimatchOptions\n  set: ParseReturnFiltered[][]\n  pattern: string\n\n  windowsPathsNoEscape: boolean\n  nonegate: boolean\n  negate: boolean\n  comment: boolean\n  empty: boolean\n  preserveMultipleSlashes: boolean\n  partial: boolean\n  globSet: string[]\n  globParts: string[][]\n  nocase: boolean\n\n  isWindows: boolean\n  platform: Platform\n  windowsNoMagicRoot: boolean\n\n  regexp: false | null | MMRegExp\n  constructor(pattern: string, options: MinimatchOptions = {}) {\n    assertValidPattern(pattern)\n\n    options = options || {}\n    this.options = options\n    this.pattern = pattern\n    this.platform = options.platform || defaultPlatform\n    this.isWindows = this.platform === 'win32'\n    this.windowsPathsNoEscape =\n      !!options.windowsPathsNoEscape || options.allowWindowsEscape === false\n    if (this.windowsPathsNoEscape) {\n      this.pattern = this.pattern.replace(/\\\\/g, '/')\n    }\n    this.preserveMultipleSlashes = !!options.preserveMultipleSlashes\n    this.regexp = null\n    this.negate = false\n    this.nonegate = !!options.nonegate\n    this.comment = false\n    this.empty = false\n    this.partial = !!options.partial\n    this.nocase = !!this.options.nocase\n    this.windowsNoMagicRoot =\n      options.windowsNoMagicRoot !== undefined\n        ? options.windowsNoMagicRoot\n        : !!(this.isWindows && this.nocase)\n\n    this.globSet = []\n    this.globParts = []\n    this.set = []\n\n    // make the set of regexps etc.\n    this.make()\n  }\n\n  hasMagic(): boolean {\n    if (this.options.magicalBraces && this.set.length > 1) {\n      return true\n    }\n    for (const pattern of this.set) {\n      for (const part of pattern) {\n        if (typeof part !== 'string') return true\n      }\n    }\n    return false\n  }\n\n  debug(..._: any[]) {}\n\n  make() {\n    const pattern = this.pattern\n    const options = this.options\n\n    // empty patterns and comments match nothing.\n    if (!options.nocomment && pattern.charAt(0) === '#') {\n      this.comment = true\n      return\n    }\n\n    if (!pattern) {\n      this.empty = true\n      return\n    }\n\n    // step 1: figure out negation, etc.\n    this.parseNegate()\n\n    // step 2: expand braces\n    this.globSet = [...new Set(this.braceExpand())]\n\n    if (options.debug) {\n      this.debug = (...args: any[]) => console.error(...args)\n    }\n\n    this.debug(this.pattern, this.globSet)\n\n    // step 3: now we have a set, so turn each one into a series of\n    // path-portion matching patterns.\n    // These will be regexps, except in the case of \"**\", which is\n    // set to the GLOBSTAR object for globstar behavior,\n    // and will not contain any / characters\n    //\n    // First, we preprocess to make the glob pattern sets a bit simpler\n    // and deduped.  There are some perf-killing patterns that can cause\n    // problems with a glob walk, but we can simplify them down a bit.\n    const rawGlobParts = this.globSet.map(s => this.slashSplit(s))\n    this.globParts = this.preprocess(rawGlobParts)\n    this.debug(this.pattern, this.globParts)\n\n    // glob --> regexps\n    let set = this.globParts.map((s, _, __) => {\n      if (this.isWindows && this.windowsNoMagicRoot) {\n        // check if it's a drive or unc path.\n        const isUNC =\n          s[0] === '' &&\n          s[1] === '' &&\n          (s[2] === '?' || !globMagic.test(s[2])) &&\n          !globMagic.test(s[3])\n        const isDrive = /^[a-z]:/i.test(s[0])\n        if (isUNC) {\n          return [...s.slice(0, 4), ...s.slice(4).map(ss => this.parse(ss))]\n        } else if (isDrive) {\n          return [s[0], ...s.slice(1).map(ss => this.parse(ss))]\n        }\n      }\n      return s.map(ss => this.parse(ss))\n    })\n\n    this.debug(this.pattern, set)\n\n    // filter out everything that didn't compile properly.\n    this.set = set.filter(\n      s => s.indexOf(false) === -1\n    ) as ParseReturnFiltered[][]\n\n    // do not treat the ? in UNC paths as magic\n    if (this.isWindows) {\n      for (let i = 0; i < this.set.length; i++) {\n        const p = this.set[i]\n        if (\n          p[0] === '' &&\n          p[1] === '' &&\n          this.globParts[i][2] === '?' &&\n          typeof p[3] === 'string' &&\n          /^[a-z]:$/i.test(p[3])\n        ) {\n          p[2] = '?'\n        }\n      }\n    }\n\n    this.debug(this.pattern, this.set)\n  }\n\n  // various transforms to equivalent pattern sets that are\n  // faster to process in a filesystem walk.  The goal is to\n  // eliminate what we can, and push all ** patterns as far\n  // to the right as possible, even if it increases the number\n  // of patterns that we have to process.\n  preprocess(globParts: string[][]) {\n    // if we're not in globstar mode, then turn all ** into *\n    if (this.options.noglobstar) {\n      for (let i = 0; i < globParts.length; i++) {\n        for (let j = 0; j < globParts[i].length; j++) {\n          if (globParts[i][j] === '**') {\n            globParts[i][j] = '*'\n          }\n        }\n      }\n    }\n\n    const { optimizationLevel = 1 } = this.options\n\n    if (optimizationLevel >= 2) {\n      // aggressive optimization for the purpose of fs walking\n      globParts = this.firstPhasePreProcess(globParts)\n      globParts = this.secondPhasePreProcess(globParts)\n    } else if (optimizationLevel >= 1) {\n      // just basic optimizations to remove some .. parts\n      globParts = this.levelOneOptimize(globParts)\n    } else {\n      // just collapse multiple ** portions into one\n      globParts = this.adjascentGlobstarOptimize(globParts)\n    }\n\n    return globParts\n  }\n\n  // just get rid of adjascent ** portions\n  adjascentGlobstarOptimize(globParts: string[][]) {\n    return globParts.map(parts => {\n      let gs: number = -1\n      while (-1 !== (gs = parts.indexOf('**', gs + 1))) {\n        let i = gs\n        while (parts[i + 1] === '**') {\n          i++\n        }\n        if (i !== gs) {\n          parts.splice(gs, i - gs)\n        }\n      }\n      return parts\n    })\n  }\n\n  // get rid of adjascent ** and resolve .. portions\n  levelOneOptimize(globParts: string[][]) {\n    return globParts.map(parts => {\n      parts = parts.reduce((set: string[], part) => {\n        const prev = set[set.length - 1]\n        if (part === '**' && prev === '**') {\n          return set\n        }\n        if (part === '..') {\n          if (prev && prev !== '..' && prev !== '.' && prev !== '**') {\n            set.pop()\n            return set\n          }\n        }\n        set.push(part)\n        return set\n      }, [])\n      return parts.length === 0 ? [''] : parts\n    })\n  }\n\n  levelTwoFileOptimize(parts: string | string[]) {\n    if (!Array.isArray(parts)) {\n      parts = this.slashSplit(parts)\n    }\n    let didSomething: boolean = false\n    do {\n      didSomething = false\n      // <pre>/<e>/<rest> -> <pre>/<rest>\n      if (!this.preserveMultipleSlashes) {\n        for (let i = 1; i < parts.length - 1; i++) {\n          const p = parts[i]\n          // don't squeeze out UNC patterns\n          if (i === 1 && p === '' && parts[0] === '') continue\n          if (p === '.' || p === '') {\n            didSomething = true\n            parts.splice(i, 1)\n            i--\n          }\n        }\n        if (\n          parts[0] === '.' &&\n          parts.length === 2 &&\n          (parts[1] === '.' || parts[1] === '')\n        ) {\n          didSomething = true\n          parts.pop()\n        }\n      }\n\n      // <pre>/<p>/../<rest> -> <pre>/<rest>\n      let dd: number = 0\n      while (-1 !== (dd = parts.indexOf('..', dd + 1))) {\n        const p = parts[dd - 1]\n        if (p && p !== '.' && p !== '..' && p !== '**') {\n          didSomething = true\n          parts.splice(dd - 1, 2)\n          dd -= 2\n        }\n      }\n    } while (didSomething)\n    return parts.length === 0 ? [''] : parts\n  }\n\n  // First phase: single-pattern processing\n  // <pre> is 1 or more portions\n  // <rest> is 1 or more portions\n  // <p> is any portion other than ., .., '', or **\n  // <e> is . or ''\n  //\n  // **/.. is *brutal* for filesystem walking performance, because\n  // it effectively resets the recursive walk each time it occurs,\n  // and ** cannot be reduced out by a .. pattern part like a regexp\n  // or most strings (other than .., ., and '') can be.\n  //\n  // <pre>/**/../<p>/<p>/<rest> -> {<pre>/../<p>/<p>/<rest>,<pre>/**/<p>/<p>/<rest>}\n  // <pre>/<e>/<rest> -> <pre>/<rest>\n  // <pre>/<p>/../<rest> -> <pre>/<rest>\n  // **/**/<rest> -> **/<rest>\n  //\n  // **/*/<rest> -> */**/<rest> <== not valid because ** doesn't follow\n  // this WOULD be allowed if ** did follow symlinks, or * didn't\n  firstPhasePreProcess(globParts: string[][]) {\n    let didSomething = false\n    do {\n      didSomething = false\n      // <pre>/**/../<p>/<p>/<rest> -> {<pre>/../<p>/<p>/<rest>,<pre>/**/<p>/<p>/<rest>}\n      for (let parts of globParts) {\n        let gs: number = -1\n        while (-1 !== (gs = parts.indexOf('**', gs + 1))) {\n          let gss: number = gs\n          while (parts[gss + 1] === '**') {\n            // <pre>/**/**/<rest> -> <pre>/**/<rest>\n            gss++\n          }\n          // eg, if gs is 2 and gss is 4, that means we have 3 **\n          // parts, and can remove 2 of them.\n          if (gss > gs) {\n            parts.splice(gs + 1, gss - gs)\n          }\n\n          let next = parts[gs + 1]\n          const p = parts[gs + 2]\n          const p2 = parts[gs + 3]\n          if (next !== '..') continue\n          if (\n            !p ||\n            p === '.' ||\n            p === '..' ||\n            !p2 ||\n            p2 === '.' ||\n            p2 === '..'\n          ) {\n            continue\n          }\n          didSomething = true\n          // edit parts in place, and push the new one\n          parts.splice(gs, 1)\n          const other = parts.slice(0)\n          other[gs] = '**'\n          globParts.push(other)\n          gs--\n        }\n\n        // <pre>/<e>/<rest> -> <pre>/<rest>\n        if (!this.preserveMultipleSlashes) {\n          for (let i = 1; i < parts.length - 1; i++) {\n            const p = parts[i]\n            // don't squeeze out UNC patterns\n            if (i === 1 && p === '' && parts[0] === '') continue\n            if (p === '.' || p === '') {\n              didSomething = true\n              parts.splice(i, 1)\n              i--\n            }\n          }\n          if (\n            parts[0] === '.' &&\n            parts.length === 2 &&\n            (parts[1] === '.' || parts[1] === '')\n          ) {\n            didSomething = true\n            parts.pop()\n          }\n        }\n\n        // <pre>/<p>/../<rest> -> <pre>/<rest>\n        let dd: number = 0\n        while (-1 !== (dd = parts.indexOf('..', dd + 1))) {\n          const p = parts[dd - 1]\n          if (p && p !== '.' && p !== '..' && p !== '**') {\n            didSomething = true\n            const needDot = dd === 1 && parts[dd + 1] === '**'\n            const splin = needDot ? ['.'] : []\n            parts.splice(dd - 1, 2, ...splin)\n            if (parts.length === 0) parts.push('')\n            dd -= 2\n          }\n        }\n      }\n    } while (didSomething)\n\n    return globParts\n  }\n\n  // second phase: multi-pattern dedupes\n  // {<pre>/*/<rest>,<pre>/<p>/<rest>} -> <pre>/*/<rest>\n  // {<pre>/<rest>,<pre>/<rest>} -> <pre>/<rest>\n  // {<pre>/**/<rest>,<pre>/<rest>} -> <pre>/**/<rest>\n  //\n  // {<pre>/**/<rest>,<pre>/**/<p>/<rest>} -> <pre>/**/<rest>\n  // ^-- not valid because ** doens't follow symlinks\n  secondPhasePreProcess(globParts: string[][]): string[][] {\n    for (let i = 0; i < globParts.length - 1; i++) {\n      for (let j = i + 1; j < globParts.length; j++) {\n        const matched = this.partsMatch(\n          globParts[i],\n          globParts[j],\n          !this.preserveMultipleSlashes\n        )\n        if (matched) {\n          globParts[i] = []\n          globParts[j] = matched\n          break\n        }\n      }\n    }\n    return globParts.filter(gs => gs.length)\n  }\n\n  partsMatch(\n    a: string[],\n    b: string[],\n    emptyGSMatch: boolean = false\n  ): false | string[] {\n    let ai = 0\n    let bi = 0\n    let result: string[] = []\n    let which: string = ''\n    while (ai < a.length && bi < b.length) {\n      if (a[ai] === b[bi]) {\n        result.push(which === 'b' ? b[bi] : a[ai])\n        ai++\n        bi++\n      } else if (emptyGSMatch && a[ai] === '**' && b[bi] === a[ai + 1]) {\n        result.push(a[ai])\n        ai++\n      } else if (emptyGSMatch && b[bi] === '**' && a[ai] === b[bi + 1]) {\n        result.push(b[bi])\n        bi++\n      } else if (\n        a[ai] === '*' &&\n        b[bi] &&\n        (this.options.dot || !b[bi].startsWith('.')) &&\n        b[bi] !== '**'\n      ) {\n        if (which === 'b') return false\n        which = 'a'\n        result.push(a[ai])\n        ai++\n        bi++\n      } else if (\n        b[bi] === '*' &&\n        a[ai] &&\n        (this.options.dot || !a[ai].startsWith('.')) &&\n        a[ai] !== '**'\n      ) {\n        if (which === 'a') return false\n        which = 'b'\n        result.push(b[bi])\n        ai++\n        bi++\n      } else {\n        return false\n      }\n    }\n    // if we fall out of the loop, it means they two are identical\n    // as long as their lengths match\n    return a.length === b.length && result\n  }\n\n  parseNegate() {\n    if (this.nonegate) return\n\n    const pattern = this.pattern\n    let negate = false\n    let negateOffset = 0\n\n    for (let i = 0; i < pattern.length && pattern.charAt(i) === '!'; i++) {\n      negate = !negate\n      negateOffset++\n    }\n\n    if (negateOffset) this.pattern = pattern.slice(negateOffset)\n    this.negate = negate\n  }\n\n  // set partial to true to test if, for example,\n  // \"/a/b\" matches the start of \"/*/b/*/d\"\n  // Partial means, if you run out of file before you run\n  // out of pattern, then that's fine, as long as all\n  // the parts match.\n  matchOne(file: string[], pattern: ParseReturn[], partial: boolean = false) {\n    const options = this.options\n\n    // UNC paths like //?/X:/... can match X:/... and vice versa\n    // Drive letters in absolute drive or unc paths are always compared\n    // case-insensitively.\n    if (this.isWindows) {\n      const fileDrive = typeof file[0] === 'string' && /^[a-z]:$/i.test(file[0])\n      const fileUNC =\n        !fileDrive &&\n        file[0] === '' &&\n        file[1] === '' &&\n        file[2] === '?' &&\n        /^[a-z]:$/i.test(file[3])\n\n      const patternDrive =\n        typeof pattern[0] === 'string' && /^[a-z]:$/i.test(pattern[0])\n      const patternUNC =\n        !patternDrive &&\n        pattern[0] === '' &&\n        pattern[1] === '' &&\n        pattern[2] === '?' &&\n        typeof pattern[3] === 'string' &&\n        /^[a-z]:$/i.test(pattern[3])\n\n      const fdi = fileUNC ? 3 : fileDrive ? 0 : undefined\n      const pdi = patternUNC ? 3 : patternDrive ? 0 : undefined\n      if (typeof fdi === 'number' && typeof pdi === 'number') {\n        const [fd, pd]: [string, string] = [file[fdi], pattern[pdi] as string]\n        if (fd.toLowerCase() === pd.toLowerCase()) {\n          pattern[pdi] = fd\n          if (pdi > fdi) {\n            pattern = pattern.slice(pdi)\n          } else if (fdi > pdi) {\n            file = file.slice(fdi)\n          }\n        }\n      }\n    }\n\n    // resolve and reduce . and .. portions in the file as well.\n    // dont' need to do the second phase, because it's only one string[]\n    const { optimizationLevel = 1 } = this.options\n    if (optimizationLevel >= 2) {\n      file = this.levelTwoFileOptimize(file)\n    }\n\n    this.debug('matchOne', this, { file, pattern })\n    this.debug('matchOne', file.length, pattern.length)\n\n    for (\n      var fi = 0, pi = 0, fl = file.length, pl = pattern.length;\n      fi < fl && pi < pl;\n      fi++, pi++\n    ) {\n      this.debug('matchOne loop')\n      var p = pattern[pi]\n      var f = file[fi]\n\n      this.debug(pattern, p, f)\n\n      // should be impossible.\n      // some invalid regexp stuff in the set.\n      /* c8 ignore start */\n      if (p === false) {\n        return false\n      }\n      /* c8 ignore stop */\n\n      if (p === GLOBSTAR) {\n        this.debug('GLOBSTAR', [pattern, p, f])\n\n        // \"**\"\n        // a/**/b/**/c would match the following:\n        // a/b/x/y/z/c\n        // a/x/y/z/b/c\n        // a/b/x/b/x/c\n        // a/b/c\n        // To do this, take the rest of the pattern after\n        // the **, and see if it would match the file remainder.\n        // If so, return success.\n        // If not, the ** \"swallows\" a segment, and try again.\n        // This is recursively awful.\n        //\n        // a/**/b/**/c matching a/b/x/y/z/c\n        // - a matches a\n        // - doublestar\n        //   - matchOne(b/x/y/z/c, b/**/c)\n        //     - b matches b\n        //     - doublestar\n        //       - matchOne(x/y/z/c, c) -> no\n        //       - matchOne(y/z/c, c) -> no\n        //       - matchOne(z/c, c) -> no\n        //       - matchOne(c, c) yes, hit\n        var fr = fi\n        var pr = pi + 1\n        if (pr === pl) {\n          this.debug('** at the end')\n          // a ** at the end will just swallow the rest.\n          // We have found a match.\n          // however, it will not swallow /.x, unless\n          // options.dot is set.\n          // . and .. are *never* matched by **, for explosively\n          // exponential reasons.\n          for (; fi < fl; fi++) {\n            if (\n              file[fi] === '.' ||\n              file[fi] === '..' ||\n              (!options.dot && file[fi].charAt(0) === '.')\n            )\n              return false\n          }\n          return true\n        }\n\n        // ok, let's see if we can swallow whatever we can.\n        while (fr < fl) {\n          var swallowee = file[fr]\n\n          this.debug('\\nglobstar while', file, fr, pattern, pr, swallowee)\n\n          // XXX remove this slice.  Just pass the start index.\n          if (this.matchOne(file.slice(fr), pattern.slice(pr), partial)) {\n            this.debug('globstar found match!', fr, fl, swallowee)\n            // found a match.\n            return true\n          } else {\n            // can't swallow \".\" or \"..\" ever.\n            // can only swallow \".foo\" when explicitly asked.\n            if (\n              swallowee === '.' ||\n              swallowee === '..' ||\n              (!options.dot && swallowee.charAt(0) === '.')\n            ) {\n              this.debug('dot detected!', file, fr, pattern, pr)\n              break\n            }\n\n            // ** swallows a segment, and continue.\n            this.debug('globstar swallow a segment, and continue')\n            fr++\n          }\n        }\n\n        // no match was found.\n        // However, in partial mode, we can't say this is necessarily over.\n        /* c8 ignore start */\n        if (partial) {\n          // ran out of file\n          this.debug('\\n>>> no match, partial?', file, fr, pattern, pr)\n          if (fr === fl) {\n            return true\n          }\n        }\n        /* c8 ignore stop */\n        return false\n      }\n\n      // something other than **\n      // non-magic patterns just have to match exactly\n      // patterns with magic have been turned into regexps.\n      let hit: boolean\n      if (typeof p === 'string') {\n        hit = f === p\n        this.debug('string match', p, f, hit)\n      } else {\n        hit = p.test(f)\n        this.debug('pattern match', p, f, hit)\n      }\n\n      if (!hit) return false\n    }\n\n    // Note: ending in / means that we'll get a final \"\"\n    // at the end of the pattern.  This can only match a\n    // corresponding \"\" at the end of the file.\n    // If the file ends in /, then it can only match a\n    // a pattern that ends in /, unless the pattern just\n    // doesn't have any more for it. But, a/b/ should *not*\n    // match \"a/b/*\", even though \"\" matches against the\n    // [^/]*? pattern, except in partial mode, where it might\n    // simply not be reached yet.\n    // However, a/b/ should still satisfy a/*\n\n    // now either we fell off the end of the pattern, or we're done.\n    if (fi === fl && pi === pl) {\n      // ran out of pattern and filename at the same time.\n      // an exact hit!\n      return true\n    } else if (fi === fl) {\n      // ran out of file, but still had pattern left.\n      // this is ok if we're doing the match as part of\n      // a glob fs traversal.\n      return partial\n    } else if (pi === pl) {\n      // ran out of pattern, still have file left.\n      // this is only acceptable if we're on the very last\n      // empty segment of a file with a trailing slash.\n      // a/* should match a/b/\n      return fi === fl - 1 && file[fi] === ''\n\n      /* c8 ignore start */\n    } else {\n      // should be unreachable.\n      throw new Error('wtf?')\n    }\n    /* c8 ignore stop */\n  }\n\n  braceExpand() {\n    return braceExpand(this.pattern, this.options)\n  }\n\n  parse(pattern: string): ParseReturn {\n    assertValidPattern(pattern)\n\n    const options = this.options\n\n    // shortcuts\n    if (pattern === '**') return GLOBSTAR\n    if (pattern === '') return ''\n\n    // far and away, the most common glob pattern parts are\n    // *, *.*, and *.<ext>  Add a fast check method for those.\n    let m: RegExpMatchArray | null\n    let fastTest: null | ((f: string) => boolean) = null\n    if ((m = pattern.match(starRE))) {\n      fastTest = options.dot ? starTestDot : starTest\n    } else if ((m = pattern.match(starDotExtRE))) {\n      fastTest = (\n        options.nocase\n          ? options.dot\n            ? starDotExtTestNocaseDot\n            : starDotExtTestNocase\n          : options.dot\n          ? starDotExtTestDot\n          : starDotExtTest\n      )(m[1])\n    } else if ((m = pattern.match(qmarksRE))) {\n      fastTest = (\n        options.nocase\n          ? options.dot\n            ? qmarksTestNocaseDot\n            : qmarksTestNocase\n          : options.dot\n          ? qmarksTestDot\n          : qmarksTest\n      )(m)\n    } else if ((m = pattern.match(starDotStarRE))) {\n      fastTest = options.dot ? starDotStarTestDot : starDotStarTest\n    } else if ((m = pattern.match(dotStarRE))) {\n      fastTest = dotStarTest\n    }\n\n    const re = AST.fromGlob(pattern, this.options).toMMPattern()\n    if (fastTest && typeof re === 'object') {\n      // Avoids overriding in frozen environments\n      Reflect.defineProperty(re, 'test', { value: fastTest })\n    }\n    return re\n  }\n\n  makeRe() {\n    if (this.regexp || this.regexp === false) return this.regexp\n\n    // at this point, this.set is a 2d array of partial\n    // pattern strings, or \"**\".\n    //\n    // It's better to use .match().  This function shouldn't\n    // be used, really, but it's pretty convenient sometimes,\n    // when you just want to work with a regex.\n    const set = this.set\n\n    if (!set.length) {\n      this.regexp = false\n      return this.regexp\n    }\n    const options = this.options\n\n    const twoStar = options.noglobstar\n      ? star\n      : options.dot\n      ? twoStarDot\n      : twoStarNoDot\n    const flags = new Set(options.nocase ? ['i'] : [])\n\n    // regexpify non-globstar patterns\n    // if ** is only item, then we just do one twoStar\n    // if ** is first, and there are more, prepend (\\/|twoStar\\/)? to next\n    // if ** is last, append (\\/twoStar|) to previous\n    // if ** is in the middle, append (\\/|\\/twoStar\\/) to previous\n    // then filter out GLOBSTAR symbols\n    let re = set\n      .map(pattern => {\n        const pp: (string | typeof GLOBSTAR)[] = pattern.map(p => {\n          if (p instanceof RegExp) {\n            for (const f of p.flags.split('')) flags.add(f)\n          }\n          return typeof p === 'string'\n            ? regExpEscape(p)\n            : p === GLOBSTAR\n            ? GLOBSTAR\n            : p._src\n        }) as (string | typeof GLOBSTAR)[]\n        pp.forEach((p, i) => {\n          const next = pp[i + 1]\n          const prev = pp[i - 1]\n          if (p !== GLOBSTAR || prev === GLOBSTAR) {\n            return\n          }\n          if (prev === undefined) {\n            if (next !== undefined && next !== GLOBSTAR) {\n              pp[i + 1] = '(?:\\\\/|' + twoStar + '\\\\/)?' + next\n            } else {\n              pp[i] = twoStar\n            }\n          } else if (next === undefined) {\n            pp[i - 1] = prev + '(?:\\\\/|' + twoStar + ')?'\n          } else if (next !== GLOBSTAR) {\n            pp[i - 1] = prev + '(?:\\\\/|\\\\/' + twoStar + '\\\\/)' + next\n            pp[i + 1] = GLOBSTAR\n          }\n        })\n        return pp.filter(p => p !== GLOBSTAR).join('/')\n      })\n      .join('|')\n\n    // need to wrap in parens if we had more than one thing with |,\n    // otherwise only the first will be anchored to ^ and the last to $\n    const [open, close] = set.length > 1 ? ['(?:', ')'] : ['', '']\n    // must match entire pattern\n    // ending in a * or ** will make it less strict.\n    re = '^' + open + re + close + '$'\n\n    // can match anything, as long as it's not this.\n    if (this.negate) re = '^(?!' + re + ').+$'\n\n    try {\n      this.regexp = new RegExp(re, [...flags].join(''))\n      /* c8 ignore start */\n    } catch (ex) {\n      // should be impossible\n      this.regexp = false\n    }\n    /* c8 ignore stop */\n    return this.regexp\n  }\n\n  slashSplit(p: string) {\n    // if p starts with // on windows, we preserve that\n    // so that UNC paths aren't broken.  Otherwise, any number of\n    // / characters are coalesced into one, unless\n    // preserveMultipleSlashes is set to true.\n    if (this.preserveMultipleSlashes) {\n      return p.split('/')\n    } else if (this.isWindows && /^\\/\\/[^\\/]+/.test(p)) {\n      // add an extra '' for the one we lose\n      return ['', ...p.split(/\\/+/)]\n    } else {\n      return p.split(/\\/+/)\n    }\n  }\n\n  match(f: string, partial = this.partial) {\n    this.debug('match', f, this.pattern)\n    // short-circuit in the case of busted things.\n    // comments, etc.\n    if (this.comment) {\n      return false\n    }\n    if (this.empty) {\n      return f === ''\n    }\n\n    if (f === '/' && partial) {\n      return true\n    }\n\n    const options = this.options\n\n    // windows: need to use /, not \\\n    if (this.isWindows) {\n      f = f.split('\\\\').join('/')\n    }\n\n    // treat the test path as a set of pathparts.\n    const ff = this.slashSplit(f)\n    this.debug(this.pattern, 'split', ff)\n\n    // just ONE of the pattern sets in this.set needs to match\n    // in order for it to be valid.  If negating, then just one\n    // match means that we have failed.\n    // Either way, return on the first hit.\n\n    const set = this.set\n    this.debug(this.pattern, 'set', set)\n\n    // Find the basename of the path by looking for the last non-empty segment\n    let filename: string = ff[ff.length - 1]\n    if (!filename) {\n      for (let i = ff.length - 2; !filename && i >= 0; i--) {\n        filename = ff[i]\n      }\n    }\n\n    for (let i = 0; i < set.length; i++) {\n      const pattern = set[i]\n      let file = ff\n      if (options.matchBase && pattern.length === 1) {\n        file = [filename]\n      }\n      const hit = this.matchOne(file, pattern, partial)\n      if (hit) {\n        if (options.flipNegate) {\n          return true\n        }\n        return !this.negate\n      }\n    }\n\n    // didn't get any hits.  this is success if it's a negative\n    // pattern, failure otherwise.\n    if (options.flipNegate) {\n      return false\n    }\n    return this.negate\n  }\n\n  static defaults(def: MinimatchOptions) {\n    return minimatch.defaults(def).Minimatch\n  }\n}\n/* c8 ignore start */\nexport { AST } from './ast.js'\nexport { escape } from './escape.js'\nexport { unescape } from './unescape.js'\n/* c8 ignore stop */\nminimatch.AST = AST\nminimatch.Minimatch = Minimatch\nminimatch.escape = escape\nminimatch.unescape = unescape\n", "'use strict'\nconst dc = require('node:diagnostics_channel')\nconst { context, trace, SpanStatusCode, propagation, diag } = require('@opentelemetry/api')\nconst { getRPCMetadata, RPCType } = require('@opentelemetry/core')\nconst {\n  ATTR_HTTP_ROUTE,\n  ATTR_HTTP_RESPONSE_STATUS_CODE,\n  ATTR_HTTP_REQUEST_METHOD,\n  ATTR_SERVICE_NAME\n} = require('@opentelemetry/semantic-conventions')\nconst { InstrumentationBase } = require('@opentelemetry/instrumentation')\n\nconst {\n  version: PACKAGE_VERSION,\n  name: PACKAGE_NAME\n} = require('./package.json')\n\n// Constants\nconst SUPPORTED_VERSIONS = '>=4.0.0 <6'\nconst FASTIFY_HOOKS = [\n  'onRequest',\n  'preParsing',\n  'preValidation',\n  'preHandler',\n  'preSerialization',\n  'onSend',\n  'onResponse',\n  'onError'\n]\nconst ATTRIBUTE_NAMES = {\n  HOOK_NAME: 'hook.name',\n  FASTIFY_TYPE: 'fastify.type',\n  HOOK_CALLBACK_NAME: 'hook.callback.name',\n  ROOT: 'fastify.root'\n}\nconst HOOK_TYPES = {\n  ROUTE: 'route-hook',\n  INSTANCE: 'hook',\n  HANDLER: 'request-handler'\n}\nconst ANONYMOUS_FUNCTION_NAME = 'anonymous'\n\n// Symbols\nconst kInstrumentation = Symbol('fastify otel instance')\nconst kRequestSpan = Symbol('fastify otel request spans')\nconst kRequestContext = Symbol('fastify otel request context')\nconst kAddHookOriginal = Symbol('fastify otel addhook original')\nconst kSetNotFoundOriginal = Symbol('fastify otel setnotfound original')\nconst kIgnorePaths = Symbol('fastify otel ignore path')\n\nclass FastifyOtelInstrumentation extends InstrumentationBase {\n  servername = ''\n  logger = null\n\n  constructor (config) {\n    super(PACKAGE_NAME, PACKAGE_VERSION, config)\n    this.servername = config?.servername ?? process.env.OTEL_SERVICE_NAME ?? 'fastify'\n    this.logger = diag.createComponentLogger({ namespace: PACKAGE_NAME })\n    this[kIgnorePaths] = null\n\n    if (config?.ignorePaths != null || process.env.OTEL_FASTIFY_IGNORE_PATHS != null) {\n      const ignorePaths = config?.ignorePaths ?? process.env.OTEL_FASTIFY_IGNORE_PATHS\n\n      if ((typeof ignorePaths !== 'string' || ignorePaths.length === 0) && typeof ignorePaths !== 'function') {\n        throw new TypeError(\n          'ignorePaths must be a string or a function'\n        )\n      }\n\n      let globMatcher = null\n\n      this[kIgnorePaths] = (routeOptions) => {\n        if (typeof ignorePaths === 'function') {\n          return ignorePaths(routeOptions)\n        } else {\n          // Using minimatch to match the path until path.matchesGlob is out of experimental\n          // path.matchesGlob uses minimatch internally\n          if (globMatcher == null) {\n            globMatcher = require('minimatch').minimatch\n          }\n\n          return globMatcher(routeOptions.url, ignorePaths)\n        }\n      }\n    }\n  }\n\n  enable () {\n    if (this._handleInitialization === undefined && this.getConfig().registerOnInitialization) {\n      const FastifyInstrumentationPlugin = this.plugin()\n      this._handleInitialization = (message) => {\n        message.fastify.register(FastifyInstrumentationPlugin)\n      }\n      dc.subscribe('fastify.initialization', this._handleInitialization)\n    }\n    return super.enable()\n  }\n\n  disable () {\n    if (this._handleInitialization) {\n      dc.unsubscribe('fastify.initialization', this._handleInitialization)\n      this._handleInitialization = undefined\n    }\n    return super.disable()\n  }\n\n  // We do not do patching in this instrumentation\n  init () {\n    return []\n  }\n\n  plugin () {\n    const instrumentation = this\n\n    FastifyInstrumentationPlugin[Symbol.for('skip-override')] = true\n    FastifyInstrumentationPlugin[Symbol.for('fastify.display-name')] = '@fastify/otel'\n    FastifyInstrumentationPlugin[Symbol.for('plugin-meta')] = {\n      fastify: SUPPORTED_VERSIONS,\n      name: '@fastify/otel',\n    }\n\n    return FastifyInstrumentationPlugin\n\n    function FastifyInstrumentationPlugin (instance, opts, done) {\n      instance.decorate(kInstrumentation, instrumentation)\n      // addHook and notfoundHandler are essentially inherited from the prototype\n      // what is important is to bound it to the right instance\n      instance.decorate(kAddHookOriginal, instance.addHook)\n      instance.decorate(kSetNotFoundOriginal, instance.setNotFoundHandler)\n      instance.decorateRequest('opentelemetry', function openetelemetry () {\n        const ctx = this[kRequestContext]\n        const span = this[kRequestSpan]\n        return {\n          span,\n          tracer: instrumentation.tracer,\n          context: ctx,\n          inject: (carrier, setter) => {\n            return propagation.inject(ctx, carrier, setter)\n          },\n          extract: (carrier, getter) => {\n            return propagation.extract(ctx, carrier, getter)\n          }\n        }\n      })\n      instance.decorateRequest(kRequestSpan, null)\n      instance.decorateRequest(kRequestContext, null)\n\n      instance.addHook('onRoute', function (routeOptions) {\n        if (instrumentation[kIgnorePaths]?.(routeOptions) === true) {\n          instrumentation.logger.debug(\n            `Ignoring route instrumentation ${routeOptions.method} ${routeOptions.url} because it matches the ignore path`\n          )\n          return\n        }\n\n        for (const hook of FASTIFY_HOOKS) {\n          if (routeOptions[hook] != null) {\n            const handlerLike = routeOptions[hook]\n\n            if (typeof handlerLike === 'function') {\n              routeOptions[hook] = handlerWrapper(handlerLike, {\n                [ATTR_SERVICE_NAME]:\n                  instance[kInstrumentation].servername,\n                [ATTRIBUTE_NAMES.HOOK_NAME]: `${this.pluginName} - route -> ${hook}`,\n                [ATTRIBUTE_NAMES.FASTIFY_TYPE]: HOOK_TYPES.ROUTE,\n                [ATTR_HTTP_ROUTE]: routeOptions.url,\n                [ATTRIBUTE_NAMES.HOOK_CALLBACK_NAME]:\n                  handlerLike.name?.length > 0\n                    ? handlerLike.name\n                    : ANONYMOUS_FUNCTION_NAME /* c8 ignore next */\n              })\n            } else if (Array.isArray(handlerLike)) {\n              const wrappedHandlers = []\n\n              for (const handler of handlerLike) {\n                wrappedHandlers.push(\n                  handlerWrapper(handler, {\n                    [ATTR_SERVICE_NAME]:\n                      instance[kInstrumentation].servername,\n                    [ATTRIBUTE_NAMES.HOOK_NAME]: `${this.pluginName} - route -> ${hook}`,\n                    [ATTRIBUTE_NAMES.FASTIFY_TYPE]: HOOK_TYPES.ROUTE,\n                    [ATTR_HTTP_ROUTE]: routeOptions.url,\n                    [ATTRIBUTE_NAMES.HOOK_CALLBACK_NAME]:\n                      handler.name?.length > 0\n                        ? handler.name\n                        : ANONYMOUS_FUNCTION_NAME\n                  })\n                )\n              }\n\n              routeOptions[hook] = wrappedHandlers\n            }\n          }\n        }\n\n        // We always want to add the onSend hook to the route to be executed last\n        if (routeOptions.onSend != null) {\n          routeOptions.onSend = Array.isArray(routeOptions.onSend)\n            ? [...routeOptions.onSend, onSendHook]\n            : [routeOptions.onSend, onSendHook]\n        } else {\n          routeOptions.onSend = onSendHook\n        }\n\n        // We always want to add the onError hook to the route to be executed last\n        if (routeOptions.onError != null) {\n          routeOptions.onError = Array.isArray(routeOptions.onError)\n            ? [...routeOptions.onError, onErrorHook]\n            : [routeOptions.onError, onErrorHook]\n        } else {\n          routeOptions.onError = onErrorHook\n        }\n\n        routeOptions.handler = handlerWrapper(routeOptions.handler, {\n          [ATTR_SERVICE_NAME]: instance[kInstrumentation].servername,\n          [ATTRIBUTE_NAMES.HOOK_NAME]: `${this.pluginName} - route-handler`,\n          [ATTRIBUTE_NAMES.FASTIFY_TYPE]: HOOK_TYPES.HANDLER,\n          [ATTR_HTTP_ROUTE]: routeOptions.url,\n          [ATTRIBUTE_NAMES.HOOK_CALLBACK_NAME]:\n            routeOptions.handler.name.length > 0\n              ? routeOptions.handler.name\n              : ANONYMOUS_FUNCTION_NAME\n        })\n      })\n\n      instance.addHook('onRequest', function (request, _reply, hookDone) {\n        if (this[kInstrumentation].isEnabled() === false) {\n          return hookDone()\n        } else if (this[kInstrumentation][kIgnorePaths]?.({\n          url: request.url,\n          method: request.method,\n        }) === true) {\n          this[kInstrumentation].logger.debug(\n            `Ignoring request ${request.method} ${request.url} because it matches the ignore path`\n          )\n          return hookDone()\n        }\n\n        let ctx = context.active()\n\n        if (trace.getSpan(ctx) == null) {\n          ctx = propagation.extract(ctx, request.headers)\n        }\n\n        const rpcMetadata = getRPCMetadata(ctx)\n\n        if (\n          request.routeOptions.url != null &&\n          rpcMetadata?.type === RPCType.HTTP\n        ) {\n          rpcMetadata.route = request.routeOptions.url\n        }\n\n        /** @type {import('@opentelemetry/api').Span} */\n        const span = this[kInstrumentation].tracer.startSpan('request', {\n          attributes: {\n            [ATTR_SERVICE_NAME]:\n              instance[kInstrumentation].servername,\n            [ATTRIBUTE_NAMES.ROOT]: '@fastify/otel',\n            [ATTR_HTTP_ROUTE]: request.url,\n            [ATTR_HTTP_REQUEST_METHOD]: request.method\n          }\n        }, ctx)\n\n        request[kRequestContext] = trace.setSpan(ctx, span)\n        request[kRequestSpan] = span\n\n        context.with(request[kRequestContext], () => {\n          hookDone()\n        })\n      })\n\n      // onResponse is the last hook to be executed, only added for 404 handlers\n      instance.addHook('onResponse', function (request, reply, hookDone) {\n        const span = request[kRequestSpan]\n\n        if (span != null) {\n          span.setStatus({\n            code: SpanStatusCode.OK,\n            message: 'OK'\n          })\n          span.setAttributes({\n            [ATTR_HTTP_RESPONSE_STATUS_CODE]: 404\n          })\n          span.end()\n        }\n\n        request[kRequestSpan] = null\n\n        hookDone()\n      })\n\n      instance.addHook = addHookPatched\n      instance.setNotFoundHandler = setNotFoundHandlerPatched\n\n      done()\n\n      function onSendHook (request, reply, payload, hookDone) {\n        /** @type {import('@opentelemetry/api').Span} */\n        const span = request[kRequestSpan]\n\n        if (span != null) {\n          if (reply.statusCode < 500) {\n            span.setStatus({\n              code: SpanStatusCode.OK,\n              message: 'OK'\n            })\n          }\n\n          span.setAttributes({\n            [ATTR_HTTP_RESPONSE_STATUS_CODE]: reply.statusCode\n          })\n          span.end()\n        }\n\n        request[kRequestSpan] = null\n\n        hookDone(null, payload)\n      }\n\n      function onErrorHook (request, reply, error, hookDone) {\n        /** @type {Span} */\n        const span = request[kRequestSpan]\n\n        if (span != null) {\n          span.setStatus({\n            code: SpanStatusCode.ERROR,\n            message: error.message\n          })\n          span.recordException(error)\n        }\n\n        hookDone()\n      }\n\n      function addHookPatched (name, hook) {\n        const addHookOriginal = this[kAddHookOriginal]\n\n        if (FASTIFY_HOOKS.includes(name)) {\n          return addHookOriginal.call(\n            this,\n            name,\n            handlerWrapper(hook, {\n              [ATTR_SERVICE_NAME]: instance[kInstrumentation].servername,\n              [ATTRIBUTE_NAMES.HOOK_NAME]: `${this.pluginName} - ${name}`,\n              [ATTRIBUTE_NAMES.FASTIFY_TYPE]: HOOK_TYPES.INSTANCE,\n              [ATTRIBUTE_NAMES.HOOK_CALLBACK_NAME]:\n                hook.name?.length > 0\n                  ? hook.name\n                  : ANONYMOUS_FUNCTION_NAME /* c8 ignore next */\n            })\n          )\n        } else {\n          return addHookOriginal.call(this, name, hook)\n        }\n      }\n\n      function setNotFoundHandlerPatched (hooks, handler) {\n        const setNotFoundHandlerOriginal = this[kSetNotFoundOriginal]\n        if (typeof hooks === 'function') {\n          handler = handlerWrapper(hooks, {\n            [ATTR_SERVICE_NAME]: instance[kInstrumentation].servername,\n            [ATTRIBUTE_NAMES.HOOK_NAME]: `${this.pluginName} - not-found-handler`,\n            [ATTRIBUTE_NAMES.FASTIFY_TYPE]: HOOK_TYPES.INSTANCE,\n            [ATTRIBUTE_NAMES.HOOK_CALLBACK_NAME]:\n              hooks.name?.length > 0\n                ? hooks.name\n                : ANONYMOUS_FUNCTION_NAME /* c8 ignore next */\n          })\n          setNotFoundHandlerOriginal.call(this, handler)\n        } else {\n          if (hooks.preValidation != null) {\n            hooks.preValidation = handlerWrapper(hooks.preValidation, {\n              [ATTR_SERVICE_NAME]: instance[kInstrumentation].servername,\n              [ATTRIBUTE_NAMES.HOOK_NAME]: `${this.pluginName} - not-found-handler - preValidation`,\n              [ATTRIBUTE_NAMES.FASTIFY_TYPE]: HOOK_TYPES.INSTANCE,\n              [ATTRIBUTE_NAMES.HOOK_CALLBACK_NAME]:\n                hooks.preValidation.name?.length > 0\n                  ? hooks.preValidation.name\n                  : ANONYMOUS_FUNCTION_NAME /* c8 ignore next */\n            })\n          }\n\n          if (hooks.preHandler != null) {\n            hooks.preHandler = handlerWrapper(hooks.preHandler, {\n              [ATTR_SERVICE_NAME]:\n                instance[kInstrumentation].servername,\n              [ATTRIBUTE_NAMES.HOOK_NAME]: `${this.pluginName} - not-found-handler - preHandler`,\n              [ATTRIBUTE_NAMES.FASTIFY_TYPE]: HOOK_TYPES.INSTANCE,\n              [ATTRIBUTE_NAMES.HOOK_CALLBACK_NAME]:\n                hooks.preHandler.name?.length > 0\n                  ? hooks.preHandler.name\n                  : ANONYMOUS_FUNCTION_NAME /* c8 ignore next */\n            })\n          }\n\n          handler = handlerWrapper(handler, {\n            [ATTR_SERVICE_NAME]: instance[kInstrumentation].servername,\n            [ATTRIBUTE_NAMES.HOOK_NAME]: `${this.pluginName} - not-found-handler`,\n            [ATTRIBUTE_NAMES.FASTIFY_TYPE]: HOOK_TYPES.INSTANCE,\n            [ATTRIBUTE_NAMES.HOOK_CALLBACK_NAME]:\n              handler.name?.length > 0\n                ? handler.name\n                : ANONYMOUS_FUNCTION_NAME /* c8 ignore next */\n          })\n          setNotFoundHandlerOriginal.call(this, hooks, handler)\n        }\n      }\n\n      function handlerWrapper (handler, spanAttributes = {}) {\n        return function handlerWrapped (...args) {\n          /** @type {FastifyOtelInstrumentation} */\n          const instrumentation = this[kInstrumentation]\n          const [request] = args\n\n          if (instrumentation.isEnabled() === false) {\n            return handler.call(this, ...args)\n          }\n\n          const ctx = request[kRequestContext] ?? context.active()\n          const span = instrumentation.tracer.startSpan(\n            `handler - ${\n              handler.name?.length > 0\n                ? handler.name\n                : this.pluginName /* c8 ignore next */ ??\n                  ANONYMOUS_FUNCTION_NAME /* c8 ignore next */\n            }`,\n            {\n              attributes: spanAttributes\n            },\n            ctx\n          )\n\n          return context.with(\n            trace.setSpan(ctx, span),\n            function () {\n              try {\n                const res = handler.call(this, ...args)\n\n                if (typeof res?.then === 'function') {\n                  return res.then(\n                    result => {\n                      span.end()\n                      return result\n                    },\n                    error => {\n                      span.setStatus({\n                        code: SpanStatusCode.ERROR,\n                        message: error.message\n                      })\n                      span.recordException(error)\n                      span.end()\n                      return Promise.reject(error)\n                    }\n                  )\n                }\n\n                span.end()\n                return res\n              } catch (error) {\n                span.setStatus({\n                  code: SpanStatusCode.ERROR,\n                  message: error.message\n                })\n                span.recordException(error)\n                span.end()\n                throw error\n              }\n            },\n            this\n          )\n        }\n      }\n    }\n  }\n}\n\nmodule.exports = FastifyOtelInstrumentation\nmodule.exports.FastifyOtelInstrumentation = FastifyOtelInstrumentation\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport enum AllowedOperationTypes {\n  QUERY = 'query',\n  MUTATION = 'mutation',\n  SUBSCRIPTION = 'subscription',\n}\n\nexport enum TokenKind {\n  SOF = '<SOF>',\n  EOF = '<EOF>',\n  BANG = '!',\n  DOLLAR = '$',\n  AMP = '&',\n  PAREN_L = '(',\n  PAREN_R = ')',\n  SPREAD = '...',\n  COLON = ':',\n  EQUALS = '=',\n  AT = '@',\n  BRACKET_L = '[',\n  BRACKET_R = ']',\n  BRACE_L = '{',\n  PIPE = '|',\n  BRACE_R = '}',\n  NAME = 'Name',\n  INT = 'Int',\n  FLOAT = 'Float',\n  STRING = 'String',\n  BLOCK_STRING = 'BlockString',\n  COMMENT = 'Comment',\n}\n\nexport enum SpanNames {\n  EXECUTE = 'graphql.execute',\n  PARSE = 'graphql.parse',\n  RESOLVE = 'graphql.resolve',\n  VALIDATE = 'graphql.validate',\n  SCHEMA_VALIDATE = 'graphql.validateSchema',\n  SCHEMA_PARSE = 'graphql.parseSchema',\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport enum AttributeNames {\n  SOURCE = 'graphql.source',\n  FIELD_NAME = 'graphql.field.name',\n  FIELD_PATH = 'graphql.field.path',\n  FIELD_TYPE = 'graphql.field.type',\n  OPERATION_TYPE = 'graphql.operation.type',\n  OPERATION_NAME = 'graphql.operation.name',\n  VARIABLES = 'graphql.variables.',\n  ERROR_VALIDATION_NAME = 'graphql.validation.error',\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const OTEL_PATCHED_SYMBOL = Symbol.for('opentelemetry.patched');\n\nexport const OTEL_GRAPHQL_DATA_SYMBOL = Symbol.for(\n  'opentelemetry.graphql_data'\n);\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type * as graphqlTypes from 'graphql';\nimport type * as api from '@opentelemetry/api';\nimport type { PromiseOrValue } from 'graphql/jsutils/PromiseOrValue';\nimport type { DocumentNode } from 'graphql/language/ast';\nimport type {\n  GraphQLFieldResolver,\n  GraphQLTypeResolver,\n} from 'graphql/type/definition';\nimport { OTEL_GRAPHQL_DATA_SYMBOL, OTEL_PATCHED_SYMBOL } from './symbols';\n\nexport const OPERATION_NOT_SUPPORTED =\n  'Operation$operationName$not' + ' supported';\n\nexport type executeFunctionWithObj = (\n  args: graphqlTypes.ExecutionArgs\n) => PromiseOrValue<graphqlTypes.ExecutionResult>;\n\nexport type executeArgumentsArray = [\n  graphqlTypes.GraphQLSchema,\n  graphqlTypes.DocumentNode,\n  any,\n  any,\n  Maybe<{ [key: string]: any }>,\n  Maybe<string>,\n  Maybe<graphqlTypes.GraphQLFieldResolver<any, any>>,\n  Maybe<graphqlTypes.GraphQLTypeResolver<any, any>>\n];\n\nexport type executeFunctionWithArgs = (\n  schema: graphqlTypes.GraphQLSchema,\n  document: graphqlTypes.DocumentNode,\n  rootValue?: any,\n  contextValue?: any,\n  variableValues?: Maybe<{ [key: string]: any }>,\n  operationName?: Maybe<string>,\n  fieldResolver?: Maybe<graphqlTypes.GraphQLFieldResolver<any, any>>,\n  typeResolver?: Maybe<graphqlTypes.GraphQLTypeResolver<any, any>>\n) => PromiseOrValue<graphqlTypes.ExecutionResult>;\n\nexport interface OtelExecutionArgs {\n  schema: graphqlTypes.GraphQLSchema;\n  document: DocumentNode & ObjectWithGraphQLData;\n  rootValue?: any;\n  contextValue?: any & ObjectWithGraphQLData;\n  variableValues?: Maybe<{ [key: string]: any }>;\n  operationName?: Maybe<string>;\n  fieldResolver?: Maybe<GraphQLFieldResolver<any, any> & OtelPatched>;\n  typeResolver?: Maybe<GraphQLTypeResolver<any, any>>;\n}\n\nexport type executeType = executeFunctionWithObj | executeFunctionWithArgs;\n\nexport type parseType = (\n  source: string | graphqlTypes.Source,\n  options?: graphqlTypes.ParseOptions\n) => graphqlTypes.DocumentNode;\n\nexport type validateType = (\n  schema: graphqlTypes.GraphQLSchema,\n  documentAST: graphqlTypes.DocumentNode,\n  rules?: ReadonlyArray<graphqlTypes.ValidationRule>,\n  options?: { maxErrors?: number },\n  typeInfo?: graphqlTypes.TypeInfo\n) => ReadonlyArray<graphqlTypes.GraphQLError>;\n\nexport interface GraphQLField {\n  parent: api.Span;\n  span: api.Span;\n  error: Error | null;\n}\n\ninterface OtelGraphQLData {\n  source?: any;\n  span: api.Span;\n  fields: { [key: string]: GraphQLField };\n}\n\nexport interface ObjectWithGraphQLData {\n  [OTEL_GRAPHQL_DATA_SYMBOL]?: OtelGraphQLData;\n}\n\nexport interface OtelPatched {\n  [OTEL_PATCHED_SYMBOL]?: boolean;\n}\n\nexport interface GraphQLPath {\n  prev: GraphQLPath | undefined;\n  key: string | number;\n  /**\n   * optional as it didn't exist yet in ver 14\n   */\n  typename?: string | undefined;\n}\n\n/**\n * Moving this type from ver 15 of graphql as it is nto available in ver. 14s\n * this way it can compile against ver 14.\n */\nexport type Maybe<T> = null | undefined | T;\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type * as graphqlTypes from 'graphql';\nimport * as api from '@opentelemetry/api';\nimport { AllowedOperationTypes, SpanNames, TokenKind } from './enum';\nimport { AttributeNames } from './enums/AttributeNames';\nimport { OTEL_GRAPHQL_DATA_SYMBOL, OTEL_PATCHED_SYMBOL } from './symbols';\nimport {\n  GraphQLField,\n  GraphQLPath,\n  ObjectWithGraphQLData,\n  OtelPatched,\n  Maybe,\n} from './internal-types';\nimport { GraphQLInstrumentationParsedConfig } from './types';\n\nconst OPERATION_VALUES = Object.values(AllowedOperationTypes);\n\n// https://github.com/graphql/graphql-js/blob/main/src/jsutils/isPromise.ts\nexport const isPromise = (value: any): value is Promise<unknown> => {\n  return typeof value?.then === 'function';\n};\n\n// https://github.com/graphql/graphql-js/blob/main/src/jsutils/isObjectLike.ts\nconst isObjectLike = (value: unknown): value is { [key: string]: unknown } => {\n  return typeof value == 'object' && value !== null;\n};\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction addInputVariableAttribute(span: api.Span, key: string, variable: any) {\n  if (Array.isArray(variable)) {\n    variable.forEach((value, idx) => {\n      addInputVariableAttribute(span, `${key}.${idx}`, value);\n    });\n  } else if (variable instanceof Object) {\n    Object.entries(variable).forEach(([nestedKey, value]) => {\n      addInputVariableAttribute(span, `${key}.${nestedKey}`, value);\n    });\n  } else {\n    span.setAttribute(`${AttributeNames.VARIABLES}${String(key)}`, variable);\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function addInputVariableAttributes(\n  span: api.Span,\n  variableValues: { [key: string]: any }\n) {\n  Object.entries(variableValues).forEach(([key, value]) => {\n    addInputVariableAttribute(span, key, value);\n  });\n}\n\nexport function addSpanSource(\n  span: api.Span,\n  loc?: graphqlTypes.Location,\n  allowValues?: boolean,\n  start?: number,\n  end?: number\n): void {\n  const source = getSourceFromLocation(loc, allowValues, start, end);\n  span.setAttribute(AttributeNames.SOURCE, source);\n}\n\nfunction createFieldIfNotExists(\n  tracer: api.Tracer,\n  getConfig: () => GraphQLInstrumentationParsedConfig,\n  contextValue: any,\n  info: graphqlTypes.GraphQLResolveInfo,\n  path: string[]\n): {\n  field: any;\n  spanAdded: boolean;\n} {\n  let field = getField(contextValue, path);\n\n  let spanAdded = false;\n\n  if (!field) {\n    spanAdded = true;\n    const parent = getParentField(contextValue, path);\n\n    field = {\n      parent,\n      span: createResolverSpan(\n        tracer,\n        getConfig,\n        contextValue,\n        info,\n        path,\n        parent.span\n      ),\n      error: null,\n    };\n\n    addField(contextValue, path, field);\n  }\n\n  return { spanAdded, field };\n}\n\nfunction createResolverSpan(\n  tracer: api.Tracer,\n  getConfig: () => GraphQLInstrumentationParsedConfig,\n  contextValue: any,\n  info: graphqlTypes.GraphQLResolveInfo,\n  path: string[],\n  parentSpan?: api.Span\n): api.Span {\n  const attributes: api.SpanAttributes = {\n    [AttributeNames.FIELD_NAME]: info.fieldName,\n    [AttributeNames.FIELD_PATH]: path.join('.'),\n    [AttributeNames.FIELD_TYPE]: info.returnType.toString(),\n  };\n\n  const span = tracer.startSpan(\n    `${SpanNames.RESOLVE} ${attributes[AttributeNames.FIELD_PATH]}`,\n    {\n      attributes,\n    },\n    parentSpan ? api.trace.setSpan(api.context.active(), parentSpan) : undefined\n  );\n\n  const document = contextValue[OTEL_GRAPHQL_DATA_SYMBOL].source;\n  const fieldNode = info.fieldNodes.find(\n    fieldNode => fieldNode.kind === 'Field'\n  );\n\n  if (fieldNode) {\n    addSpanSource(\n      span,\n      document.loc,\n      getConfig().allowValues,\n      fieldNode.loc?.start,\n      fieldNode.loc?.end\n    );\n  }\n\n  return span;\n}\n\nexport function endSpan(span: api.Span, error?: Error): void {\n  if (error) {\n    span.recordException(error);\n  }\n  span.end();\n}\n\nexport function getOperation(\n  document: graphqlTypes.DocumentNode,\n  operationName?: Maybe<string>\n): graphqlTypes.DefinitionNode | undefined {\n  if (!document || !Array.isArray(document.definitions)) {\n    return undefined;\n  }\n\n  if (operationName) {\n    return document.definitions\n      .filter(\n        definition =>\n          OPERATION_VALUES.indexOf((definition as any)?.operation) !== -1\n      )\n      .find(definition => operationName === (definition as any)?.name?.value);\n  } else {\n    return document.definitions.find(\n      definition =>\n        OPERATION_VALUES.indexOf((definition as any)?.operation) !== -1\n    );\n  }\n}\n\nfunction addField(contextValue: any, path: string[], field: GraphQLField) {\n  return (contextValue[OTEL_GRAPHQL_DATA_SYMBOL].fields[path.join('.')] =\n    field);\n}\n\nfunction getField(contextValue: any, path: string[]) {\n  return contextValue[OTEL_GRAPHQL_DATA_SYMBOL].fields[path.join('.')];\n}\n\nfunction getParentField(contextValue: any, path: string[]) {\n  for (let i = path.length - 1; i > 0; i--) {\n    const field = getField(contextValue, path.slice(0, i));\n\n    if (field) {\n      return field;\n    }\n  }\n\n  return {\n    span: contextValue[OTEL_GRAPHQL_DATA_SYMBOL].span,\n  };\n}\n\nfunction pathToArray(mergeItems: boolean, path: GraphQLPath): string[] {\n  const flattened: string[] = [];\n  let curr: GraphQLPath | undefined = path;\n  while (curr) {\n    let key = curr.key;\n\n    if (mergeItems && typeof key === 'number') {\n      key = '*';\n    }\n    flattened.push(String(key));\n    curr = curr.prev;\n  }\n  return flattened.reverse();\n}\n\nfunction repeatBreak(i: number): string {\n  return repeatChar('\\n', i);\n}\n\nfunction repeatSpace(i: number): string {\n  return repeatChar(' ', i);\n}\n\nfunction repeatChar(char: string, to: number): string {\n  let text = '';\n  for (let i = 0; i < to; i++) {\n    text += char;\n  }\n  return text;\n}\n\nconst KindsToBeRemoved: string[] = [\n  TokenKind.FLOAT,\n  TokenKind.STRING,\n  TokenKind.INT,\n  TokenKind.BLOCK_STRING,\n];\n\nexport function getSourceFromLocation(\n  loc?: graphqlTypes.Location,\n  allowValues = false,\n  inputStart?: number,\n  inputEnd?: number\n): string {\n  let source = '';\n\n  if (loc?.startToken) {\n    const start = typeof inputStart === 'number' ? inputStart : loc.start;\n    const end = typeof inputEnd === 'number' ? inputEnd : loc.end;\n\n    let next: graphqlTypes.Token | null = loc.startToken.next;\n    let previousLine: number | undefined = 1;\n    while (next) {\n      if (next.start < start) {\n        next = next.next;\n        previousLine = next?.line;\n        continue;\n      }\n      if (next.end > end) {\n        next = next.next;\n        previousLine = next?.line;\n        continue;\n      }\n      let value = next.value || next.kind;\n      let space = '';\n      if (!allowValues && KindsToBeRemoved.indexOf(next.kind) >= 0) {\n        // value = repeatChar('*', value.length);\n        value = '*';\n      }\n      if (next.kind === TokenKind.STRING) {\n        value = `\"${value}\"`;\n      }\n      if (next.kind === TokenKind.EOF) {\n        value = '';\n      }\n      if (next.line > previousLine!) {\n        source += repeatBreak(next.line - previousLine!);\n        previousLine = next.line;\n        space = repeatSpace(next.column - 1);\n      } else {\n        if (next.line === next.prev?.line) {\n          space = repeatSpace(next.start - (next.prev?.end || 0));\n        }\n      }\n      source += space + value;\n      if (next) {\n        next = next.next!;\n      }\n    }\n  }\n\n  return source;\n}\n\nexport function wrapFields(\n  type: Maybe<graphqlTypes.GraphQLObjectType & OtelPatched>,\n  tracer: api.Tracer,\n  getConfig: () => GraphQLInstrumentationParsedConfig\n): void {\n  if (\n    !type ||\n    typeof type.getFields !== 'function' ||\n    type[OTEL_PATCHED_SYMBOL]\n  ) {\n    return;\n  }\n  const fields = type.getFields();\n\n  type[OTEL_PATCHED_SYMBOL] = true;\n\n  Object.keys(fields).forEach(key => {\n    const field = fields[key];\n\n    if (!field) {\n      return;\n    }\n\n    if (field.resolve) {\n      field.resolve = wrapFieldResolver(tracer, getConfig, field.resolve);\n    }\n\n    if (field.type) {\n      let unwrappedType: any = field.type;\n\n      while (unwrappedType.ofType) {\n        unwrappedType = unwrappedType.ofType;\n      }\n      wrapFields(unwrappedType, tracer, getConfig);\n    }\n  });\n}\n\nconst handleResolveSpanError = (\n  resolveSpan: api.Span,\n  err: any,\n  shouldEndSpan: boolean\n) => {\n  if (!shouldEndSpan) {\n    return;\n  }\n  resolveSpan.recordException(err);\n  resolveSpan.setStatus({\n    code: api.SpanStatusCode.ERROR,\n    message: err.message,\n  });\n  resolveSpan.end();\n};\n\nconst handleResolveSpanSuccess = (\n  resolveSpan: api.Span,\n  shouldEndSpan: boolean\n) => {\n  if (!shouldEndSpan) {\n    return;\n  }\n  resolveSpan.end();\n};\n\nexport function wrapFieldResolver<TSource = any, TContext = any, TArgs = any>(\n  tracer: api.Tracer,\n  getConfig: () => GraphQLInstrumentationParsedConfig,\n  fieldResolver: Maybe<\n    graphqlTypes.GraphQLFieldResolver<TSource, TContext, TArgs> & OtelPatched\n  >,\n  isDefaultResolver = false\n): graphqlTypes.GraphQLFieldResolver<\n  TSource,\n  TContext & ObjectWithGraphQLData,\n  TArgs\n> &\n  OtelPatched {\n  if (\n    (wrappedFieldResolver as OtelPatched)[OTEL_PATCHED_SYMBOL] ||\n    typeof fieldResolver !== 'function'\n  ) {\n    return fieldResolver!;\n  }\n\n  function wrappedFieldResolver(\n    this: graphqlTypes.GraphQLFieldResolver<TSource, TContext, TArgs>,\n    source: TSource,\n    args: TArgs,\n    contextValue: TContext & ObjectWithGraphQLData,\n    info: graphqlTypes.GraphQLResolveInfo\n  ) {\n    if (!fieldResolver) {\n      return undefined;\n    }\n    const config = getConfig();\n\n    // follows what graphql is doing to decide if this is a trivial resolver\n    // for which we don't need to create a resolve span\n    if (\n      config.ignoreTrivialResolveSpans &&\n      isDefaultResolver &&\n      (isObjectLike(source) || typeof source === 'function')\n    ) {\n      const property = (source as any)[info.fieldName];\n      // a function execution is not trivial and should be recorder.\n      // property which is not a function is just a value and we don't want a \"resolve\" span for it\n      if (typeof property !== 'function') {\n        return fieldResolver.call(this, source, args, contextValue, info);\n      }\n    }\n\n    if (!contextValue[OTEL_GRAPHQL_DATA_SYMBOL]) {\n      return fieldResolver.call(this, source, args, contextValue, info);\n    }\n    const path = pathToArray(config.mergeItems, info && info.path);\n    const depth = path.filter((item: any) => typeof item === 'string').length;\n\n    let field: any;\n    let shouldEndSpan = false;\n    if (config.depth >= 0 && config.depth < depth) {\n      field = getParentField(contextValue, path);\n    } else {\n      const newField = createFieldIfNotExists(\n        tracer,\n        getConfig,\n        contextValue,\n        info,\n        path\n      );\n      field = newField.field;\n      shouldEndSpan = newField.spanAdded;\n    }\n\n    return api.context.with(\n      api.trace.setSpan(api.context.active(), field.span),\n      () => {\n        try {\n          const res = fieldResolver.call(\n            this,\n            source,\n            args,\n            contextValue,\n            info\n          );\n          if (isPromise(res)) {\n            return res.then(\n              (r: any) => {\n                handleResolveSpanSuccess(field.span, shouldEndSpan);\n                return r;\n              },\n              (err: Error) => {\n                handleResolveSpanError(field.span, err, shouldEndSpan);\n                throw err;\n              }\n            );\n          } else {\n            handleResolveSpanSuccess(field.span, shouldEndSpan);\n            return res;\n          }\n        } catch (err: any) {\n          handleResolveSpanError(field.span, err, shouldEndSpan);\n          throw err;\n        }\n      }\n    );\n  }\n\n  (wrappedFieldResolver as OtelPatched)[OTEL_PATCHED_SYMBOL] = true;\n\n  return wrappedFieldResolver;\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// this is autogenerated file, see scripts/version-update.js\nexport const PACKAGE_VERSION = '0.47.1';\nexport const PACKAGE_NAME = '@opentelemetry/instrumentation-graphql';\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { context, trace } from '@opentelemetry/api';\nimport {\n  isWrapped,\n  InstrumentationBase,\n  InstrumentationNodeModuleDefinition,\n  InstrumentationNodeModuleFile,\n  safeExecuteInTheMiddle,\n} from '@opentelemetry/instrumentation';\nimport type * as graphqlTypes from 'graphql';\nimport { SpanNames } from './enum';\nimport { AttributeNames } from './enums/AttributeNames';\nimport { OTEL_GRAPHQL_DATA_SYMBOL } from './symbols';\n\nimport {\n  executeFunctionWithObj,\n  executeArgumentsArray,\n  executeType,\n  parseType,\n  validateType,\n  OtelExecutionArgs,\n  ObjectWithGraphQLData,\n  OPERATION_NOT_SUPPORTED,\n  Maybe,\n} from './internal-types';\nimport {\n  addInputVariableAttributes,\n  addSpanSource,\n  endSpan,\n  getOperation,\n  isPromise,\n  wrapFieldResolver,\n  wrapFields,\n} from './utils';\n\n/** @knipignore */\nimport { PACKAGE_NAME, PACKAGE_VERSION } from './version';\nimport * as api from '@opentelemetry/api';\nimport type { PromiseOrValue } from 'graphql/jsutils/PromiseOrValue';\nimport {\n  GraphQLInstrumentationConfig,\n  GraphQLInstrumentationParsedConfig,\n} from './types';\n\nconst DEFAULT_CONFIG: GraphQLInstrumentationParsedConfig = {\n  mergeItems: false,\n  depth: -1,\n  allowValues: false,\n  ignoreResolveSpans: false,\n};\n\nconst supportedVersions = ['>=14.0.0 <17'];\n\nexport class GraphQLInstrumentation extends InstrumentationBase<GraphQLInstrumentationParsedConfig> {\n  constructor(config: GraphQLInstrumentationConfig = {}) {\n    super(PACKAGE_NAME, PACKAGE_VERSION, { ...DEFAULT_CONFIG, ...config });\n  }\n\n  override setConfig(config: GraphQLInstrumentationConfig = {}) {\n    super.setConfig({ ...DEFAULT_CONFIG, ...config });\n  }\n\n  protected init() {\n    const module = new InstrumentationNodeModuleDefinition(\n      'graphql',\n      supportedVersions\n    );\n    module.files.push(this._addPatchingExecute());\n    module.files.push(this._addPatchingParser());\n    module.files.push(this._addPatchingValidate());\n\n    return module;\n  }\n\n  private _addPatchingExecute(): InstrumentationNodeModuleFile {\n    return new InstrumentationNodeModuleFile(\n      'graphql/execution/execute.js',\n      supportedVersions,\n      // cannot make it work with appropriate type as execute function has 2\n      //types and/cannot import function but only types\n      (moduleExports: any) => {\n        if (isWrapped(moduleExports.execute)) {\n          this._unwrap(moduleExports, 'execute');\n        }\n        this._wrap(\n          moduleExports,\n          'execute',\n          this._patchExecute(moduleExports.defaultFieldResolver)\n        );\n        return moduleExports;\n      },\n      moduleExports => {\n        if (moduleExports) {\n          this._unwrap(moduleExports, 'execute');\n        }\n      }\n    );\n  }\n\n  private _addPatchingParser(): InstrumentationNodeModuleFile {\n    return new InstrumentationNodeModuleFile(\n      'graphql/language/parser.js',\n      supportedVersions,\n      (moduleExports: typeof graphqlTypes) => {\n        if (isWrapped(moduleExports.parse)) {\n          this._unwrap(moduleExports, 'parse');\n        }\n        this._wrap(moduleExports, 'parse', this._patchParse());\n        return moduleExports;\n      },\n      (moduleExports: typeof graphqlTypes) => {\n        if (moduleExports) {\n          this._unwrap(moduleExports, 'parse');\n        }\n      }\n    );\n  }\n\n  private _addPatchingValidate(): InstrumentationNodeModuleFile {\n    return new InstrumentationNodeModuleFile(\n      'graphql/validation/validate.js',\n      supportedVersions,\n      moduleExports => {\n        if (isWrapped(moduleExports.validate)) {\n          this._unwrap(moduleExports, 'validate');\n        }\n        this._wrap(moduleExports, 'validate', this._patchValidate());\n        return moduleExports;\n      },\n      moduleExports => {\n        if (moduleExports) {\n          this._unwrap(moduleExports, 'validate');\n        }\n      }\n    );\n  }\n\n  private _patchExecute(\n    defaultFieldResolved: graphqlTypes.GraphQLFieldResolver<any, any>\n  ): (original: executeType) => executeType {\n    const instrumentation = this;\n    return function execute(original) {\n      return function patchExecute(\n        this: executeType\n      ): PromiseOrValue<graphqlTypes.ExecutionResult> {\n        let processedArgs: OtelExecutionArgs;\n\n        // case when apollo server is used for example\n        if (arguments.length >= 2) {\n          const args = arguments as unknown as executeArgumentsArray;\n          processedArgs = instrumentation._wrapExecuteArgs(\n            args[0],\n            args[1],\n            args[2],\n            args[3],\n            args[4],\n            args[5],\n            args[6],\n            args[7],\n            defaultFieldResolved\n          );\n        } else {\n          const args = arguments[0] as graphqlTypes.ExecutionArgs;\n          processedArgs = instrumentation._wrapExecuteArgs(\n            args.schema,\n            args.document,\n            args.rootValue,\n            args.contextValue,\n            args.variableValues,\n            args.operationName,\n            args.fieldResolver,\n            args.typeResolver,\n            defaultFieldResolved\n          );\n        }\n\n        const operation = getOperation(\n          processedArgs.document,\n          processedArgs.operationName\n        );\n\n        const span = instrumentation._createExecuteSpan(\n          operation,\n          processedArgs\n        );\n\n        processedArgs.contextValue[OTEL_GRAPHQL_DATA_SYMBOL] = {\n          source: processedArgs.document\n            ? processedArgs.document ||\n              (processedArgs.document as ObjectWithGraphQLData)[\n                OTEL_GRAPHQL_DATA_SYMBOL\n              ]\n            : undefined,\n          span,\n          fields: {},\n        };\n\n        return context.with(trace.setSpan(context.active(), span), () => {\n          return safeExecuteInTheMiddle<\n            PromiseOrValue<graphqlTypes.ExecutionResult>\n          >(\n            () => {\n              return (original as executeFunctionWithObj).apply(this, [\n                processedArgs,\n              ]);\n            },\n            (err, result) => {\n              instrumentation._handleExecutionResult(span, err, result);\n            }\n          );\n        });\n      };\n    };\n  }\n\n  private _handleExecutionResult(\n    span: api.Span,\n    err?: Error,\n    result?: PromiseOrValue<graphqlTypes.ExecutionResult>\n  ) {\n    const config = this.getConfig();\n    if (result === undefined || err) {\n      endSpan(span, err);\n      return;\n    }\n\n    if (isPromise(result)) {\n      (result as Promise<graphqlTypes.ExecutionResult>).then(\n        resultData => {\n          if (typeof config.responseHook !== 'function') {\n            endSpan(span);\n            return;\n          }\n          this._executeResponseHook(span, resultData);\n        },\n        error => {\n          endSpan(span, error);\n        }\n      );\n    } else {\n      if (typeof config.responseHook !== 'function') {\n        endSpan(span);\n        return;\n      }\n      this._executeResponseHook(span, result as graphqlTypes.ExecutionResult);\n    }\n  }\n\n  private _executeResponseHook(\n    span: api.Span,\n    result: graphqlTypes.ExecutionResult\n  ) {\n    const { responseHook } = this.getConfig();\n    if (!responseHook) {\n      return;\n    }\n\n    safeExecuteInTheMiddle(\n      () => {\n        responseHook(span, result);\n      },\n      err => {\n        if (err) {\n          this._diag.error('Error running response hook', err);\n        }\n\n        endSpan(span, undefined);\n      },\n      true\n    );\n  }\n\n  private _patchParse(): (original: parseType) => parseType {\n    const instrumentation = this;\n    return function parse(original) {\n      return function patchParse(\n        this: parseType,\n        source: string | graphqlTypes.Source,\n        options?: graphqlTypes.ParseOptions\n      ): graphqlTypes.DocumentNode {\n        return instrumentation._parse(this, original, source, options);\n      };\n    };\n  }\n\n  private _patchValidate(): (original: validateType) => validateType {\n    const instrumentation = this;\n    return function validate(original: validateType) {\n      return function patchValidate(\n        this: validateType,\n        schema: graphqlTypes.GraphQLSchema,\n        documentAST: graphqlTypes.DocumentNode,\n        rules?: ReadonlyArray<graphqlTypes.ValidationRule>,\n        options?: { maxErrors?: number },\n        typeInfo?: graphqlTypes.TypeInfo\n      ): ReadonlyArray<graphqlTypes.GraphQLError> {\n        return instrumentation._validate(\n          this,\n          original,\n          schema,\n          documentAST,\n          rules,\n          typeInfo,\n          options\n        );\n      };\n    };\n  }\n\n  private _parse(\n    obj: parseType,\n    original: parseType,\n    source: string | graphqlTypes.Source,\n    options?: graphqlTypes.ParseOptions\n  ): graphqlTypes.DocumentNode {\n    const config = this.getConfig();\n    const span = this.tracer.startSpan(SpanNames.PARSE);\n\n    return context.with(trace.setSpan(context.active(), span), () => {\n      return safeExecuteInTheMiddle<\n        graphqlTypes.DocumentNode & ObjectWithGraphQLData\n      >(\n        () => {\n          return original.call(obj, source, options);\n        },\n        (err, result) => {\n          if (result) {\n            const operation = getOperation(result);\n            if (!operation) {\n              span.updateName(SpanNames.SCHEMA_PARSE);\n            } else if (result.loc) {\n              addSpanSource(span, result.loc, config.allowValues);\n            }\n          }\n          endSpan(span, err);\n        }\n      );\n    });\n  }\n\n  private _validate(\n    obj: validateType,\n    original: validateType,\n    schema: graphqlTypes.GraphQLSchema,\n    documentAST: graphqlTypes.DocumentNode,\n    rules?: ReadonlyArray<graphqlTypes.ValidationRule>,\n    typeInfo?: graphqlTypes.TypeInfo,\n    options?: { maxErrors?: number }\n  ): ReadonlyArray<graphqlTypes.GraphQLError> {\n    const span = this.tracer.startSpan(SpanNames.VALIDATE, {});\n\n    return context.with(trace.setSpan(context.active(), span), () => {\n      return safeExecuteInTheMiddle<ReadonlyArray<graphqlTypes.GraphQLError>>(\n        () => {\n          return original.call(\n            obj,\n            schema,\n            documentAST,\n            rules,\n            options,\n            typeInfo\n          );\n        },\n        (err, errors) => {\n          if (!documentAST.loc) {\n            span.updateName(SpanNames.SCHEMA_VALIDATE);\n          }\n          if (errors && errors.length) {\n            span.recordException({\n              name: AttributeNames.ERROR_VALIDATION_NAME,\n              message: JSON.stringify(errors),\n            });\n          }\n          endSpan(span, err);\n        }\n      );\n    });\n  }\n\n  private _createExecuteSpan(\n    operation: graphqlTypes.DefinitionNode | undefined,\n    processedArgs: graphqlTypes.ExecutionArgs\n  ): api.Span {\n    const config = this.getConfig();\n\n    const span = this.tracer.startSpan(SpanNames.EXECUTE, {});\n    if (operation) {\n      const { operation: operationType, name: nameNode } =\n        operation as graphqlTypes.OperationDefinitionNode;\n\n      span.setAttribute(AttributeNames.OPERATION_TYPE, operationType);\n\n      const operationName = nameNode?.value;\n\n      // https://opentelemetry.io/docs/reference/specification/trace/semantic_conventions/instrumentation/graphql/\n      // > The span name MUST be of the format <graphql.operation.type> <graphql.operation.name> provided that graphql.operation.type and graphql.operation.name are available.\n      // > If graphql.operation.name is not available, the span SHOULD be named <graphql.operation.type>.\n      if (operationName) {\n        span.setAttribute(AttributeNames.OPERATION_NAME, operationName);\n        span.updateName(`${operationType} ${operationName}`);\n      } else {\n        span.updateName(operationType);\n      }\n    } else {\n      let operationName = ' ';\n      if (processedArgs.operationName) {\n        operationName = ` \"${processedArgs.operationName}\" `;\n      }\n      operationName = OPERATION_NOT_SUPPORTED.replace(\n        '$operationName$',\n        operationName\n      );\n      span.setAttribute(AttributeNames.OPERATION_NAME, operationName);\n    }\n\n    if (processedArgs.document?.loc) {\n      addSpanSource(span, processedArgs.document.loc, config.allowValues);\n    }\n\n    if (processedArgs.variableValues && config.allowValues) {\n      addInputVariableAttributes(span, processedArgs.variableValues);\n    }\n\n    return span;\n  }\n\n  private _wrapExecuteArgs(\n    schema: graphqlTypes.GraphQLSchema,\n    document: graphqlTypes.DocumentNode,\n    rootValue: any,\n    contextValue: any,\n    variableValues: Maybe<{ [key: string]: any }>,\n    operationName: Maybe<string>,\n    fieldResolver: Maybe<graphqlTypes.GraphQLFieldResolver<any, any>>,\n    typeResolver: Maybe<graphqlTypes.GraphQLTypeResolver<any, any>>,\n    defaultFieldResolved: graphqlTypes.GraphQLFieldResolver<any, any>\n  ): OtelExecutionArgs {\n    if (!contextValue) {\n      contextValue = {};\n    }\n\n    if (\n      contextValue[OTEL_GRAPHQL_DATA_SYMBOL] ||\n      this.getConfig().ignoreResolveSpans\n    ) {\n      return {\n        schema,\n        document,\n        rootValue,\n        contextValue,\n        variableValues,\n        operationName,\n        fieldResolver,\n        typeResolver,\n      };\n    }\n\n    const isUsingDefaultResolver = fieldResolver == null;\n    // follows graphql implementation here:\n    // https://github.com/graphql/graphql-js/blob/0b7daed9811731362c71900e12e5ea0d1ecc7f1f/src/execution/execute.ts#L494\n    const fieldResolverForExecute = fieldResolver ?? defaultFieldResolved;\n    fieldResolver = wrapFieldResolver(\n      this.tracer,\n      () => this.getConfig(),\n      fieldResolverForExecute,\n      isUsingDefaultResolver\n    );\n\n    if (schema) {\n      wrapFields(schema.getQueryType(), this.tracer, () => this.getConfig());\n      wrapFields(schema.getMutationType(), this.tracer, () => this.getConfig());\n    }\n\n    return {\n      schema,\n      document,\n      rootValue,\n      contextValue,\n      variableValues,\n      operationName,\n      fieldResolver,\n      typeResolver,\n    };\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport * from './instrumentation';\nexport * from './types';\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// this is autogenerated file, see scripts/version-update.js\nexport const PACKAGE_VERSION = '0.7.1';\nexport const PACKAGE_NAME = '@opentelemetry/instrumentation-kafkajs';\n", "/*\n * Copyright The OpenTelemetry Authors, Aspecto\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { TextMapGetter } from '@opentelemetry/api';\n\n/*\nsame as open telemetry's `defaultTextMapGetter`,\nbut also handle case where header is buffer,\nadding toString() to make sure string is returned\n*/\nexport const bufferTextMapGetter: TextMapGetter = {\n  get(carrier, key) {\n    if (!carrier) {\n      return undefined;\n    }\n\n    const keys = Object.keys(carrier);\n\n    for (const carrierKey of keys) {\n      if (carrierKey === key || carrierKey.toLowerCase() === key) {\n        return carrier[carrierKey]?.toString();\n      }\n    }\n\n    return undefined;\n  },\n\n  keys(carrier) {\n    return carrier ? Object.keys(carrier) : [];\n  },\n};\n", "/*\n * Copyright The OpenTelemetry Authors, Aspecto\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  SpanKind,\n  Span,\n  SpanStatusCode,\n  Context,\n  propagation,\n  Link,\n  trace,\n  context,\n  ROOT_CONTEXT,\n} from '@opentelemetry/api';\nimport {\n  MESSAGINGOPERATIONVALUES_PROCESS,\n  MESSAGINGOPERATIONVALUES_RECEIVE,\n  SEMATTRS_MESSAGING_SYSTEM,\n  SEMATTRS_MESSAGING_DESTINATION,\n  SEMATTRS_MESSAGING_OPERATION,\n} from '@opentelemetry/semantic-conventions';\nimport type * as kafkaJs from 'kafkajs';\nimport type {\n  EachBatchHandler,\n  EachMessageHandler,\n  Producer,\n  RecordMetadata,\n  Message,\n  ConsumerRunConfig,\n  KafkaMessage,\n  Consumer,\n} from 'kafkajs';\nimport { KafkaJsInstrumentationConfig } from './types';\n/** @knipignore */\nimport { PACKAGE_NAME, PACKAGE_VERSION } from './version';\nimport { bufferTextMapGetter } from './propagator';\nimport {\n  InstrumentationBase,\n  InstrumentationNodeModuleDefinition,\n  safeExecuteInTheMiddle,\n  isWrapped,\n} from '@opentelemetry/instrumentation';\n\nexport class KafkaJsInstrumentation extends InstrumentationBase<KafkaJsInstrumentationConfig> {\n  constructor(config: KafkaJsInstrumentationConfig = {}) {\n    super(PACKAGE_NAME, PACKAGE_VERSION, config);\n  }\n\n  protected init() {\n    const unpatch = (moduleExports: typeof kafkaJs) => {\n      if (isWrapped(moduleExports?.Kafka?.prototype.producer)) {\n        this._unwrap(moduleExports.Kafka.prototype, 'producer');\n      }\n      if (isWrapped(moduleExports?.Kafka?.prototype.consumer)) {\n        this._unwrap(moduleExports.Kafka.prototype, 'consumer');\n      }\n    };\n\n    const module = new InstrumentationNodeModuleDefinition(\n      'kafkajs',\n      ['>=0.1.0 <3'],\n      (moduleExports: typeof kafkaJs) => {\n        unpatch(moduleExports);\n        this._wrap(\n          moduleExports?.Kafka?.prototype,\n          'producer',\n          this._getProducerPatch()\n        );\n        this._wrap(\n          moduleExports?.Kafka?.prototype,\n          'consumer',\n          this._getConsumerPatch()\n        );\n\n        return moduleExports;\n      },\n      unpatch\n    );\n    return module;\n  }\n\n  private _getConsumerPatch() {\n    const instrumentation = this;\n    return (original: kafkaJs.Kafka['consumer']) => {\n      return function consumer(\n        this: kafkaJs.Kafka,\n        ...args: Parameters<kafkaJs.Kafka['consumer']>\n      ) {\n        const newConsumer: Consumer = original.apply(this, args);\n\n        if (isWrapped(newConsumer.run)) {\n          instrumentation._unwrap(newConsumer, 'run');\n        }\n\n        instrumentation._wrap(\n          newConsumer,\n          'run',\n          instrumentation._getConsumerRunPatch()\n        );\n\n        return newConsumer;\n      };\n    };\n  }\n\n  private _getProducerPatch() {\n    const instrumentation = this;\n    return (original: kafkaJs.Kafka['producer']) => {\n      return function consumer(\n        this: kafkaJs.Kafka,\n        ...args: Parameters<kafkaJs.Kafka['producer']>\n      ) {\n        const newProducer: Producer = original.apply(this, args);\n\n        if (isWrapped(newProducer.sendBatch)) {\n          instrumentation._unwrap(newProducer, 'sendBatch');\n        }\n        instrumentation._wrap(\n          newProducer,\n          'sendBatch',\n          instrumentation._getProducerSendBatchPatch()\n        );\n\n        if (isWrapped(newProducer.send)) {\n          instrumentation._unwrap(newProducer, 'send');\n        }\n        instrumentation._wrap(\n          newProducer,\n          'send',\n          instrumentation._getProducerSendPatch()\n        );\n\n        return newProducer;\n      };\n    };\n  }\n\n  private _getConsumerRunPatch() {\n    const instrumentation = this;\n    return (original: Consumer['run']) => {\n      return function run(\n        this: Consumer,\n        ...args: Parameters<Consumer['run']>\n      ): ReturnType<Consumer['run']> {\n        const config = args[0];\n        if (config?.eachMessage) {\n          if (isWrapped(config.eachMessage)) {\n            instrumentation._unwrap(config, 'eachMessage');\n          }\n          instrumentation._wrap(\n            config,\n            'eachMessage',\n            instrumentation._getConsumerEachMessagePatch()\n          );\n        }\n        if (config?.eachBatch) {\n          if (isWrapped(config.eachBatch)) {\n            instrumentation._unwrap(config, 'eachBatch');\n          }\n          instrumentation._wrap(\n            config,\n            'eachBatch',\n            instrumentation._getConsumerEachBatchPatch()\n          );\n        }\n        return original.call(this, config);\n      };\n    };\n  }\n\n  private _getConsumerEachMessagePatch() {\n    const instrumentation = this;\n    return (original: ConsumerRunConfig['eachMessage']) => {\n      return function eachMessage(\n        this: unknown,\n        ...args: Parameters<EachMessageHandler>\n      ): Promise<void> {\n        const payload = args[0];\n        const propagatedContext: Context = propagation.extract(\n          ROOT_CONTEXT,\n          payload.message.headers,\n          bufferTextMapGetter\n        );\n        const span = instrumentation._startConsumerSpan(\n          payload.topic,\n          payload.message,\n          MESSAGINGOPERATIONVALUES_PROCESS,\n          propagatedContext\n        );\n\n        const eachMessagePromise = context.with(\n          trace.setSpan(propagatedContext, span),\n          () => {\n            return original!.apply(this, args);\n          }\n        );\n        return instrumentation._endSpansOnPromise([span], eachMessagePromise);\n      };\n    };\n  }\n\n  private _getConsumerEachBatchPatch() {\n    return (original: ConsumerRunConfig['eachBatch']) => {\n      const instrumentation = this;\n      return function eachBatch(\n        this: unknown,\n        ...args: Parameters<EachBatchHandler>\n      ): Promise<void> {\n        const payload = args[0];\n        // https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/trace/semantic_conventions/messaging.md#topic-with-multiple-consumers\n        const receivingSpan = instrumentation._startConsumerSpan(\n          payload.batch.topic,\n          undefined,\n          MESSAGINGOPERATIONVALUES_RECEIVE,\n          ROOT_CONTEXT\n        );\n        return context.with(\n          trace.setSpan(context.active(), receivingSpan),\n          () => {\n            const spans = payload.batch.messages.map(\n              (message: KafkaMessage) => {\n                const propagatedContext: Context = propagation.extract(\n                  ROOT_CONTEXT,\n                  message.headers,\n                  bufferTextMapGetter\n                );\n                const spanContext = trace\n                  .getSpan(propagatedContext)\n                  ?.spanContext();\n                let origSpanLink: Link | undefined;\n                if (spanContext) {\n                  origSpanLink = {\n                    context: spanContext,\n                  };\n                }\n                return instrumentation._startConsumerSpan(\n                  payload.batch.topic,\n                  message,\n                  MESSAGINGOPERATIONVALUES_PROCESS,\n                  undefined,\n                  origSpanLink\n                );\n              }\n            );\n            const batchMessagePromise: Promise<void> = original!.apply(\n              this,\n              args\n            );\n            spans.unshift(receivingSpan);\n            return instrumentation._endSpansOnPromise(\n              spans,\n              batchMessagePromise\n            );\n          }\n        );\n      };\n    };\n  }\n\n  private _getProducerSendBatchPatch() {\n    const instrumentation = this;\n    return (original: Producer['sendBatch']) => {\n      return function sendBatch(\n        this: Producer,\n        ...args: Parameters<Producer['sendBatch']>\n      ): ReturnType<Producer['sendBatch']> {\n        const batch = args[0];\n        const messages = batch.topicMessages || [];\n        const spans: Span[] = messages\n          .map(topicMessage =>\n            topicMessage.messages.map(message =>\n              instrumentation._startProducerSpan(topicMessage.topic, message)\n            )\n          )\n          .reduce((acc, val) => acc.concat(val), []);\n\n        const origSendResult: Promise<RecordMetadata[]> = original.apply(\n          this,\n          args\n        );\n        return instrumentation._endSpansOnPromise(spans, origSendResult);\n      };\n    };\n  }\n\n  private _getProducerSendPatch() {\n    const instrumentation = this;\n    return (original: Producer['send']) => {\n      return function send(\n        this: Producer,\n        ...args: Parameters<Producer['send']>\n      ): ReturnType<Producer['send']> {\n        const record = args[0];\n        const spans: Span[] = record.messages.map(message => {\n          return instrumentation._startProducerSpan(record.topic, message);\n        });\n\n        const origSendResult: Promise<RecordMetadata[]> = original.apply(\n          this,\n          args\n        );\n        return instrumentation._endSpansOnPromise(spans, origSendResult);\n      };\n    };\n  }\n\n  private _endSpansOnPromise<T>(\n    spans: Span[],\n    sendPromise: Promise<T>\n  ): Promise<T> {\n    return Promise.resolve(sendPromise)\n      .catch(reason => {\n        let errorMessage: string;\n        if (typeof reason === 'string') errorMessage = reason;\n        else if (\n          typeof reason === 'object' &&\n          Object.prototype.hasOwnProperty.call(reason, 'message')\n        )\n          errorMessage = reason.message;\n\n        spans.forEach(span =>\n          span.setStatus({\n            code: SpanStatusCode.ERROR,\n            message: errorMessage,\n          })\n        );\n\n        throw reason;\n      })\n      .finally(() => {\n        spans.forEach(span => span.end());\n      });\n  }\n\n  private _startConsumerSpan(\n    topic: string,\n    message: KafkaMessage | undefined,\n    operation: string,\n    context: Context | undefined,\n    link?: Link\n  ) {\n    const span = this.tracer.startSpan(\n      topic,\n      {\n        kind: SpanKind.CONSUMER,\n        attributes: {\n          [SEMATTRS_MESSAGING_SYSTEM]: 'kafka',\n          [SEMATTRS_MESSAGING_DESTINATION]: topic,\n          [SEMATTRS_MESSAGING_OPERATION]: operation,\n        },\n        links: link ? [link] : [],\n      },\n      context\n    );\n\n    const { consumerHook } = this.getConfig();\n    if (consumerHook && message) {\n      safeExecuteInTheMiddle(\n        () => consumerHook(span, { topic, message }),\n        e => {\n          if (e) this._diag.error('consumerHook error', e);\n        },\n        true\n      );\n    }\n\n    return span;\n  }\n\n  private _startProducerSpan(topic: string, message: Message) {\n    const span = this.tracer.startSpan(topic, {\n      kind: SpanKind.PRODUCER,\n      attributes: {\n        [SEMATTRS_MESSAGING_SYSTEM]: 'kafka',\n        [SEMATTRS_MESSAGING_DESTINATION]: topic,\n      },\n    });\n\n    message.headers = message.headers ?? {};\n    propagation.inject(trace.setSpan(context.active(), span), message.headers);\n\n    const { producerHook } = this.getConfig();\n    if (producerHook) {\n      safeExecuteInTheMiddle(\n        () => producerHook(span, { topic, message }),\n        e => {\n          if (e) this._diag.error('producerHook error', e);\n        },\n        true\n      );\n    }\n\n    return span;\n  }\n}\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=types.js.map", "/*\n * Copyright The OpenTelemetry Authors, Aspecto\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport * from './instrumentation';\nexport * from './types';\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// this is autogenerated file, see scripts/version-update.js\nexport const PACKAGE_VERSION = '0.44.1';\nexport const PACKAGE_NAME = '@opentelemetry/instrumentation-lru-memoizer';\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { context } from '@opentelemetry/api';\nimport {\n  InstrumentationBase,\n  InstrumentationConfig,\n  InstrumentationNodeModuleDefinition,\n} from '@opentelemetry/instrumentation';\n/** @knipignore */\nimport { PACKAGE_NAME, PACKAGE_VERSION } from './version';\n\nexport class LruMemoizerInstrumentation extends InstrumentationBase {\n  constructor(config: InstrumentationConfig = {}) {\n    super(PACKAGE_NAME, PACKAGE_VERSION, config);\n  }\n\n  init(): InstrumentationNodeModuleDefinition[] {\n    return [\n      new InstrumentationNodeModuleDefinition(\n        'lru-memoizer',\n        ['>=1.3 <3'],\n        moduleExports => {\n          // moduleExports is a function which receives an options object,\n          // and returns a \"memoizer\" function upon invocation.\n          // We want to patch this \"memoizer's\" internal function\n          const asyncMemoizer = function (this: unknown) {\n            // This following function is invoked every time the user wants to get a (possible) memoized value\n            // We replace it with another function in which we bind the current context to the last argument (callback)\n            const origMemoizer = moduleExports.apply(this, arguments);\n            return function (this: unknown) {\n              const modifiedArguments = [...arguments];\n              // last argument is the callback\n              const origCallback = modifiedArguments.pop();\n              const callbackWithContext =\n                typeof origCallback === 'function'\n                  ? context.bind(context.active(), origCallback)\n                  : origCallback;\n              modifiedArguments.push(callbackWithContext);\n              return origMemoizer.apply(this, modifiedArguments);\n            };\n          };\n\n          // sync function preserves context, but we still need to export it\n          // as the lru-memoizer package does\n          asyncMemoizer.sync = moduleExports.sync;\n          return asyncMemoizer;\n        },\n        undefined // no need to disable as this instrumentation does not create any spans\n      ),\n    ];\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport * from './instrumentation';\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { InstrumentationConfig } from '@opentelemetry/instrumentation';\nimport { Span } from '@opentelemetry/api';\n\nexport interface MongoDBInstrumentationExecutionResponseHook {\n  (span: Span, responseInfo: MongoResponseHookInformation): void;\n}\n\n/**\n * Function that can be used to serialize db.statement tag\n * @param cmd - MongoDB command object\n *\n * @returns serialized string that will be used as the db.statement attribute.\n */\nexport type DbStatementSerializer = (cmd: Record<string, unknown>) => string;\n\nexport interface MongoDBInstrumentationConfig extends InstrumentationConfig {\n  /**\n   * If true, additional information about query parameters and\n   * results will be attached (as `attributes`) to spans representing\n   * database operations.\n   */\n  enhancedDatabaseReporting?: boolean;\n\n  /**\n   * Hook that allows adding custom span attributes based on the data\n   * returned from MongoDB actions.\n   *\n   * @default undefined\n   */\n  responseHook?: MongoDBInstrumentationExecutionResponseHook;\n\n  /**\n   * Custom serializer function for the db.statement tag\n   */\n  dbStatementSerializer?: DbStatementSerializer;\n}\n\nexport type Func<T> = (...args: unknown[]) => T;\nexport type MongoInternalCommand = {\n  findandmodify: boolean;\n  createIndexes: boolean;\n  count: boolean;\n  aggregate: boolean;\n  ismaster: boolean;\n  indexes?: unknown[];\n  query?: Record<string, unknown>;\n  limit?: number;\n  q?: Record<string, unknown>;\n  u?: Record<string, unknown>;\n};\n\nexport type ServerSession = {\n  id: any;\n  lastUse: number;\n  txnNumber: number;\n  isDirty: boolean;\n};\n\nexport type CursorState = { cmd: MongoInternalCommand } & Record<\n  string,\n  unknown\n>;\n\nexport interface MongoResponseHookInformation {\n  data: CommandResult;\n}\n\n// https://github.com/mongodb/node-mongodb-native/blob/3.6/lib/core/connection/command_result.js\nexport type CommandResult = {\n  result?: unknown;\n  connection?: unknown;\n  message?: unknown;\n};\n\n// https://github.com/mongodb/node-mongodb-native/blob/3.6/lib/core/wireprotocol/index.js\nexport type WireProtocolInternal = {\n  insert: (\n    server: MongoInternalTopology,\n    ns: string,\n    ops: unknown[],\n    options: unknown | Function,\n    callback?: Function\n  ) => unknown;\n  update: (\n    server: MongoInternalTopology,\n    ns: string,\n    ops: unknown[],\n    options: unknown | Function,\n    callback?: Function\n  ) => unknown;\n  remove: (\n    server: MongoInternalTopology,\n    ns: string,\n    ops: unknown[],\n    options: unknown | Function,\n    callback?: Function\n  ) => unknown;\n  killCursors: (\n    server: MongoInternalTopology,\n    ns: string,\n    cursorState: CursorState,\n    callback: Function\n  ) => unknown;\n  getMore: (\n    server: MongoInternalTopology,\n    ns: string,\n    cursorState: CursorState,\n    batchSize: number,\n    options: unknown | Function,\n    callback?: Function\n  ) => unknown;\n  query: (\n    server: MongoInternalTopology,\n    ns: string,\n    cmd: MongoInternalCommand,\n    cursorState: CursorState,\n    options: unknown | Function,\n    callback?: Function\n  ) => unknown;\n  command: (\n    server: MongoInternalTopology,\n    ns: string,\n    cmd: MongoInternalCommand,\n    options: unknown | Function,\n    callback?: Function\n  ) => unknown;\n};\n\n// https://github.com/mongodb/node-mongodb-native/blob/3.6/lib/topologies/server.js#L172\n// https://github.com/mongodb/node-mongodb-native/blob/2.2/lib/server.js#L174\nexport type MongoInternalTopology = {\n  s?: {\n    // those are for mongodb@3\n    options?: {\n      host?: string;\n      port?: number;\n      servername?: string;\n    };\n    // those are for mongodb@2\n    host?: string;\n    port?: number;\n  };\n  // mongodb@3 with useUnifiedTopology option\n  description?: {\n    address?: string;\n  };\n};\n\nexport enum MongodbCommandType {\n  CREATE_INDEXES = 'createIndexes',\n  FIND_AND_MODIFY = 'findAndModify',\n  IS_MASTER = 'isMaster',\n  COUNT = 'count',\n  AGGREGATE = 'aggregate',\n  UNKNOWN = 'unknown',\n}\n\n// https://github.com/mongodb/js-bson/blob/main/src/bson.ts\nexport type Document = {\n  [key: string]: any;\n};\n\n// https://github.com/mongodb/node-mongodb-native/blob/v6.4.0/src/utils.ts#L281\nexport interface MongodbNamespace {\n  db: string;\n  collection?: string;\n}\n\nexport type V4Connection = {\n  command: Function;\n  // From version 6.4.0 the method does not expect a callback and returns a promise\n  // https://github.com/mongodb/node-mongodb-native/blob/v6.4.2/src/cmap/connection.ts\n  commandPromise(\n    ns: MongodbNamespace,\n    cmd: Document,\n    options: undefined | unknown,\n    // From v6.6.0 we have this new param which is a constructor function\n    // https://github.com/mongodb/node-mongodb-native/blob/v6.6.0/src/cmap/connection.ts#L588\n    responseType: undefined | unknown\n  ): Promise<any>;\n  // Earlier versions expect a callback param and return void\n  // https://github.com/mongodb/node-mongodb-native/blob/v4.2.2/src/cmap/connection.ts\n  commandCallback(\n    ns: MongodbNamespace,\n    cmd: Document,\n    options: undefined | unknown,\n    callback: any\n  ): void;\n};\n\n// https://github.com/mongodb/node-mongodb-native/blob/v4.2.2/src/cmap/connection_pool.ts\nexport type V4ConnectionPool = {\n  // Instrumentation just cares about carrying the async context so\n  // types of callback params are not needed\n  checkOut: (callback: (error: any, connection: any) => void) => void;\n};\n\nexport type V4Connect = {\n  connect: Function;\n  // From version 6.4.0 the method does not expect a callback and returns a promise\n  // https://github.com/mongodb/node-mongodb-native/blob/v6.4.0/src/cmap/connect.ts\n  connectPromise: (options: any) => Promise<any>;\n  // Earlier versions expect a callback param and return void\n  // https://github.com/mongodb/node-mongodb-native/blob/v4.2.2/src/cmap/connect.ts\n  connectCallback: (options: any, callback: any) => void;\n};\n\n// https://github.com/mongodb/node-mongodb-native/blob/v4.2.2/src/sessions.ts\nexport type V4Session = {\n  acquire: () => ServerSession;\n  release: (session: ServerSession) => void;\n};\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// this is autogenerated file, see scripts/version-update.js\nexport const PACKAGE_VERSION = '0.52.0';\nexport const PACKAGE_NAME = '@opentelemetry/instrumentation-mongodb';\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  context,\n  trace,\n  Span,\n  SpanKind,\n  SpanStatusCode,\n} from '@opentelemetry/api';\nimport {\n  InstrumentationBase,\n  InstrumentationNodeModuleDefinition,\n  InstrumentationNodeModuleFile,\n  isWrapped,\n  safeExecuteInTheMiddle,\n} from '@opentelemetry/instrumentation';\nimport {\n  DBSYSTEMVALUES_MONGODB,\n  SEMATTRS_DB_CONNECTION_STRING,\n  SEMATTRS_DB_MONGODB_COLLECTION,\n  SEMATTRS_DB_NAME,\n  SEMATTRS_DB_OPERATION,\n  SEMATTRS_DB_STATEMENT,\n  SEMATTRS_DB_SYSTEM,\n  SEMATTRS_NET_PEER_NAME,\n  SEMATTRS_NET_PEER_PORT,\n} from '@opentelemetry/semantic-conventions';\nimport { MongoDBInstrumentationConfig, CommandResult } from './types';\nimport {\n  CursorState,\n  ServerSession,\n  MongodbCommandType,\n  MongoInternalCommand,\n  MongodbNamespace,\n  MongoInternalTopology,\n  WireProtocolInternal,\n  V4Connection,\n  V4ConnectionPool,\n} from './internal-types';\nimport { V4Connect, V4Session } from './internal-types';\n/** @knipignore */\nimport { PACKAGE_NAME, PACKAGE_VERSION } from './version';\nimport { UpDownCounter } from '@opentelemetry/api';\n\nconst DEFAULT_CONFIG: MongoDBInstrumentationConfig = {\n  requireParentSpan: true,\n};\n\n/** mongodb instrumentation plugin for OpenTelemetry */\nexport class MongoDBInstrumentation extends InstrumentationBase<MongoDBInstrumentationConfig> {\n  private _connectionsUsage!: UpDownCounter;\n  private _poolName!: string;\n\n  constructor(config: MongoDBInstrumentationConfig = {}) {\n    super(PACKAGE_NAME, PACKAGE_VERSION, { ...DEFAULT_CONFIG, ...config });\n  }\n\n  override setConfig(config: MongoDBInstrumentationConfig = {}) {\n    super.setConfig({ ...DEFAULT_CONFIG, ...config });\n  }\n\n  override _updateMetricInstruments() {\n    this._connectionsUsage = this.meter.createUpDownCounter(\n      'db.client.connections.usage',\n      {\n        description:\n          'The number of connections that are currently in state described by the state attribute.',\n        unit: '{connection}',\n      }\n    );\n  }\n\n  init() {\n    const {\n      v3PatchConnection: v3PatchConnection,\n      v3UnpatchConnection: v3UnpatchConnection,\n    } = this._getV3ConnectionPatches();\n\n    const { v4PatchConnect, v4UnpatchConnect } = this._getV4ConnectPatches();\n    const {\n      v4PatchConnectionCallback,\n      v4PatchConnectionPromise,\n      v4UnpatchConnection,\n    } = this._getV4ConnectionPatches();\n    const { v4PatchConnectionPool, v4UnpatchConnectionPool } =\n      this._getV4ConnectionPoolPatches();\n    const { v4PatchSessions, v4UnpatchSessions } = this._getV4SessionsPatches();\n\n    return [\n      new InstrumentationNodeModuleDefinition(\n        'mongodb',\n        ['>=3.3.0 <4'],\n        undefined,\n        undefined,\n        [\n          new InstrumentationNodeModuleFile(\n            'mongodb/lib/core/wireprotocol/index.js',\n            ['>=3.3.0 <4'],\n            v3PatchConnection,\n            v3UnpatchConnection\n          ),\n        ]\n      ),\n      new InstrumentationNodeModuleDefinition(\n        'mongodb',\n        ['>=4.0.0 <7'],\n        undefined,\n        undefined,\n        [\n          new InstrumentationNodeModuleFile(\n            'mongodb/lib/cmap/connection.js',\n            ['>=4.0.0 <6.4'],\n            v4PatchConnectionCallback,\n            v4UnpatchConnection\n          ),\n          new InstrumentationNodeModuleFile(\n            'mongodb/lib/cmap/connection.js',\n            ['>=6.4.0 <7'],\n            v4PatchConnectionPromise,\n            v4UnpatchConnection\n          ),\n          new InstrumentationNodeModuleFile(\n            'mongodb/lib/cmap/connection_pool.js',\n            ['>=4.0.0 <6.4'],\n            v4PatchConnectionPool,\n            v4UnpatchConnectionPool\n          ),\n          new InstrumentationNodeModuleFile(\n            'mongodb/lib/cmap/connect.js',\n            ['>=4.0.0 <7'],\n            v4PatchConnect,\n            v4UnpatchConnect\n          ),\n          new InstrumentationNodeModuleFile(\n            'mongodb/lib/sessions.js',\n            ['>=4.0.0 <7'],\n            v4PatchSessions,\n            v4UnpatchSessions\n          ),\n        ]\n      ),\n    ];\n  }\n\n  private _getV3ConnectionPatches<T extends WireProtocolInternal>() {\n    return {\n      v3PatchConnection: (moduleExports: T) => {\n        // patch insert operation\n        if (isWrapped(moduleExports.insert)) {\n          this._unwrap(moduleExports, 'insert');\n        }\n        this._wrap(\n          moduleExports,\n          'insert',\n          this._getV3PatchOperation('insert')\n        );\n        // patch remove operation\n        if (isWrapped(moduleExports.remove)) {\n          this._unwrap(moduleExports, 'remove');\n        }\n        this._wrap(\n          moduleExports,\n          'remove',\n          this._getV3PatchOperation('remove')\n        );\n        // patch update operation\n        if (isWrapped(moduleExports.update)) {\n          this._unwrap(moduleExports, 'update');\n        }\n        this._wrap(\n          moduleExports,\n          'update',\n          this._getV3PatchOperation('update')\n        );\n        // patch other command\n        if (isWrapped(moduleExports.command)) {\n          this._unwrap(moduleExports, 'command');\n        }\n        this._wrap(moduleExports, 'command', this._getV3PatchCommand());\n        // patch query\n        if (isWrapped(moduleExports.query)) {\n          this._unwrap(moduleExports, 'query');\n        }\n        this._wrap(moduleExports, 'query', this._getV3PatchFind());\n        // patch get more operation on cursor\n        if (isWrapped(moduleExports.getMore)) {\n          this._unwrap(moduleExports, 'getMore');\n        }\n        this._wrap(moduleExports, 'getMore', this._getV3PatchCursor());\n        return moduleExports;\n      },\n      v3UnpatchConnection: (moduleExports?: T) => {\n        if (moduleExports === undefined) return;\n        this._unwrap(moduleExports, 'insert');\n        this._unwrap(moduleExports, 'remove');\n        this._unwrap(moduleExports, 'update');\n        this._unwrap(moduleExports, 'command');\n        this._unwrap(moduleExports, 'query');\n        this._unwrap(moduleExports, 'getMore');\n      },\n    };\n  }\n\n  private _getV4SessionsPatches<T extends V4Session>() {\n    return {\n      v4PatchSessions: (moduleExports: any) => {\n        if (isWrapped(moduleExports.acquire)) {\n          this._unwrap(moduleExports, 'acquire');\n        }\n        this._wrap(\n          moduleExports.ServerSessionPool.prototype,\n          'acquire',\n          this._getV4AcquireCommand()\n        );\n\n        if (isWrapped(moduleExports.release)) {\n          this._unwrap(moduleExports, 'release');\n        }\n        this._wrap(\n          moduleExports.ServerSessionPool.prototype,\n          'release',\n          this._getV4ReleaseCommand()\n        );\n        return moduleExports;\n      },\n      v4UnpatchSessions: (moduleExports?: T) => {\n        if (moduleExports === undefined) return;\n        if (isWrapped(moduleExports.acquire)) {\n          this._unwrap(moduleExports, 'acquire');\n        }\n        if (isWrapped(moduleExports.release)) {\n          this._unwrap(moduleExports, 'release');\n        }\n      },\n    };\n  }\n\n  private _getV4AcquireCommand() {\n    const instrumentation = this;\n    return (original: V4Session['acquire']) => {\n      return function patchAcquire(this: any) {\n        const nSessionsBeforeAcquire = this.sessions.length;\n        const session = original.call(this);\n        const nSessionsAfterAcquire = this.sessions.length;\n\n        if (nSessionsBeforeAcquire === nSessionsAfterAcquire) {\n          //no session in the pool. a new session was created and used\n          instrumentation._connectionsUsage.add(1, {\n            state: 'used',\n            'pool.name': instrumentation._poolName,\n          });\n        } else if (nSessionsBeforeAcquire - 1 === nSessionsAfterAcquire) {\n          //a session was already in the pool. remove it from the pool and use it.\n          instrumentation._connectionsUsage.add(-1, {\n            state: 'idle',\n            'pool.name': instrumentation._poolName,\n          });\n          instrumentation._connectionsUsage.add(1, {\n            state: 'used',\n            'pool.name': instrumentation._poolName,\n          });\n        }\n        return session;\n      };\n    };\n  }\n\n  private _getV4ReleaseCommand() {\n    const instrumentation = this;\n    return (original: V4Session['release']) => {\n      return function patchRelease(this: any, session: ServerSession) {\n        const cmdPromise = original.call(this, session);\n\n        instrumentation._connectionsUsage.add(-1, {\n          state: 'used',\n          'pool.name': instrumentation._poolName,\n        });\n        instrumentation._connectionsUsage.add(1, {\n          state: 'idle',\n          'pool.name': instrumentation._poolName,\n        });\n        return cmdPromise;\n      };\n    };\n  }\n\n  private _getV4ConnectionPoolPatches<T extends V4ConnectionPool>() {\n    return {\n      v4PatchConnectionPool: (moduleExports: any) => {\n        const poolPrototype = moduleExports.ConnectionPool.prototype;\n\n        if (isWrapped(poolPrototype.checkOut)) {\n          this._unwrap(poolPrototype, 'checkOut');\n        }\n\n        this._wrap(\n          poolPrototype,\n          'checkOut',\n          this._getV4ConnectionPoolCheckOut()\n        );\n        return moduleExports;\n      },\n      v4UnpatchConnectionPool: (moduleExports?: any) => {\n        if (moduleExports === undefined) return;\n\n        this._unwrap(moduleExports.ConnectionPool.prototype, 'checkOut');\n      },\n    };\n  }\n\n  private _getV4ConnectPatches<T extends V4Connect>() {\n    return {\n      v4PatchConnect: (moduleExports: any) => {\n        if (isWrapped(moduleExports.connect)) {\n          this._unwrap(moduleExports, 'connect');\n        }\n\n        this._wrap(moduleExports, 'connect', this._getV4ConnectCommand());\n        return moduleExports;\n      },\n      v4UnpatchConnect: (moduleExports?: T) => {\n        if (moduleExports === undefined) return;\n\n        this._unwrap(moduleExports, 'connect');\n      },\n    };\n  }\n\n  // This patch will become unnecessary once\n  // https://jira.mongodb.org/browse/NODE-5639 is done.\n  private _getV4ConnectionPoolCheckOut() {\n    return (original: V4ConnectionPool['checkOut']) => {\n      return function patchedCheckout(this: unknown, callback: any) {\n        const patchedCallback = context.bind(context.active(), callback);\n        return original.call(this, patchedCallback);\n      };\n    };\n  }\n\n  private _getV4ConnectCommand() {\n    const instrumentation = this;\n\n    return (\n      original: V4Connect['connectCallback'] | V4Connect['connectPromise']\n    ) => {\n      return function patchedConnect(\n        this: unknown,\n        options: any,\n        callback: any\n      ) {\n        // from v6.4 `connect` method only accepts an options param and returns a promise\n        // with the connection\n        if (original.length === 1) {\n          const result = (original as V4Connect['connectPromise']).call(\n            this,\n            options\n          );\n          if (result && typeof result.then === 'function') {\n            result.then(\n              () => instrumentation.setPoolName(options),\n              // this handler is set to pass the lint rules\n              () => undefined\n            );\n          }\n          return result;\n        }\n\n        // Earlier versions expects a callback param and return void\n        const patchedCallback = function (err: any, conn: any) {\n          if (err || !conn) {\n            callback(err, conn);\n            return;\n          }\n          instrumentation.setPoolName(options);\n          callback(err, conn);\n        };\n\n        return (original as V4Connect['connectCallback']).call(\n          this,\n          options,\n          patchedCallback\n        );\n      };\n    };\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  private _getV4ConnectionPatches<T extends V4Connection>() {\n    return {\n      v4PatchConnectionCallback: (moduleExports: any) => {\n        // patch insert operation\n        if (isWrapped(moduleExports.Connection.prototype.command)) {\n          this._unwrap(moduleExports.Connection.prototype, 'command');\n        }\n\n        this._wrap(\n          moduleExports.Connection.prototype,\n          'command',\n          this._getV4PatchCommandCallback()\n        );\n        return moduleExports;\n      },\n      v4PatchConnectionPromise: (moduleExports: any) => {\n        // patch insert operation\n        if (isWrapped(moduleExports.Connection.prototype.command)) {\n          this._unwrap(moduleExports.Connection.prototype, 'command');\n        }\n\n        this._wrap(\n          moduleExports.Connection.prototype,\n          'command',\n          this._getV4PatchCommandPromise()\n        );\n        return moduleExports;\n      },\n      v4UnpatchConnection: (moduleExports?: any) => {\n        if (moduleExports === undefined) return;\n        this._unwrap(moduleExports.Connection.prototype, 'command');\n      },\n    };\n  }\n\n  /** Creates spans for common operations */\n  private _getV3PatchOperation(operationName: 'insert' | 'update' | 'remove') {\n    const instrumentation = this;\n    return (original: WireProtocolInternal[typeof operationName]) => {\n      return function patchedServerCommand(\n        this: unknown,\n        server: MongoInternalTopology,\n        ns: string,\n        ops: unknown[],\n        options: unknown | Function,\n        callback?: Function\n      ) {\n        const currentSpan = trace.getSpan(context.active());\n        const skipInstrumentation =\n          instrumentation._checkSkipInstrumentation(currentSpan);\n\n        const resultHandler =\n          typeof options === 'function' ? options : callback;\n        if (\n          skipInstrumentation ||\n          typeof resultHandler !== 'function' ||\n          typeof ops !== 'object'\n        ) {\n          if (typeof options === 'function') {\n            return original.call(this, server, ns, ops, options);\n          } else {\n            return original.call(this, server, ns, ops, options, callback);\n          }\n        }\n\n        const span = instrumentation.tracer.startSpan(\n          `mongodb.${operationName}`,\n          {\n            kind: SpanKind.CLIENT,\n          }\n        );\n\n        instrumentation._populateV3Attributes(\n          span,\n          ns,\n          server,\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          ops[0] as any,\n          operationName\n        );\n        const patchedCallback = instrumentation._patchEnd(span, resultHandler);\n        // handle when options is the callback to send the correct number of args\n        if (typeof options === 'function') {\n          return original.call(this, server, ns, ops, patchedCallback);\n        } else {\n          return original.call(this, server, ns, ops, options, patchedCallback);\n        }\n      };\n    };\n  }\n\n  /** Creates spans for command operation */\n  private _getV3PatchCommand() {\n    const instrumentation = this;\n    return (original: WireProtocolInternal['command']) => {\n      return function patchedServerCommand(\n        this: unknown,\n        server: MongoInternalTopology,\n        ns: string,\n        cmd: MongoInternalCommand,\n        options: unknown | Function,\n        callback?: Function\n      ) {\n        const currentSpan = trace.getSpan(context.active());\n        const skipInstrumentation =\n          instrumentation._checkSkipInstrumentation(currentSpan);\n\n        const resultHandler =\n          typeof options === 'function' ? options : callback;\n\n        if (\n          skipInstrumentation ||\n          typeof resultHandler !== 'function' ||\n          typeof cmd !== 'object'\n        ) {\n          if (typeof options === 'function') {\n            return original.call(this, server, ns, cmd, options);\n          } else {\n            return original.call(this, server, ns, cmd, options, callback);\n          }\n        }\n\n        const commandType = MongoDBInstrumentation._getCommandType(cmd);\n        const type =\n          commandType === MongodbCommandType.UNKNOWN ? 'command' : commandType;\n        const span = instrumentation.tracer.startSpan(`mongodb.${type}`, {\n          kind: SpanKind.CLIENT,\n        });\n        const operation =\n          commandType === MongodbCommandType.UNKNOWN ? undefined : commandType;\n        instrumentation._populateV3Attributes(span, ns, server, cmd, operation);\n        const patchedCallback = instrumentation._patchEnd(span, resultHandler);\n        // handle when options is the callback to send the correct number of args\n        if (typeof options === 'function') {\n          return original.call(this, server, ns, cmd, patchedCallback);\n        } else {\n          return original.call(this, server, ns, cmd, options, patchedCallback);\n        }\n      };\n    };\n  }\n\n  /** Creates spans for command operation */\n  private _getV4PatchCommandCallback() {\n    const instrumentation = this;\n    return (original: V4Connection['commandCallback']) => {\n      return function patchedV4ServerCommand(\n        this: any,\n        ns: MongodbNamespace,\n        cmd: any,\n        options: undefined | unknown,\n        callback: any\n      ) {\n        const currentSpan = trace.getSpan(context.active());\n        const skipInstrumentation =\n          instrumentation._checkSkipInstrumentation(currentSpan);\n        const resultHandler = callback;\n        const commandType = Object.keys(cmd)[0];\n\n        if (typeof cmd !== 'object' || cmd.ismaster || cmd.hello) {\n          return original.call(this, ns, cmd, options, callback);\n        }\n\n        let span = undefined;\n        if (!skipInstrumentation) {\n          span = instrumentation.tracer.startSpan(`mongodb.${commandType}`, {\n            kind: SpanKind.CLIENT,\n          });\n          instrumentation._populateV4Attributes(\n            span,\n            this,\n            ns,\n            cmd,\n            commandType\n          );\n        }\n        const patchedCallback = instrumentation._patchEnd(\n          span,\n          resultHandler,\n          this.id,\n          commandType\n        );\n\n        return original.call(this, ns, cmd, options, patchedCallback);\n      };\n    };\n  }\n\n  private _getV4PatchCommandPromise() {\n    const instrumentation = this;\n    return (original: V4Connection['commandPromise']) => {\n      return function patchedV4ServerCommand(\n        this: any,\n        ...args: Parameters<V4Connection['commandPromise']>\n      ) {\n        const [ns, cmd] = args;\n        const currentSpan = trace.getSpan(context.active());\n        const skipInstrumentation =\n          instrumentation._checkSkipInstrumentation(currentSpan);\n\n        const commandType = Object.keys(cmd)[0];\n        const resultHandler = () => undefined;\n\n        if (typeof cmd !== 'object' || cmd.ismaster || cmd.hello) {\n          return original.apply(this, args);\n        }\n\n        let span = undefined;\n        if (!skipInstrumentation) {\n          span = instrumentation.tracer.startSpan(`mongodb.${commandType}`, {\n            kind: SpanKind.CLIENT,\n          });\n          instrumentation._populateV4Attributes(\n            span,\n            this,\n            ns,\n            cmd,\n            commandType\n          );\n        }\n\n        const patchedCallback = instrumentation._patchEnd(\n          span,\n          resultHandler,\n          this.id,\n          commandType\n        );\n\n        const result = original.apply(this, args);\n        result.then(\n          (res: any) => patchedCallback(null, res),\n          (err: any) => patchedCallback(err)\n        );\n\n        return result;\n      };\n    };\n  }\n\n  /** Creates spans for find operation */\n  private _getV3PatchFind() {\n    const instrumentation = this;\n    return (original: WireProtocolInternal['query']) => {\n      return function patchedServerCommand(\n        this: unknown,\n        server: MongoInternalTopology,\n        ns: string,\n        cmd: MongoInternalCommand,\n        cursorState: CursorState,\n        options: unknown | Function,\n        callback?: Function\n      ) {\n        const currentSpan = trace.getSpan(context.active());\n        const skipInstrumentation =\n          instrumentation._checkSkipInstrumentation(currentSpan);\n        const resultHandler =\n          typeof options === 'function' ? options : callback;\n\n        if (\n          skipInstrumentation ||\n          typeof resultHandler !== 'function' ||\n          typeof cmd !== 'object'\n        ) {\n          if (typeof options === 'function') {\n            return original.call(this, server, ns, cmd, cursorState, options);\n          } else {\n            return original.call(\n              this,\n              server,\n              ns,\n              cmd,\n              cursorState,\n              options,\n              callback\n            );\n          }\n        }\n\n        const span = instrumentation.tracer.startSpan('mongodb.find', {\n          kind: SpanKind.CLIENT,\n        });\n        instrumentation._populateV3Attributes(span, ns, server, cmd, 'find');\n        const patchedCallback = instrumentation._patchEnd(span, resultHandler);\n        // handle when options is the callback to send the correct number of args\n        if (typeof options === 'function') {\n          return original.call(\n            this,\n            server,\n            ns,\n            cmd,\n            cursorState,\n            patchedCallback\n          );\n        } else {\n          return original.call(\n            this,\n            server,\n            ns,\n            cmd,\n            cursorState,\n            options,\n            patchedCallback\n          );\n        }\n      };\n    };\n  }\n\n  /** Creates spans for find operation */\n  private _getV3PatchCursor() {\n    const instrumentation = this;\n    return (original: WireProtocolInternal['getMore']) => {\n      return function patchedServerCommand(\n        this: unknown,\n        server: MongoInternalTopology,\n        ns: string,\n        cursorState: CursorState,\n        batchSize: number,\n        options: unknown | Function,\n        callback?: Function\n      ) {\n        const currentSpan = trace.getSpan(context.active());\n        const skipInstrumentation =\n          instrumentation._checkSkipInstrumentation(currentSpan);\n\n        const resultHandler =\n          typeof options === 'function' ? options : callback;\n\n        if (skipInstrumentation || typeof resultHandler !== 'function') {\n          if (typeof options === 'function') {\n            return original.call(\n              this,\n              server,\n              ns,\n              cursorState,\n              batchSize,\n              options\n            );\n          } else {\n            return original.call(\n              this,\n              server,\n              ns,\n              cursorState,\n              batchSize,\n              options,\n              callback\n            );\n          }\n        }\n\n        const span = instrumentation.tracer.startSpan('mongodb.getMore', {\n          kind: SpanKind.CLIENT,\n        });\n        instrumentation._populateV3Attributes(\n          span,\n          ns,\n          server,\n          cursorState.cmd,\n          'getMore'\n        );\n        const patchedCallback = instrumentation._patchEnd(span, resultHandler);\n        // handle when options is the callback to send the correct number of args\n        if (typeof options === 'function') {\n          return original.call(\n            this,\n            server,\n            ns,\n            cursorState,\n            batchSize,\n            patchedCallback\n          );\n        } else {\n          return original.call(\n            this,\n            server,\n            ns,\n            cursorState,\n            batchSize,\n            options,\n            patchedCallback\n          );\n        }\n      };\n    };\n  }\n\n  /**\n   * Get the mongodb command type from the object.\n   * @param command Internal mongodb command object\n   */\n  private static _getCommandType(\n    command: MongoInternalCommand\n  ): MongodbCommandType {\n    if (command.createIndexes !== undefined) {\n      return MongodbCommandType.CREATE_INDEXES;\n    } else if (command.findandmodify !== undefined) {\n      return MongodbCommandType.FIND_AND_MODIFY;\n    } else if (command.ismaster !== undefined) {\n      return MongodbCommandType.IS_MASTER;\n    } else if (command.count !== undefined) {\n      return MongodbCommandType.COUNT;\n    } else if (command.aggregate !== undefined) {\n      return MongodbCommandType.AGGREGATE;\n    } else {\n      return MongodbCommandType.UNKNOWN;\n    }\n  }\n\n  /**\n   * Populate span's attributes by fetching related metadata from the context\n   * @param span span to add attributes to\n   * @param connectionCtx mongodb internal connection context\n   * @param ns mongodb namespace\n   * @param command mongodb internal representation of a command\n   */\n  private _populateV4Attributes(\n    span: Span,\n    connectionCtx: any,\n    ns: MongodbNamespace,\n    command?: any,\n    operation?: string\n  ) {\n    let host, port: undefined | string;\n    if (connectionCtx) {\n      const hostParts =\n        typeof connectionCtx.address === 'string'\n          ? connectionCtx.address.split(':')\n          : '';\n      if (hostParts.length === 2) {\n        host = hostParts[0];\n        port = hostParts[1];\n      }\n    }\n    // capture parameters within the query as well if enhancedDatabaseReporting is enabled.\n    let commandObj: Record<string, unknown>;\n    if (command?.documents && command.documents[0]) {\n      commandObj = command.documents[0];\n    } else if (command?.cursors) {\n      commandObj = command.cursors;\n    } else {\n      commandObj = command;\n    }\n\n    this._addAllSpanAttributes(\n      span,\n      ns.db,\n      ns.collection,\n      host,\n      port,\n      commandObj,\n      operation\n    );\n  }\n\n  /**\n   * Populate span's attributes by fetching related metadata from the context\n   * @param span span to add attributes to\n   * @param ns mongodb namespace\n   * @param topology mongodb internal representation of the network topology\n   * @param command mongodb internal representation of a command\n   */\n  private _populateV3Attributes(\n    span: Span,\n    ns: string,\n    topology: MongoInternalTopology,\n    command?: MongoInternalCommand,\n    operation?: string | undefined\n  ) {\n    // add network attributes to determine the remote server\n    let host: undefined | string;\n    let port: undefined | string;\n    if (topology && topology.s) {\n      host = topology.s.options?.host ?? topology.s.host;\n      port = (topology.s.options?.port ?? topology.s.port)?.toString();\n      if (host == null || port == null) {\n        const address = topology.description?.address;\n        if (address) {\n          const addressSegments = address.split(':');\n          host = addressSegments[0];\n          port = addressSegments[1];\n        }\n      }\n    }\n\n    // The namespace is a combination of the database name and the name of the\n    // collection or index, like so: [database-name].[collection-or-index-name].\n    // It could be a string or an instance of MongoDBNamespace, as such we\n    // always coerce to a string to extract db and collection.\n    const [dbName, dbCollection] = ns.toString().split('.');\n    // capture parameters within the query as well if enhancedDatabaseReporting is enabled.\n    const commandObj = command?.query ?? command?.q ?? command;\n\n    this._addAllSpanAttributes(\n      span,\n      dbName,\n      dbCollection,\n      host,\n      port,\n      commandObj,\n      operation\n    );\n  }\n\n  private _addAllSpanAttributes(\n    span: Span,\n    dbName?: string,\n    dbCollection?: string,\n    host?: undefined | string,\n    port?: undefined | string,\n    commandObj?: any,\n    operation?: string | undefined\n  ) {\n    // add database related attributes\n    span.setAttributes({\n      [SEMATTRS_DB_SYSTEM]: DBSYSTEMVALUES_MONGODB,\n      [SEMATTRS_DB_NAME]: dbName,\n      [SEMATTRS_DB_MONGODB_COLLECTION]: dbCollection,\n      [SEMATTRS_DB_OPERATION]: operation,\n      [SEMATTRS_DB_CONNECTION_STRING]: `mongodb://${host}:${port}/${dbName}`,\n    });\n\n    if (host && port) {\n      span.setAttribute(SEMATTRS_NET_PEER_NAME, host);\n      const portNumber = parseInt(port, 10);\n      if (!isNaN(portNumber)) {\n        span.setAttribute(SEMATTRS_NET_PEER_PORT, portNumber);\n      }\n    }\n    if (!commandObj) return;\n\n    const { dbStatementSerializer: configDbStatementSerializer } =\n      this.getConfig();\n    const dbStatementSerializer =\n      typeof configDbStatementSerializer === 'function'\n        ? configDbStatementSerializer\n        : this._defaultDbStatementSerializer.bind(this);\n\n    safeExecuteInTheMiddle(\n      () => {\n        const query = dbStatementSerializer(commandObj);\n        span.setAttribute(SEMATTRS_DB_STATEMENT, query);\n      },\n      err => {\n        if (err) {\n          this._diag.error('Error running dbStatementSerializer hook', err);\n        }\n      },\n      true\n    );\n  }\n\n  private _defaultDbStatementSerializer(commandObj: Record<string, unknown>) {\n    const { enhancedDatabaseReporting } = this.getConfig();\n    const resultObj = enhancedDatabaseReporting\n      ? commandObj\n      : this._scrubStatement(commandObj);\n    return JSON.stringify(resultObj);\n  }\n\n  private _scrubStatement(value: unknown): unknown {\n    if (Array.isArray(value)) {\n      return value.map(element => this._scrubStatement(element));\n    }\n\n    if (typeof value === 'object' && value !== null) {\n      return Object.fromEntries(\n        Object.entries(value).map(([key, element]) => [\n          key,\n          this._scrubStatement(element),\n        ])\n      );\n    }\n\n    // A value like string or number, possible contains PII, scrub it\n    return '?';\n  }\n\n  /**\n   * Triggers the response hook in case it is defined.\n   * @param span The span to add the results to.\n   * @param result The command result\n   */\n  private _handleExecutionResult(span: Span, result: CommandResult) {\n    const { responseHook } = this.getConfig();\n    if (typeof responseHook === 'function') {\n      safeExecuteInTheMiddle(\n        () => {\n          responseHook(span, { data: result });\n        },\n        err => {\n          if (err) {\n            this._diag.error('Error running response hook', err);\n          }\n        },\n        true\n      );\n    }\n  }\n\n  /**\n   * Ends a created span.\n   * @param span The created span to end.\n   * @param resultHandler A callback function.\n   * @param connectionId: The connection ID of the Command response.\n   */\n  private _patchEnd(\n    span: Span | undefined,\n    resultHandler: Function,\n    connectionId?: number,\n    commandType?: string\n  ): Function {\n    // mongodb is using \"tick\" when calling a callback, this way the context\n    // in final callback (resultHandler) is lost\n    const activeContext = context.active();\n    const instrumentation = this;\n    return function patchedEnd(this: {}, ...args: unknown[]) {\n      const error = args[0];\n      if (span) {\n        if (error instanceof Error) {\n          span?.setStatus({\n            code: SpanStatusCode.ERROR,\n            message: error.message,\n          });\n        } else {\n          const result = args[1] as CommandResult;\n          instrumentation._handleExecutionResult(span, result);\n        }\n        span.end();\n      }\n\n      return context.with(activeContext, () => {\n        if (commandType === 'endSessions') {\n          instrumentation._connectionsUsage.add(-1, {\n            state: 'idle',\n            'pool.name': instrumentation._poolName,\n          });\n        }\n        return resultHandler.apply(this, args);\n      });\n    };\n  }\n  private setPoolName(options: any) {\n    const host = options.hostAddress?.host;\n    const port = options.hostAddress?.port;\n    const database = options.dbName;\n    const poolName = `mongodb://${host}:${port}/${database}`;\n    this._poolName = poolName;\n  }\n\n  private _checkSkipInstrumentation(currentSpan: Span | undefined) {\n    const requireParentSpan = this.getConfig().requireParentSpan;\n    const hasNoParentSpan = currentSpan === undefined;\n    return requireParentSpan === true && hasNoParentSpan;\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { InstrumentationConfig } from '@opentelemetry/instrumentation';\nimport { Span } from '@opentelemetry/api';\n\nexport interface MongoDBInstrumentationExecutionResponseHook {\n  (span: Span, responseInfo: MongoResponseHookInformation): void;\n}\n\n/**\n * Function that can be used to serialize db.statement tag\n * @param cmd - MongoDB command object\n *\n * @returns serialized string that will be used as the db.statement attribute.\n */\nexport type DbStatementSerializer = (cmd: Record<string, unknown>) => string;\n\nexport interface MongoDBInstrumentationConfig extends InstrumentationConfig {\n  /**\n   * If true, additional information about query parameters and\n   * results will be attached (as `attributes`) to spans representing\n   * database operations.\n   */\n  enhancedDatabaseReporting?: boolean;\n\n  /**\n   * Hook that allows adding custom span attributes based on the data\n   * returned from MongoDB actions.\n   *\n   * @default undefined\n   */\n  responseHook?: MongoDBInstrumentationExecutionResponseHook;\n\n  /**\n   * Custom serializer function for the db.statement tag\n   */\n  dbStatementSerializer?: DbStatementSerializer;\n\n  /**\n   * Require parent to create mongodb span, default when unset is true\n   */\n  requireParentSpan?: boolean;\n}\n\nexport interface MongoResponseHookInformation {\n  data: CommandResult;\n}\n\n// https://github.com/mongodb/node-mongodb-native/blob/3.6/lib/core/connection/command_result.js\nexport type CommandResult = {\n  result?: unknown;\n  connection?: unknown;\n  message?: unknown;\n};\n\nexport enum MongodbCommandType {\n  CREATE_INDEXES = 'createIndexes',\n  FIND_AND_MODIFY = 'findAndModify',\n  IS_MASTER = 'isMaster',\n  COUNT = 'count',\n  UNKNOWN = 'unknown',\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport * from './instrumentation';\nexport * from './types';\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Attributes, SpanStatusCode, diag, Span } from '@opentelemetry/api';\nimport type { Collection } from 'mongoose';\nimport { MongooseResponseCustomAttributesFunction } from './types';\nimport { safeExecuteInTheMiddle } from '@opentelemetry/instrumentation';\nimport {\n  SEMATTRS_DB_MONGODB_COLLECTION,\n  SEMATTRS_DB_NAME,\n  SEMATTRS_DB_USER,\n  SEMATTRS_NET_PEER_NAME,\n  SEMATTRS_NET_PEER_PORT,\n} from '@opentelemetry/semantic-conventions';\n\nexport function getAttributesFromCollection(\n  collection: Collection\n): Attributes {\n  return {\n    [SEMATTRS_DB_MONGODB_COLLECTION]: collection.name,\n    [SEMATTRS_DB_NAME]: collection.conn.name,\n    [SEMATTRS_DB_USER]: collection.conn.user,\n    [SEMATTRS_NET_PEER_NAME]: collection.conn.host,\n    [SEMATTRS_NET_PEER_PORT]: collection.conn.port,\n  };\n}\n\nfunction setErrorStatus(span: Span, error: any = {}) {\n  span.recordException(error);\n\n  span.setStatus({\n    code: SpanStatusCode.ERROR,\n    message: `${error.message} ${\n      error.code ? `\\nMongoose Error Code: ${error.code}` : ''\n    }`,\n  });\n}\n\nfunction applyResponseHook(\n  span: Span,\n  response: any,\n  responseHook?: MongooseResponseCustomAttributesFunction,\n  moduleVersion: string | undefined = undefined\n) {\n  if (!responseHook) {\n    return;\n  }\n\n  safeExecuteInTheMiddle(\n    () => responseHook(span, { moduleVersion, response }),\n    e => {\n      if (e) {\n        diag.error('mongoose instrumentation: responseHook error', e);\n      }\n    },\n    true\n  );\n}\n\nexport function handlePromiseResponse(\n  execResponse: any,\n  span: Span,\n  responseHook?: MongooseResponseCustomAttributesFunction,\n  moduleVersion: string | undefined = undefined\n): any {\n  if (!(execResponse instanceof Promise)) {\n    applyResponseHook(span, execResponse, responseHook, moduleVersion);\n    span.end();\n    return execResponse;\n  }\n\n  return execResponse\n    .then(response => {\n      applyResponseHook(span, response, responseHook, moduleVersion);\n      return response;\n    })\n    .catch(err => {\n      setErrorStatus(span, err);\n      throw err;\n    })\n    .finally(() => span.end());\n}\n\nexport function handleCallbackResponse(\n  callback: Function,\n  exec: Function,\n  originalThis: any,\n  span: Span,\n  args: IArguments,\n  responseHook?: MongooseResponseCustomAttributesFunction,\n  moduleVersion: string | undefined = undefined\n) {\n  let callbackArgumentIndex = 0;\n  if (args.length === 2) {\n    callbackArgumentIndex = 1;\n  }\n\n  args[callbackArgumentIndex] = (err: Error, response: any): any => {\n    err\n      ? setErrorStatus(span, err)\n      : applyResponseHook(span, response, responseHook, moduleVersion);\n\n    span.end();\n    return callback!(err, response);\n  };\n\n  return exec.apply(originalThis, args);\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// this is autogenerated file, see scripts/version-update.js\nexport const PACKAGE_VERSION = '0.46.1';\nexport const PACKAGE_NAME = '@opentelemetry/instrumentation-mongoose';\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { context, Span, trace, Attributes, SpanKind } from '@opentelemetry/api';\nimport { suppressTracing } from '@opentelemetry/core';\nimport type * as mongoose from 'mongoose';\nimport { MongooseInstrumentationConfig, SerializerPayload } from './types';\nimport {\n  handleCallbackResponse,\n  handlePromiseResponse,\n  getAttributesFromCollection,\n} from './utils';\nimport {\n  InstrumentationBase,\n  InstrumentationModuleDefinition,\n  InstrumentationNodeModuleDefinition,\n} from '@opentelemetry/instrumentation';\n/** @knipignore */\nimport { PACKAGE_NAME, PACKAGE_VERSION } from './version';\nimport {\n  SEMATTRS_DB_OPERATION,\n  SEMATTRS_DB_STATEMENT,\n  SEMATTRS_DB_SYSTEM,\n} from '@opentelemetry/semantic-conventions';\n\nconst contextCaptureFunctionsCommon = [\n  'deleteOne',\n  'deleteMany',\n  'find',\n  'findOne',\n  'estimatedDocumentCount',\n  'countDocuments',\n  'distinct',\n  'where',\n  '$where',\n  'findOneAndUpdate',\n  'findOneAndDelete',\n  'findOneAndReplace',\n];\n\nconst contextCaptureFunctions6 = [\n  'remove',\n  'count',\n  'findOneAndRemove',\n  ...contextCaptureFunctionsCommon,\n];\nconst contextCaptureFunctions7 = [\n  'count',\n  'findOneAndRemove',\n  ...contextCaptureFunctionsCommon,\n];\nconst contextCaptureFunctions8 = [...contextCaptureFunctionsCommon];\n\nfunction getContextCaptureFunctions(\n  moduleVersion: string | undefined\n): string[] {\n  /* istanbul ignore next */\n  if (!moduleVersion) {\n    return contextCaptureFunctionsCommon;\n  } else if (moduleVersion.startsWith('6.') || moduleVersion.startsWith('5.')) {\n    return contextCaptureFunctions6;\n  } else if (moduleVersion.startsWith('7.')) {\n    return contextCaptureFunctions7;\n  } else {\n    return contextCaptureFunctions8;\n  }\n}\n\nfunction instrumentRemove(moduleVersion: string | undefined): boolean {\n  return (\n    (moduleVersion &&\n      (moduleVersion.startsWith('5.') || moduleVersion.startsWith('6.'))) ||\n    false\n  );\n}\n\n// when mongoose functions are called, we store the original call context\n// and then set it as the parent for the spans created by Query/Aggregate exec()\n// calls. this bypass the unlinked spans issue on thenables await operations.\nexport const _STORED_PARENT_SPAN: unique symbol = Symbol('stored-parent-span');\n\nexport class MongooseInstrumentation extends InstrumentationBase<MongooseInstrumentationConfig> {\n  constructor(config: MongooseInstrumentationConfig = {}) {\n    super(PACKAGE_NAME, PACKAGE_VERSION, config);\n  }\n\n  protected init(): InstrumentationModuleDefinition {\n    const module = new InstrumentationNodeModuleDefinition(\n      'mongoose',\n      ['>=5.9.7 <9'],\n      this.patch.bind(this),\n      this.unpatch.bind(this)\n    );\n    return module;\n  }\n\n  private patch(\n    moduleExports: typeof mongoose,\n    moduleVersion: string | undefined\n  ) {\n    this._wrap(\n      moduleExports.Model.prototype,\n      'save',\n      this.patchOnModelMethods('save', moduleVersion)\n    );\n    // mongoose applies this code on module require:\n    // Model.prototype.$save = Model.prototype.save;\n    // which captures the save function before it is patched.\n    // so we need to apply the same logic after instrumenting the save function.\n    moduleExports.Model.prototype.$save = moduleExports.Model.prototype.save;\n\n    if (instrumentRemove(moduleVersion)) {\n      this._wrap(\n        moduleExports.Model.prototype,\n        'remove',\n        this.patchOnModelMethods('remove', moduleVersion)\n      );\n    }\n\n    this._wrap(\n      moduleExports.Query.prototype,\n      'exec',\n      this.patchQueryExec(moduleVersion)\n    );\n    this._wrap(\n      moduleExports.Aggregate.prototype,\n      'exec',\n      this.patchAggregateExec(moduleVersion)\n    );\n\n    const contextCaptureFunctions = getContextCaptureFunctions(moduleVersion);\n\n    contextCaptureFunctions.forEach((funcName: string) => {\n      this._wrap(\n        moduleExports.Query.prototype,\n        funcName as any,\n        this.patchAndCaptureSpanContext(funcName)\n      );\n    });\n    this._wrap(moduleExports.Model, 'aggregate', this.patchModelAggregate());\n\n    return moduleExports;\n  }\n\n  private unpatch(\n    moduleExports: typeof mongoose,\n    moduleVersion: string | undefined\n  ): void {\n    const contextCaptureFunctions = getContextCaptureFunctions(moduleVersion);\n\n    this._unwrap(moduleExports.Model.prototype, 'save');\n    // revert the patch for $save which we applied by aliasing it to patched `save`\n    moduleExports.Model.prototype.$save = moduleExports.Model.prototype.save;\n\n    if (instrumentRemove(moduleVersion)) {\n      this._unwrap(moduleExports.Model.prototype, 'remove');\n    }\n\n    this._unwrap(moduleExports.Query.prototype, 'exec');\n    this._unwrap(moduleExports.Aggregate.prototype, 'exec');\n\n    contextCaptureFunctions.forEach((funcName: string) => {\n      this._unwrap(moduleExports.Query.prototype, funcName as any);\n    });\n    this._unwrap(moduleExports.Model, 'aggregate');\n  }\n\n  private patchAggregateExec(moduleVersion: string | undefined) {\n    const self = this;\n    return (originalAggregate: Function) => {\n      return function exec(this: any, callback?: Function) {\n        if (\n          self.getConfig().requireParentSpan &&\n          trace.getSpan(context.active()) === undefined\n        ) {\n          return originalAggregate.apply(this, arguments);\n        }\n\n        const parentSpan = this[_STORED_PARENT_SPAN];\n        const attributes: Attributes = {};\n        const { dbStatementSerializer } = self.getConfig();\n        if (dbStatementSerializer) {\n          attributes[SEMATTRS_DB_STATEMENT] = dbStatementSerializer(\n            'aggregate',\n            {\n              options: this.options,\n              aggregatePipeline: this._pipeline,\n            }\n          );\n        }\n\n        const span = self._startSpan(\n          this._model.collection,\n          this._model?.modelName,\n          'aggregate',\n          attributes,\n          parentSpan\n        );\n\n        return self._handleResponse(\n          span,\n          originalAggregate,\n          this,\n          arguments,\n          callback,\n          moduleVersion\n        );\n      };\n    };\n  }\n\n  private patchQueryExec(moduleVersion: string | undefined) {\n    const self = this;\n    return (originalExec: Function) => {\n      return function exec(this: any, callback?: Function) {\n        if (\n          self.getConfig().requireParentSpan &&\n          trace.getSpan(context.active()) === undefined\n        ) {\n          return originalExec.apply(this, arguments);\n        }\n\n        const parentSpan = this[_STORED_PARENT_SPAN];\n        const attributes: Attributes = {};\n        const { dbStatementSerializer } = self.getConfig();\n        if (dbStatementSerializer) {\n          attributes[SEMATTRS_DB_STATEMENT] = dbStatementSerializer(this.op, {\n            condition: this._conditions,\n            updates: this._update,\n            options: this.options,\n            fields: this._fields,\n          });\n        }\n        const span = self._startSpan(\n          this.mongooseCollection,\n          this.model.modelName,\n          this.op,\n          attributes,\n          parentSpan\n        );\n\n        return self._handleResponse(\n          span,\n          originalExec,\n          this,\n          arguments,\n          callback,\n          moduleVersion\n        );\n      };\n    };\n  }\n\n  private patchOnModelMethods(op: string, moduleVersion: string | undefined) {\n    const self = this;\n    return (originalOnModelFunction: Function) => {\n      return function method(this: any, options?: any, callback?: Function) {\n        if (\n          self.getConfig().requireParentSpan &&\n          trace.getSpan(context.active()) === undefined\n        ) {\n          return originalOnModelFunction.apply(this, arguments);\n        }\n\n        const serializePayload: SerializerPayload = { document: this };\n        if (options && !(options instanceof Function)) {\n          serializePayload.options = options;\n        }\n        const attributes: Attributes = {};\n        const { dbStatementSerializer } = self.getConfig();\n        if (dbStatementSerializer) {\n          attributes[SEMATTRS_DB_STATEMENT] = dbStatementSerializer(\n            op,\n            serializePayload\n          );\n        }\n        const span = self._startSpan(\n          this.constructor.collection,\n          this.constructor.modelName,\n          op,\n          attributes\n        );\n\n        if (options instanceof Function) {\n          callback = options;\n          options = undefined;\n        }\n\n        return self._handleResponse(\n          span,\n          originalOnModelFunction,\n          this,\n          arguments,\n          callback,\n          moduleVersion\n        );\n      };\n    };\n  }\n\n  // we want to capture the otel span on the object which is calling exec.\n  // in the special case of aggregate, we need have no function to path\n  // on the Aggregate object to capture the context on, so we patch\n  // the aggregate of Model, and set the context on the Aggregate object\n  private patchModelAggregate() {\n    const self = this;\n    return (original: Function) => {\n      return function captureSpanContext(this: any) {\n        const currentSpan = trace.getSpan(context.active());\n        const aggregate = self._callOriginalFunction(() =>\n          original.apply(this, arguments)\n        );\n        if (aggregate) aggregate[_STORED_PARENT_SPAN] = currentSpan;\n        return aggregate;\n      };\n    };\n  }\n\n  private patchAndCaptureSpanContext(funcName: string) {\n    const self = this;\n    return (original: Function) => {\n      return function captureSpanContext(this: any) {\n        this[_STORED_PARENT_SPAN] = trace.getSpan(context.active());\n        return self._callOriginalFunction(() =>\n          original.apply(this, arguments)\n        );\n      };\n    };\n  }\n\n  private _startSpan(\n    collection: mongoose.Collection,\n    modelName: string,\n    operation: string,\n    attributes: Attributes,\n    parentSpan?: Span\n  ): Span {\n    return this.tracer.startSpan(\n      `mongoose.${modelName}.${operation}`,\n      {\n        kind: SpanKind.CLIENT,\n        attributes: {\n          ...attributes,\n          ...getAttributesFromCollection(collection),\n          [SEMATTRS_DB_OPERATION]: operation,\n          [SEMATTRS_DB_SYSTEM]: 'mongoose',\n        },\n      },\n      parentSpan ? trace.setSpan(context.active(), parentSpan) : undefined\n    );\n  }\n\n  private _handleResponse(\n    span: Span,\n    exec: Function,\n    originalThis: any,\n    args: IArguments,\n    callback?: Function,\n    moduleVersion: string | undefined = undefined\n  ) {\n    const self = this;\n    if (callback instanceof Function) {\n      return self._callOriginalFunction(() =>\n        handleCallbackResponse(\n          callback,\n          exec,\n          originalThis,\n          span,\n          args,\n          self.getConfig().responseHook,\n          moduleVersion\n        )\n      );\n    } else {\n      const response = self._callOriginalFunction(() =>\n        exec.apply(originalThis, args)\n      );\n      return handlePromiseResponse(\n        response,\n        span,\n        self.getConfig().responseHook,\n        moduleVersion\n      );\n    }\n  }\n\n  private _callOriginalFunction<T>(originalFunction: (...args: any[]) => T): T {\n    if (this.getConfig().suppressInternalInstrumentation) {\n      return context.with(suppressTracing(context.active()), originalFunction);\n    } else {\n      return originalFunction();\n    }\n  }\n}\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=types.js.map", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport * from './mongoose';\nexport * from './types';\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Mysql specific attributes not covered by semantic conventions\nexport enum AttributeNames {\n  MYSQL_VALUES = 'db.mysql.values',\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Attributes } from '@opentelemetry/api';\nimport {\n  SEMATTRS_DB_CONNECTION_STRING,\n  SEMATTRS_DB_NAME,\n  SEMATTRS_DB_USER,\n  SEMATTRS_NET_PEER_NAME,\n  SEMATTRS_NET_PEER_PORT,\n} from '@opentelemetry/semantic-conventions';\nimport type {\n  ConnectionConfig,\n  PoolActualConfig,\n  Query,\n  QueryOptions,\n} from 'mysql';\nimport type * as mysqlTypes from 'mysql';\n\n/**\n * Get an Attributes map from a mysql connection config object\n *\n * @param config ConnectionConfig\n */\nexport function getConnectionAttributes(\n  config: ConnectionConfig | PoolActualConfig\n): Attributes {\n  const { host, port, database, user } = getConfig(config);\n  const portNumber = parseInt(port, 10);\n  if (!isNaN(portNumber)) {\n    return {\n      [SEMATTRS_NET_PEER_NAME]: host,\n      [SEMATTRS_NET_PEER_PORT]: portNumber,\n      [SEMATTRS_DB_CONNECTION_STRING]: getJDBCString(host, port, database),\n      [SEMATTRS_DB_NAME]: database,\n      [SEMATTRS_DB_USER]: user,\n    };\n  }\n  return {\n    [SEMATTRS_NET_PEER_NAME]: host,\n    [SEMATTRS_DB_CONNECTION_STRING]: getJDBCString(host, port, database),\n    [SEMATTRS_DB_NAME]: database,\n    [SEMATTRS_DB_USER]: user,\n  };\n}\n\nfunction getConfig(config: any) {\n  const { host, port, database, user } =\n    (config && config.connectionConfig) || config || {};\n  return { host, port, database, user };\n}\n\nfunction getJDBCString(\n  host: string | undefined,\n  port: number | undefined,\n  database: string | undefined\n) {\n  let jdbcString = `jdbc:mysql://${host || 'localhost'}`;\n\n  if (typeof port === 'number') {\n    jdbcString += `:${port}`;\n  }\n\n  if (typeof database === 'string') {\n    jdbcString += `/${database}`;\n  }\n\n  return jdbcString;\n}\n\n/**\n * @returns the database statement being executed.\n */\nexport function getDbStatement(query: string | Query | QueryOptions): string {\n  if (typeof query === 'string') {\n    return query;\n  } else {\n    return query.sql;\n  }\n}\n\nexport function getDbValues(\n  query: string | Query | QueryOptions,\n  values?: any[]\n): string {\n  if (typeof query === 'string') {\n    return arrayStringifyHelper(values);\n  } else {\n    // According to https://github.com/mysqljs/mysql#performing-queries\n    // The values argument will override the values in the option object.\n    return arrayStringifyHelper(values || query.values);\n  }\n}\n\n/**\n * The span name SHOULD be set to a low cardinality value\n * representing the statement executed on the database.\n *\n * @returns SQL statement without variable arguments or SQL verb\n */\nexport function getSpanName(query: string | Query | QueryOptions): string {\n  const rawQuery = typeof query === 'object' ? query.sql : query;\n  // Extract the SQL verb\n  const firstSpace = rawQuery?.indexOf(' ');\n  if (typeof firstSpace === 'number' && firstSpace !== -1) {\n    return rawQuery?.substring(0, firstSpace);\n  }\n  return rawQuery;\n}\n\nexport function arrayStringifyHelper(arr: Array<unknown> | undefined): string {\n  if (arr) return `[${arr.toString()}]`;\n  return '';\n}\n\nexport function getPoolName(pool: mysqlTypes.Pool): string {\n  const c = pool.config.connectionConfig;\n  let poolName = '';\n  poolName += c.host ? `host: '${c.host}', ` : '';\n  poolName += c.port ? `port: ${c.port}, ` : '';\n  poolName += c.database ? `database: '${c.database}', ` : '';\n  poolName += c.user ? `user: '${c.user}'` : '';\n  if (!c.user) {\n    poolName = poolName.substring(0, poolName.length - 2); //omit last comma\n  }\n  return poolName.trim();\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// this is autogenerated file, see scripts/version-update.js\nexport const PACKAGE_VERSION = '0.45.1';\nexport const PACKAGE_NAME = '@opentelemetry/instrumentation-mysql';\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  context,\n  Context,\n  trace,\n  Span,\n  SpanKind,\n  SpanStatusCode,\n} from '@opentelemetry/api';\nimport {\n  InstrumentationBase,\n  InstrumentationNodeModuleDefinition,\n  isWrapped,\n} from '@opentelemetry/instrumentation';\nimport {\n  DBSYSTEMVALUES_MYSQL,\n  SEMATTRS_DB_STATEMENT,\n  SEMATTRS_DB_SYSTEM,\n} from '@opentelemetry/semantic-conventions';\nimport type * as mysqlTypes from 'mysql';\nimport { AttributeNames } from './AttributeNames';\nimport { MySQLInstrumentationConfig } from './types';\nimport {\n  getConnectionAttributes,\n  getDbStatement,\n  getDbValues,\n  getSpanName,\n  getPoolName,\n} from './utils';\n/** @knipignore */\nimport { PACKAGE_NAME, PACKAGE_VERSION } from './version';\nimport { UpDownCounter, MeterProvider } from '@opentelemetry/api';\n\ntype getConnectionCallbackType = (\n  err: mysqlTypes.MysqlError,\n  connection: mysqlTypes.PoolConnection\n) => void;\n\nexport class MySQLInstrumentation extends InstrumentationBase<MySQLInstrumentationConfig> {\n  static readonly COMMON_ATTRIBUTES = {\n    [SEMATTRS_DB_SYSTEM]: DBSYSTEMVALUES_MYSQL,\n  };\n  private _connectionsUsage!: UpDownCounter;\n\n  constructor(config: MySQLInstrumentationConfig = {}) {\n    super(PACKAGE_NAME, PACKAGE_VERSION, config);\n    this._setMetricInstruments();\n  }\n\n  override setMeterProvider(meterProvider: MeterProvider) {\n    super.setMeterProvider(meterProvider);\n    this._setMetricInstruments();\n  }\n\n  private _setMetricInstruments() {\n    this._connectionsUsage = this.meter.createUpDownCounter(\n      'db.client.connections.usage', //TODO:: use semantic convention\n      {\n        description:\n          'The number of connections that are currently in state described by the state attribute.',\n        unit: '{connection}',\n      }\n    );\n  }\n\n  protected init() {\n    return [\n      new InstrumentationNodeModuleDefinition(\n        'mysql',\n        ['>=2.0.0 <3'],\n        (moduleExports: typeof mysqlTypes) => {\n          if (isWrapped(moduleExports.createConnection)) {\n            this._unwrap(moduleExports, 'createConnection');\n          }\n          this._wrap(\n            moduleExports,\n            'createConnection',\n            this._patchCreateConnection() as any\n          );\n\n          if (isWrapped(moduleExports.createPool)) {\n            this._unwrap(moduleExports, 'createPool');\n          }\n          this._wrap(\n            moduleExports,\n            'createPool',\n            this._patchCreatePool() as any\n          );\n\n          if (isWrapped(moduleExports.createPoolCluster)) {\n            this._unwrap(moduleExports, 'createPoolCluster');\n          }\n          this._wrap(\n            moduleExports,\n            'createPoolCluster',\n            this._patchCreatePoolCluster() as any\n          );\n\n          return moduleExports;\n        },\n        (moduleExports: typeof mysqlTypes) => {\n          if (moduleExports === undefined) return;\n          this._unwrap(moduleExports, 'createConnection');\n          this._unwrap(moduleExports, 'createPool');\n          this._unwrap(moduleExports, 'createPoolCluster');\n        }\n      ),\n    ];\n  }\n\n  // global export function\n  private _patchCreateConnection() {\n    return (originalCreateConnection: Function) => {\n      const thisPlugin = this;\n\n      return function createConnection(\n        _connectionUri: string | mysqlTypes.ConnectionConfig\n      ) {\n        const originalResult = originalCreateConnection(...arguments);\n\n        // This is unwrapped on next call after unpatch\n        thisPlugin._wrap(\n          originalResult,\n          'query',\n          thisPlugin._patchQuery(originalResult) as any\n        );\n\n        return originalResult;\n      };\n    };\n  }\n\n  // global export function\n  private _patchCreatePool() {\n    return (originalCreatePool: Function) => {\n      const thisPlugin = this;\n      return function createPool(_config: string | mysqlTypes.PoolConfig) {\n        const pool = originalCreatePool(...arguments);\n\n        thisPlugin._wrap(pool, 'query', thisPlugin._patchQuery(pool));\n        thisPlugin._wrap(\n          pool,\n          'getConnection',\n          thisPlugin._patchGetConnection(pool)\n        );\n        thisPlugin._wrap(pool, 'end', thisPlugin._patchPoolEnd(pool));\n        thisPlugin._setPoolcallbacks(pool, thisPlugin, '');\n\n        return pool;\n      };\n    };\n  }\n  private _patchPoolEnd(pool: any) {\n    return (originalPoolEnd: Function) => {\n      const thisPlugin = this;\n      return function end(callback?: unknown) {\n        const nAll = (pool as any)._allConnections.length;\n        const nFree = (pool as any)._freeConnections.length;\n        const nUsed = nAll - nFree;\n        const poolName = getPoolName(pool);\n        thisPlugin._connectionsUsage.add(-nUsed, {\n          state: 'used',\n          name: poolName,\n        });\n        thisPlugin._connectionsUsage.add(-nFree, {\n          state: 'idle',\n          name: poolName,\n        });\n        originalPoolEnd.apply(pool, arguments);\n      };\n    };\n  }\n\n  // global export function\n  private _patchCreatePoolCluster() {\n    return (originalCreatePoolCluster: Function) => {\n      const thisPlugin = this;\n      return function createPool(_config: string | mysqlTypes.PoolConfig) {\n        const cluster = originalCreatePoolCluster(...arguments);\n\n        // This is unwrapped on next call after unpatch\n        thisPlugin._wrap(\n          cluster,\n          'getConnection',\n          thisPlugin._patchGetConnection(cluster)\n        );\n        thisPlugin._wrap(cluster, 'add', thisPlugin._patchAdd(cluster));\n\n        return cluster;\n      };\n    };\n  }\n  private _patchAdd(cluster: mysqlTypes.PoolCluster) {\n    return (originalAdd: Function) => {\n      const thisPlugin = this;\n      return function add(id: string, config: unknown) {\n        // Unwrap if unpatch has been called\n        if (!thisPlugin['_enabled']) {\n          thisPlugin._unwrap(cluster, 'add');\n          return originalAdd.apply(cluster, arguments);\n        }\n        originalAdd.apply(cluster, arguments);\n        const nodes = cluster['_nodes' as keyof mysqlTypes.PoolCluster] as any;\n        if (nodes) {\n          const nodeId =\n            typeof id === 'object'\n              ? 'CLUSTER::' + (cluster as any)._lastId\n              : String(id);\n\n          const pool = nodes[nodeId].pool;\n          thisPlugin._setPoolcallbacks(pool, thisPlugin, id);\n        }\n      };\n    };\n  }\n\n  // method on cluster or pool\n  private _patchGetConnection(pool: mysqlTypes.Pool | mysqlTypes.PoolCluster) {\n    return (originalGetConnection: Function) => {\n      const thisPlugin = this;\n\n      return function getConnection(\n        arg1?: unknown,\n        arg2?: unknown,\n        arg3?: unknown\n      ) {\n        // Unwrap if unpatch has been called\n        if (!thisPlugin['_enabled']) {\n          thisPlugin._unwrap(pool, 'getConnection');\n          return originalGetConnection.apply(pool, arguments);\n        }\n\n        if (arguments.length === 1 && typeof arg1 === 'function') {\n          const patchFn = thisPlugin._getConnectionCallbackPatchFn(\n            arg1 as getConnectionCallbackType\n          );\n          return originalGetConnection.call(pool, patchFn);\n        }\n        if (arguments.length === 2 && typeof arg2 === 'function') {\n          const patchFn = thisPlugin._getConnectionCallbackPatchFn(\n            arg2 as getConnectionCallbackType\n          );\n          return originalGetConnection.call(pool, arg1, patchFn);\n        }\n        if (arguments.length === 3 && typeof arg3 === 'function') {\n          const patchFn = thisPlugin._getConnectionCallbackPatchFn(\n            arg3 as getConnectionCallbackType\n          );\n          return originalGetConnection.call(pool, arg1, arg2, patchFn);\n        }\n\n        return originalGetConnection.apply(pool, arguments);\n      };\n    };\n  }\n\n  private _getConnectionCallbackPatchFn(cb: getConnectionCallbackType) {\n    const thisPlugin = this;\n    const activeContext = context.active();\n    return function (\n      this: any,\n      err: mysqlTypes.MysqlError,\n      connection: mysqlTypes.PoolConnection\n    ) {\n      if (connection) {\n        // this is the callback passed into a query\n        // no need to unwrap\n        if (!isWrapped(connection.query)) {\n          thisPlugin._wrap(\n            connection,\n            'query',\n            thisPlugin._patchQuery(connection)\n          );\n        }\n      }\n      if (typeof cb === 'function') {\n        context.with(activeContext, cb, this, err, connection);\n      }\n    };\n  }\n\n  private _patchQuery(connection: mysqlTypes.Connection | mysqlTypes.Pool) {\n    return (originalQuery: Function): mysqlTypes.QueryFunction => {\n      const thisPlugin = this;\n\n      return function query(\n        query: string | mysqlTypes.Query | mysqlTypes.QueryOptions,\n        _valuesOrCallback?: unknown[] | mysqlTypes.queryCallback,\n        _callback?: mysqlTypes.queryCallback\n      ) {\n        if (!thisPlugin['_enabled']) {\n          thisPlugin._unwrap(connection, 'query');\n          return originalQuery.apply(connection, arguments);\n        }\n\n        const span = thisPlugin.tracer.startSpan(getSpanName(query), {\n          kind: SpanKind.CLIENT,\n          attributes: {\n            ...MySQLInstrumentation.COMMON_ATTRIBUTES,\n            ...getConnectionAttributes(connection.config),\n          },\n        });\n\n        span.setAttribute(SEMATTRS_DB_STATEMENT, getDbStatement(query));\n\n        if (thisPlugin.getConfig().enhancedDatabaseReporting) {\n          let values;\n\n          if (Array.isArray(_valuesOrCallback)) {\n            values = _valuesOrCallback;\n          } else if (arguments[2]) {\n            values = [_valuesOrCallback];\n          }\n\n          span.setAttribute(\n            AttributeNames.MYSQL_VALUES,\n            getDbValues(query, values)\n          );\n        }\n\n        const cbIndex = Array.from(arguments).findIndex(\n          arg => typeof arg === 'function'\n        );\n\n        const parentContext = context.active();\n\n        if (cbIndex === -1) {\n          const streamableQuery: mysqlTypes.Query = context.with(\n            trace.setSpan(context.active(), span),\n            () => {\n              return originalQuery.apply(connection, arguments);\n            }\n          );\n          context.bind(parentContext, streamableQuery);\n\n          return streamableQuery\n            .on('error', err =>\n              span.setStatus({\n                code: SpanStatusCode.ERROR,\n                message: err.message,\n              })\n            )\n            .on('end', () => {\n              span.end();\n            });\n        } else {\n          thisPlugin._wrap(\n            arguments,\n            cbIndex,\n            thisPlugin._patchCallbackQuery(span, parentContext)\n          );\n\n          return context.with(trace.setSpan(context.active(), span), () => {\n            return originalQuery.apply(connection, arguments);\n          });\n        }\n      };\n    };\n  }\n\n  private _patchCallbackQuery(span: Span, parentContext: Context) {\n    return (originalCallback: Function) => {\n      return function (\n        err: mysqlTypes.MysqlError | null,\n        results?: any,\n        fields?: mysqlTypes.FieldInfo[]\n      ) {\n        if (err) {\n          span.setStatus({\n            code: SpanStatusCode.ERROR,\n            message: err.message,\n          });\n        }\n        span.end();\n        return context.with(parentContext, () =>\n          originalCallback(...arguments)\n        );\n      };\n    };\n  }\n  private _setPoolcallbacks(\n    pool: mysqlTypes.Pool,\n    thisPlugin: MySQLInstrumentation,\n    id: string\n  ) {\n    //TODO:: use semantic convention\n    const poolName = id || getPoolName(pool);\n\n    pool.on('connection', connection => {\n      thisPlugin._connectionsUsage.add(1, {\n        state: 'idle',\n        name: poolName,\n      });\n    });\n\n    pool.on('acquire', connection => {\n      thisPlugin._connectionsUsage.add(-1, {\n        state: 'idle',\n        name: poolName,\n      });\n      thisPlugin._connectionsUsage.add(1, {\n        state: 'used',\n        name: poolName,\n      });\n    });\n\n    pool.on('release', connection => {\n      thisPlugin._connectionsUsage.add(-1, {\n        state: 'used',\n        name: poolName,\n      });\n      thisPlugin._connectionsUsage.add(1, {\n        state: 'idle',\n        name: poolName,\n      });\n    });\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport * from './instrumentation';\nexport * from './types';\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  trace,\n  Span,\n  ROOT_CONTEXT,\n  defaultTextMapSetter,\n} from '@opentelemetry/api';\nimport { W3CTraceContextPropagator } from '@opentelemetry/core';\n\n// NOTE: This function currently is returning false-positives\n// in cases where comment characters appear in string literals\n// (\"SELECT '-- not a comment';\" would return true, although has no comment)\nfunction hasValidSqlComment(query: string): boolean {\n  const indexOpeningDashDashComment = query.indexOf('--');\n  if (indexOpeningDashDashComment >= 0) {\n    return true;\n  }\n\n  const indexOpeningSlashComment = query.indexOf('/*');\n  if (indexOpeningSlashComment < 0) {\n    return false;\n  }\n\n  const indexClosingSlashComment = query.indexOf('*/');\n  return indexOpeningDashDashComment < indexClosingSlashComment;\n}\n\n// sqlcommenter specification (https://google.github.io/sqlcommenter/spec/#value-serialization)\n// expects us to URL encode based on the RFC 3986 spec (https://en.wikipedia.org/wiki/Percent-encoding),\n// but encodeURIComponent does not handle some characters correctly (! ' ( ) *),\n// which means we need special handling for this\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent\nfunction fixedEncodeURIComponent(str: string) {\n  return encodeURIComponent(str).replace(\n    /[!'()*]/g,\n    c => `%${c.charCodeAt(0).toString(16).toUpperCase()}`\n  );\n}\n\nexport function addSqlCommenterComment(span: Span, query: string): string {\n  if (typeof query !== 'string' || query.length === 0) {\n    return query;\n  }\n\n  // As per sqlcommenter spec we shall not add a comment if there already is a comment\n  // in the query\n  if (hasValidSqlComment(query)) {\n    return query;\n  }\n\n  const propagator = new W3CTraceContextPropagator();\n  const headers: { [key: string]: string } = {};\n  propagator.inject(\n    trace.setSpan(ROOT_CONTEXT, span),\n    headers,\n    defaultTextMapSetter\n  );\n\n  // sqlcommenter spec requires keys in the comment to be sorted lexicographically\n  const sortedKeys = Object.keys(headers).sort();\n\n  if (sortedKeys.length === 0) {\n    return query;\n  }\n\n  const commentString = sortedKeys\n    .map(key => {\n      const encodedValue = fixedEncodeURIComponent(headers[key]);\n      return `${key}='${encodedValue}'`;\n    })\n    .join(',');\n\n  return `${query} /*${commentString}*/`;\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Attributes } from '@opentelemetry/api';\nimport {\n  SEMATTRS_DB_CONNECTION_STRING,\n  SEMATTRS_DB_NAME,\n  SEMATTRS_DB_USER,\n  SEMATTRS_NET_PEER_NAME,\n  SEMATTRS_NET_PEER_PORT,\n} from '@opentelemetry/semantic-conventions';\nimport type * as mysqlTypes from 'mysql2';\n\ntype formatType = typeof mysqlTypes.format;\n\n/*\n  Following types declare an expectation on mysql2 types and define a subset we\n  use in the instrumentation of the types actually defined in mysql2 package\n\n  We need to import them here so that the installing party of the instrumentation\n  doesn't have to absolutely install the mysql2 package as well - specially\n  important for auto-loaders and meta-packages.\n*/\ninterface QueryOptions {\n  sql: string;\n  values?: any | any[] | { [param: string]: any };\n}\n\ninterface Query {\n  sql: string;\n}\n\ninterface Config {\n  host?: string;\n  port?: number;\n  database?: string;\n  user?: string;\n  connectionConfig?: Config;\n}\n/**\n * Get an Attributes map from a mysql connection config object\n *\n * @param config ConnectionConfig\n */\nexport function getConnectionAttributes(config: Config): Attributes {\n  const { host, port, database, user } = getConfig(config);\n  const portNumber = parseInt(port, 10);\n  if (!isNaN(portNumber)) {\n    return {\n      [SEMATTRS_NET_PEER_NAME]: host,\n      [SEMATTRS_NET_PEER_PORT]: portNumber,\n      [SEMATTRS_DB_CONNECTION_STRING]: getJDBCString(host, port, database),\n      [SEMATTRS_DB_NAME]: database,\n      [SEMATTRS_DB_USER]: user,\n    };\n  }\n  return {\n    [SEMATTRS_NET_PEER_NAME]: host,\n    [SEMATTRS_DB_CONNECTION_STRING]: getJDBCString(host, port, database),\n    [SEMATTRS_DB_NAME]: database,\n    [SEMATTRS_DB_USER]: user,\n  };\n}\n\nfunction getConfig(config: any) {\n  const { host, port, database, user } =\n    (config && config.connectionConfig) || config || {};\n  return { host, port, database, user };\n}\n\nfunction getJDBCString(\n  host: string | undefined,\n  port: number | undefined,\n  database: string | undefined\n) {\n  let jdbcString = `jdbc:mysql://${host || 'localhost'}`;\n\n  if (typeof port === 'number') {\n    jdbcString += `:${port}`;\n  }\n\n  if (typeof database === 'string') {\n    jdbcString += `/${database}`;\n  }\n\n  return jdbcString;\n}\n\n/**\n * Conjures up the value for the db.statement attribute by formatting a SQL query.\n *\n * @returns the database statement being executed.\n */\nexport function getDbStatement(\n  query: string | Query | QueryOptions,\n  format?: formatType,\n  values?: any[]\n): string {\n  if (!format) {\n    return typeof query === 'string' ? query : query.sql;\n  }\n  if (typeof query === 'string') {\n    return values ? format(query, values) : query;\n  } else {\n    // According to https://github.com/mysqljs/mysql#performing-queries\n    // The values argument will override the values in the option object.\n    return values || (query as QueryOptions).values\n      ? format(query.sql, values || (query as QueryOptions).values)\n      : query.sql;\n  }\n}\n\n/**\n * The span name SHOULD be set to a low cardinality value\n * representing the statement executed on the database.\n *\n * @returns SQL statement without variable arguments or SQL verb\n */\nexport function getSpanName(query: string | Query | QueryOptions): string {\n  const rawQuery = typeof query === 'object' ? query.sql : query;\n  // Extract the SQL verb\n  const firstSpace = rawQuery?.indexOf(' ');\n  if (typeof firstSpace === 'number' && firstSpace !== -1) {\n    return rawQuery?.substring(0, firstSpace);\n  }\n  return rawQuery;\n}\n\nexport const once = (fn: Function) => {\n  let called = false;\n  return (...args: unknown[]) => {\n    if (called) return;\n    called = true;\n    return fn(...args);\n  };\n};\n\nexport function getConnectionPrototypeToInstrument(connection: any) {\n  const connectionPrototype = connection.prototype;\n  const basePrototype = Object.getPrototypeOf(connectionPrototype);\n\n  // mysql2@3.11.5 included a refactoring, where most code was moved out of the `Connection` class and into a shared base\n  // so we need to instrument that instead, see https://github.com/sidorares/node-mysql2/pull/3081\n  // This checks if the functions we're instrumenting are there on the base - we cannot use the presence of a base\n  // prototype since EventEmitter is the base for mysql2@<=3.11.4\n  if (\n    typeof basePrototype?.query === 'function' &&\n    typeof basePrototype?.execute === 'function'\n  ) {\n    return basePrototype;\n  }\n\n  // otherwise instrument the connection directly.\n  return connectionPrototype;\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// this is autogenerated file, see scripts/version-update.js\nexport const PACKAGE_VERSION = '0.45.2';\nexport const PACKAGE_NAME = '@opentelemetry/instrumentation-mysql2';\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as api from '@opentelemetry/api';\nimport {\n  InstrumentationBase,\n  InstrumentationNodeModuleDefinition,\n  InstrumentationNodeModuleFile,\n  isWrapped,\n  safeExecuteInTheMiddle,\n} from '@opentelemetry/instrumentation';\nimport {\n  DBSYSTEMVALUES_MYSQL,\n  SEMATTRS_DB_STATEMENT,\n  SEMATTRS_DB_SYSTEM,\n} from '@opentelemetry/semantic-conventions';\nimport { addSqlCommenterComment } from '@opentelemetry/sql-common';\nimport type * as mysqlTypes from 'mysql2';\nimport { MySQL2InstrumentationConfig } from './types';\nimport {\n  getConnectionAttributes,\n  getConnectionPrototypeToInstrument,\n  getDbStatement,\n  getSpanName,\n  once,\n} from './utils';\n/** @knipignore */\nimport { PACKAGE_NAME, PACKAGE_VERSION } from './version';\n\ntype formatType = typeof mysqlTypes.format;\n\nconst supportedVersions = ['>=1.4.2 <4'];\n\nexport class MySQL2Instrumentation extends InstrumentationBase<MySQL2InstrumentationConfig> {\n  static readonly COMMON_ATTRIBUTES = {\n    [SEMATTRS_DB_SYSTEM]: DBSYSTEMVALUES_MYSQL,\n  };\n\n  constructor(config: MySQL2InstrumentationConfig = {}) {\n    super(PACKAGE_NAME, PACKAGE_VERSION, config);\n  }\n\n  protected init() {\n    let format: formatType | undefined;\n    function setFormatFunction(moduleExports: any) {\n      if (!format && moduleExports.format) {\n        format = moduleExports.format;\n      }\n    }\n    const patch = (ConnectionPrototype: mysqlTypes.Connection) => {\n      if (isWrapped(ConnectionPrototype.query)) {\n        this._unwrap(ConnectionPrototype, 'query');\n      }\n      this._wrap(\n        ConnectionPrototype,\n        'query',\n        this._patchQuery(format, false) as any\n      );\n      if (isWrapped(ConnectionPrototype.execute)) {\n        this._unwrap(ConnectionPrototype, 'execute');\n      }\n      this._wrap(\n        ConnectionPrototype,\n        'execute',\n        this._patchQuery(format, true) as any\n      );\n    };\n    const unpatch = (ConnectionPrototype: mysqlTypes.Connection) => {\n      this._unwrap(ConnectionPrototype, 'query');\n      this._unwrap(ConnectionPrototype, 'execute');\n    };\n    return [\n      new InstrumentationNodeModuleDefinition(\n        'mysql2',\n        supportedVersions,\n        (moduleExports: any) => {\n          setFormatFunction(moduleExports);\n          return moduleExports;\n        },\n        () => {},\n        [\n          new InstrumentationNodeModuleFile(\n            'mysql2/promise.js',\n            supportedVersions,\n            (moduleExports: any) => {\n              setFormatFunction(moduleExports);\n              return moduleExports;\n            },\n            () => {}\n          ),\n          new InstrumentationNodeModuleFile(\n            'mysql2/lib/connection.js',\n            supportedVersions,\n            (moduleExports: any) => {\n              const ConnectionPrototype: mysqlTypes.Connection =\n                getConnectionPrototypeToInstrument(moduleExports);\n              patch(ConnectionPrototype);\n              return moduleExports;\n            },\n            (moduleExports: any) => {\n              if (moduleExports === undefined) return;\n              const ConnectionPrototype: mysqlTypes.Connection =\n                getConnectionPrototypeToInstrument(moduleExports);\n              unpatch(ConnectionPrototype);\n            }\n          ),\n        ]\n      ),\n    ];\n  }\n\n  private _patchQuery(format: formatType | undefined, isPrepared: boolean) {\n    return (originalQuery: Function): Function => {\n      const thisPlugin = this;\n      return function query(\n        this: mysqlTypes.Connection,\n        query: string | mysqlTypes.Query | mysqlTypes.QueryOptions,\n        _valuesOrCallback?: unknown[] | Function,\n        _callback?: Function\n      ) {\n        let values;\n        if (Array.isArray(_valuesOrCallback)) {\n          values = _valuesOrCallback;\n        } else if (arguments[2]) {\n          values = [_valuesOrCallback];\n        }\n\n        const span = thisPlugin.tracer.startSpan(getSpanName(query), {\n          kind: api.SpanKind.CLIENT,\n          attributes: {\n            ...MySQL2Instrumentation.COMMON_ATTRIBUTES,\n            ...getConnectionAttributes(this.config),\n            [SEMATTRS_DB_STATEMENT]: getDbStatement(query, format, values),\n          },\n        });\n\n        if (\n          !isPrepared &&\n          thisPlugin.getConfig().addSqlCommenterCommentToQueries\n        ) {\n          arguments[0] = query =\n            typeof query === 'string'\n              ? addSqlCommenterComment(span, query)\n              : Object.assign(query, {\n                  sql: addSqlCommenterComment(span, query.sql),\n                });\n        }\n\n        const endSpan = once((err?: any, results?: any) => {\n          if (err) {\n            span.setStatus({\n              code: api.SpanStatusCode.ERROR,\n              message: err.message,\n            });\n          } else {\n            const { responseHook } = thisPlugin.getConfig();\n            if (typeof responseHook === 'function') {\n              safeExecuteInTheMiddle(\n                () => {\n                  responseHook(span, {\n                    queryResults: results,\n                  });\n                },\n                err => {\n                  if (err) {\n                    thisPlugin._diag.warn('Failed executing responseHook', err);\n                  }\n                },\n                true\n              );\n            }\n          }\n\n          span.end();\n        });\n\n        if (arguments.length === 1) {\n          if (typeof (query as any).onResult === 'function') {\n            thisPlugin._wrap(\n              query as any,\n              'onResult',\n              thisPlugin._patchCallbackQuery(endSpan)\n            );\n          }\n\n          const streamableQuery: mysqlTypes.Query = originalQuery.apply(\n            this,\n            arguments\n          );\n\n          // `end` in mysql behaves similarly to `result` in mysql2.\n          streamableQuery\n            .once('error', err => {\n              endSpan(err);\n            })\n            .once('result', results => {\n              endSpan(undefined, results);\n            });\n\n          return streamableQuery;\n        }\n\n        if (typeof arguments[1] === 'function') {\n          thisPlugin._wrap(\n            arguments,\n            1,\n            thisPlugin._patchCallbackQuery(endSpan)\n          );\n        } else if (typeof arguments[2] === 'function') {\n          thisPlugin._wrap(\n            arguments,\n            2,\n            thisPlugin._patchCallbackQuery(endSpan)\n          );\n        }\n\n        return originalQuery.apply(this, arguments);\n      };\n    };\n  }\n\n  private _patchCallbackQuery(endSpan: Function) {\n    return (originalCallback: Function) => {\n      return function (\n        err: mysqlTypes.QueryError | null,\n        results?: any,\n        fields?: mysqlTypes.FieldPacket[]\n      ) {\n        endSpan(err, results);\n        return originalCallback(...arguments);\n      };\n    };\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport * from './instrumentation';\nexport * from './types';\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Span, SpanStatusCode } from '@opentelemetry/api';\n\nexport const endSpan = (\n  span: Span,\n  err: NodeJS.ErrnoException | null | undefined\n) => {\n  if (err) {\n    span.recordException(err);\n    span.setStatus({\n      code: SpanStatusCode.ERROR,\n      message: err.message,\n    });\n  }\n  span.end();\n};\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * List of regexes and the number of arguments that should be serialized for matching commands.\n * For example, HSET should serialize which key and field it's operating on, but not its value.\n * Setting the subset to -1 will serialize all arguments.\n * Commands without a match will have their first argument serialized.\n *\n * Refer to https://redis.io/commands/ for the full list.\n */\nconst serializationSubsets = [\n  {\n    regex: /^ECHO/i,\n    args: 0,\n  },\n  {\n    regex: /^(LPUSH|MSET|PFA|PUBLISH|RPUSH|SADD|SET|SPUBLISH|XADD|ZADD)/i,\n    args: 1,\n  },\n  {\n    regex: /^(HSET|HMSET|LSET|LINSERT)/i,\n    args: 2,\n  },\n  {\n    regex:\n      /^(ACL|BIT|B[LRZ]|CLIENT|CLUSTER|CONFIG|COMMAND|DECR|DEL|EVAL|EX|FUNCTION|GEO|GET|HINCR|HMGET|HSCAN|INCR|L[TRLM]|MEMORY|P[EFISTU]|RPOP|S[CDIMORSU]|XACK|X[CDGILPRT]|Z[CDILMPRS])/i,\n    args: -1,\n  },\n];\n\nexport type DbStatementSerializer = (\n  cmdName: string,\n  cmdArgs: Array<string | Buffer | number | any[]>\n) => string;\n\n/**\n * Given the redis command name and arguments, return a combination of the\n * command name + the allowed arguments according to `serializationSubsets`.\n * @param cmdName The redis command name\n * @param cmdArgs The redis command arguments\n * @returns a combination of the command name + args according to `serializationSubsets`.\n */\nexport const defaultDbStatementSerializer: DbStatementSerializer = (\n  cmdName,\n  cmdArgs\n) => {\n  if (Array.isArray(cmdArgs) && cmdArgs.length) {\n    const nArgsToSerialize =\n      serializationSubsets.find(({ regex }) => {\n        return regex.test(cmdName);\n      })?.args ?? 0;\n    const argsToSerialize =\n      nArgsToSerialize >= 0 ? cmdArgs.slice(0, nArgsToSerialize) : cmdArgs;\n    if (cmdArgs.length > argsToSerialize.length) {\n      argsToSerialize.push(\n        `[${cmdArgs.length - nArgsToSerialize} other arguments]`\n      );\n    }\n    return `${cmdName} ${argsToSerialize.join(' ')}`;\n  }\n  return cmdName;\n};\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// this is autogenerated file, see scripts/version-update.js\nexport const PACKAGE_VERSION = '0.47.1';\nexport const PACKAGE_NAME = '@opentelemetry/instrumentation-ioredis';\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { diag, trace, context, SpanKind } from '@opentelemetry/api';\nimport {\n  InstrumentationBase,\n  InstrumentationNodeModuleDefinition,\n  isWrapped,\n} from '@opentelemetry/instrumentation';\nimport { IORedisInstrumentationConfig } from './types';\nimport { IORedisCommand, RedisInterface } from './internal-types';\nimport {\n  DBSYSTEMVALUES_REDIS,\n  SEMATTRS_DB_CONNECTION_STRING,\n  SEMATTRS_DB_STATEMENT,\n  SEMATTRS_DB_SYSTEM,\n  SEMATTRS_NET_PEER_NAME,\n  SEMATTRS_NET_PEER_PORT,\n} from '@opentelemetry/semantic-conventions';\nimport { safeExecuteInTheMiddle } from '@opentelemetry/instrumentation';\nimport { endSpan } from './utils';\nimport { defaultDbStatementSerializer } from '@opentelemetry/redis-common';\n/** @knipignore */\nimport { PACKAGE_NAME, PACKAGE_VERSION } from './version';\n\nconst DEFAULT_CONFIG: IORedisInstrumentationConfig = {\n  requireParentSpan: true,\n};\n\nexport class IORedisInstrumentation extends InstrumentationBase<IORedisInstrumentationConfig> {\n  constructor(config: IORedisInstrumentationConfig = {}) {\n    super(PACKAGE_NAME, PACKAGE_VERSION, { ...DEFAULT_CONFIG, ...config });\n  }\n\n  override setConfig(config: IORedisInstrumentationConfig = {}) {\n    super.setConfig({ ...DEFAULT_CONFIG, ...config });\n  }\n\n  init(): InstrumentationNodeModuleDefinition[] {\n    return [\n      new InstrumentationNodeModuleDefinition(\n        'ioredis',\n        ['>=2.0.0 <6'],\n        (module, moduleVersion?: string) => {\n          const moduleExports =\n            module[Symbol.toStringTag] === 'Module'\n              ? module.default // ESM\n              : module; // CommonJS\n          if (isWrapped(moduleExports.prototype.sendCommand)) {\n            this._unwrap(moduleExports.prototype, 'sendCommand');\n          }\n          this._wrap(\n            moduleExports.prototype,\n            'sendCommand',\n            this._patchSendCommand(moduleVersion)\n          );\n          if (isWrapped(moduleExports.prototype.connect)) {\n            this._unwrap(moduleExports.prototype, 'connect');\n          }\n          this._wrap(\n            moduleExports.prototype,\n            'connect',\n            this._patchConnection()\n          );\n          return module;\n        },\n        module => {\n          if (module === undefined) return;\n          const moduleExports =\n            module[Symbol.toStringTag] === 'Module'\n              ? module.default // ESM\n              : module; // CommonJS\n          this._unwrap(moduleExports.prototype, 'sendCommand');\n          this._unwrap(moduleExports.prototype, 'connect');\n        }\n      ),\n    ];\n  }\n\n  /**\n   * Patch send command internal to trace requests\n   */\n  private _patchSendCommand(moduleVersion?: string) {\n    return (original: Function) => {\n      return this._traceSendCommand(original, moduleVersion);\n    };\n  }\n\n  private _patchConnection() {\n    return (original: Function) => {\n      return this._traceConnection(original);\n    };\n  }\n\n  private _traceSendCommand(original: Function, moduleVersion?: string) {\n    const instrumentation = this;\n    return function (this: RedisInterface, cmd?: IORedisCommand) {\n      if (arguments.length < 1 || typeof cmd !== 'object') {\n        return original.apply(this, arguments);\n      }\n      const config = instrumentation.getConfig();\n      const dbStatementSerializer =\n        config.dbStatementSerializer || defaultDbStatementSerializer;\n\n      const hasNoParentSpan = trace.getSpan(context.active()) === undefined;\n      if (config.requireParentSpan === true && hasNoParentSpan) {\n        return original.apply(this, arguments);\n      }\n\n      const span = instrumentation.tracer.startSpan(cmd.name, {\n        kind: SpanKind.CLIENT,\n        attributes: {\n          [SEMATTRS_DB_SYSTEM]: DBSYSTEMVALUES_REDIS,\n          [SEMATTRS_DB_STATEMENT]: dbStatementSerializer(cmd.name, cmd.args),\n        },\n      });\n\n      const { requestHook } = config;\n      if (requestHook) {\n        safeExecuteInTheMiddle(\n          () =>\n            requestHook(span, {\n              moduleVersion,\n              cmdName: cmd.name,\n              cmdArgs: cmd.args,\n            }),\n          e => {\n            if (e) {\n              diag.error('ioredis instrumentation: request hook failed', e);\n            }\n          },\n          true\n        );\n      }\n\n      const { host, port } = this.options;\n\n      span.setAttributes({\n        [SEMATTRS_NET_PEER_NAME]: host,\n        [SEMATTRS_NET_PEER_PORT]: port,\n        [SEMATTRS_DB_CONNECTION_STRING]: `redis://${host}:${port}`,\n      });\n\n      try {\n        const result = original.apply(this, arguments);\n\n        const origResolve = cmd.resolve;\n        /* eslint-disable @typescript-eslint/no-explicit-any */\n        cmd.resolve = function (result: any) {\n          safeExecuteInTheMiddle(\n            () => config.responseHook?.(span, cmd.name, cmd.args, result),\n            e => {\n              if (e) {\n                diag.error('ioredis instrumentation: response hook failed', e);\n              }\n            },\n            true\n          );\n\n          endSpan(span, null);\n          origResolve(result);\n        };\n\n        const origReject = cmd.reject;\n        cmd.reject = function (err: Error) {\n          endSpan(span, err);\n          origReject(err);\n        };\n\n        return result;\n      } catch (error: any) {\n        endSpan(span, error);\n        throw error;\n      }\n    };\n  }\n\n  private _traceConnection(original: Function) {\n    const instrumentation = this;\n    return function (this: RedisInterface) {\n      const hasNoParentSpan = trace.getSpan(context.active()) === undefined;\n      if (\n        instrumentation.getConfig().requireParentSpan === true &&\n        hasNoParentSpan\n      ) {\n        return original.apply(this, arguments);\n      }\n\n      const span = instrumentation.tracer.startSpan('connect', {\n        kind: SpanKind.CLIENT,\n        attributes: {\n          [SEMATTRS_DB_SYSTEM]: DBSYSTEMVALUES_REDIS,\n          [SEMATTRS_DB_STATEMENT]: 'connect',\n        },\n      });\n      const { host, port } = this.options;\n\n      span.setAttributes({\n        [SEMATTRS_NET_PEER_NAME]: host,\n        [SEMATTRS_NET_PEER_PORT]: port,\n        [SEMATTRS_DB_CONNECTION_STRING]: `redis://${host}:${port}`,\n      });\n      try {\n        const client = original.apply(this, arguments);\n        endSpan(span, null);\n        return client;\n      } catch (error: any) {\n        endSpan(span, error);\n        throw error;\n      }\n    };\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport * from './instrumentation';\nexport * from './types';\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Attributes, DiagLogger } from '@opentelemetry/api';\nimport {\n  SEMATTRS_DB_SYSTEM,\n  SEMATTRS_DB_CONNECTION_STRING,\n  SEMATTRS_NET_PEER_NAME,\n  SEMATTRS_NET_PEER_PORT,\n  DBSYSTEMVALUES_REDIS,\n} from '@opentelemetry/semantic-conventions';\n\nexport function getClientAttributes(\n  diag: DiagLogger,\n  options: any\n): Attributes {\n  return {\n    [SEMATTRS_DB_SYSTEM]: DBSYSTEMVALUES_REDIS,\n    [SEMATTRS_NET_PEER_NAME]: options?.socket?.host,\n    [SEMATTRS_NET_PEER_PORT]: options?.socket?.port,\n    [SEMATTRS_DB_CONNECTION_STRING]:\n      removeCredentialsFromDBConnectionStringAttribute(diag, options?.url),\n  };\n}\n\n/**\n * removeCredentialsFromDBConnectionStringAttribute removes basic auth from url and user_pwd from query string\n *\n * Examples:\n *   redis://user:pass@localhost:6379/mydb => redis://localhost:6379/mydb\n *   redis://localhost:6379?db=mydb&user_pwd=pass => redis://localhost:6379?db=mydb\n */\nfunction removeCredentialsFromDBConnectionStringAttribute(\n  diag: DiagLogger,\n  url?: unknown\n): string | undefined {\n  if (typeof url !== 'string' || !url) {\n    return;\n  }\n\n  try {\n    const u = new URL(url);\n    u.searchParams.delete('user_pwd');\n    u.username = '';\n    u.password = '';\n    return u.href;\n  } catch (err) {\n    diag.error('failed to sanitize redis connection url', err);\n  }\n  return;\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// this is autogenerated file, see scripts/version-update.js\nexport const PACKAGE_VERSION = '0.46.1';\nexport const PACKAGE_NAME = '@opentelemetry/instrumentation-redis-4';\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  trace,\n  context,\n  SpanKind,\n  Span,\n  SpanStatusCode,\n} from '@opentelemetry/api';\nimport {\n  isWrapped,\n  InstrumentationBase,\n  InstrumentationNodeModuleDefinition,\n  InstrumentationNodeModuleFile,\n} from '@opentelemetry/instrumentation';\nimport { getClientAttributes } from './utils';\nimport { defaultDbStatementSerializer } from '@opentelemetry/redis-common';\nimport { RedisInstrumentationConfig } from './types';\n/** @knipignore */\nimport { PACKAGE_NAME, PACKAGE_VERSION } from './version';\nimport { SEMATTRS_DB_STATEMENT } from '@opentelemetry/semantic-conventions';\nimport type { MultiErrorReply } from './internal-types';\n\nconst OTEL_OPEN_SPANS = Symbol(\n  'opentelemetry.instrumentation.redis.open_spans'\n);\nconst MULTI_COMMAND_OPTIONS = Symbol(\n  'opentelemetry.instrumentation.redis.multi_command_options'\n);\n\ninterface MutliCommandInfo {\n  span: Span;\n  commandName: string;\n  commandArgs: Array<string | Buffer>;\n}\n\nconst DEFAULT_CONFIG: RedisInstrumentationConfig = {\n  requireParentSpan: false,\n};\n\nexport class RedisInstrumentation extends InstrumentationBase<RedisInstrumentationConfig> {\n  static readonly COMPONENT = 'redis';\n\n  constructor(config: RedisInstrumentationConfig = {}) {\n    super(PACKAGE_NAME, PACKAGE_VERSION, { ...DEFAULT_CONFIG, ...config });\n  }\n\n  override setConfig(config: RedisInstrumentationConfig = {}) {\n    super.setConfig({ ...DEFAULT_CONFIG, ...config });\n  }\n\n  protected init() {\n    // @node-redis/client is a new package introduced and consumed by 'redis 4.0.x'\n    // on redis@4.1.0 it was changed to @redis/client.\n    // we will instrument both packages\n    return [\n      this._getInstrumentationNodeModuleDefinition('@redis/client'),\n      this._getInstrumentationNodeModuleDefinition('@node-redis/client'),\n    ];\n  }\n\n  private _getInstrumentationNodeModuleDefinition(\n    basePackageName: string\n  ): InstrumentationNodeModuleDefinition {\n    const commanderModuleFile = new InstrumentationNodeModuleFile(\n      `${basePackageName}/dist/lib/commander.js`,\n      ['^1.0.0'],\n      (moduleExports: any, moduleVersion?: string) => {\n        const transformCommandArguments =\n          moduleExports.transformCommandArguments;\n        if (!transformCommandArguments) {\n          this._diag.error(\n            'internal instrumentation error, missing transformCommandArguments function'\n          );\n          return moduleExports;\n        }\n\n        // function name and signature changed in redis 4.1.0 from 'extendWithCommands' to 'attachCommands'\n        // the matching internal package names starts with 1.0.x (for redis 4.0.x)\n        const functionToPatch = moduleVersion?.startsWith('1.0.')\n          ? 'extendWithCommands'\n          : 'attachCommands';\n        // this is the function that extend a redis client with a list of commands.\n        // the function patches the commandExecutor to record a span\n        if (isWrapped(moduleExports?.[functionToPatch])) {\n          this._unwrap(moduleExports, functionToPatch);\n        }\n        this._wrap(\n          moduleExports,\n          functionToPatch,\n          this._getPatchExtendWithCommands(transformCommandArguments)\n        );\n\n        return moduleExports;\n      },\n      (moduleExports: any) => {\n        if (isWrapped(moduleExports?.extendWithCommands)) {\n          this._unwrap(moduleExports, 'extendWithCommands');\n        }\n        if (isWrapped(moduleExports?.attachCommands)) {\n          this._unwrap(moduleExports, 'attachCommands');\n        }\n      }\n    );\n\n    const multiCommanderModule = new InstrumentationNodeModuleFile(\n      `${basePackageName}/dist/lib/client/multi-command.js`,\n      ['^1.0.0'],\n      (moduleExports: any) => {\n        const redisClientMultiCommandPrototype =\n          moduleExports?.default?.prototype;\n\n        if (isWrapped(redisClientMultiCommandPrototype?.exec)) {\n          this._unwrap(redisClientMultiCommandPrototype, 'exec');\n        }\n        this._wrap(\n          redisClientMultiCommandPrototype,\n          'exec',\n          this._getPatchMultiCommandsExec()\n        );\n\n        if (isWrapped(redisClientMultiCommandPrototype?.addCommand)) {\n          this._unwrap(redisClientMultiCommandPrototype, 'addCommand');\n        }\n        this._wrap(\n          redisClientMultiCommandPrototype,\n          'addCommand',\n          this._getPatchMultiCommandsAddCommand()\n        );\n\n        return moduleExports;\n      },\n      (moduleExports: any) => {\n        const redisClientMultiCommandPrototype =\n          moduleExports?.default?.prototype;\n        if (isWrapped(redisClientMultiCommandPrototype?.exec)) {\n          this._unwrap(redisClientMultiCommandPrototype, 'exec');\n        }\n        if (isWrapped(redisClientMultiCommandPrototype?.addCommand)) {\n          this._unwrap(redisClientMultiCommandPrototype, 'addCommand');\n        }\n      }\n    );\n\n    const clientIndexModule = new InstrumentationNodeModuleFile(\n      `${basePackageName}/dist/lib/client/index.js`,\n      ['^1.0.0'],\n      (moduleExports: any) => {\n        const redisClientPrototype = moduleExports?.default?.prototype;\n\n        // In some @redis/client versions 'multi' is a method. In later\n        // versions, as of https://github.com/redis/node-redis/pull/2324,\n        // 'MULTI' is a method and 'multi' is a property defined in the\n        // constructor that points to 'MULTI', and therefore it will not\n        // be defined on the prototype.\n        if (redisClientPrototype?.multi) {\n          if (isWrapped(redisClientPrototype?.multi)) {\n            this._unwrap(redisClientPrototype, 'multi');\n          }\n          this._wrap(\n            redisClientPrototype,\n            'multi',\n            this._getPatchRedisClientMulti()\n          );\n        }\n        if (redisClientPrototype?.MULTI) {\n          if (isWrapped(redisClientPrototype?.MULTI)) {\n            this._unwrap(redisClientPrototype, 'MULTI');\n          }\n          this._wrap(\n            redisClientPrototype,\n            'MULTI',\n            this._getPatchRedisClientMulti()\n          );\n        }\n\n        if (isWrapped(redisClientPrototype?.sendCommand)) {\n          this._unwrap(redisClientPrototype, 'sendCommand');\n        }\n        this._wrap(\n          redisClientPrototype,\n          'sendCommand',\n          this._getPatchRedisClientSendCommand()\n        );\n\n        this._wrap(\n          redisClientPrototype,\n          'connect',\n          this._getPatchedClientConnect()\n        );\n\n        return moduleExports;\n      },\n      (moduleExports: any) => {\n        const redisClientPrototype = moduleExports?.default?.prototype;\n        if (isWrapped(redisClientPrototype?.multi)) {\n          this._unwrap(redisClientPrototype, 'multi');\n        }\n        if (isWrapped(redisClientPrototype?.MULTI)) {\n          this._unwrap(redisClientPrototype, 'MULTI');\n        }\n        if (isWrapped(redisClientPrototype?.sendCommand)) {\n          this._unwrap(redisClientPrototype, 'sendCommand');\n        }\n      }\n    );\n\n    return new InstrumentationNodeModuleDefinition(\n      basePackageName,\n      ['^1.0.0'],\n      (moduleExports: any) => {\n        return moduleExports;\n      },\n      () => {},\n      [commanderModuleFile, multiCommanderModule, clientIndexModule]\n    );\n  }\n\n  // serves both for redis 4.0.x where function name is extendWithCommands\n  // and redis ^4.1.0 where function name is attachCommands\n  private _getPatchExtendWithCommands(transformCommandArguments: Function) {\n    const plugin = this;\n    return function extendWithCommandsPatchWrapper(original: Function) {\n      return function extendWithCommandsPatch(this: any, config: any) {\n        if (config?.BaseClass?.name !== 'RedisClient') {\n          return original.apply(this, arguments);\n        }\n\n        const origExecutor = config.executor;\n        config.executor = function (\n          this: any,\n          command: any,\n          args: Array<string | Buffer>\n        ) {\n          const redisCommandArguments = transformCommandArguments(\n            command,\n            args\n          ).args;\n          return plugin._traceClientCommand(\n            origExecutor,\n            this,\n            arguments,\n            redisCommandArguments\n          );\n        };\n        return original.apply(this, arguments);\n      };\n    };\n  }\n\n  private _getPatchMultiCommandsExec() {\n    const plugin = this;\n    return function execPatchWrapper(original: Function) {\n      return function execPatch(this: any) {\n        const execRes = original.apply(this, arguments);\n        if (typeof execRes?.then !== 'function') {\n          plugin._diag.error(\n            'got non promise result when patching RedisClientMultiCommand.exec'\n          );\n          return execRes;\n        }\n\n        return execRes\n          .then((redisRes: unknown[]) => {\n            const openSpans = this[OTEL_OPEN_SPANS];\n            plugin._endSpansWithRedisReplies(openSpans, redisRes);\n            return redisRes;\n          })\n          .catch((err: Error) => {\n            const openSpans = this[OTEL_OPEN_SPANS];\n            if (!openSpans) {\n              plugin._diag.error(\n                'cannot find open spans to end for redis multi command'\n              );\n            } else {\n              const replies =\n                err.constructor.name === 'MultiErrorReply'\n                  ? (err as MultiErrorReply).replies\n                  : new Array(openSpans.length).fill(err);\n              plugin._endSpansWithRedisReplies(openSpans, replies);\n            }\n            return Promise.reject(err);\n          });\n      };\n    };\n  }\n\n  private _getPatchMultiCommandsAddCommand() {\n    const plugin = this;\n    return function addCommandWrapper(original: Function) {\n      return function addCommandPatch(this: any, args: Array<string | Buffer>) {\n        return plugin._traceClientCommand(original, this, arguments, args);\n      };\n    };\n  }\n\n  private _getPatchRedisClientMulti() {\n    return function multiPatchWrapper(original: Function) {\n      return function multiPatch(this: any) {\n        const multiRes = original.apply(this, arguments);\n        multiRes[MULTI_COMMAND_OPTIONS] = this.options;\n        return multiRes;\n      };\n    };\n  }\n\n  private _getPatchRedisClientSendCommand() {\n    const plugin = this;\n    return function sendCommandWrapper(original: Function) {\n      return function sendCommandPatch(\n        this: any,\n        args: Array<string | Buffer>\n      ) {\n        return plugin._traceClientCommand(original, this, arguments, args);\n      };\n    };\n  }\n\n  private _getPatchedClientConnect() {\n    const plugin = this;\n    return function connectWrapper(original: Function) {\n      return function patchedConnect(this: any): Promise<void> {\n        const options = this.options;\n\n        const attributes = getClientAttributes(plugin._diag, options);\n\n        const span = plugin.tracer.startSpan(\n          `${RedisInstrumentation.COMPONENT}-connect`,\n          {\n            kind: SpanKind.CLIENT,\n            attributes,\n          }\n        );\n\n        const res = context.with(trace.setSpan(context.active(), span), () => {\n          return original.apply(this);\n        });\n\n        return res\n          .then((result: unknown) => {\n            span.end();\n            return result;\n          })\n          .catch((error: Error) => {\n            span.recordException(error);\n            span.setStatus({\n              code: SpanStatusCode.ERROR,\n              message: error.message,\n            });\n            span.end();\n            return Promise.reject(error);\n          });\n      };\n    };\n  }\n\n  private _traceClientCommand(\n    origFunction: Function,\n    origThis: any,\n    origArguments: IArguments,\n    redisCommandArguments: Array<string | Buffer>\n  ) {\n    const hasNoParentSpan = trace.getSpan(context.active()) === undefined;\n    if (hasNoParentSpan && this.getConfig().requireParentSpan) {\n      return origFunction.apply(origThis, origArguments);\n    }\n\n    const clientOptions = origThis.options || origThis[MULTI_COMMAND_OPTIONS];\n\n    const commandName = redisCommandArguments[0] as string; // types also allows it to be a Buffer, but in practice it only string\n    const commandArgs = redisCommandArguments.slice(1);\n\n    const dbStatementSerializer =\n      this.getConfig().dbStatementSerializer || defaultDbStatementSerializer;\n\n    const attributes = getClientAttributes(this._diag, clientOptions);\n\n    try {\n      const dbStatement = dbStatementSerializer(commandName, commandArgs);\n      if (dbStatement != null) {\n        attributes[SEMATTRS_DB_STATEMENT] = dbStatement;\n      }\n    } catch (e) {\n      this._diag.error('dbStatementSerializer throw an exception', e, {\n        commandName,\n      });\n    }\n\n    const span = this.tracer.startSpan(\n      `${RedisInstrumentation.COMPONENT}-${commandName}`,\n      {\n        kind: SpanKind.CLIENT,\n        attributes,\n      }\n    );\n\n    const res = context.with(trace.setSpan(context.active(), span), () => {\n      return origFunction.apply(origThis, origArguments);\n    });\n    if (typeof res?.then === 'function') {\n      res.then(\n        (redisRes: unknown) => {\n          this._endSpanWithResponse(\n            span,\n            commandName,\n            commandArgs,\n            redisRes,\n            undefined\n          );\n        },\n        (err: any) => {\n          this._endSpanWithResponse(span, commandName, commandArgs, null, err);\n        }\n      );\n    } else {\n      const redisClientMultiCommand = res as {\n        [OTEL_OPEN_SPANS]?: Array<MutliCommandInfo>;\n      };\n      redisClientMultiCommand[OTEL_OPEN_SPANS] =\n        redisClientMultiCommand[OTEL_OPEN_SPANS] || [];\n      redisClientMultiCommand[OTEL_OPEN_SPANS]!.push({\n        span,\n        commandName,\n        commandArgs,\n      });\n    }\n    return res;\n  }\n\n  private _endSpansWithRedisReplies(\n    openSpans: Array<MutliCommandInfo>,\n    replies: unknown[]\n  ) {\n    if (!openSpans) {\n      return this._diag.error(\n        'cannot find open spans to end for redis multi command'\n      );\n    }\n    if (replies.length !== openSpans.length) {\n      return this._diag.error(\n        'number of multi command spans does not match response from redis'\n      );\n    }\n    for (let i = 0; i < openSpans.length; i++) {\n      const { span, commandName, commandArgs } = openSpans[i];\n      const currCommandRes = replies[i];\n      const [res, err] =\n        currCommandRes instanceof Error\n          ? [null, currCommandRes]\n          : [currCommandRes, undefined];\n      this._endSpanWithResponse(span, commandName, commandArgs, res, err);\n    }\n  }\n\n  private _endSpanWithResponse(\n    span: Span,\n    commandName: string,\n    commandArgs: Array<string | Buffer>,\n    response: unknown,\n    error: Error | undefined\n  ) {\n    const { responseHook } = this.getConfig();\n    if (!error && responseHook) {\n      try {\n        responseHook(span, commandName, commandArgs, response);\n      } catch (err) {\n        this._diag.error('responseHook throw an exception', err);\n      }\n    }\n    if (error) {\n      span.recordException(error);\n      span.setStatus({ code: SpanStatusCode.ERROR, message: error?.message });\n    }\n    span.end();\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport * from './instrumentation';\nexport * from './types';\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type * as pgTypes from 'pg';\nimport type * as pgPoolTypes from 'pg-pool';\n\nexport type PostgresCallback = (err: Error, res: object) => unknown;\n\n// NB: this type describes the shape of a parsed, normalized form of the\n// connection information that's stored inside each pg.Client instance. It's\n// _not_ the same as the ConnectionConfig type exported from `@types/pg`. That\n// type defines how data must be _passed in_ when creating a new `pg.Client`,\n// which doesn't necessarily match the normalized internal form. E.g., a user\n// can call `new Client({ connectionString: '...' }), but `connectionString`\n// will never show up in the type below, because only the extracted host, port,\n// etc. are recorded in this normalized config. The keys listed below are also\n// incomplete, which is fine because the type is internal and these keys are the\n// only ones our code is reading. See https://github.com/brianc/node-postgres/blob/fde5ec586e49258dfc4a2fcd861fcdecb4794fc3/lib/client.js#L25\nexport interface PgParsedConnectionParams {\n  database?: string;\n  host?: string;\n  port?: number;\n  user?: string;\n}\n\nexport interface PgClientExtended extends pgTypes.Client {\n  connectionParameters: PgParsedConnectionParams;\n}\n\nexport type PgPoolCallback = (\n  err: Error,\n  client: any,\n  done: (release?: any) => void\n) => void;\n\nexport interface PgPoolOptionsParams {\n  database: string;\n  host: string;\n  port: number;\n  user: string;\n  idleTimeoutMillis: number; // the minimum amount of time that an object may sit idle in the pool before it is eligible for eviction due to idle time\n  maxClient: number; // maximum size of the pool\n}\n\nexport const EVENT_LISTENERS_SET = Symbol(\n  'opentelemetry.instrumentation.pg.eventListenersSet'\n);\n\nexport interface PgPoolExtended extends pgPoolTypes<pgTypes.Client> {\n  options: PgPoolOptionsParams;\n  [EVENT_LISTENERS_SET]?: boolean; // flag to identify if the event listeners for instrumentation have been set\n}\n\nexport type PgClientConnect = (callback?: Function) => Promise<void> | void;\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Postgresql specific attributes not covered by semantic conventions\nexport enum AttributeNames {\n  PG_VALUES = 'db.postgresql.values',\n  PG_PLAN = 'db.postgresql.plan',\n  IDLE_TIMEOUT_MILLIS = 'db.postgresql.idle.timeout.millis',\n  MAX_CLIENT = 'db.postgresql.max.client',\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * The name of the connection pool; unique within the instrumented application. In case the connection pool implementation doesn't provide a name, instrumentation **SHOULD** use a combination of parameters that would make the name unique, for example, combining attributes `server.address`, `server.port`, and `db.namespace`, formatted as `server.address:server.port/db.namespace`. Instrumentations that generate connection pool name following different patterns **SHOULD** document it.\n *\n * @example myDataSource\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n */\nexport const ATTR_DB_CLIENT_CONNECTION_POOL_NAME =\n  'db.client.connection.pool.name';\n\n/**\n * The state of a connection in the pool\n *\n * @example idle\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n */\nexport const ATTR_DB_CLIENT_CONNECTION_STATE = 'db.client.connection.state';\n\n/**\n * The name of the database, fully qualified within the server address and port.\n *\n * @example customers\n * @example test.users\n *\n * @note If a database system has multiple namespace components, they **SHOULD** be concatenated (potentially using database system specific conventions) from most general to most specific namespace component, and more specific namespaces **SHOULD NOT** be captured without the more general namespaces, to ensure that \"startswith\" queries for the more general namespaces will be valid.\n * Semantic conventions for individual database systems **SHOULD** document what `db.namespace` means in the context of that system.\n * It is **RECOMMENDED** to capture the value as provided by the application without attempting to do any case normalization.\n * This attribute has stability level RELEASE CANDIDATE.\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n */\nexport const ATTR_DB_NAMESPACE = 'db.namespace';\n\n/**\n * The name of the operation or command being executed.\n *\n * @example findAndModify\n * @example HMSET\n * @example SELECT\n *\n * @note It is **RECOMMENDED** to capture the value as provided by the application without attempting to do any case normalization.\n * If the operation name is parsed from the query text, it **SHOULD** be the first operation name found in the query.\n * For batch operations, if the individual operations are known to have the same operation name then that operation name **SHOULD** be used prepended by `BATCH `, otherwise `db.operation.name` **SHOULD** be `BATCH` or some other database system specific term if more applicable.\n * This attribute has stability level RELEASE CANDIDATE.\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n */\nexport const ATTR_DB_OPERATION_NAME = 'db.operation.name';\n\n/**\n * Enum value \"used\" for attribute {@link ATTR_DB_CLIENT_CONNECTION_STATE}.\n */\nexport const DB_CLIENT_CONNECTION_STATE_VALUE_USED = 'used';\n\n/**\n * Enum value \"idle\" for attribute {@link ATTR_DB_CLIENT_CONNECTION_STATE}.\n */\nexport const DB_CLIENT_CONNECTION_STATE_VALUE_IDLE = 'idle';\n\n/**\n * The number of connections that are currently in state described by the `state` attribute\n *\n * @experimental This metric is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n */\nexport const METRIC_DB_CLIENT_CONNECTION_COUNT = 'db.client.connection.count';\n\n/**\n * The number of current pending requests for an open connection\n *\n * @experimental This metric is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n */\nexport const METRIC_DB_CLIENT_CONNECTION_PENDING_REQUESTS =\n  'db.client.connection.pending_requests';\n\n/**\n * Duration of database client operations.\n *\n * @note Batch operations **SHOULD** be recorded as a single operation.\n *\n * @experimental This metric is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n */\nexport const METRIC_DB_CLIENT_OPERATION_DURATION =\n  'db.client.operation.duration';\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Contains span names produced by instrumentation\nexport enum SpanNames {\n  QUERY_PREFIX = 'pg.query',\n  CONNECT = 'pg.connect',\n  POOL_CONNECT = 'pg-pool.connect',\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  context,\n  trace,\n  Span,\n  SpanStatusCode,\n  Tracer,\n  SpanKind,\n  diag,\n  UpDownCounter,\n  Attributes,\n} from '@opentelemetry/api';\nimport { AttributeNames } from './enums/AttributeNames';\nimport {\n  ATTR_ERROR_TYPE,\n  SEMATTRS_DB_SYSTEM,\n  SEMATTRS_DB_NAME,\n  SEMATTRS_DB_CONNECTION_STRING,\n  SEMATTRS_NET_PEER_NAME,\n  SEMATTRS_NET_PEER_PORT,\n  SEMATTRS_DB_USER,\n  SEMATTRS_DB_STATEMENT,\n  DBSYSTEMVALUES_POSTGRESQL,\n} from '@opentelemetry/semantic-conventions';\nimport {\n  ATTR_DB_CLIENT_CONNECTION_POOL_NAME,\n  ATTR_DB_CLIENT_CONNECTION_STATE,\n  DB_CLIENT_CONNECTION_STATE_VALUE_USED,\n  DB_CLIENT_CONNECTION_STATE_VALUE_IDLE,\n} from './semconv';\nimport {\n  PgClientExtended,\n  PostgresCallback,\n  PgPoolCallback,\n  PgPoolExtended,\n  PgParsedConnectionParams,\n  PgPoolOptionsParams,\n} from './internal-types';\nimport { PgInstrumentationConfig } from './types';\nimport type * as pgTypes from 'pg';\nimport { safeExecuteInTheMiddle } from '@opentelemetry/instrumentation';\nimport { SpanNames } from './enums/SpanNames';\n\n/**\n * Helper function to get a low cardinality span name from whatever info we have\n * about the query.\n *\n * This is tricky, because we don't have most of the information (table name,\n * operation name, etc) the spec recommends using to build a low-cardinality\n * value w/o parsing. So, we use db.name and assume that, if the query's a named\n * prepared statement, those `name` values will be low cardinality. If we don't\n * have a named prepared statement, we try to parse an operation (despite the\n * spec's warnings).\n *\n * @params dbName The name of the db against which this query is being issued,\n *   which could be missing if no db name was given at the time that the\n *   connection was established.\n * @params queryConfig Information we have about the query being issued, typed\n *   to reflect only the validation we've actually done on the args to\n *   `client.query()`. This will be undefined if `client.query()` was called\n *   with invalid arguments.\n */\nexport function getQuerySpanName(\n  dbName: string | undefined,\n  queryConfig?: { text: string; name?: unknown }\n) {\n  // NB: when the query config is invalid, we omit the dbName too, so that\n  // someone (or some tool) reading the span name doesn't misinterpret the\n  // dbName as being a prepared statement or sql commit name.\n  if (!queryConfig) return SpanNames.QUERY_PREFIX;\n\n  // Either the name of a prepared statement; or an attempted parse\n  // of the SQL command, normalized to uppercase; or unknown.\n  const command =\n    typeof queryConfig.name === 'string' && queryConfig.name\n      ? queryConfig.name\n      : parseNormalizedOperationName(queryConfig.text);\n\n  return `${SpanNames.QUERY_PREFIX}:${command}${dbName ? ` ${dbName}` : ''}`;\n}\n\nexport function parseNormalizedOperationName(queryText: string) {\n  const indexOfFirstSpace = queryText.indexOf(' ');\n  let sqlCommand =\n    indexOfFirstSpace === -1\n      ? queryText\n      : queryText.slice(0, indexOfFirstSpace);\n  sqlCommand = sqlCommand.toUpperCase();\n\n  // Handle query text being \"COMMIT;\", which has an extra semicolon before the space.\n  return sqlCommand.endsWith(';') ? sqlCommand.slice(0, -1) : sqlCommand;\n}\n\nexport function getConnectionString(params: PgParsedConnectionParams) {\n  const host = params.host || 'localhost';\n  const port = params.port || 5432;\n  const database = params.database || '';\n  return `postgresql://${host}:${port}/${database}`;\n}\n\nfunction getPort(port: number | undefined): number | undefined {\n  // Port may be NaN as parseInt() is used on the value, passing null will result in NaN being parsed.\n  // https://github.com/brianc/node-postgres/blob/2a8efbee09a284be12748ed3962bc9b816965e36/packages/pg/lib/connection-parameters.js#L66\n  if (Number.isInteger(port)) {\n    return port;\n  }\n\n  // Unable to find the default used in pg code, so falling back to 'undefined'.\n  return undefined;\n}\n\nexport function getSemanticAttributesFromConnection(\n  params: PgParsedConnectionParams\n) {\n  return {\n    [SEMATTRS_DB_SYSTEM]: DBSYSTEMVALUES_POSTGRESQL,\n    [SEMATTRS_DB_NAME]: params.database, // required\n    [SEMATTRS_DB_CONNECTION_STRING]: getConnectionString(params), // required\n    [SEMATTRS_NET_PEER_NAME]: params.host, // required\n    [SEMATTRS_NET_PEER_PORT]: getPort(params.port),\n    [SEMATTRS_DB_USER]: params.user,\n  };\n}\n\nexport function getSemanticAttributesFromPool(params: PgPoolOptionsParams) {\n  return {\n    [SEMATTRS_DB_SYSTEM]: DBSYSTEMVALUES_POSTGRESQL,\n    [SEMATTRS_DB_NAME]: params.database, // required\n    [SEMATTRS_DB_CONNECTION_STRING]: getConnectionString(params), // required\n    [SEMATTRS_NET_PEER_NAME]: params.host, // required\n    [SEMATTRS_NET_PEER_PORT]: getPort(params.port),\n    [SEMATTRS_DB_USER]: params.user,\n    [AttributeNames.IDLE_TIMEOUT_MILLIS]: params.idleTimeoutMillis,\n    [AttributeNames.MAX_CLIENT]: params.maxClient,\n  };\n}\n\nexport function shouldSkipInstrumentation(\n  instrumentationConfig: PgInstrumentationConfig\n) {\n  return (\n    instrumentationConfig.requireParentSpan === true &&\n    trace.getSpan(context.active()) === undefined\n  );\n}\n\n// Create a span from our normalized queryConfig object,\n// or return a basic span if no queryConfig was given/could be created.\nexport function handleConfigQuery(\n  this: PgClientExtended,\n  tracer: Tracer,\n  instrumentationConfig: PgInstrumentationConfig,\n  queryConfig?: { text: string; values?: unknown; name?: unknown }\n) {\n  // Create child span.\n  const { connectionParameters } = this;\n  const dbName = connectionParameters.database;\n\n  const spanName = getQuerySpanName(dbName, queryConfig);\n  const span = tracer.startSpan(spanName, {\n    kind: SpanKind.CLIENT,\n    attributes: getSemanticAttributesFromConnection(connectionParameters),\n  });\n\n  if (!queryConfig) {\n    return span;\n  }\n\n  // Set attributes\n  if (queryConfig.text) {\n    span.setAttribute(SEMATTRS_DB_STATEMENT, queryConfig.text);\n  }\n\n  if (\n    instrumentationConfig.enhancedDatabaseReporting &&\n    Array.isArray(queryConfig.values)\n  ) {\n    try {\n      const convertedValues = queryConfig.values.map(value => {\n        if (value == null) {\n          return 'null';\n        } else if (value instanceof Buffer) {\n          return value.toString();\n        } else if (typeof value === 'object') {\n          if (typeof value.toPostgres === 'function') {\n            return value.toPostgres();\n          }\n          return JSON.stringify(value);\n        } else {\n          //string, number\n          return value.toString();\n        }\n      });\n      span.setAttribute(AttributeNames.PG_VALUES, convertedValues);\n    } catch (e) {\n      diag.error('failed to stringify ', queryConfig.values, e);\n    }\n  }\n\n  // Set plan name attribute, if present\n  if (typeof queryConfig.name === 'string') {\n    span.setAttribute(AttributeNames.PG_PLAN, queryConfig.name);\n  }\n\n  return span;\n}\n\nexport function handleExecutionResult(\n  config: PgInstrumentationConfig,\n  span: Span,\n  pgResult: pgTypes.QueryResult | pgTypes.QueryArrayResult | unknown\n) {\n  if (typeof config.responseHook === 'function') {\n    safeExecuteInTheMiddle(\n      () => {\n        config.responseHook!(span, {\n          data: pgResult as pgTypes.QueryResult | pgTypes.QueryArrayResult,\n        });\n      },\n      err => {\n        if (err) {\n          diag.error('Error running response hook', err);\n        }\n      },\n      true\n    );\n  }\n}\n\nexport function patchCallback(\n  instrumentationConfig: PgInstrumentationConfig,\n  span: Span,\n  cb: PostgresCallback,\n  attributes: Attributes,\n  recordDuration: { (): void }\n): PostgresCallback {\n  return function patchedCallback(\n    this: PgClientExtended,\n    err: Error,\n    res: object\n  ) {\n    if (err) {\n      if (Object.prototype.hasOwnProperty.call(err, 'code')) {\n        attributes[ATTR_ERROR_TYPE] = (err as any)['code'];\n      }\n\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: err.message,\n      });\n    } else {\n      handleExecutionResult(instrumentationConfig, span, res);\n    }\n\n    recordDuration();\n    span.end();\n    cb.call(this, err, res);\n  };\n}\n\nexport function getPoolName(pool: PgPoolOptionsParams): string {\n  let poolName = '';\n  poolName += (pool?.host ? `${pool.host}` : 'unknown_host') + ':';\n  poolName += (pool?.port ? `${pool.port}` : 'unknown_port') + '/';\n  poolName += pool?.database ? `${pool.database}` : 'unknown_database';\n\n  return poolName.trim();\n}\n\nexport interface poolConnectionsCounter {\n  used: number;\n  idle: number;\n  pending: number;\n}\n\nexport function updateCounter(\n  poolName: string,\n  pool: PgPoolExtended,\n  connectionCount: UpDownCounter,\n  connectionPendingRequests: UpDownCounter,\n  latestCounter: poolConnectionsCounter\n): poolConnectionsCounter {\n  const all = pool.totalCount;\n  const pending = pool.waitingCount;\n  const idle = pool.idleCount;\n  const used = all - idle;\n\n  connectionCount.add(used - latestCounter.used, {\n    [ATTR_DB_CLIENT_CONNECTION_STATE]: DB_CLIENT_CONNECTION_STATE_VALUE_USED,\n    [ATTR_DB_CLIENT_CONNECTION_POOL_NAME]: poolName,\n  });\n\n  connectionCount.add(idle - latestCounter.idle, {\n    [ATTR_DB_CLIENT_CONNECTION_STATE]: DB_CLIENT_CONNECTION_STATE_VALUE_IDLE,\n    [ATTR_DB_CLIENT_CONNECTION_POOL_NAME]: poolName,\n  });\n\n  connectionPendingRequests.add(pending - latestCounter.pending, {\n    [ATTR_DB_CLIENT_CONNECTION_POOL_NAME]: poolName,\n  });\n\n  return { used: used, idle: idle, pending: pending };\n}\n\nexport function patchCallbackPGPool(\n  span: Span,\n  cb: PgPoolCallback\n): PgPoolCallback {\n  return function patchedCallback(\n    this: PgPoolExtended,\n    err: Error,\n    res: object,\n    done: any\n  ) {\n    if (err) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: err.message,\n      });\n    }\n    span.end();\n    cb.call(this, err, res, done);\n  };\n}\n\nexport function patchClientConnectCallback(span: Span, cb: Function): Function {\n  return function patchedClientConnectCallback(\n    this: pgTypes.Client,\n    err: Error\n  ) {\n    if (err) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: err.message,\n      });\n    }\n    span.end();\n    cb.apply(this, arguments);\n  };\n}\n\n/**\n * Attempt to get a message string from a thrown value, while being quite\n * defensive, to recognize the fact that, in JS, any kind of value (even\n * primitives) can be thrown.\n */\nexport function getErrorMessage(e: unknown) {\n  return typeof e === 'object' && e !== null && 'message' in e\n    ? String((e as { message?: unknown }).message)\n    : undefined;\n}\n\nexport function isObjectWithTextString(it: unknown): it is ObjectWithText {\n  return (\n    typeof it === 'object' &&\n    typeof (it as null | { text?: unknown })?.text === 'string'\n  );\n}\n\nexport type ObjectWithText = {\n  text: string;\n  [k: string]: unknown;\n};\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// this is autogenerated file, see scripts/version-update.js\nexport const PACKAGE_VERSION = '0.51.1';\nexport const PACKAGE_NAME = '@opentelemetry/instrumentation-pg';\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  isWrapped,\n  InstrumentationBase,\n  InstrumentationNodeModuleDefinition,\n  safeExecuteInTheMiddle,\n  InstrumentationNodeModuleFile,\n} from '@opentelemetry/instrumentation';\nimport {\n  context,\n  trace,\n  Span,\n  SpanStatusCode,\n  SpanKind,\n  Histogram,\n  ValueType,\n  Attributes,\n  HrTime,\n  UpDownCounter,\n} from '@opentelemetry/api';\nimport type * as pgTypes from 'pg';\nimport type * as pgPoolTypes from 'pg-pool';\nimport {\n  PgClientConnect,\n  PgClientExtended,\n  PostgresCallback,\n  PgPoolExtended,\n  PgPoolCallback,\n  EVENT_LISTENERS_SET,\n} from './internal-types';\nimport { PgInstrumentationConfig } from './types';\nimport * as utils from './utils';\nimport { addSqlCommenterComment } from '@opentelemetry/sql-common';\n/** @knipignore */\nimport { PACKAGE_NAME, PACKAGE_VERSION } from './version';\nimport { SpanNames } from './enums/SpanNames';\nimport {\n  hrTime,\n  hrTimeDuration,\n  hrTimeToMilliseconds,\n} from '@opentelemetry/core';\nimport {\n  DBSYSTEMVALUES_POSTGRESQL,\n  SEMATTRS_DB_SYSTEM,\n  ATTR_ERROR_TYPE,\n  ATTR_SERVER_PORT,\n  ATTR_SERVER_ADDRESS,\n} from '@opentelemetry/semantic-conventions';\nimport {\n  METRIC_DB_CLIENT_CONNECTION_COUNT,\n  METRIC_DB_CLIENT_CONNECTION_PENDING_REQUESTS,\n  METRIC_DB_CLIENT_OPERATION_DURATION,\n  ATTR_DB_NAMESPACE,\n  ATTR_DB_OPERATION_NAME,\n} from './semconv';\n\nfunction extractModuleExports(module: any) {\n  return module[Symbol.toStringTag] === 'Module'\n    ? module.default // ESM\n    : module; // CommonJS\n}\n\nexport class PgInstrumentation extends InstrumentationBase<PgInstrumentationConfig> {\n  private _operationDuration!: Histogram;\n  private _connectionsCount!: UpDownCounter;\n  private _connectionPendingRequests!: UpDownCounter;\n  // Pool events connect, acquire, release and remove can be called\n  // multiple times without changing the values of total, idle and waiting\n  // connections. The _connectionsCounter is used to keep track of latest\n  // values and only update the metrics _connectionsCount and _connectionPendingRequests\n  // when the value change.\n  private _connectionsCounter: utils.poolConnectionsCounter = {\n    used: 0,\n    idle: 0,\n    pending: 0,\n  };\n\n  constructor(config: PgInstrumentationConfig = {}) {\n    super(PACKAGE_NAME, PACKAGE_VERSION, config);\n  }\n\n  override _updateMetricInstruments() {\n    this._operationDuration = this.meter.createHistogram(\n      METRIC_DB_CLIENT_OPERATION_DURATION,\n      {\n        description: 'Duration of database client operations.',\n        unit: 's',\n        valueType: ValueType.DOUBLE,\n        advice: {\n          explicitBucketBoundaries: [\n            0.001, 0.005, 0.01, 0.05, 0.1, 0.5, 1, 5, 10,\n          ],\n        },\n      }\n    );\n\n    this._connectionsCounter = {\n      idle: 0,\n      pending: 0,\n      used: 0,\n    };\n    this._connectionsCount = this.meter.createUpDownCounter(\n      METRIC_DB_CLIENT_CONNECTION_COUNT,\n      {\n        description:\n          'The number of connections that are currently in state described by the state attribute.',\n        unit: '{connection}',\n      }\n    );\n    this._connectionPendingRequests = this.meter.createUpDownCounter(\n      METRIC_DB_CLIENT_CONNECTION_PENDING_REQUESTS,\n      {\n        description:\n          'The number of current pending requests for an open connection.',\n        unit: '{connection}',\n      }\n    );\n  }\n\n  protected init() {\n    const SUPPORTED_PG_VERSIONS = ['>=8.0.3 <9'];\n\n    const modulePgNativeClient = new InstrumentationNodeModuleFile(\n      'pg/lib/native/client.js',\n      SUPPORTED_PG_VERSIONS,\n      this._patchPgClient.bind(this),\n      this._unpatchPgClient.bind(this)\n    );\n\n    const modulePgClient = new InstrumentationNodeModuleFile(\n      'pg/lib/client.js',\n      SUPPORTED_PG_VERSIONS,\n      this._patchPgClient.bind(this),\n      this._unpatchPgClient.bind(this)\n    );\n\n    const modulePG = new InstrumentationNodeModuleDefinition(\n      'pg',\n      SUPPORTED_PG_VERSIONS,\n      (module: any) => {\n        const moduleExports = extractModuleExports(module);\n\n        this._patchPgClient(moduleExports.Client);\n        return module;\n      },\n      (module: any) => {\n        const moduleExports = extractModuleExports(module);\n\n        this._unpatchPgClient(moduleExports.Client);\n        return module;\n      },\n      [modulePgClient, modulePgNativeClient]\n    );\n\n    const modulePGPool = new InstrumentationNodeModuleDefinition(\n      'pg-pool',\n      ['>=2.0.0 <4'],\n      (moduleExports: typeof pgPoolTypes) => {\n        if (isWrapped(moduleExports.prototype.connect)) {\n          this._unwrap(moduleExports.prototype, 'connect');\n        }\n        this._wrap(\n          moduleExports.prototype,\n          'connect',\n          this._getPoolConnectPatch() as any\n        );\n        return moduleExports;\n      },\n      (moduleExports: typeof pgPoolTypes) => {\n        if (isWrapped(moduleExports.prototype.connect)) {\n          this._unwrap(moduleExports.prototype, 'connect');\n        }\n      }\n    );\n\n    return [modulePG, modulePGPool];\n  }\n\n  private _patchPgClient(module: any) {\n    if (!module) {\n      return;\n    }\n\n    const moduleExports = extractModuleExports(module);\n\n    if (isWrapped(moduleExports.prototype.query)) {\n      this._unwrap(moduleExports.prototype, 'query');\n    }\n\n    if (isWrapped(moduleExports.prototype.connect)) {\n      this._unwrap(moduleExports.prototype, 'connect');\n    }\n\n    this._wrap(\n      moduleExports.prototype,\n      'query',\n      this._getClientQueryPatch() as any\n    );\n\n    this._wrap(\n      moduleExports.prototype,\n      'connect',\n      this._getClientConnectPatch() as any\n    );\n\n    return module;\n  }\n\n  private _unpatchPgClient(module: any) {\n    const moduleExports = extractModuleExports(module);\n\n    if (isWrapped(moduleExports.prototype.query)) {\n      this._unwrap(moduleExports.prototype, 'query');\n    }\n\n    if (isWrapped(moduleExports.prototype.connect)) {\n      this._unwrap(moduleExports.prototype, 'connect');\n    }\n\n    return module;\n  }\n\n  private _getClientConnectPatch() {\n    const plugin = this;\n    return (original: PgClientConnect) => {\n      return function connect(this: pgTypes.Client, callback?: Function) {\n        if (utils.shouldSkipInstrumentation(plugin.getConfig())) {\n          return original.call(this, callback);\n        }\n\n        const span = plugin.tracer.startSpan(SpanNames.CONNECT, {\n          kind: SpanKind.CLIENT,\n          attributes: utils.getSemanticAttributesFromConnection(this),\n        });\n\n        if (callback) {\n          const parentSpan = trace.getSpan(context.active());\n          callback = utils.patchClientConnectCallback(span, callback);\n          if (parentSpan) {\n            callback = context.bind(context.active(), callback);\n          }\n        }\n\n        const connectResult: unknown = context.with(\n          trace.setSpan(context.active(), span),\n          () => {\n            return original.call(this, callback);\n          }\n        );\n\n        return handleConnectResult(span, connectResult);\n      };\n    };\n  }\n\n  private recordOperationDuration(attributes: Attributes, startTime: HrTime) {\n    const metricsAttributes: Attributes = {};\n    const keysToCopy = [\n      SEMATTRS_DB_SYSTEM,\n      ATTR_DB_NAMESPACE,\n      ATTR_ERROR_TYPE,\n      ATTR_SERVER_PORT,\n      ATTR_SERVER_ADDRESS,\n      ATTR_DB_OPERATION_NAME,\n    ];\n\n    keysToCopy.forEach(key => {\n      if (key in attributes) {\n        metricsAttributes[key] = attributes[key];\n      }\n    });\n\n    const durationSeconds =\n      hrTimeToMilliseconds(hrTimeDuration(startTime, hrTime())) / 1000;\n    this._operationDuration.record(durationSeconds, metricsAttributes);\n  }\n\n  private _getClientQueryPatch() {\n    const plugin = this;\n    return (original: typeof pgTypes.Client.prototype.query) => {\n      this._diag.debug('Patching pg.Client.prototype.query');\n      return function query(this: PgClientExtended, ...args: unknown[]) {\n        if (utils.shouldSkipInstrumentation(plugin.getConfig())) {\n          return original.apply(this, args as never);\n        }\n        const startTime = hrTime();\n\n        // client.query(text, cb?), client.query(text, values, cb?), and\n        // client.query(configObj, cb?) are all valid signatures. We construct\n        // a queryConfig obj from all (valid) signatures to build the span in a\n        // unified way. We verify that we at least have query text, and code\n        // defensively when dealing with `queryConfig` after that (to handle all\n        // the other invalid cases, like a non-array for values being provided).\n        // The type casts here reflect only what we've actually validated.\n        const arg0 = args[0];\n        const firstArgIsString = typeof arg0 === 'string';\n        const firstArgIsQueryObjectWithText =\n          utils.isObjectWithTextString(arg0);\n\n        // TODO: remove the `as ...` casts below when the TS version is upgraded.\n        // Newer TS versions will use the result of firstArgIsQueryObjectWithText\n        // to properly narrow arg0, but TS 4.3.5 does not.\n        const queryConfig = firstArgIsString\n          ? {\n              text: arg0 as string,\n              values: Array.isArray(args[1]) ? args[1] : undefined,\n            }\n          : firstArgIsQueryObjectWithText\n          ? (arg0 as utils.ObjectWithText)\n          : undefined;\n\n        const attributes: Attributes = {\n          [SEMATTRS_DB_SYSTEM]: DBSYSTEMVALUES_POSTGRESQL,\n          [ATTR_DB_NAMESPACE]: this.database,\n          [ATTR_SERVER_PORT]: this.connectionParameters.port,\n          [ATTR_SERVER_ADDRESS]: this.connectionParameters.host,\n        };\n\n        if (queryConfig?.text) {\n          attributes[ATTR_DB_OPERATION_NAME] =\n            utils.parseNormalizedOperationName(queryConfig?.text);\n        }\n\n        const recordDuration = () => {\n          plugin.recordOperationDuration(attributes, startTime);\n        };\n\n        const instrumentationConfig = plugin.getConfig();\n\n        const span = utils.handleConfigQuery.call(\n          this,\n          plugin.tracer,\n          instrumentationConfig,\n          queryConfig\n        );\n\n        // Modify query text w/ a tracing comment before invoking original for\n        // tracing, but only if args[0] has one of our expected shapes.\n        if (instrumentationConfig.addSqlCommenterCommentToQueries) {\n          if (firstArgIsString) {\n            args[0] = addSqlCommenterComment(span, arg0);\n          } else if (firstArgIsQueryObjectWithText && !('name' in arg0)) {\n            // In the case of a query object, we need to ensure there's no name field\n            // as this indicates a prepared query, where the comment would remain the same\n            // for every invocation and contain an outdated trace context.\n            args[0] = {\n              ...arg0,\n              text: addSqlCommenterComment(span, arg0.text),\n            };\n          }\n        }\n\n        // Bind callback (if any) to parent span (if any)\n        if (args.length > 0) {\n          const parentSpan = trace.getSpan(context.active());\n          if (typeof args[args.length - 1] === 'function') {\n            // Patch ParameterQuery callback\n            args[args.length - 1] = utils.patchCallback(\n              instrumentationConfig,\n              span,\n              args[args.length - 1] as PostgresCallback, // nb: not type safe.\n              attributes,\n              recordDuration\n            );\n\n            // If a parent span exists, bind the callback\n            if (parentSpan) {\n              args[args.length - 1] = context.bind(\n                context.active(),\n                args[args.length - 1]\n              );\n            }\n          } else if (typeof queryConfig?.callback === 'function') {\n            // Patch ConfigQuery callback\n            let callback = utils.patchCallback(\n              plugin.getConfig(),\n              span,\n              queryConfig.callback as PostgresCallback, // nb: not type safe.\n              attributes,\n              recordDuration\n            );\n\n            // If a parent span existed, bind the callback\n            if (parentSpan) {\n              callback = context.bind(context.active(), callback);\n            }\n\n            (args[0] as { callback?: PostgresCallback }).callback = callback;\n          }\n        }\n\n        const { requestHook } = instrumentationConfig;\n        if (typeof requestHook === 'function' && queryConfig) {\n          safeExecuteInTheMiddle(\n            () => {\n              // pick keys to expose explicitly, so we're not leaking pg package\n              // internals that are subject to change\n              const { database, host, port, user } = this.connectionParameters;\n              const connection = { database, host, port, user };\n\n              requestHook(span, {\n                connection,\n                query: {\n                  text: queryConfig.text,\n                  // nb: if `client.query` is called with illegal arguments\n                  // (e.g., if `queryConfig.values` is passed explicitly, but a\n                  // non-array is given), then the type casts will be wrong. But\n                  // we leave it up to the queryHook to handle that, and we\n                  // catch and swallow any errors it throws. The other options\n                  // are all worse. E.g., we could leave `queryConfig.values`\n                  // and `queryConfig.name` as `unknown`, but then the hook body\n                  // would be forced to validate (or cast) them before using\n                  // them, which seems incredibly cumbersome given that these\n                  // casts will be correct 99.9% of the time -- and pg.query\n                  // will immediately throw during development in the other .1%\n                  // of cases. Alternatively, we could simply skip calling the\n                  // hook when `values` or `name` don't have the expected type,\n                  // but that would add unnecessary validation overhead to every\n                  // hook invocation and possibly be even more confusing/unexpected.\n                  values: queryConfig.values as unknown[],\n                  name: queryConfig.name as string | undefined,\n                },\n              });\n            },\n            err => {\n              if (err) {\n                plugin._diag.error('Error running query hook', err);\n              }\n            },\n            true\n          );\n        }\n\n        let result: unknown;\n        try {\n          result = original.apply(this, args as never);\n        } catch (e: unknown) {\n          span.setStatus({\n            code: SpanStatusCode.ERROR,\n            message: utils.getErrorMessage(e),\n          });\n          span.end();\n          throw e;\n        }\n\n        // Bind promise to parent span and end the span\n        if (result instanceof Promise) {\n          return result\n            .then((result: unknown) => {\n              // Return a pass-along promise which ends the span and then goes to user's orig resolvers\n              return new Promise(resolve => {\n                utils.handleExecutionResult(plugin.getConfig(), span, result);\n                recordDuration();\n                span.end();\n                resolve(result);\n              });\n            })\n            .catch((error: Error) => {\n              return new Promise((_, reject) => {\n                span.setStatus({\n                  code: SpanStatusCode.ERROR,\n                  message: error.message,\n                });\n                recordDuration();\n                span.end();\n                reject(error);\n              });\n            });\n        }\n\n        // else returns void\n        return result; // void\n      };\n    };\n  }\n\n  private _setPoolConnectEventListeners(pgPool: PgPoolExtended) {\n    if (pgPool[EVENT_LISTENERS_SET]) return;\n    const poolName = utils.getPoolName(pgPool.options);\n\n    pgPool.on('connect', () => {\n      this._connectionsCounter = utils.updateCounter(\n        poolName,\n        pgPool,\n        this._connectionsCount,\n        this._connectionPendingRequests,\n        this._connectionsCounter\n      );\n    });\n\n    pgPool.on('acquire', () => {\n      this._connectionsCounter = utils.updateCounter(\n        poolName,\n        pgPool,\n        this._connectionsCount,\n        this._connectionPendingRequests,\n        this._connectionsCounter\n      );\n    });\n\n    pgPool.on('remove', () => {\n      this._connectionsCounter = utils.updateCounter(\n        poolName,\n        pgPool,\n        this._connectionsCount,\n        this._connectionPendingRequests,\n        this._connectionsCounter\n      );\n    });\n\n    pgPool.on('release' as any, () => {\n      this._connectionsCounter = utils.updateCounter(\n        poolName,\n        pgPool,\n        this._connectionsCount,\n        this._connectionPendingRequests,\n        this._connectionsCounter\n      );\n    });\n    pgPool[EVENT_LISTENERS_SET] = true;\n  }\n\n  private _getPoolConnectPatch() {\n    const plugin = this;\n    return (originalConnect: typeof pgPoolTypes.prototype.connect) => {\n      return function connect(this: PgPoolExtended, callback?: PgPoolCallback) {\n        if (utils.shouldSkipInstrumentation(plugin.getConfig())) {\n          return originalConnect.call(this, callback as any);\n        }\n\n        // setup span\n        const span = plugin.tracer.startSpan(SpanNames.POOL_CONNECT, {\n          kind: SpanKind.CLIENT,\n          attributes: utils.getSemanticAttributesFromPool(this.options),\n        });\n\n        plugin._setPoolConnectEventListeners(this);\n\n        if (callback) {\n          const parentSpan = trace.getSpan(context.active());\n          callback = utils.patchCallbackPGPool(\n            span,\n            callback\n          ) as PgPoolCallback;\n          // If a parent span exists, bind the callback\n          if (parentSpan) {\n            callback = context.bind(context.active(), callback);\n          }\n        }\n\n        const connectResult: unknown = context.with(\n          trace.setSpan(context.active(), span),\n          () => {\n            return originalConnect.call(this, callback as any);\n          }\n        );\n\n        return handleConnectResult(span, connectResult);\n      };\n    };\n  }\n}\n\nfunction handleConnectResult(span: Span, connectResult: unknown) {\n  if (!(connectResult instanceof Promise)) {\n    return connectResult;\n  }\n\n  const connectResultPromise = connectResult as Promise<unknown>;\n  return context.bind(\n    context.active(),\n    connectResultPromise\n      .then(result => {\n        span.end();\n        return result;\n      })\n      .catch((error: unknown) => {\n        span.setStatus({\n          code: SpanStatusCode.ERROR,\n          message: utils.getErrorMessage(error),\n        });\n        span.end();\n        return Promise.reject(error);\n      })\n  );\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport * from './instrumentation';\nexport * from './types';\nexport * from './enums/AttributeNames';\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// this is autogenerated file, see scripts/version-update.js\nexport const PACKAGE_VERSION = '0.45.2';\nexport const PACKAGE_NAME = '@opentelemetry/instrumentation-hapi';\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type * as Hapi from '@hapi/hapi';\n\nexport const HapiComponentName = '@hapi/hapi';\n\n/**\n * This symbol is used to mark a Hapi route handler or server extension handler as\n * already patched, since its possible to use these handlers multiple times\n * i.e. when allowing multiple versions of one plugin, or when registering a plugin\n * multiple times on different servers.\n */\nexport const handlerPatched: unique symbol = Symbol('hapi-handler-patched');\n\nexport type HapiServerRouteInputMethod = (route: HapiServerRouteInput) => void;\n\nexport type HapiServerRouteInput =\n  | PatchableServerRoute\n  | PatchableServerRoute[];\n\nexport type PatchableServerRoute = Hapi.ServerRoute<any> & {\n  [handlerPatched]?: boolean;\n};\n\nexport type HapiPluginObject<T> = Hapi.ServerRegisterPluginObject<T>;\n\nexport type HapiPluginInput<T> =\n  | HapiPluginObject<T>\n  | Array<HapiPluginObject<T>>;\n\nexport type RegisterFunction<T> = (\n  plugin: HapiPluginInput<T>,\n  options?: Hapi.ServerRegisterOptions\n) => Promise<void>;\n\nexport type PatchableExtMethod = Hapi.Lifecycle.Method & {\n  [handlerPatched]?: boolean;\n};\n\nexport type ServerExtDirectInput = [\n  Hapi.ServerRequestExtType,\n  Hapi.Lifecycle.Method,\n  (Hapi.ServerExtOptions | undefined)?\n];\n\nexport const HapiLayerType = {\n  ROUTER: 'router',\n  PLUGIN: 'plugin',\n  EXT: 'server.ext',\n};\n\nexport const HapiLifecycleMethodNames = new Set([\n  'onPreAuth',\n  'onCredentials',\n  'onPostAuth',\n  'onPreHandler',\n  'onPostHandler',\n  'onPreResponse',\n  'onRequest',\n]);\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport enum AttributeNames {\n  HAPI_TYPE = 'hapi.type',\n  PLUGIN_NAME = 'hapi.plugin.name',\n  EXT_TYPE = 'server.ext.type',\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SpanAttributes } from '@opentelemetry/api';\nimport {\n  SEMATTRS_HTTP_METHOD,\n  SEMATTRS_HTTP_ROUTE,\n} from '@opentelemetry/semantic-conventions';\nimport type * as Hapi from '@hapi/hapi';\nimport {\n  HapiLayerType,\n  HapiLifecycleMethodNames,\n  HapiPluginObject,\n  PatchableExtMethod,\n  ServerExtDirectInput,\n} from './internal-types';\nimport { AttributeNames } from './enums/AttributeNames';\n\nexport function getPluginName<T>(plugin: Hapi.Plugin<T>): string {\n  if ((plugin as Hapi.PluginNameVersion).name) {\n    return (plugin as Hapi.PluginNameVersion).name;\n  } else {\n    return (plugin as Hapi.PluginPackage).pkg.name;\n  }\n}\n\nexport const isLifecycleExtType = (\n  variableToCheck: unknown\n): variableToCheck is Hapi.ServerRequestExtType => {\n  return (\n    typeof variableToCheck === 'string' &&\n    HapiLifecycleMethodNames.has(variableToCheck)\n  );\n};\n\nexport const isLifecycleExtEventObj = (\n  variableToCheck: unknown\n): variableToCheck is Hapi.ServerExtEventsRequestObject => {\n  const event = (variableToCheck as Hapi.ServerExtEventsRequestObject)?.type;\n  return event !== undefined && isLifecycleExtType(event);\n};\n\nexport const isDirectExtInput = (\n  variableToCheck: unknown\n): variableToCheck is ServerExtDirectInput => {\n  return (\n    Array.isArray(variableToCheck) &&\n    variableToCheck.length <= 3 &&\n    isLifecycleExtType(variableToCheck[0]) &&\n    typeof variableToCheck[1] === 'function'\n  );\n};\n\nexport const isPatchableExtMethod = (\n  variableToCheck: PatchableExtMethod | PatchableExtMethod[]\n): variableToCheck is PatchableExtMethod => {\n  return !Array.isArray(variableToCheck);\n};\n\nexport const getRouteMetadata = (\n  route: Hapi.ServerRoute,\n  pluginName?: string\n): {\n  attributes: SpanAttributes;\n  name: string;\n} => {\n  if (pluginName) {\n    return {\n      attributes: {\n        [SEMATTRS_HTTP_ROUTE]: route.path,\n        [SEMATTRS_HTTP_METHOD]: route.method,\n        [AttributeNames.HAPI_TYPE]: HapiLayerType.PLUGIN,\n        [AttributeNames.PLUGIN_NAME]: pluginName,\n      },\n      name: `${pluginName}: route - ${route.path}`,\n    };\n  }\n  return {\n    attributes: {\n      [SEMATTRS_HTTP_ROUTE]: route.path,\n      [SEMATTRS_HTTP_METHOD]: route.method,\n      [AttributeNames.HAPI_TYPE]: HapiLayerType.ROUTER,\n    },\n    name: `route - ${route.path}`,\n  };\n};\n\nexport const getExtMetadata = (\n  extPoint: Hapi.ServerRequestExtType,\n  pluginName?: string\n): {\n  attributes: SpanAttributes;\n  name: string;\n} => {\n  if (pluginName) {\n    return {\n      attributes: {\n        [AttributeNames.EXT_TYPE]: extPoint,\n        [AttributeNames.HAPI_TYPE]: HapiLayerType.EXT,\n        [AttributeNames.PLUGIN_NAME]: pluginName,\n      },\n      name: `${pluginName}: ext - ${extPoint}`,\n    };\n  }\n  return {\n    attributes: {\n      [AttributeNames.EXT_TYPE]: extPoint,\n      [AttributeNames.HAPI_TYPE]: HapiLayerType.EXT,\n    },\n    name: `ext - ${extPoint}`,\n  };\n};\n\nexport const getPluginFromInput = <T>(\n  pluginObj: HapiPluginObject<T>\n): Hapi.Plugin<T, void> => {\n  if ('plugin' in pluginObj) {\n    if ('plugin' in pluginObj.plugin) {\n      return pluginObj.plugin.plugin;\n    }\n    return pluginObj.plugin;\n  }\n  return pluginObj;\n};\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as api from '@opentelemetry/api';\nimport { getRPCMetadata, RPCType } from '@opentelemetry/core';\nimport {\n  InstrumentationBase,\n  InstrumentationConfig,\n  InstrumentationNodeModuleDefinition,\n  isWrapped,\n} from '@opentelemetry/instrumentation';\n\nimport type * as Hapi from '@hapi/hapi';\n/** @knipignore */\nimport { PACKAGE_NAME, PACKAGE_VERSION } from './version';\nimport {\n  HapiComponentName,\n  HapiServerRouteInput,\n  handlerPatched,\n  PatchableServerRoute,\n  HapiServerRouteInputMethod,\n  HapiPluginInput,\n  RegisterFunction,\n  PatchableExtMethod,\n  ServerExtDirectInput,\n} from './internal-types';\nimport {\n  getRouteMetadata,\n  getPluginName,\n  isLifecycleExtType,\n  isLifecycleExtEventObj,\n  getExtMetadata,\n  isDirectExtInput,\n  isPatchableExtMethod,\n  getPluginFromInput,\n} from './utils';\n\n/** Hapi instrumentation for OpenTelemetry */\nexport class HapiInstrumentation extends InstrumentationBase {\n  constructor(config: InstrumentationConfig = {}) {\n    super(PACKAGE_NAME, PACKAGE_VERSION, config);\n  }\n\n  protected init() {\n    return new InstrumentationNodeModuleDefinition(\n      HapiComponentName,\n      ['>=17.0.0 <22'],\n      (module: any) => {\n        const moduleExports: typeof Hapi =\n          module[Symbol.toStringTag] === 'Module' ? module.default : module;\n        if (!isWrapped(moduleExports.server)) {\n          this._wrap(\n            moduleExports,\n            'server',\n            this._getServerPatch.bind(this) as any\n          );\n        }\n\n        if (!isWrapped(moduleExports.Server)) {\n          this._wrap(\n            moduleExports,\n            'Server',\n            this._getServerPatch.bind(this) as any\n          );\n        }\n        return moduleExports;\n      },\n      (module: any) => {\n        const moduleExports: typeof Hapi =\n          module[Symbol.toStringTag] === 'Module' ? module.default : module;\n        this._massUnwrap([moduleExports], ['server', 'Server']);\n      }\n    );\n  }\n\n  /**\n   * Patches the Hapi.server and Hapi.Server functions in order to instrument\n   * the server.route, server.ext, and server.register functions via calls to the\n   * @function _getServerRoutePatch, @function _getServerExtPatch, and\n   * @function _getServerRegisterPatch functions\n   * @param original - the original Hapi Server creation function\n   */\n  private _getServerPatch(\n    original: (options?: Hapi.ServerOptions) => Hapi.Server\n  ) {\n    const instrumentation: HapiInstrumentation = this;\n    const self = this;\n    return function server(this: Hapi.Server, opts?: Hapi.ServerOptions) {\n      const newServer: Hapi.Server = original.apply(this, [opts]);\n\n      self._wrap(newServer, 'route', originalRouter => {\n        return instrumentation._getServerRoutePatch.bind(instrumentation)(\n          originalRouter\n        );\n      });\n\n      // Casting as any is necessary here due to multiple overloads on the Hapi.ext\n      // function, which requires supporting a variety of different parameters\n      // as extension inputs\n      self._wrap(newServer, 'ext', originalExtHandler => {\n        return instrumentation._getServerExtPatch.bind(instrumentation)(\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          originalExtHandler as any\n        );\n      });\n\n      // Casting as any is necessary here due to multiple overloads on the Hapi.Server.register\n      // function, which requires supporting a variety of different types of Plugin inputs\n      self._wrap(\n        newServer,\n        'register',\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        instrumentation._getServerRegisterPatch.bind(instrumentation) as any\n      );\n      return newServer;\n    };\n  }\n\n  /**\n   * Patches the plugin register function used by the Hapi Server. This function\n   * goes through each plugin that is being registered and adds instrumentation\n   * via a call to the @function _wrapRegisterHandler function.\n   * @param {RegisterFunction<T>} original - the original register function which\n   * registers each plugin on the server\n   */\n  private _getServerRegisterPatch<T>(\n    original: RegisterFunction<T>\n  ): RegisterFunction<T> {\n    const instrumentation: HapiInstrumentation = this;\n    return function register(\n      this: Hapi.Server,\n      pluginInput: HapiPluginInput<T>,\n      options?: Hapi.ServerRegisterOptions\n    ) {\n      if (Array.isArray(pluginInput)) {\n        for (const pluginObj of pluginInput) {\n          const plugin = getPluginFromInput(pluginObj);\n          instrumentation._wrapRegisterHandler(plugin);\n        }\n      } else {\n        const plugin = getPluginFromInput(pluginInput);\n        instrumentation._wrapRegisterHandler(plugin);\n      }\n      return original.apply(this, [pluginInput, options]);\n    };\n  }\n\n  /**\n   * Patches the Server.ext function which adds extension methods to the specified\n   * point along the request lifecycle. This function accepts the full range of\n   * accepted input into the standard Hapi `server.ext` function. For each extension,\n   * it adds instrumentation to the handler via a call to the @function _wrapExtMethods\n   * function.\n   * @param original - the original ext function which adds the extension method to the server\n   * @param {string} [pluginName] - if present, represents the name of the plugin responsible\n   * for adding this server extension. Else, signifies that the extension was added directly\n   */\n  private _getServerExtPatch(\n    original: (...args: unknown[]) => unknown,\n    pluginName?: string\n  ) {\n    const instrumentation: HapiInstrumentation = this;\n\n    return function ext(\n      this: ThisParameterType<typeof original>,\n      ...args: Parameters<typeof original>\n    ) {\n      if (Array.isArray(args[0])) {\n        const eventsList:\n          | Hapi.ServerExtEventsObject[]\n          | Hapi.ServerExtEventsRequestObject[] = args[0];\n        for (let i = 0; i < eventsList.length; i++) {\n          const eventObj = eventsList[i];\n          if (isLifecycleExtType(eventObj.type)) {\n            const lifecycleEventObj =\n              eventObj as Hapi.ServerExtEventsRequestObject;\n            const handler = instrumentation._wrapExtMethods(\n              lifecycleEventObj.method,\n              eventObj.type,\n              pluginName\n            );\n            lifecycleEventObj.method = handler;\n            eventsList[i] = lifecycleEventObj;\n          }\n        }\n        return original.apply(this, args);\n      } else if (isDirectExtInput(args)) {\n        const extInput: ServerExtDirectInput = args;\n        const method: PatchableExtMethod = extInput[1];\n        const handler = instrumentation._wrapExtMethods(\n          method,\n          extInput[0],\n          pluginName\n        );\n        return original.apply(this, [extInput[0], handler, extInput[2]]);\n      } else if (isLifecycleExtEventObj(args[0])) {\n        const lifecycleEventObj = args[0];\n        const handler = instrumentation._wrapExtMethods(\n          lifecycleEventObj.method,\n          lifecycleEventObj.type,\n          pluginName\n        );\n        lifecycleEventObj.method = handler;\n        return original.call(this, lifecycleEventObj);\n      }\n      return original.apply(this, args);\n    };\n  }\n\n  /**\n   * Patches the Server.route function. This function accepts either one or an array\n   * of Hapi.ServerRoute objects and adds instrumentation on each route via a call to\n   * the @function _wrapRouteHandler function.\n   * @param {HapiServerRouteInputMethod} original - the original route function which adds\n   * the route to the server\n   * @param {string} [pluginName] - if present, represents the name of the plugin responsible\n   * for adding this server route. Else, signifies that the route was added directly\n   */\n  private _getServerRoutePatch(\n    original: HapiServerRouteInputMethod,\n    pluginName?: string\n  ) {\n    const instrumentation: HapiInstrumentation = this;\n    return function route(\n      this: Hapi.Server,\n      route: HapiServerRouteInput\n    ): void {\n      if (Array.isArray(route)) {\n        for (let i = 0; i < route.length; i++) {\n          const newRoute = instrumentation._wrapRouteHandler.call(\n            instrumentation,\n            route[i],\n            pluginName\n          );\n          route[i] = newRoute;\n        }\n      } else {\n        route = instrumentation._wrapRouteHandler.call(\n          instrumentation,\n          route,\n          pluginName\n        );\n      }\n      return original.apply(this, [route]);\n    };\n  }\n\n  /**\n   * Wraps newly registered plugins to add instrumentation to the plugin's clone of\n   * the original server. Specifically, wraps the server.route and server.ext functions\n   * via calls to @function _getServerRoutePatch and @function _getServerExtPatch\n   * @param {Hapi.Plugin<T>} plugin - the new plugin which is being instrumented\n   */\n  private _wrapRegisterHandler<T>(plugin: Hapi.Plugin<T>): void {\n    const instrumentation: HapiInstrumentation = this;\n    const pluginName = getPluginName(plugin);\n    const oldRegister = plugin.register;\n    const self = this;\n    const newRegisterHandler = function (\n      this: typeof plugin,\n      server: Hapi.Server,\n      options: T\n    ) {\n      self._wrap(server, 'route', original => {\n        return instrumentation._getServerRoutePatch.bind(instrumentation)(\n          original,\n          pluginName\n        );\n      });\n\n      // Casting as any is necessary here due to multiple overloads on the Hapi.ext\n      // function, which requires supporting a variety of different parameters\n      // as extension inputs\n      self._wrap(server, 'ext', originalExtHandler => {\n        return instrumentation._getServerExtPatch.bind(instrumentation)(\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          originalExtHandler as any,\n          pluginName\n        );\n      });\n      return oldRegister.call(this, server, options);\n    };\n    plugin.register = newRegisterHandler;\n  }\n\n  /**\n   * Wraps request extension methods to add instrumentation to each new extension handler.\n   * Patches each individual extension in order to create the\n   * span and propagate context. It does not create spans when there is no parent span.\n   * @param {PatchableExtMethod | PatchableExtMethod[]} method - the request extension\n   * handler which is being instrumented\n   * @param {Hapi.ServerRequestExtType} extPoint - the point in the Hapi request lifecycle\n   * which this extension targets\n   * @param {string} [pluginName] - if present, represents the name of the plugin responsible\n   * for adding this server route. Else, signifies that the route was added directly\n   */\n  private _wrapExtMethods<T extends PatchableExtMethod | PatchableExtMethod[]>(\n    method: T,\n    extPoint: Hapi.ServerRequestExtType,\n    pluginName?: string\n  ): T {\n    const instrumentation: HapiInstrumentation = this;\n    if (method instanceof Array) {\n      for (let i = 0; i < method.length; i++) {\n        method[i] = instrumentation._wrapExtMethods(\n          method[i],\n          extPoint\n        ) as PatchableExtMethod;\n      }\n      return method;\n    } else if (isPatchableExtMethod(method)) {\n      if (method[handlerPatched] === true) return method;\n      method[handlerPatched] = true;\n\n      const newHandler: PatchableExtMethod = async function (\n        ...params: Parameters<Hapi.Lifecycle.Method>\n      ) {\n        if (api.trace.getSpan(api.context.active()) === undefined) {\n          return await method.apply(this, params);\n        }\n        const metadata = getExtMetadata(extPoint, pluginName);\n        const span = instrumentation.tracer.startSpan(metadata.name, {\n          attributes: metadata.attributes,\n        });\n        try {\n          return await api.context.with<\n            Parameters<Hapi.Lifecycle.Method>,\n            Hapi.Lifecycle.Method\n          >(\n            api.trace.setSpan(api.context.active(), span),\n            method,\n            undefined,\n            ...params\n          );\n        } catch (err: any) {\n          span.recordException(err);\n          span.setStatus({\n            code: api.SpanStatusCode.ERROR,\n            message: err.message,\n          });\n          throw err;\n        } finally {\n          span.end();\n        }\n      };\n      return newHandler as T;\n    }\n    return method;\n  }\n\n  /**\n   * Patches each individual route handler method in order to create the\n   * span and propagate context. It does not create spans when there is no parent span.\n   * @param {PatchableServerRoute} route - the route handler which is being instrumented\n   * @param {string} [pluginName] - if present, represents the name of the plugin responsible\n   * for adding this server route. Else, signifies that the route was added directly\n   */\n  private _wrapRouteHandler(\n    route: PatchableServerRoute,\n    pluginName?: string\n  ): PatchableServerRoute {\n    const instrumentation: HapiInstrumentation = this;\n    if (route[handlerPatched] === true) return route;\n    route[handlerPatched] = true;\n\n    const wrapHandler: (\n      oldHandler: Hapi.Lifecycle.Method\n    ) => Hapi.Lifecycle.Method = oldHandler => {\n      return async function (...params: Parameters<Hapi.Lifecycle.Method>) {\n        if (api.trace.getSpan(api.context.active()) === undefined) {\n          return await oldHandler.call(this, ...params);\n        }\n        const rpcMetadata = getRPCMetadata(api.context.active());\n        if (rpcMetadata?.type === RPCType.HTTP) {\n          rpcMetadata.route = route.path;\n        }\n        const metadata = getRouteMetadata(route, pluginName);\n        const span = instrumentation.tracer.startSpan(metadata.name, {\n          attributes: metadata.attributes,\n        });\n        try {\n          return await api.context.with(\n            api.trace.setSpan(api.context.active(), span),\n            () => oldHandler.call(this, ...params)\n          );\n        } catch (err: any) {\n          span.recordException(err);\n          span.setStatus({\n            code: api.SpanStatusCode.ERROR,\n            message: err.message,\n          });\n          throw err;\n        } finally {\n          span.end();\n        }\n      };\n    };\n\n    if (typeof route.handler === 'function') {\n      route.handler = wrapHandler(route.handler as Hapi.Lifecycle.Method);\n    } else if (typeof route.options === 'function') {\n      const oldOptions = route.options;\n      route.options = function (server) {\n        const options = oldOptions(server);\n        if (typeof options.handler === 'function') {\n          options.handler = wrapHandler(\n            options.handler as Hapi.Lifecycle.Method\n          );\n        }\n        return options;\n      };\n    } else if (typeof route.options?.handler === 'function') {\n      route.options.handler = wrapHandler(\n        route.options.handler as Hapi.Lifecycle.Method\n      );\n    }\n    return route;\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport * from './instrumentation';\nexport * from './enums/AttributeNames';\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Span } from '@opentelemetry/api';\nimport { InstrumentationConfig } from '@opentelemetry/instrumentation';\n\nexport enum KoaLayerType {\n  ROUTER = 'router',\n  MIDDLEWARE = 'middleware',\n}\n\n/**\n * Information about the current Koa middleware layer\n * The middleware layer type is any by default.\n * One can install koa types packages `@types/koa` and `@types/koa__router`\n * with compatible versions to the koa version used in the project\n * to get more specific types for the middleware layer property.\n *\n * Example use in a custom attribute function:\n * ```ts\n * import type { Middleware, ParameterizedContext, DefaultState } from 'koa';\n * import type { RouterParamContext } from '@koa/router';\n *\n * type KoaContext = ParameterizedContext<DefaultState, RouterParamContext>;\n * type KoaMiddleware = Middleware<DefaultState, KoaContext>;\n *\n * const koaConfig: KoaInstrumentationConfig<KoaContext, KoaMiddleware> = {\n *  requestHook: (span: Span, info: KoaRequestInfo<KoaContext, KoaMiddleware>) => {\n *   // custom typescript code that can access the typed into.middlewareLayer and info.context\n * }\n *\n */\nexport type KoaRequestInfo<KoaContextType = any, KoaMiddlewareType = any> = {\n  context: KoaContextType;\n  middlewareLayer: KoaMiddlewareType;\n  layerType: KoaLayerType;\n};\n\n/**\n * Function that can be used to add custom attributes to the current span\n * @param span - The Express middleware layer span.\n * @param context - The current KoaContext.\n */\nexport interface KoaRequestCustomAttributeFunction<\n  KoaContextType = any,\n  KoaMiddlewareType = any\n> {\n  (span: Span, info: KoaRequestInfo<KoaContextType, KoaMiddlewareType>): void;\n}\n\n/**\n * Options available for the Koa Instrumentation (see [documentation](https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-Instrumentation-koa#koa-Instrumentation-options))\n */\nexport interface KoaInstrumentationConfig<\n  KoaContextType = any,\n  KoaMiddlewareType = any\n> extends InstrumentationConfig {\n  /** Ignore specific layers based on their type */\n  ignoreLayersType?: KoaLayerType[];\n  /** Function for adding custom attributes to each middleware layer span */\n  requestHook?: KoaRequestCustomAttributeFunction<\n    KoaContextType,\n    KoaMiddlewareType\n  >;\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// this is autogenerated file, see scripts/version-update.js\nexport const PACKAGE_VERSION = '0.47.1';\nexport const PACKAGE_NAME = '@opentelemetry/instrumentation-koa';\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport enum AttributeNames {\n  KOA_TYPE = 'koa.type',\n  KOA_NAME = 'koa.name',\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { KoaLayerType, KoaInstrumentationConfig } from './types';\nimport { KoaContext, KoaMiddleware } from './internal-types';\nimport { AttributeNames } from './enums/AttributeNames';\nimport { Attributes } from '@opentelemetry/api';\nimport { SEMATTRS_HTTP_ROUTE } from '@opentelemetry/semantic-conventions';\n\nexport const getMiddlewareMetadata = (\n  context: KoaContext,\n  layer: KoaMiddleware,\n  isRouter: boolean,\n  layerPath?: string | RegExp\n): {\n  attributes: Attributes;\n  name: string;\n} => {\n  if (isRouter) {\n    return {\n      attributes: {\n        [AttributeNames.KOA_NAME]: layerPath?.toString(),\n        [AttributeNames.KOA_TYPE]: KoaLayerType.ROUTER,\n        [SEMATTRS_HTTP_ROUTE]: layerPath?.toString(),\n      },\n      name: context._matchedRouteName || `router - ${layerPath}`,\n    };\n  } else {\n    return {\n      attributes: {\n        [AttributeNames.KOA_NAME]: layer.name ?? 'middleware',\n        [AttributeNames.KOA_TYPE]: KoaLayerType.MIDDLEWARE,\n      },\n      name: `middleware - ${layer.name}`,\n    };\n  }\n};\n\n/**\n * Check whether the given request is ignored by configuration\n * @param [list] List of ignore patterns\n * @param [onException] callback for doing something when an exception has\n *     occurred\n */\nexport const isLayerIgnored = (\n  type: KoaLayerType,\n  config?: KoaInstrumentationConfig\n): boolean => {\n  return !!(\n    Array.isArray(config?.ignoreLayersType) &&\n    config?.ignoreLayersType?.includes(type)\n  );\n};\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport type { Middleware, ParameterizedContext, DefaultState } from 'koa';\nimport type * as Router from '@koa/router';\n\nexport type KoaContext = ParameterizedContext<\n  DefaultState,\n  Router.RouterParamContext\n>;\nexport type KoaMiddleware = Middleware<DefaultState, KoaContext> & {\n  router?: Router;\n};\n\n/**\n * This symbol is used to mark a Koa layer as being already instrumented\n * since its possible to use a given layer multiple times (ex: middlewares)\n */\nexport const kLayerPatched: unique symbol = Symbol('koa-layer-patched');\n\nexport type KoaPatchedMiddleware = KoaMiddleware & {\n  [kLayerPatched]?: boolean;\n};\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as api from '@opentelemetry/api';\nimport {\n  isWrapped,\n  InstrumentationBase,\n  InstrumentationNodeModuleDefinition,\n  safeExecuteInTheMiddle,\n} from '@opentelemetry/instrumentation';\n\nimport type * as koa from 'koa';\nimport { KoaLayerType, KoaInstrumentationConfig } from './types';\n/** @knipignore */\nimport { PACKAGE_NAME, PACKAGE_VERSION } from './version';\nimport { getMiddlewareMetadata, isLayerIgnored } from './utils';\nimport { getRPCMetadata, RPCType } from '@opentelemetry/core';\nimport {\n  kLayerPatched,\n  KoaContext,\n  KoaMiddleware,\n  KoaPatchedMiddleware,\n} from './internal-types';\n\n/** Koa instrumentation for OpenTelemetry */\nexport class KoaInstrumentation extends InstrumentationBase<KoaInstrumentationConfig> {\n  constructor(config: KoaInstrumentationConfig = {}) {\n    super(PACKAGE_NAME, PACKAGE_VERSION, config);\n  }\n\n  protected init() {\n    return new InstrumentationNodeModuleDefinition(\n      'koa',\n      ['>=2.0.0 <3'],\n      (module: any) => {\n        const moduleExports: typeof koa =\n          module[Symbol.toStringTag] === 'Module'\n            ? module.default // ESM\n            : module; // CommonJS\n        if (moduleExports == null) {\n          return moduleExports;\n        }\n        if (isWrapped(moduleExports.prototype.use)) {\n          this._unwrap(moduleExports.prototype, 'use');\n        }\n        this._wrap(\n          moduleExports.prototype,\n          'use',\n          this._getKoaUsePatch.bind(this)\n        );\n        return module;\n      },\n      (module: any) => {\n        const moduleExports: typeof koa =\n          module[Symbol.toStringTag] === 'Module'\n            ? module.default // ESM\n            : module; // CommonJS\n        if (isWrapped(moduleExports.prototype.use)) {\n          this._unwrap(moduleExports.prototype, 'use');\n        }\n      }\n    );\n  }\n\n  /**\n   * Patches the Koa.use function in order to instrument each original\n   * middleware layer which is introduced\n   * @param {KoaMiddleware} middleware - the original middleware function\n   */\n  private _getKoaUsePatch(original: (middleware: KoaMiddleware) => koa) {\n    const plugin = this;\n    return function use(this: koa, middlewareFunction: KoaMiddleware) {\n      let patchedFunction: KoaMiddleware;\n      if (middlewareFunction.router) {\n        patchedFunction = plugin._patchRouterDispatch(middlewareFunction);\n      } else {\n        patchedFunction = plugin._patchLayer(middlewareFunction, false);\n      }\n      return original.apply(this, [patchedFunction]);\n    };\n  }\n\n  /**\n   * Patches the dispatch function used by @koa/router. This function\n   * goes through each routed middleware and adds instrumentation via a call\n   * to the @function _patchLayer function.\n   * @param {KoaMiddleware} dispatchLayer - the original dispatch function which dispatches\n   * routed middleware\n   */\n  private _patchRouterDispatch(dispatchLayer: KoaMiddleware): KoaMiddleware {\n    api.diag.debug('Patching @koa/router dispatch');\n\n    const router = dispatchLayer.router;\n\n    const routesStack = router?.stack ?? [];\n    for (const pathLayer of routesStack) {\n      const path = pathLayer.path;\n      const pathStack = pathLayer.stack;\n      for (let j = 0; j < pathStack.length; j++) {\n        const routedMiddleware: KoaMiddleware = pathStack[j];\n        pathStack[j] = this._patchLayer(routedMiddleware, true, path);\n      }\n    }\n\n    return dispatchLayer;\n  }\n\n  /**\n   * Patches each individual @param middlewareLayer function in order to create the\n   * span and propagate context. It does not create spans when there is no parent span.\n   * @param {KoaMiddleware} middlewareLayer - the original middleware function.\n   * @param {boolean} isRouter - tracks whether the original middleware function\n   * was dispatched by the router originally\n   * @param {string?} layerPath - if present, provides additional data from the\n   * router about the routed path which the middleware is attached to\n   */\n  private _patchLayer(\n    middlewareLayer: KoaPatchedMiddleware,\n    isRouter: boolean,\n    layerPath?: string | RegExp\n  ): KoaMiddleware {\n    const layerType = isRouter ? KoaLayerType.ROUTER : KoaLayerType.MIDDLEWARE;\n    // Skip patching layer if its ignored in the config\n    if (\n      middlewareLayer[kLayerPatched] === true ||\n      isLayerIgnored(layerType, this.getConfig())\n    )\n      return middlewareLayer;\n\n    if (\n      middlewareLayer.constructor.name === 'GeneratorFunction' ||\n      middlewareLayer.constructor.name === 'AsyncGeneratorFunction'\n    ) {\n      api.diag.debug('ignoring generator-based Koa middleware layer');\n      return middlewareLayer;\n    }\n\n    middlewareLayer[kLayerPatched] = true;\n\n    api.diag.debug('patching Koa middleware layer');\n    return async (context: KoaContext, next: koa.Next) => {\n      const parent = api.trace.getSpan(api.context.active());\n      if (parent === undefined) {\n        return middlewareLayer(context, next);\n      }\n      const metadata = getMiddlewareMetadata(\n        context,\n        middlewareLayer,\n        isRouter,\n        layerPath\n      );\n      const span = this.tracer.startSpan(metadata.name, {\n        attributes: metadata.attributes,\n      });\n\n      const rpcMetadata = getRPCMetadata(api.context.active());\n\n      if (rpcMetadata?.type === RPCType.HTTP && context._matchedRoute) {\n        rpcMetadata.route = context._matchedRoute.toString();\n      }\n\n      const { requestHook } = this.getConfig();\n      if (requestHook) {\n        safeExecuteInTheMiddle(\n          () =>\n            requestHook(span, {\n              context,\n              middlewareLayer,\n              layerType,\n            }),\n          e => {\n            if (e) {\n              api.diag.error('koa instrumentation: request hook failed', e);\n            }\n          },\n          true\n        );\n      }\n\n      const newContext = api.trace.setSpan(api.context.active(), span);\n      return api.context.with(newContext, async () => {\n        try {\n          return await middlewareLayer(context, next);\n        } catch (err: any) {\n          span.recordException(err);\n          throw err;\n        } finally {\n          span.end();\n        }\n      });\n    };\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport * from './instrumentation';\nexport * from './types';\nexport * from './enums/AttributeNames';\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport enum AttributeNames {\n  CONNECT_TYPE = 'connect.type',\n  CONNECT_NAME = 'connect.name',\n}\n\nexport enum ConnectTypes {\n  MIDDLEWARE = 'middleware',\n  REQUEST_HANDLER = 'request_handler',\n}\n\nexport enum ConnectNames {\n  MIDDLEWARE = 'middleware',\n  REQUEST_HANDLER = 'request handler',\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// this is autogenerated file, see scripts/version-update.js\nexport const PACKAGE_VERSION = '0.43.1';\nexport const PACKAGE_NAME = '@opentelemetry/instrumentation-connect';\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { HandleFunction, IncomingMessage, Server } from 'connect';\n\nexport const _LAYERS_STORE_PROPERTY: unique symbol = Symbol(\n  'opentelemetry.instrumentation-connect.request-route-stack'\n);\n\nexport type UseArgs1 = [HandleFunction];\nexport type UseArgs2 = [string, HandleFunction];\nexport type UseArgs = UseArgs1 | UseArgs2;\nexport type Use = (...args: UseArgs) => Server;\nexport type PatchedRequest = {\n  [_LAYERS_STORE_PROPERTY]: string[];\n} & IncomingMessage;\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { diag } from '@opentelemetry/api';\nimport { _LAYERS_STORE_PROPERTY, PatchedRequest } from './internal-types';\n\nexport const addNewStackLayer = (request: PatchedRequest) => {\n  if (Array.isArray(request[_LAYERS_STORE_PROPERTY]) === false) {\n    Object.defineProperty(request, _LAYERS_STORE_PROPERTY, {\n      enumerable: false,\n      value: [],\n    });\n  }\n  request[_LAYERS_STORE_PROPERTY].push('/');\n\n  const stackLength = request[_LAYERS_STORE_PROPERTY].length;\n\n  return () => {\n    if (stackLength === request[_LAYERS_STORE_PROPERTY].length) {\n      request[_LAYERS_STORE_PROPERTY].pop();\n    } else {\n      diag.warn('Connect: Trying to pop the stack multiple time');\n    }\n  };\n};\n\nexport const replaceCurrentStackRoute = (\n  request: PatchedRequest,\n  newRoute?: string\n) => {\n  if (newRoute) {\n    request[_LAYERS_STORE_PROPERTY].splice(-1, 1, newRoute);\n  }\n};\n\n// generate route from existing stack on request object.\n// splash between stack layer will be deduped\n// [\"/first/\", \"/second\", \"/third/\"] => /first/second/third/\nexport const generateRoute = (request: PatchedRequest) => {\n  return request[_LAYERS_STORE_PROPERTY].reduce(\n    (acc, sub) => acc.replace(/\\/+$/, '') + sub\n  );\n};\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { context, Span, SpanOptions } from '@opentelemetry/api';\nimport { getRPCMetadata, RPCType } from '@opentelemetry/core';\nimport type { HandleFunction, NextFunction, Server } from 'connect';\nimport type { ServerResponse } from 'http';\nimport {\n  AttributeNames,\n  ConnectNames,\n  ConnectTypes,\n} from './enums/AttributeNames';\nimport { PatchedRequest, Use, UseArgs, UseArgs2 } from './internal-types';\n/** @knipignore */\nimport { PACKAGE_NAME, PACKAGE_VERSION } from './version';\nimport {\n  InstrumentationBase,\n  InstrumentationConfig,\n  InstrumentationNodeModuleDefinition,\n  isWrapped,\n} from '@opentelemetry/instrumentation';\nimport { SEMATTRS_HTTP_ROUTE } from '@opentelemetry/semantic-conventions';\nimport {\n  replaceCurrentStackRoute,\n  addNewStackLayer,\n  generateRoute,\n} from './utils';\n\nexport const ANONYMOUS_NAME = 'anonymous';\n\n/** Connect instrumentation for OpenTelemetry */\nexport class ConnectInstrumentation extends InstrumentationBase {\n  constructor(config: InstrumentationConfig = {}) {\n    super(PACKAGE_NAME, PACKAGE_VERSION, config);\n  }\n\n  init() {\n    return [\n      new InstrumentationNodeModuleDefinition(\n        'connect',\n        ['>=3.0.0 <4'],\n        moduleExports => {\n          return this._patchConstructor(moduleExports);\n        }\n      ),\n    ];\n  }\n\n  private _patchApp(patchedApp: Server) {\n    if (!isWrapped(patchedApp.use)) {\n      this._wrap(patchedApp, 'use', this._patchUse.bind(this));\n    }\n    if (!isWrapped(patchedApp.handle)) {\n      this._wrap(patchedApp, 'handle', this._patchHandle.bind(this));\n    }\n  }\n\n  private _patchConstructor(original: () => Server): () => Server {\n    const instrumentation = this;\n    return function (this: Server, ...args) {\n      const app = original.apply(this, args) as Server;\n      instrumentation._patchApp(app);\n      return app;\n    };\n  }\n\n  public _patchNext(next: NextFunction, finishSpan: () => void): NextFunction {\n    return function nextFunction(this: NextFunction, err?: any): void {\n      const result = next.apply(this, [err]);\n      finishSpan();\n      return result;\n    };\n  }\n\n  public _startSpan(routeName: string, middleWare: HandleFunction): Span {\n    let connectType: ConnectTypes;\n    let connectName: string;\n    let connectTypeName: string;\n    if (routeName) {\n      connectType = ConnectTypes.REQUEST_HANDLER;\n      connectTypeName = ConnectNames.REQUEST_HANDLER;\n      connectName = routeName;\n    } else {\n      connectType = ConnectTypes.MIDDLEWARE;\n      connectTypeName = ConnectNames.MIDDLEWARE;\n      connectName = middleWare.name || ANONYMOUS_NAME;\n    }\n    const spanName = `${connectTypeName} - ${connectName}`;\n    const options: SpanOptions = {\n      attributes: {\n        [SEMATTRS_HTTP_ROUTE]: routeName.length > 0 ? routeName : '/',\n        [AttributeNames.CONNECT_TYPE]: connectType,\n        [AttributeNames.CONNECT_NAME]: connectName,\n      },\n    };\n\n    return this.tracer.startSpan(spanName, options);\n  }\n\n  public _patchMiddleware(\n    routeName: string,\n    middleWare: HandleFunction\n  ): HandleFunction {\n    const instrumentation = this;\n    const isErrorMiddleware = middleWare.length === 4;\n\n    function patchedMiddleware(this: Use): void {\n      if (!instrumentation.isEnabled()) {\n        return (middleWare as any).apply(this, arguments);\n      }\n      const [reqArgIdx, resArgIdx, nextArgIdx] = isErrorMiddleware\n        ? [1, 2, 3]\n        : [0, 1, 2];\n      const req = arguments[reqArgIdx] as PatchedRequest;\n      const res = arguments[resArgIdx] as ServerResponse;\n      const next = arguments[nextArgIdx] as NextFunction;\n\n      replaceCurrentStackRoute(req, routeName);\n\n      const rpcMetadata = getRPCMetadata(context.active());\n      if (routeName && rpcMetadata?.type === RPCType.HTTP) {\n        rpcMetadata.route = generateRoute(req);\n      }\n\n      let spanName = '';\n      if (routeName) {\n        spanName = `request handler - ${routeName}`;\n      } else {\n        spanName = `middleware - ${middleWare.name || ANONYMOUS_NAME}`;\n      }\n      const span = instrumentation._startSpan(routeName, middleWare);\n      instrumentation._diag.debug('start span', spanName);\n      let spanFinished = false;\n\n      function finishSpan() {\n        if (!spanFinished) {\n          spanFinished = true;\n          instrumentation._diag.debug(`finishing span ${(span as any).name}`);\n          span.end();\n        } else {\n          instrumentation._diag.debug(\n            `span ${(span as any).name} - already finished`\n          );\n        }\n        res.removeListener('close', finishSpan);\n      }\n\n      res.addListener('close', finishSpan);\n      arguments[nextArgIdx] = instrumentation._patchNext(next, finishSpan);\n\n      return (middleWare as any).apply(this, arguments);\n    }\n\n    Object.defineProperty(patchedMiddleware, 'length', {\n      value: middleWare.length,\n      writable: false,\n      configurable: true,\n    });\n\n    return patchedMiddleware;\n  }\n\n  public _patchUse(original: Server['use']): Use {\n    const instrumentation = this;\n    return function (this: Server, ...args: UseArgs): Server {\n      const middleWare = args[args.length - 1] as HandleFunction;\n      const routeName = (args[args.length - 2] || '') as string;\n\n      args[args.length - 1] = instrumentation._patchMiddleware(\n        routeName,\n        middleWare\n      );\n\n      return original.apply(this, args as UseArgs2);\n    };\n  }\n\n  public _patchHandle(original: Server['handle']): Server['handle'] {\n    const instrumentation = this;\n    return function (this: Server): ReturnType<Server['handle']> {\n      const [reqIdx, outIdx] = [0, 2];\n      const req = arguments[reqIdx] as PatchedRequest;\n      const out = arguments[outIdx];\n      const completeStack = addNewStackLayer(req);\n\n      if (typeof out === 'function') {\n        arguments[outIdx] = instrumentation._patchOut(\n          out as NextFunction,\n          completeStack\n        );\n      }\n\n      return (original as any).apply(this, arguments);\n    };\n  }\n\n  public _patchOut(out: NextFunction, completeStack: () => void): NextFunction {\n    return function nextFunction(this: NextFunction, ...args: any[]): void {\n      completeStack();\n      return Reflect.apply(out, this, args);\n    };\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport * from './enums/AttributeNames';\nexport * from './instrumentation';\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * The span name SHOULD be set to a low cardinality value\n * representing the statement executed on the database.\n *\n * @returns Operation executed on Tedious Connection. Does not map to SQL statement in any way.\n */\nexport function getSpanName(\n  operation: string,\n  db: string | undefined,\n  sql: string | undefined,\n  bulkLoadTable: string | undefined\n): string {\n  if (operation === 'execBulkLoad' && bulkLoadTable && db) {\n    return `${operation} ${bulkLoadTable} ${db}`;\n  }\n  if (operation === 'callProcedure') {\n    // `sql` refers to procedure name with `callProcedure`\n    if (db) {\n      return `${operation} ${sql} ${db}`;\n    }\n    return `${operation} ${sql}`;\n  }\n  // do not use `sql` in general case because of high-cardinality\n  if (db) {\n    return `${operation} ${db}`;\n  }\n  return `${operation}`;\n}\n\nexport const once = (fn: Function) => {\n  let called = false;\n  return (...args: unknown[]) => {\n    if (called) return;\n    called = true;\n    return fn(...args);\n  };\n};\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// this is autogenerated file, see scripts/version-update.js\nexport const PACKAGE_VERSION = '0.18.1';\nexport const PACKAGE_NAME = '@opentelemetry/instrumentation-tedious';\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as api from '@opentelemetry/api';\nimport { EventEmitter } from 'events';\nimport {\n  InstrumentationBase,\n  InstrumentationNodeModuleDefinition,\n  isWrapped,\n} from '@opentelemetry/instrumentation';\nimport {\n  DBSYSTEMVALUES_MSSQL,\n  SEMATTRS_DB_NAME,\n  SEMATTRS_DB_SQL_TABLE,\n  SEMATTRS_DB_STATEMENT,\n  SEMATTRS_DB_SYSTEM,\n  SEMATTRS_DB_USER,\n  SEMATTRS_NET_PEER_NAME,\n  SEMATTRS_NET_PEER_PORT,\n} from '@opentelemetry/semantic-conventions';\nimport type * as tedious from 'tedious';\nimport { TediousInstrumentationConfig } from './types';\nimport { getSpanName, once } from './utils';\n/** @knipignore */\nimport { PACKAGE_NAME, PACKAGE_VERSION } from './version';\n\nconst CURRENT_DATABASE = Symbol(\n  'opentelemetry.instrumentation-tedious.current-database'\n);\nconst PATCHED_METHODS = [\n  'callProcedure',\n  'execSql',\n  'execSqlBatch',\n  'execBulkLoad',\n  'prepare',\n  'execute',\n];\n\ntype UnknownFunction = (...args: any[]) => any;\ntype ApproxConnection = EventEmitter & {\n  [CURRENT_DATABASE]: string;\n  config: any;\n};\ntype ApproxRequest = EventEmitter & {\n  sqlTextOrProcedure: string | undefined;\n  callback: any;\n  table: string | undefined;\n  parametersByName: any;\n};\n\nfunction setDatabase(this: ApproxConnection, databaseName: string) {\n  Object.defineProperty(this, CURRENT_DATABASE, {\n    value: databaseName,\n    writable: true,\n  });\n}\n\nexport class TediousInstrumentation extends InstrumentationBase<TediousInstrumentationConfig> {\n  static readonly COMPONENT = 'tedious';\n\n  constructor(config: TediousInstrumentationConfig = {}) {\n    super(PACKAGE_NAME, PACKAGE_VERSION, config);\n  }\n\n  protected init() {\n    return [\n      new InstrumentationNodeModuleDefinition(\n        TediousInstrumentation.COMPONENT,\n        ['>=1.11.0 <20'],\n        (moduleExports: typeof tedious) => {\n          const ConnectionPrototype: any = moduleExports.Connection.prototype;\n          for (const method of PATCHED_METHODS) {\n            if (isWrapped(ConnectionPrototype[method])) {\n              this._unwrap(ConnectionPrototype, method);\n            }\n            this._wrap(\n              ConnectionPrototype,\n              method,\n              this._patchQuery(method) as any\n            );\n          }\n\n          if (isWrapped(ConnectionPrototype.connect)) {\n            this._unwrap(ConnectionPrototype, 'connect');\n          }\n          this._wrap(ConnectionPrototype, 'connect', this._patchConnect);\n\n          return moduleExports;\n        },\n        (moduleExports: typeof tedious) => {\n          if (moduleExports === undefined) return;\n          const ConnectionPrototype: any = moduleExports.Connection.prototype;\n          for (const method of PATCHED_METHODS) {\n            this._unwrap(ConnectionPrototype, method);\n          }\n          this._unwrap(ConnectionPrototype, 'connect');\n        }\n      ),\n    ];\n  }\n\n  private _patchConnect(original: UnknownFunction): UnknownFunction {\n    return function patchedConnect(this: ApproxConnection) {\n      setDatabase.call(this, this.config?.options?.database);\n\n      // remove the listener first in case it's already added\n      this.removeListener('databaseChange', setDatabase);\n      this.on('databaseChange', setDatabase);\n\n      this.once('end', () => {\n        this.removeListener('databaseChange', setDatabase);\n      });\n      return original.apply(this, arguments as unknown as any[]);\n    };\n  }\n\n  private _patchQuery(operation: string) {\n    return (originalMethod: UnknownFunction): UnknownFunction => {\n      const thisPlugin = this;\n\n      function patchedMethod(this: ApproxConnection, request: ApproxRequest) {\n        if (!(request instanceof EventEmitter)) {\n          thisPlugin._diag.warn(\n            `Unexpected invocation of patched ${operation} method. Span not recorded`\n          );\n          return originalMethod.apply(this, arguments as unknown as any[]);\n        }\n        let procCount = 0;\n        let statementCount = 0;\n        const incrementStatementCount = () => statementCount++;\n        const incrementProcCount = () => procCount++;\n        const databaseName = this[CURRENT_DATABASE];\n        const sql = (request => {\n          // Required for <11.0.9\n          if (\n            request.sqlTextOrProcedure === 'sp_prepare' &&\n            request.parametersByName?.stmt?.value\n          ) {\n            return request.parametersByName.stmt.value;\n          }\n          return request.sqlTextOrProcedure;\n        })(request);\n\n        const span = thisPlugin.tracer.startSpan(\n          getSpanName(operation, databaseName, sql, request.table),\n          {\n            kind: api.SpanKind.CLIENT,\n            attributes: {\n              [SEMATTRS_DB_SYSTEM]: DBSYSTEMVALUES_MSSQL,\n              [SEMATTRS_DB_NAME]: databaseName,\n              [SEMATTRS_NET_PEER_PORT]: this.config?.options?.port,\n              [SEMATTRS_NET_PEER_NAME]: this.config?.server,\n              // >=4 uses `authentication` object, older versions just userName and password pair\n              [SEMATTRS_DB_USER]:\n                this.config?.userName ??\n                this.config?.authentication?.options?.userName,\n              [SEMATTRS_DB_STATEMENT]: sql,\n              [SEMATTRS_DB_SQL_TABLE]: request.table,\n            },\n          }\n        );\n\n        const endSpan = once((err?: any) => {\n          request.removeListener('done', incrementStatementCount);\n          request.removeListener('doneInProc', incrementStatementCount);\n          request.removeListener('doneProc', incrementProcCount);\n          request.removeListener('error', endSpan);\n          this.removeListener('end', endSpan);\n\n          span.setAttribute('tedious.procedure_count', procCount);\n          span.setAttribute('tedious.statement_count', statementCount);\n          if (err) {\n            span.setStatus({\n              code: api.SpanStatusCode.ERROR,\n              message: err.message,\n            });\n          }\n          span.end();\n        });\n\n        request.on('done', incrementStatementCount);\n        request.on('doneInProc', incrementStatementCount);\n        request.on('doneProc', incrementProcCount);\n        request.once('error', endSpan);\n        this.on('end', endSpan);\n\n        if (typeof request.callback === 'function') {\n          thisPlugin._wrap(\n            request,\n            'callback',\n            thisPlugin._patchCallbackQuery(endSpan)\n          );\n        } else {\n          thisPlugin._diag.error('Expected request.callback to be a function');\n        }\n\n        return api.context.with(\n          api.trace.setSpan(api.context.active(), span),\n          originalMethod,\n          this,\n          ...arguments\n        );\n      }\n\n      Object.defineProperty(patchedMethod, 'length', {\n        value: originalMethod.length,\n        writable: false,\n      });\n\n      return patchedMethod;\n    };\n  }\n\n  private _patchCallbackQuery(endSpan: Function) {\n    return (originalCallback: Function) => {\n      return function (\n        this: any,\n        err: Error | undefined | null,\n        rowCount?: number,\n        rows?: any\n      ) {\n        endSpan(err);\n        return originalCallback.apply(this, arguments);\n      };\n    };\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport * from './instrumentation';\nexport * from './types';\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// this is autogenerated file, see scripts/version-update.js\nexport const PACKAGE_VERSION = '0.43.1';\nexport const PACKAGE_NAME = '@opentelemetry/instrumentation-generic-pool';\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as api from '@opentelemetry/api';\nimport {\n  InstrumentationBase,\n  InstrumentationConfig,\n  InstrumentationNodeModuleDefinition,\n  isWrapped,\n} from '@opentelemetry/instrumentation';\n\nimport type * as genericPool from 'generic-pool';\n\n/** @knipignore */\nimport { PACKAGE_NAME, PACKAGE_VERSION } from './version';\n\nconst MODULE_NAME = 'generic-pool';\n\nexport class GenericPoolInstrumentation extends InstrumentationBase {\n  // only used for v2 - v2.3)\n  private _isDisabled = false;\n\n  constructor(config: InstrumentationConfig = {}) {\n    super(PACKAGE_NAME, PACKAGE_VERSION, config);\n  }\n\n  init() {\n    return [\n      new InstrumentationNodeModuleDefinition(\n        MODULE_NAME,\n        ['>=3.0.0 <4'],\n        moduleExports => {\n          const Pool: any = moduleExports.Pool;\n          if (isWrapped(Pool.prototype.acquire)) {\n            this._unwrap(Pool.prototype, 'acquire');\n          }\n          this._wrap(\n            Pool.prototype,\n            'acquire',\n            this._acquirePatcher.bind(this)\n          );\n          return moduleExports;\n        },\n        moduleExports => {\n          const Pool: any = moduleExports.Pool;\n          this._unwrap(Pool.prototype, 'acquire');\n          return moduleExports;\n        }\n      ),\n      new InstrumentationNodeModuleDefinition(\n        MODULE_NAME,\n        ['>=2.4.0 <3'],\n        moduleExports => {\n          const Pool: any = moduleExports.Pool;\n          if (isWrapped(Pool.prototype.acquire)) {\n            this._unwrap(Pool.prototype, 'acquire');\n          }\n          this._wrap(\n            Pool.prototype,\n            'acquire',\n            this._acquireWithCallbacksPatcher.bind(this)\n          );\n          return moduleExports;\n        },\n        moduleExports => {\n          const Pool: any = moduleExports.Pool;\n          this._unwrap(Pool.prototype, 'acquire');\n          return moduleExports;\n        }\n      ),\n      new InstrumentationNodeModuleDefinition(\n        MODULE_NAME,\n        ['>=2.0.0 <2.4'],\n        moduleExports => {\n          this._isDisabled = false;\n          if (isWrapped(moduleExports.Pool)) {\n            this._unwrap(moduleExports, 'Pool');\n          }\n          this._wrap(moduleExports, 'Pool', this._poolWrapper.bind(this));\n          return moduleExports;\n        },\n        moduleExports => {\n          // since the object is created on the fly every time, we need to use\n          // a boolean switch here to disable the instrumentation\n          this._isDisabled = true;\n          return moduleExports;\n        }\n      ),\n    ];\n  }\n\n  private _acquirePatcher(original: genericPool.Pool<unknown>['acquire']) {\n    const instrumentation = this;\n    return function wrapped_acquire(\n      this: genericPool.Pool<unknown>,\n      ...args: any[]\n    ) {\n      const parent = api.context.active();\n      const span = instrumentation.tracer.startSpan(\n        'generic-pool.acquire',\n        {},\n        parent\n      );\n\n      return api.context.with(api.trace.setSpan(parent, span), () => {\n        return original.call(this, ...args).then(\n          value => {\n            span.end();\n            return value;\n          },\n          err => {\n            span.recordException(err);\n            span.end();\n            throw err;\n          }\n        );\n      });\n    };\n  }\n\n  private _poolWrapper(original: any) {\n    const instrumentation = this;\n    return function wrapped_pool(this: any) {\n      const pool = original.apply(this, arguments);\n      instrumentation._wrap(\n        pool,\n        'acquire',\n        instrumentation._acquireWithCallbacksPatcher.bind(instrumentation)\n      );\n      return pool;\n    };\n  }\n\n  private _acquireWithCallbacksPatcher(original: any) {\n    const instrumentation = this;\n    return function wrapped_acquire(\n      this: genericPool.Pool<unknown>,\n      cb: Function,\n      priority: number\n    ) {\n      // only used for v2 - v2.3\n      if (instrumentation._isDisabled) {\n        return original.call(this, cb, priority);\n      }\n      const parent = api.context.active();\n      const span = instrumentation.tracer.startSpan(\n        'generic-pool.acquire',\n        {},\n        parent\n      );\n\n      return api.context.with(api.trace.setSpan(parent, span), () => {\n        original.call(\n          this,\n          (err: unknown, client: unknown) => {\n            span.end();\n            // Not checking whether cb is a function because\n            // the original code doesn't do that either.\n            if (cb) {\n              return cb(err, client);\n            }\n          },\n          priority\n        );\n      });\n    };\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport * from './instrumentation';\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Span } from '@opentelemetry/api';\nimport { InstrumentationConfig } from '@opentelemetry/instrumentation';\n\nexport interface PublishInfo {\n  moduleVersion: string | undefined;\n  exchange: string;\n  routingKey: string;\n  content: Buffer;\n  options?: AmqplibPublishOptions;\n  isConfirmChannel?: boolean;\n}\n\nexport interface PublishConfirmedInfo extends PublishInfo {\n  confirmError?: any;\n}\n\nexport interface ConsumeInfo {\n  moduleVersion: string | undefined;\n  msg: ConsumeMessage;\n}\n\nexport interface ConsumeEndInfo {\n  msg: ConsumeMessage;\n  rejected: boolean | null;\n  endOperation: EndOperation;\n}\n\nexport interface AmqplibPublishCustomAttributeFunction {\n  (span: Span, publishInfo: PublishInfo): void;\n}\n\nexport interface AmqplibPublishConfirmCustomAttributeFunction {\n  (span: Span, publishConfirmedInto: PublishConfirmedInfo): void;\n}\n\nexport interface AmqplibConsumeCustomAttributeFunction {\n  (span: Span, consumeInfo: ConsumeInfo): void;\n}\n\nexport interface AmqplibConsumeEndCustomAttributeFunction {\n  (span: Span, consumeEndInfo: ConsumeEndInfo): void;\n}\n\nexport enum EndOperation {\n  AutoAck = 'auto ack',\n  Ack = 'ack',\n  AckAll = 'ackAll',\n  Reject = 'reject',\n  Nack = 'nack',\n  NackAll = 'nackAll',\n  ChannelClosed = 'channel closed',\n  ChannelError = 'channel error',\n  InstrumentationTimeout = 'instrumentation timeout',\n}\n\nexport interface AmqplibInstrumentationConfig extends InstrumentationConfig {\n  /** hook for adding custom attributes before publish message is sent */\n  publishHook?: AmqplibPublishCustomAttributeFunction;\n\n  /** hook for adding custom attributes after publish message is confirmed by the broker */\n  publishConfirmHook?: AmqplibPublishConfirmCustomAttributeFunction;\n\n  /** hook for adding custom attributes before consumer message is processed */\n  consumeHook?: AmqplibConsumeCustomAttributeFunction;\n\n  /** hook for adding custom attributes after consumer message is acked to server */\n  consumeEndHook?: AmqplibConsumeEndCustomAttributeFunction;\n\n  /**\n   * When user is setting up consume callback, it is user's responsibility to call\n   * ack/nack etc on the msg to resolve it in the server.\n   * If user is not calling the ack, the message will stay in the queue until\n   * channel is closed, or until server timeout expires (if configured).\n   * While we wait for the ack, a reference to the message is stored in plugin, which\n   * will never be garbage collected.\n   * To prevent memory leak, plugin has it's own configuration of timeout, which\n   * will close the span if user did not call ack after this timeout.\n   * If timeout is not big enough, span might be closed with 'InstrumentationTimeout',\n   * and then received valid ack from the user later which will not be instrumented.\n   *\n   * Default is 1 minute\n   */\n  consumeTimeoutMs?: number;\n\n  /** option to use a span link for the consume message instead of continuing a trace */\n  useLinksForConsume?: boolean;\n}\n\nexport const DEFAULT_CONFIG: AmqplibInstrumentationConfig = {\n  consumeTimeoutMs: 1000 * 60, // 1 minute\n  useLinksForConsume: false,\n};\n\n// The following types are vendored from `@types/amqplib@0.10.1` - commit SHA: 4205e03127692a40b4871709a7134fe4e2ed5510\n\n// Vendored from: https://github.com/DefinitelyTyped/DefinitelyTyped/blob/4205e03127692a40b4871709a7134fe4e2ed5510/types/amqplib/properties.d.ts#L108\n// This exists in `@types/amqplib` as `Options.Publish`. We're renaming things\n// here to avoid importing the whole Options namespace.\nexport interface AmqplibPublishOptions {\n  expiration?: string | number;\n  userId?: string;\n  CC?: string | string[];\n\n  mandatory?: boolean;\n  persistent?: boolean;\n  deliveryMode?: boolean | number;\n  BCC?: string | string[];\n\n  contentType?: string;\n  contentEncoding?: string;\n  headers?: any;\n  priority?: number;\n  correlationId?: string;\n  replyTo?: string;\n  messageId?: string;\n  timestamp?: number;\n  type?: string;\n  appId?: string;\n}\n\n// Vendored from: https://github.com/DefinitelyTyped/DefinitelyTyped/blob/4205e03127692a40b4871709a7134fe4e2ed5510/types/amqplib/properties.d.ts#L142\nexport interface Message {\n  content: Buffer;\n  fields: MessageFields;\n  properties: MessageProperties;\n}\n\nexport interface ConsumeMessage extends Message {\n  fields: ConsumeMessageFields;\n}\n\nexport interface CommonMessageFields {\n  deliveryTag: number;\n  redelivered: boolean;\n  exchange: string;\n  routingKey: string;\n}\n\nexport interface MessageFields extends CommonMessageFields {\n  messageCount?: number;\n  consumerTag?: string;\n}\n\nexport interface ConsumeMessageFields extends CommonMessageFields {\n  deliveryTag: number;\n}\n\nexport interface MessageProperties {\n  contentType: any | undefined;\n  contentEncoding: any | undefined;\n  headers: any;\n  deliveryMode: any | undefined;\n  priority: any | undefined;\n  correlationId: any | undefined;\n  replyTo: any | undefined;\n  expiration: any | undefined;\n  messageId: any | undefined;\n  timestamp: any | undefined;\n  type: any | undefined;\n  userId: any | undefined;\n  appId: any | undefined;\n  clusterId: any | undefined;\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  Context,\n  createContextKey,\n  diag,\n  HrTime,\n  Span,\n  Attributes,\n  AttributeValue,\n} from '@opentelemetry/api';\nimport {\n  SEMATTRS_MESSAGING_PROTOCOL,\n  SEMATTRS_MESSAGING_PROTOCOL_VERSION,\n  SEMATTRS_MESSAGING_SYSTEM,\n  SEMATTRS_MESSAGING_URL,\n  SEMATTRS_NET_PEER_NAME,\n  SEMATTRS_NET_PEER_PORT,\n} from '@opentelemetry/semantic-conventions';\nimport type * as amqp from 'amqplib';\n\nexport const MESSAGE_STORED_SPAN: unique symbol = Symbol(\n  'opentelemetry.amqplib.message.stored-span'\n);\nexport const CHANNEL_SPANS_NOT_ENDED: unique symbol = Symbol(\n  'opentelemetry.amqplib.channel.spans-not-ended'\n);\nexport const CHANNEL_CONSUME_TIMEOUT_TIMER: unique symbol = Symbol(\n  'opentelemetry.amqplib.channel.consumer-timeout-timer'\n);\nexport const CONNECTION_ATTRIBUTES: unique symbol = Symbol(\n  'opentelemetry.amqplib.connection.attributes'\n);\n\nexport type InstrumentationPublishChannel = (\n  | amqp.Channel\n  | amqp.ConfirmChannel\n) & { connection: { [CONNECTION_ATTRIBUTES]: Attributes } };\nexport type InstrumentationConsumeChannel = amqp.Channel & {\n  connection: { [CONNECTION_ATTRIBUTES]: Attributes };\n  [CHANNEL_SPANS_NOT_ENDED]?: {\n    msg: amqp.ConsumeMessage;\n    timeOfConsume: HrTime;\n  }[];\n  [CHANNEL_CONSUME_TIMEOUT_TIMER]?: NodeJS.Timeout;\n};\nexport type InstrumentationMessage = amqp.Message & {\n  [MESSAGE_STORED_SPAN]?: Span;\n};\n\nconst IS_CONFIRM_CHANNEL_CONTEXT_KEY: symbol = createContextKey(\n  'opentelemetry.amqplib.channel.is-confirm-channel'\n);\n\nexport const normalizeExchange = (exchangeName: string) =>\n  exchangeName !== '' ? exchangeName : '<default>';\n\nconst censorPassword = (url: string): string => {\n  return url.replace(/:[^:@/]*@/, ':***@');\n};\n\nconst getPort = (\n  portFromUrl: number | undefined,\n  resolvedProtocol: string\n): number => {\n  // we are using the resolved protocol which is upper case\n  // this code mimic the behavior of the amqplib which is used to set connection params\n  return portFromUrl || (resolvedProtocol === 'AMQP' ? 5672 : 5671);\n};\n\nconst getProtocol = (protocolFromUrl: string | undefined): string => {\n  const resolvedProtocol = protocolFromUrl || 'amqp';\n  // the substring removed the ':' part of the protocol ('amqp:' -> 'amqp')\n  const noEndingColon = resolvedProtocol.endsWith(':')\n    ? resolvedProtocol.substring(0, resolvedProtocol.length - 1)\n    : resolvedProtocol;\n  // upper cases to match spec\n  return noEndingColon.toUpperCase();\n};\n\nconst getHostname = (hostnameFromUrl: string | undefined): string => {\n  // if user supplies empty hostname, it gets forwarded to 'net' package which default it to localhost.\n  // https://nodejs.org/docs/latest-v12.x/api/net.html#net_socket_connect_options_connectlistener\n  return hostnameFromUrl || 'localhost';\n};\n\nconst extractConnectionAttributeOrLog = (\n  url: string | amqp.Options.Connect,\n  attributeKey: string,\n  attributeValue: AttributeValue,\n  nameForLog: string\n): Attributes => {\n  if (attributeValue) {\n    return { [attributeKey]: attributeValue };\n  } else {\n    diag.error(\n      `amqplib instrumentation: could not extract connection attribute ${nameForLog} from user supplied url`,\n      {\n        url,\n      }\n    );\n    return {};\n  }\n};\n\nexport const getConnectionAttributesFromServer = (\n  conn: amqp.Connection['connection']\n): Attributes => {\n  const product = conn.serverProperties.product?.toLowerCase?.();\n  if (product) {\n    return {\n      [SEMATTRS_MESSAGING_SYSTEM]: product,\n    };\n  } else {\n    return {};\n  }\n};\n\nexport const getConnectionAttributesFromUrl = (\n  url: string | amqp.Options.Connect\n): Attributes => {\n  const attributes: Attributes = {\n    [SEMATTRS_MESSAGING_PROTOCOL_VERSION]: '0.9.1', // this is the only protocol supported by the instrumented library\n  };\n\n  url = url || 'amqp://localhost';\n  if (typeof url === 'object') {\n    const connectOptions = url as amqp.Options.Connect;\n\n    const protocol = getProtocol(connectOptions?.protocol);\n    Object.assign(attributes, {\n      ...extractConnectionAttributeOrLog(\n        url,\n        SEMATTRS_MESSAGING_PROTOCOL,\n        protocol,\n        'protocol'\n      ),\n    });\n\n    const hostname = getHostname(connectOptions?.hostname);\n    Object.assign(attributes, {\n      ...extractConnectionAttributeOrLog(\n        url,\n        SEMATTRS_NET_PEER_NAME,\n        hostname,\n        'hostname'\n      ),\n    });\n\n    const port = getPort(connectOptions.port, protocol);\n    Object.assign(attributes, {\n      ...extractConnectionAttributeOrLog(\n        url,\n        SEMATTRS_NET_PEER_PORT,\n        port,\n        'port'\n      ),\n    });\n  } else {\n    const censoredUrl = censorPassword(url);\n    attributes[SEMATTRS_MESSAGING_URL] = censoredUrl;\n    try {\n      const urlParts = new URL(censoredUrl);\n\n      const protocol = getProtocol(urlParts.protocol);\n      Object.assign(attributes, {\n        ...extractConnectionAttributeOrLog(\n          censoredUrl,\n          SEMATTRS_MESSAGING_PROTOCOL,\n          protocol,\n          'protocol'\n        ),\n      });\n\n      const hostname = getHostname(urlParts.hostname);\n      Object.assign(attributes, {\n        ...extractConnectionAttributeOrLog(\n          censoredUrl,\n          SEMATTRS_NET_PEER_NAME,\n          hostname,\n          'hostname'\n        ),\n      });\n\n      const port = getPort(\n        urlParts.port ? parseInt(urlParts.port) : undefined,\n        protocol\n      );\n      Object.assign(attributes, {\n        ...extractConnectionAttributeOrLog(\n          censoredUrl,\n          SEMATTRS_NET_PEER_PORT,\n          port,\n          'port'\n        ),\n      });\n    } catch (err) {\n      diag.error(\n        'amqplib instrumentation: error while extracting connection details from connection url',\n        {\n          censoredUrl,\n          err,\n        }\n      );\n    }\n  }\n  return attributes;\n};\n\nexport const markConfirmChannelTracing = (context: Context) => {\n  return context.setValue(IS_CONFIRM_CHANNEL_CONTEXT_KEY, true);\n};\n\nexport const unmarkConfirmChannelTracing = (context: Context) => {\n  return context.deleteValue(IS_CONFIRM_CHANNEL_CONTEXT_KEY);\n};\n\nexport const isConfirmChannelTracing = (context: Context) => {\n  return context.getValue(IS_CONFIRM_CHANNEL_CONTEXT_KEY) === true;\n};\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// this is autogenerated file, see scripts/version-update.js\nexport const PACKAGE_VERSION = '0.46.1';\nexport const PACKAGE_NAME = '@opentelemetry/instrumentation-amqplib';\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  context,\n  diag,\n  propagation,\n  trace,\n  Span,\n  SpanKind,\n  SpanStatusCode,\n  ROOT_CONTEXT,\n  Link,\n  Context,\n} from '@opentelemetry/api';\nimport {\n  hrTime,\n  hrTimeDuration,\n  hrTimeToMilliseconds,\n} from '@opentelemetry/core';\nimport {\n  InstrumentationBase,\n  InstrumentationNodeModuleDefinition,\n  InstrumentationNodeModuleFile,\n  isWrapped,\n  safeExecuteInTheMiddle,\n} from '@opentelemetry/instrumentation';\nimport {\n  SEMATTRS_MESSAGING_DESTINATION,\n  SEMATTRS_MESSAGING_DESTINATION_KIND,\n  MESSAGINGDESTINATIONKINDVALUES_TOPIC,\n  SEMATTRS_MESSAGING_RABBITMQ_ROUTING_KEY,\n  SEMATTRS_MESSAGING_OPERATION,\n  MESSAGINGOPERATIONVALUES_PROCESS,\n  SEMATTRS_MESSAGING_MESSAGE_ID,\n  SEMATTRS_MESSAGING_CONVERSATION_ID,\n} from '@opentelemetry/semantic-conventions';\nimport type {\n  Connection,\n  ConsumeMessage,\n  Message,\n  Options,\n  Replies,\n} from 'amqplib';\nimport {\n  AmqplibInstrumentationConfig,\n  DEFAULT_CONFIG,\n  EndOperation,\n} from './types';\nimport {\n  CHANNEL_CONSUME_TIMEOUT_TIMER,\n  CHANNEL_SPANS_NOT_ENDED,\n  CONNECTION_ATTRIBUTES,\n  getConnectionAttributesFromServer,\n  getConnectionAttributesFromUrl,\n  InstrumentationConsumeChannel,\n  InstrumentationMessage,\n  InstrumentationPublishChannel,\n  isConfirmChannelTracing,\n  markConfirmChannelTracing,\n  MESSAGE_STORED_SPAN,\n  normalizeExchange,\n  unmarkConfirmChannelTracing,\n} from './utils';\n/** @knipignore */\nimport { PACKAGE_NAME, PACKAGE_VERSION } from './version';\n\nconst supportedVersions = ['>=0.5.5 <1'];\n\nexport class AmqplibInstrumentation extends InstrumentationBase<AmqplibInstrumentationConfig> {\n  constructor(config: AmqplibInstrumentationConfig = {}) {\n    super(PACKAGE_NAME, PACKAGE_VERSION, { ...DEFAULT_CONFIG, ...config });\n  }\n\n  override setConfig(config: AmqplibInstrumentationConfig = {}) {\n    super.setConfig({ ...DEFAULT_CONFIG, ...config });\n  }\n\n  protected init() {\n    const channelModelModuleFile = new InstrumentationNodeModuleFile(\n      'amqplib/lib/channel_model.js',\n      supportedVersions,\n      this.patchChannelModel.bind(this),\n      this.unpatchChannelModel.bind(this)\n    );\n\n    const callbackModelModuleFile = new InstrumentationNodeModuleFile(\n      'amqplib/lib/callback_model.js',\n      supportedVersions,\n      this.patchChannelModel.bind(this),\n      this.unpatchChannelModel.bind(this)\n    );\n\n    const connectModuleFile = new InstrumentationNodeModuleFile(\n      'amqplib/lib/connect.js',\n      supportedVersions,\n      this.patchConnect.bind(this),\n      this.unpatchConnect.bind(this)\n    );\n\n    const module = new InstrumentationNodeModuleDefinition(\n      'amqplib',\n      supportedVersions,\n      undefined,\n      undefined,\n      [channelModelModuleFile, connectModuleFile, callbackModelModuleFile]\n    );\n    return module;\n  }\n\n  private patchConnect(moduleExports: any) {\n    moduleExports = this.unpatchConnect(moduleExports);\n    if (!isWrapped(moduleExports.connect)) {\n      this._wrap(moduleExports, 'connect', this.getConnectPatch.bind(this));\n    }\n    return moduleExports;\n  }\n\n  private unpatchConnect(moduleExports: any) {\n    if (isWrapped(moduleExports.connect)) {\n      this._unwrap(moduleExports, 'connect');\n    }\n    return moduleExports;\n  }\n\n  private patchChannelModel(\n    moduleExports: any,\n    moduleVersion: string | undefined\n  ) {\n    if (!isWrapped(moduleExports.Channel.prototype.publish)) {\n      this._wrap(\n        moduleExports.Channel.prototype,\n        'publish',\n        this.getPublishPatch.bind(this, moduleVersion)\n      );\n    }\n    if (!isWrapped(moduleExports.Channel.prototype.consume)) {\n      this._wrap(\n        moduleExports.Channel.prototype,\n        'consume',\n        this.getConsumePatch.bind(this, moduleVersion)\n      );\n    }\n    if (!isWrapped(moduleExports.Channel.prototype.ack)) {\n      this._wrap(\n        moduleExports.Channel.prototype,\n        'ack',\n        this.getAckPatch.bind(this, false, EndOperation.Ack)\n      );\n    }\n    if (!isWrapped(moduleExports.Channel.prototype.nack)) {\n      this._wrap(\n        moduleExports.Channel.prototype,\n        'nack',\n        this.getAckPatch.bind(this, true, EndOperation.Nack)\n      );\n    }\n    if (!isWrapped(moduleExports.Channel.prototype.reject)) {\n      this._wrap(\n        moduleExports.Channel.prototype,\n        'reject',\n        this.getAckPatch.bind(this, true, EndOperation.Reject)\n      );\n    }\n    if (!isWrapped(moduleExports.Channel.prototype.ackAll)) {\n      this._wrap(\n        moduleExports.Channel.prototype,\n        'ackAll',\n        this.getAckAllPatch.bind(this, false, EndOperation.AckAll)\n      );\n    }\n    if (!isWrapped(moduleExports.Channel.prototype.nackAll)) {\n      this._wrap(\n        moduleExports.Channel.prototype,\n        'nackAll',\n        this.getAckAllPatch.bind(this, true, EndOperation.NackAll)\n      );\n    }\n    if (!isWrapped(moduleExports.Channel.prototype.emit)) {\n      this._wrap(\n        moduleExports.Channel.prototype,\n        'emit',\n        this.getChannelEmitPatch.bind(this)\n      );\n    }\n    if (!isWrapped(moduleExports.ConfirmChannel.prototype.publish)) {\n      this._wrap(\n        moduleExports.ConfirmChannel.prototype,\n        'publish',\n        this.getConfirmedPublishPatch.bind(this, moduleVersion)\n      );\n    }\n    return moduleExports;\n  }\n\n  private unpatchChannelModel(moduleExports: any) {\n    if (isWrapped(moduleExports.Channel.prototype.publish)) {\n      this._unwrap(moduleExports.Channel.prototype, 'publish');\n    }\n    if (isWrapped(moduleExports.Channel.prototype.consume)) {\n      this._unwrap(moduleExports.Channel.prototype, 'consume');\n    }\n    if (isWrapped(moduleExports.Channel.prototype.ack)) {\n      this._unwrap(moduleExports.Channel.prototype, 'ack');\n    }\n    if (isWrapped(moduleExports.Channel.prototype.nack)) {\n      this._unwrap(moduleExports.Channel.prototype, 'nack');\n    }\n    if (isWrapped(moduleExports.Channel.prototype.reject)) {\n      this._unwrap(moduleExports.Channel.prototype, 'reject');\n    }\n    if (isWrapped(moduleExports.Channel.prototype.ackAll)) {\n      this._unwrap(moduleExports.Channel.prototype, 'ackAll');\n    }\n    if (isWrapped(moduleExports.Channel.prototype.nackAll)) {\n      this._unwrap(moduleExports.Channel.prototype, 'nackAll');\n    }\n    if (isWrapped(moduleExports.Channel.prototype.emit)) {\n      this._unwrap(moduleExports.Channel.prototype, 'emit');\n    }\n    if (isWrapped(moduleExports.ConfirmChannel.prototype.publish)) {\n      this._unwrap(moduleExports.ConfirmChannel.prototype, 'publish');\n    }\n    return moduleExports;\n  }\n\n  private getConnectPatch(\n    original: (\n      url: string | Options.Connect,\n      socketOptions: any,\n      openCallback: (err: any, connection: Connection) => void\n    ) => Connection\n  ) {\n    return function patchedConnect(\n      this: unknown,\n      url: string | Options.Connect,\n      socketOptions: any,\n      openCallback: Function\n    ) {\n      return original.call(\n        this,\n        url,\n        socketOptions,\n        function (this: unknown, err, conn: Connection) {\n          if (err == null) {\n            const urlAttributes = getConnectionAttributesFromUrl(url);\n            // the type of conn in @types/amqplib is amqp.Connection, but in practice the library send the\n            // `serverProperties` on the `conn` and not in a property `connection`.\n            // I don't have capacity to debug it currently but it should probably be fixed in @types or\n            // in the package itself\n            // currently setting as any to calm typescript\n            const serverAttributes = getConnectionAttributesFromServer(\n              conn as any\n            );\n            (conn as any)[CONNECTION_ATTRIBUTES] = {\n              ...urlAttributes,\n              ...serverAttributes,\n            };\n          }\n          openCallback.apply(this, arguments);\n        }\n      );\n    };\n  }\n\n  private getChannelEmitPatch(original: Function) {\n    const self = this;\n    return function emit(\n      this: InstrumentationConsumeChannel,\n      eventName: string\n    ) {\n      if (eventName === 'close') {\n        self.endAllSpansOnChannel(\n          this,\n          true,\n          EndOperation.ChannelClosed,\n          undefined\n        );\n        const activeTimer = this[CHANNEL_CONSUME_TIMEOUT_TIMER];\n        if (activeTimer) {\n          clearInterval(activeTimer);\n        }\n        this[CHANNEL_CONSUME_TIMEOUT_TIMER] = undefined;\n      } else if (eventName === 'error') {\n        self.endAllSpansOnChannel(\n          this,\n          true,\n          EndOperation.ChannelError,\n          undefined\n        );\n      }\n      return original.apply(this, arguments);\n    };\n  }\n\n  private getAckAllPatch(\n    isRejected: boolean,\n    endOperation: EndOperation,\n    original: Function\n  ) {\n    const self = this;\n    return function ackAll(\n      this: InstrumentationConsumeChannel,\n      requeueOrEmpty?: boolean\n    ): void {\n      self.endAllSpansOnChannel(this, isRejected, endOperation, requeueOrEmpty);\n      return original.apply(this, arguments);\n    };\n  }\n\n  private getAckPatch(\n    isRejected: boolean,\n    endOperation: EndOperation,\n    original: Function\n  ) {\n    const self = this;\n    return function ack(\n      this: InstrumentationConsumeChannel,\n      message: Message,\n      allUpToOrRequeue?: boolean,\n      requeue?: boolean\n    ): void {\n      const channel = this;\n      // we use this patch in reject function as well, but it has different signature\n      const requeueResolved =\n        endOperation === EndOperation.Reject ? allUpToOrRequeue : requeue;\n\n      const spansNotEnded: { msg: Message }[] =\n        channel[CHANNEL_SPANS_NOT_ENDED] ?? [];\n      const msgIndex = spansNotEnded.findIndex(\n        msgDetails => msgDetails.msg === message\n      );\n      if (msgIndex < 0) {\n        // should not happen in happy flow\n        // but possible if user is calling the api function ack twice with same message\n        self.endConsumerSpan(\n          message,\n          isRejected,\n          endOperation,\n          requeueResolved\n        );\n      } else if (endOperation !== EndOperation.Reject && allUpToOrRequeue) {\n        for (let i = 0; i <= msgIndex; i++) {\n          self.endConsumerSpan(\n            spansNotEnded[i].msg,\n            isRejected,\n            endOperation,\n            requeueResolved\n          );\n        }\n        spansNotEnded.splice(0, msgIndex + 1);\n      } else {\n        self.endConsumerSpan(\n          message,\n          isRejected,\n          endOperation,\n          requeueResolved\n        );\n        spansNotEnded.splice(msgIndex, 1);\n      }\n      return original.apply(this, arguments);\n    };\n  }\n\n  private getConsumePatch(\n    moduleVersion: string | undefined,\n    original: Function\n  ) {\n    const self = this;\n    return function consume(\n      this: InstrumentationConsumeChannel,\n      queue: string,\n      onMessage: (msg: ConsumeMessage | null) => void,\n      options?: Options.Consume\n    ): Promise<Replies.Consume> {\n      const channel = this;\n      if (\n        !Object.prototype.hasOwnProperty.call(channel, CHANNEL_SPANS_NOT_ENDED)\n      ) {\n        const { consumeTimeoutMs } = self.getConfig();\n        if (consumeTimeoutMs) {\n          const timer = setInterval(() => {\n            self.checkConsumeTimeoutOnChannel(channel);\n          }, consumeTimeoutMs);\n          timer.unref();\n          channel[CHANNEL_CONSUME_TIMEOUT_TIMER] = timer;\n        }\n        channel[CHANNEL_SPANS_NOT_ENDED] = [];\n      }\n\n      const patchedOnMessage = function (\n        this: unknown,\n        msg: InstrumentationMessage | null\n      ) {\n        // msg is expected to be null for signaling consumer cancel notification\n        // https://www.rabbitmq.com/consumer-cancel.html\n        // in this case, we do not start a span, as this is not a real message.\n        if (!msg) {\n          return onMessage.call(this, msg);\n        }\n\n        const headers = msg.properties.headers ?? {};\n        let parentContext: Context | undefined = propagation.extract(\n          ROOT_CONTEXT,\n          headers\n        );\n        const exchange = msg.fields?.exchange;\n        let links: Link[] | undefined;\n        if (self._config.useLinksForConsume) {\n          const parentSpanContext = parentContext\n            ? trace.getSpan(parentContext)?.spanContext()\n            : undefined;\n          parentContext = undefined;\n          if (parentSpanContext) {\n            links = [\n              {\n                context: parentSpanContext,\n              },\n            ];\n          }\n        }\n        const span = self.tracer.startSpan(\n          `${queue} process`,\n          {\n            kind: SpanKind.CONSUMER,\n            attributes: {\n              ...channel?.connection?.[CONNECTION_ATTRIBUTES],\n              [SEMATTRS_MESSAGING_DESTINATION]: exchange,\n              [SEMATTRS_MESSAGING_DESTINATION_KIND]:\n                MESSAGINGDESTINATIONKINDVALUES_TOPIC,\n              [SEMATTRS_MESSAGING_RABBITMQ_ROUTING_KEY]: msg.fields?.routingKey,\n              [SEMATTRS_MESSAGING_OPERATION]: MESSAGINGOPERATIONVALUES_PROCESS,\n              [SEMATTRS_MESSAGING_MESSAGE_ID]: msg?.properties.messageId,\n              [SEMATTRS_MESSAGING_CONVERSATION_ID]:\n                msg?.properties.correlationId,\n            },\n            links,\n          },\n          parentContext\n        );\n\n        const { consumeHook } = self.getConfig();\n        if (consumeHook) {\n          safeExecuteInTheMiddle(\n            () => consumeHook(span, { moduleVersion, msg }),\n            e => {\n              if (e) {\n                diag.error('amqplib instrumentation: consumerHook error', e);\n              }\n            },\n            true\n          );\n        }\n\n        if (!options?.noAck) {\n          // store the message on the channel so we can close the span on ackAll etc\n          channel[CHANNEL_SPANS_NOT_ENDED]!.push({\n            msg,\n            timeOfConsume: hrTime(),\n          });\n\n          // store the span on the message, so we can end it when user call 'ack' on it\n          msg[MESSAGE_STORED_SPAN] = span;\n        }\n        const setContext: Context = parentContext\n          ? parentContext\n          : ROOT_CONTEXT;\n        context.with(trace.setSpan(setContext, span), () => {\n          onMessage.call(this, msg);\n        });\n\n        if (options?.noAck) {\n          self.callConsumeEndHook(span, msg, false, EndOperation.AutoAck);\n          span.end();\n        }\n      };\n      arguments[1] = patchedOnMessage;\n      return original.apply(this, arguments);\n    };\n  }\n\n  private getConfirmedPublishPatch(\n    moduleVersion: string | undefined,\n    original: Function\n  ) {\n    const self = this;\n    return function confirmedPublish(\n      this: InstrumentationConsumeChannel,\n      exchange: string,\n      routingKey: string,\n      content: Buffer,\n      options?: Options.Publish,\n      callback?: (err: any, ok: Replies.Empty) => void\n    ): boolean {\n      const channel = this;\n      const { span, modifiedOptions } = self.createPublishSpan(\n        self,\n        exchange,\n        routingKey,\n        channel,\n        options\n      );\n\n      const { publishHook } = self.getConfig();\n      if (publishHook) {\n        safeExecuteInTheMiddle(\n          () =>\n            publishHook(span, {\n              moduleVersion,\n              exchange,\n              routingKey,\n              content,\n              options: modifiedOptions,\n              isConfirmChannel: true,\n            }),\n          e => {\n            if (e) {\n              diag.error('amqplib instrumentation: publishHook error', e);\n            }\n          },\n          true\n        );\n      }\n\n      const patchedOnConfirm = function (\n        this: unknown,\n        err: any,\n        ok: Replies.Empty\n      ) {\n        try {\n          callback?.call(this, err, ok);\n        } finally {\n          const { publishConfirmHook } = self.getConfig();\n          if (publishConfirmHook) {\n            safeExecuteInTheMiddle(\n              () =>\n                publishConfirmHook(span, {\n                  moduleVersion,\n                  exchange,\n                  routingKey,\n                  content,\n                  options,\n                  isConfirmChannel: true,\n                  confirmError: err,\n                }),\n              e => {\n                if (e) {\n                  diag.error(\n                    'amqplib instrumentation: publishConfirmHook error',\n                    e\n                  );\n                }\n              },\n              true\n            );\n          }\n\n          if (err) {\n            span.setStatus({\n              code: SpanStatusCode.ERROR,\n              message: \"message confirmation has been nack'ed\",\n            });\n          }\n          span.end();\n        }\n      };\n\n      // calling confirm channel publish function is storing the message in queue and registering the callback for broker confirm.\n      // span ends in the patched callback.\n      const markedContext = markConfirmChannelTracing(context.active());\n      const argumentsCopy = [...arguments];\n      argumentsCopy[3] = modifiedOptions;\n      argumentsCopy[4] = context.bind(\n        unmarkConfirmChannelTracing(trace.setSpan(markedContext, span)),\n        patchedOnConfirm\n      );\n      return context.with(markedContext, original.bind(this, ...argumentsCopy));\n    };\n  }\n\n  private getPublishPatch(\n    moduleVersion: string | undefined,\n    original: Function\n  ) {\n    const self = this;\n    return function publish(\n      this: InstrumentationPublishChannel,\n      exchange: string,\n      routingKey: string,\n      content: Buffer,\n      options?: Options.Publish\n    ): boolean {\n      if (isConfirmChannelTracing(context.active())) {\n        // work already done\n        return original.apply(this, arguments);\n      } else {\n        const channel = this;\n        const { span, modifiedOptions } = self.createPublishSpan(\n          self,\n          exchange,\n          routingKey,\n          channel,\n          options\n        );\n\n        const { publishHook } = self.getConfig();\n        if (publishHook) {\n          safeExecuteInTheMiddle(\n            () =>\n              publishHook(span, {\n                moduleVersion,\n                exchange,\n                routingKey,\n                content,\n                options: modifiedOptions,\n                isConfirmChannel: false,\n              }),\n            e => {\n              if (e) {\n                diag.error('amqplib instrumentation: publishHook error', e);\n              }\n            },\n            true\n          );\n        }\n\n        // calling normal channel publish function is only storing the message in queue.\n        // it does not send it and waits for an ack, so the span duration is expected to be very short.\n        const argumentsCopy = [...arguments];\n        argumentsCopy[3] = modifiedOptions;\n        const originalRes = original.apply(this, argumentsCopy as any);\n        span.end();\n        return originalRes;\n      }\n    };\n  }\n\n  private createPublishSpan(\n    self: this,\n    exchange: string,\n    routingKey: string,\n    channel: InstrumentationPublishChannel,\n    options?: Options.Publish\n  ) {\n    const normalizedExchange = normalizeExchange(exchange);\n\n    const span = self.tracer.startSpan(`publish ${normalizedExchange}`, {\n      kind: SpanKind.PRODUCER,\n      attributes: {\n        ...channel.connection[CONNECTION_ATTRIBUTES],\n        [SEMATTRS_MESSAGING_DESTINATION]: exchange,\n        [SEMATTRS_MESSAGING_DESTINATION_KIND]:\n          MESSAGINGDESTINATIONKINDVALUES_TOPIC,\n        [SEMATTRS_MESSAGING_RABBITMQ_ROUTING_KEY]: routingKey,\n        [SEMATTRS_MESSAGING_MESSAGE_ID]: options?.messageId,\n        [SEMATTRS_MESSAGING_CONVERSATION_ID]: options?.correlationId,\n      },\n    });\n    const modifiedOptions = options ?? {};\n    modifiedOptions.headers = modifiedOptions.headers ?? {};\n\n    propagation.inject(\n      trace.setSpan(context.active(), span),\n      modifiedOptions.headers\n    );\n\n    return { span, modifiedOptions };\n  }\n\n  private endConsumerSpan(\n    message: InstrumentationMessage,\n    isRejected: boolean | null,\n    operation: EndOperation,\n    requeue: boolean | undefined\n  ) {\n    const storedSpan: Span | undefined = message[MESSAGE_STORED_SPAN];\n    if (!storedSpan) return;\n    if (isRejected !== false) {\n      storedSpan.setStatus({\n        code: SpanStatusCode.ERROR,\n        message:\n          operation !== EndOperation.ChannelClosed &&\n          operation !== EndOperation.ChannelError\n            ? `${operation} called on message${\n                requeue === true\n                  ? ' with requeue'\n                  : requeue === false\n                  ? ' without requeue'\n                  : ''\n              }`\n            : operation,\n      });\n    }\n    this.callConsumeEndHook(storedSpan, message, isRejected, operation);\n    storedSpan.end();\n    message[MESSAGE_STORED_SPAN] = undefined;\n  }\n\n  private endAllSpansOnChannel(\n    channel: InstrumentationConsumeChannel,\n    isRejected: boolean,\n    operation: EndOperation,\n    requeue: boolean | undefined\n  ) {\n    const spansNotEnded: { msg: Message }[] =\n      channel[CHANNEL_SPANS_NOT_ENDED] ?? [];\n    spansNotEnded.forEach(msgDetails => {\n      this.endConsumerSpan(msgDetails.msg, isRejected, operation, requeue);\n    });\n    channel[CHANNEL_SPANS_NOT_ENDED] = [];\n  }\n\n  private callConsumeEndHook(\n    span: Span,\n    msg: ConsumeMessage,\n    rejected: boolean | null,\n    endOperation: EndOperation\n  ) {\n    const { consumeEndHook } = this.getConfig();\n    if (!consumeEndHook) return;\n\n    safeExecuteInTheMiddle(\n      () => consumeEndHook(span, { msg, rejected, endOperation }),\n      e => {\n        if (e) {\n          diag.error('amqplib instrumentation: consumerEndHook error', e);\n        }\n      },\n      true\n    );\n  }\n\n  private checkConsumeTimeoutOnChannel(channel: InstrumentationConsumeChannel) {\n    const currentTime = hrTime();\n    const spansNotEnded = channel[CHANNEL_SPANS_NOT_ENDED] ?? [];\n    let i: number;\n    const { consumeTimeoutMs } = this.getConfig();\n    for (i = 0; i < spansNotEnded.length; i++) {\n      const currMessage = spansNotEnded[i];\n      const timeFromConsume = hrTimeDuration(\n        currMessage.timeOfConsume,\n        currentTime\n      );\n      if (hrTimeToMilliseconds(timeFromConsume) < consumeTimeoutMs!) {\n        break;\n      }\n      this.endConsumerSpan(\n        currMessage.msg,\n        null,\n        EndOperation.InstrumentationTimeout,\n        true\n      );\n    }\n    spansNotEnded.splice(0, i);\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport * from './amqplib';\nexport * from './types';\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ContextManager, Context } from '@opentelemetry/api';\nimport { EventEmitter } from 'events';\n\ntype Func<T> = (...args: unknown[]) => T;\n\n/**\n * Store a map for each event of all original listeners and their \"patched\"\n * version. So when a listener is removed by the user, the corresponding\n * patched function will be also removed.\n */\ninterface PatchMap {\n  [name: string]: WeakMap<Func<void>, Func<void>>;\n}\n\nconst ADD_LISTENER_METHODS = [\n  'addListener' as const,\n  'on' as const,\n  'once' as const,\n  'prependListener' as const,\n  'prependOnceListener' as const,\n];\n\nexport abstract class AbstractAsyncHooksContextManager\n  implements ContextManager\n{\n  abstract active(): Context;\n\n  abstract with<A extends unknown[], F extends (...args: A) => ReturnType<F>>(\n    context: Context,\n    fn: F,\n    thisArg?: ThisParameterType<F>,\n    ...args: A\n  ): ReturnType<F>;\n\n  abstract enable(): this;\n\n  abstract disable(): this;\n\n  /**\n   * Binds a the certain context or the active one to the target function and then returns the target\n   * @param context A context (span) to be bind to target\n   * @param target a function or event emitter. When target or one of its callbacks is called,\n   *  the provided context will be used as the active context for the duration of the call.\n   */\n  bind<T>(context: Context, target: T): T {\n    if (target instanceof EventEmitter) {\n      return this._bindEventEmitter(context, target);\n    }\n\n    if (typeof target === 'function') {\n      return this._bindFunction(context, target);\n    }\n    return target;\n  }\n\n  private _bindFunction<T extends Function>(context: Context, target: T): T {\n    const manager = this;\n    const contextWrapper = function (this: never, ...args: unknown[]) {\n      return manager.with(context, () => target.apply(this, args));\n    };\n    Object.defineProperty(contextWrapper, 'length', {\n      enumerable: false,\n      configurable: true,\n      writable: false,\n      value: target.length,\n    });\n    /**\n     * It isn't possible to tell Typescript that contextWrapper is the same as T\n     * so we forced to cast as any here.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return contextWrapper as any;\n  }\n\n  /**\n   * By default, EventEmitter call their callback with their context, which we do\n   * not want, instead we will bind a specific context to all callbacks that\n   * go through it.\n   * @param context the context we want to bind\n   * @param ee EventEmitter an instance of EventEmitter to patch\n   */\n  private _bindEventEmitter<T extends EventEmitter>(\n    context: Context,\n    ee: T\n  ): T {\n    const map = this._getPatchMap(ee);\n    if (map !== undefined) return ee;\n    this._createPatchMap(ee);\n\n    // patch methods that add a listener to propagate context\n    ADD_LISTENER_METHODS.forEach(methodName => {\n      if (ee[methodName] === undefined) return;\n      ee[methodName] = this._patchAddListener(ee, ee[methodName], context);\n    });\n    // patch methods that remove a listener\n    if (typeof ee.removeListener === 'function') {\n      ee.removeListener = this._patchRemoveListener(ee, ee.removeListener);\n    }\n    if (typeof ee.off === 'function') {\n      ee.off = this._patchRemoveListener(ee, ee.off);\n    }\n    // patch method that remove all listeners\n    if (typeof ee.removeAllListeners === 'function') {\n      ee.removeAllListeners = this._patchRemoveAllListeners(\n        ee,\n        ee.removeAllListeners\n      );\n    }\n    return ee;\n  }\n\n  /**\n   * Patch methods that remove a given listener so that we match the \"patched\"\n   * version of that listener (the one that propagate context).\n   * @param ee EventEmitter instance\n   * @param original reference to the patched method\n   */\n  private _patchRemoveListener(ee: EventEmitter, original: Function) {\n    const contextManager = this;\n    return function (this: never, event: string, listener: Func<void>) {\n      const events = contextManager._getPatchMap(ee)?.[event];\n      if (events === undefined) {\n        return original.call(this, event, listener);\n      }\n      const patchedListener = events.get(listener);\n      return original.call(this, event, patchedListener || listener);\n    };\n  }\n\n  /**\n   * Patch methods that remove all listeners so we remove our\n   * internal references for a given event.\n   * @param ee EventEmitter instance\n   * @param original reference to the patched method\n   */\n  private _patchRemoveAllListeners(ee: EventEmitter, original: Function) {\n    const contextManager = this;\n    return function (this: never, event: string) {\n      const map = contextManager._getPatchMap(ee);\n      if (map !== undefined) {\n        if (arguments.length === 0) {\n          contextManager._createPatchMap(ee);\n        } else if (map[event] !== undefined) {\n          delete map[event];\n        }\n      }\n      return original.apply(this, arguments);\n    };\n  }\n\n  /**\n   * Patch methods on an event emitter instance that can add listeners so we\n   * can force them to propagate a given context.\n   * @param ee EventEmitter instance\n   * @param original reference to the patched method\n   * @param [context] context to propagate when calling listeners\n   */\n  private _patchAddListener(\n    ee: EventEmitter,\n    original: Function,\n    context: Context\n  ) {\n    const contextManager = this;\n    return function (this: never, event: string, listener: Func<void>) {\n      /**\n       * This check is required to prevent double-wrapping the listener.\n       * The implementation for ee.once wraps the listener and calls ee.on.\n       * Without this check, we would wrap that wrapped listener.\n       * This causes an issue because ee.removeListener depends on the onceWrapper\n       * to properly remove the listener. If we wrap their wrapper, we break\n       * that detection.\n       */\n      if (contextManager._wrapped) {\n        return original.call(this, event, listener);\n      }\n      let map = contextManager._getPatchMap(ee);\n      if (map === undefined) {\n        map = contextManager._createPatchMap(ee);\n      }\n      let listeners = map[event];\n      if (listeners === undefined) {\n        listeners = new WeakMap();\n        map[event] = listeners;\n      }\n      const patchedListener = contextManager.bind(context, listener);\n      // store a weak reference of the user listener to ours\n      listeners.set(listener, patchedListener);\n\n      /**\n       * See comment at the start of this function for the explanation of this property.\n       */\n      contextManager._wrapped = true;\n      try {\n        return original.call(this, event, patchedListener);\n      } finally {\n        contextManager._wrapped = false;\n      }\n    };\n  }\n\n  private _createPatchMap(ee: EventEmitter): PatchMap {\n    const map = Object.create(null);\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (ee as any)[this._kOtListeners] = map;\n    return map;\n  }\n  private _getPatchMap(ee: EventEmitter): PatchMap | undefined {\n    return (ee as never)[this._kOtListeners];\n  }\n\n  private readonly _kOtListeners = Symbol('OtListeners');\n  private _wrapped = false;\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Context, ROOT_CONTEXT } from '@opentelemetry/api';\nimport * as asyncHooks from 'async_hooks';\nimport { AbstractAsyncHooksContextManager } from './AbstractAsyncHooksContextManager';\n\nexport class AsyncHooksContextManager extends AbstractAsyncHooksContextManager {\n  private _asyncHook: asyncHooks.AsyncHook;\n  private _contexts: Map<number, Context> = new Map();\n  private _stack: Array<Context | undefined> = [];\n\n  constructor() {\n    super();\n    this._asyncHook = asyncHooks.createHook({\n      init: this._init.bind(this),\n      before: this._before.bind(this),\n      after: this._after.bind(this),\n      destroy: this._destroy.bind(this),\n      promiseResolve: this._destroy.bind(this),\n    });\n  }\n\n  active(): Context {\n    return this._stack[this._stack.length - 1] ?? ROOT_CONTEXT;\n  }\n\n  with<A extends unknown[], F extends (...args: A) => ReturnType<F>>(\n    context: Context,\n    fn: F,\n    thisArg?: ThisParameterType<F>,\n    ...args: A\n  ): ReturnType<F> {\n    this._enterContext(context);\n    try {\n      return fn.call(thisArg!, ...args);\n    } finally {\n      this._exitContext();\n    }\n  }\n\n  enable(): this {\n    this._asyncHook.enable();\n    return this;\n  }\n\n  disable(): this {\n    this._asyncHook.disable();\n    this._contexts.clear();\n    this._stack = [];\n    return this;\n  }\n\n  /**\n   * Init hook will be called when userland create a async context, setting the\n   * context as the current one if it exist.\n   * @param uid id of the async context\n   * @param type the resource type\n   */\n  private _init(uid: number, type: string) {\n    // ignore TIMERWRAP as they combine timers with same timeout which can lead to\n    // false context propagation. TIMERWRAP has been removed in node 11\n    // every timer has it's own `Timeout` resource anyway which is used to propagate\n    // context.\n    if (type === 'TIMERWRAP') return;\n\n    const context = this._stack[this._stack.length - 1];\n    if (context !== undefined) {\n      this._contexts.set(uid, context);\n    }\n  }\n\n  /**\n   * Destroy hook will be called when a given context is no longer used so we can\n   * remove its attached context.\n   * @param uid uid of the async context\n   */\n  private _destroy(uid: number) {\n    this._contexts.delete(uid);\n  }\n\n  /**\n   * Before hook is called just before executing a async context.\n   * @param uid uid of the async context\n   */\n  private _before(uid: number) {\n    const context = this._contexts.get(uid);\n    if (context !== undefined) {\n      this._enterContext(context);\n    }\n  }\n\n  /**\n   * After hook is called just after completing the execution of a async context.\n   */\n  private _after() {\n    this._exitContext();\n  }\n\n  /**\n   * Set the given context as active\n   */\n  private _enterContext(context: Context) {\n    this._stack.push(context);\n  }\n\n  /**\n   * Remove the context at the root of the stack\n   */\n  private _exitContext() {\n    this._stack.pop();\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Context, ROOT_CONTEXT } from '@opentelemetry/api';\nimport { AsyncLocalStorage } from 'async_hooks';\nimport { AbstractAsyncHooksContextManager } from './AbstractAsyncHooksContextManager';\n\nexport class AsyncLocalStorageContextManager extends AbstractAsyncHooksContextManager {\n  private _asyncLocalStorage: AsyncLocalStorage<Context>;\n\n  constructor() {\n    super();\n    this._asyncLocalStorage = new AsyncLocalStorage();\n  }\n\n  active(): Context {\n    return this._asyncLocalStorage.getStore() ?? ROOT_CONTEXT;\n  }\n\n  with<A extends unknown[], F extends (...args: A) => ReturnType<F>>(\n    context: Context,\n    fn: F,\n    thisArg?: ThisParameterType<F>,\n    ...args: A\n  ): ReturnType<F> {\n    const cb = thisArg == null ? fn : fn.bind(thisArg);\n    return this._asyncLocalStorage.run(context, cb as never, ...args);\n  }\n\n  enable(): this {\n    return this;\n  }\n\n  disable(): this {\n    this._asyncLocalStorage.disable();\n    return this;\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport { AsyncHooksContextManager } from './AsyncHooksContextManager';\nexport { AsyncLocalStorageContextManager } from './AsyncLocalStorageContextManager';\n", "{\n  \"name\": \"dotenv\",\n  \"version\": \"16.5.0\",\n  \"description\": \"Loads environment variables from .env file\",\n  \"main\": \"lib/main.js\",\n  \"types\": \"lib/main.d.ts\",\n  \"exports\": {\n    \".\": {\n      \"types\": \"./lib/main.d.ts\",\n      \"require\": \"./lib/main.js\",\n      \"default\": \"./lib/main.js\"\n    },\n    \"./config\": \"./config.js\",\n    \"./config.js\": \"./config.js\",\n    \"./lib/env-options\": \"./lib/env-options.js\",\n    \"./lib/env-options.js\": \"./lib/env-options.js\",\n    \"./lib/cli-options\": \"./lib/cli-options.js\",\n    \"./lib/cli-options.js\": \"./lib/cli-options.js\",\n    \"./package.json\": \"./package.json\"\n  },\n  \"scripts\": {\n    \"dts-check\": \"tsc --project tests/types/tsconfig.json\",\n    \"lint\": \"standard\",\n    \"pretest\": \"npm run lint && npm run dts-check\",\n    \"test\": \"tap run --allow-empty-coverage --disable-coverage --timeout=60000\",\n    \"test:coverage\": \"tap run --show-full-coverage --timeout=60000 --coverage-report=lcov\",\n    \"prerelease\": \"npm test\",\n    \"release\": \"standard-version\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git://github.com/motdotla/dotenv.git\"\n  },\n  \"homepage\": \"https://github.com/motdotla/dotenv#readme\",\n  \"funding\": \"https://dotenvx.com\",\n  \"keywords\": [\n    \"dotenv\",\n    \"env\",\n    \".env\",\n    \"environment\",\n    \"variables\",\n    \"config\",\n    \"settings\"\n  ],\n  \"readmeFilename\": \"README.md\",\n  \"license\": \"BSD-2-Clause\",\n  \"devDependencies\": {\n    \"@types/node\": \"^18.11.3\",\n    \"decache\": \"^4.6.2\",\n    \"sinon\": \"^14.0.1\",\n    \"standard\": \"^17.0.0\",\n    \"standard-version\": \"^9.5.0\",\n    \"tap\": \"^19.2.0\",\n    \"typescript\": \"^4.8.4\"\n  },\n  \"engines\": {\n    \"node\": \">=12\"\n  },\n  \"browser\": {\n    \"fs\": false\n  }\n}\n", "const fs = require('fs')\nconst path = require('path')\nconst os = require('os')\nconst crypto = require('crypto')\nconst packageJson = require('../package.json')\n\nconst version = packageJson.version\n\nconst LINE = /(?:^|^)\\s*(?:export\\s+)?([\\w.-]+)(?:\\s*=\\s*?|:\\s+?)(\\s*'(?:\\\\'|[^'])*'|\\s*\"(?:\\\\\"|[^\"])*\"|\\s*`(?:\\\\`|[^`])*`|[^#\\r\\n]+)?\\s*(?:#.*)?(?:$|$)/mg\n\n// Parse src into an Object\nfunction parse (src) {\n  const obj = {}\n\n  // Convert buffer to string\n  let lines = src.toString()\n\n  // Convert line breaks to same format\n  lines = lines.replace(/\\r\\n?/mg, '\\n')\n\n  let match\n  while ((match = LINE.exec(lines)) != null) {\n    const key = match[1]\n\n    // Default undefined or null to empty string\n    let value = (match[2] || '')\n\n    // Remove whitespace\n    value = value.trim()\n\n    // Check if double quoted\n    const maybeQuote = value[0]\n\n    // Remove surrounding quotes\n    value = value.replace(/^(['\"`])([\\s\\S]*)\\1$/mg, '$2')\n\n    // Expand newlines if double quoted\n    if (maybeQuote === '\"') {\n      value = value.replace(/\\\\n/g, '\\n')\n      value = value.replace(/\\\\r/g, '\\r')\n    }\n\n    // Add to object\n    obj[key] = value\n  }\n\n  return obj\n}\n\nfunction _parseVault (options) {\n  const vaultPath = _vaultPath(options)\n\n  // Parse .env.vault\n  const result = DotenvModule.configDotenv({ path: vaultPath })\n  if (!result.parsed) {\n    const err = new Error(`MISSING_DATA: Cannot parse ${vaultPath} for an unknown reason`)\n    err.code = 'MISSING_DATA'\n    throw err\n  }\n\n  // handle scenario for comma separated keys - for use with key rotation\n  // example: DOTENV_KEY=\"dotenv://:key_1234@dotenvx.com/vault/.env.vault?environment=prod,dotenv://:key_7890@dotenvx.com/vault/.env.vault?environment=prod\"\n  const keys = _dotenvKey(options).split(',')\n  const length = keys.length\n\n  let decrypted\n  for (let i = 0; i < length; i++) {\n    try {\n      // Get full key\n      const key = keys[i].trim()\n\n      // Get instructions for decrypt\n      const attrs = _instructions(result, key)\n\n      // Decrypt\n      decrypted = DotenvModule.decrypt(attrs.ciphertext, attrs.key)\n\n      break\n    } catch (error) {\n      // last key\n      if (i + 1 >= length) {\n        throw error\n      }\n      // try next key\n    }\n  }\n\n  // Parse decrypted .env string\n  return DotenvModule.parse(decrypted)\n}\n\nfunction _warn (message) {\n  console.log(`[dotenv@${version}][WARN] ${message}`)\n}\n\nfunction _debug (message) {\n  console.log(`[dotenv@${version}][DEBUG] ${message}`)\n}\n\nfunction _dotenvKey (options) {\n  // prioritize developer directly setting options.DOTENV_KEY\n  if (options && options.DOTENV_KEY && options.DOTENV_KEY.length > 0) {\n    return options.DOTENV_KEY\n  }\n\n  // secondary infra already contains a DOTENV_KEY environment variable\n  if (process.env.DOTENV_KEY && process.env.DOTENV_KEY.length > 0) {\n    return process.env.DOTENV_KEY\n  }\n\n  // fallback to empty string\n  return ''\n}\n\nfunction _instructions (result, dotenvKey) {\n  // Parse DOTENV_KEY. Format is a URI\n  let uri\n  try {\n    uri = new URL(dotenvKey)\n  } catch (error) {\n    if (error.code === 'ERR_INVALID_URL') {\n      const err = new Error('INVALID_DOTENV_KEY: Wrong format. Must be in valid uri format like dotenv://:key_1234@dotenvx.com/vault/.env.vault?environment=development')\n      err.code = 'INVALID_DOTENV_KEY'\n      throw err\n    }\n\n    throw error\n  }\n\n  // Get decrypt key\n  const key = uri.password\n  if (!key) {\n    const err = new Error('INVALID_DOTENV_KEY: Missing key part')\n    err.code = 'INVALID_DOTENV_KEY'\n    throw err\n  }\n\n  // Get environment\n  const environment = uri.searchParams.get('environment')\n  if (!environment) {\n    const err = new Error('INVALID_DOTENV_KEY: Missing environment part')\n    err.code = 'INVALID_DOTENV_KEY'\n    throw err\n  }\n\n  // Get ciphertext payload\n  const environmentKey = `DOTENV_VAULT_${environment.toUpperCase()}`\n  const ciphertext = result.parsed[environmentKey] // DOTENV_VAULT_PRODUCTION\n  if (!ciphertext) {\n    const err = new Error(`NOT_FOUND_DOTENV_ENVIRONMENT: Cannot locate environment ${environmentKey} in your .env.vault file.`)\n    err.code = 'NOT_FOUND_DOTENV_ENVIRONMENT'\n    throw err\n  }\n\n  return { ciphertext, key }\n}\n\nfunction _vaultPath (options) {\n  let possibleVaultPath = null\n\n  if (options && options.path && options.path.length > 0) {\n    if (Array.isArray(options.path)) {\n      for (const filepath of options.path) {\n        if (fs.existsSync(filepath)) {\n          possibleVaultPath = filepath.endsWith('.vault') ? filepath : `${filepath}.vault`\n        }\n      }\n    } else {\n      possibleVaultPath = options.path.endsWith('.vault') ? options.path : `${options.path}.vault`\n    }\n  } else {\n    possibleVaultPath = path.resolve(process.cwd(), '.env.vault')\n  }\n\n  if (fs.existsSync(possibleVaultPath)) {\n    return possibleVaultPath\n  }\n\n  return null\n}\n\nfunction _resolveHome (envPath) {\n  return envPath[0] === '~' ? path.join(os.homedir(), envPath.slice(1)) : envPath\n}\n\nfunction _configVault (options) {\n  const debug = Boolean(options && options.debug)\n  if (debug) {\n    _debug('Loading env from encrypted .env.vault')\n  }\n\n  const parsed = DotenvModule._parseVault(options)\n\n  let processEnv = process.env\n  if (options && options.processEnv != null) {\n    processEnv = options.processEnv\n  }\n\n  DotenvModule.populate(processEnv, parsed, options)\n\n  return { parsed }\n}\n\nfunction configDotenv (options) {\n  const dotenvPath = path.resolve(process.cwd(), '.env')\n  let encoding = 'utf8'\n  const debug = Boolean(options && options.debug)\n\n  if (options && options.encoding) {\n    encoding = options.encoding\n  } else {\n    if (debug) {\n      _debug('No encoding is specified. UTF-8 is used by default')\n    }\n  }\n\n  let optionPaths = [dotenvPath] // default, look for .env\n  if (options && options.path) {\n    if (!Array.isArray(options.path)) {\n      optionPaths = [_resolveHome(options.path)]\n    } else {\n      optionPaths = [] // reset default\n      for (const filepath of options.path) {\n        optionPaths.push(_resolveHome(filepath))\n      }\n    }\n  }\n\n  // Build the parsed data in a temporary object (because we need to return it).  Once we have the final\n  // parsed data, we will combine it with process.env (or options.processEnv if provided).\n  let lastError\n  const parsedAll = {}\n  for (const path of optionPaths) {\n    try {\n      // Specifying an encoding returns a string instead of a buffer\n      const parsed = DotenvModule.parse(fs.readFileSync(path, { encoding }))\n\n      DotenvModule.populate(parsedAll, parsed, options)\n    } catch (e) {\n      if (debug) {\n        _debug(`Failed to load ${path} ${e.message}`)\n      }\n      lastError = e\n    }\n  }\n\n  let processEnv = process.env\n  if (options && options.processEnv != null) {\n    processEnv = options.processEnv\n  }\n\n  DotenvModule.populate(processEnv, parsedAll, options)\n\n  if (lastError) {\n    return { parsed: parsedAll, error: lastError }\n  } else {\n    return { parsed: parsedAll }\n  }\n}\n\n// Populates process.env from .env file\nfunction config (options) {\n  // fallback to original dotenv if DOTENV_KEY is not set\n  if (_dotenvKey(options).length === 0) {\n    return DotenvModule.configDotenv(options)\n  }\n\n  const vaultPath = _vaultPath(options)\n\n  // dotenvKey exists but .env.vault file does not exist\n  if (!vaultPath) {\n    _warn(`You set DOTENV_KEY but you are missing a .env.vault file at ${vaultPath}. Did you forget to build it?`)\n\n    return DotenvModule.configDotenv(options)\n  }\n\n  return DotenvModule._configVault(options)\n}\n\nfunction decrypt (encrypted, keyStr) {\n  const key = Buffer.from(keyStr.slice(-64), 'hex')\n  let ciphertext = Buffer.from(encrypted, 'base64')\n\n  const nonce = ciphertext.subarray(0, 12)\n  const authTag = ciphertext.subarray(-16)\n  ciphertext = ciphertext.subarray(12, -16)\n\n  try {\n    const aesgcm = crypto.createDecipheriv('aes-256-gcm', key, nonce)\n    aesgcm.setAuthTag(authTag)\n    return `${aesgcm.update(ciphertext)}${aesgcm.final()}`\n  } catch (error) {\n    const isRange = error instanceof RangeError\n    const invalidKeyLength = error.message === 'Invalid key length'\n    const decryptionFailed = error.message === 'Unsupported state or unable to authenticate data'\n\n    if (isRange || invalidKeyLength) {\n      const err = new Error('INVALID_DOTENV_KEY: It must be 64 characters long (or more)')\n      err.code = 'INVALID_DOTENV_KEY'\n      throw err\n    } else if (decryptionFailed) {\n      const err = new Error('DECRYPTION_FAILED: Please check your DOTENV_KEY')\n      err.code = 'DECRYPTION_FAILED'\n      throw err\n    } else {\n      throw error\n    }\n  }\n}\n\n// Populate process.env with parsed values\nfunction populate (processEnv, parsed, options = {}) {\n  const debug = Boolean(options && options.debug)\n  const override = Boolean(options && options.override)\n\n  if (typeof parsed !== 'object') {\n    const err = new Error('OBJECT_REQUIRED: Please check the processEnv argument being passed to populate')\n    err.code = 'OBJECT_REQUIRED'\n    throw err\n  }\n\n  // Set process.env\n  for (const key of Object.keys(parsed)) {\n    if (Object.prototype.hasOwnProperty.call(processEnv, key)) {\n      if (override === true) {\n        processEnv[key] = parsed[key]\n      }\n\n      if (debug) {\n        if (override === true) {\n          _debug(`\"${key}\" is already defined and WAS overwritten`)\n        } else {\n          _debug(`\"${key}\" is already defined and was NOT overwritten`)\n        }\n      }\n    } else {\n      processEnv[key] = parsed[key]\n    }\n  }\n}\n\nconst DotenvModule = {\n  configDotenv,\n  _configVault,\n  _parseVault,\n  config,\n  decrypt,\n  parse,\n  populate\n}\n\nmodule.exports.configDotenv = DotenvModule.configDotenv\nmodule.exports._configVault = DotenvModule._configVault\nmodule.exports._parseVault = DotenvModule._parseVault\nmodule.exports.config = DotenvModule.config\nmodule.exports.decrypt = DotenvModule.decrypt\nmodule.exports.parse = DotenvModule.parse\nmodule.exports.populate = DotenvModule.populate\n\nmodule.exports = DotenvModule\n", "import { existsSync } from 'node:fs'\nimport { dirname, resolve } from 'node:path'\nimport { fileURLToPath } from 'node:url'\nimport { sentryEsbuildPlugin } from '@sentry/esbuild-plugin'\nimport * as Sentry from '@sentry/node'\nimport { esbuildPlugin } from '@trigger.dev/build/extensions'\nimport {\n  additionalFiles,\n  syncVercelEnvVars,\n} from '@trigger.dev/build/extensions/core'\nimport { defineConfig } from '@trigger.dev/sdk'\nimport * as dotenv from 'dotenv'\nimport { globSync } from 'glob'\n\nif (process.env.NODE_ENV !== 'production') {\n  dotenv.config({ path: '.env.local' })\n}\n\ndotenv.config({ path: '.env' })\n\nconst triggerProjectId = process.env.TRIGGER_PROJECT_ID || 'project-id'\n\n// Current file and directory\nconst __filename = fileURLToPath(import.meta.url)\nconst __dirname = dirname(__filename)\n\n// Project root directory (3 levels up from trigger.config.ts in frontend/internal-packages/jobs)\nconst rootDir = resolve(__dirname, '../../..')\n\n// Find Prisma WASM files using glob patterns relative to the project root\nconst findPrismaWasmFiles = () => {\n  const patterns = [\n    // Look in node_modules for prisma WASM files (pnpm structure)\n    'node_modules/.pnpm/@prisma+prisma-schema-wasm@*/node_modules/@prisma/prisma-schema-wasm/src/*.wasm',\n    'node_modules/.pnpm/prisma@*/node_modules/prisma/build/*.wasm',\n    // Look in standard node_modules locations as fallback\n    'node_modules/@prisma/prisma-schema-wasm/src/*.wasm',\n    'node_modules/prisma/build/*.wasm',\n  ]\n\n  const files: string[] = []\n\n  for (const pattern of patterns) {\n    const found = globSync(pattern, { cwd: rootDir, absolute: true })\n    files.push(...found)\n  }\n\n  console.info('Found Prisma WASM files:', files)\n\n  return files\n}\n\n// Find PGLite files using glob patterns relative to the project root\nconst findPgliteFiles = () => {\n  const patterns = [\n    // Look for locally copied files first (from postinstall script)\n    'frontend/internal-packages/jobs/pglite.data',\n    'frontend/internal-packages/jobs/pglite.wasm',\n    // Look in workspace packages\n    'frontend/packages/pglite-server/node_modules/@electric-sql/pglite/dist/pglite.data',\n    'frontend/packages/pglite-server/node_modules/@electric-sql/pglite/dist/pglite.wasm',\n  ]\n\n  const files: string[] = []\n\n  for (const pattern of patterns) {\n    const found = globSync(pattern, { cwd: rootDir, absolute: true })\n    files.push(...found)\n  }\n\n  console.info('Found PGLite files:', files)\n\n  // If no files found, try to find them in the current jobs directory\n  if (files.length === 0) {\n    const localFiles = [\n      resolve(__dirname, 'pglite.data'),\n      resolve(__dirname, 'pglite.wasm'),\n    ]\n\n    // Use synchronous fs check\n    for (const file of localFiles) {\n      try {\n        if (existsSync(file)) {\n          files.push(file)\n        }\n      } catch (error) {\n        console.warn(`Could not check file existence: ${file}`, error)\n      }\n    }\n  }\n\n  return files\n}\n\n// Find all WASM files and make paths relative for additionalFiles\nconst prismaWasmFiles = findPrismaWasmFiles()\nconst pgliteFiles = findPgliteFiles()\n\nexport default defineConfig({\n  project: triggerProjectId,\n  runtime: 'node',\n  logLevel: 'log',\n  // The max compute seconds a task is allowed to run. If the task run exceeds this duration, it will be stopped.\n  // You can override this on an individual task.\n  // See https://trigger.dev/docs/runs/max-duration\n  maxDuration: 3600,\n  retries: {\n    enabledInDev: true,\n    default: {\n      maxAttempts: 3,\n      minTimeoutInMs: 1000,\n      maxTimeoutInMs: 10000,\n      factor: 2,\n      randomize: true,\n    },\n  },\n  build: {},\n  init: async () => {\n    Sentry.init({\n      dsn: process.env.SENTRY_DSN,\n\n      tracesSampleRate: 1,\n\n      debug: false,\n\n      environment: process.env.NEXT_PUBLIC_ENV_NAME,\n    })\n  },\n  onFailure: async ({ error, task }) => {\n    Sentry.captureException(error, {\n      extra: {\n        taskId: task,\n        error: error instanceof Error ? error.message : String(error),\n      },\n    })\n  },\n  dirs: ['./src/trigger', './src/tasks'],\n})\nexport const resolveEnvVars = undefined;", "import * as exports from './logs/exports.js';\nexport { exports as logger };\nexport { httpIntegration } from './integrations/http/index.js';\nexport { nativeNodeFetchIntegration } from './integrations/node-fetch/index.js';\nexport { fsIntegration } from './integrations/fs.js';\nexport { nodeContextIntegration } from './integrations/context.js';\nexport { contextLinesIntegration } from './integrations/contextlines.js';\nexport { localVariablesIntegration } from './integrations/local-variables/index.js';\nexport { modulesIntegration } from './integrations/modules.js';\nexport { onUncaughtExceptionIntegration } from './integrations/onuncaughtexception.js';\nexport { onUnhandledRejectionIntegration } from './integrations/onunhandledrejection.js';\nexport { anrIntegration, disableAnrDetectionForCallback } from './integrations/anr/index.js';\nexport { expressErrorHandler, expressIntegration, setupExpressErrorHandler } from './integrations/tracing/express.js';\nexport { fastifyIntegration, setupFastifyErrorHandler } from './integrations/tracing/fastify/index.js';\nexport { graphqlIntegration } from './integrations/tracing/graphql.js';\nexport { kafkaIntegration } from './integrations/tracing/kafka.js';\nexport { lruMemoizerIntegration } from './integrations/tracing/lrumemoizer.js';\nexport { mongoIntegration } from './integrations/tracing/mongo.js';\nexport { mongooseIntegration } from './integrations/tracing/mongoose.js';\nexport { mysqlIntegration } from './integrations/tracing/mysql.js';\nexport { mysql2Integration } from './integrations/tracing/mysql2.js';\nexport { redisIntegration } from './integrations/tracing/redis.js';\nexport { postgresIntegration } from './integrations/tracing/postgres.js';\nexport { prismaIntegration } from './integrations/tracing/prisma.js';\nexport { hapiIntegration, setupHapiErrorHandler } from './integrations/tracing/hapi/index.js';\nexport { koaIntegration, setupKoaErrorHandler } from './integrations/tracing/koa.js';\nexport { connectIntegration, setupConnectErrorHandler } from './integrations/tracing/connect.js';\nexport { spotlightIntegration } from './integrations/spotlight.js';\nexport { knexIntegration } from './integrations/tracing/knex.js';\nexport { tediousIntegration } from './integrations/tracing/tedious.js';\nexport { genericPoolIntegration } from './integrations/tracing/genericPool.js';\nexport { dataloaderIntegration } from './integrations/tracing/dataloader.js';\nexport { amqplibIntegration } from './integrations/tracing/amqplib.js';\nexport { vercelAIIntegration } from './integrations/tracing/vercelai/index.js';\nexport { childProcessIntegration } from './integrations/childProcess.js';\nexport { createSentryWinstonTransport } from './integrations/winston.js';\nexport { SentryContextManager } from './otel/contextManager.js';\nexport { generateInstrumentOnce } from './otel/instrument.js';\nexport { getDefaultIntegrations, getDefaultIntegrationsWithoutPerformance, init, initWithoutDefaultIntegrations, validateOpenTelemetrySetup } from './sdk/index.js';\nexport { initOpenTelemetry, preloadOpenTelemetry } from './sdk/initOtel.js';\nexport { getAutoPerformanceIntegrations } from './integrations/tracing/index.js';\nexport { defaultStackParser, getSentryRelease } from './sdk/api.js';\nexport { createGetModuleFromFilename } from './utils/module.js';\nexport { makeNodeTransport } from './transports/http.js';\nexport { NodeClient } from './sdk/client.js';\nexport { cron } from './cron/index.js';\nexport { setOpenTelemetryContextAsyncContextStrategy as setNodeAsyncContextStrategy } from '@sentry/opentelemetry';\nexport { SDK_VERSION, SEMANTIC_ATTRIBUTE_SENTRY_OP, SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE, SEMANTIC_ATTRIBUTE_SENTRY_SOURCE, Scope, addBreadcrumb, addEventProcessor, addIntegration, captureCheckIn, captureConsoleIntegration, captureEvent, captureException, captureFeedback, captureMessage, captureSession, close, consoleIntegration, consoleLoggingIntegration, continueTrace, createTransport, dedupeIntegration, endSession, eventFiltersIntegration, extraErrorDataIntegration, flush, functionToStringIntegration, getActiveSpan, getClient, getCurrentScope, getGlobalScope, getIsolationScope, getRootSpan, getSpanDescendants, getSpanStatusFromHttpCode, getTraceData, getTraceMetaTags, inboundFiltersIntegration, instrumentSupabaseClient, isInitialized, lastEventId, linkedErrorsIntegration, parameterize, profiler, requestDataIntegration, rewriteFramesIntegration, setContext, setCurrentClient, setExtra, setExtras, setHttpStatus, setMeasurement, setTag, setTags, setUser, spanToBaggageHeader, spanToJSON, spanToTraceHeader, startInactiveSpan, startNewTrace, startSession, startSpan, startSpanManual, supabaseIntegration, suppressTracing, trpcMiddleware, updateSpanName, withActiveSpan, withIsolationScope, withMonitor, withScope, wrapMcpServerWithSentry, zodErrorsIntegration } from '@sentry/core';\n//# sourceMappingURL=index.js.map\n", "export { registerSpanErrorInstrumentation } from './tracing/errors.js';\nexport { getCapturedScopesOnSpan, setCapturedScopesOnSpan } from './tracing/utils.js';\nexport { TRACING_DEFAULTS, startIdleSpan } from './tracing/idleSpan.js';\nexport { SentrySpan } from './tracing/sentrySpan.js';\nexport { SentryNonRecordingSpan } from './tracing/sentryNonRecordingSpan.js';\nexport { SPAN_STATUS_ERROR, SPAN_STATUS_OK, SPAN_STATUS_UNSET, getSpanStatusFromHttpCode, setHttpStatus } from './tracing/spanstatus.js';\nexport { continueTrace, startInactiveSpan, startNewTrace, startSpan, startSpanManual, suppressTracing, withActiveSpan } from './tracing/trace.js';\nexport { getDynamicSamplingContextFromClient, getDynamicSamplingContextFromScope, getDynamicSamplingContextFromSpan, spanToBaggageHeader } from './tracing/dynamicSamplingContext.js';\nexport { setMeasurement, timedEventsToMeasurements } from './tracing/measurement.js';\nexport { sampleSpan } from './tracing/sampling.js';\nexport { logSpanEnd, logSpanStart } from './tracing/logSpans.js';\nexport { SEMANTIC_ATTRIBUTE_CACHE_HIT, SEMANTIC_ATTRIBUTE_CACHE_ITEM_SIZE, SEMANTIC_ATTRIBUTE_CACHE_KEY, SEMANTIC_ATTRIBUTE_EXCLUSIVE_TIME, SEMANTIC_ATTRIBUTE_HTTP_REQUEST_METHOD, SEMANTIC_ATTRIBUTE_PROFILE_ID, SEMANTIC_ATTRIBUTE_SENTRY_CUSTOM_SPAN_NAME, SEMANTIC_ATTRIBUTE_SENTRY_IDLE_SPAN_FINISH_REASON, SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_UNIT, SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_VALUE, SEMANTIC_ATTRIBUTE_SENTRY_OP, SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, SEMANTIC_ATTRIBUTE_SENTRY_PREVIOUS_TRACE_SAMPLE_RATE, SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE, SEMANTIC_ATTRIBUTE_SENTRY_SOURCE, SEMANTIC_ATTRIBUTE_URL_FULL, SEMANTIC_LINK_ATTRIBUTE_LINK_TYPE } from './semanticAttributes.js';\nexport { createEventEnvelope, createSessionEnvelope, createSpanEnvelope } from './envelope.js';\nexport { addEventProcessor, captureCheckIn, captureEvent, captureException, captureMessage, captureSession, close, endSession, flush, isEnabled, isInitialized, lastEventId, setContext, setExtra, setExtras, setTag, setTags, setUser, startSession, withMonitor } from './exports.js';\nexport { getClient, getCurrentScope, getGlobalScope, getIsolationScope, getTraceContextFromScope, withIsolationScope, withScope } from './currentScopes.js';\nexport { getDefaultCurrentScope, getDefaultIsolationScope } from './defaultScopes.js';\nexport { setAsyncContextStrategy } from './asyncContext/index.js';\nexport { getGlobalSingleton, getMainCarrier } from './carrier.js';\nexport { closeSession, makeSession, updateSession } from './session.js';\nexport { Scope } from './scope.js';\nexport { notifyEventProcessors } from './eventProcessors.js';\nexport { getEnvelopeEndpointWithUrlEncodedAuth, getReportDialogEndpoint } from './api.js';\nexport { BaseClient, Client } from './client.js';\nexport { ServerRuntimeClient } from './server-runtime-client.js';\nexport { initAndBind, setCurrentClient } from './sdk.js';\nexport { createTransport } from './transports/base.js';\nexport { makeOfflineTransport } from './transports/offline.js';\nexport { makeMultiplexedTransport } from './transports/multiplexed.js';\nexport { addIntegration, defineIntegration, getIntegrationsToSetup } from './integration.js';\nexport { applyScopeDataToEvent, mergeScopeData } from './utils/applyScopeDataToEvent.js';\nexport { prepareEvent } from './utils/prepareEvent.js';\nexport { createCheckInEnvelope } from './checkin.js';\nexport { hasSpansEnabled, hasTracingEnabled } from './utils/hasSpansEnabled.js';\nexport { isSentryRequestUrl } from './utils/isSentryRequestUrl.js';\nexport { handleCallbackErrors } from './utils/handleCallbackErrors.js';\nexport { fmt, parameterize } from './utils/parameterize.js';\nexport { addAutoIpAddressToSession, addAutoIpAddressToUser } from './utils/ipAddress.js';\nexport { addChildSpanToSpan, convertSpanLinksForEnvelope, getActiveSpan, getRootSpan, getSpanDescendants, getStatusMessage, spanIsSampled, spanTimeInputToSeconds, spanToJSON, spanToTraceContext, spanToTraceHeader, updateSpanName } from './utils/spanUtils.js';\nexport { parseSampleRate } from './utils/parseSampleRate.js';\nexport { applySdkMetadata } from './utils/sdkMetadata.js';\nexport { getTraceData } from './utils/traceData.js';\nexport { getTraceMetaTags } from './utils/meta.js';\nexport { extractQueryParamsFromUrl, headersToDict, httpRequestToRequestData, winterCGHeadersToDict, winterCGRequestToRequestData } from './utils/request.js';\nexport { DEFAULT_ENVIRONMENT } from './constants.js';\nexport { addBreadcrumb } from './breadcrumbs.js';\nexport { functionToStringIntegration } from './integrations/functiontostring.js';\nexport { eventFiltersIntegration, inboundFiltersIntegration } from './integrations/eventFilters.js';\nexport { linkedErrorsIntegration } from './integrations/linkederrors.js';\nexport { moduleMetadataIntegration } from './integrations/metadata.js';\nexport { requestDataIntegration } from './integrations/requestdata.js';\nexport { captureConsoleIntegration } from './integrations/captureconsole.js';\nexport { dedupeIntegration } from './integrations/dedupe.js';\nexport { extraErrorDataIntegration } from './integrations/extraerrordata.js';\nexport { rewriteFramesIntegration } from './integrations/rewriteframes.js';\nexport { instrumentSupabaseClient, supabaseIntegration } from './integrations/supabase.js';\nexport { zodErrorsIntegration } from './integrations/zoderrors.js';\nexport { thirdPartyErrorFilterIntegration } from './integrations/third-party-errors-filter.js';\nexport { consoleIntegration } from './integrations/console.js';\nexport { profiler } from './profiling.js';\nexport { instrumentFetchRequest } from './fetch.js';\nexport { trpcMiddleware } from './trpc.js';\nexport { wrapMcpServerWithSentry } from './mcp-server.js';\nexport { captureFeedback } from './feedback.js';\nexport { _INTERNAL_captureLog, _INTERNAL_flushLogsBuffer } from './logs/exports.js';\nexport { consoleLoggingIntegration } from './logs/console-integration.js';\nexport { applyAggregateErrorsToEvent } from './utils-hoist/aggregate-errors.js';\nexport { getBreadcrumbLogLevelFromHttpStatusCode } from './utils-hoist/breadcrumb-log-level.js';\nexport { getComponentName, getLocationHref, htmlTreeAsString } from './utils-hoist/browser.js';\nexport { dsnFromString, dsnToString, makeDsn } from './utils-hoist/dsn.js';\nexport { SentryError } from './utils-hoist/error.js';\nexport { GLOBAL_OBJ } from './utils-hoist/worldwide.js';\nexport { addConsoleInstrumentationHandler } from './utils-hoist/instrument/console.js';\nexport { addFetchEndInstrumentationHandler, addFetchInstrumentationHandler } from './utils-hoist/instrument/fetch.js';\nexport { addGlobalErrorInstrumentationHandler } from './utils-hoist/instrument/globalError.js';\nexport { addGlobalUnhandledRejectionInstrumentationHandler } from './utils-hoist/instrument/globalUnhandledRejection.js';\nexport { addHandler, maybeInstrument, resetInstrumentationHandlers, triggerHandlers } from './utils-hoist/instrument/handlers.js';\nexport { isDOMError, isDOMException, isElement, isError, isErrorEvent, isEvent, isInstanceOf, isParameterizedString, isPlainObject, isPrimitive, isRegExp, isString, isSyntheticEvent, isThenable, isVueViewModel } from './utils-hoist/is.js';\nexport { isBrowser } from './utils-hoist/isBrowser.js';\nexport { CONSOLE_LEVELS, consoleSandbox, logger, originalConsoleMethods } from './utils-hoist/logger.js';\nexport { addContextToFrame, addExceptionMechanism, addExceptionTypeValue, checkOrSetAlreadyCaught, getEventDescription, parseSemver, uuid4 } from './utils-hoist/misc.js';\nexport { isNodeEnv, loadModule } from './utils-hoist/node.js';\nexport { normalize, normalizeToSize, normalizeUrlToBase } from './utils-hoist/normalize.js';\nexport { addNonEnumerableProperty, convertToPlainObject, dropUndefinedKeys, extractExceptionKeysForMessage, fill, getOriginalFunction, markFunctionWrapped, objectify } from './utils-hoist/object.js';\nexport { basename, dirname, isAbsolute, join, normalizePath, relative, resolve } from './utils-hoist/path.js';\nexport { SENTRY_BUFFER_FULL_ERROR, makePromiseBuffer } from './utils-hoist/promisebuffer.js';\nexport { severityLevelFromString } from './utils-hoist/severity.js';\nexport { UNKNOWN_FUNCTION, createStackParser, getFramesFromEvent, getFunctionName, stackParserFromStackParserOptions, stripSentryFramesAndReverse } from './utils-hoist/stacktrace.js';\nexport { filenameIsInApp, node, nodeStackLineParser } from './utils-hoist/node-stack-trace.js';\nexport { isMatchingPattern, safeJoin, snipLine, stringMatchesSomePattern, truncate } from './utils-hoist/string.js';\nexport { isNativeFunction, supportsDOMError, supportsDOMException, supportsErrorEvent, supportsFetch, supportsHistory, supportsNativeFetch, supportsReferrerPolicy, supportsReportingObserver } from './utils-hoist/supports.js';\nexport { SyncPromise, rejectedSyncPromise, resolvedSyncPromise } from './utils-hoist/syncpromise.js';\nexport { browserPerformanceTimeOrigin, dateTimestampInSeconds, timestampInSeconds } from './utils-hoist/time.js';\nexport { TRACEPARENT_REGEXP, extractTraceparentData, generateSentryTraceHeader, propagationContextFromHeaders } from './utils-hoist/tracing.js';\nexport { getSDKSource, isBrowserBundle } from './utils-hoist/env.js';\nexport { addItemToEnvelope, createAttachmentEnvelopeItem, createEnvelope, createEventEnvelopeHeaders, createSpanEnvelopeItem, envelopeContainsItemType, envelopeItemTypeToDataCategory, forEachEnvelopeItem, getSdkMetadataForEnvelopeHeader, parseEnvelope, serializeEnvelope } from './utils-hoist/envelope.js';\nexport { createClientReportEnvelope } from './utils-hoist/clientreport.js';\nexport { DEFAULT_RETRY_AFTER, disabledUntil, isRateLimited, parseRetryAfterHeader, updateRateLimits } from './utils-hoist/ratelimit.js';\nexport { MAX_BAGGAGE_STRING_LENGTH, SENTRY_BAGGAGE_KEY_PREFIX, SENTRY_BAGGAGE_KEY_PREFIX_REGEX, baggageHeaderToDynamicSamplingContext, dynamicSamplingContextToSentryBaggageHeader, objectToBaggageHeader, parseBaggageHeader } from './utils-hoist/baggage.js';\nexport { getHttpSpanDetailsFromUrlObject, getSanitizedUrlString, getSanitizedUrlStringFromUrlObject, isURLObjectRelative, parseStringToURLObject, parseUrl, stripUrlQueryAndFragment } from './utils-hoist/url.js';\nexport { eventFromMessage, eventFromUnknownInput, exceptionFromError, parseStackFrames } from './utils-hoist/eventbuilder.js';\nexport { callFrameToStackFrame, watchdogTimer } from './utils-hoist/anr.js';\nexport { LRUMap } from './utils-hoist/lru.js';\nexport { generateSpanId, generateTraceId } from './utils-hoist/propagationContext.js';\nexport { vercelWaitUntil } from './utils-hoist/vercelWaitUntil.js';\nexport { SDK_VERSION } from './utils-hoist/version.js';\nexport { getDebugImagesForResources, getFilenameToDebugIdMap } from './utils-hoist/debug-ids.js';\nexport { escapeStringForRegex } from './utils-hoist/vendor/escapeStringForRegex.js';\n//# sourceMappingURL=index.js.map\n", "declare const __DEBUG_BUILD__: boolean;\n\n/**\n * This serves as a build time flag that will be true by default, but false in non-debug builds or if users replace `__SENTRY_DEBUG__` in their generated code.\n *\n * ATTENTION: This constant must never cross package boundaries (i.e. be exported) to guarantee that it can be used for tree shaking.\n */\nexport const DEBUG_BUILD = __DEBUG_BUILD__;\n", "// This is a magic string replaced by rollup\ndeclare const __SENTRY_SDK_VERSION__: string;\n\nexport const SDK_VERSION = typeof __SENTRY_SDK_VERSION__ === 'string' ? __SENTRY_SDK_VERSION__ : '0.0.0-unknown.0';\n", "/**\n * NOTE: In order to avoid circular dependencies, if you add a function to this module and it needs to print something,\n * you must either a) use `console.log` rather than the logger, or b) put your function elsewhere.\n *\n * Note: This file was originally called `global.ts`, but was changed to unblock users which might be doing\n * string replaces with bundlers like Vite for `global` (would break imports that rely on importing from utils/src/global).\n *\n * Why worldwide?\n *\n * Why not?\n */\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport type { Carrier } from '../carrier';\nimport type { Client } from '../client';\nimport type { SerializedLog } from '../types-hoist/log';\nimport type { SdkSource } from './env';\n\n/** Internal global with common properties and Sentry extensions  */\nexport type InternalGlobal = {\n  navigator?: { userAgent?: string; maxTouchPoints?: number };\n  console: Console;\n  PerformanceObserver?: any;\n  Sentry?: any;\n  onerror?: {\n    (event: object | string, source?: string, lineno?: number, colno?: number, error?: Error): any;\n    __SENTRY_INSTRUMENTED__?: true;\n  };\n  onunhandledrejection?: {\n    (event: unknown): boolean;\n    __SENTRY_INSTRUMENTED__?: true;\n  };\n  SENTRY_ENVIRONMENT?: string;\n  SENTRY_DSN?: string;\n  SENTRY_RELEASE?: {\n    id?: string;\n  };\n  SENTRY_SDK_SOURCE?: SdkSource;\n  /**\n   * A map of Sentry clients to their log buffers.\n   *\n   * This is used to store logs that are sent to Sentry.\n   */\n  _sentryClientToLogBufferMap?: WeakMap<Client, Array<SerializedLog>>;\n  /**\n   * Debug IDs are indirectly injected by Sentry CLI or bundler plugins to directly reference a particular source map\n   * for resolving of a source file. The injected code will place an entry into the record for each loaded bundle/JS\n   * file.\n   */\n  _sentryDebugIds?: Record<string, string>;\n  /**\n   * Raw module metadata that is injected by bundler plugins.\n   *\n   * Keys are `error.stack` strings, values are the metadata.\n   */\n  _sentryModuleMetadata?: Record<string, any>;\n  _sentryEsmLoaderHookRegistered?: boolean;\n} & Carrier;\n\n/** Get's the global object for the current JavaScript runtime */\nexport const GLOBAL_OBJ = globalThis as unknown as InternalGlobal;\n", "import type { AsyncContextStack } from './asyncContext/stackStrategy';\nimport type { AsyncContextStrategy } from './asyncContext/types';\nimport type { Scope } from './scope';\nimport type { Logger } from './utils-hoist/logger';\nimport { SDK_VERSION } from './utils-hoist/version';\nimport { GLOBAL_OBJ } from './utils-hoist/worldwide';\n\n/**\n * An object that contains globally accessible properties and maintains a scope stack.\n * @hidden\n */\nexport interface Carrier {\n  __SENTRY__?: VersionedCarrier;\n}\n\ntype VersionedCarrier = {\n  version?: string;\n} & Record<Exclude<string, 'version'>, SentryCarrier>;\n\nexport interface SentryCarrier {\n  acs?: AsyncContextStrategy;\n  stack?: AsyncContextStack;\n\n  globalScope?: Scope;\n  defaultIsolationScope?: Scope;\n  defaultCurrentScope?: Scope;\n  logger?: Logger;\n\n  /** Overwrites TextEncoder used in `@sentry/core`, need for `react-native@0.73` and older */\n  encodePolyfill?: (input: string) => Uint8Array;\n  /** Overwrites TextDecoder used in `@sentry/core`, need for `react-native@0.73` and older */\n  decodePolyfill?: (input: Uint8Array) => string;\n}\n\n/**\n * Returns the global shim registry.\n *\n * FIXME: This function is problematic, because despite always returning a valid Carrier,\n * it has an optional `__SENTRY__` property, which then in turn requires us to always perform an unnecessary check\n * at the call-site. We always access the carrier through this function, so we can guarantee that `__SENTRY__` is there.\n **/\nexport function getMainCarrier(): Carrier {\n  // This ensures a Sentry carrier exists\n  getSentryCarrier(GLOBAL_OBJ);\n  return GLOBAL_OBJ;\n}\n\n/** Will either get the existing sentry carrier, or create a new one. */\nexport function getSentryCarrier(carrier: Carrier): SentryCarrier {\n  const __SENTRY__ = (carrier.__SENTRY__ = carrier.__SENTRY__ || {});\n\n  // For now: First SDK that sets the .version property wins\n  __SENTRY__.version = __SENTRY__.version || SDK_VERSION;\n\n  // Intentionally populating and returning the version of \"this\" SDK instance\n  // rather than what's set in .version so that \"this\" SDK always gets its carrier\n  return (__SENTRY__[SDK_VERSION] = __SENTRY__[SDK_VERSION] || {});\n}\n\n/**\n * Returns a global singleton contained in the global `__SENTRY__[]` object.\n *\n * If the singleton doesn't already exist in `__SENTRY__`, it will be created using the given factory\n * function and added to the `__SENTRY__` object.\n *\n * @param name name of the global singleton on __SENTRY__\n * @param creator creator Factory function to create the singleton if it doesn't already exist on `__SENTRY__`\n * @param obj (Optional) The global object on which to look for `__SENTRY__`, if not `GLOBAL_OBJ`'s return value\n * @returns the singleton\n */\nexport function getGlobalSingleton<Prop extends keyof SentryCarrier>(\n  name: Prop,\n  creator: () => NonNullable<SentryCarrier[Prop]>,\n  obj = GLOBAL_OBJ,\n): NonNullable<SentryCarrier[Prop]> {\n  const __SENTRY__ = (obj.__SENTRY__ = obj.__SENTRY__ || {});\n  const carrier = (__SENTRY__[SDK_VERSION] = __SENTRY__[SDK_VERSION] || {});\n  // Note: We do not want to set `carrier.version` here, as this may be called before any `init` is called, e.g. for the default scopes\n  return carrier[name] || (carrier[name] = creator());\n}\n", "/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport type { Primitive } from '../types-hoist/misc';\nimport type { ParameterizedString } from '../types-hoist/parameterize';\nimport type { PolymorphicEvent } from '../types-hoist/polymorphics';\n\n// eslint-disable-next-line @typescript-eslint/unbound-method\nconst objectToString = Object.prototype.toString;\n\n/**\n * Checks whether given value's type is one of a few Error or Error-like\n * {@link isError}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isError(wat: unknown): wat is Error {\n  switch (objectToString.call(wat)) {\n    case '[object Error]':\n    case '[object Exception]':\n    case '[object DOMException]':\n    case '[object WebAssembly.Exception]':\n      return true;\n    default:\n      return isInstanceOf(wat, Error);\n  }\n}\n/**\n * Checks whether given value is an instance of the given built-in class.\n *\n * @param wat The value to be checked\n * @param className\n * @returns A boolean representing the result.\n */\nfunction isBuiltin(wat: unknown, className: string): boolean {\n  return objectToString.call(wat) === `[object ${className}]`;\n}\n\n/**\n * Checks whether given value's type is ErrorEvent\n * {@link isErrorEvent}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isErrorEvent(wat: unknown): boolean {\n  return isBuiltin(wat, 'ErrorEvent');\n}\n\n/**\n * Checks whether given value's type is DOMError\n * {@link isDOMError}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isDOMError(wat: unknown): boolean {\n  return isBuiltin(wat, 'DOMError');\n}\n\n/**\n * Checks whether given value's type is DOMException\n * {@link isDOMException}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isDOMException(wat: unknown): boolean {\n  return isBuiltin(wat, 'DOMException');\n}\n\n/**\n * Checks whether given value's type is a string\n * {@link isString}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isString(wat: unknown): wat is string {\n  return isBuiltin(wat, 'String');\n}\n\n/**\n * Checks whether given string is parameterized\n * {@link isParameterizedString}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isParameterizedString(wat: unknown): wat is ParameterizedString {\n  return (\n    typeof wat === 'object' &&\n    wat !== null &&\n    '__sentry_template_string__' in wat &&\n    '__sentry_template_values__' in wat\n  );\n}\n\n/**\n * Checks whether given value is a primitive (undefined, null, number, boolean, string, bigint, symbol)\n * {@link isPrimitive}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isPrimitive(wat: unknown): wat is Primitive {\n  return wat === null || isParameterizedString(wat) || (typeof wat !== 'object' && typeof wat !== 'function');\n}\n\n/**\n * Checks whether given value's type is an object literal, or a class instance.\n * {@link isPlainObject}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isPlainObject(wat: unknown): wat is Record<string, unknown> {\n  return isBuiltin(wat, 'Object');\n}\n\n/**\n * Checks whether given value's type is an Event instance\n * {@link isEvent}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isEvent(wat: unknown): wat is PolymorphicEvent {\n  return typeof Event !== 'undefined' && isInstanceOf(wat, Event);\n}\n\n/**\n * Checks whether given value's type is an Element instance\n * {@link isElement}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isElement(wat: unknown): boolean {\n  return typeof Element !== 'undefined' && isInstanceOf(wat, Element);\n}\n\n/**\n * Checks whether given value's type is an regexp\n * {@link isRegExp}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isRegExp(wat: unknown): wat is RegExp {\n  return isBuiltin(wat, 'RegExp');\n}\n\n/**\n * Checks whether given value has a then function.\n * @param wat A value to be checked.\n */\nexport function isThenable(wat: any): wat is PromiseLike<any> {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  return Boolean(wat?.then && typeof wat.then === 'function');\n}\n\n/**\n * Checks whether given value's type is a SyntheticEvent\n * {@link isSyntheticEvent}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isSyntheticEvent(wat: unknown): boolean {\n  return isPlainObject(wat) && 'nativeEvent' in wat && 'preventDefault' in wat && 'stopPropagation' in wat;\n}\n\n/**\n * Checks whether given value's type is an instance of provided constructor.\n * {@link isInstanceOf}.\n *\n * @param wat A value to be checked.\n * @param base A constructor to be used in a check.\n * @returns A boolean representing the result.\n */\nexport function isInstanceOf(wat: any, base: any): boolean {\n  try {\n    return wat instanceof base;\n  } catch (_e) {\n    return false;\n  }\n}\n\ninterface VueViewModel {\n  // Vue3\n  __isVue?: boolean;\n  // Vue2\n  _isVue?: boolean;\n}\n/**\n * Checks whether given value's type is a Vue ViewModel.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isVueViewModel(wat: unknown): boolean {\n  // Not using Object.prototype.toString because in Vue 3 it would read the instance's Symbol(Symbol.toStringTag) property.\n  return !!(typeof wat === 'object' && wat !== null && ((wat as VueViewModel).__isVue || (wat as VueViewModel)._isVue));\n}\n\n/**\n * Checks whether the given parameter is a Standard Web API Request instance.\n *\n * Returns false if Request is not available in the current runtime.\n */\nexport function isRequest(request: unknown): request is Request {\n  return typeof Request !== 'undefined' && isInstanceOf(request, Request);\n}\n", "import { isString } from './is';\nimport { GLOBAL_OBJ } from './worldwide';\n\nconst WINDOW = GLOBAL_OBJ as unknown as Window;\n\nconst DEFAULT_MAX_STRING_LENGTH = 80;\n\ntype SimpleNode = {\n  parentNode: SimpleNode;\n} | null;\n\n/**\n * Given a child DOM element, returns a query-selector statement describing that\n * and its ancestors\n * e.g. [HTMLElement] => body > div > input#foo.btn[name=baz]\n * @returns generated DOM path\n */\nexport function htmlTreeAsString(\n  elem: unknown,\n  options: string[] | { keyAttrs?: string[]; maxStringLength?: number } = {},\n): string {\n  if (!elem) {\n    return '<unknown>';\n  }\n\n  // try/catch both:\n  // - accessing event.target (see getsentry/raven-js#838, #768)\n  // - `htmlTreeAsString` because it's complex, and just accessing the DOM incorrectly\n  // - can throw an exception in some circumstances.\n  try {\n    let currentElem = elem as SimpleNode;\n    const MAX_TRAVERSE_HEIGHT = 5;\n    const out = [];\n    let height = 0;\n    let len = 0;\n    const separator = ' > ';\n    const sepLength = separator.length;\n    let nextStr;\n    const keyAttrs = Array.isArray(options) ? options : options.keyAttrs;\n    const maxStringLength = (!Array.isArray(options) && options.maxStringLength) || DEFAULT_MAX_STRING_LENGTH;\n\n    while (currentElem && height++ < MAX_TRAVERSE_HEIGHT) {\n      nextStr = _htmlElementAsString(currentElem, keyAttrs);\n      // bail out if\n      // - nextStr is the 'html' element\n      // - the length of the string that would be created exceeds maxStringLength\n      //   (ignore this limit if we are on the first iteration)\n      if (nextStr === 'html' || (height > 1 && len + out.length * sepLength + nextStr.length >= maxStringLength)) {\n        break;\n      }\n\n      out.push(nextStr);\n\n      len += nextStr.length;\n      currentElem = currentElem.parentNode;\n    }\n\n    return out.reverse().join(separator);\n  } catch (_oO) {\n    return '<unknown>';\n  }\n}\n\n/**\n * Returns a simple, query-selector representation of a DOM element\n * e.g. [HTMLElement] => input#foo.btn[name=baz]\n * @returns generated DOM path\n */\nfunction _htmlElementAsString(el: unknown, keyAttrs?: string[]): string {\n  const elem = el as {\n    tagName?: string;\n    id?: string;\n    className?: string;\n    getAttribute(key: string): string;\n  };\n\n  const out = [];\n\n  if (!elem?.tagName) {\n    return '';\n  }\n\n  // @ts-expect-error WINDOW has HTMLElement\n  if (WINDOW.HTMLElement) {\n    // If using the component name annotation plugin, this value may be available on the DOM node\n    if (elem instanceof HTMLElement && elem.dataset) {\n      if (elem.dataset['sentryComponent']) {\n        return elem.dataset['sentryComponent'];\n      }\n      if (elem.dataset['sentryElement']) {\n        return elem.dataset['sentryElement'];\n      }\n    }\n  }\n\n  out.push(elem.tagName.toLowerCase());\n\n  // Pairs of attribute keys defined in `serializeAttribute` and their values on element.\n  const keyAttrPairs = keyAttrs?.length\n    ? keyAttrs.filter(keyAttr => elem.getAttribute(keyAttr)).map(keyAttr => [keyAttr, elem.getAttribute(keyAttr)])\n    : null;\n\n  if (keyAttrPairs?.length) {\n    keyAttrPairs.forEach(keyAttrPair => {\n      out.push(`[${keyAttrPair[0]}=\"${keyAttrPair[1]}\"]`);\n    });\n  } else {\n    if (elem.id) {\n      out.push(`#${elem.id}`);\n    }\n\n    const className = elem.className;\n    if (className && isString(className)) {\n      const classes = className.split(/\\s+/);\n      for (const c of classes) {\n        out.push(`.${c}`);\n      }\n    }\n  }\n  const allowedAttrs = ['aria-label', 'type', 'name', 'title', 'alt'];\n  for (const k of allowedAttrs) {\n    const attr = elem.getAttribute(k);\n    if (attr) {\n      out.push(`[${k}=\"${attr}\"]`);\n    }\n  }\n\n  return out.join('');\n}\n\n/**\n * A safe form of location.href\n */\nexport function getLocationHref(): string {\n  try {\n    return WINDOW.document.location.href;\n  } catch (oO) {\n    return '';\n  }\n}\n\n/**\n * Given a DOM element, traverses up the tree until it finds the first ancestor node\n * that has the `data-sentry-component` or `data-sentry-element` attribute with `data-sentry-component` taking\n * precedence. This attribute is added at build-time by projects that have the component name annotation plugin installed.\n *\n * @returns a string representation of the component for the provided DOM element, or `null` if not found\n */\nexport function getComponentName(elem: unknown): string | null {\n  // @ts-expect-error WINDOW has HTMLElement\n  if (!WINDOW.HTMLElement) {\n    return null;\n  }\n\n  let currentElem = elem as SimpleNode;\n  const MAX_TRAVERSE_HEIGHT = 5;\n  for (let i = 0; i < MAX_TRAVERSE_HEIGHT; i++) {\n    if (!currentElem) {\n      return null;\n    }\n\n    if (currentElem instanceof HTMLElement) {\n      if (currentElem.dataset['sentryComponent']) {\n        return currentElem.dataset['sentryComponent'];\n      }\n      if (currentElem.dataset['sentryElement']) {\n        return currentElem.dataset['sentryElement'];\n      }\n    }\n\n    currentElem = currentElem.parentNode;\n  }\n\n  return null;\n}\n", "import { getGlobalSingleton } from '../carrier';\nimport type { ConsoleLevel } from '../types-hoist/instrument';\nimport { DEBUG_BUILD } from './../debug-build';\nimport { GLOBAL_OBJ } from './worldwide';\n\n/** Prefix for logging strings */\nconst PREFIX = 'Sentry Logger ';\n\nexport const CONSOLE_LEVELS: readonly ConsoleLevel[] = [\n  'debug',\n  'info',\n  'warn',\n  'error',\n  'log',\n  'assert',\n  'trace',\n] as const;\n\ntype LoggerMethod = (...args: unknown[]) => void;\ntype LoggerConsoleMethods = Record<ConsoleLevel, LoggerMethod>;\n\n/** This may be mutated by the console instrumentation. */\nexport const originalConsoleMethods: {\n  [key in ConsoleLevel]?: (...args: unknown[]) => void;\n} = {};\n\n/** A Sentry Logger instance. */\nexport interface Logger extends LoggerConsoleMethods {\n  disable(): void;\n  enable(): void;\n  isEnabled(): boolean;\n}\n\n/**\n * Temporarily disable sentry console instrumentations.\n *\n * @param callback The function to run against the original `console` messages\n * @returns The results of the callback\n */\nexport function consoleSandbox<T>(callback: () => T): T {\n  if (!('console' in GLOBAL_OBJ)) {\n    return callback();\n  }\n\n  const console = GLOBAL_OBJ.console as Console;\n  const wrappedFuncs: Partial<LoggerConsoleMethods> = {};\n\n  const wrappedLevels = Object.keys(originalConsoleMethods) as ConsoleLevel[];\n\n  // Restore all wrapped console methods\n  wrappedLevels.forEach(level => {\n    const originalConsoleMethod = originalConsoleMethods[level] as LoggerMethod;\n    wrappedFuncs[level] = console[level] as LoggerMethod | undefined;\n    console[level] = originalConsoleMethod;\n  });\n\n  try {\n    return callback();\n  } finally {\n    // Revert restoration to wrapped state\n    wrappedLevels.forEach(level => {\n      console[level] = wrappedFuncs[level] as LoggerMethod;\n    });\n  }\n}\n\nfunction makeLogger(): Logger {\n  let enabled = false;\n  const logger: Partial<Logger> = {\n    enable: () => {\n      enabled = true;\n    },\n    disable: () => {\n      enabled = false;\n    },\n    isEnabled: () => enabled,\n  };\n\n  if (DEBUG_BUILD) {\n    CONSOLE_LEVELS.forEach(name => {\n      logger[name] = (...args: Parameters<(typeof GLOBAL_OBJ.console)[typeof name]>) => {\n        if (enabled) {\n          consoleSandbox(() => {\n            GLOBAL_OBJ.console[name](`${PREFIX}[${name}]:`, ...args);\n          });\n        }\n      };\n    });\n  } else {\n    CONSOLE_LEVELS.forEach(name => {\n      logger[name] = () => undefined;\n    });\n  }\n\n  return logger as Logger;\n}\n\n/**\n * This is a logger singleton which either logs things or no-ops if logging is not enabled.\n * The logger is a singleton on the carrier, to ensure that a consistent logger is used throughout the SDK.\n */\nexport const logger = getGlobalSingleton('logger', makeLogger);\n", "import { isRegExp, isString, isVueViewModel } from './is';\n\nexport { escapeStringForRegex } from './vendor/escapeStringForRegex';\n\n/**\n * Truncates given string to the maximum characters count\n *\n * @param str An object that contains serializable values\n * @param max Maximum number of characters in truncated string (0 = unlimited)\n * @returns string Encoded\n */\nexport function truncate(str: string, max: number = 0): string {\n  if (typeof str !== 'string' || max === 0) {\n    return str;\n  }\n  return str.length <= max ? str : `${str.slice(0, max)}...`;\n}\n\n/**\n * This is basically just `trim_line` from\n * https://github.com/getsentry/sentry/blob/master/src/sentry/lang/javascript/processor.py#L67\n *\n * @param str An object that contains serializable values\n * @param max Maximum number of characters in truncated string\n * @returns string Encoded\n */\nexport function snipLine(line: string, colno: number): string {\n  let newLine = line;\n  const lineLength = newLine.length;\n  if (lineLength <= 150) {\n    return newLine;\n  }\n  if (colno > lineLength) {\n    // eslint-disable-next-line no-param-reassign\n    colno = lineLength;\n  }\n\n  let start = Math.max(colno - 60, 0);\n  if (start < 5) {\n    start = 0;\n  }\n\n  let end = Math.min(start + 140, lineLength);\n  if (end > lineLength - 5) {\n    end = lineLength;\n  }\n  if (end === lineLength) {\n    start = Math.max(end - 140, 0);\n  }\n\n  newLine = newLine.slice(start, end);\n  if (start > 0) {\n    newLine = `'{snip} ${newLine}`;\n  }\n  if (end < lineLength) {\n    newLine += ' {snip}';\n  }\n\n  return newLine;\n}\n\n/**\n * Join values in array\n * @param input array of values to be joined together\n * @param delimiter string to be placed in-between values\n * @returns Joined values\n */\nexport function safeJoin(input: unknown[], delimiter?: string): string {\n  if (!Array.isArray(input)) {\n    return '';\n  }\n\n  const output = [];\n  // eslint-disable-next-line @typescript-eslint/prefer-for-of\n  for (let i = 0; i < input.length; i++) {\n    const value = input[i];\n    try {\n      // This is a hack to fix a Vue3-specific bug that causes an infinite loop of\n      // console warnings. This happens when a Vue template is rendered with\n      // an undeclared variable, which we try to stringify, ultimately causing\n      // Vue to issue another warning which repeats indefinitely.\n      // see: https://github.com/getsentry/sentry-javascript/pull/8981\n      if (isVueViewModel(value)) {\n        output.push('[VueViewModel]');\n      } else {\n        output.push(String(value));\n      }\n    } catch (e) {\n      output.push('[value cannot be serialized]');\n    }\n  }\n\n  return output.join(delimiter);\n}\n\n/**\n * Checks if the given value matches a regex or string\n *\n * @param value The string to test\n * @param pattern Either a regex or a string against which `value` will be matched\n * @param requireExactStringMatch If true, `value` must match `pattern` exactly. If false, `value` will match\n * `pattern` if it contains `pattern`. Only applies to string-type patterns.\n */\nexport function isMatchingPattern(\n  value: string,\n  pattern: RegExp | string,\n  requireExactStringMatch: boolean = false,\n): boolean {\n  if (!isString(value)) {\n    return false;\n  }\n\n  if (isRegExp(pattern)) {\n    return pattern.test(value);\n  }\n  if (isString(pattern)) {\n    return requireExactStringMatch ? value === pattern : value.includes(pattern);\n  }\n\n  return false;\n}\n\n/**\n * Test the given string against an array of strings and regexes. By default, string matching is done on a\n * substring-inclusion basis rather than a strict equality basis\n *\n * @param testString The string to test\n * @param patterns The patterns against which to test the string\n * @param requireExactStringMatch If true, `testString` must match one of the given string patterns exactly in order to\n * count. If false, `testString` will match a string pattern if it contains that pattern.\n * @returns\n */\nexport function stringMatchesSomePattern(\n  testString: string,\n  patterns: Array<string | RegExp> = [],\n  requireExactStringMatch: boolean = false,\n): boolean {\n  return patterns.some(pattern => isMatchingPattern(testString, pattern, requireExactStringMatch));\n}\n", "/* eslint-disable @typescript-eslint/no-explicit-any */\nimport type { WrappedFunction } from '../types-hoist/wrappedfunction';\nimport { DEBUG_BUILD } from './../debug-build';\nimport { htmlTreeAsString } from './browser';\nimport { isElement, isError, isEvent, isInstanceOf, isPrimitive } from './is';\nimport { logger } from './logger';\nimport { truncate } from './string';\n\n/**\n * Replace a method in an object with a wrapped version of itself.\n *\n * If the method on the passed object is not a function, the wrapper will not be applied.\n *\n * @param source An object that contains a method to be wrapped.\n * @param name The name of the method to be wrapped.\n * @param replacementFactory A higher-order function that takes the original version of the given method and returns a\n * wrapped version. Note: The function returned by `replacementFactory` needs to be a non-arrow function, in order to\n * preserve the correct value of `this`, and the original method must be called using `origMethod.call(this, <other\n * args>)` or `origMethod.apply(this, [<other args>])` (rather than being called directly), again to preserve `this`.\n * @returns void\n */\nexport function fill(source: { [key: string]: any }, name: string, replacementFactory: (...args: any[]) => any): void {\n  if (!(name in source)) {\n    return;\n  }\n\n  // explicitly casting to unknown because we don't know the type of the method initially at all\n  const original = source[name] as unknown;\n\n  if (typeof original !== 'function') {\n    return;\n  }\n\n  const wrapped = replacementFactory(original) as WrappedFunction;\n\n  // Make sure it's a function first, as we need to attach an empty prototype for `defineProperties` to work\n  // otherwise it'll throw \"TypeError: Object.defineProperties called on non-object\"\n  if (typeof wrapped === 'function') {\n    markFunctionWrapped(wrapped, original);\n  }\n\n  try {\n    source[name] = wrapped;\n  } catch {\n    DEBUG_BUILD && logger.log(`Failed to replace method \"${name}\" in object`, source);\n  }\n}\n\n/**\n * Defines a non-enumerable property on the given object.\n *\n * @param obj The object on which to set the property\n * @param name The name of the property to be set\n * @param value The value to which to set the property\n */\nexport function addNonEnumerableProperty(obj: object, name: string, value: unknown): void {\n  try {\n    Object.defineProperty(obj, name, {\n      // enumerable: false, // the default, so we can save on bundle size by not explicitly setting it\n      value: value,\n      writable: true,\n      configurable: true,\n    });\n  } catch (o_O) {\n    DEBUG_BUILD && logger.log(`Failed to add non-enumerable property \"${name}\" to object`, obj);\n  }\n}\n\n/**\n * Remembers the original function on the wrapped function and\n * patches up the prototype.\n *\n * @param wrapped the wrapper function\n * @param original the original function that gets wrapped\n */\nexport function markFunctionWrapped(wrapped: WrappedFunction, original: WrappedFunction): void {\n  try {\n    const proto = original.prototype || {};\n    wrapped.prototype = original.prototype = proto;\n    addNonEnumerableProperty(wrapped, '__sentry_original__', original);\n  } catch (o_O) {} // eslint-disable-line no-empty\n}\n\n/**\n * This extracts the original function if available.  See\n * `markFunctionWrapped` for more information.\n *\n * @param func the function to unwrap\n * @returns the unwrapped version of the function if available.\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function getOriginalFunction<T extends Function>(func: WrappedFunction<T>): T | undefined {\n  return func.__sentry_original__;\n}\n\n/**\n * Transforms any `Error` or `Event` into a plain object with all of their enumerable properties, and some of their\n * non-enumerable properties attached.\n *\n * @param value Initial source that we have to transform in order for it to be usable by the serializer\n * @returns An Event or Error turned into an object - or the value argument itself, when value is neither an Event nor\n *  an Error.\n */\nexport function convertToPlainObject<V>(value: V):\n  | {\n      [ownProps: string]: unknown;\n      type: string;\n      target: string;\n      currentTarget: string;\n      detail?: unknown;\n    }\n  | {\n      [ownProps: string]: unknown;\n      message: string;\n      name: string;\n      stack?: string;\n    }\n  | V {\n  if (isError(value)) {\n    return {\n      message: value.message,\n      name: value.name,\n      stack: value.stack,\n      ...getOwnProperties(value),\n    };\n  } else if (isEvent(value)) {\n    const newObj: {\n      [ownProps: string]: unknown;\n      type: string;\n      target: string;\n      currentTarget: string;\n      detail?: unknown;\n    } = {\n      type: value.type,\n      target: serializeEventTarget(value.target),\n      currentTarget: serializeEventTarget(value.currentTarget),\n      ...getOwnProperties(value),\n    };\n\n    if (typeof CustomEvent !== 'undefined' && isInstanceOf(value, CustomEvent)) {\n      newObj.detail = value.detail;\n    }\n\n    return newObj;\n  } else {\n    return value;\n  }\n}\n\n/** Creates a string representation of the target of an `Event` object */\nfunction serializeEventTarget(target: unknown): string {\n  try {\n    return isElement(target) ? htmlTreeAsString(target) : Object.prototype.toString.call(target);\n  } catch (_oO) {\n    return '<unknown>';\n  }\n}\n\n/** Filters out all but an object's own properties */\nfunction getOwnProperties(obj: unknown): { [key: string]: unknown } {\n  if (typeof obj === 'object' && obj !== null) {\n    const extractedProps: { [key: string]: unknown } = {};\n    for (const property in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, property)) {\n        extractedProps[property] = (obj as Record<string, unknown>)[property];\n      }\n    }\n    return extractedProps;\n  } else {\n    return {};\n  }\n}\n\n/**\n * Given any captured exception, extract its keys and create a sorted\n * and truncated list that will be used inside the event message.\n * eg. `Non-error exception captured with keys: foo, bar, baz`\n */\nexport function extractExceptionKeysForMessage(exception: Record<string, unknown>, maxLength: number = 40): string {\n  const keys = Object.keys(convertToPlainObject(exception));\n  keys.sort();\n\n  const firstKey = keys[0];\n\n  if (!firstKey) {\n    return '[object has no keys]';\n  }\n\n  if (firstKey.length >= maxLength) {\n    return truncate(firstKey, maxLength);\n  }\n\n  for (let includedKeys = keys.length; includedKeys > 0; includedKeys--) {\n    const serialized = keys.slice(0, includedKeys).join(', ');\n    if (serialized.length > maxLength) {\n      continue;\n    }\n    if (includedKeys === keys.length) {\n      return serialized;\n    }\n    return truncate(serialized, maxLength);\n  }\n\n  return '';\n}\n\n/**\n * Given any object, return a new object having removed all fields whose value was `undefined`.\n * Works recursively on objects and arrays.\n *\n * Attention: This function keeps circular references in the returned object.\n *\n * @deprecated This function is no longer used by the SDK and will be removed in a future major version.\n */\nexport function dropUndefinedKeys<T>(inputValue: T): T {\n  // This map keeps track of what already visited nodes map to.\n  // Our Set - based memoBuilder doesn't work here because we want to the output object to have the same circular\n  // references as the input object.\n  const memoizationMap = new Map<unknown, unknown>();\n\n  // This function just proxies `_dropUndefinedKeys` to keep the `memoBuilder` out of this function's API\n  return _dropUndefinedKeys(inputValue, memoizationMap);\n}\n\nfunction _dropUndefinedKeys<T>(inputValue: T, memoizationMap: Map<unknown, unknown>): T {\n  // Early return for primitive values\n  if (inputValue === null || typeof inputValue !== 'object') {\n    return inputValue;\n  }\n\n  // Check memo map first for all object types\n  const memoVal = memoizationMap.get(inputValue);\n  if (memoVal !== undefined) {\n    return memoVal as T;\n  }\n\n  // handle arrays\n  if (Array.isArray(inputValue)) {\n    const returnValue: unknown[] = [];\n    // Store mapping to handle circular references\n    memoizationMap.set(inputValue, returnValue);\n\n    inputValue.forEach(value => {\n      returnValue.push(_dropUndefinedKeys(value, memoizationMap));\n    });\n\n    return returnValue as unknown as T;\n  }\n\n  if (isPojo(inputValue)) {\n    const returnValue: { [key: string]: unknown } = {};\n    // Store mapping to handle circular references\n    memoizationMap.set(inputValue, returnValue);\n\n    const keys = Object.keys(inputValue);\n\n    keys.forEach(key => {\n      const val = inputValue[key];\n      if (val !== undefined) {\n        returnValue[key] = _dropUndefinedKeys(val, memoizationMap);\n      }\n    });\n\n    return returnValue as T;\n  }\n\n  // For other object types, return as is\n  return inputValue;\n}\n\nfunction isPojo(input: unknown): input is Record<string, unknown> {\n  // Plain objects have Object as constructor or no constructor\n  const constructor = (input as object).constructor;\n  return constructor === Object || constructor === undefined;\n}\n\n/**\n * Ensure that something is an object.\n *\n * Turns `undefined` and `null` into `String`s and all other primitives into instances of their respective wrapper\n * classes (String, Boolean, Number, etc.). Acts as the identity function on non-primitives.\n *\n * @param wat The subject of the objectification\n * @returns A version of `wat` which can safely be used with `Object` class methods\n */\nexport function objectify(wat: unknown): typeof Object {\n  let objectified;\n  switch (true) {\n    // this will catch both undefined and null\n    case wat == undefined:\n      objectified = new String(wat);\n      break;\n\n    // Though symbols and bigints do have wrapper classes (`Symbol` and `BigInt`, respectively), for whatever reason\n    // those classes don't have constructors which can be used with the `new` keyword. We therefore need to cast each as\n    // an object in order to wrap it.\n    case typeof wat === 'symbol' || typeof wat === 'bigint':\n      objectified = Object(wat);\n      break;\n\n    // this will catch the remaining primitives: `String`, `Number`, and `Boolean`\n    case isPrimitive(wat):\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      objectified = new (wat as any).constructor(wat);\n      break;\n\n    // by process of elimination, at this point we know that `wat` must already be an object\n    default:\n      objectified = wat;\n      break;\n  }\n  return objectified;\n}\n", "import type { Event } from '../types-hoist/event';\nimport type { Exception } from '../types-hoist/exception';\nimport type { Mechanism } from '../types-hoist/mechanism';\nimport type { StackFrame } from '../types-hoist/stackframe';\nimport { addNonEnumerableProperty } from './object';\nimport { snipLine } from './string';\nimport { GLOBAL_OBJ } from './worldwide';\n\ninterface CryptoInternal {\n  getRandomValues(array: Uint8Array): Uint8Array;\n  randomUUID?(): string;\n}\n\n/** An interface for common properties on global */\ninterface CryptoGlobal {\n  msCrypto?: CryptoInternal;\n  crypto?: CryptoInternal;\n}\n\nfunction getCrypto(): CryptoInternal | undefined {\n  const gbl = GLOBAL_OBJ as typeof GLOBAL_OBJ & CryptoGlobal;\n  return gbl.crypto || gbl.msCrypto;\n}\n\n/**\n * UUID4 generator\n * @param crypto Object that provides the crypto API.\n * @returns string Generated UUID4.\n */\nexport function uuid4(crypto = getCrypto()): string {\n  let getRandomByte = (): number => Math.random() * 16;\n  try {\n    if (crypto?.randomUUID) {\n      return crypto.randomUUID().replace(/-/g, '');\n    }\n    if (crypto?.getRandomValues) {\n      getRandomByte = () => {\n        // crypto.getRandomValues might return undefined instead of the typed array\n        // in old Chromium versions (e.g. 23.0.1235.0 (151422))\n        // However, `typedArray` is still filled in-place.\n        // @see https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues#typedarray\n        const typedArray = new Uint8Array(1);\n        crypto.getRandomValues(typedArray);\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        return typedArray[0]!;\n      };\n    }\n  } catch (_) {\n    // some runtimes can crash invoking crypto\n    // https://github.com/getsentry/sentry-javascript/issues/8935\n  }\n\n  // http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/2117523#2117523\n  // Concatenating the following numbers as strings results in '10000000100040008000100000000000'\n  return (([1e7] as unknown as string) + 1e3 + 4e3 + 8e3 + 1e11).replace(/[018]/g, c =>\n    // eslint-disable-next-line no-bitwise\n    ((c as unknown as number) ^ ((getRandomByte() & 15) >> ((c as unknown as number) / 4))).toString(16),\n  );\n}\n\nfunction getFirstException(event: Event): Exception | undefined {\n  return event.exception?.values?.[0];\n}\n\n/**\n * Extracts either message or type+value from an event that can be used for user-facing logs\n * @returns event's description\n */\nexport function getEventDescription(event: Event): string {\n  const { message, event_id: eventId } = event;\n  if (message) {\n    return message;\n  }\n\n  const firstException = getFirstException(event);\n  if (firstException) {\n    if (firstException.type && firstException.value) {\n      return `${firstException.type}: ${firstException.value}`;\n    }\n    return firstException.type || firstException.value || eventId || '<unknown>';\n  }\n  return eventId || '<unknown>';\n}\n\n/**\n * Adds exception values, type and value to an synthetic Exception.\n * @param event The event to modify.\n * @param value Value of the exception.\n * @param type Type of the exception.\n * @hidden\n */\nexport function addExceptionTypeValue(event: Event, value?: string, type?: string): void {\n  const exception = (event.exception = event.exception || {});\n  const values = (exception.values = exception.values || []);\n  const firstException = (values[0] = values[0] || {});\n  if (!firstException.value) {\n    firstException.value = value || '';\n  }\n  if (!firstException.type) {\n    firstException.type = type || 'Error';\n  }\n}\n\n/**\n * Adds exception mechanism data to a given event. Uses defaults if the second parameter is not passed.\n *\n * @param event The event to modify.\n * @param newMechanism Mechanism data to add to the event.\n * @hidden\n */\nexport function addExceptionMechanism(event: Event, newMechanism?: Partial<Mechanism>): void {\n  const firstException = getFirstException(event);\n  if (!firstException) {\n    return;\n  }\n\n  const defaultMechanism = { type: 'generic', handled: true };\n  const currentMechanism = firstException.mechanism;\n  firstException.mechanism = { ...defaultMechanism, ...currentMechanism, ...newMechanism };\n\n  if (newMechanism && 'data' in newMechanism) {\n    const mergedData = { ...currentMechanism?.data, ...newMechanism.data };\n    firstException.mechanism.data = mergedData;\n  }\n}\n\n// https://semver.org/#is-there-a-suggested-regular-expression-regex-to-check-a-semver-string\nconst SEMVER_REGEXP =\n  /^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$/;\n\n/**\n * Represents Semantic Versioning object\n */\ninterface SemVer {\n  major?: number;\n  minor?: number;\n  patch?: number;\n  prerelease?: string;\n  buildmetadata?: string;\n}\n\nfunction _parseInt(input: string | undefined): number {\n  return parseInt(input || '', 10);\n}\n\n/**\n * Parses input into a SemVer interface\n * @param input string representation of a semver version\n */\nexport function parseSemver(input: string): SemVer {\n  const match = input.match(SEMVER_REGEXP) || [];\n  const major = _parseInt(match[1]);\n  const minor = _parseInt(match[2]);\n  const patch = _parseInt(match[3]);\n  return {\n    buildmetadata: match[5],\n    major: isNaN(major) ? undefined : major,\n    minor: isNaN(minor) ? undefined : minor,\n    patch: isNaN(patch) ? undefined : patch,\n    prerelease: match[4],\n  };\n}\n\n/**\n * This function adds context (pre/post/line) lines to the provided frame\n *\n * @param lines string[] containing all lines\n * @param frame StackFrame that will be mutated\n * @param linesOfContext number of context lines we want to add pre/post\n */\nexport function addContextToFrame(lines: string[], frame: StackFrame, linesOfContext: number = 5): void {\n  // When there is no line number in the frame, attaching context is nonsensical and will even break grouping\n  if (frame.lineno === undefined) {\n    return;\n  }\n\n  const maxLines = lines.length;\n  const sourceLine = Math.max(Math.min(maxLines - 1, frame.lineno - 1), 0);\n\n  frame.pre_context = lines\n    .slice(Math.max(0, sourceLine - linesOfContext), sourceLine)\n    .map((line: string) => snipLine(line, 0));\n\n  // We guard here to ensure this is not larger than the existing number of lines\n  const lineIndex = Math.min(maxLines - 1, sourceLine);\n\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  frame.context_line = snipLine(lines[lineIndex]!, frame.colno || 0);\n\n  frame.post_context = lines\n    .slice(Math.min(sourceLine + 1, maxLines), sourceLine + 1 + linesOfContext)\n    .map((line: string) => snipLine(line, 0));\n}\n\n/**\n * Checks whether or not we've already captured the given exception (note: not an identical exception - the very object\n * in question), and marks it captured if not.\n *\n * This is useful because it's possible for an error to get captured by more than one mechanism. After we intercept and\n * record an error, we rethrow it (assuming we've intercepted it before it's reached the top-level global handlers), so\n * that we don't interfere with whatever effects the error might have had were the SDK not there. At that point, because\n * the error has been rethrown, it's possible for it to bubble up to some other code we've instrumented. If it's not\n * caught after that, it will bubble all the way up to the global handlers (which of course we also instrument). This\n * function helps us ensure that even if we encounter the same error more than once, we only record it the first time we\n * see it.\n *\n * Note: It will ignore primitives (always return `false` and not mark them as seen), as properties can't be set on\n * them. {@link: Object.objectify} can be used on exceptions to convert any that are primitives into their equivalent\n * object wrapper forms so that this check will always work. However, because we need to flag the exact object which\n * will get rethrown, and because that rethrowing happens outside of the event processing pipeline, the objectification\n * must be done before the exception captured.\n *\n * @param A thrown exception to check or flag as having been seen\n * @returns `true` if the exception has already been captured, `false` if not (with the side effect of marking it seen)\n */\nexport function checkOrSetAlreadyCaught(exception: unknown): boolean {\n  if (isAlreadyCaptured(exception)) {\n    return true;\n  }\n\n  try {\n    // set it this way rather than by assignment so that it's not ennumerable and therefore isn't recorded by the\n    // `ExtraErrorData` integration\n    addNonEnumerableProperty(exception as { [key: string]: unknown }, '__sentry_captured__', true);\n  } catch (err) {\n    // `exception` is a primitive, so we can't mark it seen\n  }\n\n  return false;\n}\n\nfunction isAlreadyCaptured(exception: unknown): boolean | void {\n  try {\n    return (exception as { __sentry_captured__?: boolean }).__sentry_captured__;\n  } catch {} // eslint-disable-line no-empty\n}\n", "import { GLOBAL_OBJ } from './worldwide';\n\nconst ONE_SECOND_IN_MS = 1000;\n\n/**\n * A partial definition of the [Performance Web API]{@link https://developer.mozilla.org/en-US/docs/Web/API/Performance}\n * for accessing a high-resolution monotonic clock.\n */\ninterface Performance {\n  /**\n   * The millisecond timestamp at which measurement began, measured in Unix time.\n   */\n  timeOrigin: number;\n  /**\n   * Returns the current millisecond timestamp, where 0 represents the start of measurement.\n   */\n  now(): number;\n}\n\n/**\n * Returns a timestamp in seconds since the UNIX epoch using the Date API.\n */\nexport function dateTimestampInSeconds(): number {\n  return Date.now() / ONE_SECOND_IN_MS;\n}\n\n/**\n * Returns a wrapper around the native Performance API browser implementation, or undefined for browsers that do not\n * support the API.\n *\n * Wrapping the native API works around differences in behavior from different browsers.\n */\nfunction createUnixTimestampInSecondsFunc(): () => number {\n  const { performance } = GLOBAL_OBJ as typeof GLOBAL_OBJ & { performance?: Performance };\n  if (!performance?.now) {\n    return dateTimestampInSeconds;\n  }\n\n  // Some browser and environments don't have a timeOrigin, so we fallback to\n  // using Date.now() to compute the starting time.\n  const approxStartingTimeOrigin = Date.now() - performance.now();\n  const timeOrigin = performance.timeOrigin == undefined ? approxStartingTimeOrigin : performance.timeOrigin;\n\n  // performance.now() is a monotonic clock, which means it starts at 0 when the process begins. To get the current\n  // wall clock time (actual UNIX timestamp), we need to add the starting time origin and the current time elapsed.\n  //\n  // TODO: This does not account for the case where the monotonic clock that powers performance.now() drifts from the\n  // wall clock time, which causes the returned timestamp to be inaccurate. We should investigate how to detect and\n  // correct for this.\n  // See: https://github.com/getsentry/sentry-javascript/issues/2590\n  // See: https://github.com/mdn/content/issues/4713\n  // See: https://dev.to/noamr/when-a-millisecond-is-not-a-millisecond-3h6\n  return () => {\n    return (timeOrigin + performance.now()) / ONE_SECOND_IN_MS;\n  };\n}\n\n/**\n * Returns a timestamp in seconds since the UNIX epoch using either the Performance or Date APIs, depending on the\n * availability of the Performance API.\n *\n * BUG: Note that because of how browsers implement the Performance API, the clock might stop when the computer is\n * asleep. This creates a skew between `dateTimestampInSeconds` and `timestampInSeconds`. The\n * skew can grow to arbitrary amounts like days, weeks or months.\n * See https://github.com/getsentry/sentry-javascript/issues/2590.\n */\nexport const timestampInSeconds = createUnixTimestampInSecondsFunc();\n\n/**\n * Cached result of getBrowserTimeOrigin.\n */\nlet cachedTimeOrigin: [number | undefined, string] | undefined;\n\n/**\n * Gets the time origin and the mode used to determine it.\n */\nfunction getBrowserTimeOrigin(): [number | undefined, string] {\n  // Unfortunately browsers may report an inaccurate time origin data, through either performance.timeOrigin or\n  // performance.timing.navigationStart, which results in poor results in performance data. We only treat time origin\n  // data as reliable if they are within a reasonable threshold of the current time.\n\n  const { performance } = GLOBAL_OBJ as typeof GLOBAL_OBJ & Window;\n  if (!performance?.now) {\n    return [undefined, 'none'];\n  }\n\n  const threshold = 3600 * 1000;\n  const performanceNow = performance.now();\n  const dateNow = Date.now();\n\n  // if timeOrigin isn't available set delta to threshold so it isn't used\n  const timeOriginDelta = performance.timeOrigin\n    ? Math.abs(performance.timeOrigin + performanceNow - dateNow)\n    : threshold;\n  const timeOriginIsReliable = timeOriginDelta < threshold;\n\n  // While performance.timing.navigationStart is deprecated in favor of performance.timeOrigin, performance.timeOrigin\n  // is not as widely supported. Namely, performance.timeOrigin is undefined in Safari as of writing.\n  // Also as of writing, performance.timing is not available in Web Workers in mainstream browsers, so it is not always\n  // a valid fallback. In the absence of an initial time provided by the browser, fallback to the current time from the\n  // Date API.\n  // eslint-disable-next-line deprecation/deprecation\n  const navigationStart = performance.timing?.navigationStart;\n  const hasNavigationStart = typeof navigationStart === 'number';\n  // if navigationStart isn't available set delta to threshold so it isn't used\n  const navigationStartDelta = hasNavigationStart ? Math.abs(navigationStart + performanceNow - dateNow) : threshold;\n  const navigationStartIsReliable = navigationStartDelta < threshold;\n\n  if (timeOriginIsReliable || navigationStartIsReliable) {\n    // Use the more reliable time origin\n    if (timeOriginDelta <= navigationStartDelta) {\n      return [performance.timeOrigin, 'timeOrigin'];\n    } else {\n      return [navigationStart, 'navigationStart'];\n    }\n  }\n\n  // Either both timeOrigin and navigationStart are skewed or neither is available, fallback to Date.\n  return [dateNow, 'dateNow'];\n}\n\n/**\n * The number of milliseconds since the UNIX epoch. This value is only usable in a browser, and only when the\n * performance API is available.\n */\nexport function browserPerformanceTimeOrigin(): number | undefined {\n  if (!cachedTimeOrigin) {\n    cachedTimeOrigin = getBrowserTimeOrigin();\n  }\n\n  return cachedTimeOrigin[0];\n}\n", "import type { SerializedSession, Session, SessionContext, SessionStatus } from './types-hoist/session';\nimport { uuid4 } from './utils-hoist/misc';\nimport { timestampInSeconds } from './utils-hoist/time';\n\n/**\n * Creates a new `Session` object by setting certain default parameters. If optional @param context\n * is passed, the passed properties are applied to the session object.\n *\n * @param context (optional) additional properties to be applied to the returned session object\n *\n * @returns a new `Session` object\n */\nexport function makeSession(context?: Omit<SessionContext, 'started' | 'status'>): Session {\n  // Both timestamp and started are in seconds since the UNIX epoch.\n  const startingTime = timestampInSeconds();\n\n  const session: Session = {\n    sid: uuid4(),\n    init: true,\n    timestamp: startingTime,\n    started: startingTime,\n    duration: 0,\n    status: 'ok',\n    errors: 0,\n    ignoreDuration: false,\n    toJSON: () => sessionToJSON(session),\n  };\n\n  if (context) {\n    updateSession(session, context);\n  }\n\n  return session;\n}\n\n/**\n * Updates a session object with the properties passed in the context.\n *\n * Note that this function mutates the passed object and returns void.\n * (Had to do this instead of returning a new and updated session because closing and sending a session\n * makes an update to the session after it was passed to the sending logic.\n * @see Client.captureSession )\n *\n * @param session the `Session` to update\n * @param context the `SessionContext` holding the properties that should be updated in @param session\n */\n// eslint-disable-next-line complexity\nexport function updateSession(session: Session, context: SessionContext = {}): void {\n  if (context.user) {\n    if (!session.ipAddress && context.user.ip_address) {\n      session.ipAddress = context.user.ip_address;\n    }\n\n    if (!session.did && !context.did) {\n      session.did = context.user.id || context.user.email || context.user.username;\n    }\n  }\n\n  session.timestamp = context.timestamp || timestampInSeconds();\n\n  if (context.abnormal_mechanism) {\n    session.abnormal_mechanism = context.abnormal_mechanism;\n  }\n\n  if (context.ignoreDuration) {\n    session.ignoreDuration = context.ignoreDuration;\n  }\n  if (context.sid) {\n    // Good enough uuid validation. — Kamil\n    session.sid = context.sid.length === 32 ? context.sid : uuid4();\n  }\n  if (context.init !== undefined) {\n    session.init = context.init;\n  }\n  if (!session.did && context.did) {\n    session.did = `${context.did}`;\n  }\n  if (typeof context.started === 'number') {\n    session.started = context.started;\n  }\n  if (session.ignoreDuration) {\n    session.duration = undefined;\n  } else if (typeof context.duration === 'number') {\n    session.duration = context.duration;\n  } else {\n    const duration = session.timestamp - session.started;\n    session.duration = duration >= 0 ? duration : 0;\n  }\n  if (context.release) {\n    session.release = context.release;\n  }\n  if (context.environment) {\n    session.environment = context.environment;\n  }\n  if (!session.ipAddress && context.ipAddress) {\n    session.ipAddress = context.ipAddress;\n  }\n  if (!session.userAgent && context.userAgent) {\n    session.userAgent = context.userAgent;\n  }\n  if (typeof context.errors === 'number') {\n    session.errors = context.errors;\n  }\n  if (context.status) {\n    session.status = context.status;\n  }\n}\n\n/**\n * Closes a session by setting its status and updating the session object with it.\n * Internally calls `updateSession` to update the passed session object.\n *\n * Note that this function mutates the passed session (@see updateSession for explanation).\n *\n * @param session the `Session` object to be closed\n * @param status the `SessionStatus` with which the session was closed. If you don't pass a status,\n *               this function will keep the previously set status, unless it was `'ok'` in which case\n *               it is changed to `'exited'`.\n */\nexport function closeSession(session: Session, status?: Exclude<SessionStatus, 'ok'>): void {\n  let context = {};\n  if (status) {\n    context = { status };\n  } else if (session.status === 'ok') {\n    context = { status: 'exited' };\n  }\n\n  updateSession(session, context);\n}\n\n/**\n * Serializes a passed session object to a JSON object with a slightly different structure.\n * This is necessary because the Sentry backend requires a slightly different schema of a session\n * than the one the JS SDKs use internally.\n *\n * @param session the session to be converted\n *\n * @returns a JSON object of the passed session\n */\nfunction sessionToJSON(session: Session): SerializedSession {\n  return {\n    sid: `${session.sid}`,\n    init: session.init,\n    // Make sure that sec is converted to ms for date constructor\n    started: new Date(session.started * 1000).toISOString(),\n    timestamp: new Date(session.timestamp * 1000).toISOString(),\n    status: session.status,\n    errors: session.errors,\n    did: typeof session.did === 'number' || typeof session.did === 'string' ? `${session.did}` : undefined,\n    duration: session.duration,\n    abnormal_mechanism: session.abnormal_mechanism,\n    attrs: {\n      release: session.release,\n      environment: session.environment,\n      ip_address: session.ipAddress,\n      user_agent: session.userAgent,\n    },\n  };\n}\n", "/**\n * Shallow merge two objects.\n * Does not mutate the passed in objects.\n * Undefined/empty values in the merge object will overwrite existing values.\n *\n * By default, this merges 2 levels deep.\n */\nexport function merge<T>(initialObj: T, mergeObj: T, levels = 2): T {\n  // If the merge value is not an object, or we have no merge levels left,\n  // we just set the value to the merge value\n  if (!mergeObj || typeof mergeObj !== 'object' || levels <= 0) {\n    return mergeObj;\n  }\n\n  // If the merge object is an empty object, and the initial object is not undefined, we return the initial object\n  if (initialObj && Object.keys(mergeObj).length === 0) {\n    return initialObj;\n  }\n\n  // Clone object\n  const output = { ...initialObj };\n\n  // Merge values into output, resursively\n  for (const key in mergeObj) {\n    if (Object.prototype.hasOwnProperty.call(mergeObj, key)) {\n      output[key] = merge(output[key], mergeObj[key], levels - 1);\n    }\n  }\n\n  return output;\n}\n", "import type { Scope } from '../scope';\nimport type { Span } from '../types-hoist/span';\nimport { addNonEnumerableProperty } from '../utils-hoist/object';\n\nconst SCOPE_SPAN_FIELD = '_sentrySpan';\n\ntype ScopeWithMaybeSpan = Scope & {\n  [SCOPE_SPAN_FIELD]?: Span;\n};\n\n/**\n * Set the active span for a given scope.\n * NOTE: This should NOT be used directly, but is only used internally by the trace methods.\n */\nexport function _setSpanForScope(scope: Scope, span: Span | undefined): void {\n  if (span) {\n    addNonEnumerableProperty(scope as ScopeWithMaybeSpan, SCOPE_SPAN_FIELD, span);\n  } else {\n    // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n    delete (scope as ScopeWithMaybeSpan)[SCOPE_SPAN_FIELD];\n  }\n}\n\n/**\n * Get the active span for a given scope.\n * NOTE: This should NOT be used directly, but is only used internally by the trace methods.\n */\nexport function _getSpanForScope(scope: ScopeWithMaybeSpan): Span | undefined {\n  return scope[SCOPE_SPAN_FIELD];\n}\n", "import { uuid4 } from './misc';\n\n/**\n * Generate a random, valid trace ID.\n */\nexport function generateTraceId(): string {\n  return uuid4();\n}\n\n/**\n * Generate a random, valid span ID.\n */\nexport function generateSpanId(): string {\n  return uuid4().substring(16);\n}\n", "/* eslint-disable max-lines */\nimport type { Client } from './client';\nimport { updateSession } from './session';\nimport type { Attachment } from './types-hoist/attachment';\nimport type { Breadcrumb } from './types-hoist/breadcrumb';\nimport type { Context, Contexts } from './types-hoist/context';\nimport type { DynamicSamplingContext } from './types-hoist/envelope';\nimport type { Event, EventHint } from './types-hoist/event';\nimport type { EventProcessor } from './types-hoist/eventprocessor';\nimport type { Extra, Extras } from './types-hoist/extra';\nimport type { Primitive } from './types-hoist/misc';\nimport type { RequestEventData } from './types-hoist/request';\nimport type { Session } from './types-hoist/session';\nimport type { SeverityLevel } from './types-hoist/severity';\nimport type { Span } from './types-hoist/span';\nimport type { PropagationContext } from './types-hoist/tracing';\nimport type { User } from './types-hoist/user';\nimport { merge } from './utils/merge';\nimport { _getSpanForScope, _setSpanForScope } from './utils/spanOnScope';\nimport { isPlainObject } from './utils-hoist/is';\nimport { logger } from './utils-hoist/logger';\nimport { uuid4 } from './utils-hoist/misc';\nimport { generateTraceId } from './utils-hoist/propagationContext';\nimport { truncate } from './utils-hoist/string';\nimport { dateTimestampInSeconds } from './utils-hoist/time';\n\n/**\n * Default value for maximum number of breadcrumbs added to an event.\n */\nconst DEFAULT_MAX_BREADCRUMBS = 100;\n\n/**\n * A context to be used for capturing an event.\n * This can either be a Scope, or a partial ScopeContext,\n * or a callback that receives the current scope and returns a new scope to use.\n */\nexport type CaptureContext = Scope | Partial<ScopeContext> | ((scope: Scope) => Scope);\n\n/**\n * Data that can be converted to a Scope.\n */\nexport interface ScopeContext {\n  user: User;\n  level: SeverityLevel;\n  extra: Extras;\n  contexts: Contexts;\n  tags: { [key: string]: Primitive };\n  fingerprint: string[];\n  propagationContext: PropagationContext;\n}\n\nexport interface SdkProcessingMetadata {\n  [key: string]: unknown;\n  requestSession?: {\n    status: 'ok' | 'errored' | 'crashed';\n  };\n  normalizedRequest?: RequestEventData;\n  dynamicSamplingContext?: Partial<DynamicSamplingContext>;\n  capturedSpanScope?: Scope;\n  capturedSpanIsolationScope?: Scope;\n  spanCountBeforeProcessing?: number;\n  ipAddress?: string;\n}\n\n/**\n * Normalized data of the Scope, ready to be used.\n */\nexport interface ScopeData {\n  eventProcessors: EventProcessor[];\n  breadcrumbs: Breadcrumb[];\n  user: User;\n  tags: { [key: string]: Primitive };\n  extra: Extras;\n  contexts: Contexts;\n  attachments: Attachment[];\n  propagationContext: PropagationContext;\n  sdkProcessingMetadata: SdkProcessingMetadata;\n  fingerprint: string[];\n  level?: SeverityLevel;\n  transactionName?: string;\n  span?: Span;\n}\n\n/**\n * Holds additional event information.\n */\nexport class Scope {\n  /** Flag if notifying is happening. */\n  protected _notifyingListeners: boolean;\n\n  /** Callback for client to receive scope changes. */\n  protected _scopeListeners: Array<(scope: Scope) => void>;\n\n  /** Callback list that will be called during event processing. */\n  protected _eventProcessors: EventProcessor[];\n\n  /** Array of breadcrumbs. */\n  protected _breadcrumbs: Breadcrumb[];\n\n  /** User */\n  protected _user: User;\n\n  /** Tags */\n  protected _tags: { [key: string]: Primitive };\n\n  /** Extra */\n  protected _extra: Extras;\n\n  /** Contexts */\n  protected _contexts: Contexts;\n\n  /** Attachments */\n  protected _attachments: Attachment[];\n\n  /** Propagation Context for distributed tracing */\n  protected _propagationContext: PropagationContext;\n\n  /**\n   * A place to stash data which is needed at some point in the SDK's event processing pipeline but which shouldn't get\n   * sent to Sentry\n   */\n  protected _sdkProcessingMetadata: SdkProcessingMetadata;\n\n  /** Fingerprint */\n  protected _fingerprint?: string[];\n\n  /** Severity */\n  protected _level?: SeverityLevel;\n\n  /**\n   * Transaction Name\n   *\n   * IMPORTANT: The transaction name on the scope has nothing to do with root spans/transaction objects.\n   * It's purpose is to assign a transaction to the scope that's added to non-transaction events.\n   */\n  protected _transactionName?: string;\n\n  /** Session */\n  protected _session?: Session;\n\n  /** The client on this scope */\n  protected _client?: Client;\n\n  /** Contains the last event id of a captured event.  */\n  protected _lastEventId?: string;\n\n  // NOTE: Any field which gets added here should get added not only to the constructor but also to the `clone` method.\n\n  public constructor() {\n    this._notifyingListeners = false;\n    this._scopeListeners = [];\n    this._eventProcessors = [];\n    this._breadcrumbs = [];\n    this._attachments = [];\n    this._user = {};\n    this._tags = {};\n    this._extra = {};\n    this._contexts = {};\n    this._sdkProcessingMetadata = {};\n    this._propagationContext = {\n      traceId: generateTraceId(),\n      sampleRand: Math.random(),\n    };\n  }\n\n  /**\n   * Clone all data from this scope into a new scope.\n   */\n  public clone(): Scope {\n    const newScope = new Scope();\n    newScope._breadcrumbs = [...this._breadcrumbs];\n    newScope._tags = { ...this._tags };\n    newScope._extra = { ...this._extra };\n    newScope._contexts = { ...this._contexts };\n    if (this._contexts.flags) {\n      // We need to copy the `values` array so insertions on a cloned scope\n      // won't affect the original array.\n      newScope._contexts.flags = {\n        values: [...this._contexts.flags.values],\n      };\n    }\n\n    newScope._user = this._user;\n    newScope._level = this._level;\n    newScope._session = this._session;\n    newScope._transactionName = this._transactionName;\n    newScope._fingerprint = this._fingerprint;\n    newScope._eventProcessors = [...this._eventProcessors];\n    newScope._attachments = [...this._attachments];\n    newScope._sdkProcessingMetadata = { ...this._sdkProcessingMetadata };\n    newScope._propagationContext = { ...this._propagationContext };\n    newScope._client = this._client;\n    newScope._lastEventId = this._lastEventId;\n\n    _setSpanForScope(newScope, _getSpanForScope(this));\n\n    return newScope;\n  }\n\n  /**\n   * Update the client assigned to this scope.\n   * Note that not every scope will have a client assigned - isolation scopes & the global scope will generally not have a client,\n   * as well as manually created scopes.\n   */\n  public setClient(client: Client | undefined): void {\n    this._client = client;\n  }\n\n  /**\n   * Set the ID of the last captured error event.\n   * This is generally only captured on the isolation scope.\n   */\n  public setLastEventId(lastEventId: string | undefined): void {\n    this._lastEventId = lastEventId;\n  }\n\n  /**\n   * Get the client assigned to this scope.\n   */\n  public getClient<C extends Client>(): C | undefined {\n    return this._client as C | undefined;\n  }\n\n  /**\n   * Get the ID of the last captured error event.\n   * This is generally only available on the isolation scope.\n   */\n  public lastEventId(): string | undefined {\n    return this._lastEventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public addScopeListener(callback: (scope: Scope) => void): void {\n    this._scopeListeners.push(callback);\n  }\n\n  /**\n   * Add an event processor that will be called before an event is sent.\n   */\n  public addEventProcessor(callback: EventProcessor): this {\n    this._eventProcessors.push(callback);\n    return this;\n  }\n\n  /**\n   * Set the user for this scope.\n   * Set to `null` to unset the user.\n   */\n  public setUser(user: User | null): this {\n    // If null is passed we want to unset everything, but still define keys,\n    // so that later down in the pipeline any existing values are cleared.\n    this._user = user || {\n      email: undefined,\n      id: undefined,\n      ip_address: undefined,\n      username: undefined,\n    };\n\n    if (this._session) {\n      updateSession(this._session, { user });\n    }\n\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Get the user from this scope.\n   */\n  public getUser(): User | undefined {\n    return this._user;\n  }\n\n  /**\n   * Set an object that will be merged into existing tags on the scope,\n   * and will be sent as tags data with the event.\n   */\n  public setTags(tags: { [key: string]: Primitive }): this {\n    this._tags = {\n      ...this._tags,\n      ...tags,\n    };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Set a single tag that will be sent as tags data with the event.\n   */\n  public setTag(key: string, value: Primitive): this {\n    this._tags = { ...this._tags, [key]: value };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Set an object that will be merged into existing extra on the scope,\n   * and will be sent as extra data with the event.\n   */\n  public setExtras(extras: Extras): this {\n    this._extra = {\n      ...this._extra,\n      ...extras,\n    };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Set a single key:value extra entry that will be sent as extra data with the event.\n   */\n  public setExtra(key: string, extra: Extra): this {\n    this._extra = { ...this._extra, [key]: extra };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Sets the fingerprint on the scope to send with the events.\n   * @param {string[]} fingerprint Fingerprint to group events in Sentry.\n   */\n  public setFingerprint(fingerprint: string[]): this {\n    this._fingerprint = fingerprint;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Sets the level on the scope for future events.\n   */\n  public setLevel(level: SeverityLevel): this {\n    this._level = level;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Sets the transaction name on the scope so that the name of e.g. taken server route or\n   * the page location is attached to future events.\n   *\n   * IMPORTANT: Calling this function does NOT change the name of the currently active\n   * root span. If you want to change the name of the active root span, use\n   * `Sentry.updateSpanName(rootSpan, 'new name')` instead.\n   *\n   * By default, the SDK updates the scope's transaction name automatically on sensible\n   * occasions, such as a page navigation or when handling a new request on the server.\n   */\n  public setTransactionName(name?: string): this {\n    this._transactionName = name;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Sets context data with the given name.\n   * Data passed as context will be normalized. You can also pass `null` to unset the context.\n   * Note that context data will not be merged - calling `setContext` will overwrite an existing context with the same key.\n   */\n  public setContext(key: string, context: Context | null): this {\n    if (context === null) {\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete this._contexts[key];\n    } else {\n      this._contexts[key] = context;\n    }\n\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Set the session for the scope.\n   */\n  public setSession(session?: Session): this {\n    if (!session) {\n      delete this._session;\n    } else {\n      this._session = session;\n    }\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Get the session from the scope.\n   */\n  public getSession(): Session | undefined {\n    return this._session;\n  }\n\n  /**\n   * Updates the scope with provided data. Can work in three variations:\n   * - plain object containing updatable attributes\n   * - Scope instance that'll extract the attributes from\n   * - callback function that'll receive the current scope as an argument and allow for modifications\n   */\n  public update(captureContext?: CaptureContext): this {\n    if (!captureContext) {\n      return this;\n    }\n\n    const scopeToMerge = typeof captureContext === 'function' ? captureContext(this) : captureContext;\n\n    const scopeInstance =\n      scopeToMerge instanceof Scope\n        ? scopeToMerge.getScopeData()\n        : isPlainObject(scopeToMerge)\n          ? (captureContext as ScopeContext)\n          : undefined;\n\n    const { tags, extra, user, contexts, level, fingerprint = [], propagationContext } = scopeInstance || {};\n\n    this._tags = { ...this._tags, ...tags };\n    this._extra = { ...this._extra, ...extra };\n    this._contexts = { ...this._contexts, ...contexts };\n\n    if (user && Object.keys(user).length) {\n      this._user = user;\n    }\n\n    if (level) {\n      this._level = level;\n    }\n\n    if (fingerprint.length) {\n      this._fingerprint = fingerprint;\n    }\n\n    if (propagationContext) {\n      this._propagationContext = propagationContext;\n    }\n\n    return this;\n  }\n\n  /**\n   * Clears the current scope and resets its properties.\n   * Note: The client will not be cleared.\n   */\n  public clear(): this {\n    // client is not cleared here on purpose!\n    this._breadcrumbs = [];\n    this._tags = {};\n    this._extra = {};\n    this._user = {};\n    this._contexts = {};\n    this._level = undefined;\n    this._transactionName = undefined;\n    this._fingerprint = undefined;\n    this._session = undefined;\n    _setSpanForScope(this, undefined);\n    this._attachments = [];\n    this.setPropagationContext({ traceId: generateTraceId(), sampleRand: Math.random() });\n\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Adds a breadcrumb to the scope.\n   * By default, the last 100 breadcrumbs are kept.\n   */\n  public addBreadcrumb(breadcrumb: Breadcrumb, maxBreadcrumbs?: number): this {\n    const maxCrumbs = typeof maxBreadcrumbs === 'number' ? maxBreadcrumbs : DEFAULT_MAX_BREADCRUMBS;\n\n    // No data has been changed, so don't notify scope listeners\n    if (maxCrumbs <= 0) {\n      return this;\n    }\n\n    const mergedBreadcrumb: Breadcrumb = {\n      timestamp: dateTimestampInSeconds(),\n      ...breadcrumb,\n      // Breadcrumb messages can theoretically be infinitely large and they're held in memory so we truncate them not to leak (too much) memory\n      message: breadcrumb.message ? truncate(breadcrumb.message, 2048) : breadcrumb.message,\n    };\n\n    this._breadcrumbs.push(mergedBreadcrumb);\n    if (this._breadcrumbs.length > maxCrumbs) {\n      this._breadcrumbs = this._breadcrumbs.slice(-maxCrumbs);\n      this._client?.recordDroppedEvent('buffer_overflow', 'log_item');\n    }\n\n    this._notifyScopeListeners();\n\n    return this;\n  }\n\n  /**\n   * Get the last breadcrumb of the scope.\n   */\n  public getLastBreadcrumb(): Breadcrumb | undefined {\n    return this._breadcrumbs[this._breadcrumbs.length - 1];\n  }\n\n  /**\n   * Clear all breadcrumbs from the scope.\n   */\n  public clearBreadcrumbs(): this {\n    this._breadcrumbs = [];\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Add an attachment to the scope.\n   */\n  public addAttachment(attachment: Attachment): this {\n    this._attachments.push(attachment);\n    return this;\n  }\n\n  /**\n   * Clear all attachments from the scope.\n   */\n  public clearAttachments(): this {\n    this._attachments = [];\n    return this;\n  }\n\n  /**\n   * Get the data of this scope, which should be applied to an event during processing.\n   */\n  public getScopeData(): ScopeData {\n    return {\n      breadcrumbs: this._breadcrumbs,\n      attachments: this._attachments,\n      contexts: this._contexts,\n      tags: this._tags,\n      extra: this._extra,\n      user: this._user,\n      level: this._level,\n      fingerprint: this._fingerprint || [],\n      eventProcessors: this._eventProcessors,\n      propagationContext: this._propagationContext,\n      sdkProcessingMetadata: this._sdkProcessingMetadata,\n      transactionName: this._transactionName,\n      span: _getSpanForScope(this),\n    };\n  }\n\n  /**\n   * Add data which will be accessible during event processing but won't get sent to Sentry.\n   */\n  public setSDKProcessingMetadata(newData: SdkProcessingMetadata): this {\n    this._sdkProcessingMetadata = merge(this._sdkProcessingMetadata, newData, 2);\n    return this;\n  }\n\n  /**\n   * Add propagation context to the scope, used for distributed tracing\n   */\n  public setPropagationContext(context: PropagationContext): this {\n    this._propagationContext = context;\n    return this;\n  }\n\n  /**\n   * Get propagation context from the scope, used for distributed tracing\n   */\n  public getPropagationContext(): PropagationContext {\n    return this._propagationContext;\n  }\n\n  /**\n   * Capture an exception for this scope.\n   *\n   * @returns {string} The id of the captured Sentry event.\n   */\n  public captureException(exception: unknown, hint?: EventHint): string {\n    const eventId = hint?.event_id || uuid4();\n\n    if (!this._client) {\n      logger.warn('No client configured on scope - will not capture exception!');\n      return eventId;\n    }\n\n    const syntheticException = new Error('Sentry syntheticException');\n\n    this._client.captureException(\n      exception,\n      {\n        originalException: exception,\n        syntheticException,\n        ...hint,\n        event_id: eventId,\n      },\n      this,\n    );\n\n    return eventId;\n  }\n\n  /**\n   * Capture a message for this scope.\n   *\n   * @returns {string} The id of the captured message.\n   */\n  public captureMessage(message: string, level?: SeverityLevel, hint?: EventHint): string {\n    const eventId = hint?.event_id || uuid4();\n\n    if (!this._client) {\n      logger.warn('No client configured on scope - will not capture message!');\n      return eventId;\n    }\n\n    const syntheticException = new Error(message);\n\n    this._client.captureMessage(\n      message,\n      level,\n      {\n        originalException: message,\n        syntheticException,\n        ...hint,\n        event_id: eventId,\n      },\n      this,\n    );\n\n    return eventId;\n  }\n\n  /**\n   * Capture a Sentry event for this scope.\n   *\n   * @returns {string} The id of the captured event.\n   */\n  public captureEvent(event: Event, hint?: EventHint): string {\n    const eventId = hint?.event_id || uuid4();\n\n    if (!this._client) {\n      logger.warn('No client configured on scope - will not capture event!');\n      return eventId;\n    }\n\n    this._client.captureEvent(event, { ...hint, event_id: eventId }, this);\n\n    return eventId;\n  }\n\n  /**\n   * This will be called on every set call.\n   */\n  protected _notifyScopeListeners(): void {\n    // We need this check for this._notifyingListeners to be able to work on scope during updates\n    // If this check is not here we'll produce endless recursion when something is done with the scope\n    // during the callback.\n    if (!this._notifyingListeners) {\n      this._notifyingListeners = true;\n      this._scopeListeners.forEach(callback => {\n        callback(this);\n      });\n      this._notifyingListeners = false;\n    }\n  }\n}\n", "import { getGlobalSingleton } from './carrier';\nimport { Scope } from './scope';\n\n/** Get the default current scope. */\nexport function getDefaultCurrentScope(): Scope {\n  return getGlobalSingleton('defaultCurrentScope', () => new Scope());\n}\n\n/** Get the default isolation scope. */\nexport function getDefaultIsolationScope(): Scope {\n  return getGlobalSingleton('defaultIsolationScope', () => new Scope());\n}\n", "import type { Client } from '../client';\nimport { getDefaultCurrentScope, getDefaultIsolationScope } from '../defaultScopes';\nimport { Scope } from '../scope';\nimport { isThenable } from '../utils-hoist/is';\nimport { getMainCarrier, getSentryCarrier } from './../carrier';\nimport type { AsyncContextStrategy } from './types';\n\ninterface Layer {\n  client?: Client;\n  scope: Scope;\n}\n\n/**\n * This is an object that holds a stack of scopes.\n */\nexport class AsyncContextStack {\n  private readonly _stack: [Layer, ...Layer[]];\n  private _isolationScope: Scope;\n\n  public constructor(scope?: Scope, isolationScope?: Scope) {\n    let assignedScope;\n    if (!scope) {\n      assignedScope = new Scope();\n    } else {\n      assignedScope = scope;\n    }\n\n    let assignedIsolationScope;\n    if (!isolationScope) {\n      assignedIsolationScope = new Scope();\n    } else {\n      assignedIsolationScope = isolationScope;\n    }\n\n    // scope stack for domains or the process\n    this._stack = [{ scope: assignedScope }];\n    this._isolationScope = assignedIsolationScope;\n  }\n\n  /**\n   * Fork a scope for the stack.\n   */\n  public withScope<T>(callback: (scope: Scope) => T): T {\n    const scope = this._pushScope();\n\n    let maybePromiseResult: T;\n    try {\n      maybePromiseResult = callback(scope);\n    } catch (e) {\n      this._popScope();\n      throw e;\n    }\n\n    if (isThenable(maybePromiseResult)) {\n      // @ts-expect-error - isThenable returns the wrong type\n      return maybePromiseResult.then(\n        res => {\n          this._popScope();\n          return res;\n        },\n        e => {\n          this._popScope();\n          throw e;\n        },\n      );\n    }\n\n    this._popScope();\n    return maybePromiseResult;\n  }\n\n  /**\n   * Get the client of the stack.\n   */\n  public getClient<C extends Client>(): C | undefined {\n    return this.getStackTop().client as C;\n  }\n\n  /**\n   * Returns the scope of the top stack.\n   */\n  public getScope(): Scope {\n    return this.getStackTop().scope;\n  }\n\n  /**\n   * Get the isolation scope for the stack.\n   */\n  public getIsolationScope(): Scope {\n    return this._isolationScope;\n  }\n\n  /**\n   * Returns the topmost scope layer in the order domain > local > process.\n   */\n  public getStackTop(): Layer {\n    return this._stack[this._stack.length - 1] as Layer;\n  }\n\n  /**\n   * Push a scope to the stack.\n   */\n  private _pushScope(): Scope {\n    // We want to clone the content of prev scope\n    const scope = this.getScope().clone();\n    this._stack.push({\n      client: this.getClient(),\n      scope,\n    });\n    return scope;\n  }\n\n  /**\n   * Pop a scope from the stack.\n   */\n  private _popScope(): boolean {\n    if (this._stack.length <= 1) return false;\n    return !!this._stack.pop();\n  }\n}\n\n/**\n * Get the global async context stack.\n * This will be removed during the v8 cycle and is only here to make migration easier.\n */\nfunction getAsyncContextStack(): AsyncContextStack {\n  const registry = getMainCarrier();\n  const sentry = getSentryCarrier(registry);\n\n  return (sentry.stack = sentry.stack || new AsyncContextStack(getDefaultCurrentScope(), getDefaultIsolationScope()));\n}\n\nfunction withScope<T>(callback: (scope: Scope) => T): T {\n  return getAsyncContextStack().withScope(callback);\n}\n\nfunction withSetScope<T>(scope: Scope, callback: (scope: Scope) => T): T {\n  const stack = getAsyncContextStack() as AsyncContextStack;\n  return stack.withScope(() => {\n    stack.getStackTop().scope = scope;\n    return callback(scope);\n  });\n}\n\nfunction withIsolationScope<T>(callback: (isolationScope: Scope) => T): T {\n  return getAsyncContextStack().withScope(() => {\n    return callback(getAsyncContextStack().getIsolationScope());\n  });\n}\n\n/**\n * Get the stack-based async context strategy.\n */\nexport function getStackAsyncContextStrategy(): AsyncContextStrategy {\n  return {\n    withIsolationScope,\n    withScope,\n    withSetScope,\n    withSetIsolationScope: <T>(_isolationScope: Scope, callback: (isolationScope: Scope) => T) => {\n      return withIsolationScope(callback);\n    },\n    getCurrentScope: () => getAsyncContextStack().getScope(),\n    getIsolationScope: () => getAsyncContextStack().getIsolationScope(),\n  };\n}\n", "import type { Carrier } from './../carrier';\nimport { getMainCarrier, getSentryCarrier } from './../carrier';\nimport { getStackAsyncContextStrategy } from './stackStrategy';\nimport type { AsyncContextStrategy } from './types';\n\n/**\n * @private Private API with no semver guarantees!\n *\n * Sets the global async context strategy\n */\nexport function setAsyncContextStrategy(strategy: AsyncContextStrategy | undefined): void {\n  // Get main carrier (global for every environment)\n  const registry = getMainCarrier();\n  const sentry = getSentryCarrier(registry);\n  sentry.acs = strategy;\n}\n\n/**\n * Get the current async context strategy.\n * If none has been setup, the default will be used.\n */\nexport function getAsyncContextStrategy(carrier: Carrier): AsyncContextStrategy {\n  const sentry = getSentryCarrier(carrier);\n\n  if (sentry.acs) {\n    return sentry.acs;\n  }\n\n  // Otherwise, use the default one (stack)\n  return getStackAsyncContextStrategy();\n}\n", "import { getAsyncContextStrategy } from './asyncContext';\nimport { getGlobalSingleton, getMainCarrier } from './carrier';\nimport type { Client } from './client';\nimport { Scope } from './scope';\nimport type { TraceContext } from './types-hoist/context';\nimport { generateSpanId } from './utils-hoist/propagationContext';\n\n/**\n * Get the currently active scope.\n */\nexport function getCurrentScope(): Scope {\n  const carrier = getMainCarrier();\n  const acs = getAsyncContextStrategy(carrier);\n  return acs.getCurrentScope();\n}\n\n/**\n * Get the currently active isolation scope.\n * The isolation scope is active for the current execution context.\n */\nexport function getIsolationScope(): Scope {\n  const carrier = getMainCarrier();\n  const acs = getAsyncContextStrategy(carrier);\n  return acs.getIsolationScope();\n}\n\n/**\n * Get the global scope.\n * This scope is applied to _all_ events.\n */\nexport function getGlobalScope(): Scope {\n  return getGlobalSingleton('globalScope', () => new Scope());\n}\n\n/**\n * Creates a new scope with and executes the given operation within.\n * The scope is automatically removed once the operation\n * finishes or throws.\n */\nexport function withScope<T>(callback: (scope: Scope) => T): T;\n/**\n * Set the given scope as the active scope in the callback.\n */\nexport function withScope<T>(scope: Scope | undefined, callback: (scope: Scope) => T): T;\n/**\n * Either creates a new active scope, or sets the given scope as active scope in the given callback.\n */\nexport function withScope<T>(\n  ...rest: [callback: (scope: Scope) => T] | [scope: Scope | undefined, callback: (scope: Scope) => T]\n): T {\n  const carrier = getMainCarrier();\n  const acs = getAsyncContextStrategy(carrier);\n\n  // If a scope is defined, we want to make this the active scope instead of the default one\n  if (rest.length === 2) {\n    const [scope, callback] = rest;\n\n    if (!scope) {\n      return acs.withScope(callback);\n    }\n\n    return acs.withSetScope(scope, callback);\n  }\n\n  return acs.withScope(rest[0]);\n}\n\n/**\n * Attempts to fork the current isolation scope and the current scope based on the current async context strategy. If no\n * async context strategy is set, the isolation scope and the current scope will not be forked (this is currently the\n * case, for example, in the browser).\n *\n * Usage of this function in environments without async context strategy is discouraged and may lead to unexpected behaviour.\n *\n * This function is intended for Sentry SDK and SDK integration development. It is not recommended to be used in \"normal\"\n * applications directly because it comes with pitfalls. Use at your own risk!\n */\nexport function withIsolationScope<T>(callback: (isolationScope: Scope) => T): T;\n/**\n * Set the provided isolation scope as active in the given callback. If no\n * async context strategy is set, the isolation scope and the current scope will not be forked (this is currently the\n * case, for example, in the browser).\n *\n * Usage of this function in environments without async context strategy is discouraged and may lead to unexpected behaviour.\n *\n * This function is intended for Sentry SDK and SDK integration development. It is not recommended to be used in \"normal\"\n * applications directly because it comes with pitfalls. Use at your own risk!\n *\n * If you pass in `undefined` as a scope, it will fork a new isolation scope, the same as if no scope is passed.\n */\nexport function withIsolationScope<T>(isolationScope: Scope | undefined, callback: (isolationScope: Scope) => T): T;\n/**\n * Either creates a new active isolation scope, or sets the given isolation scope as active scope in the given callback.\n */\nexport function withIsolationScope<T>(\n  ...rest:\n    | [callback: (isolationScope: Scope) => T]\n    | [isolationScope: Scope | undefined, callback: (isolationScope: Scope) => T]\n): T {\n  const carrier = getMainCarrier();\n  const acs = getAsyncContextStrategy(carrier);\n\n  // If a scope is defined, we want to make this the active scope instead of the default one\n  if (rest.length === 2) {\n    const [isolationScope, callback] = rest;\n\n    if (!isolationScope) {\n      return acs.withIsolationScope(callback);\n    }\n\n    return acs.withSetIsolationScope(isolationScope, callback);\n  }\n\n  return acs.withIsolationScope(rest[0]);\n}\n\n/**\n * Get the currently active client.\n */\nexport function getClient<C extends Client>(): C | undefined {\n  return getCurrentScope().getClient<C>();\n}\n\n/**\n * Get a trace context for the given scope.\n */\nexport function getTraceContextFromScope(scope: Scope): TraceContext {\n  const propagationContext = scope.getPropagationContext();\n\n  const { traceId, parentSpanId, propagationSpanId } = propagationContext;\n\n  const traceContext: TraceContext = {\n    trace_id: traceId,\n    span_id: propagationSpanId || generateSpanId(),\n  };\n\n  if (parentSpanId) {\n    traceContext.parent_span_id = parentSpanId;\n  }\n\n  return traceContext;\n}\n", "/**\n * Use this attribute to represent the source of a span.\n * Should be one of: custom, url, route, view, component, task, unknown\n *\n */\nexport const SEMANTIC_ATTRIBUTE_SENTRY_SOURCE = 'sentry.source';\n\n/**\n * Attributes that holds the sample rate that was locally applied to a span.\n * If this attribute is not defined, it means that the span inherited a sampling decision.\n *\n * NOTE: Is only defined on root spans.\n */\nexport const SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE = 'sentry.sample_rate';\n\n/**\n * Attribute holding the sample rate of the previous trace.\n * This is used to sample consistently across subsequent traces in the browser SDK.\n *\n * Note: Only defined on root spans, if opted into consistent sampling\n */\nexport const SEMANTIC_ATTRIBUTE_SENTRY_PREVIOUS_TRACE_SAMPLE_RATE = 'sentry.previous_trace_sample_rate';\n\n/**\n * Use this attribute to represent the operation of a span.\n */\nexport const SEMANTIC_ATTRIBUTE_SENTRY_OP = 'sentry.op';\n\n/**\n * Use this attribute to represent the origin of a span.\n */\nexport const SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN = 'sentry.origin';\n\n/** The reason why an idle span finished. */\nexport const SEMANTIC_ATTRIBUTE_SENTRY_IDLE_SPAN_FINISH_REASON = 'sentry.idle_span_finish_reason';\n\n/** The unit of a measurement, which may be stored as a TimedEvent. */\nexport const SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_UNIT = 'sentry.measurement_unit';\n\n/** The value of a measurement, which may be stored as a TimedEvent. */\nexport const SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_VALUE = 'sentry.measurement_value';\n\n/**\n * A custom span name set by users guaranteed to be taken over any automatically\n * inferred name. This attribute is removed before the span is sent.\n *\n * @internal only meant for internal SDK usage\n * @hidden\n */\nexport const SEMANTIC_ATTRIBUTE_SENTRY_CUSTOM_SPAN_NAME = 'sentry.custom_span_name';\n\n/**\n * The id of the profile that this span occurred in.\n */\nexport const SEMANTIC_ATTRIBUTE_PROFILE_ID = 'sentry.profile_id';\n\nexport const SEMANTIC_ATTRIBUTE_EXCLUSIVE_TIME = 'sentry.exclusive_time';\n\nexport const SEMANTIC_ATTRIBUTE_CACHE_HIT = 'cache.hit';\n\nexport const SEMANTIC_ATTRIBUTE_CACHE_KEY = 'cache.key';\n\nexport const SEMANTIC_ATTRIBUTE_CACHE_ITEM_SIZE = 'cache.item_size';\n\n/** TODO: Remove these once we update to latest semantic conventions */\nexport const SEMANTIC_ATTRIBUTE_HTTP_REQUEST_METHOD = 'http.request.method';\nexport const SEMANTIC_ATTRIBUTE_URL_FULL = 'url.full';\n\n/**\n * A span link attribute to mark the link as a special span link.\n *\n * Known values:\n * - `previous_trace`: The span links to the frontend root span of the previous trace.\n * - `next_trace`: The span links to the frontend root span of the next trace. (Not set by the SDK)\n *\n * Other values may be set as appropriate.\n * @see https://develop.sentry.dev/sdk/telemetry/traces/span-links/#link-types\n */\nexport const SEMANTIC_LINK_ATTRIBUTE_LINK_TYPE = 'sentry.link.type';\n", "import type { Span } from '../types-hoist/span';\nimport type { SpanStatus } from '../types-hoist/spanStatus';\n\nexport const SPAN_STATUS_UNSET = 0;\nexport const SPAN_STATUS_OK = 1;\nexport const SPAN_STATUS_ERROR = 2;\n\n/**\n * Converts a HTTP status code into a sentry status with a message.\n *\n * @param httpStatus The HTTP response status code.\n * @returns The span status or unknown_error.\n */\n// https://develop.sentry.dev/sdk/event-payloads/span/\nexport function getSpanStatusFromHttpCode(httpStatus: number): SpanStatus {\n  if (httpStatus < 400 && httpStatus >= 100) {\n    return { code: SPAN_STATUS_OK };\n  }\n\n  if (httpStatus >= 400 && httpStatus < 500) {\n    switch (httpStatus) {\n      case 401:\n        return { code: SPAN_STATUS_ERROR, message: 'unauthenticated' };\n      case 403:\n        return { code: SPAN_STATUS_ERROR, message: 'permission_denied' };\n      case 404:\n        return { code: SPAN_STATUS_ERROR, message: 'not_found' };\n      case 409:\n        return { code: SPAN_STATUS_ERROR, message: 'already_exists' };\n      case 413:\n        return { code: SPAN_STATUS_ERROR, message: 'failed_precondition' };\n      case 429:\n        return { code: SPAN_STATUS_ERROR, message: 'resource_exhausted' };\n      case 499:\n        return { code: SPAN_STATUS_ERROR, message: 'cancelled' };\n      default:\n        return { code: SPAN_STATUS_ERROR, message: 'invalid_argument' };\n    }\n  }\n\n  if (httpStatus >= 500 && httpStatus < 600) {\n    switch (httpStatus) {\n      case 501:\n        return { code: SPAN_STATUS_ERROR, message: 'unimplemented' };\n      case 503:\n        return { code: SPAN_STATUS_ERROR, message: 'unavailable' };\n      case 504:\n        return { code: SPAN_STATUS_ERROR, message: 'deadline_exceeded' };\n      default:\n        return { code: SPAN_STATUS_ERROR, message: 'internal_error' };\n    }\n  }\n\n  return { code: SPAN_STATUS_ERROR, message: 'unknown_error' };\n}\n\n/**\n * Sets the Http status attributes on the current span based on the http code.\n * Additionally, the span's status is updated, depending on the http code.\n */\nexport function setHttpStatus(span: Span, httpStatus: number): void {\n  span.setAttribute('http.response.status_code', httpStatus);\n\n  const spanStatus = getSpanStatusFromHttpCode(httpStatus);\n  if (spanStatus.message !== 'unknown_error') {\n    span.setStatus(spanStatus);\n  }\n}\n", "import type { Scope } from '../scope';\nimport type { Span } from '../types-hoist/span';\nimport { addNonEnumerableProperty } from '../utils-hoist/object';\n\nconst SCOPE_ON_START_SPAN_FIELD = '_sentryScope';\nconst ISOLATION_SCOPE_ON_START_SPAN_FIELD = '_sentryIsolationScope';\n\ntype SpanWithScopes = Span & {\n  [SCOPE_ON_START_SPAN_FIELD]?: Scope;\n  [ISOLATION_SCOPE_ON_START_SPAN_FIELD]?: Scope;\n};\n\n/** Store the scope & isolation scope for a span, which can the be used when it is finished. */\nexport function setCapturedScopesOnSpan(span: Span | undefined, scope: Scope, isolationScope: Scope): void {\n  if (span) {\n    addNonEnumerableProperty(span, ISOLATION_SCOPE_ON_START_SPAN_FIELD, isolationScope);\n    addNonEnumerableProperty(span, SCOPE_ON_START_SPAN_FIELD, scope);\n  }\n}\n\n/**\n * Grabs the scope and isolation scope off a span that were active when the span was started.\n */\nexport function getCapturedScopesOnSpan(span: Span): { scope?: Scope; isolationScope?: Scope } {\n  return {\n    scope: (span as SpanWithScopes)[SCOPE_ON_START_SPAN_FIELD],\n    isolationScope: (span as SpanWithScopes)[ISOLATION_SCOPE_ON_START_SPAN_FIELD],\n  };\n}\n", "/**\n * Parse a sample rate from a given value.\n * This will either return a boolean or number sample rate, if the sample rate is valid (between 0 and 1).\n * If a string is passed, we try to convert it to a number.\n *\n * Any invalid sample rate will return `undefined`.\n */\nexport function parseSampleRate(sampleRate: unknown): number | undefined {\n  if (typeof sampleRate === 'boolean') {\n    return Number(sampleRate);\n  }\n\n  const rate = typeof sampleRate === 'string' ? parseFloat(sampleRate) : sampleRate;\n  if (typeof rate !== 'number' || isNaN(rate) || rate < 0 || rate > 1) {\n    return undefined;\n  }\n\n  return rate;\n}\n", "import type { DynamicSamplingContext } from '../types-hoist/envelope';\nimport { DEBUG_BUILD } from './../debug-build';\nimport { isString } from './is';\nimport { logger } from './logger';\n\nexport const SENTRY_BAGGAGE_KEY_PREFIX = 'sentry-';\n\nexport const SENTRY_BAGGAGE_KEY_PREFIX_REGEX = /^sentry-/;\n\n/**\n * Max length of a serialized baggage string\n *\n * https://www.w3.org/TR/baggage/#limits\n */\nexport const MAX_BAGGAGE_STRING_LENGTH = 8192;\n\n/**\n * Takes a baggage header and turns it into Dynamic Sampling Context, by extracting all the \"sentry-\" prefixed values\n * from it.\n *\n * @param baggageHeader A very bread definition of a baggage header as it might appear in various frameworks.\n * @returns The Dynamic Sampling Context that was found on `baggageHeader`, if there was any, `undefined` otherwise.\n */\nexport function baggageHeaderToDynamicSamplingContext(\n  // Very liberal definition of what any incoming header might look like\n  baggageHeader: string | string[] | number | null | undefined | boolean,\n): Partial<DynamicSamplingContext> | undefined {\n  const baggageObject = parseBaggageHeader(baggageHeader);\n\n  if (!baggageObject) {\n    return undefined;\n  }\n\n  // Read all \"sentry-\" prefixed values out of the baggage object and put it onto a dynamic sampling context object.\n  const dynamicSamplingContext = Object.entries(baggageObject).reduce<Record<string, string>>((acc, [key, value]) => {\n    if (key.match(SENTRY_BAGGAGE_KEY_PREFIX_REGEX)) {\n      const nonPrefixedKey = key.slice(SENTRY_BAGGAGE_KEY_PREFIX.length);\n      acc[nonPrefixedKey] = value;\n    }\n    return acc;\n  }, {});\n\n  // Only return a dynamic sampling context object if there are keys in it.\n  // A keyless object means there were no sentry values on the header, which means that there is no DSC.\n  if (Object.keys(dynamicSamplingContext).length > 0) {\n    return dynamicSamplingContext as Partial<DynamicSamplingContext>;\n  } else {\n    return undefined;\n  }\n}\n\n/**\n * Turns a Dynamic Sampling Object into a baggage header by prefixing all the keys on the object with \"sentry-\".\n *\n * @param dynamicSamplingContext The Dynamic Sampling Context to turn into a header. For convenience and compatibility\n * with the `getDynamicSamplingContext` method on the Transaction class ,this argument can also be `undefined`. If it is\n * `undefined` the function will return `undefined`.\n * @returns a baggage header, created from `dynamicSamplingContext`, or `undefined` either if `dynamicSamplingContext`\n * was `undefined`, or if `dynamicSamplingContext` didn't contain any values.\n */\nexport function dynamicSamplingContextToSentryBaggageHeader(\n  // this also takes undefined for convenience and bundle size in other places\n  dynamicSamplingContext?: Partial<DynamicSamplingContext>,\n): string | undefined {\n  if (!dynamicSamplingContext) {\n    return undefined;\n  }\n\n  // Prefix all DSC keys with \"sentry-\" and put them into a new object\n  const sentryPrefixedDSC = Object.entries(dynamicSamplingContext).reduce<Record<string, string>>(\n    (acc, [dscKey, dscValue]) => {\n      if (dscValue) {\n        acc[`${SENTRY_BAGGAGE_KEY_PREFIX}${dscKey}`] = dscValue;\n      }\n      return acc;\n    },\n    {},\n  );\n\n  return objectToBaggageHeader(sentryPrefixedDSC);\n}\n\n/**\n * Take a baggage header and parse it into an object.\n */\nexport function parseBaggageHeader(\n  baggageHeader: string | string[] | number | null | undefined | boolean,\n): Record<string, string> | undefined {\n  if (!baggageHeader || (!isString(baggageHeader) && !Array.isArray(baggageHeader))) {\n    return undefined;\n  }\n\n  if (Array.isArray(baggageHeader)) {\n    // Combine all baggage headers into one object containing the baggage values so we can later read the Sentry-DSC-values from it\n    return baggageHeader.reduce<Record<string, string>>((acc, curr) => {\n      const currBaggageObject = baggageHeaderToObject(curr);\n      Object.entries(currBaggageObject).forEach(([key, value]) => {\n        acc[key] = value;\n      });\n      return acc;\n    }, {});\n  }\n\n  return baggageHeaderToObject(baggageHeader);\n}\n\n/**\n * Will parse a baggage header, which is a simple key-value map, into a flat object.\n *\n * @param baggageHeader The baggage header to parse.\n * @returns a flat object containing all the key-value pairs from `baggageHeader`.\n */\nfunction baggageHeaderToObject(baggageHeader: string): Record<string, string> {\n  return baggageHeader\n    .split(',')\n    .map(baggageEntry =>\n      baggageEntry.split('=').map(keyOrValue => {\n        try {\n          return decodeURIComponent(keyOrValue.trim());\n        } catch {\n          // We ignore errors here, e.g. if the value cannot be URL decoded.\n          // This will then be skipped in the next step\n          return;\n        }\n      }),\n    )\n    .reduce<Record<string, string>>((acc, [key, value]) => {\n      if (key && value) {\n        acc[key] = value;\n      }\n      return acc;\n    }, {});\n}\n\n/**\n * Turns a flat object (key-value pairs) into a baggage header, which is also just key-value pairs.\n *\n * @param object The object to turn into a baggage header.\n * @returns a baggage header string, or `undefined` if the object didn't have any values, since an empty baggage header\n * is not spec compliant.\n */\nexport function objectToBaggageHeader(object: Record<string, string>): string | undefined {\n  if (Object.keys(object).length === 0) {\n    // An empty baggage header is not spec compliant: We return undefined.\n    return undefined;\n  }\n\n  return Object.entries(object).reduce((baggageHeader, [objectKey, objectValue], currentIndex) => {\n    const baggageEntry = `${encodeURIComponent(objectKey)}=${encodeURIComponent(objectValue)}`;\n    const newBaggageHeader = currentIndex === 0 ? baggageEntry : `${baggageHeader},${baggageEntry}`;\n    if (newBaggageHeader.length > MAX_BAGGAGE_STRING_LENGTH) {\n      DEBUG_BUILD &&\n        logger.warn(\n          `Not adding key: ${objectKey} with val: ${objectValue} to baggage header due to exceeding baggage size limits.`,\n        );\n      return baggageHeader;\n    } else {\n      return newBaggageHeader;\n    }\n  }, '');\n}\n", "import type { DynamicSamplingContext } from '../types-hoist/envelope';\nimport type { PropagationContext } from '../types-hoist/tracing';\nimport type { TraceparentData } from '../types-hoist/transaction';\nimport { parseSampleRate } from '../utils/parseSampleRate';\nimport { baggageHeaderToDynamicSamplingContext } from './baggage';\nimport { generateSpanId, generateTraceId } from './propagationContext';\n\n// eslint-disable-next-line @sentry-internal/sdk/no-regexp-constructor -- RegExp is used for readability here\nexport const TRACEPARENT_REGEXP = new RegExp(\n  '^[ \\\\t]*' + // whitespace\n    '([0-9a-f]{32})?' + // trace_id\n    '-?([0-9a-f]{16})?' + // span_id\n    '-?([01])?' + // sampled\n    '[ \\\\t]*$', // whitespace\n);\n\n/**\n * Extract transaction context data from a `sentry-trace` header.\n *\n * @param traceparent Traceparent string\n *\n * @returns Object containing data from the header, or undefined if traceparent string is malformed\n */\nexport function extractTraceparentData(traceparent?: string): TraceparentData | undefined {\n  if (!traceparent) {\n    return undefined;\n  }\n\n  const matches = traceparent.match(TRACEPARENT_REGEXP);\n  if (!matches) {\n    return undefined;\n  }\n\n  let parentSampled: boolean | undefined;\n  if (matches[3] === '1') {\n    parentSampled = true;\n  } else if (matches[3] === '0') {\n    parentSampled = false;\n  }\n\n  return {\n    traceId: matches[1],\n    parentSampled,\n    parentSpanId: matches[2],\n  };\n}\n\n/**\n * Create a propagation context from incoming headers or\n * creates a minimal new one if the headers are undefined.\n */\nexport function propagationContextFromHeaders(\n  sentryTrace: string | undefined,\n  baggage: string | number | boolean | string[] | null | undefined,\n): PropagationContext {\n  const traceparentData = extractTraceparentData(sentryTrace);\n  const dynamicSamplingContext = baggageHeaderToDynamicSamplingContext(baggage);\n\n  if (!traceparentData?.traceId) {\n    return {\n      traceId: generateTraceId(),\n      sampleRand: Math.random(),\n    };\n  }\n\n  const sampleRand = getSampleRandFromTraceparentAndDsc(traceparentData, dynamicSamplingContext);\n\n  // The sample_rand on the DSC needs to be generated based on traceparent + baggage.\n  if (dynamicSamplingContext) {\n    dynamicSamplingContext.sample_rand = sampleRand.toString();\n  }\n\n  const { traceId, parentSpanId, parentSampled } = traceparentData;\n\n  return {\n    traceId,\n    parentSpanId,\n    sampled: parentSampled,\n    dsc: dynamicSamplingContext || {}, // If we have traceparent data but no DSC it means we are not head of trace and we must freeze it\n    sampleRand,\n  };\n}\n\n/**\n * Create sentry-trace header from span context values.\n */\nexport function generateSentryTraceHeader(\n  traceId: string | undefined = generateTraceId(),\n  spanId: string | undefined = generateSpanId(),\n  sampled?: boolean,\n): string {\n  let sampledString = '';\n  if (sampled !== undefined) {\n    sampledString = sampled ? '-1' : '-0';\n  }\n  return `${traceId}-${spanId}${sampledString}`;\n}\n\n/**\n * Given any combination of an incoming trace, generate a sample rand based on its defined semantics.\n *\n * Read more: https://develop.sentry.dev/sdk/telemetry/traces/#propagated-random-value\n */\nfunction getSampleRandFromTraceparentAndDsc(\n  traceparentData: TraceparentData | undefined,\n  dsc: Partial<DynamicSamplingContext> | undefined,\n): number {\n  // When there is an incoming sample rand use it.\n  const parsedSampleRand = parseSampleRate(dsc?.sample_rand);\n  if (parsedSampleRand !== undefined) {\n    return parsedSampleRand;\n  }\n\n  // Otherwise, if there is an incoming sampling decision + sample rate, generate a sample rand that would lead to the same sampling decision.\n  const parsedSampleRate = parseSampleRate(dsc?.sample_rate);\n  if (parsedSampleRate && traceparentData?.parentSampled !== undefined) {\n    return traceparentData.parentSampled\n      ? // Returns a sample rand with positive sampling decision [0, sampleRate)\n        Math.random() * parsedSampleRate\n      : // Returns a sample rand with negative sampling decision [sampleRate, 1)\n        parsedSampleRate + Math.random() * (1 - parsedSampleRate);\n  } else {\n    // If nothing applies, return a random sample rand.\n    return Math.random();\n  }\n}\n", "import { getAsyncContextStrategy } from '../asyncContext';\nimport { getMainCarrier } from '../carrier';\nimport { getCurrentScope } from '../currentScopes';\nimport {\n  SEMANTIC_ATTRIBUTE_SENTRY_CUSTOM_SPAN_NAME,\n  SEMANTIC_ATTRIBUTE_SENTRY_OP,\n  SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN,\n  SEMANTIC_ATTRIBUTE_SENTRY_SOURCE,\n} from '../semanticAttributes';\nimport type { SentrySpan } from '../tracing/sentrySpan';\nimport { SPAN_STATUS_OK, SPAN_STATUS_UNSET } from '../tracing/spanstatus';\nimport { getCapturedScopesOnSpan } from '../tracing/utils';\nimport type { TraceContext } from '../types-hoist/context';\nimport type { SpanLink, SpanLinkJSON } from '../types-hoist/link';\nimport type { Span, SpanAttributes, SpanJSON, SpanOrigin, SpanTimeInput } from '../types-hoist/span';\nimport type { SpanStatus } from '../types-hoist/spanStatus';\nimport { consoleSandbox } from '../utils-hoist/logger';\nimport { addNonEnumerableProperty } from '../utils-hoist/object';\nimport { generateSpanId } from '../utils-hoist/propagationContext';\nimport { timestampInSeconds } from '../utils-hoist/time';\nimport { generateSentryTraceHeader } from '../utils-hoist/tracing';\nimport { _getSpanForScope } from './spanOnScope';\n\n// These are aligned with OpenTelemetry trace flags\nexport const TRACE_FLAG_NONE = 0x0;\nexport const TRACE_FLAG_SAMPLED = 0x1;\n\nlet hasShownSpanDropWarning = false;\n\n/**\n * Convert a span to a trace context, which can be sent as the `trace` context in an event.\n * By default, this will only include trace_id, span_id & parent_span_id.\n * If `includeAllData` is true, it will also include data, op, status & origin.\n */\nexport function spanToTransactionTraceContext(span: Span): TraceContext {\n  const { spanId: span_id, traceId: trace_id } = span.spanContext();\n  const { data, op, parent_span_id, status, origin, links } = spanToJSON(span);\n\n  return {\n    parent_span_id,\n    span_id,\n    trace_id,\n    data,\n    op,\n    status,\n    origin,\n    links,\n  };\n}\n\n/**\n * Convert a span to a trace context, which can be sent as the `trace` context in a non-transaction event.\n */\nexport function spanToTraceContext(span: Span): TraceContext {\n  const { spanId, traceId: trace_id, isRemote } = span.spanContext();\n\n  // If the span is remote, we use a random/virtual span as span_id to the trace context,\n  // and the remote span as parent_span_id\n  const parent_span_id = isRemote ? spanId : spanToJSON(span).parent_span_id;\n  const scope = getCapturedScopesOnSpan(span).scope;\n\n  const span_id = isRemote ? scope?.getPropagationContext().propagationSpanId || generateSpanId() : spanId;\n\n  return {\n    parent_span_id,\n    span_id,\n    trace_id,\n  };\n}\n\n/**\n * Convert a Span to a Sentry trace header.\n */\nexport function spanToTraceHeader(span: Span): string {\n  const { traceId, spanId } = span.spanContext();\n  const sampled = spanIsSampled(span);\n  return generateSentryTraceHeader(traceId, spanId, sampled);\n}\n\n/**\n *  Converts the span links array to a flattened version to be sent within an envelope.\n *\n *  If the links array is empty, it returns `undefined` so the empty value can be dropped before it's sent.\n */\nexport function convertSpanLinksForEnvelope(links?: SpanLink[]): SpanLinkJSON[] | undefined {\n  if (links && links.length > 0) {\n    return links.map(({ context: { spanId, traceId, traceFlags, ...restContext }, attributes }) => ({\n      span_id: spanId,\n      trace_id: traceId,\n      sampled: traceFlags === TRACE_FLAG_SAMPLED,\n      attributes,\n      ...restContext,\n    }));\n  } else {\n    return undefined;\n  }\n}\n\n/**\n * Convert a span time input into a timestamp in seconds.\n */\nexport function spanTimeInputToSeconds(input: SpanTimeInput | undefined): number {\n  if (typeof input === 'number') {\n    return ensureTimestampInSeconds(input);\n  }\n\n  if (Array.isArray(input)) {\n    // See {@link HrTime} for the array-based time format\n    return input[0] + input[1] / 1e9;\n  }\n\n  if (input instanceof Date) {\n    return ensureTimestampInSeconds(input.getTime());\n  }\n\n  return timestampInSeconds();\n}\n\n/**\n * Converts a timestamp to second, if it was in milliseconds, or keeps it as second.\n */\nfunction ensureTimestampInSeconds(timestamp: number): number {\n  const isMs = timestamp > 9999999999;\n  return isMs ? timestamp / 1000 : timestamp;\n}\n\n/**\n * Convert a span to a JSON representation.\n */\n// Note: Because of this, we currently have a circular type dependency (which we opted out of in package.json).\n// This is not avoidable as we need `spanToJSON` in `spanUtils.ts`, which in turn is needed by `span.ts` for backwards compatibility.\n// And `spanToJSON` needs the Span class from `span.ts` to check here.\nexport function spanToJSON(span: Span): SpanJSON {\n  if (spanIsSentrySpan(span)) {\n    return span.getSpanJSON();\n  }\n\n  const { spanId: span_id, traceId: trace_id } = span.spanContext();\n\n  // Handle a span from @opentelemetry/sdk-base-trace's `Span` class\n  if (spanIsOpenTelemetrySdkTraceBaseSpan(span)) {\n    const { attributes, startTime, name, endTime, status, links } = span;\n\n    // In preparation for the next major of OpenTelemetry, we want to support\n    // looking up the parent span id according to the new API\n    // In OTel v1, the parent span id is accessed as `parentSpanId`\n    // In OTel v2, the parent span id is accessed as `spanId` on the `parentSpanContext`\n    const parentSpanId =\n      'parentSpanId' in span\n        ? span.parentSpanId\n        : 'parentSpanContext' in span\n          ? (span.parentSpanContext as { spanId?: string } | undefined)?.spanId\n          : undefined;\n\n    return {\n      span_id,\n      trace_id,\n      data: attributes,\n      description: name,\n      parent_span_id: parentSpanId,\n      start_timestamp: spanTimeInputToSeconds(startTime),\n      // This is [0,0] by default in OTEL, in which case we want to interpret this as no end time\n      timestamp: spanTimeInputToSeconds(endTime) || undefined,\n      status: getStatusMessage(status),\n      op: attributes[SEMANTIC_ATTRIBUTE_SENTRY_OP],\n      origin: attributes[SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN] as SpanOrigin | undefined,\n      links: convertSpanLinksForEnvelope(links),\n    };\n  }\n\n  // Finally, at least we have `spanContext()`....\n  // This should not actually happen in reality, but we need to handle it for type safety.\n  return {\n    span_id,\n    trace_id,\n    start_timestamp: 0,\n    data: {},\n  };\n}\n\nfunction spanIsOpenTelemetrySdkTraceBaseSpan(span: Span): span is OpenTelemetrySdkTraceBaseSpan {\n  const castSpan = span as Partial<OpenTelemetrySdkTraceBaseSpan>;\n  return !!castSpan.attributes && !!castSpan.startTime && !!castSpan.name && !!castSpan.endTime && !!castSpan.status;\n}\n\n/** Exported only for tests. */\nexport interface OpenTelemetrySdkTraceBaseSpan extends Span {\n  attributes: SpanAttributes;\n  startTime: SpanTimeInput;\n  name: string;\n  status: SpanStatus;\n  endTime: SpanTimeInput;\n  parentSpanId?: string;\n  links?: SpanLink[];\n}\n\n/**\n * Sadly, due to circular dependency checks we cannot actually import the Span class here and check for instanceof.\n * :( So instead we approximate this by checking if it has the `getSpanJSON` method.\n */\nfunction spanIsSentrySpan(span: Span): span is SentrySpan {\n  return typeof (span as SentrySpan).getSpanJSON === 'function';\n}\n\n/**\n * Returns true if a span is sampled.\n * In most cases, you should just use `span.isRecording()` instead.\n * However, this has a slightly different semantic, as it also returns false if the span is finished.\n * So in the case where this distinction is important, use this method.\n */\nexport function spanIsSampled(span: Span): boolean {\n  // We align our trace flags with the ones OpenTelemetry use\n  // So we also check for sampled the same way they do.\n  const { traceFlags } = span.spanContext();\n  return traceFlags === TRACE_FLAG_SAMPLED;\n}\n\n/** Get the status message to use for a JSON representation of a span. */\nexport function getStatusMessage(status: SpanStatus | undefined): string | undefined {\n  if (!status || status.code === SPAN_STATUS_UNSET) {\n    return undefined;\n  }\n\n  if (status.code === SPAN_STATUS_OK) {\n    return 'ok';\n  }\n\n  return status.message || 'unknown_error';\n}\n\nconst CHILD_SPANS_FIELD = '_sentryChildSpans';\nconst ROOT_SPAN_FIELD = '_sentryRootSpan';\n\ntype SpanWithPotentialChildren = Span & {\n  [CHILD_SPANS_FIELD]?: Set<Span>;\n  [ROOT_SPAN_FIELD]?: Span;\n};\n\n/**\n * Adds an opaque child span reference to a span.\n */\nexport function addChildSpanToSpan(span: SpanWithPotentialChildren, childSpan: Span): void {\n  // We store the root span reference on the child span\n  // We need this for `getRootSpan()` to work\n  const rootSpan = span[ROOT_SPAN_FIELD] || span;\n  addNonEnumerableProperty(childSpan as SpanWithPotentialChildren, ROOT_SPAN_FIELD, rootSpan);\n\n  // We store a list of child spans on the parent span\n  // We need this for `getSpanDescendants()` to work\n  if (span[CHILD_SPANS_FIELD]) {\n    span[CHILD_SPANS_FIELD].add(childSpan);\n  } else {\n    addNonEnumerableProperty(span, CHILD_SPANS_FIELD, new Set([childSpan]));\n  }\n}\n\n/** This is only used internally by Idle Spans. */\nexport function removeChildSpanFromSpan(span: SpanWithPotentialChildren, childSpan: Span): void {\n  if (span[CHILD_SPANS_FIELD]) {\n    span[CHILD_SPANS_FIELD].delete(childSpan);\n  }\n}\n\n/**\n * Returns an array of the given span and all of its descendants.\n */\nexport function getSpanDescendants(span: SpanWithPotentialChildren): Span[] {\n  const resultSet = new Set<Span>();\n\n  function addSpanChildren(span: SpanWithPotentialChildren): void {\n    // This exit condition is required to not infinitely loop in case of a circular dependency.\n    if (resultSet.has(span)) {\n      return;\n      // We want to ignore unsampled spans (e.g. non recording spans)\n    } else if (spanIsSampled(span)) {\n      resultSet.add(span);\n      const childSpans = span[CHILD_SPANS_FIELD] ? Array.from(span[CHILD_SPANS_FIELD]) : [];\n      for (const childSpan of childSpans) {\n        addSpanChildren(childSpan);\n      }\n    }\n  }\n\n  addSpanChildren(span);\n\n  return Array.from(resultSet);\n}\n\n/**\n * Returns the root span of a given span.\n */\nexport function getRootSpan(span: SpanWithPotentialChildren): Span {\n  return span[ROOT_SPAN_FIELD] || span;\n}\n\n/**\n * Returns the currently active span.\n */\nexport function getActiveSpan(): Span | undefined {\n  const carrier = getMainCarrier();\n  const acs = getAsyncContextStrategy(carrier);\n  if (acs.getActiveSpan) {\n    return acs.getActiveSpan();\n  }\n\n  return _getSpanForScope(getCurrentScope());\n}\n\n/**\n * Logs a warning once if `beforeSendSpan` is used to drop spans.\n */\nexport function showSpanDropWarning(): void {\n  if (!hasShownSpanDropWarning) {\n    consoleSandbox(() => {\n      // eslint-disable-next-line no-console\n      console.warn(\n        '[Sentry] Returning null from `beforeSendSpan` is disallowed. To drop certain spans, configure the respective integrations directly.',\n      );\n    });\n    hasShownSpanDropWarning = true;\n  }\n}\n\n/**\n * Updates the name of the given span and ensures that the span name is not\n * overwritten by the Sentry SDK.\n *\n * Use this function instead of `span.updateName()` if you want to make sure that\n * your name is kept. For some spans, for example root `http.server` spans the\n * Sentry SDK would otherwise overwrite the span name with a high-quality name\n * it infers when the span ends.\n *\n * Use this function in server code or when your span is started on the server\n * and on the client (browser). If you only update a span name on the client,\n * you can also use `span.updateName()` the SDK does not overwrite the name.\n *\n * @param span - The span to update the name of.\n * @param name - The name to set on the span.\n */\nexport function updateSpanName(span: Span, name: string): void {\n  span.updateName(name);\n  span.setAttributes({\n    [SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: 'custom',\n    [SEMANTIC_ATTRIBUTE_SENTRY_CUSTOM_SPAN_NAME]: name,\n  });\n}\n", "import type { Event } from '../types-hoist/event';\nimport type { StackFrame } from '../types-hoist/stackframe';\nimport type { StackLineParser, StackParser } from '../types-hoist/stacktrace';\n\nconst STACKTRACE_FRAME_LIMIT = 50;\nexport const UNKNOWN_FUNCTION = '?';\n// Used to sanitize webpack (error: *) wrapped stack errors\nconst WEBPACK_ERROR_REGEXP = /\\(error: (.*)\\)/;\nconst STRIP_FRAME_REGEXP = /captureMessage|captureException/;\n\n/**\n * Creates a stack parser with the supplied line parsers\n *\n * StackFrames are returned in the correct order for Sentry Exception\n * frames and with Sentry SDK internal frames removed from the top and bottom\n *\n */\nexport function createStackParser(...parsers: StackLineParser[]): StackParser {\n  const sortedParsers = parsers.sort((a, b) => a[0] - b[0]).map(p => p[1]);\n\n  return (stack: string, skipFirstLines: number = 0, framesToPop: number = 0): StackFrame[] => {\n    const frames: StackFrame[] = [];\n    const lines = stack.split('\\n');\n\n    for (let i = skipFirstLines; i < lines.length; i++) {\n      const line = lines[i] as string;\n      // Ignore lines over 1kb as they are unlikely to be stack frames.\n      // Many of the regular expressions use backtracking which results in run time that increases exponentially with\n      // input size. Huge strings can result in hangs/Denial of Service:\n      // https://github.com/getsentry/sentry-javascript/issues/2286\n      if (line.length > 1024) {\n        continue;\n      }\n\n      // https://github.com/getsentry/sentry-javascript/issues/5459\n      // Remove webpack (error: *) wrappers\n      const cleanedLine = WEBPACK_ERROR_REGEXP.test(line) ? line.replace(WEBPACK_ERROR_REGEXP, '$1') : line;\n\n      // https://github.com/getsentry/sentry-javascript/issues/7813\n      // Skip Error: lines\n      if (cleanedLine.match(/\\S*Error: /)) {\n        continue;\n      }\n\n      for (const parser of sortedParsers) {\n        const frame = parser(cleanedLine);\n\n        if (frame) {\n          frames.push(frame);\n          break;\n        }\n      }\n\n      if (frames.length >= STACKTRACE_FRAME_LIMIT + framesToPop) {\n        break;\n      }\n    }\n\n    return stripSentryFramesAndReverse(frames.slice(framesToPop));\n  };\n}\n\n/**\n * Gets a stack parser implementation from Options.stackParser\n * @see Options\n *\n * If options contains an array of line parsers, it is converted into a parser\n */\nexport function stackParserFromStackParserOptions(stackParser: StackParser | StackLineParser[]): StackParser {\n  if (Array.isArray(stackParser)) {\n    return createStackParser(...stackParser);\n  }\n  return stackParser;\n}\n\n/**\n * Removes Sentry frames from the top and bottom of the stack if present and enforces a limit of max number of frames.\n * Assumes stack input is ordered from top to bottom and returns the reverse representation so call site of the\n * function that caused the crash is the last frame in the array.\n * @hidden\n */\nexport function stripSentryFramesAndReverse(stack: ReadonlyArray<StackFrame>): StackFrame[] {\n  if (!stack.length) {\n    return [];\n  }\n\n  const localStack = Array.from(stack);\n\n  // If stack starts with one of our API calls, remove it (starts, meaning it's the top of the stack - aka last call)\n  if (/sentryWrapped/.test(getLastStackFrame(localStack).function || '')) {\n    localStack.pop();\n  }\n\n  // Reversing in the middle of the procedure allows us to just pop the values off the stack\n  localStack.reverse();\n\n  // If stack ends with one of our internal API calls, remove it (ends, meaning it's the bottom of the stack - aka top-most call)\n  if (STRIP_FRAME_REGEXP.test(getLastStackFrame(localStack).function || '')) {\n    localStack.pop();\n\n    // When using synthetic events, we will have a 2 levels deep stack, as `new Error('Sentry syntheticException')`\n    // is produced within the scope itself, making it:\n    //\n    //   Sentry.captureException()\n    //   scope.captureException()\n    //\n    // instead of just the top `Sentry` call itself.\n    // This forces us to possibly strip an additional frame in the exact same was as above.\n    if (STRIP_FRAME_REGEXP.test(getLastStackFrame(localStack).function || '')) {\n      localStack.pop();\n    }\n  }\n\n  return localStack.slice(0, STACKTRACE_FRAME_LIMIT).map(frame => ({\n    ...frame,\n    filename: frame.filename || getLastStackFrame(localStack).filename,\n    function: frame.function || UNKNOWN_FUNCTION,\n  }));\n}\n\nfunction getLastStackFrame(arr: StackFrame[]): StackFrame {\n  return arr[arr.length - 1] || {};\n}\n\nconst defaultFunctionName = '<anonymous>';\n\n/**\n * Safely extract function name from itself\n */\nexport function getFunctionName(fn: unknown): string {\n  try {\n    if (!fn || typeof fn !== 'function') {\n      return defaultFunctionName;\n    }\n    return fn.name || defaultFunctionName;\n  } catch (e) {\n    // Just accessing custom props in some Selenium environments\n    // can cause a \"Permission denied\" exception (see raven-js#495).\n    return defaultFunctionName;\n  }\n}\n\n/**\n * Get's stack frames from an event without needing to check for undefined properties.\n */\nexport function getFramesFromEvent(event: Event): StackFrame[] | undefined {\n  const exception = event.exception;\n\n  if (exception) {\n    const frames: StackFrame[] = [];\n    try {\n      // @ts-expect-error Object could be undefined\n      exception.values.forEach(value => {\n        // @ts-expect-error Value could be undefined\n        if (value.stacktrace.frames) {\n          // @ts-expect-error Value could be undefined\n          frames.push(...value.stacktrace.frames);\n        }\n      });\n      return frames;\n    } catch (_oO) {\n      return undefined;\n    }\n  }\n  return undefined;\n}\n", "import { DEBUG_BUILD } from '../../debug-build';\nimport { logger } from '../logger';\nimport { getFunctionName } from '../stacktrace';\n\nexport type InstrumentHandlerType =\n  | 'console'\n  | 'dom'\n  | 'fetch'\n  | 'fetch-body-resolved'\n  | 'history'\n  | 'xhr'\n  | 'error'\n  | 'unhandledrejection';\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type InstrumentHandlerCallback = (data: any) => void;\n\n// We keep the handlers globally\nconst handlers: { [key in InstrumentHandlerType]?: InstrumentHandlerCallback[] } = {};\nconst instrumented: { [key in InstrumentHandlerType]?: boolean } = {};\n\n/** Add a handler function. */\nexport function addHandler(type: InstrumentHandlerType, handler: InstrumentHandlerCallback): void {\n  handlers[type] = handlers[type] || [];\n  (handlers[type] as InstrumentHandlerCallback[]).push(handler);\n}\n\n/**\n * Reset all instrumentation handlers.\n * This can be used by tests to ensure we have a clean slate of instrumentation handlers.\n */\nexport function resetInstrumentationHandlers(): void {\n  Object.keys(handlers).forEach(key => {\n    handlers[key as InstrumentHandlerType] = undefined;\n  });\n}\n\n/** Maybe run an instrumentation function, unless it was already called. */\nexport function maybeInstrument(type: InstrumentHandlerType, instrumentFn: () => void): void {\n  if (!instrumented[type]) {\n    instrumented[type] = true;\n    try {\n      instrumentFn();\n    } catch (e) {\n      DEBUG_BUILD && logger.error(`Error while instrumenting ${type}`, e);\n    }\n  }\n}\n\n/** Trigger handlers for a given instrumentation type. */\nexport function triggerHandlers(type: InstrumentHandlerType, data: unknown): void {\n  const typeHandlers = type && handlers[type];\n  if (!typeHandlers) {\n    return;\n  }\n\n  for (const handler of typeHandlers) {\n    try {\n      handler(data);\n    } catch (e) {\n      DEBUG_BUILD &&\n        logger.error(\n          `Error while triggering instrumentation handler.\\nType: ${type}\\nName: ${getFunctionName(handler)}\\nError:`,\n          e,\n        );\n    }\n  }\n}\n", "import type { HandlerDataError } from '../../types-hoist/instrument';\nimport { GLOBAL_OBJ } from '../worldwide';\nimport { addHandler, maybeInstrument, triggerHandlers } from './handlers';\n\nlet _oldOnErrorHandler: (typeof GLOBAL_OBJ)['onerror'] | null = null;\n\n/**\n * Add an instrumentation handler for when an error is captured by the global error handler.\n *\n * Use at your own risk, this might break without changelog notice, only used internally.\n * @hidden\n */\nexport function addGlobalErrorInstrumentationHandler(handler: (data: HandlerDataError) => void): void {\n  const type = 'error';\n  addHandler(type, handler);\n  maybeInstrument(type, instrumentError);\n}\n\nfunction instrumentError(): void {\n  _oldOnErrorHandler = GLOBAL_OBJ.onerror;\n\n  // Note: The reason we are doing window.onerror instead of window.addEventListener('error')\n  // is that we are using this handler in the Loader Script, to handle buffered errors consistently\n  GLOBAL_OBJ.onerror = function (\n    msg: string | object,\n    url?: string,\n    line?: number,\n    column?: number,\n    error?: Error,\n  ): boolean {\n    const handlerData: HandlerDataError = {\n      column,\n      error,\n      line,\n      msg,\n      url,\n    };\n    triggerHandlers('error', handlerData);\n\n    if (_oldOnErrorHandler) {\n      // eslint-disable-next-line prefer-rest-params\n      return _oldOnErrorHandler.apply(this, arguments);\n    }\n\n    return false;\n  };\n\n  GLOBAL_OBJ.onerror.__SENTRY_INSTRUMENTED__ = true;\n}\n", "import type { HandlerDataUnhandledRejection } from '../../types-hoist/instrument';\nimport { GLOBAL_OBJ } from '../worldwide';\nimport { addHandler, maybeInstrument, triggerHandlers } from './handlers';\n\nlet _oldOnUnhandledRejectionHandler: (typeof GLOBAL_OBJ)['onunhandledrejection'] | null = null;\n\n/**\n * Add an instrumentation handler for when an unhandled promise rejection is captured.\n *\n * Use at your own risk, this might break without changelog notice, only used internally.\n * @hidden\n */\nexport function addGlobalUnhandledRejectionInstrumentationHandler(\n  handler: (data: HandlerDataUnhandledRejection) => void,\n): void {\n  const type = 'unhandledrejection';\n  addHandler(type, handler);\n  maybeInstrument(type, instrumentUnhandledRejection);\n}\n\nfunction instrumentUnhandledRejection(): void {\n  _oldOnUnhandledRejectionHandler = GLOBAL_OBJ.onunhandledrejection;\n\n  // Note: The reason we are doing window.onunhandledrejection instead of window.addEventListener('unhandledrejection')\n  // is that we are using this handler in the Loader Script, to handle buffered rejections consistently\n  GLOBAL_OBJ.onunhandledrejection = function (e: unknown): boolean {\n    const handlerData: HandlerDataUnhandledRejection = e;\n    triggerHandlers('unhandledrejection', handlerData);\n\n    if (_oldOnUnhandledRejectionHandler) {\n      // eslint-disable-next-line prefer-rest-params\n      return _oldOnUnhandledRejectionHandler.apply(this, arguments);\n    }\n\n    return true;\n  };\n\n  GLOBAL_OBJ.onunhandledrejection.__SENTRY_INSTRUMENTED__ = true;\n}\n", "import { DEBUG_BUILD } from '../debug-build';\nimport { getActiveSpan, getRootSpan } from '../utils/spanUtils';\nimport { addGlobalErrorInstrumentationHandler } from '../utils-hoist/instrument/globalError';\nimport { addGlobalUnhandledRejectionInstrumentationHandler } from '../utils-hoist/instrument/globalUnhandledRejection';\nimport { logger } from '../utils-hoist/logger';\nimport { SPAN_STATUS_ERROR } from './spanstatus';\n\nlet errorsInstrumented = false;\n\n/**  Only exposed for testing */\nexport function _resetErrorsInstrumented(): void {\n  errorsInstrumented = false;\n}\n\n/**\n * Ensure that global errors automatically set the active span status.\n */\nexport function registerSpanErrorInstrumentation(): void {\n  if (errorsInstrumented) {\n    return;\n  }\n\n  errorsInstrumented = true;\n  addGlobalErrorInstrumentationHandler(errorCallback);\n  addGlobalUnhandledRejectionInstrumentationHandler(errorCallback);\n}\n\n/**\n * If an error or unhandled promise occurs, we mark the active root span as failed\n */\nfunction errorCallback(): void {\n  const activeSpan = getActiveSpan();\n  const rootSpan = activeSpan && getRootSpan(activeSpan);\n  if (rootSpan) {\n    const message = 'internal_error';\n    DEBUG_BUILD && logger.log(`[Tracing] Root span: ${message} -> Global error occurred`);\n    rootSpan.setStatus({ code: SPAN_STATUS_ERROR, message });\n  }\n}\n\n// The function name will be lost when bundling but we need to be able to identify this listener later to maintain the\n// node.js default exit behaviour\nerrorCallback.tag = 'sentry_tracingErrorCallback';\n", "import { getClient } from '../currentScopes';\nimport type { Options } from '../types-hoist/options';\n\n// Treeshakable guard to remove all code related to tracing\ndeclare const __SENTRY_TRACING__: boolean | undefined;\n\n/**\n * Determines if span recording is currently enabled.\n *\n * Spans are recorded when at least one of `tracesSampleRate` and `tracesSampler`\n * is defined in the SDK config. This function does not make any assumption about\n * sampling decisions, it only checks if the SDK is configured to record spans.\n *\n * Important: This function only determines if span recording is enabled. Trace\n * continuation and propagation is separately controlled and not covered by this function.\n * If this function returns `false`, traces can still be propagated (which is what\n * we refer to by \"Tracing without Performance\")\n * @see https://develop.sentry.dev/sdk/telemetry/traces/tracing-without-performance/\n *\n * @param maybeOptions An SDK options object to be passed to this function.\n * If this option is not provided, the function will use the current client's options.\n */\nexport function hasSpansEnabled(\n  maybeOptions?: Pick<Options, 'tracesSampleRate' | 'tracesSampler'> | undefined,\n): boolean {\n  if (typeof __SENTRY_TRACING__ === 'boolean' && !__SENTRY_TRACING__) {\n    return false;\n  }\n\n  const options = maybeOptions || getClient()?.getOptions();\n  return (\n    !!options &&\n    // Note: This check is `!= null`, meaning \"nullish\". `0` is not \"nullish\", `undefined` and `null` are. (This comment was brought to you by 15 minutes of questioning life)\n    (options.tracesSampleRate != null || !!options.tracesSampler)\n  );\n}\n\n/**\n * @see JSDoc of `hasSpansEnabled`\n * @deprecated Use `hasSpansEnabled` instead, which is a more accurately named version of this function.\n * This function will be removed in the next major version of the SDK.\n */\n// TODO(v10): Remove this export\nexport const hasTracingEnabled = hasSpansEnabled;\n", "export const DEFAULT_ENVIRONMENT = 'production';\n", "import type { Client } from '../client';\nimport { DEFAULT_ENVIRONMENT } from '../constants';\nimport { getClient } from '../currentScopes';\nimport type { Scope } from '../scope';\nimport {\n  SEMANTIC_ATTRIBUTE_SENTRY_PREVIOUS_TRACE_SAMPLE_RATE,\n  SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE,\n  SEMANTIC_ATTRIBUTE_SENTRY_SOURCE,\n} from '../semanticAttributes';\nimport type { DynamicSamplingContext } from '../types-hoist/envelope';\nimport type { Span } from '../types-hoist/span';\nimport { hasSpansEnabled } from '../utils/hasSpansEnabled';\nimport { getRootSpan, spanIsSampled, spanToJSON } from '../utils/spanUtils';\nimport {\n  baggageHeaderToDynamicSamplingContext,\n  dynamicSamplingContextToSentryBaggageHeader,\n} from '../utils-hoist/baggage';\nimport { addNonEnumerableProperty } from '../utils-hoist/object';\nimport { getCapturedScopesOnSpan } from './utils';\n\n/**\n * If you change this value, also update the terser plugin config to\n * avoid minification of the object property!\n */\nconst FROZEN_DSC_FIELD = '_frozenDsc';\n\ntype SpanWithMaybeDsc = Span & {\n  [FROZEN_DSC_FIELD]?: Partial<DynamicSamplingContext> | undefined;\n};\n\n/**\n * Freeze the given DSC on the given span.\n */\nexport function freezeDscOnSpan(span: Span, dsc: Partial<DynamicSamplingContext>): void {\n  const spanWithMaybeDsc = span as SpanWithMaybeDsc;\n  addNonEnumerableProperty(spanWithMaybeDsc, FROZEN_DSC_FIELD, dsc);\n}\n\n/**\n * Creates a dynamic sampling context from a client.\n *\n * Dispatches the `createDsc` lifecycle hook as a side effect.\n */\nexport function getDynamicSamplingContextFromClient(trace_id: string, client: Client): DynamicSamplingContext {\n  const options = client.getOptions();\n\n  const { publicKey: public_key } = client.getDsn() || {};\n\n  // Instead of conditionally adding non-undefined values, we add them and then remove them if needed\n  // otherwise, the order of baggage entries changes, which \"breaks\" a bunch of tests etc.\n  const dsc: DynamicSamplingContext = {\n    environment: options.environment || DEFAULT_ENVIRONMENT,\n    release: options.release,\n    public_key,\n    trace_id,\n  };\n\n  client.emit('createDsc', dsc);\n\n  return dsc;\n}\n\n/**\n * Get the dynamic sampling context for the currently active scopes.\n */\nexport function getDynamicSamplingContextFromScope(client: Client, scope: Scope): Partial<DynamicSamplingContext> {\n  const propagationContext = scope.getPropagationContext();\n  return propagationContext.dsc || getDynamicSamplingContextFromClient(propagationContext.traceId, client);\n}\n\n/**\n * Creates a dynamic sampling context from a span (and client and scope)\n *\n * @param span the span from which a few values like the root span name and sample rate are extracted.\n *\n * @returns a dynamic sampling context\n */\nexport function getDynamicSamplingContextFromSpan(span: Span): Readonly<Partial<DynamicSamplingContext>> {\n  const client = getClient();\n  if (!client) {\n    return {};\n  }\n\n  const rootSpan = getRootSpan(span);\n  const rootSpanJson = spanToJSON(rootSpan);\n  const rootSpanAttributes = rootSpanJson.data;\n  const traceState = rootSpan.spanContext().traceState;\n\n  // The span sample rate that was locally applied to the root span should also always be applied to the DSC, even if the DSC is frozen.\n  // This is so that the downstream traces/services can use parentSampleRate in their `tracesSampler` to make consistent sampling decisions across the entire trace.\n  const rootSpanSampleRate =\n    traceState?.get('sentry.sample_rate') ??\n    rootSpanAttributes[SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE] ??\n    rootSpanAttributes[SEMANTIC_ATTRIBUTE_SENTRY_PREVIOUS_TRACE_SAMPLE_RATE];\n\n  function applyLocalSampleRateToDsc(dsc: Partial<DynamicSamplingContext>): Partial<DynamicSamplingContext> {\n    if (typeof rootSpanSampleRate === 'number' || typeof rootSpanSampleRate === 'string') {\n      dsc.sample_rate = `${rootSpanSampleRate}`;\n    }\n    return dsc;\n  }\n\n  // For core implementation, we freeze the DSC onto the span as a non-enumerable property\n  const frozenDsc = (rootSpan as SpanWithMaybeDsc)[FROZEN_DSC_FIELD];\n  if (frozenDsc) {\n    return applyLocalSampleRateToDsc(frozenDsc);\n  }\n\n  // For OpenTelemetry, we freeze the DSC on the trace state\n  const traceStateDsc = traceState?.get('sentry.dsc');\n\n  // If the span has a DSC, we want it to take precedence\n  const dscOnTraceState = traceStateDsc && baggageHeaderToDynamicSamplingContext(traceStateDsc);\n\n  if (dscOnTraceState) {\n    return applyLocalSampleRateToDsc(dscOnTraceState);\n  }\n\n  // Else, we generate it from the span\n  const dsc = getDynamicSamplingContextFromClient(span.spanContext().traceId, client);\n\n  // We don't want to have a transaction name in the DSC if the source is \"url\" because URLs might contain PII\n  const source = rootSpanAttributes[SEMANTIC_ATTRIBUTE_SENTRY_SOURCE];\n\n  // after JSON conversion, txn.name becomes jsonSpan.description\n  const name = rootSpanJson.description;\n  if (source !== 'url' && name) {\n    dsc.transaction = name;\n  }\n\n  // How can we even land here with hasSpansEnabled() returning false?\n  // Otel creates a Non-recording span in Tracing Without Performance mode when handling incoming requests\n  // So we end up with an active span that is not sampled (neither positively nor negatively)\n  if (hasSpansEnabled()) {\n    dsc.sampled = String(spanIsSampled(rootSpan));\n    dsc.sample_rand =\n      // In OTEL we store the sample rand on the trace state because we cannot access scopes for NonRecordingSpans\n      // The Sentry OTEL SpanSampler takes care of writing the sample rand on the root span\n      traceState?.get('sentry.sample_rand') ??\n      // On all other platforms we can actually get the scopes from a root span (we use this as a fallback)\n      getCapturedScopesOnSpan(rootSpan).scope?.getPropagationContext().sampleRand.toString();\n  }\n\n  applyLocalSampleRateToDsc(dsc);\n\n  client.emit('createDsc', dsc, rootSpan);\n\n  return dsc;\n}\n\n/**\n * Convert a Span to a baggage header.\n */\nexport function spanToBaggageHeader(span: Span): string | undefined {\n  const dsc = getDynamicSamplingContextFromSpan(span);\n  return dynamicSamplingContextToSentryBaggageHeader(dsc);\n}\n", "import { isThenable } from '../utils-hoist/is';\n\n/**\n * Wrap a callback function with error handling.\n * If an error is thrown, it will be passed to the `onError` callback and re-thrown.\n *\n * If the return value of the function is a promise, it will be handled with `maybeHandlePromiseRejection`.\n *\n * If an `onFinally` callback is provided, this will be called when the callback has finished\n * - so if it returns a promise, once the promise resolved/rejected,\n * else once the callback has finished executing.\n * The `onFinally` callback will _always_ be called, no matter if an error was thrown or not.\n */\nexport function handleCallbackErrors<\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  Fn extends () => any,\n>(\n  fn: Fn,\n  onError: (error: unknown) => void,\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  onFinally: () => void = () => {},\n): ReturnType<Fn> {\n  let maybePromiseResult: ReturnType<Fn>;\n  try {\n    maybePromiseResult = fn();\n  } catch (e) {\n    onError(e);\n    onFinally();\n    throw e;\n  }\n\n  return maybeHandlePromiseRejection(maybePromiseResult, onError, onFinally);\n}\n\n/**\n * Maybe handle a promise rejection.\n * This expects to be given a value that _may_ be a promise, or any other value.\n * If it is a promise, and it rejects, it will call the `onError` callback.\n * Other than this, it will generally return the given value as-is.\n */\nfunction maybeHandlePromiseRejection<MaybePromise>(\n  value: MaybePromise,\n  onError: (error: unknown) => void,\n  onFinally: () => void,\n): MaybePromise {\n  if (isThenable(value)) {\n    // @ts-expect-error - the isThenable check returns the \"wrong\" type here\n    return value.then(\n      res => {\n        onFinally();\n        return res;\n      },\n      e => {\n        onError(e);\n        onFinally();\n        throw e;\n      },\n    );\n  }\n\n  onFinally();\n  return value;\n}\n", "import { DEBUG_BUILD } from '../debug-build';\nimport type { Span } from '../types-hoist/span';\nimport { getRootSpan, spanIsSampled, spanToJSON } from '../utils/spanUtils';\nimport { logger } from '../utils-hoist/logger';\n\n/**\n * Print a log message for a started span.\n */\nexport function logSpanStart(span: Span): void {\n  if (!DEBUG_BUILD) return;\n\n  const { description = '< unknown name >', op = '< unknown op >', parent_span_id: parentSpanId } = spanToJSON(span);\n  const { spanId } = span.spanContext();\n\n  const sampled = spanIsSampled(span);\n  const rootSpan = getRootSpan(span);\n  const isRootSpan = rootSpan === span;\n\n  const header = `[Tracing] Starting ${sampled ? 'sampled' : 'unsampled'} ${isRootSpan ? 'root ' : ''}span`;\n\n  const infoParts: string[] = [`op: ${op}`, `name: ${description}`, `ID: ${spanId}`];\n\n  if (parentSpanId) {\n    infoParts.push(`parent ID: ${parentSpanId}`);\n  }\n\n  if (!isRootSpan) {\n    const { op, description } = spanToJSON(rootSpan);\n    infoParts.push(`root ID: ${rootSpan.spanContext().spanId}`);\n    if (op) {\n      infoParts.push(`root op: ${op}`);\n    }\n    if (description) {\n      infoParts.push(`root description: ${description}`);\n    }\n  }\n\n  logger.log(`${header}\n  ${infoParts.join('\\n  ')}`);\n}\n\n/**\n * Print a log message for an ended span.\n */\nexport function logSpanEnd(span: Span): void {\n  if (!DEBUG_BUILD) return;\n\n  const { description = '< unknown name >', op = '< unknown op >' } = spanToJSON(span);\n  const { spanId } = span.spanContext();\n  const rootSpan = getRootSpan(span);\n  const isRootSpan = rootSpan === span;\n\n  const msg = `[Tracing] Finishing \"${op}\" ${isRootSpan ? 'root ' : ''}span \"${description}\" with ID ${spanId}`;\n  logger.log(msg);\n}\n", "import { DEBUG_BUILD } from '../debug-build';\nimport type { Options } from '../types-hoist/options';\nimport type { SamplingContext } from '../types-hoist/samplingcontext';\nimport { hasSpansEnabled } from '../utils/hasSpansEnabled';\nimport { parseSampleRate } from '../utils/parseSampleRate';\nimport { logger } from '../utils-hoist/logger';\n\n/**\n * Makes a sampling decision for the given options.\n *\n * Called every time a root span is created. Only root spans which emerge with a `sampled` value of `true` will be\n * sent to Sentry.\n */\nexport function sampleSpan(\n  options: Pick<Options, 'tracesSampleRate' | 'tracesSampler'>,\n  samplingContext: SamplingContext,\n  sampleRand: number,\n): [sampled: boolean, sampleRate?: number, localSampleRateWasApplied?: boolean] {\n  // nothing to do if span recording is not enabled\n  if (!hasSpansEnabled(options)) {\n    return [false];\n  }\n\n  let localSampleRateWasApplied = undefined;\n\n  // we would have bailed already if neither `tracesSampler` nor `tracesSampleRate` were defined, so one of these should\n  // work; prefer the hook if so\n  let sampleRate;\n  if (typeof options.tracesSampler === 'function') {\n    sampleRate = options.tracesSampler({\n      ...samplingContext,\n      inheritOrSampleWith: fallbackSampleRate => {\n        // If we have an incoming parent sample rate, we'll just use that one.\n        // The sampling decision will be inherited because of the sample_rand that was generated when the trace reached the incoming boundaries of the SDK.\n        if (typeof samplingContext.parentSampleRate === 'number') {\n          return samplingContext.parentSampleRate;\n        }\n\n        // Fallback if parent sample rate is not on the incoming trace (e.g. if there is no baggage)\n        // This is to provide backwards compatibility if there are incoming traces from older SDKs that don't send a parent sample rate or a sample rand. In these cases we just want to force either a sampling decision on the downstream traces via the sample rate.\n        if (typeof samplingContext.parentSampled === 'boolean') {\n          return Number(samplingContext.parentSampled);\n        }\n\n        return fallbackSampleRate;\n      },\n    });\n    localSampleRateWasApplied = true;\n  } else if (samplingContext.parentSampled !== undefined) {\n    sampleRate = samplingContext.parentSampled;\n  } else if (typeof options.tracesSampleRate !== 'undefined') {\n    sampleRate = options.tracesSampleRate;\n    localSampleRateWasApplied = true;\n  }\n\n  // Since this is coming from the user (or from a function provided by the user), who knows what we might get.\n  // (The only valid values are booleans or numbers between 0 and 1.)\n  const parsedSampleRate = parseSampleRate(sampleRate);\n\n  if (parsedSampleRate === undefined) {\n    DEBUG_BUILD &&\n      logger.warn(\n        `[Tracing] Discarding root span because of invalid sample rate. Sample rate must be a boolean or a number between 0 and 1. Got ${JSON.stringify(\n          sampleRate,\n        )} of type ${JSON.stringify(typeof sampleRate)}.`,\n      );\n    return [false];\n  }\n\n  // if the function returned 0 (or false), or if `tracesSampleRate` is 0, it's a sign the transaction should be dropped\n  if (!parsedSampleRate) {\n    DEBUG_BUILD &&\n      logger.log(\n        `[Tracing] Discarding transaction because ${\n          typeof options.tracesSampler === 'function'\n            ? 'tracesSampler returned 0 or false'\n            : 'a negative sampling decision was inherited or tracesSampleRate is set to 0'\n        }`,\n      );\n    return [false, parsedSampleRate, localSampleRateWasApplied];\n  }\n\n  // We always compare the sample rand for the current execution context against the chosen sample rate.\n  // Read more: https://develop.sentry.dev/sdk/telemetry/traces/#propagated-random-value\n  const shouldSample = sampleRand < parsedSampleRate;\n\n  // if we're not going to keep it, we're done\n  if (!shouldSample) {\n    DEBUG_BUILD &&\n      logger.log(\n        `[Tracing] Discarding transaction because it's not included in the random sample (sampling rate = ${Number(\n          sampleRate,\n        )})`,\n      );\n  }\n\n  return [shouldSample, parsedSampleRate, localSampleRateWasApplied];\n}\n", "import type { DsnComponents, DsnLike, DsnProtocol } from '../types-hoist/dsn';\nimport { DEBUG_BUILD } from './../debug-build';\nimport { consoleSandbox, logger } from './logger';\n\n/** Regular expression used to parse a Dsn. */\nconst DSN_REGEX = /^(?:(\\w+):)\\/\\/(?:(\\w+)(?::(\\w+)?)?@)([\\w.-]+)(?::(\\d+))?\\/(.+)/;\n\nfunction isValidProtocol(protocol?: string): protocol is DsnProtocol {\n  return protocol === 'http' || protocol === 'https';\n}\n\n/**\n * Renders the string representation of this Dsn.\n *\n * By default, this will render the public representation without the password\n * component. To get the deprecated private representation, set `withPassword`\n * to true.\n *\n * @param withPassword When set to true, the password will be included.\n */\nexport function dsnToString(dsn: DsnComponents, withPassword: boolean = false): string {\n  const { host, path, pass, port, projectId, protocol, publicKey } = dsn;\n  return (\n    `${protocol}://${publicKey}${withPassword && pass ? `:${pass}` : ''}` +\n    `@${host}${port ? `:${port}` : ''}/${path ? `${path}/` : path}${projectId}`\n  );\n}\n\n/**\n * Parses a Dsn from a given string.\n *\n * @param str A Dsn as string\n * @returns Dsn as DsnComponents or undefined if @param str is not a valid DSN string\n */\nexport function dsnFromString(str: string): DsnComponents | undefined {\n  const match = DSN_REGEX.exec(str);\n\n  if (!match) {\n    // This should be logged to the console\n    consoleSandbox(() => {\n      // eslint-disable-next-line no-console\n      console.error(`Invalid Sentry Dsn: ${str}`);\n    });\n    return undefined;\n  }\n\n  const [protocol, publicKey, pass = '', host = '', port = '', lastPath = ''] = match.slice(1);\n  let path = '';\n  let projectId = lastPath;\n\n  const split = projectId.split('/');\n  if (split.length > 1) {\n    path = split.slice(0, -1).join('/');\n    projectId = split.pop() as string;\n  }\n\n  if (projectId) {\n    const projectMatch = projectId.match(/^\\d+/);\n    if (projectMatch) {\n      projectId = projectMatch[0];\n    }\n  }\n\n  return dsnFromComponents({ host, pass, path, projectId, port, protocol: protocol as DsnProtocol, publicKey });\n}\n\nfunction dsnFromComponents(components: DsnComponents): DsnComponents {\n  return {\n    protocol: components.protocol,\n    publicKey: components.publicKey || '',\n    pass: components.pass || '',\n    host: components.host,\n    port: components.port || '',\n    path: components.path || '',\n    projectId: components.projectId,\n  };\n}\n\nfunction validateDsn(dsn: DsnComponents): boolean {\n  if (!DEBUG_BUILD) {\n    return true;\n  }\n\n  const { port, projectId, protocol } = dsn;\n\n  const requiredComponents: ReadonlyArray<keyof DsnComponents> = ['protocol', 'publicKey', 'host', 'projectId'];\n  const hasMissingRequiredComponent = requiredComponents.find(component => {\n    if (!dsn[component]) {\n      logger.error(`Invalid Sentry Dsn: ${component} missing`);\n      return true;\n    }\n    return false;\n  });\n\n  if (hasMissingRequiredComponent) {\n    return false;\n  }\n\n  if (!projectId.match(/^\\d+$/)) {\n    logger.error(`Invalid Sentry Dsn: Invalid projectId ${projectId}`);\n    return false;\n  }\n\n  if (!isValidProtocol(protocol)) {\n    logger.error(`Invalid Sentry Dsn: Invalid protocol ${protocol}`);\n    return false;\n  }\n\n  if (port && isNaN(parseInt(port, 10))) {\n    logger.error(`Invalid Sentry Dsn: Invalid port ${port}`);\n    return false;\n  }\n\n  return true;\n}\n\n/**\n * Creates a valid Sentry Dsn object, identifying a Sentry instance and project.\n * @returns a valid DsnComponents object or `undefined` if @param from is an invalid DSN source\n */\nexport function makeDsn(from: DsnLike): DsnComponents | undefined {\n  const components = typeof from === 'string' ? dsnFromString(from) : dsnFromComponents(from);\n  if (!components || !validateDsn(components)) {\n    return undefined;\n  }\n  return components;\n}\n", "import type { Primitive } from '../types-hoist/misc';\nimport { isSyntheticEvent, isVueViewModel } from './is';\nimport { convertToPlainObject } from './object';\nimport { getFunctionName } from './stacktrace';\n\ntype Prototype = { constructor?: (...args: unknown[]) => unknown };\n// This is a hack to placate TS, relying on the fact that technically, arrays are objects with integer keys. Normally we\n// think of those keys as actual numbers, but `arr['0']` turns out to work just as well as `arr[0]`, and doing it this\n// way lets us use a single type in the places where behave as if we are only dealing with objects, even if some of them\n// might be arrays.\ntype ObjOrArray<T> = { [key: string]: T };\n\ntype MemoFunc = [\n  // memoize\n  (obj: object) => boolean,\n  // unmemoize\n  (obj: object) => void,\n];\n\n/**\n * Recursively normalizes the given object.\n *\n * - Creates a copy to prevent original input mutation\n * - Skips non-enumerable properties\n * - When stringifying, calls `toJSON` if implemented\n * - Removes circular references\n * - Translates non-serializable values (`undefined`/`NaN`/functions) to serializable format\n * - Translates known global objects/classes to a string representations\n * - Takes care of `Error` object serialization\n * - Optionally limits depth of final output\n * - Optionally limits number of properties/elements included in any single object/array\n *\n * @param input The object to be normalized.\n * @param depth The max depth to which to normalize the object. (Anything deeper stringified whole.)\n * @param maxProperties The max number of elements or properties to be included in any single array or\n * object in the normalized output.\n * @returns A normalized version of the object, or `\"**non-serializable**\"` if any errors are thrown during normalization.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function normalize(input: unknown, depth: number = 100, maxProperties: number = +Infinity): any {\n  try {\n    // since we're at the outermost level, we don't provide a key\n    return visit('', input, depth, maxProperties);\n  } catch (err) {\n    return { ERROR: `**non-serializable** (${err})` };\n  }\n}\n\n/** JSDoc */\nexport function normalizeToSize<T>(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  object: { [key: string]: any },\n  // Default Node.js REPL depth\n  depth: number = 3,\n  // 100kB, as 200kB is max payload size, so half sounds reasonable\n  maxSize: number = 100 * 1024,\n): T {\n  const normalized = normalize(object, depth);\n\n  if (jsonSize(normalized) > maxSize) {\n    return normalizeToSize(object, depth - 1, maxSize);\n  }\n\n  return normalized as T;\n}\n\n/**\n * Visits a node to perform normalization on it\n *\n * @param key The key corresponding to the given node\n * @param value The node to be visited\n * @param depth Optional number indicating the maximum recursion depth\n * @param maxProperties Optional maximum number of properties/elements included in any single object/array\n * @param memo Optional Memo class handling decycling\n */\nfunction visit(\n  key: string,\n  value: unknown,\n  depth: number = +Infinity,\n  maxProperties: number = +Infinity,\n  memo = memoBuilder(),\n): Primitive | ObjOrArray<unknown> {\n  const [memoize, unmemoize] = memo;\n\n  // Get the simple cases out of the way first\n  if (\n    value == null || // this matches null and undefined -> eqeq not eqeqeq\n    ['boolean', 'string'].includes(typeof value) ||\n    (typeof value === 'number' && Number.isFinite(value))\n  ) {\n    return value as Primitive;\n  }\n\n  const stringified = stringifyValue(key, value);\n\n  // Anything we could potentially dig into more (objects or arrays) will have come back as `\"[object XXXX]\"`.\n  // Everything else will have already been serialized, so if we don't see that pattern, we're done.\n  if (!stringified.startsWith('[object ')) {\n    return stringified;\n  }\n\n  // From here on, we can assert that `value` is either an object or an array.\n\n  // Do not normalize objects that we know have already been normalized. As a general rule, the\n  // \"__sentry_skip_normalization__\" property should only be used sparingly and only should only be set on objects that\n  // have already been normalized.\n  if ((value as ObjOrArray<unknown>)['__sentry_skip_normalization__']) {\n    return value as ObjOrArray<unknown>;\n  }\n\n  // We can set `__sentry_override_normalization_depth__` on an object to ensure that from there\n  // We keep a certain amount of depth.\n  // This should be used sparingly, e.g. we use it for the redux integration to ensure we get a certain amount of state.\n  const remainingDepth =\n    typeof (value as ObjOrArray<unknown>)['__sentry_override_normalization_depth__'] === 'number'\n      ? ((value as ObjOrArray<unknown>)['__sentry_override_normalization_depth__'] as number)\n      : depth;\n\n  // We're also done if we've reached the max depth\n  if (remainingDepth === 0) {\n    // At this point we know `serialized` is a string of the form `\"[object XXXX]\"`. Clean it up so it's just `\"[XXXX]\"`.\n    return stringified.replace('object ', '');\n  }\n\n  // If we've already visited this branch, bail out, as it's circular reference. If not, note that we're seeing it now.\n  if (memoize(value)) {\n    return '[Circular ~]';\n  }\n\n  // If the value has a `toJSON` method, we call it to extract more information\n  const valueWithToJSON = value as unknown & { toJSON?: () => unknown };\n  if (valueWithToJSON && typeof valueWithToJSON.toJSON === 'function') {\n    try {\n      const jsonValue = valueWithToJSON.toJSON();\n      // We need to normalize the return value of `.toJSON()` in case it has circular references\n      return visit('', jsonValue, remainingDepth - 1, maxProperties, memo);\n    } catch (err) {\n      // pass (The built-in `toJSON` failed, but we can still try to do it ourselves)\n    }\n  }\n\n  // At this point we know we either have an object or an array, we haven't seen it before, and we're going to recurse\n  // because we haven't yet reached the max depth. Create an accumulator to hold the results of visiting each\n  // property/entry, and keep track of the number of items we add to it.\n  const normalized = (Array.isArray(value) ? [] : {}) as ObjOrArray<unknown>;\n  let numAdded = 0;\n\n  // Before we begin, convert`Error` and`Event` instances into plain objects, since some of each of their relevant\n  // properties are non-enumerable and otherwise would get missed.\n  const visitable = convertToPlainObject(value as ObjOrArray<unknown>);\n\n  for (const visitKey in visitable) {\n    // Avoid iterating over fields in the prototype if they've somehow been exposed to enumeration.\n    if (!Object.prototype.hasOwnProperty.call(visitable, visitKey)) {\n      continue;\n    }\n\n    if (numAdded >= maxProperties) {\n      normalized[visitKey] = '[MaxProperties ~]';\n      break;\n    }\n\n    // Recursively visit all the child nodes\n    const visitValue = visitable[visitKey];\n    normalized[visitKey] = visit(visitKey, visitValue, remainingDepth - 1, maxProperties, memo);\n\n    numAdded++;\n  }\n\n  // Once we've visited all the branches, remove the parent from memo storage\n  unmemoize(value);\n\n  // Return accumulated values\n  return normalized;\n}\n\n/* eslint-disable complexity */\n/**\n * Stringify the given value. Handles various known special values and types.\n *\n * Not meant to be used on simple primitives which already have a string representation, as it will, for example, turn\n * the number 1231 into \"[Object Number]\", nor on `null`, as it will throw.\n *\n * @param value The value to stringify\n * @returns A stringified representation of the given value\n */\nfunction stringifyValue(\n  key: unknown,\n  // this type is a tiny bit of a cheat, since this function does handle NaN (which is technically a number), but for\n  // our internal use, it'll do\n  value: Exclude<unknown, string | number | boolean | null>,\n): string {\n  try {\n    if (key === 'domain' && value && typeof value === 'object' && (value as { _events: unknown })._events) {\n      return '[Domain]';\n    }\n\n    if (key === 'domainEmitter') {\n      return '[DomainEmitter]';\n    }\n\n    // It's safe to use `global`, `window`, and `document` here in this manner, as we are asserting using `typeof` first\n    // which won't throw if they are not present.\n\n    if (typeof global !== 'undefined' && value === global) {\n      return '[Global]';\n    }\n\n    // eslint-disable-next-line no-restricted-globals\n    if (typeof window !== 'undefined' && value === window) {\n      return '[Window]';\n    }\n\n    // eslint-disable-next-line no-restricted-globals\n    if (typeof document !== 'undefined' && value === document) {\n      return '[Document]';\n    }\n\n    if (isVueViewModel(value)) {\n      return '[VueViewModel]';\n    }\n\n    // React's SyntheticEvent thingy\n    if (isSyntheticEvent(value)) {\n      return '[SyntheticEvent]';\n    }\n\n    if (typeof value === 'number' && !Number.isFinite(value)) {\n      return `[${value}]`;\n    }\n\n    if (typeof value === 'function') {\n      return `[Function: ${getFunctionName(value)}]`;\n    }\n\n    if (typeof value === 'symbol') {\n      return `[${String(value)}]`;\n    }\n\n    // stringified BigInts are indistinguishable from regular numbers, so we need to label them to avoid confusion\n    if (typeof value === 'bigint') {\n      return `[BigInt: ${String(value)}]`;\n    }\n\n    // Now that we've knocked out all the special cases and the primitives, all we have left are objects. Simply casting\n    // them to strings means that instances of classes which haven't defined their `toStringTag` will just come out as\n    // `\"[object Object]\"`. If we instead look at the constructor's name (which is the same as the name of the class),\n    // we can make sure that only plain objects come out that way.\n    const objName = getConstructorName(value);\n\n    // Handle HTML Elements\n    if (/^HTML(\\w*)Element$/.test(objName)) {\n      return `[HTMLElement: ${objName}]`;\n    }\n\n    return `[object ${objName}]`;\n  } catch (err) {\n    return `**non-serializable** (${err})`;\n  }\n}\n/* eslint-enable complexity */\n\nfunction getConstructorName(value: unknown): string {\n  const prototype: Prototype | null = Object.getPrototypeOf(value);\n\n  return prototype?.constructor ? prototype.constructor.name : 'null prototype';\n}\n\n/** Calculates bytes size of input string */\nfunction utf8Length(value: string): number {\n  // eslint-disable-next-line no-bitwise\n  return ~-encodeURI(value).split(/%..|./).length;\n}\n\n/** Calculates bytes size of input object */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction jsonSize(value: any): number {\n  return utf8Length(JSON.stringify(value));\n}\n\n/**\n * Normalizes URLs in exceptions and stacktraces to a base path so Sentry can fingerprint\n * across platforms and working directory.\n *\n * @param url The URL to be normalized.\n * @param basePath The application base path.\n * @returns The normalized URL.\n */\nexport function normalizeUrlToBase(url: string, basePath: string): string {\n  const escapedBase = basePath\n    // Backslash to forward\n    .replace(/\\\\/g, '/')\n    // Escape RegExp special characters\n    .replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&');\n\n  let newUrl = url;\n  try {\n    newUrl = decodeURI(url);\n  } catch (_Oo) {\n    // Sometime this breaks\n  }\n  return (\n    newUrl\n      .replace(/\\\\/g, '/')\n      .replace(/webpack:\\/?/g, '') // Remove intermediate base path\n      // eslint-disable-next-line @sentry-internal/sdk/no-regexp-constructor\n      .replace(new RegExp(`(file://)?/*${escapedBase}/*`, 'ig'), 'app:///')\n  );\n}\n\n/**\n * Helper to decycle json objects\n */\nfunction memoBuilder(): MemoFunc {\n  const inner = new WeakSet<object>();\n  function memoize(obj: object): boolean {\n    if (inner.has(obj)) {\n      return true;\n    }\n    inner.add(obj);\n    return false;\n  }\n\n  function unmemoize(obj: object): void {\n    inner.delete(obj);\n  }\n  return [memoize, unmemoize];\n}\n", "import { getSentryCarrier } from '../carrier';\nimport type { Attachment } from '../types-hoist/attachment';\nimport type { DataCategory } from '../types-hoist/datacategory';\nimport type { DsnComponents } from '../types-hoist/dsn';\nimport type {\n  AttachmentItem,\n  BaseEnvelopeHeaders,\n  BaseEnvelopeItemHeaders,\n  Envelope,\n  EnvelopeItemType,\n  EventEnvelopeHeaders,\n  SpanItem,\n} from '../types-hoist/envelope';\nimport type { Event } from '../types-hoist/event';\nimport type { SdkInfo } from '../types-hoist/sdkinfo';\nimport type { SdkMetadata } from '../types-hoist/sdkmetadata';\nimport type { SpanJSON } from '../types-hoist/span';\nimport { dsnToString } from './dsn';\nimport { normalize } from './normalize';\nimport { GLOBAL_OBJ } from './worldwide';\n\n/**\n * Creates an envelope.\n * Make sure to always explicitly provide the generic to this function\n * so that the envelope types resolve correctly.\n */\nexport function createEnvelope<E extends Envelope>(headers: E[0], items: E[1] = []): E {\n  return [headers, items] as E;\n}\n\n/**\n * Add an item to an envelope.\n * Make sure to always explicitly provide the generic to this function\n * so that the envelope types resolve correctly.\n */\nexport function addItemToEnvelope<E extends Envelope>(envelope: E, newItem: E[1][number]): E {\n  const [headers, items] = envelope;\n  return [headers, [...items, newItem]] as unknown as E;\n}\n\n/**\n * Convenience function to loop through the items and item types of an envelope.\n * (This function was mostly created because working with envelope types is painful at the moment)\n *\n * If the callback returns true, the rest of the items will be skipped.\n */\nexport function forEachEnvelopeItem<E extends Envelope>(\n  envelope: Envelope,\n  callback: (envelopeItem: E[1][number], envelopeItemType: E[1][number][0]['type']) => boolean | void,\n): boolean {\n  const envelopeItems = envelope[1];\n\n  for (const envelopeItem of envelopeItems) {\n    const envelopeItemType = envelopeItem[0].type;\n    const result = callback(envelopeItem, envelopeItemType);\n\n    if (result) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\n/**\n * Returns true if the envelope contains any of the given envelope item types\n */\nexport function envelopeContainsItemType(envelope: Envelope, types: EnvelopeItemType[]): boolean {\n  return forEachEnvelopeItem(envelope, (_, type) => types.includes(type));\n}\n\n/**\n * Encode a string to UTF8 array.\n */\nfunction encodeUTF8(input: string): Uint8Array {\n  const carrier = getSentryCarrier(GLOBAL_OBJ);\n  return carrier.encodePolyfill ? carrier.encodePolyfill(input) : new TextEncoder().encode(input);\n}\n\n/**\n * Decode a UTF8 array to string.\n */\nfunction decodeUTF8(input: Uint8Array): string {\n  const carrier = getSentryCarrier(GLOBAL_OBJ);\n  return carrier.decodePolyfill ? carrier.decodePolyfill(input) : new TextDecoder().decode(input);\n}\n\n/**\n * Serializes an envelope.\n */\nexport function serializeEnvelope(envelope: Envelope): string | Uint8Array {\n  const [envHeaders, items] = envelope;\n  // Initially we construct our envelope as a string and only convert to binary chunks if we encounter binary data\n  let parts: string | Uint8Array[] = JSON.stringify(envHeaders);\n\n  function append(next: string | Uint8Array): void {\n    if (typeof parts === 'string') {\n      parts = typeof next === 'string' ? parts + next : [encodeUTF8(parts), next];\n    } else {\n      parts.push(typeof next === 'string' ? encodeUTF8(next) : next);\n    }\n  }\n\n  for (const item of items) {\n    const [itemHeaders, payload] = item;\n\n    append(`\\n${JSON.stringify(itemHeaders)}\\n`);\n\n    if (typeof payload === 'string' || payload instanceof Uint8Array) {\n      append(payload);\n    } else {\n      let stringifiedPayload: string;\n      try {\n        stringifiedPayload = JSON.stringify(payload);\n      } catch (e) {\n        // In case, despite all our efforts to keep `payload` circular-dependency-free, `JSON.stringify()` still\n        // fails, we try again after normalizing it again with infinite normalization depth. This of course has a\n        // performance impact but in this case a performance hit is better than throwing.\n        stringifiedPayload = JSON.stringify(normalize(payload));\n      }\n      append(stringifiedPayload);\n    }\n  }\n\n  return typeof parts === 'string' ? parts : concatBuffers(parts);\n}\n\nfunction concatBuffers(buffers: Uint8Array[]): Uint8Array {\n  const totalLength = buffers.reduce((acc, buf) => acc + buf.length, 0);\n\n  const merged = new Uint8Array(totalLength);\n  let offset = 0;\n  for (const buffer of buffers) {\n    merged.set(buffer, offset);\n    offset += buffer.length;\n  }\n\n  return merged;\n}\n\n/**\n * Parses an envelope\n */\nexport function parseEnvelope(env: string | Uint8Array): Envelope {\n  let buffer = typeof env === 'string' ? encodeUTF8(env) : env;\n\n  function readBinary(length: number): Uint8Array {\n    const bin = buffer.subarray(0, length);\n    // Replace the buffer with the remaining data excluding trailing newline\n    buffer = buffer.subarray(length + 1);\n    return bin;\n  }\n\n  function readJson<T>(): T {\n    let i = buffer.indexOf(0xa);\n    // If we couldn't find a newline, we must have found the end of the buffer\n    if (i < 0) {\n      i = buffer.length;\n    }\n\n    return JSON.parse(decodeUTF8(readBinary(i))) as T;\n  }\n\n  const envelopeHeader = readJson<BaseEnvelopeHeaders>();\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const items: [any, any][] = [];\n\n  while (buffer.length) {\n    const itemHeader = readJson<BaseEnvelopeItemHeaders>();\n    const binaryLength = typeof itemHeader.length === 'number' ? itemHeader.length : undefined;\n\n    items.push([itemHeader, binaryLength ? readBinary(binaryLength) : readJson()]);\n  }\n\n  return [envelopeHeader, items];\n}\n\n/**\n * Creates envelope item for a single span\n */\nexport function createSpanEnvelopeItem(spanJson: Partial<SpanJSON>): SpanItem {\n  const spanHeaders: SpanItem[0] = {\n    type: 'span',\n  };\n\n  return [spanHeaders, spanJson];\n}\n\n/**\n * Creates attachment envelope items\n */\nexport function createAttachmentEnvelopeItem(attachment: Attachment): AttachmentItem {\n  const buffer = typeof attachment.data === 'string' ? encodeUTF8(attachment.data) : attachment.data;\n\n  return [\n    {\n      type: 'attachment',\n      length: buffer.length,\n      filename: attachment.filename,\n      content_type: attachment.contentType,\n      attachment_type: attachment.attachmentType,\n    },\n    buffer,\n  ];\n}\n\nconst ITEM_TYPE_TO_DATA_CATEGORY_MAP: Record<EnvelopeItemType, DataCategory> = {\n  session: 'session',\n  sessions: 'session',\n  attachment: 'attachment',\n  transaction: 'transaction',\n  event: 'error',\n  client_report: 'internal',\n  user_report: 'default',\n  profile: 'profile',\n  profile_chunk: 'profile',\n  replay_event: 'replay',\n  replay_recording: 'replay',\n  check_in: 'monitor',\n  feedback: 'feedback',\n  span: 'span',\n  raw_security: 'security',\n  log: 'log_item',\n};\n\n/**\n * Maps the type of an envelope item to a data category.\n */\nexport function envelopeItemTypeToDataCategory(type: EnvelopeItemType): DataCategory {\n  return ITEM_TYPE_TO_DATA_CATEGORY_MAP[type];\n}\n\n/** Extracts the minimal SDK info from the metadata or an events */\nexport function getSdkMetadataForEnvelopeHeader(metadataOrEvent?: SdkMetadata | Event): SdkInfo | undefined {\n  if (!metadataOrEvent?.sdk) {\n    return;\n  }\n  const { name, version } = metadataOrEvent.sdk;\n  return { name, version };\n}\n\n/**\n * Creates event envelope headers, based on event, sdk info and tunnel\n * Note: This function was extracted from the core package to make it available in Replay\n */\nexport function createEventEnvelopeHeaders(\n  event: Event,\n  sdkInfo: SdkInfo | undefined,\n  tunnel: string | undefined,\n  dsn?: DsnComponents,\n): EventEnvelopeHeaders {\n  const dynamicSamplingContext = event.sdkProcessingMetadata?.dynamicSamplingContext;\n  return {\n    event_id: event.event_id as string,\n    sent_at: new Date().toISOString(),\n    ...(sdkInfo && { sdk: sdkInfo }),\n    ...(!!tunnel && dsn && { dsn: dsnToString(dsn) }),\n    ...(dynamicSamplingContext && {\n      trace: dynamicSamplingContext,\n    }),\n  };\n}\n", "import type { Client } from './client';\nimport { getDynamicSamplingContextFromSpan } from './tracing/dynamicSamplingContext';\nimport type { SentrySpan } from './tracing/sentrySpan';\nimport type { LegacyCSPReport } from './types-hoist/csp';\nimport type { DsnComponents } from './types-hoist/dsn';\nimport type {\n  DynamicSamplingContext,\n  EventEnvelope,\n  EventItem,\n  RawSecurityEnvelope,\n  RawSecurityItem,\n  SessionEnvelope,\n  SessionItem,\n  SpanEnvelope,\n  SpanItem,\n} from './types-hoist/envelope';\nimport type { Event } from './types-hoist/event';\nimport type { SdkInfo } from './types-hoist/sdkinfo';\nimport type { SdkMetadata } from './types-hoist/sdkmetadata';\nimport type { Session, SessionAggregates } from './types-hoist/session';\nimport { showSpanDropWarning, spanToJSON } from './utils/spanUtils';\nimport { dsnToString } from './utils-hoist/dsn';\nimport {\n  createEnvelope,\n  createEventEnvelopeHeaders,\n  createSpanEnvelopeItem,\n  getSdkMetadataForEnvelopeHeader,\n} from './utils-hoist/envelope';\nimport { uuid4 } from './utils-hoist/misc';\n\n/**\n * Apply SdkInfo (name, version, packages, integrations) to the corresponding event key.\n * Merge with existing data if any.\n **/\nfunction enhanceEventWithSdkInfo(event: Event, sdkInfo?: SdkInfo): Event {\n  if (!sdkInfo) {\n    return event;\n  }\n  event.sdk = event.sdk || {};\n  event.sdk.name = event.sdk.name || sdkInfo.name;\n  event.sdk.version = event.sdk.version || sdkInfo.version;\n  event.sdk.integrations = [...(event.sdk.integrations || []), ...(sdkInfo.integrations || [])];\n  event.sdk.packages = [...(event.sdk.packages || []), ...(sdkInfo.packages || [])];\n  return event;\n}\n\n/** Creates an envelope from a Session */\nexport function createSessionEnvelope(\n  session: Session | SessionAggregates,\n  dsn?: DsnComponents,\n  metadata?: SdkMetadata,\n  tunnel?: string,\n): SessionEnvelope {\n  const sdkInfo = getSdkMetadataForEnvelopeHeader(metadata);\n  const envelopeHeaders = {\n    sent_at: new Date().toISOString(),\n    ...(sdkInfo && { sdk: sdkInfo }),\n    ...(!!tunnel && dsn && { dsn: dsnToString(dsn) }),\n  };\n\n  const envelopeItem: SessionItem =\n    'aggregates' in session ? [{ type: 'sessions' }, session] : [{ type: 'session' }, session.toJSON()];\n\n  return createEnvelope<SessionEnvelope>(envelopeHeaders, [envelopeItem]);\n}\n\n/**\n * Create an Envelope from an event.\n */\nexport function createEventEnvelope(\n  event: Event,\n  dsn?: DsnComponents,\n  metadata?: SdkMetadata,\n  tunnel?: string,\n): EventEnvelope {\n  const sdkInfo = getSdkMetadataForEnvelopeHeader(metadata);\n\n  /*\n    Note: Due to TS, event.type may be `replay_event`, theoretically.\n    In practice, we never call `createEventEnvelope` with `replay_event` type,\n    and we'd have to adjust a looot of types to make this work properly.\n    We want to avoid casting this around, as that could lead to bugs (e.g. when we add another type)\n    So the safe choice is to really guard against the replay_event type here.\n  */\n  const eventType = event.type && event.type !== 'replay_event' ? event.type : 'event';\n\n  enhanceEventWithSdkInfo(event, metadata?.sdk);\n\n  const envelopeHeaders = createEventEnvelopeHeaders(event, sdkInfo, tunnel, dsn);\n\n  // Prevent this data (which, if it exists, was used in earlier steps in the processing pipeline) from being sent to\n  // sentry. (Note: Our use of this property comes and goes with whatever we might be debugging, whatever hacks we may\n  // have temporarily added, etc. Even if we don't happen to be using it at some point in the future, let's not get rid\n  // of this `delete`, lest we miss putting it back in the next time the property is in use.)\n  delete event.sdkProcessingMetadata;\n\n  const eventItem: EventItem = [{ type: eventType }, event];\n  return createEnvelope<EventEnvelope>(envelopeHeaders, [eventItem]);\n}\n\n/**\n * Create envelope from Span item.\n *\n * Takes an optional client and runs spans through `beforeSendSpan` if available.\n */\nexport function createSpanEnvelope(spans: [SentrySpan, ...SentrySpan[]], client?: Client): SpanEnvelope {\n  function dscHasRequiredProps(dsc: Partial<DynamicSamplingContext>): dsc is DynamicSamplingContext {\n    return !!dsc.trace_id && !!dsc.public_key;\n  }\n\n  // For the moment we'll obtain the DSC from the first span in the array\n  // This might need to be changed if we permit sending multiple spans from\n  // different segments in one envelope\n  const dsc = getDynamicSamplingContextFromSpan(spans[0]);\n\n  const dsn = client?.getDsn();\n  const tunnel = client?.getOptions().tunnel;\n\n  const headers: SpanEnvelope[0] = {\n    sent_at: new Date().toISOString(),\n    ...(dscHasRequiredProps(dsc) && { trace: dsc }),\n    ...(!!tunnel && dsn && { dsn: dsnToString(dsn) }),\n  };\n\n  const beforeSendSpan = client?.getOptions().beforeSendSpan;\n  const convertToSpanJSON = beforeSendSpan\n    ? (span: SentrySpan) => {\n        const spanJson = spanToJSON(span);\n        const processedSpan = beforeSendSpan(spanJson);\n\n        if (!processedSpan) {\n          showSpanDropWarning();\n          return spanJson;\n        }\n\n        return processedSpan;\n      }\n    : spanToJSON;\n\n  const items: SpanItem[] = [];\n  for (const span of spans) {\n    const spanJson = convertToSpanJSON(span);\n    if (spanJson) {\n      items.push(createSpanEnvelopeItem(spanJson));\n    }\n  }\n\n  return createEnvelope<SpanEnvelope>(headers, items);\n}\n\n/**\n * Create an Envelope from a CSP report.\n */\nexport function createRawSecurityEnvelope(\n  report: LegacyCSPReport,\n  dsn: DsnComponents,\n  tunnel?: string,\n  release?: string,\n  environment?: string,\n): RawSecurityEnvelope {\n  const envelopeHeaders = {\n    event_id: uuid4(),\n    ...(!!tunnel && dsn && { dsn: dsnToString(dsn) }),\n  };\n\n  const eventItem: RawSecurityItem = [\n    { type: 'raw_security', sentry_release: release, sentry_environment: environment },\n    report,\n  ];\n\n  return createEnvelope<RawSecurityEnvelope>(envelopeHeaders, [eventItem]);\n}\n", "import { DEBUG_BUILD } from '../debug-build';\nimport {\n  SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_UNIT,\n  SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_VALUE,\n} from '../semanticAttributes';\nimport type { Measurements, MeasurementUnit } from '../types-hoist/measurement';\nimport type { TimedEvent } from '../types-hoist/timedEvent';\nimport { getActiveSpan, getRootSpan } from '../utils/spanUtils';\nimport { logger } from '../utils-hoist/logger';\n\n/**\n * Adds a measurement to the active transaction on the current global scope. You can optionally pass in a different span\n * as the 4th parameter.\n */\nexport function setMeasurement(name: string, value: number, unit: MeasurementUnit, activeSpan = getActiveSpan()): void {\n  const rootSpan = activeSpan && getRootSpan(activeSpan);\n\n  if (rootSpan) {\n    DEBUG_BUILD && logger.log(`[Measurement] Setting measurement on root span: ${name} = ${value} ${unit}`);\n    rootSpan.addEvent(name, {\n      [SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_VALUE]: value,\n      [SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_UNIT]: unit as string,\n    });\n  }\n}\n\n/**\n * Convert timed events to measurements.\n */\nexport function timedEventsToMeasurements(events: TimedEvent[]): Measurements | undefined {\n  if (!events || events.length === 0) {\n    return undefined;\n  }\n\n  const measurements: Measurements = {};\n  events.forEach(event => {\n    const attributes = event.attributes || {};\n    const unit = attributes[SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_UNIT] as MeasurementUnit | undefined;\n    const value = attributes[SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_VALUE] as number | undefined;\n\n    if (typeof unit === 'string' && typeof value === 'number') {\n      measurements[event.name] = { value, unit };\n    }\n  });\n\n  return measurements;\n}\n", "/* eslint-disable max-lines */\n\nimport { getAsyncContextStrategy } from '../asyncContext';\nimport type { AsyncContextStrategy } from '../asyncContext/types';\nimport { getMainCarrier } from '../carrier';\nimport { getClient, getCurrentScope, getIsolationScope, withScope } from '../currentScopes';\nimport { DEBUG_BUILD } from '../debug-build';\nimport type { Scope } from '../scope';\nimport { SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE, SEMANTIC_ATTRIBUTE_SENTRY_SOURCE } from '../semanticAttributes';\nimport type { DynamicSamplingContext } from '../types-hoist/envelope';\nimport type { ClientOptions } from '../types-hoist/options';\nimport type { SentrySpanArguments, Span, SpanTimeInput } from '../types-hoist/span';\nimport type { StartSpanOptions } from '../types-hoist/startSpanOptions';\nimport { handleCallbackErrors } from '../utils/handleCallbackErrors';\nimport { hasSpansEnabled } from '../utils/hasSpansEnabled';\nimport { parseSampleRate } from '../utils/parseSampleRate';\nimport { _getSpanForScope, _setSpanForScope } from '../utils/spanOnScope';\nimport { addChildSpanToSpan, getRootSpan, spanIsSampled, spanTimeInputToSeconds, spanToJSON } from '../utils/spanUtils';\nimport { logger } from '../utils-hoist/logger';\nimport { generateTraceId } from '../utils-hoist/propagationContext';\nimport { propagationContextFromHeaders } from '../utils-hoist/tracing';\nimport { freezeDscOnSpan, getDynamicSamplingContextFromSpan } from './dynamicSamplingContext';\nimport { logSpanStart } from './logSpans';\nimport { sampleSpan } from './sampling';\nimport { SentryNonRecordingSpan } from './sentryNonRecordingSpan';\nimport { SentrySpan } from './sentrySpan';\nimport { SPAN_STATUS_ERROR } from './spanstatus';\nimport { setCapturedScopesOnSpan } from './utils';\n\nconst SUPPRESS_TRACING_KEY = '__SENTRY_SUPPRESS_TRACING__';\n\n/**\n * Wraps a function with a transaction/span and finishes the span after the function is done.\n * The created span is the active span and will be used as parent by other spans created inside the function\n * and can be accessed via `Sentry.getActiveSpan()`, as long as the function is executed while the scope is active.\n *\n * If you want to create a span that is not set as active, use {@link startInactiveSpan}.\n *\n * You'll always get a span passed to the callback,\n * it may just be a non-recording span if the span is not sampled or if tracing is disabled.\n */\nexport function startSpan<T>(options: StartSpanOptions, callback: (span: Span) => T): T {\n  const acs = getAcs();\n  if (acs.startSpan) {\n    return acs.startSpan(options, callback);\n  }\n\n  const spanArguments = parseSentrySpanArguments(options);\n  const { forceTransaction, parentSpan: customParentSpan, scope: customScope } = options;\n\n  // We still need to fork a potentially passed scope, as we set the active span on it\n  // and we need to ensure that it is cleaned up properly once the span ends.\n  const customForkedScope = customScope?.clone();\n\n  return withScope(customForkedScope, () => {\n    // If `options.parentSpan` is defined, we want to wrap the callback in `withActiveSpan`\n    const wrapper = getActiveSpanWrapper<T>(customParentSpan);\n\n    return wrapper(() => {\n      const scope = getCurrentScope();\n      const parentSpan = getParentSpan(scope);\n\n      const shouldSkipSpan = options.onlyIfParent && !parentSpan;\n      const activeSpan = shouldSkipSpan\n        ? new SentryNonRecordingSpan()\n        : createChildOrRootSpan({\n            parentSpan,\n            spanArguments,\n            forceTransaction,\n            scope,\n          });\n\n      _setSpanForScope(scope, activeSpan);\n\n      return handleCallbackErrors(\n        () => callback(activeSpan),\n        () => {\n          // Only update the span status if it hasn't been changed yet, and the span is not yet finished\n          const { status } = spanToJSON(activeSpan);\n          if (activeSpan.isRecording() && (!status || status === 'ok')) {\n            activeSpan.setStatus({ code: SPAN_STATUS_ERROR, message: 'internal_error' });\n          }\n        },\n        () => {\n          activeSpan.end();\n        },\n      );\n    });\n  });\n}\n\n/**\n * Similar to `Sentry.startSpan`. Wraps a function with a transaction/span, but does not finish the span\n * after the function is done automatically. Use `span.end()` to end the span.\n *\n * The created span is the active span and will be used as parent by other spans created inside the function\n * and can be accessed via `Sentry.getActiveSpan()`, as long as the function is executed while the scope is active.\n *\n * You'll always get a span passed to the callback,\n * it may just be a non-recording span if the span is not sampled or if tracing is disabled.\n */\nexport function startSpanManual<T>(options: StartSpanOptions, callback: (span: Span, finish: () => void) => T): T {\n  const acs = getAcs();\n  if (acs.startSpanManual) {\n    return acs.startSpanManual(options, callback);\n  }\n\n  const spanArguments = parseSentrySpanArguments(options);\n  const { forceTransaction, parentSpan: customParentSpan, scope: customScope } = options;\n\n  const customForkedScope = customScope?.clone();\n\n  return withScope(customForkedScope, () => {\n    // If `options.parentSpan` is defined, we want to wrap the callback in `withActiveSpan`\n    const wrapper = getActiveSpanWrapper<T>(customParentSpan);\n\n    return wrapper(() => {\n      const scope = getCurrentScope();\n      const parentSpan = getParentSpan(scope);\n\n      const shouldSkipSpan = options.onlyIfParent && !parentSpan;\n      const activeSpan = shouldSkipSpan\n        ? new SentryNonRecordingSpan()\n        : createChildOrRootSpan({\n            parentSpan,\n            spanArguments,\n            forceTransaction,\n            scope,\n          });\n\n      _setSpanForScope(scope, activeSpan);\n\n      return handleCallbackErrors(\n        // We pass the `finish` function to the callback, so the user can finish the span manually\n        // this is mainly here for historic purposes because previously, we instructed users to call\n        // `finish` instead of `span.end()` to also clean up the scope. Nowadays, calling `span.end()`\n        // or `finish` has the same effect and we simply leave it here to avoid breaking user code.\n        () => callback(activeSpan, () => activeSpan.end()),\n        () => {\n          // Only update the span status if it hasn't been changed yet, and the span is not yet finished\n          const { status } = spanToJSON(activeSpan);\n          if (activeSpan.isRecording() && (!status || status === 'ok')) {\n            activeSpan.setStatus({ code: SPAN_STATUS_ERROR, message: 'internal_error' });\n          }\n        },\n      );\n    });\n  });\n}\n\n/**\n * Creates a span. This span is not set as active, so will not get automatic instrumentation spans\n * as children or be able to be accessed via `Sentry.getActiveSpan()`.\n *\n * If you want to create a span that is set as active, use {@link startSpan}.\n *\n * This function will always return a span,\n * it may just be a non-recording span if the span is not sampled or if tracing is disabled.\n */\nexport function startInactiveSpan(options: StartSpanOptions): Span {\n  const acs = getAcs();\n  if (acs.startInactiveSpan) {\n    return acs.startInactiveSpan(options);\n  }\n\n  const spanArguments = parseSentrySpanArguments(options);\n  const { forceTransaction, parentSpan: customParentSpan } = options;\n\n  // If `options.scope` is defined, we use this as as a wrapper,\n  // If `options.parentSpan` is defined, we want to wrap the callback in `withActiveSpan`\n  const wrapper = options.scope\n    ? (callback: () => Span) => withScope(options.scope, callback)\n    : customParentSpan !== undefined\n      ? (callback: () => Span) => withActiveSpan(customParentSpan, callback)\n      : (callback: () => Span) => callback();\n\n  return wrapper(() => {\n    const scope = getCurrentScope();\n    const parentSpan = getParentSpan(scope);\n\n    const shouldSkipSpan = options.onlyIfParent && !parentSpan;\n\n    if (shouldSkipSpan) {\n      return new SentryNonRecordingSpan();\n    }\n\n    return createChildOrRootSpan({\n      parentSpan,\n      spanArguments,\n      forceTransaction,\n      scope,\n    });\n  });\n}\n\n/**\n * Continue a trace from `sentry-trace` and `baggage` values.\n * These values can be obtained from incoming request headers, or in the browser from `<meta name=\"sentry-trace\">`\n * and `<meta name=\"baggage\">` HTML tags.\n *\n * Spans started with `startSpan`, `startSpanManual` and `startInactiveSpan`, within the callback will automatically\n * be attached to the incoming trace.\n */\nexport const continueTrace = <V>(\n  options: {\n    sentryTrace: Parameters<typeof propagationContextFromHeaders>[0];\n    baggage: Parameters<typeof propagationContextFromHeaders>[1];\n  },\n  callback: () => V,\n): V => {\n  const carrier = getMainCarrier();\n  const acs = getAsyncContextStrategy(carrier);\n  if (acs.continueTrace) {\n    return acs.continueTrace(options, callback);\n  }\n\n  const { sentryTrace, baggage } = options;\n\n  return withScope(scope => {\n    const propagationContext = propagationContextFromHeaders(sentryTrace, baggage);\n    scope.setPropagationContext(propagationContext);\n    return callback();\n  });\n};\n\n/**\n * Forks the current scope and sets the provided span as active span in the context of the provided callback. Can be\n * passed `null` to start an entirely new span tree.\n *\n * @param span Spans started in the context of the provided callback will be children of this span. If `null` is passed,\n * spans started within the callback will not be attached to a parent span.\n * @param callback Execution context in which the provided span will be active. Is passed the newly forked scope.\n * @returns the value returned from the provided callback function.\n */\nexport function withActiveSpan<T>(span: Span | null, callback: (scope: Scope) => T): T {\n  const acs = getAcs();\n  if (acs.withActiveSpan) {\n    return acs.withActiveSpan(span, callback);\n  }\n\n  return withScope(scope => {\n    _setSpanForScope(scope, span || undefined);\n    return callback(scope);\n  });\n}\n\n/** Suppress tracing in the given callback, ensuring no spans are generated inside of it. */\nexport function suppressTracing<T>(callback: () => T): T {\n  const acs = getAcs();\n\n  if (acs.suppressTracing) {\n    return acs.suppressTracing(callback);\n  }\n\n  return withScope(scope => {\n    scope.setSDKProcessingMetadata({ [SUPPRESS_TRACING_KEY]: true });\n    return callback();\n  });\n}\n\n/**\n * Starts a new trace for the duration of the provided callback. Spans started within the\n * callback will be part of the new trace instead of a potentially previously started trace.\n *\n * Important: Only use this function if you want to override the default trace lifetime and\n * propagation mechanism of the SDK for the duration and scope of the provided callback.\n * The newly created trace will also be the root of a new distributed trace, for example if\n * you make http requests within the callback.\n * This function might be useful if the operation you want to instrument should not be part\n * of a potentially ongoing trace.\n *\n * Default behavior:\n * - Server-side: A new trace is started for each incoming request.\n * - Browser: A new trace is started for each page our route. Navigating to a new route\n *            or page will automatically create a new trace.\n */\nexport function startNewTrace<T>(callback: () => T): T {\n  return withScope(scope => {\n    scope.setPropagationContext({\n      traceId: generateTraceId(),\n      sampleRand: Math.random(),\n    });\n    DEBUG_BUILD && logger.info(`Starting a new trace with id ${scope.getPropagationContext().traceId}`);\n    return withActiveSpan(null, callback);\n  });\n}\n\nfunction createChildOrRootSpan({\n  parentSpan,\n  spanArguments,\n  forceTransaction,\n  scope,\n}: {\n  parentSpan: SentrySpan | undefined;\n  spanArguments: SentrySpanArguments;\n  forceTransaction?: boolean;\n  scope: Scope;\n}): Span {\n  if (!hasSpansEnabled()) {\n    const span = new SentryNonRecordingSpan();\n\n    // If this is a root span, we ensure to freeze a DSC\n    // So we can have at least partial data here\n    if (forceTransaction || !parentSpan) {\n      const dsc = {\n        sampled: 'false',\n        sample_rate: '0',\n        transaction: spanArguments.name,\n        ...getDynamicSamplingContextFromSpan(span),\n      } satisfies Partial<DynamicSamplingContext>;\n      freezeDscOnSpan(span, dsc);\n    }\n\n    return span;\n  }\n\n  const isolationScope = getIsolationScope();\n\n  let span: Span;\n  if (parentSpan && !forceTransaction) {\n    span = _startChildSpan(parentSpan, scope, spanArguments);\n    addChildSpanToSpan(parentSpan, span);\n  } else if (parentSpan) {\n    // If we forced a transaction but have a parent span, make sure to continue from the parent span, not the scope\n    const dsc = getDynamicSamplingContextFromSpan(parentSpan);\n    const { traceId, spanId: parentSpanId } = parentSpan.spanContext();\n    const parentSampled = spanIsSampled(parentSpan);\n\n    span = _startRootSpan(\n      {\n        traceId,\n        parentSpanId,\n        ...spanArguments,\n      },\n      scope,\n      parentSampled,\n    );\n\n    freezeDscOnSpan(span, dsc);\n  } else {\n    const {\n      traceId,\n      dsc,\n      parentSpanId,\n      sampled: parentSampled,\n    } = {\n      ...isolationScope.getPropagationContext(),\n      ...scope.getPropagationContext(),\n    };\n\n    span = _startRootSpan(\n      {\n        traceId,\n        parentSpanId,\n        ...spanArguments,\n      },\n      scope,\n      parentSampled,\n    );\n\n    if (dsc) {\n      freezeDscOnSpan(span, dsc);\n    }\n  }\n\n  logSpanStart(span);\n\n  setCapturedScopesOnSpan(span, scope, isolationScope);\n\n  return span;\n}\n\n/**\n * This converts StartSpanOptions to SentrySpanArguments.\n * For the most part (for now) we accept the same options,\n * but some of them need to be transformed.\n */\nfunction parseSentrySpanArguments(options: StartSpanOptions): SentrySpanArguments {\n  const exp = options.experimental || {};\n  const initialCtx: SentrySpanArguments = {\n    isStandalone: exp.standalone,\n    ...options,\n  };\n\n  if (options.startTime) {\n    const ctx: SentrySpanArguments & { startTime?: SpanTimeInput } = { ...initialCtx };\n    ctx.startTimestamp = spanTimeInputToSeconds(options.startTime);\n    delete ctx.startTime;\n    return ctx;\n  }\n\n  return initialCtx;\n}\n\nfunction getAcs(): AsyncContextStrategy {\n  const carrier = getMainCarrier();\n  return getAsyncContextStrategy(carrier);\n}\n\nfunction _startRootSpan(spanArguments: SentrySpanArguments, scope: Scope, parentSampled?: boolean): SentrySpan {\n  const client = getClient();\n  const options: Partial<ClientOptions> = client?.getOptions() || {};\n\n  const { name = '' } = spanArguments;\n\n  const mutableSpanSamplingData = { spanAttributes: { ...spanArguments.attributes }, spanName: name, parentSampled };\n\n  // we don't care about the decision for the moment; this is just a placeholder\n  client?.emit('beforeSampling', mutableSpanSamplingData, { decision: false });\n\n  // If hook consumers override the parentSampled flag, we will use that value instead of the actual one\n  const finalParentSampled = mutableSpanSamplingData.parentSampled ?? parentSampled;\n  const finalAttributes = mutableSpanSamplingData.spanAttributes;\n\n  const currentPropagationContext = scope.getPropagationContext();\n  const [sampled, sampleRate, localSampleRateWasApplied] = scope.getScopeData().sdkProcessingMetadata[\n    SUPPRESS_TRACING_KEY\n  ]\n    ? [false]\n    : sampleSpan(\n        options,\n        {\n          name,\n          parentSampled: finalParentSampled,\n          attributes: finalAttributes,\n          parentSampleRate: parseSampleRate(currentPropagationContext.dsc?.sample_rate),\n        },\n        currentPropagationContext.sampleRand,\n      );\n\n  const rootSpan = new SentrySpan({\n    ...spanArguments,\n    attributes: {\n      [SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: 'custom',\n      [SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE]:\n        sampleRate !== undefined && localSampleRateWasApplied ? sampleRate : undefined,\n      ...finalAttributes,\n    },\n    sampled,\n  });\n\n  if (!sampled && client) {\n    DEBUG_BUILD && logger.log('[Tracing] Discarding root span because its trace was not chosen to be sampled.');\n    client.recordDroppedEvent('sample_rate', 'transaction');\n  }\n\n  if (client) {\n    client.emit('spanStart', rootSpan);\n  }\n\n  return rootSpan;\n}\n\n/**\n * Creates a new `Span` while setting the current `Span.id` as `parentSpanId`.\n * This inherits the sampling decision from the parent span.\n */\nfunction _startChildSpan(parentSpan: Span, scope: Scope, spanArguments: SentrySpanArguments): Span {\n  const { spanId, traceId } = parentSpan.spanContext();\n  const sampled = scope.getScopeData().sdkProcessingMetadata[SUPPRESS_TRACING_KEY] ? false : spanIsSampled(parentSpan);\n\n  const childSpan = sampled\n    ? new SentrySpan({\n        ...spanArguments,\n        parentSpanId: spanId,\n        traceId,\n        sampled,\n      })\n    : new SentryNonRecordingSpan({ traceId });\n\n  addChildSpanToSpan(parentSpan, childSpan);\n\n  const client = getClient();\n  if (client) {\n    client.emit('spanStart', childSpan);\n    // If it has an endTimestamp, it's already ended\n    if (spanArguments.endTimestamp) {\n      client.emit('spanEnd', childSpan);\n    }\n  }\n\n  return childSpan;\n}\n\nfunction getParentSpan(scope: Scope): SentrySpan | undefined {\n  const span = _getSpanForScope(scope) as SentrySpan | undefined;\n\n  if (!span) {\n    return undefined;\n  }\n\n  const client = getClient();\n  const options: Partial<ClientOptions> = client ? client.getOptions() : {};\n  if (options.parentSpanIsAlwaysRootSpan) {\n    return getRootSpan(span) as SentrySpan;\n  }\n\n  return span;\n}\n\nfunction getActiveSpanWrapper<T>(parentSpan: Span | undefined | null): (callback: () => T) => T {\n  return parentSpan !== undefined\n    ? (callback: () => T) => {\n        return withActiveSpan(parentSpan, callback);\n      }\n    : (callback: () => T) => callback();\n}\n", "/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { isThenable } from './is';\n\n/** SyncPromise internal states */\nconst enum States {\n  /** Pending */\n  PENDING = 0,\n  /** Resolved / OK */\n  RESOLVED = 1,\n  /** Rejected / Error */\n  REJECTED = 2,\n}\n\n// Overloads so we can call resolvedSyncPromise without arguments and generic argument\nexport function resolvedSyncPromise(): PromiseLike<void>;\nexport function resolvedSyncPromise<T>(value: T | PromiseLike<T>): PromiseLike<T>;\n\n/**\n * Creates a resolved sync promise.\n *\n * @param value the value to resolve the promise with\n * @returns the resolved sync promise\n */\nexport function resolvedSyncPromise<T>(value?: T | PromiseLike<T>): PromiseLike<T> {\n  return new SyncPromise(resolve => {\n    resolve(value);\n  });\n}\n\n/**\n * Creates a rejected sync promise.\n *\n * @param value the value to reject the promise with\n * @returns the rejected sync promise\n */\nexport function rejectedSyncPromise<T = never>(reason?: any): PromiseLike<T> {\n  return new SyncPromise((_, reject) => {\n    reject(reason);\n  });\n}\n\ntype Executor<T> = (resolve: (value?: T | PromiseLike<T> | null) => void, reject: (reason?: any) => void) => void;\n\n/**\n * Thenable class that behaves like a Promise and follows it's interface\n * but is not async internally\n */\nexport class SyncPromise<T> implements PromiseLike<T> {\n  private _state: States;\n  private _handlers: Array<[boolean, (value: T) => void, (reason: any) => any]>;\n  private _value: any;\n\n  public constructor(executor: Executor<T>) {\n    this._state = States.PENDING;\n    this._handlers = [];\n\n    this._runExecutor(executor);\n  }\n\n  /** @inheritdoc */\n  public then<TResult1 = T, TResult2 = never>(\n    onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | null,\n    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | null,\n  ): PromiseLike<TResult1 | TResult2> {\n    return new SyncPromise((resolve, reject) => {\n      this._handlers.push([\n        false,\n        result => {\n          if (!onfulfilled) {\n            // TODO: ¯\\_(ツ)_/¯\n            // TODO: FIXME\n            resolve(result as any);\n          } else {\n            try {\n              resolve(onfulfilled(result));\n            } catch (e) {\n              reject(e);\n            }\n          }\n        },\n        reason => {\n          if (!onrejected) {\n            reject(reason);\n          } else {\n            try {\n              resolve(onrejected(reason));\n            } catch (e) {\n              reject(e);\n            }\n          }\n        },\n      ]);\n      this._executeHandlers();\n    });\n  }\n\n  /** @inheritdoc */\n  public catch<TResult = never>(\n    onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | null,\n  ): PromiseLike<T | TResult> {\n    return this.then(val => val, onrejected);\n  }\n\n  /** @inheritdoc */\n  public finally<TResult>(onfinally?: (() => void) | null): PromiseLike<TResult> {\n    return new SyncPromise<TResult>((resolve, reject) => {\n      let val: TResult | any;\n      let isRejected: boolean;\n\n      return this.then(\n        value => {\n          isRejected = false;\n          val = value;\n          if (onfinally) {\n            onfinally();\n          }\n        },\n        reason => {\n          isRejected = true;\n          val = reason;\n          if (onfinally) {\n            onfinally();\n          }\n        },\n      ).then(() => {\n        if (isRejected) {\n          reject(val);\n          return;\n        }\n\n        resolve(val as unknown as any);\n      });\n    });\n  }\n\n  /** Excute the resolve/reject handlers. */\n  private _executeHandlers(): void {\n    if (this._state === States.PENDING) {\n      return;\n    }\n\n    const cachedHandlers = this._handlers.slice();\n    this._handlers = [];\n\n    cachedHandlers.forEach(handler => {\n      if (handler[0]) {\n        return;\n      }\n\n      if (this._state === States.RESOLVED) {\n        handler[1](this._value as unknown as any);\n      }\n\n      if (this._state === States.REJECTED) {\n        handler[2](this._value);\n      }\n\n      handler[0] = true;\n    });\n  }\n\n  /** Run the executor for the SyncPromise. */\n  private _runExecutor(executor: Executor<T>): void {\n    const setResult = (state: States, value?: T | PromiseLike<T> | any): void => {\n      if (this._state !== States.PENDING) {\n        return;\n      }\n\n      if (isThenable(value)) {\n        void (value as PromiseLike<T>).then(resolve, reject);\n        return;\n      }\n\n      this._state = state;\n      this._value = value;\n\n      this._executeHandlers();\n    };\n\n    const resolve = (value: unknown): void => {\n      setResult(States.RESOLVED, value);\n    };\n\n    const reject = (reason: unknown): void => {\n      setResult(States.REJECTED, reason);\n    };\n\n    try {\n      executor(resolve, reject);\n    } catch (e) {\n      reject(e);\n    }\n  }\n}\n", "import { DEBUG_BUILD } from './debug-build';\nimport type { Event, EventHint } from './types-hoist/event';\nimport type { EventProcessor } from './types-hoist/eventprocessor';\nimport { isThenable } from './utils-hoist/is';\nimport { logger } from './utils-hoist/logger';\nimport { SyncPromise } from './utils-hoist/syncpromise';\n\n/**\n * Process an array of event processors, returning the processed event (or `null` if the event was dropped).\n */\nexport function notifyEventProcessors(\n  processors: EventProcessor[],\n  event: Event | null,\n  hint: EventHint,\n  index: number = 0,\n): PromiseLike<Event | null> {\n  return new SyncPromise<Event | null>((resolve, reject) => {\n    const processor = processors[index];\n    if (event === null || typeof processor !== 'function') {\n      resolve(event);\n    } else {\n      const result = processor({ ...event }, hint) as Event | null;\n\n      DEBUG_BUILD && processor.id && result === null && logger.log(`Event processor \"${processor.id}\" dropped event`);\n\n      if (isThenable(result)) {\n        void result\n          .then(final => notifyEventProcessors(processors, final, hint, index + 1).then(resolve))\n          .then(null, reject);\n      } else {\n        void notifyEventProcessors(processors, result, hint, index + 1)\n          .then(resolve)\n          .then(null, reject);\n      }\n    }\n  });\n}\n", "import type { DebugImage } from '../types-hoist/debugMeta';\nimport type { StackParser } from '../types-hoist/stacktrace';\nimport { GLOBAL_OBJ } from './worldwide';\n\ntype StackString = string;\ntype CachedResult = [string, string];\n\nlet parsedStackResults: Record<StackString, CachedResult> | undefined;\nlet lastKeysCount: number | undefined;\nlet cachedFilenameDebugIds: Record<string, string> | undefined;\n\n/**\n * Returns a map of filenames to debug identifiers.\n */\nexport function getFilenameToDebugIdMap(stackParser: StackParser): Record<string, string> {\n  const debugIdMap = GLOBAL_OBJ._sentryDebugIds;\n  if (!debugIdMap) {\n    return {};\n  }\n\n  const debugIdKeys = Object.keys(debugIdMap);\n\n  // If the count of registered globals hasn't changed since the last call, we\n  // can just return the cached result.\n  if (cachedFilenameDebugIds && debugIdKeys.length === lastKeysCount) {\n    return cachedFilenameDebugIds;\n  }\n\n  lastKeysCount = debugIdKeys.length;\n\n  // Build a map of filename -> debug_id.\n  cachedFilenameDebugIds = debugIdKeys.reduce<Record<string, string>>((acc, stackKey) => {\n    if (!parsedStackResults) {\n      parsedStackResults = {};\n    }\n\n    const result = parsedStackResults[stackKey];\n\n    if (result) {\n      acc[result[0]] = result[1];\n    } else {\n      const parsedStack = stackParser(stackKey);\n\n      for (let i = parsedStack.length - 1; i >= 0; i--) {\n        const stackFrame = parsedStack[i];\n        const filename = stackFrame?.filename;\n        const debugId = debugIdMap[stackKey];\n\n        if (filename && debugId) {\n          acc[filename] = debugId;\n          parsedStackResults[stackKey] = [filename, debugId];\n          break;\n        }\n      }\n    }\n\n    return acc;\n  }, {});\n\n  return cachedFilenameDebugIds;\n}\n\n/**\n * Returns a list of debug images for the given resources.\n */\nexport function getDebugImagesForResources(\n  stackParser: StackParser,\n  resource_paths: ReadonlyArray<string>,\n): DebugImage[] {\n  const filenameDebugIdMap = getFilenameToDebugIdMap(stackParser);\n\n  if (!filenameDebugIdMap) {\n    return [];\n  }\n\n  const images: DebugImage[] = [];\n  for (const path of resource_paths) {\n    if (path && filenameDebugIdMap[path]) {\n      images.push({\n        type: 'sourcemap',\n        code_file: path,\n        debug_id: filenameDebugIdMap[path] as string,\n      });\n    }\n  }\n\n  return images;\n}\n", "import type { ScopeData } from '../scope';\nimport { getDynamicSamplingContextFromSpan } from '../tracing/dynamicSamplingContext';\nimport type { Breadcrumb } from '../types-hoist/breadcrumb';\nimport type { Event } from '../types-hoist/event';\nimport type { Span } from '../types-hoist/span';\nimport { merge } from './merge';\nimport { getRootSpan, spanToJSON, spanToTraceContext } from './spanUtils';\n\n/**\n * Applies data from the scope to the event and runs all event processors on it.\n */\nexport function applyScopeDataToEvent(event: Event, data: ScopeData): void {\n  const { fingerprint, span, breadcrumbs, sdkProcessingMetadata } = data;\n\n  // Apply general data\n  applyDataToEvent(event, data);\n\n  // We want to set the trace context for normal events only if there isn't already\n  // a trace context on the event. There is a product feature in place where we link\n  // errors with transaction and it relies on that.\n  if (span) {\n    applySpanToEvent(event, span);\n  }\n\n  applyFingerprintToEvent(event, fingerprint);\n  applyBreadcrumbsToEvent(event, breadcrumbs);\n  applySdkMetadataToEvent(event, sdkProcessingMetadata);\n}\n\n/** Merge data of two scopes together. */\nexport function mergeScopeData(data: ScopeData, mergeData: ScopeData): void {\n  const {\n    extra,\n    tags,\n    user,\n    contexts,\n    level,\n    sdkProcessingMetadata,\n    breadcrumbs,\n    fingerprint,\n    eventProcessors,\n    attachments,\n    propagationContext,\n    transactionName,\n    span,\n  } = mergeData;\n\n  mergeAndOverwriteScopeData(data, 'extra', extra);\n  mergeAndOverwriteScopeData(data, 'tags', tags);\n  mergeAndOverwriteScopeData(data, 'user', user);\n  mergeAndOverwriteScopeData(data, 'contexts', contexts);\n\n  data.sdkProcessingMetadata = merge(data.sdkProcessingMetadata, sdkProcessingMetadata, 2);\n\n  if (level) {\n    data.level = level;\n  }\n\n  if (transactionName) {\n    data.transactionName = transactionName;\n  }\n\n  if (span) {\n    data.span = span;\n  }\n\n  if (breadcrumbs.length) {\n    data.breadcrumbs = [...data.breadcrumbs, ...breadcrumbs];\n  }\n\n  if (fingerprint.length) {\n    data.fingerprint = [...data.fingerprint, ...fingerprint];\n  }\n\n  if (eventProcessors.length) {\n    data.eventProcessors = [...data.eventProcessors, ...eventProcessors];\n  }\n\n  if (attachments.length) {\n    data.attachments = [...data.attachments, ...attachments];\n  }\n\n  data.propagationContext = { ...data.propagationContext, ...propagationContext };\n}\n\n/**\n * Merges certain scope data. Undefined values will overwrite any existing values.\n * Exported only for tests.\n */\nexport function mergeAndOverwriteScopeData<\n  Prop extends 'extra' | 'tags' | 'user' | 'contexts' | 'sdkProcessingMetadata',\n  Data extends ScopeData,\n>(data: Data, prop: Prop, mergeVal: Data[Prop]): void {\n  data[prop] = merge(data[prop], mergeVal, 1);\n}\n\n/** Exported only for tests */\nexport function mergeArray<Prop extends 'breadcrumbs' | 'fingerprint'>(\n  event: Event,\n  prop: Prop,\n  mergeVal: ScopeData[Prop],\n): void {\n  const prevVal = event[prop];\n  // If we are not merging any new values,\n  // we only need to proceed if there was an empty array before (as we want to replace it with undefined)\n  if (!mergeVal.length && (!prevVal || prevVal.length)) {\n    return;\n  }\n\n  const merged = [...(prevVal || []), ...mergeVal] as ScopeData[Prop];\n  event[prop] = merged.length ? merged : undefined;\n}\n\nfunction applyDataToEvent(event: Event, data: ScopeData): void {\n  const { extra, tags, user, contexts, level, transactionName } = data;\n\n  if (Object.keys(extra).length) {\n    event.extra = { ...extra, ...event.extra };\n  }\n\n  if (Object.keys(tags).length) {\n    event.tags = { ...tags, ...event.tags };\n  }\n\n  if (Object.keys(user).length) {\n    event.user = { ...user, ...event.user };\n  }\n\n  if (Object.keys(contexts).length) {\n    event.contexts = { ...contexts, ...event.contexts };\n  }\n\n  if (level) {\n    event.level = level;\n  }\n\n  // transaction events get their `transaction` from the root span name\n  if (transactionName && event.type !== 'transaction') {\n    event.transaction = transactionName;\n  }\n}\n\nfunction applyBreadcrumbsToEvent(event: Event, breadcrumbs: Breadcrumb[]): void {\n  const mergedBreadcrumbs = [...(event.breadcrumbs || []), ...breadcrumbs];\n  event.breadcrumbs = mergedBreadcrumbs.length ? mergedBreadcrumbs : undefined;\n}\n\nfunction applySdkMetadataToEvent(event: Event, sdkProcessingMetadata: ScopeData['sdkProcessingMetadata']): void {\n  event.sdkProcessingMetadata = {\n    ...event.sdkProcessingMetadata,\n    ...sdkProcessingMetadata,\n  };\n}\n\nfunction applySpanToEvent(event: Event, span: Span): void {\n  event.contexts = {\n    trace: spanToTraceContext(span),\n    ...event.contexts,\n  };\n\n  event.sdkProcessingMetadata = {\n    dynamicSamplingContext: getDynamicSamplingContextFromSpan(span),\n    ...event.sdkProcessingMetadata,\n  };\n\n  const rootSpan = getRootSpan(span);\n  const transactionName = spanToJSON(rootSpan).description;\n  if (transactionName && !event.transaction && event.type === 'transaction') {\n    event.transaction = transactionName;\n  }\n}\n\n/**\n * Applies fingerprint from the scope to the event if there's one,\n * uses message if there's one instead or get rid of empty fingerprint\n */\nfunction applyFingerprintToEvent(event: Event, fingerprint: ScopeData['fingerprint'] | undefined): void {\n  // Make sure it's an array first and we actually have something in place\n  event.fingerprint = event.fingerprint\n    ? Array.isArray(event.fingerprint)\n      ? event.fingerprint\n      : [event.fingerprint]\n    : [];\n\n  // If we have something on the scope, then merge it with event\n  if (fingerprint) {\n    event.fingerprint = event.fingerprint.concat(fingerprint);\n  }\n\n  // If we have no data at all, remove empty array default\n  if (!event.fingerprint.length) {\n    delete event.fingerprint;\n  }\n}\n", "import type { Client } from '../client';\nimport { DEFAULT_ENVIRONMENT } from '../constants';\nimport { getGlobalScope } from '../currentScopes';\nimport { notifyEventProcessors } from '../eventProcessors';\nimport type { CaptureContext, ScopeContext } from '../scope';\nimport { Scope } from '../scope';\nimport type { Event, EventHint } from '../types-hoist/event';\nimport type { ClientOptions } from '../types-hoist/options';\nimport type { StackParser } from '../types-hoist/stacktrace';\nimport { getFilenameToDebugIdMap } from '../utils-hoist/debug-ids';\nimport { addExceptionMechanism, uuid4 } from '../utils-hoist/misc';\nimport { normalize } from '../utils-hoist/normalize';\nimport { truncate } from '../utils-hoist/string';\nimport { dateTimestampInSeconds } from '../utils-hoist/time';\nimport { applyScopeDataToEvent, mergeScopeData } from './applyScopeDataToEvent';\n\n/**\n * This type makes sure that we get either a CaptureContext, OR an EventHint.\n * It does not allow mixing them, which could lead to unexpected outcomes, e.g. this is disallowed:\n * { user: { id: '123' }, mechanism: { handled: false } }\n */\nexport type ExclusiveEventHintOrCaptureContext =\n  | (CaptureContext & Partial<{ [key in keyof EventHint]: never }>)\n  | (EventHint & Partial<{ [key in keyof ScopeContext]: never }>);\n\n/**\n * Adds common information to events.\n *\n * The information includes release and environment from `options`,\n * breadcrumbs and context (extra, tags and user) from the scope.\n *\n * Information that is already present in the event is never overwritten. For\n * nested objects, such as the context, keys are merged.\n *\n * @param event The original event.\n * @param hint May contain additional information about the original exception.\n * @param scope A scope containing event metadata.\n * @returns A new event with more information.\n * @hidden\n */\nexport function prepareEvent(\n  options: ClientOptions,\n  event: Event,\n  hint: EventHint,\n  scope?: Scope,\n  client?: Client,\n  isolationScope?: Scope,\n): PromiseLike<Event | null> {\n  const { normalizeDepth = 3, normalizeMaxBreadth = 1_000 } = options;\n  const prepared: Event = {\n    ...event,\n    event_id: event.event_id || hint.event_id || uuid4(),\n    timestamp: event.timestamp || dateTimestampInSeconds(),\n  };\n  const integrations = hint.integrations || options.integrations.map(i => i.name);\n\n  applyClientOptions(prepared, options);\n  applyIntegrationsMetadata(prepared, integrations);\n\n  if (client) {\n    client.emit('applyFrameMetadata', event);\n  }\n\n  // Only put debug IDs onto frames for error events.\n  if (event.type === undefined) {\n    applyDebugIds(prepared, options.stackParser);\n  }\n\n  // If we have scope given to us, use it as the base for further modifications.\n  // This allows us to prevent unnecessary copying of data if `captureContext` is not provided.\n  const finalScope = getFinalScope(scope, hint.captureContext);\n\n  if (hint.mechanism) {\n    addExceptionMechanism(prepared, hint.mechanism);\n  }\n\n  const clientEventProcessors = client ? client.getEventProcessors() : [];\n\n  // This should be the last thing called, since we want that\n  // {@link Scope.addEventProcessor} gets the finished prepared event.\n  // Merge scope data together\n  const data = getGlobalScope().getScopeData();\n\n  if (isolationScope) {\n    const isolationData = isolationScope.getScopeData();\n    mergeScopeData(data, isolationData);\n  }\n\n  if (finalScope) {\n    const finalScopeData = finalScope.getScopeData();\n    mergeScopeData(data, finalScopeData);\n  }\n\n  const attachments = [...(hint.attachments || []), ...data.attachments];\n  if (attachments.length) {\n    hint.attachments = attachments;\n  }\n\n  applyScopeDataToEvent(prepared, data);\n\n  const eventProcessors = [\n    ...clientEventProcessors,\n    // Run scope event processors _after_ all other processors\n    ...data.eventProcessors,\n  ];\n\n  const result = notifyEventProcessors(eventProcessors, prepared, hint);\n\n  return result.then(evt => {\n    if (evt) {\n      // We apply the debug_meta field only after all event processors have ran, so that if any event processors modified\n      // file names (e.g.the RewriteFrames integration) the filename -> debug ID relationship isn't destroyed.\n      // This should not cause any PII issues, since we're only moving data that is already on the event and not adding\n      // any new data\n      applyDebugMeta(evt);\n    }\n\n    if (typeof normalizeDepth === 'number' && normalizeDepth > 0) {\n      return normalizeEvent(evt, normalizeDepth, normalizeMaxBreadth);\n    }\n    return evt;\n  });\n}\n\n/**\n * Enhances event using the client configuration.\n * It takes care of all \"static\" values like environment, release and `dist`,\n * as well as truncating overly long values.\n *\n * Only exported for tests.\n *\n * @param event event instance to be enhanced\n */\nexport function applyClientOptions(event: Event, options: ClientOptions): void {\n  const { environment, release, dist, maxValueLength = 250 } = options;\n\n  // empty strings do not make sense for environment, release, and dist\n  // so we handle them the same as if they were not provided\n  event.environment = event.environment || environment || DEFAULT_ENVIRONMENT;\n\n  if (!event.release && release) {\n    event.release = release;\n  }\n\n  if (!event.dist && dist) {\n    event.dist = dist;\n  }\n\n  const request = event.request;\n  if (request?.url) {\n    request.url = truncate(request.url, maxValueLength);\n  }\n}\n\n/**\n * Puts debug IDs into the stack frames of an error event.\n */\nexport function applyDebugIds(event: Event, stackParser: StackParser): void {\n  // Build a map of filename -> debug_id\n  const filenameDebugIdMap = getFilenameToDebugIdMap(stackParser);\n\n  event.exception?.values?.forEach(exception => {\n    exception.stacktrace?.frames?.forEach(frame => {\n      if (frame.filename) {\n        frame.debug_id = filenameDebugIdMap[frame.filename];\n      }\n    });\n  });\n}\n\n/**\n * Moves debug IDs from the stack frames of an error event into the debug_meta field.\n */\nexport function applyDebugMeta(event: Event): void {\n  // Extract debug IDs and filenames from the stack frames on the event.\n  const filenameDebugIdMap: Record<string, string> = {};\n  event.exception?.values?.forEach(exception => {\n    exception.stacktrace?.frames?.forEach(frame => {\n      if (frame.debug_id) {\n        if (frame.abs_path) {\n          filenameDebugIdMap[frame.abs_path] = frame.debug_id;\n        } else if (frame.filename) {\n          filenameDebugIdMap[frame.filename] = frame.debug_id;\n        }\n        delete frame.debug_id;\n      }\n    });\n  });\n\n  if (Object.keys(filenameDebugIdMap).length === 0) {\n    return;\n  }\n\n  // Fill debug_meta information\n  event.debug_meta = event.debug_meta || {};\n  event.debug_meta.images = event.debug_meta.images || [];\n  const images = event.debug_meta.images;\n  Object.entries(filenameDebugIdMap).forEach(([filename, debug_id]) => {\n    images.push({\n      type: 'sourcemap',\n      code_file: filename,\n      debug_id,\n    });\n  });\n}\n\n/**\n * This function adds all used integrations to the SDK info in the event.\n * @param event The event that will be filled with all integrations.\n */\nfunction applyIntegrationsMetadata(event: Event, integrationNames: string[]): void {\n  if (integrationNames.length > 0) {\n    event.sdk = event.sdk || {};\n    event.sdk.integrations = [...(event.sdk.integrations || []), ...integrationNames];\n  }\n}\n\n/**\n * Applies `normalize` function on necessary `Event` attributes to make them safe for serialization.\n * Normalized keys:\n * - `breadcrumbs.data`\n * - `user`\n * - `contexts`\n * - `extra`\n * @param event Event\n * @returns Normalized event\n */\nfunction normalizeEvent(event: Event | null, depth: number, maxBreadth: number): Event | null {\n  if (!event) {\n    return null;\n  }\n\n  const normalized: Event = {\n    ...event,\n    ...(event.breadcrumbs && {\n      breadcrumbs: event.breadcrumbs.map(b => ({\n        ...b,\n        ...(b.data && {\n          data: normalize(b.data, depth, maxBreadth),\n        }),\n      })),\n    }),\n    ...(event.user && {\n      user: normalize(event.user, depth, maxBreadth),\n    }),\n    ...(event.contexts && {\n      contexts: normalize(event.contexts, depth, maxBreadth),\n    }),\n    ...(event.extra && {\n      extra: normalize(event.extra, depth, maxBreadth),\n    }),\n  };\n\n  // event.contexts.trace stores information about a Transaction. Similarly,\n  // event.spans[] stores information about child Spans. Given that a\n  // Transaction is conceptually a Span, normalization should apply to both\n  // Transactions and Spans consistently.\n  // For now the decision is to skip normalization of Transactions and Spans,\n  // so this block overwrites the normalized event to add back the original\n  // Transaction information prior to normalization.\n  if (event.contexts?.trace && normalized.contexts) {\n    normalized.contexts.trace = event.contexts.trace;\n\n    // event.contexts.trace.data may contain circular/dangerous data so we need to normalize it\n    if (event.contexts.trace.data) {\n      normalized.contexts.trace.data = normalize(event.contexts.trace.data, depth, maxBreadth);\n    }\n  }\n\n  // event.spans[].data may contain circular/dangerous data so we need to normalize it\n  if (event.spans) {\n    normalized.spans = event.spans.map(span => {\n      return {\n        ...span,\n        ...(span.data && {\n          data: normalize(span.data, depth, maxBreadth),\n        }),\n      };\n    });\n  }\n\n  // event.contexts.flags (FeatureFlagContext) stores context for our feature\n  // flag integrations. It has a greater nesting depth than our other typed\n  // Contexts, so we re-normalize with a fixed depth of 3 here. We do not want\n  // to skip this in case of conflicting, user-provided context.\n  if (event.contexts?.flags && normalized.contexts) {\n    normalized.contexts.flags = normalize(event.contexts.flags, 3, maxBreadth);\n  }\n\n  return normalized;\n}\n\nfunction getFinalScope(scope: Scope | undefined, captureContext: CaptureContext | undefined): Scope | undefined {\n  if (!captureContext) {\n    return scope;\n  }\n\n  const finalScope = scope ? scope.clone() : new Scope();\n  finalScope.update(captureContext);\n  return finalScope;\n}\n\n/**\n * Parse either an `EventHint` directly, or convert a `CaptureContext` to an `EventHint`.\n * This is used to allow to update method signatures that used to accept a `CaptureContext` but should now accept an `EventHint`.\n */\nexport function parseEventHintOrCaptureContext(\n  hint: ExclusiveEventHintOrCaptureContext | undefined,\n): EventHint | undefined {\n  if (!hint) {\n    return undefined;\n  }\n\n  // If you pass a Scope or `() => Scope` as CaptureContext, we just return this as captureContext\n  if (hintIsScopeOrFunction(hint)) {\n    return { captureContext: hint };\n  }\n\n  if (hintIsScopeContext(hint)) {\n    return {\n      captureContext: hint,\n    };\n  }\n\n  return hint;\n}\n\nfunction hintIsScopeOrFunction(hint: CaptureContext | EventHint): hint is Scope | ((scope: Scope) => Scope) {\n  return hint instanceof Scope || typeof hint === 'function';\n}\n\ntype ScopeContextProperty = keyof ScopeContext;\nconst captureContextKeys: readonly ScopeContextProperty[] = [\n  'user',\n  'level',\n  'extra',\n  'contexts',\n  'tags',\n  'fingerprint',\n  'propagationContext',\n] as const;\n\nfunction hintIsScopeContext(hint: Partial<ScopeContext> | EventHint): hint is Partial<ScopeContext> {\n  return Object.keys(hint).some(key => captureContextKeys.includes(key as ScopeContextProperty));\n}\n", "import { getClient, getCurrentScope, getIsolationScope, withIsolationScope } from './currentScopes';\nimport { DEBUG_BUILD } from './debug-build';\nimport type { CaptureContext } from './scope';\nimport { closeSession, makeSession, updateSession } from './session';\nimport type { CheckIn, FinishedCheckIn, MonitorConfig } from './types-hoist/checkin';\nimport type { Event, EventHint } from './types-hoist/event';\nimport type { EventProcessor } from './types-hoist/eventprocessor';\nimport type { Extra, Extras } from './types-hoist/extra';\nimport type { Primitive } from './types-hoist/misc';\nimport type { Session, SessionContext } from './types-hoist/session';\nimport type { SeverityLevel } from './types-hoist/severity';\nimport type { User } from './types-hoist/user';\nimport type { ExclusiveEventHintOrCaptureContext } from './utils/prepareEvent';\nimport { parseEventHintOrCaptureContext } from './utils/prepareEvent';\nimport { isThenable } from './utils-hoist/is';\nimport { logger } from './utils-hoist/logger';\nimport { uuid4 } from './utils-hoist/misc';\nimport { timestampInSeconds } from './utils-hoist/time';\nimport { GLOBAL_OBJ } from './utils-hoist/worldwide';\n\n/**\n * Captures an exception event and sends it to Sentry.\n *\n * @param exception The exception to capture.\n * @param hint Optional additional data to attach to the Sentry event.\n * @returns the id of the captured Sentry event.\n */\nexport function captureException(exception: unknown, hint?: ExclusiveEventHintOrCaptureContext): string {\n  return getCurrentScope().captureException(exception, parseEventHintOrCaptureContext(hint));\n}\n\n/**\n * Captures a message event and sends it to Sentry.\n *\n * @param message The message to send to Sentry.\n * @param captureContext Define the level of the message or pass in additional data to attach to the message.\n * @returns the id of the captured message.\n */\nexport function captureMessage(message: string, captureContext?: CaptureContext | SeverityLevel): string {\n  // This is necessary to provide explicit scopes upgrade, without changing the original\n  // arity of the `captureMessage(message, level)` method.\n  const level = typeof captureContext === 'string' ? captureContext : undefined;\n  const context = typeof captureContext !== 'string' ? { captureContext } : undefined;\n  return getCurrentScope().captureMessage(message, level, context);\n}\n\n/**\n * Captures a manually created event and sends it to Sentry.\n *\n * @param event The event to send to Sentry.\n * @param hint Optional additional data to attach to the Sentry event.\n * @returns the id of the captured event.\n */\nexport function captureEvent(event: Event, hint?: EventHint): string {\n  return getCurrentScope().captureEvent(event, hint);\n}\n\n/**\n * Sets context data with the given name.\n * @param name of the context\n * @param context Any kind of data. This data will be normalized.\n */\nexport function setContext(name: string, context: { [key: string]: unknown } | null): void {\n  getIsolationScope().setContext(name, context);\n}\n\n/**\n * Set an object that will be merged sent as extra data with the event.\n * @param extras Extras object to merge into current context.\n */\nexport function setExtras(extras: Extras): void {\n  getIsolationScope().setExtras(extras);\n}\n\n/**\n * Set key:value that will be sent as extra data with the event.\n * @param key String of extra\n * @param extra Any kind of data. This data will be normalized.\n */\nexport function setExtra(key: string, extra: Extra): void {\n  getIsolationScope().setExtra(key, extra);\n}\n\n/**\n * Set an object that will be merged sent as tags data with the event.\n * @param tags Tags context object to merge into current context.\n */\nexport function setTags(tags: { [key: string]: Primitive }): void {\n  getIsolationScope().setTags(tags);\n}\n\n/**\n * Set key:value that will be sent as tags data with the event.\n *\n * Can also be used to unset a tag, by passing `undefined`.\n *\n * @param key String key of tag\n * @param value Value of tag\n */\nexport function setTag(key: string, value: Primitive): void {\n  getIsolationScope().setTag(key, value);\n}\n\n/**\n * Updates user context information for future events.\n *\n * @param user User context object to be set in the current context. Pass `null` to unset the user.\n */\nexport function setUser(user: User | null): void {\n  getIsolationScope().setUser(user);\n}\n\n/**\n * The last error event id of the isolation scope.\n *\n * Warning: This function really returns the last recorded error event id on the current\n * isolation scope. If you call this function after handling a certain error and another error\n * is captured in between, the last one is returned instead of the one you might expect.\n * Also, ids of events that were never sent to Sentry (for example because\n * they were dropped in `beforeSend`) could be returned.\n *\n * @returns The last event id of the isolation scope.\n */\nexport function lastEventId(): string | undefined {\n  return getIsolationScope().lastEventId();\n}\n\n/**\n * Create a cron monitor check in and send it to Sentry.\n *\n * @param checkIn An object that describes a check in.\n * @param upsertMonitorConfig An optional object that describes a monitor config. Use this if you want\n * to create a monitor automatically when sending a check in.\n */\nexport function captureCheckIn(checkIn: CheckIn, upsertMonitorConfig?: MonitorConfig): string {\n  const scope = getCurrentScope();\n  const client = getClient();\n  if (!client) {\n    DEBUG_BUILD && logger.warn('Cannot capture check-in. No client defined.');\n  } else if (!client.captureCheckIn) {\n    DEBUG_BUILD && logger.warn('Cannot capture check-in. Client does not support sending check-ins.');\n  } else {\n    return client.captureCheckIn(checkIn, upsertMonitorConfig, scope);\n  }\n\n  return uuid4();\n}\n\n/**\n * Wraps a callback with a cron monitor check in. The check in will be sent to Sentry when the callback finishes.\n *\n * @param monitorSlug The distinct slug of the monitor.\n * @param upsertMonitorConfig An optional object that describes a monitor config. Use this if you want\n * to create a monitor automatically when sending a check in.\n */\nexport function withMonitor<T>(\n  monitorSlug: CheckIn['monitorSlug'],\n  callback: () => T,\n  upsertMonitorConfig?: MonitorConfig,\n): T {\n  const checkInId = captureCheckIn({ monitorSlug, status: 'in_progress' }, upsertMonitorConfig);\n  const now = timestampInSeconds();\n\n  function finishCheckIn(status: FinishedCheckIn['status']): void {\n    captureCheckIn({ monitorSlug, status, checkInId, duration: timestampInSeconds() - now });\n  }\n\n  return withIsolationScope(() => {\n    let maybePromiseResult: T;\n    try {\n      maybePromiseResult = callback();\n    } catch (e) {\n      finishCheckIn('error');\n      throw e;\n    }\n\n    if (isThenable(maybePromiseResult)) {\n      Promise.resolve(maybePromiseResult).then(\n        () => {\n          finishCheckIn('ok');\n        },\n        e => {\n          finishCheckIn('error');\n          throw e;\n        },\n      );\n    } else {\n      finishCheckIn('ok');\n    }\n\n    return maybePromiseResult;\n  });\n}\n\n/**\n * Call `flush()` on the current client, if there is one. See {@link Client.flush}.\n *\n * @param timeout Maximum time in ms the client should wait to flush its event queue. Omitting this parameter will cause\n * the client to wait until all events are sent before resolving the promise.\n * @returns A promise which resolves to `true` if the queue successfully drains before the timeout, or `false` if it\n * doesn't (or if there's no client defined).\n */\nexport async function flush(timeout?: number): Promise<boolean> {\n  const client = getClient();\n  if (client) {\n    return client.flush(timeout);\n  }\n  DEBUG_BUILD && logger.warn('Cannot flush events. No client defined.');\n  return Promise.resolve(false);\n}\n\n/**\n * Call `close()` on the current client, if there is one. See {@link Client.close}.\n *\n * @param timeout Maximum time in ms the client should wait to flush its event queue before shutting down. Omitting this\n * parameter will cause the client to wait until all events are sent before disabling itself.\n * @returns A promise which resolves to `true` if the queue successfully drains before the timeout, or `false` if it\n * doesn't (or if there's no client defined).\n */\nexport async function close(timeout?: number): Promise<boolean> {\n  const client = getClient();\n  if (client) {\n    return client.close(timeout);\n  }\n  DEBUG_BUILD && logger.warn('Cannot flush events and disable SDK. No client defined.');\n  return Promise.resolve(false);\n}\n\n/**\n * Returns true if Sentry has been properly initialized.\n */\nexport function isInitialized(): boolean {\n  return !!getClient();\n}\n\n/** If the SDK is initialized & enabled. */\nexport function isEnabled(): boolean {\n  const client = getClient();\n  return client?.getOptions().enabled !== false && !!client?.getTransport();\n}\n\n/**\n * Add an event processor.\n * This will be added to the current isolation scope, ensuring any event that is processed in the current execution\n * context will have the processor applied.\n */\nexport function addEventProcessor(callback: EventProcessor): void {\n  getIsolationScope().addEventProcessor(callback);\n}\n\n/**\n * Start a session on the current isolation scope.\n *\n * @param context (optional) additional properties to be applied to the returned session object\n *\n * @returns the new active session\n */\nexport function startSession(context?: SessionContext): Session {\n  const isolationScope = getIsolationScope();\n  const currentScope = getCurrentScope();\n\n  // Will fetch userAgent if called from browser sdk\n  const { userAgent } = GLOBAL_OBJ.navigator || {};\n\n  const session = makeSession({\n    user: currentScope.getUser() || isolationScope.getUser(),\n    ...(userAgent && { userAgent }),\n    ...context,\n  });\n\n  // End existing session if there's one\n  const currentSession = isolationScope.getSession();\n  if (currentSession?.status === 'ok') {\n    updateSession(currentSession, { status: 'exited' });\n  }\n\n  endSession();\n\n  // Afterwards we set the new session on the scope\n  isolationScope.setSession(session);\n\n  return session;\n}\n\n/**\n * End the session on the current isolation scope.\n */\nexport function endSession(): void {\n  const isolationScope = getIsolationScope();\n  const currentScope = getCurrentScope();\n\n  const session = currentScope.getSession() || isolationScope.getSession();\n  if (session) {\n    closeSession(session);\n  }\n  _sendSessionUpdate();\n\n  // the session is over; take it off of the scope\n  isolationScope.setSession();\n}\n\n/**\n * Sends the current Session on the scope\n */\nfunction _sendSessionUpdate(): void {\n  const isolationScope = getIsolationScope();\n  const client = getClient();\n  const session = isolationScope.getSession();\n  if (session && client) {\n    client.captureSession(session);\n  }\n}\n\n/**\n * Sends the current session on the scope to Sentry\n *\n * @param end If set the session will be marked as exited and removed from the scope.\n *            Defaults to `false`.\n */\nexport function captureSession(end: boolean = false): void {\n  // both send the update and pull the session from the scope\n  if (end) {\n    endSession();\n    return;\n  }\n\n  // only send the update\n  _sendSessionUpdate();\n}\n", "import type { ReportDialogOptions } from './report-dialog';\nimport type { DsnComponents, DsnLike } from './types-hoist/dsn';\nimport type { SdkInfo } from './types-hoist/sdkinfo';\nimport { dsnToString, makeDsn } from './utils-hoist/dsn';\n\nconst SENTRY_API_VERSION = '7';\n\n/** Returns the prefix to construct Sentry ingestion API endpoints. */\nfunction getBaseApiEndpoint(dsn: DsnComponents): string {\n  const protocol = dsn.protocol ? `${dsn.protocol}:` : '';\n  const port = dsn.port ? `:${dsn.port}` : '';\n  return `${protocol}//${dsn.host}${port}${dsn.path ? `/${dsn.path}` : ''}/api/`;\n}\n\n/** Returns the ingest API endpoint for target. */\nfunction _getIngestEndpoint(dsn: DsnComponents): string {\n  return `${getBaseApiEndpoint(dsn)}${dsn.projectId}/envelope/`;\n}\n\n/** Returns a URL-encoded string with auth config suitable for a query string. */\nfunction _encodedAuth(dsn: DsnComponents, sdkInfo: SdkInfo | undefined): string {\n  const params: Record<string, string> = {\n    sentry_version: SENTRY_API_VERSION,\n  };\n\n  if (dsn.publicKey) {\n    // We send only the minimum set of required information. See\n    // https://github.com/getsentry/sentry-javascript/issues/2572.\n    params.sentry_key = dsn.publicKey;\n  }\n\n  if (sdkInfo) {\n    params.sentry_client = `${sdkInfo.name}/${sdkInfo.version}`;\n  }\n\n  return new URLSearchParams(params).toString();\n}\n\n/**\n * Returns the envelope endpoint URL with auth in the query string.\n *\n * Sending auth as part of the query string and not as custom HTTP headers avoids CORS preflight requests.\n */\nexport function getEnvelopeEndpointWithUrlEncodedAuth(dsn: DsnComponents, tunnel?: string, sdkInfo?: SdkInfo): string {\n  return tunnel ? tunnel : `${_getIngestEndpoint(dsn)}?${_encodedAuth(dsn, sdkInfo)}`;\n}\n\n/** Returns the url to the report dialog endpoint. */\nexport function getReportDialogEndpoint(dsnLike: DsnLike, dialogOptions: ReportDialogOptions): string {\n  const dsn = makeDsn(dsnLike);\n  if (!dsn) {\n    return '';\n  }\n\n  const endpoint = `${getBaseApiEndpoint(dsn)}embed/error-page/`;\n\n  let encodedOptions = `dsn=${dsnToString(dsn)}`;\n  for (const key in dialogOptions) {\n    if (key === 'dsn') {\n      continue;\n    }\n\n    if (key === 'onClose') {\n      continue;\n    }\n\n    if (key === 'user') {\n      const user = dialogOptions.user;\n      if (!user) {\n        continue;\n      }\n      if (user.name) {\n        encodedOptions += `&name=${encodeURIComponent(user.name)}`;\n      }\n      if (user.email) {\n        encodedOptions += `&email=${encodeURIComponent(user.email)}`;\n      }\n    } else {\n      encodedOptions += `&${encodeURIComponent(key)}=${encodeURIComponent(dialogOptions[key] as string)}`;\n    }\n  }\n\n  return `${endpoint}?${encodedOptions}`;\n}\n", "import type { Client } from './client';\nimport { getClient } from './currentScopes';\nimport { DEBUG_BUILD } from './debug-build';\nimport type { Event, EventHint } from './types-hoist/event';\nimport type { Integration, IntegrationFn } from './types-hoist/integration';\nimport type { Options } from './types-hoist/options';\nimport { logger } from './utils-hoist/logger';\n\nexport const installedIntegrations: string[] = [];\n\n/** Map of integrations assigned to a client */\nexport type IntegrationIndex = {\n  [key: string]: Integration;\n};\n\ntype IntegrationWithDefaultInstance = Integration & { isDefaultInstance?: true };\n\n/**\n * Remove duplicates from the given array, preferring the last instance of any duplicate. Not guaranteed to\n * preserve the order of integrations in the array.\n *\n * @private\n */\nfunction filterDuplicates(integrations: Integration[]): Integration[] {\n  const integrationsByName: { [key: string]: Integration } = {};\n\n  integrations.forEach((currentInstance: IntegrationWithDefaultInstance) => {\n    const { name } = currentInstance;\n\n    const existingInstance: IntegrationWithDefaultInstance | undefined = integrationsByName[name];\n\n    // We want integrations later in the array to overwrite earlier ones of the same type, except that we never want a\n    // default instance to overwrite an existing user instance\n    if (existingInstance && !existingInstance.isDefaultInstance && currentInstance.isDefaultInstance) {\n      return;\n    }\n\n    integrationsByName[name] = currentInstance;\n  });\n\n  return Object.values(integrationsByName);\n}\n\n/** Gets integrations to install */\nexport function getIntegrationsToSetup(options: Pick<Options, 'defaultIntegrations' | 'integrations'>): Integration[] {\n  const defaultIntegrations = options.defaultIntegrations || [];\n  const userIntegrations = options.integrations;\n\n  // We flag default instances, so that later we can tell them apart from any user-created instances of the same class\n  defaultIntegrations.forEach((integration: IntegrationWithDefaultInstance) => {\n    integration.isDefaultInstance = true;\n  });\n\n  let integrations: Integration[];\n\n  if (Array.isArray(userIntegrations)) {\n    integrations = [...defaultIntegrations, ...userIntegrations];\n  } else if (typeof userIntegrations === 'function') {\n    const resolvedUserIntegrations = userIntegrations(defaultIntegrations);\n    integrations = Array.isArray(resolvedUserIntegrations) ? resolvedUserIntegrations : [resolvedUserIntegrations];\n  } else {\n    integrations = defaultIntegrations;\n  }\n\n  return filterDuplicates(integrations);\n}\n\n/**\n * Given a list of integration instances this installs them all. When `withDefaults` is set to `true` then all default\n * integrations are added unless they were already provided before.\n * @param integrations array of integration instances\n * @param withDefault should enable default integrations\n */\nexport function setupIntegrations(client: Client, integrations: Integration[]): IntegrationIndex {\n  const integrationIndex: IntegrationIndex = {};\n\n  integrations.forEach((integration: Integration | undefined) => {\n    // guard against empty provided integrations\n    if (integration) {\n      setupIntegration(client, integration, integrationIndex);\n    }\n  });\n\n  return integrationIndex;\n}\n\n/**\n * Execute the `afterAllSetup` hooks of the given integrations.\n */\nexport function afterSetupIntegrations(client: Client, integrations: Integration[]): void {\n  for (const integration of integrations) {\n    // guard against empty provided integrations\n    if (integration?.afterAllSetup) {\n      integration.afterAllSetup(client);\n    }\n  }\n}\n\n/** Setup a single integration.  */\nexport function setupIntegration(client: Client, integration: Integration, integrationIndex: IntegrationIndex): void {\n  if (integrationIndex[integration.name]) {\n    DEBUG_BUILD && logger.log(`Integration skipped because it was already installed: ${integration.name}`);\n    return;\n  }\n  integrationIndex[integration.name] = integration;\n\n  // `setupOnce` is only called the first time\n  if (installedIntegrations.indexOf(integration.name) === -1 && typeof integration.setupOnce === 'function') {\n    integration.setupOnce();\n    installedIntegrations.push(integration.name);\n  }\n\n  // `setup` is run for each client\n  if (integration.setup && typeof integration.setup === 'function') {\n    integration.setup(client);\n  }\n\n  if (typeof integration.preprocessEvent === 'function') {\n    const callback = integration.preprocessEvent.bind(integration) as typeof integration.preprocessEvent;\n    client.on('preprocessEvent', (event, hint) => callback(event, hint, client));\n  }\n\n  if (typeof integration.processEvent === 'function') {\n    const callback = integration.processEvent.bind(integration) as typeof integration.processEvent;\n\n    const processor = Object.assign((event: Event, hint: EventHint) => callback(event, hint, client), {\n      id: integration.name,\n    });\n\n    client.addEventProcessor(processor);\n  }\n\n  DEBUG_BUILD && logger.log(`Integration installed: ${integration.name}`);\n}\n\n/** Add an integration to the current scope's client. */\nexport function addIntegration(integration: Integration): void {\n  const client = getClient();\n\n  if (!client) {\n    DEBUG_BUILD && logger.warn(`Cannot add integration \"${integration.name}\" because no SDK Client is available.`);\n    return;\n  }\n\n  client.addIntegration(integration);\n}\n\n/**\n * Define an integration function that can be used to create an integration instance.\n * Note that this by design hides the implementation details of the integration, as they are considered internal.\n */\nexport function defineIntegration<Fn extends IntegrationFn>(fn: Fn): (...args: Parameters<Fn>) => Integration {\n  return fn;\n}\n", "import type { Event } from '../types-hoist/event';\n\n/**\n * Get a list of possible event messages from a Sentry event.\n */\nexport function getPossibleEventMessages(event: Event): string[] {\n  const possibleMessages: string[] = [];\n\n  if (event.message) {\n    possibleMessages.push(event.message);\n  }\n\n  try {\n    // @ts-expect-error Try catching to save bundle size\n    const lastException = event.exception.values[event.exception.values.length - 1];\n    if (lastException?.value) {\n      possibleMessages.push(lastException.value);\n      if (lastException.type) {\n        possibleMessages.push(`${lastException.type}: ${lastException.value}`);\n      }\n    }\n  } catch (e) {\n    // ignore errors here\n  }\n\n  return possibleMessages;\n}\n", "import { SEMANTIC_ATTRIBUTE_EXCLUSIVE_TIME, SEMANTIC_ATTRIBUTE_PROFILE_ID } from '../semanticAttributes';\nimport type { TransactionEvent } from '../types-hoist/event';\nimport type { SpanJSON } from '../types-hoist/span';\n\n/**\n * Converts a transaction event to a span JSON object.\n */\nexport function convertTransactionEventToSpanJson(event: TransactionEvent): SpanJSON {\n  const { trace_id, parent_span_id, span_id, status, origin, data, op } = event.contexts?.trace ?? {};\n\n  return {\n    data: data ?? {},\n    description: event.transaction,\n    op,\n    parent_span_id,\n    span_id: span_id ?? '',\n    start_timestamp: event.start_timestamp ?? 0,\n    status,\n    timestamp: event.timestamp,\n    trace_id: trace_id ?? '',\n    origin,\n    profile_id: data?.[SEMANTIC_ATTRIBUTE_PROFILE_ID] as string | undefined,\n    exclusive_time: data?.[SEMANTIC_ATTRIBUTE_EXCLUSIVE_TIME] as number | undefined,\n    measurements: event.measurements,\n    is_segment: true,\n  };\n}\n\n/**\n * Converts a span JSON object to a transaction event.\n */\nexport function convertSpanJsonToTransactionEvent(span: SpanJSON): TransactionEvent {\n  return {\n    type: 'transaction',\n    timestamp: span.timestamp,\n    start_timestamp: span.start_timestamp,\n    transaction: span.description,\n    contexts: {\n      trace: {\n        trace_id: span.trace_id,\n        span_id: span.span_id,\n        parent_span_id: span.parent_span_id,\n        op: span.op,\n        status: span.status,\n        origin: span.origin,\n        data: {\n          ...span.data,\n          ...(span.profile_id && { [SEMANTIC_ATTRIBUTE_PROFILE_ID]: span.profile_id }),\n          ...(span.exclusive_time && { [SEMANTIC_ATTRIBUTE_EXCLUSIVE_TIME]: span.exclusive_time }),\n        },\n      },\n    },\n    measurements: span.measurements,\n  };\n}\n", "import type { ClientReport } from '../types-hoist/clientreport';\nimport type { ClientReportEnvelope, ClientReportItem } from '../types-hoist/envelope';\nimport { createEnvelope } from './envelope';\nimport { dateTimestampInSeconds } from './time';\n\n/**\n * Creates client report envelope\n * @param discarded_events An array of discard events\n * @param dsn A DSN that can be set on the header. Optional.\n */\nexport function createClientReportEnvelope(\n  discarded_events: ClientReport['discarded_events'],\n  dsn?: string,\n  timestamp?: number,\n): ClientReportEnvelope {\n  const clientReportItem: ClientReportItem = [\n    { type: 'client_report' },\n    {\n      timestamp: timestamp || dateTimestampInSeconds(),\n      discarded_events,\n    },\n  ];\n  return createEnvelope<ClientReportEnvelope>(dsn ? { dsn } : {}, [clientReportItem]);\n}\n", "/* eslint-disable max-lines */\nimport { getEnvelopeEndpointWithUrlEncodedAuth } from './api';\nimport { DEFAULT_ENVIRONMENT } from './constants';\nimport { getCurrentScope, getIsolationScope, getTraceContextFromScope } from './currentScopes';\nimport { DEBUG_BUILD } from './debug-build';\nimport { createEventEnvelope, createSessionEnvelope } from './envelope';\nimport type { IntegrationIndex } from './integration';\nimport { afterSetupIntegrations, setupIntegration, setupIntegrations } from './integration';\nimport type { Scope } from './scope';\nimport { updateSession } from './session';\nimport {\n  getDynamicSamplingContextFromScope,\n  getDynamicSamplingContextFromSpan,\n} from './tracing/dynamicSamplingContext';\nimport type { Breadcrumb, BreadcrumbHint, FetchBreadcrumbHint, XhrBreadcrumbHint } from './types-hoist/breadcrumb';\nimport type { CheckIn, MonitorConfig } from './types-hoist/checkin';\nimport type { EventDropReason, Outcome } from './types-hoist/clientreport';\nimport type { TraceContext } from './types-hoist/context';\nimport type { DataCategory } from './types-hoist/datacategory';\nimport type { DsnComponents } from './types-hoist/dsn';\nimport type { DynamicSamplingContext, Envelope } from './types-hoist/envelope';\nimport type { ErrorEvent, Event, EventHint, TransactionEvent } from './types-hoist/event';\nimport type { EventProcessor } from './types-hoist/eventprocessor';\nimport type { FeedbackEvent } from './types-hoist/feedback';\nimport type { Integration } from './types-hoist/integration';\nimport type { Log } from './types-hoist/log';\nimport type { ClientOptions } from './types-hoist/options';\nimport type { ParameterizedString } from './types-hoist/parameterize';\nimport type { SdkMetadata } from './types-hoist/sdkmetadata';\nimport type { Session, SessionAggregates } from './types-hoist/session';\nimport type { SeverityLevel } from './types-hoist/severity';\nimport type { Span, SpanAttributes, SpanContextData, SpanJSON } from './types-hoist/span';\nimport type { StartSpanOptions } from './types-hoist/startSpanOptions';\nimport type { Transport, TransportMakeRequestResponse } from './types-hoist/transport';\nimport { getPossibleEventMessages } from './utils/eventUtils';\nimport { merge } from './utils/merge';\nimport { parseSampleRate } from './utils/parseSampleRate';\nimport { prepareEvent } from './utils/prepareEvent';\nimport { _getSpanForScope } from './utils/spanOnScope';\nimport { showSpanDropWarning, spanToTraceContext } from './utils/spanUtils';\nimport { convertSpanJsonToTransactionEvent, convertTransactionEventToSpanJson } from './utils/transactionEvent';\nimport { createClientReportEnvelope } from './utils-hoist/clientreport';\nimport { dsnToString, makeDsn } from './utils-hoist/dsn';\nimport { addItemToEnvelope, createAttachmentEnvelopeItem } from './utils-hoist/envelope';\nimport { isParameterizedString, isPlainObject, isPrimitive, isThenable } from './utils-hoist/is';\nimport { logger } from './utils-hoist/logger';\nimport { checkOrSetAlreadyCaught, uuid4 } from './utils-hoist/misc';\nimport { rejectedSyncPromise, resolvedSyncPromise, SyncPromise } from './utils-hoist/syncpromise';\n\nconst ALREADY_SEEN_ERROR = \"Not capturing exception because it's already been captured.\";\nconst MISSING_RELEASE_FOR_SESSION_ERROR = 'Discarded session because of missing or non-string release';\n\nconst INTERNAL_ERROR_SYMBOL = Symbol.for('SentryInternalError');\nconst DO_NOT_SEND_EVENT_SYMBOL = Symbol.for('SentryDoNotSendEventError');\n\ninterface InternalError {\n  message: string;\n  [INTERNAL_ERROR_SYMBOL]: true;\n}\n\ninterface DoNotSendEventError {\n  message: string;\n  [DO_NOT_SEND_EVENT_SYMBOL]: true;\n}\n\nfunction _makeInternalError(message: string): InternalError {\n  return {\n    message,\n    [INTERNAL_ERROR_SYMBOL]: true,\n  };\n}\n\nfunction _makeDoNotSendEventError(message: string): DoNotSendEventError {\n  return {\n    message,\n    [DO_NOT_SEND_EVENT_SYMBOL]: true,\n  };\n}\n\nfunction _isInternalError(error: unknown): error is InternalError {\n  return !!error && typeof error === 'object' && INTERNAL_ERROR_SYMBOL in error;\n}\n\nfunction _isDoNotSendEventError(error: unknown): error is DoNotSendEventError {\n  return !!error && typeof error === 'object' && DO_NOT_SEND_EVENT_SYMBOL in error;\n}\n\n/**\n * Base implementation for all JavaScript SDK clients.\n *\n * Call the constructor with the corresponding options\n * specific to the client subclass. To access these options later, use\n * {@link Client.getOptions}.\n *\n * If a Dsn is specified in the options, it will be parsed and stored. Use\n * {@link Client.getDsn} to retrieve the Dsn at any moment. In case the Dsn is\n * invalid, the constructor will throw a {@link SentryException}. Note that\n * without a valid Dsn, the SDK will not send any events to Sentry.\n *\n * Before sending an event, it is passed through\n * {@link Client._prepareEvent} to add SDK information and scope data\n * (breadcrumbs and context). To add more custom information, override this\n * method and extend the resulting prepared event.\n *\n * To issue automatically created events (e.g. via instrumentation), use\n * {@link Client.captureEvent}. It will prepare the event and pass it through\n * the callback lifecycle. To issue auto-breadcrumbs, use\n * {@link Client.addBreadcrumb}.\n *\n * @example\n * class NodeClient extends Client<NodeOptions> {\n *   public constructor(options: NodeOptions) {\n *     super(options);\n *   }\n *\n *   // ...\n * }\n */\nexport abstract class Client<O extends ClientOptions = ClientOptions> {\n  /** Options passed to the SDK. */\n  protected readonly _options: O;\n\n  /** The client Dsn, if specified in options. Without this Dsn, the SDK will be disabled. */\n  protected readonly _dsn?: DsnComponents;\n\n  protected readonly _transport?: Transport;\n\n  /** Array of set up integrations. */\n  protected _integrations: IntegrationIndex;\n\n  /** Number of calls being processed */\n  protected _numProcessing: number;\n\n  protected _eventProcessors: EventProcessor[];\n\n  /** Holds flushable  */\n  private _outcomes: { [key: string]: number };\n\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  private _hooks: Record<string, Function[]>;\n\n  /**\n   * Initializes this client instance.\n   *\n   * @param options Options for the client.\n   */\n  protected constructor(options: O) {\n    this._options = options;\n    this._integrations = {};\n    this._numProcessing = 0;\n    this._outcomes = {};\n    this._hooks = {};\n    this._eventProcessors = [];\n\n    if (options.dsn) {\n      this._dsn = makeDsn(options.dsn);\n    } else {\n      DEBUG_BUILD && logger.warn('No DSN provided, client will not send events.');\n    }\n\n    if (this._dsn) {\n      const url = getEnvelopeEndpointWithUrlEncodedAuth(\n        this._dsn,\n        options.tunnel,\n        options._metadata ? options._metadata.sdk : undefined,\n      );\n      this._transport = options.transport({\n        tunnel: this._options.tunnel,\n        recordDroppedEvent: this.recordDroppedEvent.bind(this),\n        ...options.transportOptions,\n        url,\n      });\n    }\n  }\n\n  /**\n   * Captures an exception event and sends it to Sentry.\n   *\n   * Unlike `captureException` exported from every SDK, this method requires that you pass it the current scope.\n   */\n  public captureException(exception: unknown, hint?: EventHint, scope?: Scope): string {\n    const eventId = uuid4();\n\n    // ensure we haven't captured this very object before\n    if (checkOrSetAlreadyCaught(exception)) {\n      DEBUG_BUILD && logger.log(ALREADY_SEEN_ERROR);\n      return eventId;\n    }\n\n    const hintWithEventId = {\n      event_id: eventId,\n      ...hint,\n    };\n\n    this._process(\n      this.eventFromException(exception, hintWithEventId).then(event =>\n        this._captureEvent(event, hintWithEventId, scope),\n      ),\n    );\n\n    return hintWithEventId.event_id;\n  }\n\n  /**\n   * Captures a message event and sends it to Sentry.\n   *\n   * Unlike `captureMessage` exported from every SDK, this method requires that you pass it the current scope.\n   */\n  public captureMessage(\n    message: ParameterizedString,\n    level?: SeverityLevel,\n    hint?: EventHint,\n    currentScope?: Scope,\n  ): string {\n    const hintWithEventId = {\n      event_id: uuid4(),\n      ...hint,\n    };\n\n    const eventMessage = isParameterizedString(message) ? message : String(message);\n\n    const promisedEvent = isPrimitive(message)\n      ? this.eventFromMessage(eventMessage, level, hintWithEventId)\n      : this.eventFromException(message, hintWithEventId);\n\n    this._process(promisedEvent.then(event => this._captureEvent(event, hintWithEventId, currentScope)));\n\n    return hintWithEventId.event_id;\n  }\n\n  /**\n   * Captures a manually created event and sends it to Sentry.\n   *\n   * Unlike `captureEvent` exported from every SDK, this method requires that you pass it the current scope.\n   */\n  public captureEvent(event: Event, hint?: EventHint, currentScope?: Scope): string {\n    const eventId = uuid4();\n\n    // ensure we haven't captured this very object before\n    if (hint?.originalException && checkOrSetAlreadyCaught(hint.originalException)) {\n      DEBUG_BUILD && logger.log(ALREADY_SEEN_ERROR);\n      return eventId;\n    }\n\n    const hintWithEventId = {\n      event_id: eventId,\n      ...hint,\n    };\n\n    const sdkProcessingMetadata = event.sdkProcessingMetadata || {};\n    const capturedSpanScope: Scope | undefined = sdkProcessingMetadata.capturedSpanScope;\n    const capturedSpanIsolationScope: Scope | undefined = sdkProcessingMetadata.capturedSpanIsolationScope;\n\n    this._process(\n      this._captureEvent(event, hintWithEventId, capturedSpanScope || currentScope, capturedSpanIsolationScope),\n    );\n\n    return hintWithEventId.event_id;\n  }\n\n  /**\n   * Captures a session.\n   */\n  public captureSession(session: Session): void {\n    this.sendSession(session);\n    // After sending, we set init false to indicate it's not the first occurrence\n    updateSession(session, { init: false });\n  }\n\n  /**\n   * Create a cron monitor check in and send it to Sentry. This method is not available on all clients.\n   *\n   * @param checkIn An object that describes a check in.\n   * @param upsertMonitorConfig An optional object that describes a monitor config. Use this if you want\n   * to create a monitor automatically when sending a check in.\n   * @param scope An optional scope containing event metadata.\n   * @returns A string representing the id of the check in.\n   */\n  public captureCheckIn?(checkIn: CheckIn, monitorConfig?: MonitorConfig, scope?: Scope): string;\n\n  /**\n   * Get the current Dsn.\n   */\n  public getDsn(): DsnComponents | undefined {\n    return this._dsn;\n  }\n\n  /**\n   * Get the current options.\n   */\n  public getOptions(): O {\n    return this._options;\n  }\n\n  /**\n   * Get the SDK metadata.\n   * @see SdkMetadata\n   */\n  public getSdkMetadata(): SdkMetadata | undefined {\n    return this._options._metadata;\n  }\n\n  /**\n   * Returns the transport that is used by the client.\n   * Please note that the transport gets lazy initialized so it will only be there once the first event has been sent.\n   */\n  public getTransport(): Transport | undefined {\n    return this._transport;\n  }\n\n  /**\n   * Wait for all events to be sent or the timeout to expire, whichever comes first.\n   *\n   * @param timeout Maximum time in ms the client should wait for events to be flushed. Omitting this parameter will\n   *   cause the client to wait until all events are sent before resolving the promise.\n   * @returns A promise that will resolve with `true` if all events are sent before the timeout, or `false` if there are\n   * still events in the queue when the timeout is reached.\n   */\n  public flush(timeout?: number): PromiseLike<boolean> {\n    const transport = this._transport;\n    if (transport) {\n      this.emit('flush');\n      return this._isClientDoneProcessing(timeout).then(clientFinished => {\n        return transport.flush(timeout).then(transportFlushed => clientFinished && transportFlushed);\n      });\n    } else {\n      return resolvedSyncPromise(true);\n    }\n  }\n\n  /**\n   * Flush the event queue and set the client to `enabled = false`. See {@link Client.flush}.\n   *\n   * @param {number} timeout Maximum time in ms the client should wait before shutting down. Omitting this parameter will cause\n   *   the client to wait until all events are sent before disabling itself.\n   * @returns {Promise<boolean>} A promise which resolves to `true` if the flush completes successfully before the timeout, or `false` if\n   * it doesn't.\n   */\n  public close(timeout?: number): PromiseLike<boolean> {\n    return this.flush(timeout).then(result => {\n      this.getOptions().enabled = false;\n      this.emit('close');\n      return result;\n    });\n  }\n\n  /**\n   * Get all installed event processors.\n   */\n  public getEventProcessors(): EventProcessor[] {\n    return this._eventProcessors;\n  }\n\n  /**\n   * Adds an event processor that applies to any event processed by this client.\n   */\n  public addEventProcessor(eventProcessor: EventProcessor): void {\n    this._eventProcessors.push(eventProcessor);\n  }\n\n  /**\n   * Initialize this client.\n   * Call this after the client was set on a scope.\n   */\n  public init(): void {\n    if (\n      this._isEnabled() ||\n      // Force integrations to be setup even if no DSN was set when we have\n      // Spotlight enabled. This is particularly important for browser as we\n      // don't support the `spotlight` option there and rely on the users\n      // adding the `spotlightBrowserIntegration()` to their integrations which\n      // wouldn't get initialized with the check below when there's no DSN set.\n      this._options.integrations.some(({ name }) => name.startsWith('Spotlight'))\n    ) {\n      this._setupIntegrations();\n    }\n  }\n\n  /**\n   * Gets an installed integration by its name.\n   *\n   * @returns {Integration|undefined} The installed integration or `undefined` if no integration with that `name` was installed.\n   */\n  public getIntegrationByName<T extends Integration = Integration>(integrationName: string): T | undefined {\n    return this._integrations[integrationName] as T | undefined;\n  }\n\n  /**\n   * Add an integration to the client.\n   * This can be used to e.g. lazy load integrations.\n   * In most cases, this should not be necessary,\n   * and you're better off just passing the integrations via `integrations: []` at initialization time.\n   * However, if you find the need to conditionally load & add an integration, you can use `addIntegration` to do so.\n   */\n  public addIntegration(integration: Integration): void {\n    const isAlreadyInstalled = this._integrations[integration.name];\n\n    // This hook takes care of only installing if not already installed\n    setupIntegration(this, integration, this._integrations);\n    // Here we need to check manually to make sure to not run this multiple times\n    if (!isAlreadyInstalled) {\n      afterSetupIntegrations(this, [integration]);\n    }\n  }\n\n  /**\n   * Send a fully prepared event to Sentry.\n   */\n  public sendEvent(event: Event, hint: EventHint = {}): void {\n    this.emit('beforeSendEvent', event, hint);\n\n    let env = createEventEnvelope(event, this._dsn, this._options._metadata, this._options.tunnel);\n\n    for (const attachment of hint.attachments || []) {\n      env = addItemToEnvelope(env, createAttachmentEnvelopeItem(attachment));\n    }\n\n    const promise = this.sendEnvelope(env);\n    if (promise) {\n      promise.then(sendResponse => this.emit('afterSendEvent', event, sendResponse), null);\n    }\n  }\n\n  /**\n   * Send a session or session aggregrates to Sentry.\n   */\n  public sendSession(session: Session | SessionAggregates): void {\n    // Backfill release and environment on session\n    const { release: clientReleaseOption, environment: clientEnvironmentOption = DEFAULT_ENVIRONMENT } = this._options;\n    if ('aggregates' in session) {\n      const sessionAttrs = session.attrs || {};\n      if (!sessionAttrs.release && !clientReleaseOption) {\n        DEBUG_BUILD && logger.warn(MISSING_RELEASE_FOR_SESSION_ERROR);\n        return;\n      }\n      sessionAttrs.release = sessionAttrs.release || clientReleaseOption;\n      sessionAttrs.environment = sessionAttrs.environment || clientEnvironmentOption;\n      session.attrs = sessionAttrs;\n    } else {\n      if (!session.release && !clientReleaseOption) {\n        DEBUG_BUILD && logger.warn(MISSING_RELEASE_FOR_SESSION_ERROR);\n        return;\n      }\n      session.release = session.release || clientReleaseOption;\n      session.environment = session.environment || clientEnvironmentOption;\n    }\n\n    this.emit('beforeSendSession', session);\n\n    const env = createSessionEnvelope(session, this._dsn, this._options._metadata, this._options.tunnel);\n\n    // sendEnvelope should not throw\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.sendEnvelope(env);\n  }\n\n  /**\n   * Record on the client that an event got dropped (ie, an event that will not be sent to Sentry).\n   */\n  public recordDroppedEvent(reason: EventDropReason, category: DataCategory, count: number = 1): void {\n    if (this._options.sendClientReports) {\n      // We want to track each category (error, transaction, session, replay_event) separately\n      // but still keep the distinction between different type of outcomes.\n      // We could use nested maps, but it's much easier to read and type this way.\n      // A correct type for map-based implementation if we want to go that route\n      // would be `Partial<Record<SentryRequestType, Partial<Record<Outcome, number>>>>`\n      // With typescript 4.1 we could even use template literal types\n      const key = `${reason}:${category}`;\n      DEBUG_BUILD && logger.log(`Recording outcome: \"${key}\"${count > 1 ? ` (${count} times)` : ''}`);\n      this._outcomes[key] = (this._outcomes[key] || 0) + count;\n    }\n  }\n\n  /* eslint-disable @typescript-eslint/unified-signatures */\n  /**\n   * Register a callback for whenever a span is started.\n   * Receives the span as argument.\n   * @returns {() => void} A function that, when executed, removes the registered callback.\n   */\n  public on(hook: 'spanStart', callback: (span: Span) => void): () => void;\n\n  /**\n   * Register a callback before span sampling runs. Receives a `samplingDecision` object argument with a `decision`\n   * property that can be used to make a sampling decision that will be enforced, before any span sampling runs.\n   * @returns {() => void} A function that, when executed, removes the registered callback.\n   */\n  public on(\n    hook: 'beforeSampling',\n    callback: (\n      samplingData: {\n        spanAttributes: SpanAttributes;\n        spanName: string;\n        parentSampled?: boolean;\n        parentSampleRate?: number;\n        parentContext?: SpanContextData;\n      },\n      samplingDecision: { decision: boolean },\n    ) => void,\n  ): void;\n\n  /**\n   * Register a callback for whenever a span is ended.\n   * Receives the span as argument.\n   * @returns {() => void} A function that, when executed, removes the registered callback.\n   */\n  public on(hook: 'spanEnd', callback: (span: Span) => void): () => void;\n\n  /**\n   * Register a callback for when an idle span is allowed to auto-finish.\n   * @returns {() => void} A function that, when executed, removes the registered callback.\n   */\n  public on(hook: 'idleSpanEnableAutoFinish', callback: (span: Span) => void): () => void;\n\n  /**\n   * Register a callback for transaction start and finish.\n   * @returns {() => void} A function that, when executed, removes the registered callback.\n   */\n  public on(hook: 'beforeEnvelope', callback: (envelope: Envelope) => void): () => void;\n\n  /**\n   * Register a callback that runs when stack frame metadata should be applied to an event.\n   * @returns {() => void} A function that, when executed, removes the registered callback.\n   */\n  public on(hook: 'applyFrameMetadata', callback: (event: Event) => void): () => void;\n\n  /**\n   * Register a callback for before sending an event.\n   * This is called right before an event is sent and should not be used to mutate the event.\n   * Receives an Event & EventHint as arguments.\n   * @returns {() => void} A function that, when executed, removes the registered callback.\n   */\n  public on(hook: 'beforeSendEvent', callback: (event: Event, hint?: EventHint | undefined) => void): () => void;\n\n  /**\n   * Register a callback for before sending a session or session aggregrates..\n   * Receives the session/aggregate as second argument.\n   * @returns {() => void} A function that, when executed, removes the registered callback.\n   */\n  public on(hook: 'beforeSendSession', callback: (session: Session | SessionAggregates) => void): () => void;\n\n  /**\n   * Register a callback for preprocessing an event,\n   * before it is passed to (global) event processors.\n   * Receives an Event & EventHint as arguments.\n   * @returns {() => void} A function that, when executed, removes the registered callback.\n   */\n  public on(hook: 'preprocessEvent', callback: (event: Event, hint?: EventHint | undefined) => void): () => void;\n\n  /**\n   * Register a callback for postprocessing an event,\n   * after it was passed to (global) event processors, before it is being sent.\n   * Receives an Event & EventHint as arguments.\n   * @returns {() => void} A function that, when executed, removes the registered callback.\n   */\n  public on(hook: 'postprocessEvent', callback: (event: Event, hint?: EventHint | undefined) => void): () => void;\n\n  /**\n   * Register a callback for when an event has been sent.\n   * @returns {() => void} A function that, when executed, removes the registered callback.\n   */\n  public on(\n    hook: 'afterSendEvent',\n    callback: (event: Event, sendResponse: TransportMakeRequestResponse) => void,\n  ): () => void;\n\n  /**\n   * Register a callback before a breadcrumb is added.\n   * @returns {() => void} A function that, when executed, removes the registered callback.\n   */\n  public on(hook: 'beforeAddBreadcrumb', callback: (breadcrumb: Breadcrumb, hint?: BreadcrumbHint) => void): () => void;\n\n  /**\n   * Register a callback when a DSC (Dynamic Sampling Context) is created.\n   * @returns {() => void} A function that, when executed, removes the registered callback.\n   */\n  public on(hook: 'createDsc', callback: (dsc: DynamicSamplingContext, rootSpan?: Span) => void): () => void;\n\n  /**\n   * Register a callback when a Feedback event has been prepared.\n   * This should be used to mutate the event. The options argument can hint\n   * about what kind of mutation it expects.\n   * @returns {() => void} A function that, when executed, removes the registered callback.\n   */\n  public on(\n    hook: 'beforeSendFeedback',\n    callback: (feedback: FeedbackEvent, options?: { includeReplay?: boolean }) => void,\n  ): () => void;\n\n  /**\n   * Register a callback when the feedback widget is opened in a user's browser\n   */\n  public on(hook: 'openFeedbackWidget', callback: () => void): () => void;\n\n  /**\n   * A hook for the browser tracing integrations to trigger a span start for a page load.\n   * @returns {() => void} A function that, when executed, removes the registered callback.\n   */\n  public on(\n    hook: 'startPageLoadSpan',\n    callback: (\n      options: StartSpanOptions,\n      traceOptions?: { sentryTrace?: string | undefined; baggage?: string | undefined },\n    ) => void,\n  ): () => void;\n\n  /**\n   * A hook for browser tracing integrations to trigger a span for a navigation.\n   * @returns {() => void} A function that, when executed, removes the registered callback.\n   */\n  public on(hook: 'startNavigationSpan', callback: (options: StartSpanOptions) => void): () => void;\n\n  /**\n   * A hook for GraphQL client integration to enhance a span with request data.\n   * @returns A function that, when executed, removes the registered callback.\n   */\n  public on(\n    hook: 'beforeOutgoingRequestSpan',\n    callback: (span: Span, hint: XhrBreadcrumbHint | FetchBreadcrumbHint) => void,\n  ): () => void;\n\n  /**\n   * A hook for GraphQL client integration to enhance a breadcrumb with request data.\n   * @returns A function that, when executed, removes the registered callback.\n   */\n  public on(\n    hook: 'beforeOutgoingRequestBreadcrumb',\n    callback: (breadcrumb: Breadcrumb, hint: XhrBreadcrumbHint | FetchBreadcrumbHint) => void,\n  ): () => void;\n\n  /**\n   * A hook that is called when the client is flushing\n   * @returns {() => void} A function that, when executed, removes the registered callback.\n   */\n  public on(hook: 'flush', callback: () => void): () => void;\n\n  /**\n   * A hook that is called when the client is closing\n   * @returns {() => void} A function that, when executed, removes the registered callback.\n   */\n  public on(hook: 'close', callback: () => void): () => void;\n\n  /**\n   * A hook that is called before a log is captured. This hooks runs before `beforeSendLog` is fired.\n   *\n   * @returns {() => void} A function that, when executed, removes the registered callback.\n   */\n  public on(hook: 'beforeCaptureLog', callback: (log: Log) => void): () => void;\n\n  /**\n   * A hook that is called after a log is captured\n   *\n   * @returns {() => void} A function that, when executed, removes the registered callback.\n   */\n  public on(hook: 'afterCaptureLog', callback: (log: Log) => void): () => void;\n\n  /**\n   * A hook that is called when the client is flushing logs\n   *\n   * @returns {() => void} A function that, when executed, removes the registered callback.\n   */\n  public on(hook: 'flushLogs', callback: () => void): () => void;\n\n  /**\n   * Register a hook on this client.\n   */\n  public on(hook: string, callback: unknown): () => void {\n    const hooks = (this._hooks[hook] = this._hooks[hook] || []);\n\n    // @ts-expect-error We assume the types are correct\n    hooks.push(callback);\n\n    // This function returns a callback execution handler that, when invoked,\n    // deregisters a callback. This is crucial for managing instances where callbacks\n    // need to be unregistered to prevent self-referencing in callback closures,\n    // ensuring proper garbage collection.\n    return () => {\n      // @ts-expect-error We assume the types are correct\n      const cbIndex = hooks.indexOf(callback);\n      if (cbIndex > -1) {\n        hooks.splice(cbIndex, 1);\n      }\n    };\n  }\n\n  /** Fire a hook whenever a span starts. */\n  public emit(hook: 'spanStart', span: Span): void;\n\n  /** A hook that is called every time before a span is sampled. */\n  public emit(\n    hook: 'beforeSampling',\n    samplingData: {\n      spanAttributes: SpanAttributes;\n      spanName: string;\n      parentSampled?: boolean;\n      parentSampleRate?: number;\n      parentContext?: SpanContextData;\n    },\n    samplingDecision: { decision: boolean },\n  ): void;\n\n  /** Fire a hook whenever a span ends. */\n  public emit(hook: 'spanEnd', span: Span): void;\n\n  /**\n   * Fire a hook indicating that an idle span is allowed to auto finish.\n   */\n  public emit(hook: 'idleSpanEnableAutoFinish', span: Span): void;\n\n  /*\n   * Fire a hook event for envelope creation and sending. Expects to be given an envelope as the\n   * second argument.\n   */\n  public emit(hook: 'beforeEnvelope', envelope: Envelope): void;\n\n  /*\n   * Fire a hook indicating that stack frame metadata should be applied to the event passed to the hook.\n   */\n  public emit(hook: 'applyFrameMetadata', event: Event): void;\n\n  /**\n   * Fire a hook event before sending an event.\n   * This is called right before an event is sent and should not be used to mutate the event.\n   * Expects to be given an Event & EventHint as the second/third argument.\n   */\n  public emit(hook: 'beforeSendEvent', event: Event, hint?: EventHint): void;\n\n  /**\n   * Fire a hook event before sending a session/aggregates.\n   * Expects to be given the prepared session/aggregates as second argument.\n   */\n  public emit(hook: 'beforeSendSession', session: Session | SessionAggregates): void;\n\n  /**\n   * Fire a hook event to process events before they are passed to (global) event processors.\n   * Expects to be given an Event & EventHint as the second/third argument.\n   */\n  public emit(hook: 'preprocessEvent', event: Event, hint?: EventHint): void;\n\n  /**\n   * Fire a hook event to process a user on an event before it is sent to Sentry, after all other processors have run.\n   * Expects to be given an Event & EventHint as the second/third argument.\n   */\n  public emit(hook: 'postprocessEvent', event: Event, hint?: EventHint): void;\n\n  /*\n   * Fire a hook event after sending an event. Expects to be given an Event as the\n   * second argument.\n   */\n  public emit(hook: 'afterSendEvent', event: Event, sendResponse: TransportMakeRequestResponse): void;\n\n  /**\n   * Fire a hook for when a breadcrumb is added. Expects the breadcrumb as second argument.\n   */\n  public emit(hook: 'beforeAddBreadcrumb', breadcrumb: Breadcrumb, hint?: BreadcrumbHint): void;\n\n  /**\n   * Fire a hook for when a DSC (Dynamic Sampling Context) is created. Expects the DSC as second argument.\n   */\n  public emit(hook: 'createDsc', dsc: DynamicSamplingContext, rootSpan?: Span): void;\n\n  /**\n   * Fire a hook event for after preparing a feedback event. Events to be given\n   * a feedback event as the second argument, and an optional options object as\n   * third argument.\n   */\n  public emit(hook: 'beforeSendFeedback', feedback: FeedbackEvent, options?: { includeReplay?: boolean }): void;\n\n  /**\n   * Fire a hook event for when the feedback widget is opened in a user's browser\n   */\n  public emit(hook: 'openFeedbackWidget'): void;\n\n  /**\n   * Emit a hook event for browser tracing integrations to trigger a span start for a page load.\n   */\n  public emit(\n    hook: 'startPageLoadSpan',\n    options: StartSpanOptions,\n    traceOptions?: { sentryTrace?: string | undefined; baggage?: string | undefined },\n  ): void;\n\n  /**\n   * Emit a hook event for browser tracing integrations to trigger a span for a navigation.\n   */\n  public emit(hook: 'startNavigationSpan', options: StartSpanOptions): void;\n\n  /**\n   * Emit a hook event for GraphQL client integration to enhance a span with request data.\n   */\n  public emit(hook: 'beforeOutgoingRequestSpan', span: Span, hint: XhrBreadcrumbHint | FetchBreadcrumbHint): void;\n\n  /**\n   * Emit a hook event for GraphQL client integration to enhance a breadcrumb with request data.\n   */\n  public emit(\n    hook: 'beforeOutgoingRequestBreadcrumb',\n    breadcrumb: Breadcrumb,\n    hint: XhrBreadcrumbHint | FetchBreadcrumbHint,\n  ): void;\n\n  /**\n   * Emit a hook event for client flush\n   */\n  public emit(hook: 'flush'): void;\n\n  /**\n   * Emit a hook event for client close\n   */\n  public emit(hook: 'close'): void;\n\n  /**\n   * Emit a hook event for client before capturing a log. This hooks runs before `beforeSendLog` is fired.\n   */\n  public emit(hook: 'beforeCaptureLog', log: Log): void;\n\n  /**\n   * Emit a hook event for client after capturing a log.\n   */\n  public emit(hook: 'afterCaptureLog', log: Log): void;\n\n  /**\n   * Emit a hook event for client flush logs\n   */\n  public emit(hook: 'flushLogs'): void;\n\n  /**\n   * Emit a hook that was previously registered via `on()`.\n   */\n  public emit(hook: string, ...rest: unknown[]): void {\n    const callbacks = this._hooks[hook];\n    if (callbacks) {\n      callbacks.forEach(callback => callback(...rest));\n    }\n  }\n\n  /**\n   * Send an envelope to Sentry.\n   */\n  public sendEnvelope(envelope: Envelope): PromiseLike<TransportMakeRequestResponse> {\n    this.emit('beforeEnvelope', envelope);\n\n    if (this._isEnabled() && this._transport) {\n      return this._transport.send(envelope).then(null, reason => {\n        DEBUG_BUILD && logger.error('Error while sending envelope:', reason);\n        return reason;\n      });\n    }\n\n    DEBUG_BUILD && logger.error('Transport disabled');\n\n    return resolvedSyncPromise({});\n  }\n\n  /* eslint-enable @typescript-eslint/unified-signatures */\n\n  /** Setup integrations for this client. */\n  protected _setupIntegrations(): void {\n    const { integrations } = this._options;\n    this._integrations = setupIntegrations(this, integrations);\n    afterSetupIntegrations(this, integrations);\n  }\n\n  /** Updates existing session based on the provided event */\n  protected _updateSessionFromEvent(session: Session, event: Event): void {\n    let crashed = event.level === 'fatal';\n    let errored = false;\n    const exceptions = event.exception?.values;\n\n    if (exceptions) {\n      errored = true;\n\n      for (const ex of exceptions) {\n        const mechanism = ex.mechanism;\n        if (mechanism?.handled === false) {\n          crashed = true;\n          break;\n        }\n      }\n    }\n\n    // A session is updated and that session update is sent in only one of the two following scenarios:\n    // 1. Session with non terminal status and 0 errors + an error occurred -> Will set error count to 1 and send update\n    // 2. Session with non terminal status and 1 error + a crash occurred -> Will set status crashed and send update\n    const sessionNonTerminal = session.status === 'ok';\n    const shouldUpdateAndSend = (sessionNonTerminal && session.errors === 0) || (sessionNonTerminal && crashed);\n\n    if (shouldUpdateAndSend) {\n      updateSession(session, {\n        ...(crashed && { status: 'crashed' }),\n        errors: session.errors || Number(errored || crashed),\n      });\n      this.captureSession(session);\n    }\n  }\n\n  /**\n   * Determine if the client is finished processing. Returns a promise because it will wait `timeout` ms before saying\n   * \"no\" (resolving to `false`) in order to give the client a chance to potentially finish first.\n   *\n   * @param timeout The time, in ms, after which to resolve to `false` if the client is still busy. Passing `0` (or not\n   * passing anything) will make the promise wait as long as it takes for processing to finish before resolving to\n   * `true`.\n   * @returns A promise which will resolve to `true` if processing is already done or finishes before the timeout, and\n   * `false` otherwise\n   */\n  protected _isClientDoneProcessing(timeout?: number): PromiseLike<boolean> {\n    return new SyncPromise(resolve => {\n      let ticked: number = 0;\n      const tick: number = 1;\n\n      const interval = setInterval(() => {\n        if (this._numProcessing == 0) {\n          clearInterval(interval);\n          resolve(true);\n        } else {\n          ticked += tick;\n          if (timeout && ticked >= timeout) {\n            clearInterval(interval);\n            resolve(false);\n          }\n        }\n      }, tick);\n    });\n  }\n\n  /** Determines whether this SDK is enabled and a transport is present. */\n  protected _isEnabled(): boolean {\n    return this.getOptions().enabled !== false && this._transport !== undefined;\n  }\n\n  /**\n   * Adds common information to events.\n   *\n   * The information includes release and environment from `options`,\n   * breadcrumbs and context (extra, tags and user) from the scope.\n   *\n   * Information that is already present in the event is never overwritten. For\n   * nested objects, such as the context, keys are merged.\n   *\n   * @param event The original event.\n   * @param hint May contain additional information about the original exception.\n   * @param currentScope A scope containing event metadata.\n   * @returns A new event with more information.\n   */\n  protected _prepareEvent(\n    event: Event,\n    hint: EventHint,\n    currentScope: Scope,\n    isolationScope: Scope,\n  ): PromiseLike<Event | null> {\n    const options = this.getOptions();\n    const integrations = Object.keys(this._integrations);\n    if (!hint.integrations && integrations?.length) {\n      hint.integrations = integrations;\n    }\n\n    this.emit('preprocessEvent', event, hint);\n\n    if (!event.type) {\n      isolationScope.setLastEventId(event.event_id || hint.event_id);\n    }\n\n    return prepareEvent(options, event, hint, currentScope, this, isolationScope).then(evt => {\n      if (evt === null) {\n        return evt;\n      }\n\n      this.emit('postprocessEvent', evt, hint);\n\n      evt.contexts = {\n        trace: getTraceContextFromScope(currentScope),\n        ...evt.contexts,\n      };\n\n      const dynamicSamplingContext = getDynamicSamplingContextFromScope(this, currentScope);\n\n      evt.sdkProcessingMetadata = {\n        dynamicSamplingContext,\n        ...evt.sdkProcessingMetadata,\n      };\n\n      return evt;\n    });\n  }\n\n  /**\n   * Processes the event and logs an error in case of rejection\n   * @param event\n   * @param hint\n   * @param scope\n   */\n  protected _captureEvent(\n    event: Event,\n    hint: EventHint = {},\n    currentScope = getCurrentScope(),\n    isolationScope = getIsolationScope(),\n  ): PromiseLike<string | undefined> {\n    if (DEBUG_BUILD && isErrorEvent(event)) {\n      logger.log(`Captured error event \\`${getPossibleEventMessages(event)[0] || '<unknown>'}\\``);\n    }\n\n    return this._processEvent(event, hint, currentScope, isolationScope).then(\n      finalEvent => {\n        return finalEvent.event_id;\n      },\n      reason => {\n        if (DEBUG_BUILD) {\n          if (_isDoNotSendEventError(reason)) {\n            logger.log(reason.message);\n          } else if (_isInternalError(reason)) {\n            logger.warn(reason.message);\n          } else {\n            logger.warn(reason);\n          }\n        }\n        return undefined;\n      },\n    );\n  }\n\n  /**\n   * Processes an event (either error or message) and sends it to Sentry.\n   *\n   * This also adds breadcrumbs and context information to the event. However,\n   * platform specific meta data (such as the User's IP address) must be added\n   * by the SDK implementor.\n   *\n   *\n   * @param event The event to send to Sentry.\n   * @param hint May contain additional information about the original exception.\n   * @param currentScope A scope containing event metadata.\n   * @returns A SyncPromise that resolves with the event or rejects in case event was/will not be send.\n   */\n  protected _processEvent(\n    event: Event,\n    hint: EventHint,\n    currentScope: Scope,\n    isolationScope: Scope,\n  ): PromiseLike<Event> {\n    const options = this.getOptions();\n    const { sampleRate } = options;\n\n    const isTransaction = isTransactionEvent(event);\n    const isError = isErrorEvent(event);\n    const eventType = event.type || 'error';\n    const beforeSendLabel = `before send for type \\`${eventType}\\``;\n\n    // 1.0 === 100% events are sent\n    // 0.0 === 0% events are sent\n    // Sampling for transaction happens somewhere else\n    const parsedSampleRate = typeof sampleRate === 'undefined' ? undefined : parseSampleRate(sampleRate);\n    if (isError && typeof parsedSampleRate === 'number' && Math.random() > parsedSampleRate) {\n      this.recordDroppedEvent('sample_rate', 'error');\n      return rejectedSyncPromise(\n        _makeDoNotSendEventError(\n          `Discarding event because it's not included in the random sample (sampling rate = ${sampleRate})`,\n        ),\n      );\n    }\n\n    const dataCategory = (eventType === 'replay_event' ? 'replay' : eventType) satisfies DataCategory;\n\n    return this._prepareEvent(event, hint, currentScope, isolationScope)\n      .then(prepared => {\n        if (prepared === null) {\n          this.recordDroppedEvent('event_processor', dataCategory);\n          throw _makeDoNotSendEventError('An event processor returned `null`, will not send event.');\n        }\n\n        const isInternalException = hint.data && (hint.data as { __sentry__: boolean }).__sentry__ === true;\n        if (isInternalException) {\n          return prepared;\n        }\n\n        const result = processBeforeSend(this, options, prepared, hint);\n        return _validateBeforeSendResult(result, beforeSendLabel);\n      })\n      .then(processedEvent => {\n        if (processedEvent === null) {\n          this.recordDroppedEvent('before_send', dataCategory);\n          if (isTransaction) {\n            const spans = event.spans || [];\n            // the transaction itself counts as one span, plus all the child spans that are added\n            const spanCount = 1 + spans.length;\n            this.recordDroppedEvent('before_send', 'span', spanCount);\n          }\n          throw _makeDoNotSendEventError(`${beforeSendLabel} returned \\`null\\`, will not send event.`);\n        }\n\n        const session = currentScope.getSession() || isolationScope.getSession();\n        if (isError && session) {\n          this._updateSessionFromEvent(session, processedEvent);\n        }\n\n        if (isTransaction) {\n          const spanCountBefore = processedEvent.sdkProcessingMetadata?.spanCountBeforeProcessing || 0;\n          const spanCountAfter = processedEvent.spans ? processedEvent.spans.length : 0;\n\n          const droppedSpanCount = spanCountBefore - spanCountAfter;\n          if (droppedSpanCount > 0) {\n            this.recordDroppedEvent('before_send', 'span', droppedSpanCount);\n          }\n        }\n\n        // None of the Sentry built event processor will update transaction name,\n        // so if the transaction name has been changed by an event processor, we know\n        // it has to come from custom event processor added by a user\n        const transactionInfo = processedEvent.transaction_info;\n        if (isTransaction && transactionInfo && processedEvent.transaction !== event.transaction) {\n          const source = 'custom';\n          processedEvent.transaction_info = {\n            ...transactionInfo,\n            source,\n          };\n        }\n\n        this.sendEvent(processedEvent, hint);\n        return processedEvent;\n      })\n      .then(null, reason => {\n        if (_isDoNotSendEventError(reason) || _isInternalError(reason)) {\n          throw reason;\n        }\n\n        this.captureException(reason, {\n          data: {\n            __sentry__: true,\n          },\n          originalException: reason,\n        });\n        throw _makeInternalError(\n          `Event processing pipeline threw an error, original event will not be sent. Details have been sent as a new event.\\nReason: ${reason}`,\n        );\n      });\n  }\n\n  /**\n   * Occupies the client with processing and event\n   */\n  protected _process<T>(promise: PromiseLike<T>): void {\n    this._numProcessing++;\n    void promise.then(\n      value => {\n        this._numProcessing--;\n        return value;\n      },\n      reason => {\n        this._numProcessing--;\n        return reason;\n      },\n    );\n  }\n\n  /**\n   * Clears outcomes on this client and returns them.\n   */\n  protected _clearOutcomes(): Outcome[] {\n    const outcomes = this._outcomes;\n    this._outcomes = {};\n    return Object.entries(outcomes).map(([key, quantity]) => {\n      const [reason, category] = key.split(':') as [EventDropReason, DataCategory];\n      return {\n        reason,\n        category,\n        quantity,\n      };\n    });\n  }\n\n  /**\n   * Sends client reports as an envelope.\n   */\n  protected _flushOutcomes(): void {\n    DEBUG_BUILD && logger.log('Flushing outcomes...');\n\n    const outcomes = this._clearOutcomes();\n\n    if (outcomes.length === 0) {\n      DEBUG_BUILD && logger.log('No outcomes to send');\n      return;\n    }\n\n    // This is really the only place where we want to check for a DSN and only send outcomes then\n    if (!this._dsn) {\n      DEBUG_BUILD && logger.log('No dsn provided, will not send outcomes');\n      return;\n    }\n\n    DEBUG_BUILD && logger.log('Sending outcomes:', outcomes);\n\n    const envelope = createClientReportEnvelope(outcomes, this._options.tunnel && dsnToString(this._dsn));\n\n    // sendEnvelope should not throw\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.sendEnvelope(envelope);\n  }\n\n  /**\n   * Creates an {@link Event} from all inputs to `captureException` and non-primitive inputs to `captureMessage`.\n   */\n  public abstract eventFromException(_exception: unknown, _hint?: EventHint): PromiseLike<Event>;\n\n  /**\n   * Creates an {@link Event} from primitive inputs to `captureMessage`.\n   */\n  public abstract eventFromMessage(\n    _message: ParameterizedString,\n    _level?: SeverityLevel,\n    _hint?: EventHint,\n  ): PromiseLike<Event>;\n}\n\n/**\n * @deprecated Use `Client` instead. This alias may be removed in a future major version.\n */\n// TODO(v10): Remove\nexport type BaseClient = Client;\n\n/**\n * @deprecated Use `Client` instead. This alias may be removed in a future major version.\n */\n// TODO(v10): Remove\nexport const BaseClient = Client;\n\n/**\n * Verifies that return value of configured `beforeSend` or `beforeSendTransaction` is of expected type, and returns the value if so.\n */\nfunction _validateBeforeSendResult(\n  beforeSendResult: PromiseLike<Event | null> | Event | null,\n  beforeSendLabel: string,\n): PromiseLike<Event | null> | Event | null {\n  const invalidValueError = `${beforeSendLabel} must return \\`null\\` or a valid event.`;\n  if (isThenable(beforeSendResult)) {\n    return beforeSendResult.then(\n      event => {\n        if (!isPlainObject(event) && event !== null) {\n          throw _makeInternalError(invalidValueError);\n        }\n        return event;\n      },\n      e => {\n        throw _makeInternalError(`${beforeSendLabel} rejected with ${e}`);\n      },\n    );\n  } else if (!isPlainObject(beforeSendResult) && beforeSendResult !== null) {\n    throw _makeInternalError(invalidValueError);\n  }\n  return beforeSendResult;\n}\n\n/**\n * Process the matching `beforeSendXXX` callback.\n */\nfunction processBeforeSend(\n  client: Client,\n  options: ClientOptions,\n  event: Event,\n  hint: EventHint,\n): PromiseLike<Event | null> | Event | null {\n  const { beforeSend, beforeSendTransaction, beforeSendSpan } = options;\n  let processedEvent = event;\n\n  if (isErrorEvent(processedEvent) && beforeSend) {\n    return beforeSend(processedEvent, hint);\n  }\n\n  if (isTransactionEvent(processedEvent)) {\n    if (beforeSendSpan) {\n      // process root span\n      const processedRootSpanJson = beforeSendSpan(convertTransactionEventToSpanJson(processedEvent));\n      if (!processedRootSpanJson) {\n        showSpanDropWarning();\n      } else {\n        // update event with processed root span values\n        processedEvent = merge(event, convertSpanJsonToTransactionEvent(processedRootSpanJson));\n      }\n\n      // process child spans\n      if (processedEvent.spans) {\n        const processedSpans: SpanJSON[] = [];\n        for (const span of processedEvent.spans) {\n          const processedSpan = beforeSendSpan(span);\n          if (!processedSpan) {\n            showSpanDropWarning();\n            processedSpans.push(span);\n          } else {\n            processedSpans.push(processedSpan);\n          }\n        }\n        processedEvent.spans = processedSpans;\n      }\n    }\n\n    if (beforeSendTransaction) {\n      if (processedEvent.spans) {\n        // We store the # of spans before processing in SDK metadata,\n        // so we can compare it afterwards to determine how many spans were dropped\n        const spanCountBefore = processedEvent.spans.length;\n        processedEvent.sdkProcessingMetadata = {\n          ...event.sdkProcessingMetadata,\n          spanCountBeforeProcessing: spanCountBefore,\n        };\n      }\n      return beforeSendTransaction(processedEvent as TransactionEvent, hint);\n    }\n  }\n\n  return processedEvent;\n}\n\nfunction isErrorEvent(event: Event): event is ErrorEvent {\n  return event.type === undefined;\n}\n\nfunction isTransactionEvent(event: Event): event is TransactionEvent {\n  return event.type === 'transaction';\n}\n\n/** Extract trace information from scope */\nexport function _getTraceInfoFromScope(\n  client: Client,\n  scope: Scope | undefined,\n): [dynamicSamplingContext: Partial<DynamicSamplingContext> | undefined, traceContext: TraceContext | undefined] {\n  if (!scope) {\n    return [undefined, undefined];\n  }\n\n  const span = _getSpanForScope(scope);\n  const traceContext = span ? spanToTraceContext(span) : getTraceContextFromScope(scope);\n  const dynamicSamplingContext = span\n    ? getDynamicSamplingContextFromSpan(span)\n    : getDynamicSamplingContextFromScope(client, scope);\n  return [dynamicSamplingContext, traceContext];\n}\n", "import type { SerializedCheckIn } from './types-hoist/checkin';\nimport type { DsnComponents } from './types-hoist/dsn';\nimport type { CheckInEnvelope, CheckInItem, DynamicSamplingContext } from './types-hoist/envelope';\nimport type { SdkMetadata } from './types-hoist/sdkmetadata';\nimport { dsnToString } from './utils-hoist/dsn';\nimport { createEnvelope } from './utils-hoist/envelope';\n\n/**\n * Create envelope from check in item.\n */\nexport function createCheckInEnvelope(\n  checkIn: SerializedCheckIn,\n  dynamicSamplingContext?: Partial<DynamicSamplingContext>,\n  metadata?: SdkMetadata,\n  tunnel?: string,\n  dsn?: DsnComponents,\n): CheckInEnvelope {\n  const headers: CheckInEnvelope[0] = {\n    sent_at: new Date().toISOString(),\n  };\n\n  if (metadata?.sdk) {\n    headers.sdk = {\n      name: metadata.sdk.name,\n      version: metadata.sdk.version,\n    };\n  }\n\n  if (!!tunnel && !!dsn) {\n    headers.dsn = dsnToString(dsn);\n  }\n\n  if (dynamicSamplingContext) {\n    headers.trace = dynamicSamplingContext as DynamicSamplingContext;\n  }\n\n  const item = createCheckInEnvelopeItem(checkIn);\n  return createEnvelope<CheckInEnvelope>(headers, [item]);\n}\n\nfunction createCheckInEnvelopeItem(checkIn: SerializedCheckIn): CheckInItem {\n  const checkInHeaders: CheckInItem[0] = {\n    type: 'check_in',\n  };\n  return [checkInHeaders, checkIn];\n}\n", "import type { DsnComponents } from '../types-hoist/dsn';\nimport type { LogContainerItem, LogEnvelope } from '../types-hoist/envelope';\nimport type { SerializedLog } from '../types-hoist/log';\nimport type { SdkMetadata } from '../types-hoist/sdkmetadata';\nimport { dsnToString } from '../utils-hoist/dsn';\nimport { createEnvelope } from '../utils-hoist/envelope';\n\n/**\n * Creates a log container envelope item for a list of logs.\n *\n * @param items - The logs to include in the envelope.\n * @returns The created log container envelope item.\n */\nexport function createLogContainerEnvelopeItem(items: Array<SerializedLog>): LogContainerItem {\n  return [\n    {\n      type: 'log',\n      item_count: items.length,\n      content_type: 'application/vnd.sentry.items.log+json',\n    },\n    {\n      items,\n    },\n  ];\n}\n\n/**\n * Creates an envelope for a list of logs.\n *\n * Logs from multiple traces can be included in the same envelope.\n *\n * @param logs - The logs to include in the envelope.\n * @param metadata - The metadata to include in the envelope.\n * @param tunnel - The tunnel to include in the envelope.\n * @param dsn - The DSN to include in the envelope.\n * @returns The created envelope.\n */\nexport function createLogEnvelope(\n  logs: Array<SerializedLog>,\n  metadata?: SdkMetadata,\n  tunnel?: string,\n  dsn?: DsnComponents,\n): LogEnvelope {\n  const headers: LogEnvelope[0] = {};\n\n  if (metadata?.sdk) {\n    headers.sdk = {\n      name: metadata.sdk.name,\n      version: metadata.sdk.version,\n    };\n  }\n\n  if (!!tunnel && !!dsn) {\n    headers.dsn = dsnToString(dsn);\n  }\n\n  return createEnvelope<LogEnvelope>(headers, [createLogContainerEnvelopeItem(logs)]);\n}\n", "import type { Client } from '../client';\nimport { _getTraceInfoFromScope } from '../client';\nimport { getClient, getCurrentScope } from '../currentScopes';\nimport { DEBUG_BUILD } from '../debug-build';\nimport type { Log, SerializedLog, SerializedLogAttributeValue } from '../types-hoist/log';\nimport { _getSpanForScope } from '../utils/spanOnScope';\nimport { isParameterizedString } from '../utils-hoist/is';\nimport { logger } from '../utils-hoist/logger';\nimport { timestampInSeconds } from '../utils-hoist/time';\nimport { GLOBAL_OBJ } from '../utils-hoist/worldwide';\nimport { SEVERITY_TEXT_TO_SEVERITY_NUMBER } from './constants';\nimport { createLogEnvelope } from './envelope';\n\nconst MAX_LOG_BUFFER_SIZE = 100;\n\n// The reference to the Client <> LogBuffer map is stored to ensure it's always the same\nGLOBAL_OBJ._sentryClientToLogBufferMap = new WeakMap<Client, Array<SerializedLog>>();\n\n/**\n * Converts a log attribute to a serialized log attribute.\n *\n * @param key - The key of the log attribute.\n * @param value - The value of the log attribute.\n * @returns The serialized log attribute.\n */\nexport function logAttributeToSerializedLogAttribute(value: unknown): SerializedLogAttributeValue {\n  switch (typeof value) {\n    case 'number':\n      if (Number.isInteger(value)) {\n        return {\n          value,\n          type: 'integer',\n        };\n      }\n      return {\n        value,\n        type: 'double',\n      };\n    case 'boolean':\n      return {\n        value,\n        type: 'boolean',\n      };\n    case 'string':\n      return {\n        value,\n        type: 'string',\n      };\n    default: {\n      let stringValue = '';\n      try {\n        stringValue = JSON.stringify(value) ?? '';\n      } catch {\n        // Do nothing\n      }\n      return {\n        value: stringValue,\n        type: 'string',\n      };\n    }\n  }\n}\n\n/**\n * Captures a log event and sends it to Sentry.\n *\n * @param log - The log event to capture.\n * @param scope - A scope. Uses the current scope if not provided.\n * @param client - A client. Uses the current client if not provided.\n *\n * @experimental This method will experience breaking changes. This is not yet part of\n * the stable Sentry SDK API and can be changed or removed without warning.\n */\nexport function _INTERNAL_captureLog(\n  beforeLog: Log,\n  client: Client | undefined = getClient(),\n  scope = getCurrentScope(),\n): void {\n  if (!client) {\n    DEBUG_BUILD && logger.warn('No client available to capture log.');\n    return;\n  }\n\n  const { _experiments, release, environment } = client.getOptions();\n  const { enableLogs = false, beforeSendLog } = _experiments ?? {};\n  if (!enableLogs) {\n    DEBUG_BUILD && logger.warn('logging option not enabled, log will not be captured.');\n    return;\n  }\n\n  const [, traceContext] = _getTraceInfoFromScope(client, scope);\n\n  const processedLogAttributes = {\n    ...beforeLog.attributes,\n  };\n\n  if (release) {\n    processedLogAttributes['sentry.release'] = release;\n  }\n\n  if (environment) {\n    processedLogAttributes['sentry.environment'] = environment;\n  }\n\n  const { sdk } = client.getSdkMetadata() ?? {};\n  if (sdk) {\n    processedLogAttributes['sentry.sdk.name'] = sdk.name;\n    processedLogAttributes['sentry.sdk.version'] = sdk.version;\n  }\n\n  const beforeLogMessage = beforeLog.message;\n  if (isParameterizedString(beforeLogMessage)) {\n    const { __sentry_template_string__, __sentry_template_values__ = [] } = beforeLogMessage;\n    processedLogAttributes['sentry.message.template'] = __sentry_template_string__;\n    __sentry_template_values__.forEach((param, index) => {\n      processedLogAttributes[`sentry.message.parameter.${index}`] = param;\n    });\n  }\n\n  const span = _getSpanForScope(scope);\n  if (span) {\n    // Add the parent span ID to the log attributes for trace context\n    processedLogAttributes['sentry.trace.parent_span_id'] = span.spanContext().spanId;\n  }\n\n  const processedLog = { ...beforeLog, attributes: processedLogAttributes };\n\n  client.emit('beforeCaptureLog', processedLog);\n\n  const log = beforeSendLog ? beforeSendLog(processedLog) : processedLog;\n  if (!log) {\n    client.recordDroppedEvent('before_send', 'log_item', 1);\n    DEBUG_BUILD && logger.warn('beforeSendLog returned null, log will not be captured.');\n    return;\n  }\n\n  const { level, message, attributes = {}, severityNumber } = log;\n\n  const serializedLog: SerializedLog = {\n    timestamp: timestampInSeconds(),\n    level,\n    body: message,\n    trace_id: traceContext?.trace_id,\n    severity_number: severityNumber ?? SEVERITY_TEXT_TO_SEVERITY_NUMBER[level],\n    attributes: Object.keys(attributes).reduce(\n      (acc, key) => {\n        acc[key] = logAttributeToSerializedLogAttribute(attributes[key]);\n        return acc;\n      },\n      {} as Record<string, SerializedLogAttributeValue>,\n    ),\n  };\n\n  const logBuffer = _INTERNAL_getLogBuffer(client);\n  if (logBuffer === undefined) {\n    GLOBAL_OBJ._sentryClientToLogBufferMap?.set(client, [serializedLog]);\n  } else {\n    GLOBAL_OBJ._sentryClientToLogBufferMap?.set(client, [...logBuffer, serializedLog]);\n    if (logBuffer.length >= MAX_LOG_BUFFER_SIZE) {\n      _INTERNAL_flushLogsBuffer(client, logBuffer);\n    }\n  }\n\n  client.emit('afterCaptureLog', log);\n}\n\n/**\n * Flushes the logs buffer to Sentry.\n *\n * @param client - A client.\n * @param maybeLogBuffer - A log buffer. Uses the log buffer for the given client if not provided.\n *\n * @experimental This method will experience breaking changes. This is not yet part of\n * the stable Sentry SDK API and can be changed or removed without warning.\n */\nexport function _INTERNAL_flushLogsBuffer(client: Client, maybeLogBuffer?: Array<SerializedLog>): void {\n  const logBuffer = maybeLogBuffer ?? _INTERNAL_getLogBuffer(client) ?? [];\n  if (logBuffer.length === 0) {\n    return;\n  }\n\n  const clientOptions = client.getOptions();\n  const envelope = createLogEnvelope(logBuffer, clientOptions._metadata, clientOptions.tunnel, client.getDsn());\n\n  // Clear the log buffer after envelopes have been constructed.\n  GLOBAL_OBJ._sentryClientToLogBufferMap?.set(client, []);\n\n  client.emit('flushLogs');\n\n  // sendEnvelope should not throw\n  // eslint-disable-next-line @typescript-eslint/no-floating-promises\n  client.sendEnvelope(envelope);\n}\n\n/**\n * Returns the log buffer for a given client.\n *\n * Exported for testing purposes.\n *\n * @param client - The client to get the log buffer for.\n * @returns The log buffer for the given client.\n */\nexport function _INTERNAL_getLogBuffer(client: Client): Array<SerializedLog> | undefined {\n  return GLOBAL_OBJ._sentryClientToLogBufferMap?.get(client);\n}\n", "import type { Client } from '../client';\nimport type { Event, EventHint } from '../types-hoist/event';\nimport type { Exception } from '../types-hoist/exception';\nimport type { Extras } from '../types-hoist/extra';\nimport type { Mechanism } from '../types-hoist/mechanism';\nimport type { ParameterizedString } from '../types-hoist/parameterize';\nimport type { SeverityLevel } from '../types-hoist/severity';\nimport type { StackFrame } from '../types-hoist/stackframe';\nimport type { StackParser } from '../types-hoist/stacktrace';\nimport { isError, isErrorEvent, isParameterizedString, isPlainObject } from './is';\nimport { addExceptionMechanism, addExceptionTypeValue } from './misc';\nimport { normalizeToSize } from './normalize';\nimport { extractExceptionKeysForMessage } from './object';\n\n/**\n * Extracts stack frames from the error.stack string\n */\nexport function parseStackFrames(stackParser: StackParser, error: Error): StackFrame[] {\n  return stackParser(error.stack || '', 1);\n}\n\n/**\n * Extracts stack frames from the error and builds a Sentry Exception\n */\nexport function exceptionFromError(stackParser: StackParser, error: Error): Exception {\n  const exception: Exception = {\n    type: error.name || error.constructor.name,\n    value: error.message,\n  };\n\n  const frames = parseStackFrames(stackParser, error);\n  if (frames.length) {\n    exception.stacktrace = { frames };\n  }\n\n  return exception;\n}\n\n/** If a plain object has a property that is an `Error`, return this error. */\nfunction getErrorPropertyFromObject(obj: Record<string, unknown>): Error | undefined {\n  for (const prop in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, prop)) {\n      const value = obj[prop];\n      if (value instanceof Error) {\n        return value;\n      }\n    }\n  }\n\n  return undefined;\n}\n\nfunction getMessageForObject(exception: Record<string, unknown>): string {\n  if ('name' in exception && typeof exception.name === 'string') {\n    let message = `'${exception.name}' captured as exception`;\n\n    if ('message' in exception && typeof exception.message === 'string') {\n      message += ` with message '${exception.message}'`;\n    }\n\n    return message;\n  } else if ('message' in exception && typeof exception.message === 'string') {\n    return exception.message;\n  }\n\n  const keys = extractExceptionKeysForMessage(exception);\n\n  // Some ErrorEvent instances do not have an `error` property, which is why they are not handled before\n  // We still want to try to get a decent message for these cases\n  if (isErrorEvent(exception)) {\n    return `Event \\`ErrorEvent\\` captured as exception with message \\`${exception.message}\\``;\n  }\n\n  const className = getObjectClassName(exception);\n\n  return `${\n    className && className !== 'Object' ? `'${className}'` : 'Object'\n  } captured as exception with keys: ${keys}`;\n}\n\nfunction getObjectClassName(obj: unknown): string | undefined | void {\n  try {\n    const prototype: unknown | null = Object.getPrototypeOf(obj);\n    return prototype ? prototype.constructor.name : undefined;\n  } catch (e) {\n    // ignore errors here\n  }\n}\n\nfunction getException(\n  client: Client,\n  mechanism: Mechanism,\n  exception: unknown,\n  hint?: EventHint,\n): [Error, Extras | undefined] {\n  if (isError(exception)) {\n    return [exception, undefined];\n  }\n\n  // Mutate this!\n  mechanism.synthetic = true;\n\n  if (isPlainObject(exception)) {\n    const normalizeDepth = client?.getOptions().normalizeDepth;\n    const extras = { ['__serialized__']: normalizeToSize(exception as Record<string, unknown>, normalizeDepth) };\n\n    const errorFromProp = getErrorPropertyFromObject(exception);\n    if (errorFromProp) {\n      return [errorFromProp, extras];\n    }\n\n    const message = getMessageForObject(exception);\n    const ex = hint?.syntheticException || new Error(message);\n    ex.message = message;\n\n    return [ex, extras];\n  }\n\n  // This handles when someone does: `throw \"something awesome\";`\n  // We use synthesized Error here so we can extract a (rough) stack trace.\n  const ex = hint?.syntheticException || new Error(exception as string);\n  ex.message = `${exception}`;\n\n  return [ex, undefined];\n}\n\n/**\n * Builds and Event from a Exception\n * @hidden\n */\nexport function eventFromUnknownInput(\n  client: Client,\n  stackParser: StackParser,\n  exception: unknown,\n  hint?: EventHint,\n): Event {\n  const providedMechanism: Mechanism | undefined = hint?.data && (hint.data as { mechanism: Mechanism }).mechanism;\n  const mechanism: Mechanism = providedMechanism || {\n    handled: true,\n    type: 'generic',\n  };\n\n  const [ex, extras] = getException(client, mechanism, exception, hint);\n\n  const event: Event = {\n    exception: {\n      values: [exceptionFromError(stackParser, ex)],\n    },\n  };\n\n  if (extras) {\n    event.extra = extras;\n  }\n\n  addExceptionTypeValue(event, undefined, undefined);\n  addExceptionMechanism(event, mechanism);\n\n  return {\n    ...event,\n    event_id: hint?.event_id,\n  };\n}\n\n/**\n * Builds and Event from a Message\n * @hidden\n */\nexport function eventFromMessage(\n  stackParser: StackParser,\n  message: ParameterizedString,\n  level: SeverityLevel = 'info',\n  hint?: EventHint,\n  attachStacktrace?: boolean,\n): Event {\n  const event: Event = {\n    event_id: hint?.event_id,\n    level,\n  };\n\n  if (attachStacktrace && hint?.syntheticException) {\n    const frames = parseStackFrames(stackParser, hint.syntheticException);\n    if (frames.length) {\n      event.exception = {\n        values: [\n          {\n            value: message,\n            stacktrace: { frames },\n          },\n        ],\n      };\n      addExceptionMechanism(event, { synthetic: true });\n    }\n  }\n\n  if (isParameterizedString(message)) {\n    const { __sentry_template_string__, __sentry_template_values__ } = message;\n\n    event.logentry = {\n      message: __sentry_template_string__,\n      params: __sentry_template_values__,\n    };\n    return event;\n  }\n\n  event.message = message;\n  return event;\n}\n", "import { createCheckInEnvelope } from './checkin';\nimport { _getTraceInfoFromScope, Client } from './client';\nimport { getIsolationScope } from './currentScopes';\nimport { DEBUG_BUILD } from './debug-build';\nimport { _INTERNAL_flushLogsBuffer } from './logs/exports';\nimport type { Scope } from './scope';\nimport { registerSpanErrorInstrumentation } from './tracing';\nimport type { CheckIn, MonitorConfig, SerializedCheckIn } from './types-hoist/checkin';\nimport type { Event, EventHint } from './types-hoist/event';\nimport type { Log } from './types-hoist/log';\nimport type { Primitive } from './types-hoist/misc';\nimport type { ClientOptions } from './types-hoist/options';\nimport type { ParameterizedString } from './types-hoist/parameterize';\nimport type { SeverityLevel } from './types-hoist/severity';\nimport type { BaseTransportOptions } from './types-hoist/transport';\nimport { eventFromMessage, eventFromUnknownInput } from './utils-hoist/eventbuilder';\nimport { isPrimitive } from './utils-hoist/is';\nimport { logger } from './utils-hoist/logger';\nimport { uuid4 } from './utils-hoist/misc';\nimport { resolvedSyncPromise } from './utils-hoist/syncpromise';\n\n// TODO: Make this configurable\nconst DEFAULT_LOG_FLUSH_INTERVAL = 5000;\n\nexport interface ServerRuntimeClientOptions extends ClientOptions<BaseTransportOptions> {\n  platform?: string;\n  runtime?: { name: string; version?: string };\n  serverName?: string;\n}\n\n/**\n * The Sentry Server Runtime Client SDK.\n */\nexport class ServerRuntimeClient<\n  O extends ClientOptions & ServerRuntimeClientOptions = ServerRuntimeClientOptions,\n> extends Client<O> {\n  private _logFlushIdleTimeout: ReturnType<typeof setTimeout> | undefined;\n  private _logWeight: number;\n\n  /**\n   * Creates a new Edge SDK instance.\n   * @param options Configuration options for this SDK.\n   */\n  public constructor(options: O) {\n    // Server clients always support tracing\n    registerSpanErrorInstrumentation();\n\n    super(options);\n\n    this._logWeight = 0;\n\n    if (this._options._experiments?.enableLogs) {\n      // eslint-disable-next-line @typescript-eslint/no-this-alias\n      const client = this;\n\n      client.on('flushLogs', () => {\n        client._logWeight = 0;\n        clearTimeout(client._logFlushIdleTimeout);\n      });\n\n      client.on('afterCaptureLog', log => {\n        client._logWeight += estimateLogSizeInBytes(log);\n\n        // We flush the logs buffer if it exceeds 0.8 MB\n        // The log weight is a rough estimate, so we flush way before\n        // the payload gets too big.\n        if (client._logWeight >= 800_000) {\n          _INTERNAL_flushLogsBuffer(client);\n        } else {\n          // start an idle timeout to flush the logs buffer if no logs are captured for a while\n          client._logFlushIdleTimeout = setTimeout(() => {\n            _INTERNAL_flushLogsBuffer(client);\n          }, DEFAULT_LOG_FLUSH_INTERVAL);\n        }\n      });\n\n      client.on('flush', () => {\n        _INTERNAL_flushLogsBuffer(client);\n      });\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public eventFromException(exception: unknown, hint?: EventHint): PromiseLike<Event> {\n    const event = eventFromUnknownInput(this, this._options.stackParser, exception, hint);\n    event.level = 'error';\n\n    return resolvedSyncPromise(event);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public eventFromMessage(\n    message: ParameterizedString,\n    level: SeverityLevel = 'info',\n    hint?: EventHint,\n  ): PromiseLike<Event> {\n    return resolvedSyncPromise(\n      eventFromMessage(this._options.stackParser, message, level, hint, this._options.attachStacktrace),\n    );\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureException(exception: unknown, hint?: EventHint, scope?: Scope): string {\n    setCurrentRequestSessionErroredOrCrashed(hint);\n    return super.captureException(exception, hint, scope);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureEvent(event: Event, hint?: EventHint, scope?: Scope): string {\n    // If the event is of type Exception, then a request session should be captured\n    const isException = !event.type && event.exception?.values && event.exception.values.length > 0;\n    if (isException) {\n      setCurrentRequestSessionErroredOrCrashed(hint);\n    }\n\n    return super.captureEvent(event, hint, scope);\n  }\n\n  /**\n   * Create a cron monitor check in and send it to Sentry.\n   *\n   * @param checkIn An object that describes a check in.\n   * @param upsertMonitorConfig An optional object that describes a monitor config. Use this if you want\n   * to create a monitor automatically when sending a check in.\n   */\n  public captureCheckIn(checkIn: CheckIn, monitorConfig?: MonitorConfig, scope?: Scope): string {\n    const id = 'checkInId' in checkIn && checkIn.checkInId ? checkIn.checkInId : uuid4();\n    if (!this._isEnabled()) {\n      DEBUG_BUILD && logger.warn('SDK not enabled, will not capture check-in.');\n      return id;\n    }\n\n    const options = this.getOptions();\n    const { release, environment, tunnel } = options;\n\n    const serializedCheckIn: SerializedCheckIn = {\n      check_in_id: id,\n      monitor_slug: checkIn.monitorSlug,\n      status: checkIn.status,\n      release,\n      environment,\n    };\n\n    if ('duration' in checkIn) {\n      serializedCheckIn.duration = checkIn.duration;\n    }\n\n    if (monitorConfig) {\n      serializedCheckIn.monitor_config = {\n        schedule: monitorConfig.schedule,\n        checkin_margin: monitorConfig.checkinMargin,\n        max_runtime: monitorConfig.maxRuntime,\n        timezone: monitorConfig.timezone,\n        failure_issue_threshold: monitorConfig.failureIssueThreshold,\n        recovery_threshold: monitorConfig.recoveryThreshold,\n      };\n    }\n\n    const [dynamicSamplingContext, traceContext] = _getTraceInfoFromScope(this, scope);\n    if (traceContext) {\n      serializedCheckIn.contexts = {\n        trace: traceContext,\n      };\n    }\n\n    const envelope = createCheckInEnvelope(\n      serializedCheckIn,\n      dynamicSamplingContext,\n      this.getSdkMetadata(),\n      tunnel,\n      this.getDsn(),\n    );\n\n    DEBUG_BUILD && logger.info('Sending checkin:', checkIn.monitorSlug, checkIn.status);\n\n    // sendEnvelope should not throw\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.sendEnvelope(envelope);\n\n    return id;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  protected _prepareEvent(\n    event: Event,\n    hint: EventHint,\n    currentScope: Scope,\n    isolationScope: Scope,\n  ): PromiseLike<Event | null> {\n    if (this._options.platform) {\n      event.platform = event.platform || this._options.platform;\n    }\n\n    if (this._options.runtime) {\n      event.contexts = {\n        ...event.contexts,\n        runtime: event.contexts?.runtime || this._options.runtime,\n      };\n    }\n\n    if (this._options.serverName) {\n      event.server_name = event.server_name || this._options.serverName;\n    }\n\n    return super._prepareEvent(event, hint, currentScope, isolationScope);\n  }\n}\n\nfunction setCurrentRequestSessionErroredOrCrashed(eventHint?: EventHint): void {\n  const requestSession = getIsolationScope().getScopeData().sdkProcessingMetadata.requestSession;\n  if (requestSession) {\n    // We mutate instead of doing `setSdkProcessingMetadata` because the http integration stores away a particular\n    // isolationScope. If that isolation scope is forked, setting the processing metadata here will not mutate the\n    // original isolation scope that the http integration stored away.\n    const isHandledException = eventHint?.mechanism?.handled ?? true;\n    // A request session can go from \"errored\" -> \"crashed\" but not \"crashed\" -> \"errored\".\n    // Crashed (unhandled exception) is worse than errored (handled exception).\n    if (isHandledException && requestSession.status !== 'crashed') {\n      requestSession.status = 'errored';\n    } else if (!isHandledException) {\n      requestSession.status = 'crashed';\n    }\n  }\n}\n\n/**\n * Estimate the size of a log in bytes.\n *\n * @param log - The log to estimate the size of.\n * @returns The estimated size of the log in bytes.\n */\nfunction estimateLogSizeInBytes(log: Log): number {\n  let weight = 0;\n\n  // Estimate byte size of 2 bytes per character. This is a rough estimate JS strings are stored as UTF-16.\n  if (log.message) {\n    weight += log.message.length * 2;\n  }\n\n  if (log.attributes) {\n    Object.values(log.attributes).forEach(value => {\n      if (Array.isArray(value)) {\n        weight += value.length * estimatePrimitiveSizeInBytes(value[0]);\n      } else if (isPrimitive(value)) {\n        weight += estimatePrimitiveSizeInBytes(value);\n      } else {\n        // For objects values, we estimate the size of the object as 100 bytes\n        weight += 100;\n      }\n    });\n  }\n\n  return weight;\n}\n\nfunction estimatePrimitiveSizeInBytes(value: Primitive): number {\n  if (typeof value === 'string') {\n    return value.length * 2;\n  } else if (typeof value === 'number') {\n    return 8;\n  } else if (typeof value === 'boolean') {\n    return 4;\n  }\n\n  return 0;\n}\n", "import { rejectedSyncPromise, resolvedSyncPromise, SyncPromise } from './syncpromise';\n\nexport interface PromiseBuffer<T> {\n  // exposes the internal array so tests can assert on the state of it.\n  // XXX: this really should not be public api.\n  $: Array<PromiseLike<T>>;\n  add(taskProducer: () => PromiseLike<T>): PromiseLike<T>;\n  drain(timeout?: number): PromiseLike<boolean>;\n}\n\nexport const SENTRY_BUFFER_FULL_ERROR = Symbol.for('SentryBufferFullError');\n\n/**\n * Creates an new PromiseBuffer object with the specified limit\n * @param limit max number of promises that can be stored in the buffer\n */\nexport function makePromiseBuffer<T>(limit?: number): PromiseBuffer<T> {\n  const buffer: Array<PromiseLike<T>> = [];\n\n  function isReady(): boolean {\n    return limit === undefined || buffer.length < limit;\n  }\n\n  /**\n   * Remove a promise from the queue.\n   *\n   * @param task Can be any PromiseLike<T>\n   * @returns Removed promise.\n   */\n  function remove(task: PromiseLike<T>): PromiseLike<T | void> {\n    return buffer.splice(buffer.indexOf(task), 1)[0] || Promise.resolve(undefined);\n  }\n\n  /**\n   * Add a promise (representing an in-flight action) to the queue, and set it to remove itself on fulfillment.\n   *\n   * @param taskProducer A function producing any PromiseLike<T>; In previous versions this used to be `task:\n   *        PromiseLike<T>`, but under that model, Promises were instantly created on the call-site and their executor\n   *        functions therefore ran immediately. Thus, even if the buffer was full, the action still happened. By\n   *        requiring the promise to be wrapped in a function, we can defer promise creation until after the buffer\n   *        limit check.\n   * @returns The original promise.\n   */\n  function add(taskProducer: () => PromiseLike<T>): PromiseLike<T> {\n    if (!isReady()) {\n      return rejectedSyncPromise(SENTRY_BUFFER_FULL_ERROR);\n    }\n\n    // start the task and add its promise to the queue\n    const task = taskProducer();\n    if (buffer.indexOf(task) === -1) {\n      buffer.push(task);\n    }\n    void task\n      .then(() => remove(task))\n      // Use `then(null, rejectionHandler)` rather than `catch(rejectionHandler)` so that we can use `PromiseLike`\n      // rather than `Promise`. `PromiseLike` doesn't have a `.catch` method, making its polyfill smaller. (ES5 didn't\n      // have promises, so TS has to polyfill when down-compiling.)\n      .then(null, () =>\n        remove(task).then(null, () => {\n          // We have to add another catch here because `remove()` starts a new promise chain.\n        }),\n      );\n    return task;\n  }\n\n  /**\n   * Wait for all promises in the queue to resolve or for timeout to expire, whichever comes first.\n   *\n   * @param timeout The time, in ms, after which to resolve to `false` if the queue is still non-empty. Passing `0` (or\n   * not passing anything) will make the promise wait as long as it takes for the queue to drain before resolving to\n   * `true`.\n   * @returns A promise which will resolve to `true` if the queue is already empty or drains before the timeout, and\n   * `false` otherwise\n   */\n  function drain(timeout?: number): PromiseLike<boolean> {\n    return new SyncPromise<boolean>((resolve, reject) => {\n      let counter = buffer.length;\n\n      if (!counter) {\n        return resolve(true);\n      }\n\n      // wait for `timeout` ms and then resolve to `false` (if not cancelled first)\n      const capturedSetTimeout = setTimeout(() => {\n        if (timeout && timeout > 0) {\n          resolve(false);\n        }\n      }, timeout);\n\n      // if all promises resolve in time, cancel the timer and resolve to `true`\n      buffer.forEach(item => {\n        void resolvedSyncPromise(item).then(() => {\n          if (!--counter) {\n            clearTimeout(capturedSetTimeout);\n            resolve(true);\n          }\n        }, reject);\n      });\n    });\n  }\n\n  return {\n    $: buffer,\n    add,\n    drain,\n  };\n}\n", "import type { DataCategory } from '../types-hoist/datacategory';\nimport type { TransportMakeRequestResponse } from '../types-hoist/transport';\n\n// Intentionally keeping the key broad, as we don't know for sure what rate limit headers get returned from backend\nexport type RateLimits = Record<string, number>;\n\nexport const DEFAULT_RETRY_AFTER = 60 * 1000; // 60 seconds\n\n/**\n * Extracts Retry-After value from the request header or returns default value\n * @param header string representation of 'Retry-After' header\n * @param now current unix timestamp\n *\n */\nexport function parseRetryAfterHeader(header: string, now: number = Date.now()): number {\n  const headerDelay = parseInt(`${header}`, 10);\n  if (!isNaN(headerDelay)) {\n    return headerDelay * 1000;\n  }\n\n  const headerDate = Date.parse(`${header}`);\n  if (!isNaN(headerDate)) {\n    return headerDate - now;\n  }\n\n  return DEFAULT_RETRY_AFTER;\n}\n\n/**\n * Gets the time that the given category is disabled until for rate limiting.\n * In case no category-specific limit is set but a general rate limit across all categories is active,\n * that time is returned.\n *\n * @return the time in ms that the category is disabled until or 0 if there's no active rate limit.\n */\nexport function disabledUntil(limits: RateLimits, dataCategory: DataCategory): number {\n  return limits[dataCategory] || limits.all || 0;\n}\n\n/**\n * Checks if a category is rate limited\n */\nexport function isRateLimited(limits: RateLimits, dataCategory: DataCategory, now: number = Date.now()): boolean {\n  return disabledUntil(limits, dataCategory) > now;\n}\n\n/**\n * Update ratelimits from incoming headers.\n *\n * @return the updated RateLimits object.\n */\nexport function updateRateLimits(\n  limits: RateLimits,\n  { statusCode, headers }: TransportMakeRequestResponse,\n  now: number = Date.now(),\n): RateLimits {\n  const updatedRateLimits: RateLimits = {\n    ...limits,\n  };\n\n  // \"The name is case-insensitive.\"\n  // https://developer.mozilla.org/en-US/docs/Web/API/Headers/get\n  const rateLimitHeader = headers?.['x-sentry-rate-limits'];\n  const retryAfterHeader = headers?.['retry-after'];\n\n  if (rateLimitHeader) {\n    /**\n     * rate limit headers are of the form\n     *     <header>,<header>,..\n     * where each <header> is of the form\n     *     <retry_after>: <categories>: <scope>: <reason_code>: <namespaces>\n     * where\n     *     <retry_after> is a delay in seconds\n     *     <categories> is the event type(s) (error, transaction, etc) being rate limited and is of the form\n     *         <category>;<category>;...\n     *     <scope> is what's being limited (org, project, or key) - ignored by SDK\n     *     <reason_code> is an arbitrary string like \"org_quota\" - ignored by SDK\n     *     <namespaces> Semicolon-separated list of metric namespace identifiers. Defines which namespace(s) will be affected.\n     *         Only present if rate limit applies to the metric_bucket data category.\n     */\n    for (const limit of rateLimitHeader.trim().split(',')) {\n      const [retryAfter, categories, , , namespaces] = limit.split(':', 5) as [string, ...string[]];\n      const headerDelay = parseInt(retryAfter, 10);\n      const delay = (!isNaN(headerDelay) ? headerDelay : 60) * 1000; // 60sec default\n      if (!categories) {\n        updatedRateLimits.all = now + delay;\n      } else {\n        for (const category of categories.split(';')) {\n          if (category === 'metric_bucket') {\n            // namespaces will be present when category === 'metric_bucket'\n            if (!namespaces || namespaces.split(';').includes('custom')) {\n              updatedRateLimits[category] = now + delay;\n            }\n          } else {\n            updatedRateLimits[category] = now + delay;\n          }\n        }\n      }\n    }\n  } else if (retryAfterHeader) {\n    updatedRateLimits.all = now + parseRetryAfterHeader(retryAfterHeader, now);\n  } else if (statusCode === 429) {\n    updatedRateLimits.all = now + 60 * 1000;\n  }\n\n  return updatedRateLimits;\n}\n", "import { DEBUG_BUILD } from '../debug-build';\nimport type { EventDropReason } from '../types-hoist/clientreport';\nimport type { Envelope, EnvelopeItem } from '../types-hoist/envelope';\nimport type {\n  InternalBaseTransportOptions,\n  Transport,\n  TransportMakeRequestResponse,\n  TransportRequestExecutor,\n} from '../types-hoist/transport';\nimport {\n  createEnvelope,\n  envelopeItemTypeToDataCategory,\n  forEachEnvelopeItem,\n  serializeEnvelope,\n} from '../utils-hoist/envelope';\nimport { logger } from '../utils-hoist/logger';\nimport { type PromiseBuffer, makePromiseBuffer, SENTRY_BUFFER_FULL_ERROR } from '../utils-hoist/promisebuffer';\nimport { type RateLimits, isRateLimited, updateRateLimits } from '../utils-hoist/ratelimit';\nimport { resolvedSyncPromise } from '../utils-hoist/syncpromise';\n\nexport const DEFAULT_TRANSPORT_BUFFER_SIZE = 64;\n\n/**\n * Creates an instance of a Sentry `Transport`\n *\n * @param options\n * @param makeRequest\n */\nexport function createTransport(\n  options: InternalBaseTransportOptions,\n  makeRequest: TransportRequestExecutor,\n  buffer: PromiseBuffer<TransportMakeRequestResponse> = makePromiseBuffer(\n    options.bufferSize || DEFAULT_TRANSPORT_BUFFER_SIZE,\n  ),\n): Transport {\n  let rateLimits: RateLimits = {};\n  const flush = (timeout?: number): PromiseLike<boolean> => buffer.drain(timeout);\n\n  function send(envelope: Envelope): PromiseLike<TransportMakeRequestResponse> {\n    const filteredEnvelopeItems: EnvelopeItem[] = [];\n\n    // Drop rate limited items from envelope\n    forEachEnvelopeItem(envelope, (item, type) => {\n      const dataCategory = envelopeItemTypeToDataCategory(type);\n      if (isRateLimited(rateLimits, dataCategory)) {\n        options.recordDroppedEvent('ratelimit_backoff', dataCategory);\n      } else {\n        filteredEnvelopeItems.push(item);\n      }\n    });\n\n    // Skip sending if envelope is empty after filtering out rate limited events\n    if (filteredEnvelopeItems.length === 0) {\n      return resolvedSyncPromise({});\n    }\n\n    const filteredEnvelope: Envelope = createEnvelope(envelope[0], filteredEnvelopeItems as (typeof envelope)[1]);\n\n    // Creates client report for each item in an envelope\n    const recordEnvelopeLoss = (reason: EventDropReason): void => {\n      forEachEnvelopeItem(filteredEnvelope, (item, type) => {\n        options.recordDroppedEvent(reason, envelopeItemTypeToDataCategory(type));\n      });\n    };\n\n    const requestTask = (): PromiseLike<TransportMakeRequestResponse> =>\n      makeRequest({ body: serializeEnvelope(filteredEnvelope) }).then(\n        response => {\n          // We don't want to throw on NOK responses, but we want to at least log them\n          if (response.statusCode !== undefined && (response.statusCode < 200 || response.statusCode >= 300)) {\n            DEBUG_BUILD && logger.warn(`Sentry responded with status code ${response.statusCode} to sent event.`);\n          }\n\n          rateLimits = updateRateLimits(rateLimits, response);\n          return response;\n        },\n        error => {\n          recordEnvelopeLoss('network_error');\n          DEBUG_BUILD && logger.error('Encountered error running transport request:', error);\n          throw error;\n        },\n      );\n\n    return buffer.add(requestTask).then(\n      result => result,\n      error => {\n        if (error === SENTRY_BUFFER_FULL_ERROR) {\n          DEBUG_BUILD && logger.error('Skipped sending event because buffer is full.');\n          recordEnvelopeLoss('queue_overflow');\n          return resolvedSyncPromise({});\n        } else {\n          throw error;\n        }\n      },\n    );\n  }\n\n  return {\n    send,\n    flush,\n  };\n}\n", "import type { Options } from '../types-hoist/options';\nimport { SDK_VERSION } from '../utils-hoist/version';\n\n/**\n * A builder for the SDK metadata in the options for the SDK initialization.\n *\n * Note: This function is identical to `buildMetadata` in Remix and NextJS and SvelteKit.\n * We don't extract it for bundle size reasons.\n * @see https://github.com/getsentry/sentry-javascript/pull/7404\n * @see https://github.com/getsentry/sentry-javascript/pull/4196\n *\n * If you make changes to this function consider updating the others as well.\n *\n * @param options SDK options object that gets mutated\n * @param names list of package names\n */\nexport function applySdkMetadata(options: Options, name: string, names = [name], source = 'npm'): void {\n  const metadata = options._metadata || {};\n\n  if (!metadata.sdk) {\n    metadata.sdk = {\n      name: `sentry.javascript.${name}`,\n      packages: names.map(name => ({\n        name: `${source}:@sentry/${name}`,\n        version: SDK_VERSION,\n      })),\n      version: SDK_VERSION,\n    };\n  }\n\n  options._metadata = metadata;\n}\n", "import { getAsyncContextStrategy } from '../asyncContext';\nimport { getMainCarrier } from '../carrier';\nimport { getClient, getCurrentScope } from '../currentScopes';\nimport { isEnabled } from '../exports';\nimport type { Scope } from '../scope';\nimport { getDynamicSamplingContextFromScope, getDynamicSamplingContextFromSpan } from '../tracing';\nimport type { Span } from '../types-hoist/span';\nimport type { SerializedTraceData } from '../types-hoist/tracing';\nimport { dynamicSamplingContextToSentryBaggageHeader } from '../utils-hoist/baggage';\nimport { logger } from '../utils-hoist/logger';\nimport { generateSentryTraceHeader, TRACEPARENT_REGEXP } from '../utils-hoist/tracing';\nimport { getActiveSpan, spanToTraceHeader } from './spanUtils';\n\n/**\n * Extracts trace propagation data from the current span or from the client's scope (via transaction or propagation\n * context) and serializes it to `sentry-trace` and `baggage` values to strings. These values can be used to propagate\n * a trace via our tracing Http headers or Html `<meta>` tags.\n *\n * This function also applies some validation to the generated sentry-trace and baggage values to ensure that\n * only valid strings are returned.\n *\n * @returns an object with the tracing data values. The object keys are the name of the tracing key to be used as header\n * or meta tag name.\n */\nexport function getTraceData(options: { span?: Span } = {}): SerializedTraceData {\n  const client = getClient();\n  if (!isEnabled() || !client) {\n    return {};\n  }\n\n  const carrier = getMainCarrier();\n  const acs = getAsyncContextStrategy(carrier);\n  if (acs.getTraceData) {\n    return acs.getTraceData(options);\n  }\n\n  const scope = getCurrentScope();\n  const span = options.span || getActiveSpan();\n  const sentryTrace = span ? spanToTraceHeader(span) : scopeToTraceHeader(scope);\n  const dsc = span ? getDynamicSamplingContextFromSpan(span) : getDynamicSamplingContextFromScope(client, scope);\n  const baggage = dynamicSamplingContextToSentryBaggageHeader(dsc);\n\n  const isValidSentryTraceHeader = TRACEPARENT_REGEXP.test(sentryTrace);\n  if (!isValidSentryTraceHeader) {\n    logger.warn('Invalid sentry-trace data. Cannot generate trace data');\n    return {};\n  }\n\n  return {\n    'sentry-trace': sentryTrace,\n    baggage,\n  };\n}\n\n/**\n * Get a sentry-trace header value for the given scope.\n */\nfunction scopeToTraceHeader(scope: Scope): string {\n  const { traceId, sampled, propagationSpanId } = scope.getPropagationContext();\n  return generateSentryTraceHeader(traceId, propagationSpanId, sampled);\n}\n", "import type { PolymorphicRequest } from '../types-hoist/polymorphics';\nimport type { RequestEventData } from '../types-hoist/request';\nimport type { WebFetchHeaders, WebFetchRequest } from '../types-hoist/webfetchapi';\n\n/**\n * Transforms a `Headers` object that implements the `Web Fetch API` (https://developer.mozilla.org/en-US/docs/Web/API/Headers) into a simple key-value dict.\n * The header keys will be lower case: e.g. A \"Content-Type\" header will be stored as \"content-type\".\n */\nexport function winterCGHeadersToDict(winterCGHeaders: WebFetchHeaders): Record<string, string> {\n  const headers: Record<string, string> = {};\n  try {\n    winterCGHeaders.forEach((value, key) => {\n      if (typeof value === 'string') {\n        // We check that value is a string even though it might be redundant to make sure prototype pollution is not possible.\n        headers[key] = value;\n      }\n    });\n  } catch {\n    // just return the empty headers\n  }\n\n  return headers;\n}\n\n/**\n * Convert common request headers to a simple dictionary.\n */\nexport function headersToDict(reqHeaders: Record<string, string | string[] | undefined>): Record<string, string> {\n  const headers: Record<string, string> = Object.create(null);\n\n  try {\n    Object.entries(reqHeaders).forEach(([key, value]) => {\n      if (typeof value === 'string') {\n        headers[key] = value;\n      }\n    });\n  } catch {\n    // just return the empty headers\n  }\n\n  return headers;\n}\n\n/**\n * Converts a `Request` object that implements the `Web Fetch API` (https://developer.mozilla.org/en-US/docs/Web/API/Headers) into the format that the `RequestData` integration understands.\n */\nexport function winterCGRequestToRequestData(req: WebFetchRequest): RequestEventData {\n  const headers = winterCGHeadersToDict(req.headers);\n\n  return {\n    method: req.method,\n    url: req.url,\n    query_string: extractQueryParamsFromUrl(req.url),\n    headers,\n    // TODO: Can we extract body data from the request?\n  };\n}\n\n/**\n * Convert a HTTP request object to RequestEventData to be passed as normalizedRequest.\n * Instead of allowing `PolymorphicRequest` to be passed,\n * we want to be more specific and generally require a http.IncomingMessage-like object.\n */\nexport function httpRequestToRequestData(request: {\n  method?: string;\n  url?: string;\n  headers?: {\n    [key: string]: string | string[] | undefined;\n  };\n  protocol?: string;\n  socket?: {\n    encrypted?: boolean;\n    remoteAddress?: string;\n  };\n}): RequestEventData {\n  const headers = request.headers || {};\n  const host = typeof headers.host === 'string' ? headers.host : undefined;\n  const protocol = request.protocol || (request.socket?.encrypted ? 'https' : 'http');\n  const url = request.url || '';\n\n  const absoluteUrl = getAbsoluteUrl({\n    url,\n    host,\n    protocol,\n  });\n\n  // This is non-standard, but may be sometimes set\n  // It may be overwritten later by our own body handling\n  const data = (request as PolymorphicRequest).body || undefined;\n\n  // This is non-standard, but may be set on e.g. Next.js or Express requests\n  const cookies = (request as PolymorphicRequest).cookies;\n\n  return {\n    url: absoluteUrl,\n    method: request.method,\n    query_string: extractQueryParamsFromUrl(url),\n    headers: headersToDict(headers),\n    cookies,\n    data,\n  };\n}\n\nfunction getAbsoluteUrl({\n  url,\n  protocol,\n  host,\n}: {\n  url?: string;\n  protocol: string;\n  host?: string;\n}): string | undefined {\n  if (url?.startsWith('http')) {\n    return url;\n  }\n\n  if (url && host) {\n    return `${protocol}://${host}${url}`;\n  }\n\n  return undefined;\n}\n\n/** Extract the query params from an URL. */\nexport function extractQueryParamsFromUrl(url: string): string | undefined {\n  // url is path and query string\n  if (!url) {\n    return;\n  }\n\n  try {\n    // The `URL` constructor can't handle internal URLs of the form `/some/path/here`, so stick a dummy protocol and\n    // hostname as the base. Since the point here is just to grab the query string, it doesn't matter what we use.\n    const queryParams = new URL(url, 'http://s.io').search.slice(1);\n    return queryParams.length ? queryParams : undefined;\n  } catch {\n    return undefined;\n  }\n}\n", "import { getClient, getIsolationScope } from './currentScopes';\nimport type { Breadcrumb, BreadcrumbHint } from './types-hoist/breadcrumb';\nimport { consoleSandbox } from './utils-hoist/logger';\nimport { dateTimestampInSeconds } from './utils-hoist/time';\n\n/**\n * Default maximum number of breadcrumbs added to an event. Can be overwritten\n * with {@link Options.maxBreadcrumbs}.\n */\nconst DEFAULT_BREADCRUMBS = 100;\n\n/**\n * Records a new breadcrumb which will be attached to future events.\n *\n * Breadcrumbs will be added to subsequent events to provide more context on\n * user's actions prior to an error or crash.\n */\nexport function addBreadcrumb(breadcrumb: Breadcrumb, hint?: BreadcrumbHint): void {\n  const client = getClient();\n  const isolationScope = getIsolationScope();\n\n  if (!client) return;\n\n  const { beforeBreadcrumb = null, maxBreadcrumbs = DEFAULT_BREADCRUMBS } = client.getOptions();\n\n  if (maxBreadcrumbs <= 0) return;\n\n  const timestamp = dateTimestampInSeconds();\n  const mergedBreadcrumb = { timestamp, ...breadcrumb };\n  const finalBreadcrumb = beforeBreadcrumb\n    ? (consoleSandbox(() => beforeBreadcrumb(mergedBreadcrumb, hint)) as Breadcrumb | null)\n    : mergedBreadcrumb;\n\n  if (finalBreadcrumb === null) return;\n\n  if (client.emit) {\n    client.emit('beforeAddBreadcrumb', finalBreadcrumb, hint);\n  }\n\n  isolationScope.addBreadcrumb(finalBreadcrumb, maxBreadcrumbs);\n}\n", "import type { Client } from '../client';\nimport { getClient } from '../currentScopes';\nimport { defineIntegration } from '../integration';\nimport type { IntegrationFn } from '../types-hoist/integration';\nimport type { WrappedFunction } from '../types-hoist/wrappedfunction';\nimport { getOriginalFunction } from '../utils-hoist/object';\n\nlet originalFunctionToString: () => void;\n\nconst INTEGRATION_NAME = 'FunctionToString';\n\nconst SETUP_CLIENTS = new WeakMap<Client, boolean>();\n\nconst _functionToStringIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      // eslint-disable-next-line @typescript-eslint/unbound-method\n      originalFunctionToString = Function.prototype.toString;\n\n      // intrinsics (like Function.prototype) might be immutable in some environments\n      // e.g. Node with --frozen-intrinsics, XS (an embedded JavaScript engine) or SES (a JavaScript proposal)\n      try {\n        Function.prototype.toString = function (this: WrappedFunction, ...args: unknown[]): string {\n          const originalFunction = getOriginalFunction(this);\n          const context =\n            SETUP_CLIENTS.has(getClient() as Client) && originalFunction !== undefined ? originalFunction : this;\n          return originalFunctionToString.apply(context, args);\n        };\n      } catch {\n        // ignore errors here, just don't patch this\n      }\n    },\n    setup(client) {\n      SETUP_CLIENTS.set(client, true);\n    },\n  };\n}) satisfies IntegrationFn;\n\n/**\n * Patch toString calls to return proper name for wrapped functions.\n *\n * ```js\n * Sentry.init({\n *   integrations: [\n *     functionToStringIntegration(),\n *   ],\n * });\n * ```\n */\nexport const functionToStringIntegration = defineIntegration(_functionToStringIntegration);\n", "import { DEBUG_BUILD } from '../debug-build';\nimport { defineIntegration } from '../integration';\nimport type { Event } from '../types-hoist/event';\nimport type { IntegrationFn } from '../types-hoist/integration';\nimport type { StackFrame } from '../types-hoist/stackframe';\nimport { getPossibleEventMessages } from '../utils/eventUtils';\nimport { logger } from '../utils-hoist/logger';\nimport { getEventDescription } from '../utils-hoist/misc';\nimport { stringMatchesSomePattern } from '../utils-hoist/string';\n\n// \"Script error.\" is hard coded into browsers for errors that it can't read.\n// this is the result of a script being pulled in from an external domain and CORS.\nconst DEFAULT_IGNORE_ERRORS = [\n  /^Script error\\.?$/,\n  /^Javascript error: Script error\\.? on line 0$/,\n  /^ResizeObserver loop completed with undelivered notifications.$/, // The browser logs this when a ResizeObserver handler takes a bit longer. Usually this is not an actual issue though. It indicates slowness.\n  /^Cannot redefine property: googletag$/, // This is thrown when google tag manager is used in combination with an ad blocker\n  /^Can't find variable: gmo$/, // Error from Google Search App https://issuetracker.google.com/issues/396043331\n  /^undefined is not an object \\(evaluating 'a\\.[A-Z]'\\)$/, // Random error that happens but not actionable or noticeable to end-users.\n  'can\\'t redefine non-configurable property \"solana\"', // Probably a browser extension or custom browser (Brave) throwing this error\n  \"vv().getRestrictions is not a function. (In 'vv().getRestrictions(1,a)', 'vv().getRestrictions' is undefined)\", // Error thrown by GTM, seemingly not affecting end-users\n  \"Can't find variable: _AutofillCallbackHandler\", // Unactionable error in instagram webview https://developers.facebook.com/community/threads/320013549791141/\n  /^Non-Error promise rejection captured with value: Object Not Found Matching Id:\\d+, MethodName:simulateEvent, ParamCount:\\d+$/, // unactionable error from CEFSharp, a .NET library that embeds chromium in .NET apps\n  /^Java exception was raised during method invocation$/, // error from Facebook Mobile browser (https://github.com/getsentry/sentry-javascript/issues/15065)\n];\n\n/** Options for the EventFilters integration */\nexport interface EventFiltersOptions {\n  allowUrls: Array<string | RegExp>;\n  denyUrls: Array<string | RegExp>;\n  ignoreErrors: Array<string | RegExp>;\n  ignoreTransactions: Array<string | RegExp>;\n  ignoreInternal: boolean;\n  disableErrorDefaults: boolean;\n}\n\nconst INTEGRATION_NAME = 'EventFilters';\n\n/**\n * An integration that filters out events (errors and transactions) based on:\n *\n * - (Errors) A curated list of known low-value or irrelevant errors (see {@link DEFAULT_IGNORE_ERRORS})\n * - (Errors) A list of error messages or urls/filenames passed in via\n *   - Top level Sentry.init options (`ignoreErrors`, `denyUrls`, `allowUrls`)\n *   - The same options passed to the integration directly via @param options\n * - (Transactions/Spans) A list of root span (transaction) names passed in via\n *   - Top level Sentry.init option (`ignoreTransactions`)\n *   - The same option passed to the integration directly via @param options\n *\n * Events filtered by this integration will not be sent to Sentry.\n */\nexport const eventFiltersIntegration = defineIntegration((options: Partial<EventFiltersOptions> = {}) => {\n  let mergedOptions: Partial<EventFiltersOptions> | undefined;\n  return {\n    name: INTEGRATION_NAME,\n    setup(client) {\n      const clientOptions = client.getOptions();\n      mergedOptions = _mergeOptions(options, clientOptions);\n    },\n    processEvent(event, _hint, client) {\n      if (!mergedOptions) {\n        const clientOptions = client.getOptions();\n        mergedOptions = _mergeOptions(options, clientOptions);\n      }\n      return _shouldDropEvent(event, mergedOptions) ? null : event;\n    },\n  };\n});\n\n/**\n * An integration that filters out events (errors and transactions) based on:\n *\n * - (Errors) A curated list of known low-value or irrelevant errors (see {@link DEFAULT_IGNORE_ERRORS})\n * - (Errors) A list of error messages or urls/filenames passed in via\n *   - Top level Sentry.init options (`ignoreErrors`, `denyUrls`, `allowUrls`)\n *   - The same options passed to the integration directly via @param options\n * - (Transactions/Spans) A list of root span (transaction) names passed in via\n *   - Top level Sentry.init option (`ignoreTransactions`)\n *   - The same option passed to the integration directly via @param options\n *\n * Events filtered by this integration will not be sent to Sentry.\n *\n * @deprecated this integration was renamed and will be removed in a future major version.\n * Use `eventFiltersIntegration` instead.\n */\nexport const inboundFiltersIntegration = defineIntegration(((options: Partial<EventFiltersOptions> = {}) => {\n  return {\n    ...eventFiltersIntegration(options),\n    name: 'InboundFilters',\n  };\n}) satisfies IntegrationFn);\n\nfunction _mergeOptions(\n  internalOptions: Partial<EventFiltersOptions> = {},\n  clientOptions: Partial<EventFiltersOptions> = {},\n): Partial<EventFiltersOptions> {\n  return {\n    allowUrls: [...(internalOptions.allowUrls || []), ...(clientOptions.allowUrls || [])],\n    denyUrls: [...(internalOptions.denyUrls || []), ...(clientOptions.denyUrls || [])],\n    ignoreErrors: [\n      ...(internalOptions.ignoreErrors || []),\n      ...(clientOptions.ignoreErrors || []),\n      ...(internalOptions.disableErrorDefaults ? [] : DEFAULT_IGNORE_ERRORS),\n    ],\n    ignoreTransactions: [...(internalOptions.ignoreTransactions || []), ...(clientOptions.ignoreTransactions || [])],\n  };\n}\n\nfunction _shouldDropEvent(event: Event, options: Partial<EventFiltersOptions>): boolean {\n  if (!event.type) {\n    // Filter errors\n    if (_isIgnoredError(event, options.ignoreErrors)) {\n      DEBUG_BUILD &&\n        logger.warn(\n          `Event dropped due to being matched by \\`ignoreErrors\\` option.\\nEvent: ${getEventDescription(event)}`,\n        );\n      return true;\n    }\n    if (_isUselessError(event)) {\n      DEBUG_BUILD &&\n        logger.warn(\n          `Event dropped due to not having an error message, error type or stacktrace.\\nEvent: ${getEventDescription(\n            event,\n          )}`,\n        );\n      return true;\n    }\n    if (_isDeniedUrl(event, options.denyUrls)) {\n      DEBUG_BUILD &&\n        logger.warn(\n          `Event dropped due to being matched by \\`denyUrls\\` option.\\nEvent: ${getEventDescription(\n            event,\n          )}.\\nUrl: ${_getEventFilterUrl(event)}`,\n        );\n      return true;\n    }\n    if (!_isAllowedUrl(event, options.allowUrls)) {\n      DEBUG_BUILD &&\n        logger.warn(\n          `Event dropped due to not being matched by \\`allowUrls\\` option.\\nEvent: ${getEventDescription(\n            event,\n          )}.\\nUrl: ${_getEventFilterUrl(event)}`,\n        );\n      return true;\n    }\n  } else if (event.type === 'transaction') {\n    // Filter transactions\n\n    if (_isIgnoredTransaction(event, options.ignoreTransactions)) {\n      DEBUG_BUILD &&\n        logger.warn(\n          `Event dropped due to being matched by \\`ignoreTransactions\\` option.\\nEvent: ${getEventDescription(event)}`,\n        );\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction _isIgnoredError(event: Event, ignoreErrors?: Array<string | RegExp>): boolean {\n  if (!ignoreErrors?.length) {\n    return false;\n  }\n\n  return getPossibleEventMessages(event).some(message => stringMatchesSomePattern(message, ignoreErrors));\n}\n\nfunction _isIgnoredTransaction(event: Event, ignoreTransactions?: Array<string | RegExp>): boolean {\n  if (!ignoreTransactions?.length) {\n    return false;\n  }\n\n  const name = event.transaction;\n  return name ? stringMatchesSomePattern(name, ignoreTransactions) : false;\n}\n\nfunction _isDeniedUrl(event: Event, denyUrls?: Array<string | RegExp>): boolean {\n  if (!denyUrls?.length) {\n    return false;\n  }\n  const url = _getEventFilterUrl(event);\n  return !url ? false : stringMatchesSomePattern(url, denyUrls);\n}\n\nfunction _isAllowedUrl(event: Event, allowUrls?: Array<string | RegExp>): boolean {\n  if (!allowUrls?.length) {\n    return true;\n  }\n  const url = _getEventFilterUrl(event);\n  return !url ? true : stringMatchesSomePattern(url, allowUrls);\n}\n\nfunction _getLastValidUrl(frames: StackFrame[] = []): string | null {\n  for (let i = frames.length - 1; i >= 0; i--) {\n    const frame = frames[i];\n\n    if (frame && frame.filename !== '<anonymous>' && frame.filename !== '[native code]') {\n      return frame.filename || null;\n    }\n  }\n\n  return null;\n}\n\nfunction _getEventFilterUrl(event: Event): string | null {\n  try {\n    // If there are linked exceptions or exception aggregates we only want to match against the top frame of the \"root\" (the main exception)\n    // The root always comes last in linked exceptions\n    const rootException = [...(event.exception?.values ?? [])]\n      .reverse()\n      .find(value => value.mechanism?.parent_id === undefined && value.stacktrace?.frames?.length);\n    const frames = rootException?.stacktrace?.frames;\n    return frames ? _getLastValidUrl(frames) : null;\n  } catch (oO) {\n    DEBUG_BUILD && logger.error(`Cannot extract url for event ${getEventDescription(event)}`);\n    return null;\n  }\n}\n\nfunction _isUselessError(event: Event): boolean {\n  // We only want to consider events for dropping that actually have recorded exception values.\n  if (!event.exception?.values?.length) {\n    return false;\n  }\n\n  return (\n    // No top-level message\n    !event.message &&\n    // There are no exception values that have a stacktrace, a non-generic-Error type or value\n    !event.exception.values.some(value => value.stacktrace || (value.type && value.type !== 'Error') || value.value)\n  );\n}\n", "import type { ExtendedError } from '../types-hoist/error';\nimport type { Event, EventHint } from '../types-hoist/event';\nimport type { Exception } from '../types-hoist/exception';\nimport type { StackParser } from '../types-hoist/stacktrace';\nimport { isInstanceOf } from './is';\n\n/**\n * Creates exceptions inside `event.exception.values` for errors that are nested on properties based on the `key` parameter.\n */\nexport function applyAggregateErrorsToEvent(\n  exceptionFromErrorImplementation: (stackParser: StackParser, ex: Error) => Exception,\n  parser: StackParser,\n  key: string,\n  limit: number,\n  event: Event,\n  hint?: EventHint,\n): void {\n  if (!event.exception?.values || !hint || !isInstanceOf(hint.originalException, Error)) {\n    return;\n  }\n\n  // Generally speaking the last item in `event.exception.values` is the exception originating from the original Error\n  const originalException: Exception | undefined =\n    event.exception.values.length > 0 ? event.exception.values[event.exception.values.length - 1] : undefined;\n\n  // We only create exception grouping if there is an exception in the event.\n  if (originalException) {\n    event.exception.values = aggregateExceptionsFromError(\n      exceptionFromErrorImplementation,\n      parser,\n      limit,\n      hint.originalException as ExtendedError,\n      key,\n      event.exception.values,\n      originalException,\n      0,\n    );\n  }\n}\n\nfunction aggregateExceptionsFromError(\n  exceptionFromErrorImplementation: (stackParser: StackParser, ex: Error) => Exception,\n  parser: StackParser,\n  limit: number,\n  error: ExtendedError,\n  key: string,\n  prevExceptions: Exception[],\n  exception: Exception,\n  exceptionId: number,\n): Exception[] {\n  if (prevExceptions.length >= limit + 1) {\n    return prevExceptions;\n  }\n\n  let newExceptions = [...prevExceptions];\n\n  // Recursively call this function in order to walk down a chain of errors\n  if (isInstanceOf(error[key], Error)) {\n    applyExceptionGroupFieldsForParentException(exception, exceptionId);\n    const newException = exceptionFromErrorImplementation(parser, error[key]);\n    const newExceptionId = newExceptions.length;\n    applyExceptionGroupFieldsForChildException(newException, key, newExceptionId, exceptionId);\n    newExceptions = aggregateExceptionsFromError(\n      exceptionFromErrorImplementation,\n      parser,\n      limit,\n      error[key],\n      key,\n      [newException, ...newExceptions],\n      newException,\n      newExceptionId,\n    );\n  }\n\n  // This will create exception grouping for AggregateErrors\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AggregateError\n  if (Array.isArray(error.errors)) {\n    error.errors.forEach((childError, i) => {\n      if (isInstanceOf(childError, Error)) {\n        applyExceptionGroupFieldsForParentException(exception, exceptionId);\n        const newException = exceptionFromErrorImplementation(parser, childError);\n        const newExceptionId = newExceptions.length;\n        applyExceptionGroupFieldsForChildException(newException, `errors[${i}]`, newExceptionId, exceptionId);\n        newExceptions = aggregateExceptionsFromError(\n          exceptionFromErrorImplementation,\n          parser,\n          limit,\n          childError,\n          key,\n          [newException, ...newExceptions],\n          newException,\n          newExceptionId,\n        );\n      }\n    });\n  }\n\n  return newExceptions;\n}\n\nfunction applyExceptionGroupFieldsForParentException(exception: Exception, exceptionId: number): void {\n  // Don't know if this default makes sense. The protocol requires us to set these values so we pick *some* default.\n  exception.mechanism = exception.mechanism || { type: 'generic', handled: true };\n\n  exception.mechanism = {\n    ...exception.mechanism,\n    ...(exception.type === 'AggregateError' && { is_exception_group: true }),\n    exception_id: exceptionId,\n  };\n}\n\nfunction applyExceptionGroupFieldsForChildException(\n  exception: Exception,\n  source: string,\n  exceptionId: number,\n  parentId: number | undefined,\n): void {\n  // Don't know if this default makes sense. The protocol requires us to set these values so we pick *some* default.\n  exception.mechanism = exception.mechanism || { type: 'generic', handled: true };\n\n  exception.mechanism = {\n    ...exception.mechanism,\n    type: 'chained',\n    source,\n    exception_id: exceptionId,\n    parent_id: parentId,\n  };\n}\n", "import { defineIntegration } from '../integration';\nimport type { IntegrationFn } from '../types-hoist/integration';\nimport { applyAggregateErrorsToEvent } from '../utils-hoist/aggregate-errors';\nimport { exceptionFromError } from '../utils-hoist/eventbuilder';\n\ninterface LinkedErrorsOptions {\n  key?: string;\n  limit?: number;\n}\n\nconst DEFAULT_KEY = 'cause';\nconst DEFAULT_LIMIT = 5;\n\nconst INTEGRATION_NAME = 'LinkedErrors';\n\nconst _linkedErrorsIntegration = ((options: LinkedErrorsOptions = {}) => {\n  const limit = options.limit || DEFAULT_LIMIT;\n  const key = options.key || DEFAULT_KEY;\n\n  return {\n    name: INTEGRATION_NAME,\n    preprocessEvent(event, hint, client) {\n      const options = client.getOptions();\n\n      applyAggregateErrorsToEvent(exceptionFromError, options.stackParser, key, limit, event, hint);\n    },\n  };\n}) satisfies IntegrationFn;\n\nexport const linkedErrorsIntegration = defineIntegration(_linkedErrorsIntegration);\n", "/**\n * This code was originally copied from the 'cookie` module at v0.5.0 and was simplified for our use case.\n * https://github.com/jshttp/cookie/blob/a0c84147aab6266bdb3996cf4062e93907c0b0fc/index.js\n * It had the following license:\n *\n * (The MIT License)\n *\n * Copyright (c) 2012-2014 Roman Shtylman <shtylman@gmail.com>\n * Copyright (c) 2015 Douglas Christopher Wilson <doug@somethingdoug.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * 'Software'), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * Parses a cookie string\n */\nexport function parseCookie(str: string): Record<string, string> {\n  const obj: Record<string, string> = {};\n  let index = 0;\n\n  while (index < str.length) {\n    const eqIdx = str.indexOf('=', index);\n\n    // no more cookie pairs\n    if (eqIdx === -1) {\n      break;\n    }\n\n    let endIdx = str.indexOf(';', index);\n\n    if (endIdx === -1) {\n      endIdx = str.length;\n    } else if (endIdx < eqIdx) {\n      // backtrack on prior semicolon\n      index = str.lastIndexOf(';', eqIdx - 1) + 1;\n      continue;\n    }\n\n    const key = str.slice(index, eqIdx).trim();\n\n    // only assign once\n    if (undefined === obj[key]) {\n      let val = str.slice(eqIdx + 1, endIdx).trim();\n\n      // quoted values\n      if (val.charCodeAt(0) === 0x22) {\n        val = val.slice(1, -1);\n      }\n\n      try {\n        obj[key] = val.indexOf('%') !== -1 ? decodeURIComponent(val) : val;\n      } catch (e) {\n        obj[key] = val;\n      }\n    }\n\n    index = endIdx + 1;\n  }\n\n  return obj;\n}\n", "// Vendored / modified from @sergiodxa/remix-utils\n\n// https://github.com/sergiodxa/remix-utils/blob/02af80e12829a53696bfa8f3c2363975cf59f55e/src/server/get-client-ip-address.ts\n// MIT License\n\n// Copyright (c) 2021 Sergio Xalambrí\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\n// The headers to check, in priority order\nexport const ipHeaderNames = [\n  'X-Client-IP',\n  'X-Forwarded-For',\n  'Fly-Client-IP',\n  'CF-Connecting-IP',\n  'Fastly-Client-Ip',\n  'True-Client-Ip',\n  'X-Real-IP',\n  'X-Cluster-Client-IP',\n  'X-Forwarded',\n  'Forwarded-For',\n  'Forwarded',\n  'X-Vercel-Forwarded-For',\n];\n\n/**\n * Get the IP address of the client sending a request.\n *\n * It receives a Request headers object and use it to get the\n * IP address from one of the following headers in order.\n *\n * If the IP address is valid, it will be returned. Otherwise, null will be\n * returned.\n *\n * If the header values contains more than one IP address, the first valid one\n * will be returned.\n */\nexport function getClientIPAddress(headers: { [key: string]: string | string[] | undefined }): string | null {\n  // This will end up being Array<string | string[] | undefined | null> because of the various possible values a header\n  // can take\n  const headerValues = ipHeaderNames.map((headerName: string) => {\n    const rawValue = headers[headerName];\n    const value = Array.isArray(rawValue) ? rawValue.join(';') : rawValue;\n\n    if (headerName === 'Forwarded') {\n      return parseForwardedHeader(value);\n    }\n\n    return value?.split(',').map((v: string) => v.trim());\n  });\n\n  // Flatten the array and filter out any falsy entries\n  const flattenedHeaderValues = headerValues.reduce((acc: string[], val) => {\n    if (!val) {\n      return acc;\n    }\n\n    return acc.concat(val);\n  }, []);\n\n  // Find the first value which is a valid IP address, if any\n  const ipAddress = flattenedHeaderValues.find(ip => ip !== null && isIP(ip));\n\n  return ipAddress || null;\n}\n\nfunction parseForwardedHeader(value: string | null | undefined): string | null {\n  if (!value) {\n    return null;\n  }\n\n  for (const part of value.split(';')) {\n    if (part.startsWith('for=')) {\n      return part.slice(4);\n    }\n  }\n\n  return null;\n}\n\n//\n/**\n * Custom method instead of importing this from `net` package, as this only exists in node\n * Accepts:\n * 127.0.0.1\n * 192.168.1.1\n * 192.168.1.255\n * 255.255.255.255\n * 10.1.1.1\n * 0.0.0.0\n * 2b01:cb19:8350:ed00:d0dd:fa5b:de31:8be5\n *\n * Rejects:\n * 1.1.1.01\n * 30.168.1.255.1\n * 127.1\n * 192.168.1.256\n * -1.2.3.4\n * 1.1.1.1.\n * 3...3\n * 192.168.1.099\n */\nfunction isIP(str: string): boolean {\n  const regex =\n    /(?:^(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}$)|(?:^(?:(?:[a-fA-F\\d]{1,4}:){7}(?:[a-fA-F\\d]{1,4}|:)|(?:[a-fA-F\\d]{1,4}:){6}(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|:[a-fA-F\\d]{1,4}|:)|(?:[a-fA-F\\d]{1,4}:){5}(?::(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(?::[a-fA-F\\d]{1,4}){1,2}|:)|(?:[a-fA-F\\d]{1,4}:){4}(?:(?::[a-fA-F\\d]{1,4}){0,1}:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(?::[a-fA-F\\d]{1,4}){1,3}|:)|(?:[a-fA-F\\d]{1,4}:){3}(?:(?::[a-fA-F\\d]{1,4}){0,2}:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(?::[a-fA-F\\d]{1,4}){1,4}|:)|(?:[a-fA-F\\d]{1,4}:){2}(?:(?::[a-fA-F\\d]{1,4}){0,3}:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(?::[a-fA-F\\d]{1,4}){1,5}|:)|(?:[a-fA-F\\d]{1,4}:){1}(?:(?::[a-fA-F\\d]{1,4}){0,4}:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(?::[a-fA-F\\d]{1,4}){1,6}|:)|(?::(?:(?::[a-fA-F\\d]{1,4}){0,5}:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(?::[a-fA-F\\d]{1,4}){1,7}|:)))(?:%[0-9a-zA-Z]{1,})?$)/;\n  return regex.test(str);\n}\n", "import { defineIntegration } from '../integration';\nimport type { Event } from '../types-hoist/event';\nimport type { IntegrationFn } from '../types-hoist/integration';\nimport type { RequestEventData } from '../types-hoist/request';\nimport { parseCookie } from '../utils/cookie';\nimport { getClientIPAddress, ipHeaderNames } from '../vendor/getIpAddress';\n\ninterface RequestDataIncludeOptions {\n  cookies?: boolean;\n  data?: boolean;\n  headers?: boolean;\n  ip?: boolean;\n  query_string?: boolean;\n  url?: boolean;\n}\n\ntype RequestDataIntegrationOptions = {\n  /**\n   * Controls what data is pulled from the request and added to the event.\n   */\n  include?: RequestDataIncludeOptions;\n};\n\n// TODO(v10): Change defaults based on `sendDefaultPii`\nconst DEFAULT_INCLUDE: RequestDataIncludeOptions = {\n  cookies: true,\n  data: true,\n  headers: true,\n  query_string: true,\n  url: true,\n};\n\nconst INTEGRATION_NAME = 'RequestData';\n\nconst _requestDataIntegration = ((options: RequestDataIntegrationOptions = {}) => {\n  const include = {\n    ...DEFAULT_INCLUDE,\n    ...options.include,\n  };\n\n  return {\n    name: INTEGRATION_NAME,\n    processEvent(event, _hint, client) {\n      const { sdkProcessingMetadata = {} } = event;\n      const { normalizedRequest, ipAddress } = sdkProcessingMetadata;\n\n      const includeWithDefaultPiiApplied: RequestDataIncludeOptions = {\n        ...include,\n        ip: include.ip ?? client.getOptions().sendDefaultPii,\n      };\n\n      if (normalizedRequest) {\n        addNormalizedRequestDataToEvent(event, normalizedRequest, { ipAddress }, includeWithDefaultPiiApplied);\n      }\n\n      return event;\n    },\n  };\n}) satisfies IntegrationFn;\n\n/**\n * Add data about a request to an event. Primarily for use in Node-based SDKs, but included in `@sentry/core`\n * so it can be used in cross-platform SDKs like `@sentry/nextjs`.\n */\nexport const requestDataIntegration = defineIntegration(_requestDataIntegration);\n\n/**\n * Add already normalized request data to an event.\n * This mutates the passed in event.\n */\nfunction addNormalizedRequestDataToEvent(\n  event: Event,\n  req: RequestEventData,\n  // Data that should not go into `event.request` but is somehow related to requests\n  additionalData: { ipAddress?: string },\n  include: RequestDataIncludeOptions,\n): void {\n  event.request = {\n    ...event.request,\n    ...extractNormalizedRequestData(req, include),\n  };\n\n  if (include.ip) {\n    const ip = (req.headers && getClientIPAddress(req.headers)) || additionalData.ipAddress;\n    if (ip) {\n      event.user = {\n        ...event.user,\n        ip_address: ip,\n      };\n    }\n  }\n}\n\nfunction extractNormalizedRequestData(\n  normalizedRequest: RequestEventData,\n  include: RequestDataIncludeOptions,\n): RequestEventData {\n  const requestData: RequestEventData = {};\n  const headers = { ...normalizedRequest.headers };\n\n  if (include.headers) {\n    requestData.headers = headers;\n\n    // Remove the Cookie header in case cookie data should not be included in the event\n    if (!include.cookies) {\n      delete (headers as { cookie?: string }).cookie;\n    }\n\n    // Remove IP headers in case IP data should not be included in the event\n    if (!include.ip) {\n      ipHeaderNames.forEach(ipHeaderName => {\n        // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n        delete (headers as Record<string, unknown>)[ipHeaderName];\n      });\n    }\n  }\n\n  requestData.method = normalizedRequest.method;\n\n  if (include.url) {\n    requestData.url = normalizedRequest.url;\n  }\n\n  if (include.cookies) {\n    const cookies = normalizedRequest.cookies || (headers?.cookie ? parseCookie(headers.cookie) : undefined);\n    requestData.cookies = cookies || {};\n  }\n\n  if (include.query_string) {\n    requestData.query_string = normalizedRequest.query_string;\n  }\n\n  if (include.data) {\n    requestData.data = normalizedRequest.data;\n  }\n\n  return requestData;\n}\n", "/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/ban-types */\nimport type { ConsoleLevel, HandlerDataConsole } from '../../types-hoist/instrument';\nimport { CONSOLE_LEVELS, originalConsoleMethods } from '../logger';\nimport { fill } from '../object';\nimport { GLOBAL_OBJ } from '../worldwide';\nimport { addHandler, maybeInstrument, triggerHandlers } from './handlers';\n\n/**\n * Add an instrumentation handler for when a console.xxx method is called.\n *\n * Use at your own risk, this might break without changelog notice, only used internally.\n * @hidden\n */\nexport function addConsoleInstrumentationHandler(handler: (data: HandlerDataConsole) => void): void {\n  const type = 'console';\n  addHandler(type, handler);\n  maybeInstrument(type, instrumentConsole);\n}\n\nfunction instrumentConsole(): void {\n  if (!('console' in GLOBAL_OBJ)) {\n    return;\n  }\n\n  CONSOLE_LEVELS.forEach(function (level: ConsoleLevel): void {\n    if (!(level in GLOBAL_OBJ.console)) {\n      return;\n    }\n\n    fill(GLOBAL_OBJ.console, level, function (originalConsoleMethod: () => any): Function {\n      originalConsoleMethods[level] = originalConsoleMethod;\n\n      return function (...args: any[]): void {\n        const handlerData: HandlerDataConsole = { args, level };\n        triggerHandlers('console', handlerData);\n\n        const log = originalConsoleMethods[level];\n        log?.apply(GLOBAL_OBJ.console, args);\n      };\n    });\n  });\n}\n", "import type { SeverityLevel } from '../types-hoist/severity';\n\n/**\n * Converts a string-based level into a `SeverityLevel`, normalizing it along the way.\n *\n * @param level String representation of desired `SeverityLevel`.\n * @returns The `SeverityLevel` corresponding to the given string, or 'log' if the string isn't a valid level.\n */\nexport function severityLevelFromString(level: SeverityLevel | string): SeverityLevel {\n  return (\n    level === 'warn' ? 'warning' : ['fatal', 'error', 'warning', 'log', 'info', 'debug'].includes(level) ? level : 'log'\n  ) as SeverityLevel;\n}\n", "// Slightly modified (no IE8 support, ES6) and transcribed to TypeScript\n// https://github.com/calvinmetcalf/rollup-plugin-node-builtins/blob/63ab8aacd013767445ca299e468d9a60a95328d7/src/es6/path.js\n//\n// Copyright Joyent, Inc.and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n/** JSDoc */\nfunction normalizeArray(parts: string[], allowAboveRoot?: boolean): string[] {\n  // if the path tries to go above the root, `up` ends up > 0\n  let up = 0;\n  for (let i = parts.length - 1; i >= 0; i--) {\n    const last = parts[i];\n    if (last === '.') {\n      parts.splice(i, 1);\n    } else if (last === '..') {\n      parts.splice(i, 1);\n      up++;\n    } else if (up) {\n      parts.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (allowAboveRoot) {\n    for (; up--; up) {\n      parts.unshift('..');\n    }\n  }\n\n  return parts;\n}\n\n// Split a filename into [root, dir, basename, ext], unix version\n// 'root' is just a slash, or nothing.\nconst splitPathRe = /^(\\S+:\\\\|\\/?)([\\s\\S]*?)((?:\\.{1,2}|[^/\\\\]+?|)(\\.[^./\\\\]*|))(?:[/\\\\]*)$/;\n/** JSDoc */\nfunction splitPath(filename: string): string[] {\n  // Truncate files names greater than 1024 characters to avoid regex dos\n  // https://github.com/getsentry/sentry-javascript/pull/8737#discussion_r1285719172\n  const truncated = filename.length > 1024 ? `<truncated>${filename.slice(-1024)}` : filename;\n  const parts = splitPathRe.exec(truncated);\n  return parts ? parts.slice(1) : [];\n}\n\n// path.resolve([from ...], to)\n// posix version\n/** JSDoc */\nexport function resolve(...args: string[]): string {\n  let resolvedPath = '';\n  let resolvedAbsolute = false;\n\n  for (let i = args.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n    const path = i >= 0 ? args[i] : '/';\n\n    // Skip empty entries\n    if (!path) {\n      continue;\n    }\n\n    resolvedPath = `${path}/${resolvedPath}`;\n    resolvedAbsolute = path.charAt(0) === '/';\n  }\n\n  // At this point the path should be resolved to a full absolute path, but\n  // handle relative paths to be safe (might happen when process.cwd() fails)\n\n  // Normalize the path\n  resolvedPath = normalizeArray(\n    resolvedPath.split('/').filter(p => !!p),\n    !resolvedAbsolute,\n  ).join('/');\n\n  return (resolvedAbsolute ? '/' : '') + resolvedPath || '.';\n}\n\n/** JSDoc */\nfunction trim(arr: string[]): string[] {\n  let start = 0;\n  for (; start < arr.length; start++) {\n    if (arr[start] !== '') {\n      break;\n    }\n  }\n\n  let end = arr.length - 1;\n  for (; end >= 0; end--) {\n    if (arr[end] !== '') {\n      break;\n    }\n  }\n\n  if (start > end) {\n    return [];\n  }\n  return arr.slice(start, end - start + 1);\n}\n\n// path.relative(from, to)\n// posix version\n/** JSDoc */\nexport function relative(from: string, to: string): string {\n  /* eslint-disable no-param-reassign */\n  from = resolve(from).slice(1);\n  to = resolve(to).slice(1);\n  /* eslint-enable no-param-reassign */\n\n  const fromParts = trim(from.split('/'));\n  const toParts = trim(to.split('/'));\n\n  const length = Math.min(fromParts.length, toParts.length);\n  let samePartsLength = length;\n  for (let i = 0; i < length; i++) {\n    if (fromParts[i] !== toParts[i]) {\n      samePartsLength = i;\n      break;\n    }\n  }\n\n  let outputParts = [];\n  for (let i = samePartsLength; i < fromParts.length; i++) {\n    outputParts.push('..');\n  }\n\n  outputParts = outputParts.concat(toParts.slice(samePartsLength));\n\n  return outputParts.join('/');\n}\n\n// path.normalize(path)\n// posix version\n/** JSDoc */\nexport function normalizePath(path: string): string {\n  const isPathAbsolute = isAbsolute(path);\n  const trailingSlash = path.slice(-1) === '/';\n\n  // Normalize the path\n  let normalizedPath = normalizeArray(\n    path.split('/').filter(p => !!p),\n    !isPathAbsolute,\n  ).join('/');\n\n  if (!normalizedPath && !isPathAbsolute) {\n    normalizedPath = '.';\n  }\n  if (normalizedPath && trailingSlash) {\n    normalizedPath += '/';\n  }\n\n  return (isPathAbsolute ? '/' : '') + normalizedPath;\n}\n\n// posix version\n/** JSDoc */\nexport function isAbsolute(path: string): boolean {\n  return path.charAt(0) === '/';\n}\n\n// posix version\n/** JSDoc */\nexport function join(...args: string[]): string {\n  return normalizePath(args.join('/'));\n}\n\n/** JSDoc */\nexport function dirname(path: string): string {\n  const result = splitPath(path);\n  const root = result[0] || '';\n  let dir = result[1];\n\n  if (!root && !dir) {\n    // No dirname whatsoever\n    return '.';\n  }\n\n  if (dir) {\n    // It has a dirname, strip trailing slash\n    dir = dir.slice(0, dir.length - 1);\n  }\n\n  return root + dir;\n}\n\n/** JSDoc */\nexport function basename(path: string, ext?: string): string {\n  let f = splitPath(path)[2] || '';\n  if (ext && f.slice(ext.length * -1) === ext) {\n    f = f.slice(0, f.length - ext.length);\n  }\n  return f;\n}\n", "import { addBreadcrumb } from '../breadcrumbs';\nimport { getClient } from '../currentScopes';\nimport { defineIntegration } from '../integration';\nimport type { ConsoleLevel } from '../types-hoist/instrument';\nimport { addConsoleInstrumentationHandler } from '../utils-hoist/instrument/console';\nimport { CONSOLE_LEVELS } from '../utils-hoist/logger';\nimport { severityLevelFromString } from '../utils-hoist/severity';\nimport { safeJoin } from '../utils-hoist/string';\nimport { GLOBAL_OBJ } from '../utils-hoist/worldwide';\n\ninterface ConsoleIntegrationOptions {\n  levels: ConsoleLevel[];\n}\n\ntype GlobalObjectWithUtil = typeof GLOBAL_OBJ & {\n  util: {\n    format: (...args: unknown[]) => string;\n  };\n};\n\nconst INTEGRATION_NAME = 'Console';\n\n/**\n * Captures calls to the `console` API as breadcrumbs in Sentry.\n *\n * By default the integration instruments `console.debug`, `console.info`, `console.warn`, `console.error`,\n * `console.log`, `console.trace`, and `console.assert`. You can use the `levels` option to customize which\n * levels are captured.\n *\n * @example\n *\n * ```js\n * Sentry.init({\n *   integrations: [Sentry.consoleIntegration({ levels: ['error', 'warn'] })],\n * });\n * ```\n */\nexport const consoleIntegration = defineIntegration((options: Partial<ConsoleIntegrationOptions> = {}) => {\n  const levels = new Set(options.levels || CONSOLE_LEVELS);\n\n  return {\n    name: INTEGRATION_NAME,\n    setup(client) {\n      addConsoleInstrumentationHandler(({ args, level }) => {\n        if (getClient() !== client || !levels.has(level)) {\n          return;\n        }\n\n        addConsoleBreadcrumb(level, args);\n      });\n    },\n  };\n});\n\n/**\n * Capture a console breadcrumb.\n *\n * Exported just for tests.\n */\nexport function addConsoleBreadcrumb(level: ConsoleLevel, args: unknown[]): void {\n  const breadcrumb = {\n    category: 'console',\n    data: {\n      arguments: args,\n      logger: 'console',\n    },\n    level: severityLevelFromString(level),\n    message: formatConsoleArgs(args),\n  };\n\n  if (level === 'assert') {\n    if (args[0] === false) {\n      const assertionArgs = args.slice(1);\n      breadcrumb.message =\n        assertionArgs.length > 0 ? `Assertion failed: ${formatConsoleArgs(assertionArgs)}` : 'Assertion failed';\n      breadcrumb.data.arguments = assertionArgs;\n    } else {\n      // Don't capture a breadcrumb for passed assertions\n      return;\n    }\n  }\n\n  addBreadcrumb(breadcrumb, {\n    input: args,\n    level,\n  });\n}\n\nfunction formatConsoleArgs(values: unknown[]): string {\n  return 'util' in GLOBAL_OBJ && typeof (GLOBAL_OBJ as GlobalObjectWithUtil).util.format === 'function'\n    ? (GLOBAL_OBJ as GlobalObjectWithUtil).util.format(...values)\n    : safeJoin(values, ' ');\n}\n", "import {\n  SEMANTIC_ATTRIBUTE_HTTP_REQUEST_METHOD,\n  SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN,\n  SEMANTIC_ATTRIBUTE_SENTRY_SOURCE,\n  SEMANTIC_ATTRIBUTE_URL_FULL,\n} from '../semanticAttributes';\nimport type { SpanAttributes } from '../types-hoist/span';\n\ntype PartialURL = {\n  host?: string;\n  path?: string;\n  protocol?: string;\n  relative?: string;\n  search?: string;\n  hash?: string;\n};\n\ninterface URLwithCanParse extends URL {\n  canParse: (url: string, base?: string | URL | undefined) => boolean;\n}\n\n// A subset of the URL object that is valid for relative URLs\n// The URL object cannot handle relative URLs, so we need to handle them separately\ntype RelativeURL = {\n  isRelative: true;\n  pathname: URL['pathname'];\n  search: URL['search'];\n  hash: URL['hash'];\n};\n\ntype URLObject = RelativeURL | URL;\n\n// Curious about `thismessage:/`? See: https://www.rfc-editor.org/rfc/rfc2557.html\n//  > When the methods above do not yield an absolute URI, a base URL\n//  > of \"thismessage:/\" MUST be employed. This base URL has been\n//  > defined for the sole purpose of resolving relative references\n//  > within a multipart/related structure when no other base URI is\n//  > specified.\n//\n// We need to provide a base URL to `parseStringToURLObject` because the fetch API gives us a\n// relative URL sometimes.\n//\n// This is the only case where we need to provide a base URL to `parseStringToURLObject`\n// because the relative URL is not valid on its own.\nconst DEFAULT_BASE_URL = 'thismessage:/';\n\n/**\n * Checks if the URL object is relative\n *\n * @param url - The URL object to check\n * @returns True if the URL object is relative, false otherwise\n */\nexport function isURLObjectRelative(url: URLObject): url is RelativeURL {\n  return 'isRelative' in url;\n}\n\n/**\n * Parses string to a URL object\n *\n * @param url - The URL to parse\n * @returns The parsed URL object or undefined if the URL is invalid\n */\nexport function parseStringToURLObject(url: string, urlBase?: string | URL | undefined): URLObject | undefined {\n  const isRelative = url.indexOf('://') <= 0 && url.indexOf('//') !== 0;\n  const base = urlBase ?? (isRelative ? DEFAULT_BASE_URL : undefined);\n  try {\n    // Use `canParse` to short-circuit the URL constructor if it's not a valid URL\n    // This is faster than trying to construct the URL and catching the error\n    // Node 20+, Chrome 120+, Firefox 115+, Safari 17+\n    if ('canParse' in URL && !(URL as unknown as URLwithCanParse).canParse(url, base)) {\n      return undefined;\n    }\n\n    const fullUrlObject = new URL(url, base);\n    if (isRelative) {\n      // Because we used a fake base URL, we need to return a relative URL object.\n      // We cannot return anything about the origin, host, etc. because it will refer to the fake base URL.\n      return {\n        isRelative,\n        pathname: fullUrlObject.pathname,\n        search: fullUrlObject.search,\n        hash: fullUrlObject.hash,\n      };\n    }\n    return fullUrlObject;\n  } catch {\n    // empty body\n  }\n\n  return undefined;\n}\n\n/**\n * Takes a URL object and returns a sanitized string which is safe to use as span name\n * see: https://develop.sentry.dev/sdk/data-handling/#structuring-data\n */\nexport function getSanitizedUrlStringFromUrlObject(url: URLObject): string {\n  if (isURLObjectRelative(url)) {\n    return url.pathname;\n  }\n\n  const newUrl = new URL(url);\n  newUrl.search = '';\n  newUrl.hash = '';\n  if (['80', '443'].includes(newUrl.port)) {\n    newUrl.port = '';\n  }\n  if (newUrl.password) {\n    newUrl.password = '%filtered%';\n  }\n  if (newUrl.username) {\n    newUrl.username = '%filtered%';\n  }\n\n  return newUrl.toString();\n}\n\ntype PartialRequest = {\n  method?: string;\n};\n\nfunction getHttpSpanNameFromUrlObject(\n  urlObject: URLObject | undefined,\n  kind: 'server' | 'client',\n  request?: PartialRequest,\n  routeName?: string,\n): string {\n  const method = request?.method?.toUpperCase() ?? 'GET';\n  const route = routeName\n    ? routeName\n    : urlObject\n      ? kind === 'client'\n        ? getSanitizedUrlStringFromUrlObject(urlObject)\n        : urlObject.pathname\n      : '/';\n\n  return `${method} ${route}`;\n}\n\n/**\n * Takes a parsed URL object and returns a set of attributes for the span\n * that represents the HTTP request for that url. This is used for both server\n * and client http spans.\n *\n * Follows https://opentelemetry.io/docs/specs/semconv/http/.\n *\n * @param urlObject - see {@link parseStringToURLObject}\n * @param kind - The type of HTTP operation (server or client)\n * @param spanOrigin - The origin of the span\n * @param request - The request object, see {@link PartialRequest}\n * @param routeName - The name of the route, must be low cardinality\n * @returns The span name and attributes for the HTTP operation\n */\nexport function getHttpSpanDetailsFromUrlObject(\n  urlObject: URLObject | undefined,\n  kind: 'server' | 'client',\n  spanOrigin: string,\n  request?: PartialRequest,\n  routeName?: string,\n): [name: string, attributes: SpanAttributes] {\n  const attributes: SpanAttributes = {\n    [SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: spanOrigin,\n    [SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: 'url',\n  };\n\n  if (routeName) {\n    // This is based on https://opentelemetry.io/docs/specs/semconv/http/http-spans/#name\n    attributes[kind === 'server' ? 'http.route' : 'url.template'] = routeName;\n    attributes[SEMANTIC_ATTRIBUTE_SENTRY_SOURCE] = 'route';\n  }\n\n  if (request?.method) {\n    attributes[SEMANTIC_ATTRIBUTE_HTTP_REQUEST_METHOD] = request.method.toUpperCase();\n  }\n\n  if (urlObject) {\n    if (urlObject.search) {\n      attributes['url.query'] = urlObject.search;\n    }\n    if (urlObject.hash) {\n      attributes['url.fragment'] = urlObject.hash;\n    }\n    if (urlObject.pathname) {\n      attributes['url.path'] = urlObject.pathname;\n      if (urlObject.pathname === '/') {\n        attributes[SEMANTIC_ATTRIBUTE_SENTRY_SOURCE] = 'route';\n      }\n    }\n\n    if (!isURLObjectRelative(urlObject)) {\n      attributes[SEMANTIC_ATTRIBUTE_URL_FULL] = urlObject.href;\n      if (urlObject.port) {\n        attributes['url.port'] = urlObject.port;\n      }\n      if (urlObject.protocol) {\n        attributes['url.scheme'] = urlObject.protocol;\n      }\n      if (urlObject.hostname) {\n        attributes[kind === 'server' ? 'server.address' : 'url.domain'] = urlObject.hostname;\n      }\n    }\n  }\n\n  return [getHttpSpanNameFromUrlObject(urlObject, kind, request, routeName), attributes];\n}\n\n/**\n * Parses string form of URL into an object\n * // borrowed from https://tools.ietf.org/html/rfc3986#appendix-B\n * // intentionally using regex and not <a/> href parsing trick because React Native and other\n * // environments where DOM might not be available\n * @returns parsed URL object\n */\nexport function parseUrl(url: string): PartialURL {\n  if (!url) {\n    return {};\n  }\n\n  const match = url.match(/^(([^:/?#]+):)?(\\/\\/([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?$/);\n\n  if (!match) {\n    return {};\n  }\n\n  // coerce to undefined values to empty string so we don't get 'undefined'\n  const query = match[6] || '';\n  const fragment = match[8] || '';\n  return {\n    host: match[4],\n    path: match[5],\n    protocol: match[2],\n    search: query,\n    hash: fragment,\n    relative: match[5] + query + fragment, // everything minus origin\n  };\n}\n\n/**\n * Strip the query string and fragment off of a given URL or path (if present)\n *\n * @param urlPath Full URL or path, including possible query string and/or fragment\n * @returns URL or path without query string or fragment\n */\nexport function stripUrlQueryAndFragment(urlPath: string): string {\n  return (urlPath.split(/[?#]/, 1) as [string, ...string[]])[0];\n}\n\n/**\n * Takes a URL object and returns a sanitized string which is safe to use as span name\n * see: https://develop.sentry.dev/sdk/data-handling/#structuring-data\n */\nexport function getSanitizedUrlString(url: PartialURL): string {\n  const { protocol, host, path } = url;\n\n  const filteredHost =\n    host\n      // Always filter out authority\n      ?.replace(/^.*@/, '[filtered]:[filtered]@')\n      // Don't show standard :80 (http) and :443 (https) ports to reduce the noise\n      // TODO: Use new URL global if it exists\n      .replace(/(:80)$/, '')\n      .replace(/(:443)$/, '') || '';\n\n  return `${protocol ? `${protocol}://` : ''}${filteredHost}${path}`;\n}\n", "import type { SeverityLevel } from '../types-hoist/severity';\n\n/**\n * Determine a breadcrumb's log level (only `warning` or `error`) based on an HTTP status code.\n */\nexport function getBreadcrumbLogLevelFromHttpStatusCode(statusCode: number | undefined): SeverityLevel | undefined {\n  // NOTE: undefined defaults to 'info' in Sentry\n  if (statusCode === undefined) {\n    return undefined;\n  } else if (statusCode >= 400 && statusCode < 500) {\n    return 'warning';\n  } else if (statusCode >= 500) {\n    return 'error';\n  } else {\n    return undefined;\n  }\n}\n", "// This code was originally forked from https://github.com/felixge/node-stack-trace\n// Since then it has been highly modified to fit our needs.\n\n// Copyright (c) 2011 Felix Geisendörfer (felix@debuggable.com)//\n//\n//  Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the \"Software\"), to deal\n//  in the Software without restriction, including without limitation the rights\n//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n//  copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions://\n//\n//  The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.//\n//\n//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport type { StackLineParser, StackLineParserFn } from '../types-hoist/stacktrace';\nimport { UNKNOWN_FUNCTION } from './stacktrace';\n\nexport type GetModuleFn = (filename: string | undefined) => string | undefined;\n\n/**\n * Does this filename look like it's part of the app code?\n */\nexport function filenameIsInApp(filename: string, isNative: boolean = false): boolean {\n  const isInternal =\n    isNative ||\n    (filename &&\n      // It's not internal if it's an absolute linux path\n      !filename.startsWith('/') &&\n      // It's not internal if it's an absolute windows path\n      !filename.match(/^[A-Z]:/) &&\n      // It's not internal if the path is starting with a dot\n      !filename.startsWith('.') &&\n      // It's not internal if the frame has a protocol. In node, this is usually the case if the file got pre-processed with a bundler like webpack\n      !filename.match(/^[a-zA-Z]([a-zA-Z0-9.\\-+])*:\\/\\//)); // Schema from: https://stackoverflow.com/a/3641782\n\n  // in_app is all that's not an internal Node function or a module within node_modules\n  // note that isNative appears to return true even for node core libraries\n  // see https://github.com/getsentry/raven-node/issues/176\n\n  return !isInternal && filename !== undefined && !filename.includes('node_modules/');\n}\n\n/** Node Stack line parser */\nexport function node(getModule?: GetModuleFn): StackLineParserFn {\n  const FILENAME_MATCH = /^\\s*[-]{4,}$/;\n  const FULL_MATCH = /at (?:async )?(?:(.+?)\\s+\\()?(?:(.+):(\\d+):(\\d+)?|([^)]+))\\)?/;\n\n  // eslint-disable-next-line complexity\n  return (line: string) => {\n    const lineMatch = line.match(FULL_MATCH);\n\n    if (lineMatch) {\n      let object: string | undefined;\n      let method: string | undefined;\n      let functionName: string | undefined;\n      let typeName: string | undefined;\n      let methodName: string | undefined;\n\n      if (lineMatch[1]) {\n        functionName = lineMatch[1];\n\n        let methodStart = functionName.lastIndexOf('.');\n        if (functionName[methodStart - 1] === '.') {\n          methodStart--;\n        }\n\n        if (methodStart > 0) {\n          object = functionName.slice(0, methodStart);\n          method = functionName.slice(methodStart + 1);\n          const objectEnd = object.indexOf('.Module');\n          if (objectEnd > 0) {\n            functionName = functionName.slice(objectEnd + 1);\n            object = object.slice(0, objectEnd);\n          }\n        }\n        typeName = undefined;\n      }\n\n      if (method) {\n        typeName = object;\n        methodName = method;\n      }\n\n      if (method === '<anonymous>') {\n        methodName = undefined;\n        functionName = undefined;\n      }\n\n      if (functionName === undefined) {\n        methodName = methodName || UNKNOWN_FUNCTION;\n        functionName = typeName ? `${typeName}.${methodName}` : methodName;\n      }\n\n      let filename = lineMatch[2]?.startsWith('file://') ? lineMatch[2].slice(7) : lineMatch[2];\n      const isNative = lineMatch[5] === 'native';\n\n      // If it's a Windows path, trim the leading slash so that `/C:/foo` becomes `C:/foo`\n      if (filename?.match(/\\/[A-Z]:/)) {\n        filename = filename.slice(1);\n      }\n\n      if (!filename && lineMatch[5] && !isNative) {\n        filename = lineMatch[5];\n      }\n\n      return {\n        filename: filename ? decodeURI(filename) : undefined,\n        module: getModule ? getModule(filename) : undefined,\n        function: functionName,\n        lineno: _parseIntOrUndefined(lineMatch[3]),\n        colno: _parseIntOrUndefined(lineMatch[4]),\n        in_app: filenameIsInApp(filename || '', isNative),\n      };\n    }\n\n    if (line.match(FILENAME_MATCH)) {\n      return {\n        filename: line,\n      };\n    }\n\n    return undefined;\n  };\n}\n\n/**\n * Node.js stack line parser\n *\n * This is in @sentry/core so it can be used from the Electron SDK in the browser for when `nodeIntegration == true`.\n * This allows it to be used without referencing or importing any node specific code which causes bundlers to complain\n */\nexport function nodeStackLineParser(getModule?: GetModuleFn): StackLineParser {\n  return [90, node(getModule)];\n}\n\nfunction _parseIntOrUndefined(input: string | undefined): number | undefined {\n  return parseInt(input || '', 10) || undefined;\n}\n", "/** A simple Least Recently Used map */\nexport class LRUMap<K, V> {\n  private readonly _cache: Map<K, V>;\n\n  public constructor(private readonly _maxSize: number) {\n    this._cache = new Map<K, V>();\n  }\n\n  /** Get the current size of the cache */\n  public get size(): number {\n    return this._cache.size;\n  }\n\n  /** Get an entry or undefined if it was not in the cache. Re-inserts to update the recently used order */\n  public get(key: K): V | undefined {\n    const value = this._cache.get(key);\n    if (value === undefined) {\n      return undefined;\n    }\n    // Remove and re-insert to update the order\n    this._cache.delete(key);\n    this._cache.set(key, value);\n    return value;\n  }\n\n  /** Insert an entry and evict an older entry if we've reached maxSize */\n  public set(key: K, value: V): void {\n    if (this._cache.size >= this._maxSize) {\n      // keys() returns an iterator in insertion order so keys().next() gives us the oldest key\n      this._cache.delete(this._cache.keys().next().value);\n    }\n    this._cache.set(key, value);\n  }\n\n  /** Remove an entry and return the entry if it was in the cache */\n  public remove(key: K): V | undefined {\n    const value = this._cache.get(key);\n    if (value) {\n      this._cache.delete(key);\n    }\n    return value;\n  }\n\n  /** Clear all entries */\n  public clear(): void {\n    this._cache.clear();\n  }\n\n  /** Get all the keys */\n  public keys(): Array<K> {\n    return Array.from(this._cache.keys());\n  }\n\n  /** Get all the values */\n  public values(): Array<V> {\n    const values: V[] = [];\n    this._cache.forEach(value => values.push(value));\n    return values;\n  }\n}\n", "import { type Instrumentation, registerInstrumentations } from '@opentelemetry/instrumentation';\n\n/** Exported only for tests. */\nexport const INSTRUMENTED: Record<string, Instrumentation> = {};\n\nexport function generateInstrumentOnce<\n  Options,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  InstrumentationClass extends new (...args: any[]) => Instrumentation,\n>(\n  name: string,\n  instrumentationClass: InstrumentationClass,\n  optionsCallback: (options: Options) => ConstructorParameters<InstrumentationClass>[0],\n): ((options: Options) => InstanceType<InstrumentationClass>) & { id: string };\nexport function generateInstrumentOnce<\n  Options = unknown,\n  InstrumentationInstance extends Instrumentation = Instrumentation,\n>(\n  name: string,\n  creator: (options?: Options) => InstrumentationInstance,\n): ((options?: Options) => InstrumentationInstance) & { id: string };\n/**\n * Instrument an OpenTelemetry instrumentation once.\n * This will skip running instrumentation again if it was already instrumented.\n */\nexport function generateInstrumentOnce<Options>(\n  name: string,\n  creatorOrClass: (new (...args: any[]) => Instrumentation) | ((options?: Options) => Instrumentation),\n  optionsCallback?: (options: Options) => unknown,\n): ((options: Options) => Instrumentation) & { id: string } {\n  if (optionsCallback) {\n    return _generateInstrumentOnceWithOptions(\n      name,\n      creatorOrClass as new (...args: unknown[]) => Instrumentation,\n      optionsCallback,\n    );\n  }\n\n  return _generateInstrumentOnce(name, creatorOrClass as (options?: Options) => Instrumentation);\n}\n\n// The plain version without handling of options\n// Should not be used with custom options that are mutated in the creator!\nfunction _generateInstrumentOnce<Options = unknown, InstrumentationInstance extends Instrumentation = Instrumentation>(\n  name: string,\n  creator: (options?: Options) => InstrumentationInstance,\n): ((options?: Options) => InstrumentationInstance) & { id: string } {\n  return Object.assign(\n    (options?: Options) => {\n      const instrumented = INSTRUMENTED[name] as InstrumentationInstance | undefined;\n      if (instrumented) {\n        // If options are provided, ensure we update them\n        if (options) {\n          instrumented.setConfig(options);\n        }\n        return instrumented;\n      }\n\n      const instrumentation = creator(options);\n      INSTRUMENTED[name] = instrumentation;\n\n      registerInstrumentations({\n        instrumentations: [instrumentation],\n      });\n\n      return instrumentation;\n    },\n    { id: name },\n  );\n}\n\n// This version handles options properly\nfunction _generateInstrumentOnceWithOptions<\n  Options,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  InstrumentationClass extends new (...args: any[]) => Instrumentation,\n>(\n  name: string,\n  instrumentationClass: InstrumentationClass,\n  optionsCallback: (options: Options) => ConstructorParameters<InstrumentationClass>[0],\n): ((options: Options) => InstanceType<InstrumentationClass>) & { id: string } {\n  return Object.assign(\n    (_options: Options) => {\n      const options = optionsCallback(_options);\n\n      const instrumented = INSTRUMENTED[name] as InstanceType<InstrumentationClass> | undefined;\n      if (instrumented) {\n        // Ensure we update options\n        instrumented.setConfig(options);\n        return instrumented;\n      }\n\n      const instrumentation = new instrumentationClass(options) as InstanceType<InstrumentationClass>;\n      INSTRUMENTED[name] = instrumentation;\n\n      registerInstrumentations({\n        instrumentations: [instrumentation],\n      });\n\n      return instrumentation;\n    },\n    { id: name },\n  );\n}\n\n/**\n * Ensure a given callback is called when the instrumentation is actually wrapping something.\n * This can be used to ensure some logic is only called when the instrumentation is actually active.\n *\n * This function returns a function that can be invoked with a callback.\n * This callback will either be invoked immediately\n * (e.g. if the instrumentation was already wrapped, or if _wrap could not be patched),\n * or once the instrumentation is actually wrapping something.\n *\n * Make sure to call this function right after adding the instrumentation, otherwise it may be too late!\n * The returned callback can be used any time, and also multiple times.\n */\nexport function instrumentWhenWrapped<T extends Instrumentation>(instrumentation: T): (callback: () => void) => void {\n  let isWrapped = false;\n  let callbacks: (() => void)[] = [];\n\n  if (!hasWrap(instrumentation)) {\n    isWrapped = true;\n  } else {\n    const originalWrap = instrumentation['_wrap'];\n\n    instrumentation['_wrap'] = (...args: Parameters<typeof originalWrap>) => {\n      isWrapped = true;\n      callbacks.forEach(callback => callback());\n      callbacks = [];\n      return originalWrap(...args);\n    };\n  }\n\n  const registerCallback = (callback: () => void): void => {\n    if (isWrapped) {\n      callback();\n    } else {\n      callbacks.push(callback);\n    }\n  };\n\n  return registerCallback;\n}\n\nfunction hasWrap<T extends Instrumentation>(\n  instrumentation: T,\n): instrumentation is T & { _wrap: (...args: unknown[]) => unknown } {\n  return typeof (instrumentation as T & { _wrap?: (...args: unknown[]) => unknown })['_wrap'] === 'function';\n}\n", "import type { Span } from '@opentelemetry/api';\nimport type { SpanOrigin } from '@sentry/core';\nimport { SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN } from '@sentry/core';\n\n/** Adds an origin to an OTEL Span. */\nexport function addOriginToSpan(span: Span, origin: SpanOrigin): void {\n  span.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, origin);\n}\n", "import type { RequestOptions } from 'node:http';\n\n/** Build a full URL from request options. */\nexport function getRequestUrl(requestOptions: RequestOptions): string {\n  const protocol = requestOptions.protocol || '';\n  const hostname = requestOptions.hostname || requestOptions.host || '';\n  // Don't log standard :80 (http) and :443 (https) ports to reduce the noise\n  // Also don't add port if the hostname already includes a port\n  const port =\n    !requestOptions.port || requestOptions.port === 80 || requestOptions.port === 443 || /^(.*):(\\d+)$/.test(hostname)\n      ? ''\n      : `:${requestOptions.port}`;\n  const path = requestOptions.path ? requestOptions.path : '/';\n  return `${protocol}//${hostname}${port}${path}`;\n}\n", "/** If this attribute is true, it means that the parent is a remote span. */\nexport const SEMANTIC_ATTRIBUTE_SENTRY_PARENT_IS_REMOTE = 'sentry.parentIsRemote';\n\n// These are not standardized yet, but used by the graphql instrumentation\nexport const SEMANTIC_ATTRIBUTE_SENTRY_GRAPHQL_OPERATION = 'sentry.graphql.operation';\n", "import type { ReadableSpan } from '@opentelemetry/sdk-trace-base';\n\n/**\n * Get the parent span id from a span.\n * In OTel v1, the parent span id is accessed as `parentSpanId`\n * In OTel v2, the parent span id is accessed as `spanId` on the `parentSpanContext`\n */\nexport function getParentSpanId(span: ReadableSpan): string | undefined {\n  if ('parentSpanId' in span) {\n    return span.parentSpanId as string | undefined;\n  } else if ('parentSpanContext' in span) {\n    return (span.parentSpanContext as { spanId?: string } | undefined)?.spanId;\n  }\n\n  return undefined;\n}\n", "import type { SpanKind, SpanStatus } from '@opentelemetry/api';\nimport type { ReadableSpan, TimedEvent } from '@opentelemetry/sdk-trace-base';\nimport type { AbstractSpan } from '../types';\nimport { getParentSpanId } from './getParentSpanId';\n\n/**\n * Check if a given span has attributes.\n * This is necessary because the base `Span` type does not have attributes,\n * so in places where we are passed a generic span, we need to check if we want to access them.\n */\nexport function spanHasAttributes<SpanType extends AbstractSpan>(\n  span: SpanType,\n): span is SpanType & { attributes: ReadableSpan['attributes'] } {\n  const castSpan = span as ReadableSpan;\n  return !!castSpan.attributes && typeof castSpan.attributes === 'object';\n}\n\n/**\n * Check if a given span has a kind.\n * This is necessary because the base `Span` type does not have a kind,\n * so in places where we are passed a generic span, we need to check if we want to access it.\n */\nexport function spanHasKind<SpanType extends AbstractSpan>(span: SpanType): span is SpanType & { kind: SpanKind } {\n  const castSpan = span as ReadableSpan;\n  return typeof castSpan.kind === 'number';\n}\n\n/**\n * Check if a given span has a status.\n * This is necessary because the base `Span` type does not have a status,\n * so in places where we are passed a generic span, we need to check if we want to access it.\n */\nexport function spanHasStatus<SpanType extends AbstractSpan>(\n  span: SpanType,\n): span is SpanType & { status: SpanStatus } {\n  const castSpan = span as ReadableSpan;\n  return !!castSpan.status;\n}\n\n/**\n * Check if a given span has a name.\n * This is necessary because the base `Span` type does not have a name,\n * so in places where we are passed a generic span, we need to check if we want to access it.\n */\nexport function spanHasName<SpanType extends AbstractSpan>(span: SpanType): span is SpanType & { name: string } {\n  const castSpan = span as ReadableSpan;\n  return !!castSpan.name;\n}\n\n/**\n * Check if a given span has a kind.\n * This is necessary because the base `Span` type does not have a kind,\n * so in places where we are passed a generic span, we need to check if we want to access it.\n */\nexport function spanHasParentId<SpanType extends AbstractSpan>(\n  span: SpanType,\n): span is SpanType & { parentSpanId: string } {\n  const castSpan = span as ReadableSpan;\n  return !!getParentSpanId(castSpan);\n}\n\n/**\n * Check if a given span has events.\n * This is necessary because the base `Span` type does not have events,\n * so in places where we are passed a generic span, we need to check if we want to access it.\n */\nexport function spanHasEvents<SpanType extends AbstractSpan>(\n  span: SpanType,\n): span is SpanType & { events: TimedEvent[] } {\n  const castSpan = span as ReadableSpan;\n  return Array.isArray(castSpan.events);\n}\n", "import type { Span } from '@opentelemetry/api';\nimport type { ReadableSpan } from '@opentelemetry/sdk-trace-base';\nimport {\n  ATTR_HTTP_REQUEST_METHOD,\n  ATTR_URL_FULL,\n  SEMATTRS_HTTP_METHOD,\n  SEMATTRS_HTTP_URL,\n} from '@opentelemetry/semantic-conventions';\nimport type { SanitizedRequestData } from '@sentry/core';\nimport { getSanitizedUrlString, parseUrl } from '@sentry/core';\nimport { spanHasAttributes } from './spanTypes';\n\n/**\n * Get sanitizied request data from an OTEL span.\n */\nexport function getRequestSpanData(span: Span | ReadableSpan): Partial<SanitizedRequestData> {\n  // The base `Span` type has no `attributes`, so we need to guard here against that\n  if (!spanHasAttributes(span)) {\n    return {};\n  }\n\n  // eslint-disable-next-line deprecation/deprecation\n  const maybeUrlAttribute = (span.attributes[ATTR_URL_FULL] || span.attributes[SEMATTRS_HTTP_URL]) as\n    | string\n    | undefined;\n\n  const data: Partial<SanitizedRequestData> = {\n    url: maybeUrlAttribute,\n    // eslint-disable-next-line deprecation/deprecation\n    'http.method': (span.attributes[ATTR_HTTP_REQUEST_METHOD] || span.attributes[SEMATTRS_HTTP_METHOD]) as\n      | string\n      | undefined,\n  };\n\n  // Default to GET if URL is set but method is not\n  if (!data['http.method'] && data.url) {\n    data['http.method'] = 'GET';\n  }\n\n  try {\n    if (typeof maybeUrlAttribute === 'string') {\n      const url = parseUrl(maybeUrlAttribute);\n\n      data.url = getSanitizedUrlString(url);\n\n      if (url.search) {\n        data['http.query'] = url.search;\n      }\n      if (url.hash) {\n        data['http.fragment'] = url.hash;\n      }\n    }\n  } catch {\n    // ignore\n  }\n\n  return data;\n}\n", "import type { Tracer } from '@opentelemetry/api';\nimport { trace } from '@opentelemetry/api';\nimport type { BasicTracerProvider } from '@opentelemetry/sdk-trace-base';\nimport type { Client } from '@sentry/core';\nimport { SDK_VERSION } from '@sentry/core';\nimport type { OpenTelemetryClient as OpenTelemetryClientInterface } from '../types';\n\n// Typescript complains if we do not use `...args: any[]` for the mixin, with:\n// A mixin class must have a constructor with a single rest parameter of type 'any[]'.ts(2545)\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/**\n * Wrap an Client class with things we need for OpenTelemetry support.\n * Make sure that the Client class passed in is non-abstract!\n *\n * Usage:\n * const OpenTelemetryClient = getWrappedClientClass(NodeClient);\n * const client = new OpenTelemetryClient(options);\n */\nexport function wrapClientClass<\n  ClassConstructor extends new (...args: any[]) => Client,\n  WrappedClassConstructor extends new (...args: any[]) => Client & OpenTelemetryClientInterface,\n>(ClientClass: ClassConstructor): WrappedClassConstructor {\n  // @ts-expect-error We just assume that this is non-abstract, if you pass in an abstract class this would make it non-abstract\n  class OpenTelemetryClient extends ClientClass implements OpenTelemetryClientInterface {\n    public traceProvider: BasicTracerProvider | undefined;\n    private _tracer: Tracer | undefined;\n\n    public constructor(...args: any[]) {\n      super(...args);\n    }\n\n    /** Get the OTEL tracer. */\n    public get tracer(): Tracer {\n      if (this._tracer) {\n        return this._tracer;\n      }\n\n      const name = '@sentry/opentelemetry';\n      const version = SDK_VERSION;\n      const tracer = trace.getTracer(name, version);\n      this._tracer = tracer;\n\n      return tracer;\n    }\n\n    /**\n     * @inheritDoc\n     */\n    public async flush(timeout?: number): Promise<boolean> {\n      const provider = this.traceProvider;\n      await provider?.forceFlush();\n      return super.flush(timeout);\n    }\n  }\n\n  return OpenTelemetryClient as unknown as WrappedClassConstructor;\n}\n/* eslint-enable @typescript-eslint/no-explicit-any */\n", "import { SpanKind } from '@opentelemetry/api';\nimport type { AbstractSpan } from '../types';\nimport { spanHasKind } from './spanTypes';\n\n/**\n * Get the span kind from a span.\n * For whatever reason, this is not public API on the generic \"Span\" type,\n * so we need to check if we actually have a `SDKTraceBaseSpan` where we can fetch this from.\n * Otherwise, we fall back to `SpanKind.INTERNAL`.\n */\nexport function getSpanKind(span: AbstractSpan): SpanKind {\n  if (spanHasKind(span)) {\n    return span.kind;\n  }\n\n  return SpanKind.INTERNAL;\n}\n", "import { createContextKey } from '@opentelemetry/api';\n\nexport const SENTRY_TRACE_HEADER = 'sentry-trace';\nexport const SENTRY_BAGGAGE_HEADER = 'baggage';\n\nexport const SENTRY_TRACE_STATE_DSC = 'sentry.dsc';\nexport const SENTRY_TRACE_STATE_SAMPLED_NOT_RECORDING = 'sentry.sampled_not_recording';\nexport const SENTRY_TRACE_STATE_URL = 'sentry.url';\nexport const SENTRY_TRACE_STATE_SAMPLE_RAND = 'sentry.sample_rand';\nexport const SENTRY_TRACE_STATE_SAMPLE_RATE = 'sentry.sample_rate';\n\nexport const SENTRY_SCOPES_CONTEXT_KEY = createContextKey('sentry_scopes');\n\nexport const SENTRY_FORK_ISOLATION_SCOPE_CONTEXT_KEY = createContextKey('sentry_fork_isolation_scope');\n\nexport const SENTRY_FORK_SET_SCOPE_CONTEXT_KEY = createContextKey('sentry_fork_set_scope');\n\nexport const SENTRY_FORK_SET_ISOLATION_SCOPE_CONTEXT_KEY = createContextKey('sentry_fork_set_isolation_scope');\n", "import type { Context } from '@opentelemetry/api';\nimport type { Scope } from '@sentry/core';\nimport { addNonEnumerableProperty } from '@sentry/core';\nimport { SENTRY_SCOPES_CONTEXT_KEY } from '../constants';\nimport type { CurrentScopes } from '../types';\n\nconst SCOPE_CONTEXT_FIELD = '_scopeContext';\n\n/**\n * Try to get the current scopes from the given OTEL context.\n * This requires a Context Manager that was wrapped with getWrappedContextManager.\n */\nexport function getScopesFromContext(context: Context): CurrentScopes | undefined {\n  return context.getValue(SENTRY_SCOPES_CONTEXT_KEY) as CurrentScopes | undefined;\n}\n\n/**\n * Set the current scopes on an OTEL context.\n * This will return a forked context with the Propagation Context set.\n */\nexport function setScopesOnContext(context: Context, scopes: CurrentScopes): Context {\n  return context.setValue(SENTRY_SCOPES_CONTEXT_KEY, scopes);\n}\n\n/**\n * Set the context on the scope so we can later look it up.\n * We need this to get the context from the scope in the `trace` functions.\n */\nexport function setContextOnScope(scope: Scope, context: Context): void {\n  addNonEnumerableProperty(scope, SCOPE_CONTEXT_FIELD, context);\n}\n\n/**\n * Get the context related to a scope.\n */\nexport function getContextFromScope(scope: Scope): Context | undefined {\n  return (scope as { [SCOPE_CONTEXT_FIELD]?: Context })[SCOPE_CONTEXT_FIELD];\n}\n", "import { ATTR_URL_FULL, SEMATTRS_HTTP_URL } from '@opentelemetry/semantic-conventions';\nimport { getClient, isSentryRequestUrl } from '@sentry/core';\nimport type { AbstractSpan } from '../types';\nimport { spanHasAttributes } from './spanTypes';\n\n/**\n *\n * @param otelSpan Checks whether a given OTEL Span is an http request to sentry.\n * @returns boolean\n */\nexport function isSentryRequestSpan(span: AbstractSpan): boolean {\n  if (!spanHasAttributes(span)) {\n    return false;\n  }\n\n  const { attributes } = span;\n\n  // `ATTR_URL_FULL` is the new attribute, but we still support the old one, `ATTR_HTTP_URL`, for now.\n  // eslint-disable-next-line deprecation/deprecation\n  const httpUrl = attributes[SEMATTRS_HTTP_URL] || attributes[ATTR_URL_FULL];\n\n  if (!httpUrl) {\n    return false;\n  }\n\n  return isSentryRequestUrl(httpUrl.toString(), getClient());\n}\n", "import type { SpanContext } from '@opentelemetry/api';\nimport { TraceFlags } from '@opentelemetry/api';\nimport { baggageHeaderToDynamicSamplingContext } from '@sentry/core';\nimport { SENTRY_TRACE_STATE_DSC, SENTRY_TRACE_STATE_SAMPLED_NOT_RECORDING } from '../constants';\n\n/**\n * OpenTelemetry only knows about SAMPLED or NONE decision,\n * but for us it is important to differentiate between unset and unsampled.\n *\n * Both of these are identified as `traceFlags === TracegFlags.NONE`,\n * but we additionally look at a special trace state to differentiate between them.\n */\nexport function getSamplingDecision(spanContext: SpanContext): boolean | undefined {\n  const { traceFlags, traceState } = spanContext;\n\n  const sampledNotRecording = traceState ? traceState.get(SENTRY_TRACE_STATE_SAMPLED_NOT_RECORDING) === '1' : false;\n\n  // If trace flag is `SAMPLED`, we interpret this as sampled\n  // If it is `NONE`, it could mean either it was sampled to be not recorder, or that it was not sampled at all\n  // For us this is an important difference, sow e look at the SENTRY_TRACE_STATE_SAMPLED_NOT_RECORDING\n  // to identify which it is\n  if (traceFlags === TraceFlags.SAMPLED) {\n    return true;\n  }\n\n  if (sampledNotRecording) {\n    return false;\n  }\n\n  // Fall back to DSC as a last resort, that may also contain `sampled`...\n  const dscString = traceState ? traceState.get(SENTRY_TRACE_STATE_DSC) : undefined;\n  const dsc = dscString ? baggageHeaderToDynamicSamplingContext(dscString) : undefined;\n\n  if (dsc?.sampled === 'true') {\n    return true;\n  }\n  if (dsc?.sampled === 'false') {\n    return false;\n  }\n\n  return undefined;\n}\n", "import type { Attributes, AttributeValue } from '@opentelemetry/api';\nimport { SpanKind } from '@opentelemetry/api';\nimport {\n  ATTR_HTTP_REQUEST_METHOD,\n  ATTR_HTTP_ROUTE,\n  ATTR_URL_FULL,\n  SEMATTRS_DB_STATEMENT,\n  SEMATTRS_DB_SYSTEM,\n  SEMATTRS_FAAS_TRIGGER,\n  SEMATTRS_HTTP_METHOD,\n  SEMATTRS_HTTP_TARGET,\n  SEMATTRS_HTTP_URL,\n  SEMATTRS_MESSAGING_SYSTEM,\n  SEMATTRS_RPC_SERVICE,\n} from '@opentelemetry/semantic-conventions';\nimport type { SpanAttributes, TransactionSource } from '@sentry/core';\nimport {\n  getSanitizedUrlString,\n  parseUrl,\n  SEMANTIC_ATTRIBUTE_SENTRY_CUSTOM_SPAN_NAME,\n  SEMANTIC_ATTRIBUTE_SENTRY_OP,\n  SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN,\n  SEMANTIC_ATTRIBUTE_SENTRY_SOURCE,\n  stripUrlQueryAndFragment,\n} from '@sentry/core';\nimport { SEMANTIC_ATTRIBUTE_SENTRY_GRAPHQL_OPERATION } from '../semanticAttributes';\nimport type { AbstractSpan } from '../types';\nimport { getSpanKind } from './getSpanKind';\nimport { spanHasAttributes, spanHasName } from './spanTypes';\n\ninterface SpanDescription {\n  op: string | undefined;\n  description: string;\n  source: TransactionSource;\n  data?: Record<string, string | undefined>;\n}\n\n/**\n * Infer the op & description for a set of name, attributes and kind of a span.\n */\nexport function inferSpanData(spanName: string, attributes: SpanAttributes, kind: SpanKind): SpanDescription {\n  // if http.method exists, this is an http request span\n  // eslint-disable-next-line deprecation/deprecation\n  const httpMethod = attributes[ATTR_HTTP_REQUEST_METHOD] || attributes[SEMATTRS_HTTP_METHOD];\n  if (httpMethod) {\n    return descriptionForHttpMethod({ attributes, name: spanName, kind }, httpMethod);\n  }\n\n  // eslint-disable-next-line deprecation/deprecation\n  const dbSystem = attributes[SEMATTRS_DB_SYSTEM];\n  const opIsCache =\n    typeof attributes[SEMANTIC_ATTRIBUTE_SENTRY_OP] === 'string' &&\n    attributes[SEMANTIC_ATTRIBUTE_SENTRY_OP].startsWith('cache.');\n\n  // If db.type exists then this is a database call span\n  // If the Redis DB is used as a cache, the span description should not be changed\n  if (dbSystem && !opIsCache) {\n    return descriptionForDbSystem({ attributes, name: spanName });\n  }\n\n  const customSourceOrRoute = attributes[SEMANTIC_ATTRIBUTE_SENTRY_SOURCE] === 'custom' ? 'custom' : 'route';\n\n  // If rpc.service exists then this is a rpc call span.\n  // eslint-disable-next-line deprecation/deprecation\n  const rpcService = attributes[SEMATTRS_RPC_SERVICE];\n  if (rpcService) {\n    return {\n      ...getUserUpdatedNameAndSource(spanName, attributes, 'route'),\n      op: 'rpc',\n    };\n  }\n\n  // If messaging.system exists then this is a messaging system span.\n  // eslint-disable-next-line deprecation/deprecation\n  const messagingSystem = attributes[SEMATTRS_MESSAGING_SYSTEM];\n  if (messagingSystem) {\n    return {\n      ...getUserUpdatedNameAndSource(spanName, attributes, customSourceOrRoute),\n      op: 'message',\n    };\n  }\n\n  // If faas.trigger exists then this is a function as a service span.\n  // eslint-disable-next-line deprecation/deprecation\n  const faasTrigger = attributes[SEMATTRS_FAAS_TRIGGER];\n  if (faasTrigger) {\n    return {\n      ...getUserUpdatedNameAndSource(spanName, attributes, customSourceOrRoute),\n      op: faasTrigger.toString(),\n    };\n  }\n\n  return { op: undefined, description: spanName, source: 'custom' };\n}\n\n/**\n * Extract better op/description from an otel span.\n *\n * Does not overwrite the span name if the source is already set to custom to ensure\n * that user-updated span names are preserved. In this case, we only adjust the op but\n * leave span description and source unchanged.\n *\n * Based on https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/7422ce2a06337f68a59b552b8c5a2ac125d6bae5/exporter/sentryexporter/sentry_exporter.go#L306\n */\nexport function parseSpanDescription(span: AbstractSpan): SpanDescription {\n  const attributes = spanHasAttributes(span) ? span.attributes : {};\n  const name = spanHasName(span) ? span.name : '<unknown>';\n  const kind = getSpanKind(span);\n\n  return inferSpanData(name, attributes, kind);\n}\n\nfunction descriptionForDbSystem({ attributes, name }: { attributes: Attributes; name: string }): SpanDescription {\n  // if we already have a custom name, we don't overwrite it but only set the op\n  const userDefinedName = attributes[SEMANTIC_ATTRIBUTE_SENTRY_CUSTOM_SPAN_NAME];\n  if (typeof userDefinedName === 'string') {\n    return {\n      op: 'db',\n      description: userDefinedName,\n      source: (attributes[SEMANTIC_ATTRIBUTE_SENTRY_SOURCE] as TransactionSource) || 'custom',\n    };\n  }\n\n  // if we already have the source set to custom, we don't overwrite the span description but only set the op\n  if (attributes[SEMANTIC_ATTRIBUTE_SENTRY_SOURCE] === 'custom') {\n    return { op: 'db', description: name, source: 'custom' };\n  }\n\n  // Use DB statement (Ex \"SELECT * FROM table\") if possible as description.\n  // eslint-disable-next-line deprecation/deprecation\n  const statement = attributes[SEMATTRS_DB_STATEMENT];\n\n  const description = statement ? statement.toString() : name;\n\n  return { op: 'db', description, source: 'task' };\n}\n\n/** Only exported for tests. */\nexport function descriptionForHttpMethod(\n  { name, kind, attributes }: { name: string; attributes: Attributes; kind: SpanKind },\n  httpMethod: AttributeValue,\n): SpanDescription {\n  const opParts = ['http'];\n\n  switch (kind) {\n    case SpanKind.CLIENT:\n      opParts.push('client');\n      break;\n    case SpanKind.SERVER:\n      opParts.push('server');\n      break;\n  }\n\n  // Spans for HTTP requests we have determined to be prefetch requests will have a `.prefetch` postfix in the op\n  if (attributes['sentry.http.prefetch']) {\n    opParts.push('prefetch');\n  }\n\n  const { urlPath, url, query, fragment, hasRoute } = getSanitizedUrl(attributes, kind);\n\n  if (!urlPath) {\n    return { ...getUserUpdatedNameAndSource(name, attributes), op: opParts.join('.') };\n  }\n\n  const graphqlOperationsAttribute = attributes[SEMANTIC_ATTRIBUTE_SENTRY_GRAPHQL_OPERATION];\n\n  // Ex. GET /api/users\n  const baseDescription = `${httpMethod} ${urlPath}`;\n\n  // When the http span has a graphql operation, append it to the description\n  // We add these in the graphqlIntegration\n  const inferredDescription = graphqlOperationsAttribute\n    ? `${baseDescription} (${getGraphqlOperationNamesFromAttribute(graphqlOperationsAttribute)})`\n    : baseDescription;\n\n  // If `httpPath` is a root path, then we can categorize the transaction source as route.\n  const inferredSource: TransactionSource = hasRoute || urlPath === '/' ? 'route' : 'url';\n\n  const data: Record<string, string> = {};\n\n  if (url) {\n    data.url = url;\n  }\n  if (query) {\n    data['http.query'] = query;\n  }\n  if (fragment) {\n    data['http.fragment'] = fragment;\n  }\n\n  // If the span kind is neither client nor server, we use the original name\n  // this infers that somebody manually started this span, in which case we don't want to overwrite the name\n  const isClientOrServerKind = kind === SpanKind.CLIENT || kind === SpanKind.SERVER;\n\n  // If the span is an auto-span (=it comes from one of our instrumentations),\n  // we always want to infer the name\n  // this is necessary because some of the auto-instrumentation we use uses kind=INTERNAL\n  const origin = attributes[SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN] || 'manual';\n  const isManualSpan = !`${origin}`.startsWith('auto');\n\n  // If users (or in very rare occasions we) set the source to custom, we don't overwrite the name\n  const alreadyHasCustomSource = attributes[SEMANTIC_ATTRIBUTE_SENTRY_SOURCE] === 'custom';\n  const customSpanName = attributes[SEMANTIC_ATTRIBUTE_SENTRY_CUSTOM_SPAN_NAME];\n\n  const useInferredDescription =\n    !alreadyHasCustomSource && customSpanName == null && (isClientOrServerKind || !isManualSpan);\n\n  const { description, source } = useInferredDescription\n    ? { description: inferredDescription, source: inferredSource }\n    : getUserUpdatedNameAndSource(name, attributes);\n\n  return {\n    op: opParts.join('.'),\n    description,\n    source,\n    data,\n  };\n}\n\nfunction getGraphqlOperationNamesFromAttribute(attr: AttributeValue): string {\n  if (Array.isArray(attr)) {\n    const sorted = attr.slice().sort();\n\n    // Up to 5 items, we just add all of them\n    if (sorted.length <= 5) {\n      return sorted.join(', ');\n    } else {\n      // Else, we add the first 5 and the diff of other operations\n      return `${sorted.slice(0, 5).join(', ')}, +${sorted.length - 5}`;\n    }\n  }\n\n  return `${attr}`;\n}\n\n/** Exported for tests only */\nexport function getSanitizedUrl(\n  attributes: Attributes,\n  kind: SpanKind,\n): {\n  url: string | undefined;\n  urlPath: string | undefined;\n  query: string | undefined;\n  fragment: string | undefined;\n  hasRoute: boolean;\n} {\n  // This is the relative path of the URL, e.g. /sub\n  // eslint-disable-next-line deprecation/deprecation\n  const httpTarget = attributes[SEMATTRS_HTTP_TARGET];\n  // This is the full URL, including host & query params etc., e.g. https://example.com/sub?foo=bar\n  // eslint-disable-next-line deprecation/deprecation\n  const httpUrl = attributes[SEMATTRS_HTTP_URL] || attributes[ATTR_URL_FULL];\n  // This is the normalized route name - may not always be available!\n  const httpRoute = attributes[ATTR_HTTP_ROUTE];\n\n  const parsedUrl = typeof httpUrl === 'string' ? parseUrl(httpUrl) : undefined;\n  const url = parsedUrl ? getSanitizedUrlString(parsedUrl) : undefined;\n  const query = parsedUrl?.search || undefined;\n  const fragment = parsedUrl?.hash || undefined;\n\n  if (typeof httpRoute === 'string') {\n    return { urlPath: httpRoute, url, query, fragment, hasRoute: true };\n  }\n\n  if (kind === SpanKind.SERVER && typeof httpTarget === 'string') {\n    return { urlPath: stripUrlQueryAndFragment(httpTarget), url, query, fragment, hasRoute: false };\n  }\n\n  if (parsedUrl) {\n    return { urlPath: url, url, query, fragment, hasRoute: false };\n  }\n\n  // fall back to target even for client spans, if no URL is present\n  if (typeof httpTarget === 'string') {\n    return { urlPath: stripUrlQueryAndFragment(httpTarget), url, query, fragment, hasRoute: false };\n  }\n\n  return { urlPath: undefined, url, query, fragment, hasRoute: false };\n}\n\n/**\n * Because Otel instrumentation sometimes mutates span names via `span.updateName`, the only way\n * to ensure that a user-set span name is preserved is to store it as a tmp attribute on the span.\n * We delete this attribute once we're done with it when preparing the event envelope.\n *\n * This temp attribute always takes precedence over the original name.\n *\n * We also need to take care of setting the correct source. Users can always update the source\n * after updating the name, so we need to respect that.\n *\n * @internal exported only for testing\n */\nexport function getUserUpdatedNameAndSource(\n  originalName: string,\n  attributes: Attributes,\n  fallbackSource: TransactionSource = 'custom',\n): {\n  description: string;\n  source: TransactionSource;\n} {\n  const source = (attributes[SEMANTIC_ATTRIBUTE_SENTRY_SOURCE] as TransactionSource) || fallbackSource;\n  const description = attributes[SEMANTIC_ATTRIBUTE_SENTRY_CUSTOM_SPAN_NAME];\n\n  if (description && typeof description === 'string') {\n    return {\n      description,\n      source,\n    };\n  }\n\n  return { description: originalName, source };\n}\n", "import type { Client } from '@sentry/core';\nimport { hasSpansEnabled, SEMANTIC_ATTRIBUTE_SENTRY_SOURCE, spanToJSON } from '@sentry/core';\nimport { getSamplingDecision } from './getSamplingDecision';\nimport { parseSpanDescription } from './parseSpanDescription';\nimport { spanHasName } from './spanTypes';\n\n/**\n * Setup a DSC handler on the passed client,\n * ensuring that the transaction name is inferred from the span correctly.\n */\nexport function enhanceDscWithOpenTelemetryRootSpanName(client: Client): void {\n  client.on('createDsc', (dsc, rootSpan) => {\n    if (!rootSpan) {\n      return;\n    }\n\n    // We want to overwrite the transaction on the DSC that is created by default in core\n    // The reason for this is that we want to infer the span name, not use the initial one\n    // Otherwise, we'll get names like \"GET\" instead of e.g. \"GET /foo\"\n    // `parseSpanDescription` takes the attributes of the span into account for the name\n    // This mutates the passed-in DSC\n\n    const jsonSpan = spanToJSON(rootSpan);\n    const attributes = jsonSpan.data;\n    const source = attributes[SEMANTIC_ATTRIBUTE_SENTRY_SOURCE];\n\n    const { description } = spanHasName(rootSpan) ? parseSpanDescription(rootSpan) : { description: undefined };\n    if (source !== 'url' && description) {\n      dsc.transaction = description;\n    }\n\n    // Also ensure sampling decision is correctly inferred\n    // In core, we use `spanIsSampled`, which just looks at the trace flags\n    // but in OTEL, we use a slightly more complex logic to be able to differntiate between unsampled and deferred sampling\n    if (hasSpansEnabled()) {\n      const sampled = getSamplingDecision(rootSpan.spanContext());\n      dsc.sampled = sampled == undefined ? undefined : String(sampled);\n    }\n  });\n}\n", "import type { Span } from '@opentelemetry/api';\nimport { trace } from '@opentelemetry/api';\n\n/**\n * Returns the currently active span.\n */\nexport function getActiveSpan(): Span | undefined {\n  return trace.getActiveSpan();\n}\n", "declare const __DEBUG_BUILD__: boolean;\n\n/**\n * This serves as a build time flag that will be true by default, but false in non-debug builds or if users replace `__SENTRY_DEBUG__` in their generated code.\n *\n * ATTENTION: This constant must never cross package boundaries (i.e. be exported) to guarantee that it can be used for tree shaking.\n */\nexport const DEBUG_BUILD = __DEBUG_BUILD__;\n", "import { TraceState } from '@opentelemetry/core';\nimport type { DynamicSamplingContext } from '@sentry/core';\nimport { dynamicSamplingContextToSentryBaggageHeader } from '@sentry/core';\nimport { SENTRY_TRACE_STATE_DSC, SENTRY_TRACE_STATE_SAMPLED_NOT_RECORDING } from '../constants';\n\n/**\n * Generate a TraceState for the given data.\n */\nexport function makeTraceState({\n  dsc,\n  sampled,\n}: {\n  dsc?: Partial<DynamicSamplingContext>;\n  sampled?: boolean;\n}): TraceState {\n  // We store the DSC as OTEL trace state on the span context\n  const dscString = dsc ? dynamicSamplingContextToSentryBaggageHeader(dsc) : undefined;\n\n  const traceStateBase = new TraceState();\n\n  const traceStateWithDsc = dscString ? traceStateBase.set(SENTRY_TRACE_STATE_DSC, dscString) : traceStateBase;\n\n  // We also specifically want to store if this is sampled to be not recording,\n  // or unsampled (=could be either sampled or not)\n  return sampled === false ? traceStateWithDsc.set(SENTRY_TRACE_STATE_SAMPLED_NOT_RECORDING, '1') : traceStateWithDsc;\n}\n", "type OpenTelemetryElement = 'SentrySpanProcessor' | 'SentryContextManager' | 'SentryPropagator' | 'SentrySampler';\n\nconst setupElements = new Set<OpenTelemetryElement>();\n\n/** Get all the OpenTelemetry elements that have been set up. */\nexport function openTelemetrySetupCheck(): OpenTelemetryElement[] {\n  return Array.from(setupElements);\n}\n\n/** Mark an OpenTelemetry element as setup. */\nexport function setIsSetup(element: OpenTelemetryElement): void {\n  setupElements.add(element);\n}\n\n/** Only exported for tests. */\nexport function clearOpenTelemetrySetupCheck(): void {\n  setupElements.clear();\n}\n", "import type { Baggage, Context, Span, SpanContext, TextMapGetter, TextMapSetter } from '@opentelemetry/api';\nimport { context, INVALID_TRACEID, propagation, trace, TraceFlags } from '@opentelemetry/api';\nimport { isTracingSuppressed, W3CBaggagePropagator } from '@opentelemetry/core';\nimport { ATTR_URL_FULL, SEMATTRS_HTTP_URL } from '@opentelemetry/semantic-conventions';\nimport type { continueTrace, DynamicSamplingContext, Options } from '@sentry/core';\nimport {\n  generateSentryTraceHeader,\n  getClient,\n  getCurrentScope,\n  getDynamicSamplingContextFromScope,\n  getDynamicSamplingContextFromSpan,\n  getIsolationScope,\n  logger,\n  LRUMap,\n  parseBaggageHeader,\n  propagationContextFromHeaders,\n  SENTRY_BAGGAGE_KEY_PREFIX,\n  spanToJSON,\n  stringMatchesSomePattern,\n} from '@sentry/core';\nimport { SENTRY_BAGGAGE_HEADER, SENTRY_TRACE_HEADER, SENTRY_TRACE_STATE_URL } from './constants';\nimport { DEBUG_BUILD } from './debug-build';\nimport { getScopesFromContext, setScopesOnContext } from './utils/contextData';\nimport { getSamplingDecision } from './utils/getSamplingDecision';\nimport { makeTraceState } from './utils/makeTraceState';\nimport { setIsSetup } from './utils/setupCheck';\n\n/**\n * Injects and extracts `sentry-trace` and `baggage` headers from carriers.\n */\nexport class SentryPropagator extends W3CBaggagePropagator {\n  /** A map of URLs that have already been checked for if they match tracePropagationTargets. */\n  private _urlMatchesTargetsMap: LRUMap<string, boolean>;\n\n  public constructor() {\n    super();\n    setIsSetup('SentryPropagator');\n\n    // We're caching results so we don't have to recompute regexp every time we create a request.\n    this._urlMatchesTargetsMap = new LRUMap<string, boolean>(100);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public inject(context: Context, carrier: unknown, setter: TextMapSetter): void {\n    if (isTracingSuppressed(context)) {\n      DEBUG_BUILD && logger.log('[Tracing] Not injecting trace data for url because tracing is suppressed.');\n      return;\n    }\n\n    const activeSpan = trace.getSpan(context);\n    const url = activeSpan && getCurrentURL(activeSpan);\n\n    const tracePropagationTargets = getClient()?.getOptions()?.tracePropagationTargets;\n    if (!shouldPropagateTraceForUrl(url, tracePropagationTargets, this._urlMatchesTargetsMap)) {\n      DEBUG_BUILD &&\n        logger.log(\n          '[Tracing] Not injecting trace data for url because it does not match tracePropagationTargets:',\n          url,\n        );\n      return;\n    }\n\n    const existingBaggageHeader = getExistingBaggage(carrier);\n    let baggage = propagation.getBaggage(context) || propagation.createBaggage({});\n\n    const { dynamicSamplingContext, traceId, spanId, sampled } = getInjectionData(context);\n\n    if (existingBaggageHeader) {\n      const baggageEntries = parseBaggageHeader(existingBaggageHeader);\n\n      if (baggageEntries) {\n        Object.entries(baggageEntries).forEach(([key, value]) => {\n          baggage = baggage.setEntry(key, { value });\n        });\n      }\n    }\n\n    if (dynamicSamplingContext) {\n      baggage = Object.entries(dynamicSamplingContext).reduce<Baggage>((b, [dscKey, dscValue]) => {\n        if (dscValue) {\n          return b.setEntry(`${SENTRY_BAGGAGE_KEY_PREFIX}${dscKey}`, { value: dscValue });\n        }\n        return b;\n      }, baggage);\n    }\n\n    // We also want to avoid setting the default OTEL trace ID, if we get that for whatever reason\n    if (traceId && traceId !== INVALID_TRACEID) {\n      setter.set(carrier, SENTRY_TRACE_HEADER, generateSentryTraceHeader(traceId, spanId, sampled));\n    }\n\n    super.inject(propagation.setBaggage(context, baggage), carrier, setter);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public extract(context: Context, carrier: unknown, getter: TextMapGetter): Context {\n    const maybeSentryTraceHeader: string | string[] | undefined = getter.get(carrier, SENTRY_TRACE_HEADER);\n    const baggage = getter.get(carrier, SENTRY_BAGGAGE_HEADER);\n\n    const sentryTrace = maybeSentryTraceHeader\n      ? Array.isArray(maybeSentryTraceHeader)\n        ? maybeSentryTraceHeader[0]\n        : maybeSentryTraceHeader\n      : undefined;\n\n    // Add remote parent span context\n    // If there is no incoming trace, this will return the context as-is\n    return ensureScopesOnContext(getContextWithRemoteActiveSpan(context, { sentryTrace, baggage }));\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public fields(): string[] {\n    return [SENTRY_TRACE_HEADER, SENTRY_BAGGAGE_HEADER];\n  }\n}\n\nconst NOT_PROPAGATED_MESSAGE =\n  '[Tracing] Not injecting trace data for url because it does not match tracePropagationTargets:';\n\n/**\n * Check if a given URL should be propagated to or not.\n * If no url is defined, or no trace propagation targets are defined, this will always return `true`.\n * You can also optionally provide a decision map, to cache decisions and avoid repeated regex lookups.\n */\nexport function shouldPropagateTraceForUrl(\n  url: string | undefined,\n  tracePropagationTargets: Options['tracePropagationTargets'],\n  decisionMap?: LRUMap<string, boolean>,\n): boolean {\n  if (typeof url !== 'string' || !tracePropagationTargets) {\n    return true;\n  }\n\n  const cachedDecision = decisionMap?.get(url);\n  if (cachedDecision !== undefined) {\n    DEBUG_BUILD && !cachedDecision && logger.log(NOT_PROPAGATED_MESSAGE, url);\n    return cachedDecision;\n  }\n\n  const decision = stringMatchesSomePattern(url, tracePropagationTargets);\n  decisionMap?.set(url, decision);\n\n  DEBUG_BUILD && !decision && logger.log(NOT_PROPAGATED_MESSAGE, url);\n  return decision;\n}\n\n/**\n * Get propagation injection data for the given context.\n */\nexport function getInjectionData(context: Context): {\n  dynamicSamplingContext: Partial<DynamicSamplingContext> | undefined;\n  traceId: string | undefined;\n  spanId: string | undefined;\n  sampled: boolean | undefined;\n} {\n  const span = trace.getSpan(context);\n\n  // If we have a remote span, the spanId should be considered as the parentSpanId, not spanId itself\n  // Instead, we use a virtual (generated) spanId for propagation\n  if (span?.spanContext().isRemote) {\n    const spanContext = span.spanContext();\n    const dynamicSamplingContext = getDynamicSamplingContextFromSpan(span);\n\n    return {\n      dynamicSamplingContext,\n      traceId: spanContext.traceId,\n      spanId: undefined,\n      sampled: getSamplingDecision(spanContext), // TODO: Do we need to change something here?\n    };\n  }\n\n  // If we have a local span, we just use this\n  if (span) {\n    const spanContext = span.spanContext();\n    const dynamicSamplingContext = getDynamicSamplingContextFromSpan(span);\n\n    return {\n      dynamicSamplingContext,\n      traceId: spanContext.traceId,\n      spanId: spanContext.spanId,\n      sampled: getSamplingDecision(spanContext), // TODO: Do we need to change something here?\n    };\n  }\n\n  // Else we try to use the propagation context from the scope\n  // The only scenario where this should happen is when we neither have a span, nor an incoming trace\n  const scope = getScopesFromContext(context)?.scope || getCurrentScope();\n  const client = getClient();\n\n  const propagationContext = scope.getPropagationContext();\n  const dynamicSamplingContext = client ? getDynamicSamplingContextFromScope(client, scope) : undefined;\n  return {\n    dynamicSamplingContext,\n    traceId: propagationContext.traceId,\n    spanId: propagationContext.propagationSpanId,\n    sampled: propagationContext.sampled,\n  };\n}\n\nfunction getContextWithRemoteActiveSpan(\n  ctx: Context,\n  { sentryTrace, baggage }: Parameters<typeof continueTrace>[0],\n): Context {\n  const propagationContext = propagationContextFromHeaders(sentryTrace, baggage);\n\n  const { traceId, parentSpanId, sampled, dsc } = propagationContext;\n\n  // We only want to set the virtual span if we are continuing a concrete trace\n  // Otherwise, we ignore the incoming trace here, e.g. if we have no trace headers\n  if (!parentSpanId) {\n    return ctx;\n  }\n\n  const spanContext = generateRemoteSpanContext({\n    traceId,\n    spanId: parentSpanId,\n    sampled,\n    dsc,\n  });\n\n  return trace.setSpanContext(ctx, spanContext);\n}\n\n/**\n * Takes trace strings and propagates them as a remote active span.\n * This should be used in addition to `continueTrace` in OTEL-powered environments.\n */\nexport function continueTraceAsRemoteSpan<T>(\n  ctx: Context,\n  options: Parameters<typeof continueTrace>[0],\n  callback: () => T,\n): T {\n  const ctxWithSpanContext = ensureScopesOnContext(getContextWithRemoteActiveSpan(ctx, options));\n\n  return context.with(ctxWithSpanContext, callback);\n}\n\nfunction ensureScopesOnContext(ctx: Context): Context {\n  // If there are no scopes yet on the context, ensure we have them\n  const scopes = getScopesFromContext(ctx);\n  const newScopes = {\n    // If we have no scope here, this is most likely either the root context or a context manually derived from it\n    // In this case, we want to fork the current scope, to ensure we do not pollute the root scope\n    scope: scopes ? scopes.scope : getCurrentScope().clone(),\n    isolationScope: scopes ? scopes.isolationScope : getIsolationScope(),\n  };\n\n  return setScopesOnContext(ctx, newScopes);\n}\n\n/** Try to get the existing baggage header so we can merge this in. */\nfunction getExistingBaggage(carrier: unknown): string | undefined {\n  try {\n    const baggage = (carrier as Record<string, string | string[]>)[SENTRY_BAGGAGE_HEADER];\n    return Array.isArray(baggage) ? baggage.join(',') : baggage;\n  } catch {\n    return undefined;\n  }\n}\n\n/**\n * It is pretty tricky to get access to the outgoing request URL of a request in the propagator.\n * As we only have access to the context of the span to be sent and the carrier (=headers),\n * but the span may be unsampled and thus have no attributes.\n *\n * So we use the following logic:\n * 1. If we have an active span, we check if it has a URL attribute.\n * 2. Else, if the active span has no URL attribute (e.g. it is unsampled), we check a special trace state (which we set in our sampler).\n */\nfunction getCurrentURL(span: Span): string | undefined {\n  const spanData = spanToJSON(span).data;\n  // `ATTR_URL_FULL` is the new attribute, but we still support the old one, `SEMATTRS_HTTP_URL`, for now.\n  // eslint-disable-next-line deprecation/deprecation\n  const urlAttribute = spanData[SEMATTRS_HTTP_URL] || spanData[ATTR_URL_FULL];\n  if (typeof urlAttribute === 'string') {\n    return urlAttribute;\n  }\n\n  // Also look at the traceState, which we may set in the sampler even for unsampled spans\n  const urlTraceState = span.spanContext().traceState?.get(SENTRY_TRACE_STATE_URL);\n  if (urlTraceState) {\n    return urlTraceState;\n  }\n\n  return undefined;\n}\n\nfunction generateRemoteSpanContext({\n  spanId,\n  traceId,\n  sampled,\n  dsc,\n}: {\n  spanId: string;\n  traceId: string;\n  sampled: boolean | undefined;\n  dsc?: Partial<DynamicSamplingContext>;\n}): SpanContext {\n  // We store the DSC as OTEL trace state on the span context\n  const traceState = makeTraceState({\n    dsc,\n    sampled,\n  });\n\n  const spanContext: SpanContext = {\n    traceId,\n    spanId,\n    isRemote: true,\n    traceFlags: sampled ? TraceFlags.SAMPLED : TraceFlags.NONE,\n    traceState,\n  };\n\n  return spanContext;\n}\n", "import type { Context, Span, SpanContext, SpanOptions, Tracer } from '@opentelemetry/api';\nimport { context, SpanStatusCode, trace, TraceFlags } from '@opentelemetry/api';\nimport { suppressTracing } from '@opentelemetry/core';\nimport type {\n  Client,\n  continueTrace as baseContinueTrace,\n  DynamicSamplingContext,\n  Scope,\n  Span as SentrySpan,\n  TraceContext,\n} from '@sentry/core';\nimport {\n  getClient,\n  getCurrentScope,\n  getDynamicSamplingContextFromScope,\n  getDynamicSamplingContextFromSpan,\n  getRootSpan,\n  getTraceContextFromScope,\n  handleCallbackErrors,\n  SDK_VERSION,\n  SEMANTIC_ATTRIBUTE_SENTRY_OP,\n  spanToJSON,\n  spanToTraceContext,\n} from '@sentry/core';\nimport { continueTraceAsRemoteSpan } from './propagator';\nimport type { OpenTelemetryClient, OpenTelemetrySpanContext } from './types';\nimport { getContextFromScope } from './utils/contextData';\nimport { getSamplingDecision } from './utils/getSamplingDecision';\nimport { makeTraceState } from './utils/makeTraceState';\n\n/**\n * Wraps a function with a transaction/span and finishes the span after the function is done.\n * The created span is the active span and will be used as parent by other spans created inside the function\n * and can be accessed via `Sentry.getActiveSpan()`, as long as the function is executed while the scope is active.\n *\n * If you want to create a span that is not set as active, use {@link startInactiveSpan}.\n *\n * You'll always get a span passed to the callback,\n * it may just be a non-recording span if the span is not sampled or if tracing is disabled.\n */\nexport function startSpan<T>(options: OpenTelemetrySpanContext, callback: (span: Span) => T): T {\n  const tracer = getTracer();\n\n  const { name, parentSpan: customParentSpan } = options;\n\n  // If `options.parentSpan` is defined, we want to wrap the callback in `withActiveSpan`\n  const wrapper = getActiveSpanWrapper<T>(customParentSpan);\n\n  return wrapper(() => {\n    const activeCtx = getContext(options.scope, options.forceTransaction);\n    const shouldSkipSpan = options.onlyIfParent && !trace.getSpan(activeCtx);\n    const ctx = shouldSkipSpan ? suppressTracing(activeCtx) : activeCtx;\n\n    const spanOptions = getSpanOptions(options);\n\n    return tracer.startActiveSpan(name, spanOptions, ctx, span => {\n      return handleCallbackErrors(\n        () => callback(span),\n        () => {\n          // Only set the span status to ERROR when there wasn't any status set before, in order to avoid stomping useful span statuses\n          if (spanToJSON(span).status === undefined) {\n            span.setStatus({ code: SpanStatusCode.ERROR });\n          }\n        },\n        () => span.end(),\n      );\n    });\n  });\n}\n\n/**\n * Similar to `Sentry.startSpan`. Wraps a function with a span, but does not finish the span\n * after the function is done automatically. You'll have to call `span.end()` manually.\n *\n * The created span is the active span and will be used as parent by other spans created inside the function\n * and can be accessed via `Sentry.getActiveSpan()`, as long as the function is executed while the scope is active.\n *\n * You'll always get a span passed to the callback,\n * it may just be a non-recording span if the span is not sampled or if tracing is disabled.\n */\nexport function startSpanManual<T>(\n  options: OpenTelemetrySpanContext,\n  callback: (span: Span, finish: () => void) => T,\n): T {\n  const tracer = getTracer();\n\n  const { name, parentSpan: customParentSpan } = options;\n\n  // If `options.parentSpan` is defined, we want to wrap the callback in `withActiveSpan`\n  const wrapper = getActiveSpanWrapper<T>(customParentSpan);\n\n  return wrapper(() => {\n    const activeCtx = getContext(options.scope, options.forceTransaction);\n    const shouldSkipSpan = options.onlyIfParent && !trace.getSpan(activeCtx);\n    const ctx = shouldSkipSpan ? suppressTracing(activeCtx) : activeCtx;\n\n    const spanOptions = getSpanOptions(options);\n\n    return tracer.startActiveSpan(name, spanOptions, ctx, span => {\n      return handleCallbackErrors(\n        () => callback(span, () => span.end()),\n        () => {\n          // Only set the span status to ERROR when there wasn't any status set before, in order to avoid stomping useful span statuses\n          if (spanToJSON(span).status === undefined) {\n            span.setStatus({ code: SpanStatusCode.ERROR });\n          }\n        },\n      );\n    });\n  });\n}\n\n/**\n * Creates a span. This span is not set as active, so will not get automatic instrumentation spans\n * as children or be able to be accessed via `Sentry.getActiveSpan()`.\n *\n * If you want to create a span that is set as active, use {@link startSpan}.\n *\n * This function will always return a span,\n * it may just be a non-recording span if the span is not sampled or if tracing is disabled.\n */\nexport function startInactiveSpan(options: OpenTelemetrySpanContext): Span {\n  const tracer = getTracer();\n\n  const { name, parentSpan: customParentSpan } = options;\n\n  // If `options.parentSpan` is defined, we want to wrap the callback in `withActiveSpan`\n  const wrapper = getActiveSpanWrapper<Span>(customParentSpan);\n\n  return wrapper(() => {\n    const activeCtx = getContext(options.scope, options.forceTransaction);\n    const shouldSkipSpan = options.onlyIfParent && !trace.getSpan(activeCtx);\n    const ctx = shouldSkipSpan ? suppressTracing(activeCtx) : activeCtx;\n\n    const spanOptions = getSpanOptions(options);\n\n    const span = tracer.startSpan(name, spanOptions, ctx);\n\n    return span;\n  });\n}\n\n/**\n * Forks the current scope and sets the provided span as active span in the context of the provided callback. Can be\n * passed `null` to start an entirely new span tree.\n *\n * @param span Spans started in the context of the provided callback will be children of this span. If `null` is passed,\n * spans started within the callback will be root spans.\n * @param callback Execution context in which the provided span will be active. Is passed the newly forked scope.\n * @returns the value returned from the provided callback function.\n */\nexport function withActiveSpan<T>(span: Span | null, callback: (scope: Scope) => T): T {\n  const newContextWithActiveSpan = span ? trace.setSpan(context.active(), span) : trace.deleteSpan(context.active());\n  return context.with(newContextWithActiveSpan, () => callback(getCurrentScope()));\n}\n\nfunction getTracer(): Tracer {\n  const client = getClient<Client & OpenTelemetryClient>();\n  return client?.tracer || trace.getTracer('@sentry/opentelemetry', SDK_VERSION);\n}\n\nfunction getSpanOptions(options: OpenTelemetrySpanContext): SpanOptions {\n  const { startTime, attributes, kind, op, links } = options;\n\n  // OTEL expects timestamps in ms, not seconds\n  const fixedStartTime = typeof startTime === 'number' ? ensureTimestampInMilliseconds(startTime) : startTime;\n\n  return {\n    attributes: op\n      ? {\n          [SEMANTIC_ATTRIBUTE_SENTRY_OP]: op,\n          ...attributes,\n        }\n      : attributes,\n    kind,\n    links,\n    startTime: fixedStartTime,\n  };\n}\n\nfunction ensureTimestampInMilliseconds(timestamp: number): number {\n  const isMs = timestamp < 9999999999;\n  return isMs ? timestamp * 1000 : timestamp;\n}\n\nfunction getContext(scope: Scope | undefined, forceTransaction: boolean | undefined): Context {\n  const ctx = getContextForScope(scope);\n  const parentSpan = trace.getSpan(ctx);\n\n  // In the case that we have no parent span, we start a new trace\n  // Note that if we continue a trace, we'll always have a remote parent span here anyhow\n  if (!parentSpan) {\n    return ctx;\n  }\n\n  // If we don't want to force a transaction, and we have a parent span, all good, we just return as-is!\n  if (!forceTransaction) {\n    return ctx;\n  }\n\n  // Else, if we do have a parent span but want to force a transaction, we have to simulate a \"root\" context\n\n  // Else, we need to do two things:\n  // 1. Unset the parent span from the context, so we'll create a new root span\n  // 2. Ensure the propagation context is correct, so we'll continue from the parent span\n  const ctxWithoutSpan = trace.deleteSpan(ctx);\n\n  const { spanId, traceId } = parentSpan.spanContext();\n  const sampled = getSamplingDecision(parentSpan.spanContext());\n\n  // In this case, when we are forcing a transaction, we want to treat this like continuing an incoming trace\n  // so we set the traceState according to the root span\n  const rootSpan = getRootSpan(parentSpan);\n  const dsc = getDynamicSamplingContextFromSpan(rootSpan);\n\n  const traceState = makeTraceState({\n    dsc,\n    sampled,\n  });\n\n  const spanOptions: SpanContext = {\n    traceId,\n    spanId,\n    isRemote: true,\n    traceFlags: sampled ? TraceFlags.SAMPLED : TraceFlags.NONE,\n    traceState,\n  };\n\n  const ctxWithSpanContext = trace.setSpanContext(ctxWithoutSpan, spanOptions);\n\n  return ctxWithSpanContext;\n}\n\nfunction getContextForScope(scope?: Scope): Context {\n  if (scope) {\n    const ctx = getContextFromScope(scope);\n    if (ctx) {\n      return ctx;\n    }\n  }\n\n  return context.active();\n}\n\n/**\n * Continue a trace from `sentry-trace` and `baggage` values.\n * These values can be obtained from incoming request headers, or in the browser from `<meta name=\"sentry-trace\">`\n * and `<meta name=\"baggage\">` HTML tags.\n *\n * Spans started with `startSpan`, `startSpanManual` and `startInactiveSpan`, within the callback will automatically\n * be attached to the incoming trace.\n *\n * This is a custom version of `continueTrace` that is used in OTEL-powered environments.\n * It propagates the trace as a remote span, in addition to setting it on the propagation context.\n */\nexport function continueTrace<T>(options: Parameters<typeof baseContinueTrace>[0], callback: () => T): T {\n  return continueTraceAsRemoteSpan(context.active(), options, callback);\n}\n\n/**\n * Get the trace context for a given scope.\n * We have a custom implemention here because we need an OTEL-specific way to get the span from a scope.\n */\nexport function getTraceContextForScope(\n  client: Client,\n  scope: Scope,\n): [dynamicSamplingContext: Partial<DynamicSamplingContext>, traceContext: TraceContext] {\n  const ctx = getContextFromScope(scope);\n  const span = ctx && trace.getSpan(ctx);\n\n  const traceContext = span ? spanToTraceContext(span) : getTraceContextFromScope(scope);\n\n  const dynamicSamplingContext = span\n    ? getDynamicSamplingContextFromSpan(span)\n    : getDynamicSamplingContextFromScope(client, scope);\n  return [dynamicSamplingContext, traceContext];\n}\n\nfunction getActiveSpanWrapper<T>(parentSpan: Span | SentrySpan | undefined | null): (callback: () => T) => T {\n  return parentSpan !== undefined\n    ? (callback: () => T) => {\n        return withActiveSpan(parentSpan, callback);\n      }\n    : (callback: () => T) => callback();\n}\n", "import { context } from '@opentelemetry/api';\nimport { suppressTracing as suppressTracingImpl } from '@opentelemetry/core';\n\n/** Suppress tracing in the given callback, ensuring no spans are generated inside of it. */\nexport function suppressTracing<T>(callback: () => T): T {\n  const ctx = suppressTracingImpl(context.active());\n  return context.with(ctx, callback);\n}\n", "import type { Client } from '@sentry/core';\nimport { getDynamicSamplingContextFromSpan, getRootSpan, spanToTraceContext } from '@sentry/core';\nimport { getActiveSpan } from './utils/getActiveSpan';\n\n/** Ensure the `trace` context is set on all events. */\nexport function setupEventContextTrace(client: Client): void {\n  client.on('preprocessEvent', event => {\n    const span = getActiveSpan();\n    // For transaction events, this is handled separately\n    // Because the active span may not be the span that is actually the transaction event\n    if (!span || event.type === 'transaction') {\n      return;\n    }\n\n    // If event has already set `trace` context, use that one.\n    event.contexts = {\n      trace: spanToTraceContext(span),\n      ...event.contexts,\n    };\n\n    const rootSpan = getRootSpan(span);\n\n    event.sdkProcessingMetadata = {\n      dynamicSamplingContext: getDynamicSamplingContextFromSpan(rootSpan),\n      ...event.sdkProcessingMetadata,\n    };\n\n    return event;\n  });\n}\n", "import * as api from '@opentelemetry/api';\nimport type { SerializedTraceData, Span } from '@sentry/core';\nimport {\n  dynamicSamplingContextToSentryBaggageHeader,\n  generateSentryTraceHeader,\n  getCapturedScopesOnSpan,\n} from '@sentry/core';\nimport { getInjectionData } from '../propagator';\nimport { getContextFromScope } from './contextData';\n\n/**\n * Otel-specific implementation of `getTraceData`.\n * @see `@sentry/core` version of `getTraceData` for more information\n */\nexport function getTraceData({ span }: { span?: Span } = {}): SerializedTraceData {\n  let ctx = api.context.active();\n\n  if (span) {\n    const { scope } = getCapturedScopesOnSpan(span);\n    // fall back to current context if for whatever reason we can't find the one of the span\n    ctx = (scope && getContextFromScope(scope)) || api.trace.setSpan(api.context.active(), span);\n  }\n\n  const { traceId, spanId, sampled, dynamicSamplingContext } = getInjectionData(ctx);\n\n  return {\n    'sentry-trace': generateSentryTraceHeader(traceId, spanId, sampled),\n    baggage: dynamicSamplingContextToSentryBaggageHeader(dynamicSamplingContext),\n  };\n}\n", "import * as api from '@opentelemetry/api';\nimport type { Scope, withActiveSpan as defaultWithActiveSpan } from '@sentry/core';\nimport { getDefaultCurrentScope, getDefaultIsolationScope, setAsyncContextStrategy } from '@sentry/core';\nimport {\n  SENTRY_FORK_ISOLATION_SCOPE_CONTEXT_KEY,\n  SENTRY_FORK_SET_ISOLATION_SCOPE_CONTEXT_KEY,\n  SENTRY_FORK_SET_SCOPE_CONTEXT_KEY,\n} from './constants';\nimport { continueTrace, startInactiveSpan, startSpan, startSpanManual, withActiveSpan } from './trace';\nimport type { CurrentScopes } from './types';\nimport { getScopesFromContext } from './utils/contextData';\nimport { getActiveSpan } from './utils/getActiveSpan';\nimport { getTraceData } from './utils/getTraceData';\nimport { suppressTracing } from './utils/suppressTracing';\n\n/**\n * Sets the async context strategy to use follow the OTEL context under the hood.\n * We handle forking a hub inside of our custom OTEL Context Manager (./otelContextManager.ts)\n */\nexport function setOpenTelemetryContextAsyncContextStrategy(): void {\n  function getScopes(): CurrentScopes {\n    const ctx = api.context.active();\n    const scopes = getScopesFromContext(ctx);\n\n    if (scopes) {\n      return scopes;\n    }\n\n    // fallback behavior:\n    // if, for whatever reason, we can't find scopes on the context here, we have to fix this somehow\n    return {\n      scope: getDefaultCurrentScope(),\n      isolationScope: getDefaultIsolationScope(),\n    };\n  }\n\n  function withScope<T>(callback: (scope: Scope) => T): T {\n    const ctx = api.context.active();\n\n    // We depend on the otelContextManager to handle the context/hub\n    // We set the `SENTRY_FORK_ISOLATION_SCOPE_CONTEXT_KEY` context value, which is picked up by\n    // the OTEL context manager, which uses the presence of this key to determine if it should\n    // fork the isolation scope, or not\n    // as by default, we don't want to fork this, unless triggered explicitly by `withScope`\n    return api.context.with(ctx, () => {\n      return callback(getCurrentScope());\n    });\n  }\n\n  function withSetScope<T>(scope: Scope, callback: (scope: Scope) => T): T {\n    const ctx = api.context.active();\n\n    // We depend on the otelContextManager to handle the context/hub\n    // We set the `SENTRY_FORK_SET_SCOPE_CONTEXT_KEY` context value, which is picked up by\n    // the OTEL context manager, which picks up this scope as the current scope\n    return api.context.with(ctx.setValue(SENTRY_FORK_SET_SCOPE_CONTEXT_KEY, scope), () => {\n      return callback(scope);\n    });\n  }\n\n  function withIsolationScope<T>(callback: (isolationScope: Scope) => T): T {\n    const ctx = api.context.active();\n\n    // We depend on the otelContextManager to handle the context/hub\n    // We set the `SENTRY_FORK_ISOLATION_SCOPE_CONTEXT_KEY` context value, which is picked up by\n    // the OTEL context manager, which uses the presence of this key to determine if it should\n    // fork the isolation scope, or not\n    return api.context.with(ctx.setValue(SENTRY_FORK_ISOLATION_SCOPE_CONTEXT_KEY, true), () => {\n      return callback(getIsolationScope());\n    });\n  }\n\n  function withSetIsolationScope<T>(isolationScope: Scope, callback: (isolationScope: Scope) => T): T {\n    const ctx = api.context.active();\n\n    // We depend on the otelContextManager to handle the context/hub\n    // We set the `SENTRY_FORK_ISOLATION_SCOPE_CONTEXT_KEY` context value, which is picked up by\n    // the OTEL context manager, which uses the presence of this key to determine if it should\n    // fork the isolation scope, or not\n    return api.context.with(ctx.setValue(SENTRY_FORK_SET_ISOLATION_SCOPE_CONTEXT_KEY, isolationScope), () => {\n      return callback(getIsolationScope());\n    });\n  }\n\n  function getCurrentScope(): Scope {\n    return getScopes().scope;\n  }\n\n  function getIsolationScope(): Scope {\n    return getScopes().isolationScope;\n  }\n\n  setAsyncContextStrategy({\n    withScope,\n    withSetScope,\n    withSetIsolationScope,\n    withIsolationScope,\n    getCurrentScope,\n    getIsolationScope,\n    startSpan,\n    startSpanManual,\n    startInactiveSpan,\n    getActiveSpan,\n    suppressTracing,\n    getTraceData,\n    continueTrace,\n    // The types here don't fully align, because our own `Span` type is narrower\n    // than the OTEL one - but this is OK for here, as we now we'll only have OTEL spans passed around\n    withActiveSpan: withActiveSpan as typeof defaultWithActiveSpan,\n  });\n}\n", "import type { Context, ContextManager } from '@opentelemetry/api';\nimport type { Scope } from '@sentry/core';\nimport { getCurrentScope, getIsolationScope } from '@sentry/core';\nimport {\n  SENTRY_FORK_ISOLATION_SCOPE_CONTEXT_KEY,\n  SENTRY_FORK_SET_ISOLATION_SCOPE_CONTEXT_KEY,\n  SENTRY_FORK_SET_SCOPE_CONTEXT_KEY,\n} from './constants';\nimport { getScopesFromContext, setContextOnScope, setScopesOnContext } from './utils/contextData';\nimport { setIsSetup } from './utils/setupCheck';\n\n/**\n * Wrap an OpenTelemetry ContextManager in a way that ensures the context is kept in sync with the Sentry Scope.\n *\n * Usage:\n * import { AsyncLocalStorageContextManager } from '@opentelemetry/context-async-hooks';\n * const SentryContextManager = wrapContextManagerClass(AsyncLocalStorageContextManager);\n * const contextManager = new SentryContextManager();\n */\nexport function wrapContextManagerClass<ContextManagerInstance extends ContextManager>(\n  ContextManagerClass: new (...args: unknown[]) => ContextManagerInstance,\n): typeof ContextManagerClass {\n  /**\n   * This is a custom ContextManager for OpenTelemetry, which extends the default AsyncLocalStorageContextManager.\n   * It ensures that we create new scopes per context, so that the OTEL Context & the Sentry Scope are always in sync.\n   *\n   * Note that we currently only support AsyncHooks with this,\n   * but since this should work for Node 14+ anyhow that should be good enough.\n   */\n\n  // @ts-expect-error TS does not like this, but we know this is fine\n  class SentryContextManager extends ContextManagerClass {\n    public constructor(...args: unknown[]) {\n      super(...args);\n      setIsSetup('SentryContextManager');\n    }\n    /**\n     * Overwrite with() of the original AsyncLocalStorageContextManager\n     * to ensure we also create new scopes per context.\n     */\n    public with<A extends unknown[], F extends (...args: A) => ReturnType<F>>(\n      context: Context,\n      fn: F,\n      thisArg?: ThisParameterType<F>,\n      ...args: A\n    ): ReturnType<F> {\n      const currentScopes = getScopesFromContext(context);\n      const currentScope = currentScopes?.scope || getCurrentScope();\n      const currentIsolationScope = currentScopes?.isolationScope || getIsolationScope();\n\n      const shouldForkIsolationScope = context.getValue(SENTRY_FORK_ISOLATION_SCOPE_CONTEXT_KEY) === true;\n      const scope = context.getValue(SENTRY_FORK_SET_SCOPE_CONTEXT_KEY) as Scope | undefined;\n      const isolationScope = context.getValue(SENTRY_FORK_SET_ISOLATION_SCOPE_CONTEXT_KEY) as Scope | undefined;\n\n      const newCurrentScope = scope || currentScope.clone();\n      const newIsolationScope =\n        isolationScope || (shouldForkIsolationScope ? currentIsolationScope.clone() : currentIsolationScope);\n      const scopes = { scope: newCurrentScope, isolationScope: newIsolationScope };\n\n      const ctx1 = setScopesOnContext(context, scopes);\n\n      // Remove the unneeded values again\n      const ctx2 = ctx1\n        .deleteValue(SENTRY_FORK_ISOLATION_SCOPE_CONTEXT_KEY)\n        .deleteValue(SENTRY_FORK_SET_SCOPE_CONTEXT_KEY)\n        .deleteValue(SENTRY_FORK_SET_ISOLATION_SCOPE_CONTEXT_KEY);\n\n      setContextOnScope(newCurrentScope, ctx2);\n\n      return super.with(ctx2, fn, thisArg, ...args);\n    }\n  }\n\n  return SentryContextManager as unknown as typeof ContextManagerClass;\n}\n", "import type { ReadableSpan } from '@opentelemetry/sdk-trace-base';\nimport { SEMANTIC_ATTRIBUTE_SENTRY_PARENT_IS_REMOTE } from '../semanticAttributes';\nimport { getParentSpanId } from './getParentSpanId';\n\nexport interface SpanNode {\n  id: string;\n  span?: ReadableSpan;\n  parentNode?: SpanNode | undefined;\n  children: SpanNode[];\n}\n\ntype SpanMap = Map<string, SpanNode>;\n\n/**\n * This function runs through a list of OTEL Spans, and wraps them in an `SpanNode`\n * where each node holds a reference to their parent node.\n */\nexport function groupSpansWithParents(spans: ReadableSpan[]): SpanNode[] {\n  const nodeMap: SpanMap = new Map<string, SpanNode>();\n\n  for (const span of spans) {\n    createOrUpdateSpanNodeAndRefs(nodeMap, span);\n  }\n\n  return Array.from(nodeMap, function ([_id, spanNode]) {\n    return spanNode;\n  });\n}\n\n/**\n * This returns the _local_ parent ID - `parentId` on the span may point to a remote span.\n */\nexport function getLocalParentId(span: ReadableSpan): string | undefined {\n  const parentIsRemote = span.attributes[SEMANTIC_ATTRIBUTE_SENTRY_PARENT_IS_REMOTE] === true;\n  // If the parentId is the trace parent ID, we pretend it's undefined\n  // As this means the parent exists somewhere else\n  return !parentIsRemote ? getParentSpanId(span) : undefined;\n}\n\nfunction createOrUpdateSpanNodeAndRefs(nodeMap: SpanMap, span: ReadableSpan): void {\n  const id = span.spanContext().spanId;\n  const parentId = getLocalParentId(span);\n\n  if (!parentId) {\n    createOrUpdateNode(nodeMap, { id, span, children: [] });\n    return;\n  }\n\n  // Else make sure to create parent node as well\n  // Note that the parent may not know it's parent _yet_, this may be updated in a later pass\n  const parentNode = createOrGetParentNode(nodeMap, parentId);\n  const node = createOrUpdateNode(nodeMap, { id, span, parentNode, children: [] });\n  parentNode.children.push(node);\n}\n\nfunction createOrGetParentNode(nodeMap: SpanMap, id: string): SpanNode {\n  const existing = nodeMap.get(id);\n\n  if (existing) {\n    return existing;\n  }\n\n  return createOrUpdateNode(nodeMap, { id, children: [] });\n}\n\nfunction createOrUpdateNode(nodeMap: SpanMap, spanNode: SpanNode): SpanNode {\n  const existing = nodeMap.get(spanNode.id);\n\n  // If span is already set, nothing to do here\n  if (existing?.span) {\n    return existing;\n  }\n\n  // If it exists but span is not set yet, we update it\n  if (existing && !existing.span) {\n    existing.span = spanNode.span;\n    existing.parentNode = spanNode.parentNode;\n    return existing;\n  }\n\n  // Else, we create a new one...\n  nodeMap.set(spanNode.id, spanNode);\n  return spanNode;\n}\n", "import { SpanStatusCode } from '@opentelemetry/api';\nimport {\n  ATTR_HTTP_RESPONSE_STATUS_CODE,\n  SEMATTRS_HTTP_STATUS_CODE,\n  SEMATTRS_RPC_GRPC_STATUS_CODE,\n} from '@opentelemetry/semantic-conventions';\nimport type { SpanAttributes, SpanStatus } from '@sentry/core';\nimport { getSpanStatusFromHttpCode, SPAN_STATUS_ERROR, SPAN_STATUS_OK } from '@sentry/core';\nimport type { AbstractSpan } from '../types';\nimport { spanHasAttributes, spanHasStatus } from './spanTypes';\n\n// canonicalCodesGrpcMap maps some GRPC codes to Sentry's span statuses. See description in grpc documentation.\nconst canonicalGrpcErrorCodesMap: Record<string, SpanStatus['message']> = {\n  '1': 'cancelled',\n  '2': 'unknown_error',\n  '3': 'invalid_argument',\n  '4': 'deadline_exceeded',\n  '5': 'not_found',\n  '6': 'already_exists',\n  '7': 'permission_denied',\n  '8': 'resource_exhausted',\n  '9': 'failed_precondition',\n  '10': 'aborted',\n  '11': 'out_of_range',\n  '12': 'unimplemented',\n  '13': 'internal_error',\n  '14': 'unavailable',\n  '15': 'data_loss',\n  '16': 'unauthenticated',\n} as const;\n\nconst isStatusErrorMessageValid = (message: string): boolean => {\n  return Object.values(canonicalGrpcErrorCodesMap).includes(message as SpanStatus['message']);\n};\n\n/**\n * Get a Sentry span status from an otel span.\n */\nexport function mapStatus(span: AbstractSpan): SpanStatus {\n  const attributes = spanHasAttributes(span) ? span.attributes : {};\n  const status = spanHasStatus(span) ? span.status : undefined;\n\n  if (status) {\n    // Since span status OK is not set by default, we give it priority: https://opentelemetry.io/docs/concepts/signals/traces/#span-status\n    if (status.code === SpanStatusCode.OK) {\n      return { code: SPAN_STATUS_OK };\n      // If the span is already marked as erroneous we return that exact status\n    } else if (status.code === SpanStatusCode.ERROR) {\n      if (typeof status.message === 'undefined') {\n        const inferredStatus = inferStatusFromAttributes(attributes);\n        if (inferredStatus) {\n          return inferredStatus;\n        }\n      }\n\n      if (status.message && isStatusErrorMessageValid(status.message)) {\n        return { code: SPAN_STATUS_ERROR, message: status.message };\n      } else {\n        return { code: SPAN_STATUS_ERROR, message: 'unknown_error' };\n      }\n    }\n  }\n\n  // If the span status is UNSET, we try to infer it from HTTP or GRPC status codes.\n  const inferredStatus = inferStatusFromAttributes(attributes);\n\n  if (inferredStatus) {\n    return inferredStatus;\n  }\n\n  // We default to setting the spans status to ok.\n  if (status?.code === SpanStatusCode.UNSET) {\n    return { code: SPAN_STATUS_OK };\n  } else {\n    return { code: SPAN_STATUS_ERROR, message: 'unknown_error' };\n  }\n}\n\nfunction inferStatusFromAttributes(attributes: SpanAttributes): SpanStatus | undefined {\n  // If the span status is UNSET, we try to infer it from HTTP or GRPC status codes.\n\n  // eslint-disable-next-line deprecation/deprecation\n  const httpCodeAttribute = attributes[ATTR_HTTP_RESPONSE_STATUS_CODE] || attributes[SEMATTRS_HTTP_STATUS_CODE];\n  // eslint-disable-next-line deprecation/deprecation\n  const grpcCodeAttribute = attributes[SEMATTRS_RPC_GRPC_STATUS_CODE];\n\n  const numberHttpCode =\n    typeof httpCodeAttribute === 'number'\n      ? httpCodeAttribute\n      : typeof httpCodeAttribute === 'string'\n        ? parseInt(httpCodeAttribute)\n        : undefined;\n\n  if (typeof numberHttpCode === 'number') {\n    return getSpanStatusFromHttpCode(numberHttpCode);\n  }\n\n  if (typeof grpcCodeAttribute === 'string') {\n    return { code: SPAN_STATUS_ERROR, message: canonicalGrpcErrorCodesMap[grpcCodeAttribute] || 'unknown_error' };\n  }\n\n  return undefined;\n}\n", "/* eslint-disable max-lines */\nimport type { Span } from '@opentelemetry/api';\nimport { SpanKind } from '@opentelemetry/api';\nimport type { ReadableSpan } from '@opentelemetry/sdk-trace-base';\nimport { ATTR_HTTP_RESPONSE_STATUS_CODE, SEMATTRS_HTTP_STATUS_CODE } from '@opentelemetry/semantic-conventions';\nimport type {\n  SpanAttributes,\n  SpanJSON,\n  SpanOrigin,\n  TraceContext,\n  TransactionEvent,\n  TransactionSource,\n} from '@sentry/core';\nimport {\n  captureEvent,\n  convertSpanLinksForEnvelope,\n  getCapturedScopesOnSpan,\n  getDynamicSamplingContextFromSpan,\n  getStatusMessage,\n  logger,\n  SEMANTIC_ATTRIBUTE_SENTRY_CUSTOM_SPAN_NAME,\n  SEMANTIC_ATTRIBUTE_SENTRY_OP,\n  SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN,\n  SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE,\n  SEMANTIC_ATTRIBUTE_SENTRY_SOURCE,\n  spanTimeInputToSeconds,\n  timedEventsToMeasurements,\n} from '@sentry/core';\nimport { DEBUG_BUILD } from './debug-build';\nimport { SEMANTIC_ATTRIBUTE_SENTRY_PARENT_IS_REMOTE } from './semanticAttributes';\nimport { getParentSpanId } from './utils/getParentSpanId';\nimport { getRequestSpanData } from './utils/getRequestSpanData';\nimport type { SpanNode } from './utils/groupSpansWithParents';\nimport { getLocalParentId, groupSpansWithParents } from './utils/groupSpansWithParents';\nimport { mapStatus } from './utils/mapStatus';\nimport { parseSpanDescription } from './utils/parseSpanDescription';\n\ntype SpanNodeCompleted = SpanNode & { span: ReadableSpan };\n\nconst MAX_SPAN_COUNT = 1000;\nconst DEFAULT_TIMEOUT = 300; // 5 min\n\ninterface FinishedSpanBucket {\n  timestampInS: number;\n  spans: Set<ReadableSpan>;\n}\n\n/**\n * A Sentry-specific exporter that converts OpenTelemetry Spans to Sentry Spans & Transactions.\n */\nexport class SentrySpanExporter {\n  private _flushTimeout: ReturnType<typeof setTimeout> | undefined;\n\n  /*\n   * A quick explanation on the buckets: We do bucketing of finished spans for efficiency. This span exporter is\n   * accumulating spans until a root span is encountered and then it flushes all the spans that are descendants of that\n   * root span. Because it is totally in the realm of possibilities that root spans are never finished, and we don't\n   * want to accumulate spans indefinitely in memory, we need to periodically evacuate spans. Naively we could simply\n   * store the spans in an array and each time a new span comes in we could iterate through the entire array and\n   * evacuate all spans that have an end-timestamp that is older than our limit. This could get quite expensive because\n   * we would have to iterate a potentially large number of spans every time we evacuate. We want to avoid these large\n   * bursts of computation.\n   *\n   * Instead we go for a bucketing approach and put spans into buckets, based on what second\n   * (modulo the time limit) the span was put into the exporter. With buckets, when we decide to evacuate, we can\n   * iterate through the bucket entries instead, which have an upper bound of items, making the evacuation much more\n   * efficient. Cleaning up also becomes much more efficient since it simply involves de-referencing a bucket within the\n   * bucket array, and letting garbage collection take care of the rest.\n   */\n  private _finishedSpanBuckets: (FinishedSpanBucket | undefined)[];\n  private _finishedSpanBucketSize: number;\n  private _spansToBucketEntry: WeakMap<ReadableSpan, FinishedSpanBucket>;\n  private _lastCleanupTimestampInS: number;\n\n  public constructor(options?: {\n    /** Lower bound of time in seconds until spans that are buffered but have not been sent as part of a transaction get cleared from memory. */\n    timeout?: number;\n  }) {\n    this._finishedSpanBucketSize = options?.timeout || DEFAULT_TIMEOUT;\n    this._finishedSpanBuckets = new Array(this._finishedSpanBucketSize).fill(undefined);\n    this._lastCleanupTimestampInS = Math.floor(Date.now() / 1000);\n    this._spansToBucketEntry = new WeakMap();\n  }\n\n  /** Export a single span. */\n  public export(span: ReadableSpan): void {\n    const currentTimestampInS = Math.floor(Date.now() / 1000);\n\n    if (this._lastCleanupTimestampInS !== currentTimestampInS) {\n      let droppedSpanCount = 0;\n      this._finishedSpanBuckets.forEach((bucket, i) => {\n        if (bucket && bucket.timestampInS <= currentTimestampInS - this._finishedSpanBucketSize) {\n          droppedSpanCount += bucket.spans.size;\n          this._finishedSpanBuckets[i] = undefined;\n        }\n      });\n      if (droppedSpanCount > 0) {\n        DEBUG_BUILD &&\n          logger.log(\n            `SpanExporter dropped ${droppedSpanCount} spans because they were pending for more than ${this._finishedSpanBucketSize} seconds.`,\n          );\n      }\n      this._lastCleanupTimestampInS = currentTimestampInS;\n    }\n\n    const currentBucketIndex = currentTimestampInS % this._finishedSpanBucketSize;\n    const currentBucket = this._finishedSpanBuckets[currentBucketIndex] || {\n      timestampInS: currentTimestampInS,\n      spans: new Set(),\n    };\n    this._finishedSpanBuckets[currentBucketIndex] = currentBucket;\n    currentBucket.spans.add(span);\n    this._spansToBucketEntry.set(span, currentBucket);\n\n    // If the span doesn't have a local parent ID (it's a root span), we're gonna flush all the ended spans\n    if (!getLocalParentId(span)) {\n      this._clearTimeout();\n\n      // If we got a parent span, we try to send the span tree\n      // Wait a tick for this, to ensure we avoid race conditions\n      this._flushTimeout = setTimeout(() => {\n        this.flush();\n      }, 1);\n    }\n  }\n\n  /** Try to flush any pending spans immediately. */\n  public flush(): void {\n    this._clearTimeout();\n\n    const finishedSpans: ReadableSpan[] = [];\n    this._finishedSpanBuckets.forEach(bucket => {\n      if (bucket) {\n        finishedSpans.push(...bucket.spans);\n      }\n    });\n\n    const sentSpans = maybeSend(finishedSpans);\n\n    const sentSpanCount = sentSpans.size;\n\n    const remainingOpenSpanCount = finishedSpans.length - sentSpanCount;\n\n    DEBUG_BUILD &&\n      logger.log(\n        `SpanExporter exported ${sentSpanCount} spans, ${remainingOpenSpanCount} spans are waiting for their parent spans to finish`,\n      );\n\n    sentSpans.forEach(span => {\n      const bucketEntry = this._spansToBucketEntry.get(span);\n      if (bucketEntry) {\n        bucketEntry.spans.delete(span);\n      }\n    });\n  }\n\n  /** Clear the exporter. */\n  public clear(): void {\n    this._finishedSpanBuckets = this._finishedSpanBuckets.fill(undefined);\n    this._clearTimeout();\n  }\n\n  /** Clear the flush timeout. */\n  private _clearTimeout(): void {\n    if (this._flushTimeout) {\n      clearTimeout(this._flushTimeout);\n      this._flushTimeout = undefined;\n    }\n  }\n}\n\n/**\n * Send the given spans, but only if they are part of a finished transaction.\n *\n * Returns the sent spans.\n * Spans remain unsent when their parent span is not yet finished.\n * This will happen regularly, as child spans are generally finished before their parents.\n * But it _could_ also happen because, for whatever reason, a parent span was lost.\n * In this case, we'll eventually need to clean this up.\n */\nfunction maybeSend(spans: ReadableSpan[]): Set<ReadableSpan> {\n  const grouped = groupSpansWithParents(spans);\n  const sentSpans = new Set<ReadableSpan>();\n\n  const rootNodes = getCompletedRootNodes(grouped);\n\n  rootNodes.forEach(root => {\n    const span = root.span;\n    sentSpans.add(span);\n    const transactionEvent = createTransactionForOtelSpan(span);\n\n    // We'll recursively add all the child spans to this array\n    const spans = transactionEvent.spans || [];\n\n    root.children.forEach(child => {\n      createAndFinishSpanForOtelSpan(child, spans, sentSpans);\n    });\n\n    // spans.sort() mutates the array, but we do not use this anymore after this point\n    // so we can safely mutate it here\n    transactionEvent.spans =\n      spans.length > MAX_SPAN_COUNT\n        ? spans.sort((a, b) => a.start_timestamp - b.start_timestamp).slice(0, MAX_SPAN_COUNT)\n        : spans;\n\n    const measurements = timedEventsToMeasurements(span.events);\n    if (measurements) {\n      transactionEvent.measurements = measurements;\n    }\n\n    captureEvent(transactionEvent);\n  });\n\n  return sentSpans;\n}\n\nfunction nodeIsCompletedRootNode(node: SpanNode): node is SpanNodeCompleted {\n  return !!node.span && !node.parentNode;\n}\n\nfunction getCompletedRootNodes(nodes: SpanNode[]): SpanNodeCompleted[] {\n  return nodes.filter(nodeIsCompletedRootNode);\n}\n\nfunction parseSpan(span: ReadableSpan): { op?: string; origin?: SpanOrigin; source?: TransactionSource } {\n  const attributes = span.attributes;\n\n  const origin = attributes[SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN] as SpanOrigin | undefined;\n  const op = attributes[SEMANTIC_ATTRIBUTE_SENTRY_OP] as string | undefined;\n  const source = attributes[SEMANTIC_ATTRIBUTE_SENTRY_SOURCE] as TransactionSource | undefined;\n\n  return { origin, op, source };\n}\n\n/** Exported only for tests. */\nexport function createTransactionForOtelSpan(span: ReadableSpan): TransactionEvent {\n  const { op, description, data, origin = 'manual', source } = getSpanData(span);\n  const capturedSpanScopes = getCapturedScopesOnSpan(span as unknown as Span);\n\n  const sampleRate = span.attributes[SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE] as number | undefined;\n\n  const attributes: SpanAttributes = {\n    [SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: source,\n    [SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE]: sampleRate,\n    [SEMANTIC_ATTRIBUTE_SENTRY_OP]: op,\n    [SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: origin,\n    ...data,\n    ...removeSentryAttributes(span.attributes),\n  };\n\n  const { links } = span;\n  const { traceId: trace_id, spanId: span_id } = span.spanContext();\n\n  // If parentSpanIdFromTraceState is defined at all, we want it to take precedence\n  // In that case, an empty string should be interpreted as \"no parent span id\",\n  // even if `span.parentSpanId` is set\n  // this is the case when we are starting a new trace, where we have a virtual span based on the propagationContext\n  // We only want to continue the traceId in this case, but ignore the parent span\n  const parent_span_id = getParentSpanId(span);\n\n  const status = mapStatus(span);\n\n  const traceContext: TraceContext = {\n    parent_span_id,\n    span_id,\n    trace_id,\n    data: attributes,\n    origin,\n    op,\n    status: getStatusMessage(status), // As per protocol, span status is allowed to be undefined\n    links: convertSpanLinksForEnvelope(links),\n  };\n\n  const statusCode = attributes[ATTR_HTTP_RESPONSE_STATUS_CODE];\n  const responseContext = typeof statusCode === 'number' ? { response: { status_code: statusCode } } : undefined;\n\n  const transactionEvent: TransactionEvent = {\n    contexts: {\n      trace: traceContext,\n      otel: {\n        resource: span.resource.attributes,\n      },\n      ...responseContext,\n    },\n    spans: [],\n    start_timestamp: spanTimeInputToSeconds(span.startTime),\n    timestamp: spanTimeInputToSeconds(span.endTime),\n    transaction: description,\n    type: 'transaction',\n    sdkProcessingMetadata: {\n      capturedSpanScope: capturedSpanScopes.scope,\n      capturedSpanIsolationScope: capturedSpanScopes.isolationScope,\n      sampleRate,\n      dynamicSamplingContext: getDynamicSamplingContextFromSpan(span as unknown as Span),\n    },\n    ...(source && {\n      transaction_info: {\n        source,\n      },\n    }),\n  };\n\n  return transactionEvent;\n}\n\nfunction createAndFinishSpanForOtelSpan(node: SpanNode, spans: SpanJSON[], sentSpans: Set<ReadableSpan>): void {\n  const span = node.span;\n\n  if (span) {\n    sentSpans.add(span);\n  }\n\n  const shouldDrop = !span;\n\n  // If this span should be dropped, we still want to create spans for the children of this\n  if (shouldDrop) {\n    node.children.forEach(child => {\n      createAndFinishSpanForOtelSpan(child, spans, sentSpans);\n    });\n    return;\n  }\n\n  const span_id = span.spanContext().spanId;\n  const trace_id = span.spanContext().traceId;\n  const parentSpanId = getParentSpanId(span);\n\n  const { attributes, startTime, endTime, links } = span;\n\n  const { op, description, data, origin = 'manual' } = getSpanData(span);\n  const allData = {\n    [SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: origin,\n    [SEMANTIC_ATTRIBUTE_SENTRY_OP]: op,\n    ...removeSentryAttributes(attributes),\n    ...data,\n  };\n\n  const status = mapStatus(span);\n\n  const spanJSON: SpanJSON = {\n    span_id,\n    trace_id,\n    data: allData,\n    description,\n    parent_span_id: parentSpanId,\n    start_timestamp: spanTimeInputToSeconds(startTime),\n    // This is [0,0] by default in OTEL, in which case we want to interpret this as no end time\n    timestamp: spanTimeInputToSeconds(endTime) || undefined,\n    status: getStatusMessage(status), // As per protocol, span status is allowed to be undefined\n    op,\n    origin,\n    measurements: timedEventsToMeasurements(span.events),\n    links: convertSpanLinksForEnvelope(links),\n  };\n\n  spans.push(spanJSON);\n\n  node.children.forEach(child => {\n    createAndFinishSpanForOtelSpan(child, spans, sentSpans);\n  });\n}\n\nfunction getSpanData(span: ReadableSpan): {\n  data: Record<string, unknown>;\n  op?: string;\n  description: string;\n  source?: TransactionSource;\n  origin?: SpanOrigin;\n} {\n  const { op: definedOp, source: definedSource, origin } = parseSpan(span);\n  const { op: inferredOp, description, source: inferredSource, data: inferredData } = parseSpanDescription(span);\n\n  const op = definedOp || inferredOp;\n  const source = definedSource || inferredSource;\n\n  const data = { ...inferredData, ...getData(span) };\n\n  return {\n    op,\n    description,\n    source,\n    origin,\n    data,\n  };\n}\n\n/**\n * Remove custom `sentry.` attributes we do not need to send.\n * These are more carrier attributes we use inside of the SDK, we do not need to send them to the API.\n */\nfunction removeSentryAttributes(data: Record<string, unknown>): Record<string, unknown> {\n  const cleanedData = { ...data };\n\n  /* eslint-disable @typescript-eslint/no-dynamic-delete */\n  delete cleanedData[SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE];\n  delete cleanedData[SEMANTIC_ATTRIBUTE_SENTRY_PARENT_IS_REMOTE];\n  delete cleanedData[SEMANTIC_ATTRIBUTE_SENTRY_CUSTOM_SPAN_NAME];\n  /* eslint-enable @typescript-eslint/no-dynamic-delete */\n\n  return cleanedData;\n}\n\nfunction getData(span: ReadableSpan): Record<string, unknown> {\n  const attributes = span.attributes;\n  const data: Record<string, unknown> = {};\n\n  if (span.kind !== SpanKind.INTERNAL) {\n    data['otel.kind'] = SpanKind[span.kind];\n  }\n\n  // eslint-disable-next-line deprecation/deprecation\n  const maybeHttpStatusCodeAttribute = attributes[SEMATTRS_HTTP_STATUS_CODE];\n  if (maybeHttpStatusCodeAttribute) {\n    data[ATTR_HTTP_RESPONSE_STATUS_CODE] = maybeHttpStatusCodeAttribute as string;\n  }\n\n  const requestData = getRequestSpanData(span);\n\n  if (requestData.url) {\n    data.url = requestData.url;\n  }\n\n  if (requestData['http.query']) {\n    data['http.query'] = requestData['http.query'].slice(1);\n  }\n  if (requestData['http.fragment']) {\n    data['http.fragment'] = requestData['http.fragment'].slice(1);\n  }\n\n  return data;\n}\n", "import type { Context } from '@opentelemetry/api';\nimport { ROOT_CONTEXT, trace } from '@opentelemetry/api';\nimport type { ReadableSpan, Span, SpanProcessor as SpanProcessorInterface } from '@opentelemetry/sdk-trace-base';\nimport {\n  addChildSpanToSpan,\n  getClient,\n  getDefaultCurrentScope,\n  getDefaultIsolationScope,\n  logSpanEnd,\n  logSpanStart,\n  setCapturedScopesOnSpan,\n} from '@sentry/core';\nimport { SEMANTIC_ATTRIBUTE_SENTRY_PARENT_IS_REMOTE } from './semanticAttributes';\nimport { SentrySpanExporter } from './spanExporter';\nimport { getScopesFromContext } from './utils/contextData';\nimport { setIsSetup } from './utils/setupCheck';\n\nfunction onSpanStart(span: Span, parentContext: Context): void {\n  // This is a reliable way to get the parent span - because this is exactly how the parent is identified in the OTEL SDK\n  const parentSpan = trace.getSpan(parentContext);\n\n  let scopes = getScopesFromContext(parentContext);\n\n  // We need access to the parent span in order to be able to move up the span tree for breadcrumbs\n  if (parentSpan && !parentSpan.spanContext().isRemote) {\n    addChildSpanToSpan(parentSpan, span);\n  }\n\n  // We need this in the span exporter\n  if (parentSpan?.spanContext().isRemote) {\n    span.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_PARENT_IS_REMOTE, true);\n  }\n\n  // The root context does not have scopes stored, so we check for this specifically\n  // As fallback we attach the global scopes\n  if (parentContext === ROOT_CONTEXT) {\n    scopes = {\n      scope: getDefaultCurrentScope(),\n      isolationScope: getDefaultIsolationScope(),\n    };\n  }\n\n  // We need the scope at time of span creation in order to apply it to the event when the span is finished\n  if (scopes) {\n    setCapturedScopesOnSpan(span, scopes.scope, scopes.isolationScope);\n  }\n\n  logSpanStart(span);\n\n  const client = getClient();\n  client?.emit('spanStart', span);\n}\n\nfunction onSpanEnd(span: Span): void {\n  logSpanEnd(span);\n\n  const client = getClient();\n  client?.emit('spanEnd', span);\n}\n\n/**\n * Converts OpenTelemetry Spans to Sentry Spans and sends them to Sentry via\n * the Sentry SDK.\n */\nexport class SentrySpanProcessor implements SpanProcessorInterface {\n  private _exporter: SentrySpanExporter;\n\n  public constructor(options?: { timeout?: number }) {\n    setIsSetup('SentrySpanProcessor');\n    this._exporter = new SentrySpanExporter(options);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public async forceFlush(): Promise<void> {\n    this._exporter.flush();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public async shutdown(): Promise<void> {\n    this._exporter.clear();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public onStart(span: Span, parentContext: Context): void {\n    onSpanStart(span, parentContext);\n  }\n\n  /** @inheritDoc */\n  public onEnd(span: Span & ReadableSpan): void {\n    onSpanEnd(span);\n\n    this._exporter.export(span);\n  }\n}\n", "/* eslint-disable complexity */\nimport type { Context, Span, TraceState as TraceStateInterface } from '@opentelemetry/api';\nimport { isSpanContextValid, SpanKind, trace } from '@opentelemetry/api';\nimport { TraceState } from '@opentelemetry/core';\nimport type { Sampler, SamplingResult } from '@opentelemetry/sdk-trace-base';\nimport { SamplingDecision } from '@opentelemetry/sdk-trace-base';\nimport {\n  ATTR_HTTP_REQUEST_METHOD,\n  ATTR_URL_FULL,\n  SEMATTRS_HTTP_METHOD,\n  SEMATTRS_HTTP_URL,\n} from '@opentelemetry/semantic-conventions';\nimport type { Client, SpanAttributes } from '@sentry/core';\nimport {\n  baggageHeaderToDynamicSamplingContext,\n  hasSpansEnabled,\n  logger,\n  parseSampleRate,\n  sampleSpan,\n  SEMANTIC_ATTRIBUTE_SENTRY_OP,\n  SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE,\n} from '@sentry/core';\nimport {\n  SENTRY_TRACE_STATE_DSC,\n  SENTRY_TRACE_STATE_SAMPLE_RAND,\n  SENTRY_TRACE_STATE_SAMPLE_RATE,\n  SENTRY_TRACE_STATE_SAMPLED_NOT_RECORDING,\n  SENTRY_TRACE_STATE_URL,\n} from './constants';\nimport { DEBUG_BUILD } from './debug-build';\nimport { getScopesFromContext } from './utils/contextData';\nimport { getSamplingDecision } from './utils/getSamplingDecision';\nimport { inferSpanData } from './utils/parseSpanDescription';\nimport { setIsSetup } from './utils/setupCheck';\n\n/**\n * A custom OTEL sampler that uses Sentry sampling rates to make its decision\n */\nexport class SentrySampler implements Sampler {\n  private _client: Client;\n\n  public constructor(client: Client) {\n    this._client = client;\n    setIsSetup('SentrySampler');\n  }\n\n  /** @inheritDoc */\n  public shouldSample(\n    context: Context,\n    traceId: string,\n    spanName: string,\n    spanKind: SpanKind,\n    spanAttributes: SpanAttributes,\n    _links: unknown,\n  ): SamplingResult {\n    const options = this._client.getOptions();\n\n    const parentSpan = getValidSpan(context);\n    const parentContext = parentSpan?.spanContext();\n\n    if (!hasSpansEnabled(options)) {\n      return wrapSamplingDecision({ decision: undefined, context, spanAttributes });\n    }\n\n    // `ATTR_HTTP_REQUEST_METHOD` is the new attribute, but we still support the old one, `SEMATTRS_HTTP_METHOD`, for now.\n    // eslint-disable-next-line deprecation/deprecation\n    const maybeSpanHttpMethod = spanAttributes[SEMATTRS_HTTP_METHOD] || spanAttributes[ATTR_HTTP_REQUEST_METHOD];\n\n    // If we have a http.client span that has no local parent, we never want to sample it\n    // but we want to leave downstream sampling decisions up to the server\n    if (spanKind === SpanKind.CLIENT && maybeSpanHttpMethod && (!parentSpan || parentContext?.isRemote)) {\n      return wrapSamplingDecision({ decision: undefined, context, spanAttributes });\n    }\n\n    const parentSampled = parentSpan ? getParentSampled(parentSpan, traceId, spanName) : undefined;\n    const isRootSpan = !parentSpan || parentContext?.isRemote;\n\n    // We only sample based on parameters (like tracesSampleRate or tracesSampler) for root spans (which is done in sampleSpan).\n    // Non-root-spans simply inherit the sampling decision from their parent.\n    if (!isRootSpan) {\n      return wrapSamplingDecision({\n        decision: parentSampled ? SamplingDecision.RECORD_AND_SAMPLED : SamplingDecision.NOT_RECORD,\n        context,\n        spanAttributes,\n      });\n    }\n\n    // We want to pass the inferred name & attributes to the sampler method\n    const {\n      description: inferredSpanName,\n      data: inferredAttributes,\n      op,\n    } = inferSpanData(spanName, spanAttributes, spanKind);\n\n    const mergedAttributes = {\n      ...inferredAttributes,\n      ...spanAttributes,\n    };\n\n    if (op) {\n      mergedAttributes[SEMANTIC_ATTRIBUTE_SENTRY_OP] = op;\n    }\n\n    const mutableSamplingDecision = { decision: true };\n    this._client.emit(\n      'beforeSampling',\n      {\n        spanAttributes: mergedAttributes,\n        spanName: inferredSpanName,\n        parentSampled: parentSampled,\n        parentContext: parentContext,\n      },\n      mutableSamplingDecision,\n    );\n    if (!mutableSamplingDecision.decision) {\n      return wrapSamplingDecision({ decision: undefined, context, spanAttributes });\n    }\n\n    const { isolationScope } = getScopesFromContext(context) ?? {};\n\n    const dscString = parentContext?.traceState ? parentContext.traceState.get(SENTRY_TRACE_STATE_DSC) : undefined;\n    const dsc = dscString ? baggageHeaderToDynamicSamplingContext(dscString) : undefined;\n\n    const sampleRand = parseSampleRate(dsc?.sample_rand) ?? Math.random();\n\n    const [sampled, sampleRate, localSampleRateWasApplied] = sampleSpan(\n      options,\n      {\n        name: inferredSpanName,\n        attributes: mergedAttributes,\n        normalizedRequest: isolationScope?.getScopeData().sdkProcessingMetadata.normalizedRequest,\n        parentSampled,\n        parentSampleRate: parseSampleRate(dsc?.sample_rate),\n      },\n      sampleRand,\n    );\n\n    const method = `${maybeSpanHttpMethod}`.toUpperCase();\n    if (method === 'OPTIONS' || method === 'HEAD') {\n      DEBUG_BUILD && logger.log(`[Tracing] Not sampling span because HTTP method is '${method}' for ${spanName}`);\n\n      return wrapSamplingDecision({\n        decision: SamplingDecision.NOT_RECORD,\n        context,\n        spanAttributes,\n        sampleRand,\n        downstreamTraceSampleRate: 0, // we don't want to sample anything in the downstream trace either\n      });\n    }\n\n    if (\n      !sampled &&\n      // We check for `parentSampled === undefined` because we only want to record client reports for spans that are trace roots (ie. when there was incoming trace)\n      parentSampled === undefined\n    ) {\n      DEBUG_BUILD && logger.log('[Tracing] Discarding root span because its trace was not chosen to be sampled.');\n      this._client.recordDroppedEvent('sample_rate', 'transaction');\n    }\n\n    return {\n      ...wrapSamplingDecision({\n        decision: sampled ? SamplingDecision.RECORD_AND_SAMPLED : SamplingDecision.NOT_RECORD,\n        context,\n        spanAttributes,\n        sampleRand,\n        downstreamTraceSampleRate: localSampleRateWasApplied ? sampleRate : undefined,\n      }),\n      attributes: {\n        // We set the sample rate on the span when a local sample rate was applied to better understand how traces were sampled in Sentry\n        [SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE]: localSampleRateWasApplied ? sampleRate : undefined,\n      },\n    };\n  }\n\n  /** Returns the sampler name or short description with the configuration. */\n  public toString(): string {\n    return 'SentrySampler';\n  }\n}\n\nfunction getParentSampled(parentSpan: Span, traceId: string, spanName: string): boolean | undefined {\n  const parentContext = parentSpan.spanContext();\n\n  // Only inherit sample rate if `traceId` is the same\n  // Note for testing: `isSpanContextValid()` checks the format of the traceId/spanId, so we need to pass valid ones\n  if (isSpanContextValid(parentContext) && parentContext.traceId === traceId) {\n    if (parentContext.isRemote) {\n      const parentSampled = getSamplingDecision(parentSpan.spanContext());\n      DEBUG_BUILD &&\n        logger.log(`[Tracing] Inheriting remote parent's sampled decision for ${spanName}: ${parentSampled}`);\n      return parentSampled;\n    }\n\n    const parentSampled = getSamplingDecision(parentContext);\n    DEBUG_BUILD && logger.log(`[Tracing] Inheriting parent's sampled decision for ${spanName}: ${parentSampled}`);\n    return parentSampled;\n  }\n\n  return undefined;\n}\n\n/**\n * Wrap a sampling decision with data that Sentry needs to work properly with it.\n * If you pass `decision: undefined`, it will be treated as `NOT_RECORDING`, but in contrast to passing `NOT_RECORDING`\n * it will not propagate this decision to downstream Sentry SDKs.\n */\nexport function wrapSamplingDecision({\n  decision,\n  context,\n  spanAttributes,\n  sampleRand,\n  downstreamTraceSampleRate,\n}: {\n  decision: SamplingDecision | undefined;\n  context: Context;\n  spanAttributes: SpanAttributes;\n  sampleRand?: number;\n  downstreamTraceSampleRate?: number;\n}): SamplingResult {\n  let traceState = getBaseTraceState(context, spanAttributes);\n\n  // We will override the propagated sample rate downstream when\n  // - the tracesSampleRate is applied\n  // - the tracesSampler is invoked\n  // Since unsampled OTEL spans (NonRecordingSpans) cannot hold attributes we need to store this on the (trace)context.\n  if (downstreamTraceSampleRate !== undefined) {\n    traceState = traceState.set(SENTRY_TRACE_STATE_SAMPLE_RATE, `${downstreamTraceSampleRate}`);\n  }\n\n  if (sampleRand !== undefined) {\n    traceState = traceState.set(SENTRY_TRACE_STATE_SAMPLE_RAND, `${sampleRand}`);\n  }\n\n  // If the decision is undefined, we treat it as NOT_RECORDING, but we don't propagate this decision to downstream SDKs\n  // Which is done by not setting `SENTRY_TRACE_STATE_SAMPLED_NOT_RECORDING` traceState\n  if (decision == undefined) {\n    return { decision: SamplingDecision.NOT_RECORD, traceState };\n  }\n\n  if (decision === SamplingDecision.NOT_RECORD) {\n    return { decision, traceState: traceState.set(SENTRY_TRACE_STATE_SAMPLED_NOT_RECORDING, '1') };\n  }\n\n  return { decision, traceState };\n}\n\nfunction getBaseTraceState(context: Context, spanAttributes: SpanAttributes): TraceStateInterface {\n  const parentSpan = trace.getSpan(context);\n  const parentContext = parentSpan?.spanContext();\n\n  let traceState = parentContext?.traceState || new TraceState();\n\n  // We always keep the URL on the trace state, so we can access it in the propagator\n  // `ATTR_URL_FULL` is the new attribute, but we still support the old one, `ATTR_HTTP_URL`, for now.\n  // eslint-disable-next-line deprecation/deprecation\n  const url = spanAttributes[SEMATTRS_HTTP_URL] || spanAttributes[ATTR_URL_FULL];\n  if (url && typeof url === 'string') {\n    traceState = traceState.set(SENTRY_TRACE_STATE_URL, url);\n  }\n\n  return traceState;\n}\n\n/**\n * If the active span is invalid, we want to ignore it as parent.\n * This aligns with how otel tracers and default samplers handle these cases.\n */\nfunction getValidSpan(context: Context): Span | undefined {\n  const span = trace.getSpan(context);\n  return span && isSpanContextValid(span.spanContext()) ? span : undefined;\n}\n", "declare const __DEBUG_BUILD__: boolean;\n\n/**\n * This serves as a build time flag that will be true by default, but false in non-debug builds or if users replace `__SENTRY_DEBUG__` in their generated code.\n *\n * ATTENTION: This constant must never cross package boundaries (i.e. be exported) to guarantee that it can be used for tree shaking.\n */\nexport const DEBUG_BUILD = __DEBUG_BUILD__;\n", "import { objectToBaggageHeader, parseBaggageHeader } from '@sentry/core';\n\n/**\n * Merge two baggage headers into one, where the existing one takes precedence.\n * The order of the existing baggage will be preserved, and new entries will be added to the end.\n */\nexport function mergeBaggageHeaders<Existing extends string | string[] | number | undefined>(\n  existing: Existing,\n  baggage: string,\n): string | undefined | Existing {\n  if (!existing) {\n    return baggage;\n  }\n\n  const existingBaggageEntries = parseBaggageHeader(existing);\n  const newBaggageEntries = parseBaggageHeader(baggage);\n\n  if (!newBaggageEntries) {\n    return existing;\n  }\n\n  // Existing entries take precedence, ensuring order remains stable for minimal changes\n  const mergedBaggageEntries = { ...existingBaggageEntries };\n  Object.entries(newBaggageEntries).forEach(([key, value]) => {\n    if (!mergedBaggageEntries[key]) {\n      mergedBaggageEntries[key] = value;\n    }\n  });\n\n  return objectToBaggageHeader(mergedBaggageEntries);\n}\n", "/* eslint-disable max-lines */\nimport type { ChannelListener } from 'node:diagnostics_channel';\nimport { subscribe, unsubscribe } from 'node:diagnostics_channel';\nimport type * as http from 'node:http';\nimport type * as https from 'node:https';\nimport type { EventEmitter } from 'node:stream';\nimport { context, propagation } from '@opentelemetry/api';\nimport { VERSION } from '@opentelemetry/core';\nimport type { InstrumentationConfig } from '@opentelemetry/instrumentation';\nimport { InstrumentationBase, InstrumentationNodeModuleDefinition } from '@opentelemetry/instrumentation';\nimport type { AggregationCounts, Client, SanitizedRequestData, Scope } from '@sentry/core';\nimport {\n  addBreadcrumb,\n  addNonEnumerableProperty,\n  generateSpanId,\n  getBreadcrumbLogLevelFromHttpStatusCode,\n  getClient,\n  getCurrentScope,\n  getIsolationScope,\n  getSanitizedUrlString,\n  getTraceData,\n  httpRequestToRequestData,\n  logger,\n  LRUMap,\n  parseUrl,\n  stripUrlQueryAndFragment,\n  withIsolationScope,\n} from '@sentry/core';\nimport { shouldPropagateTraceForUrl } from '@sentry/opentelemetry';\nimport { DEBUG_BUILD } from '../../debug-build';\nimport { mergeBaggageHeaders } from '../../utils/baggage';\nimport { getRequestUrl } from '../../utils/getRequestUrl';\n\nconst INSTRUMENTATION_NAME = '@sentry/instrumentation-http';\n\ntype Http = typeof http;\ntype Https = typeof https;\n\nexport type SentryHttpInstrumentationOptions = InstrumentationConfig & {\n  /**\n   * Whether breadcrumbs should be recorded for requests.\n   *\n   * @default `true`\n   */\n  breadcrumbs?: boolean;\n\n  /**\n   * Whether to extract the trace ID from the `sentry-trace` header for incoming requests.\n   * By default this is done by the HttpInstrumentation, but if that is not added (e.g. because tracing is disabled, ...)\n   * then this instrumentation can take over.\n   *\n   * @default `false`\n   */\n  extractIncomingTraceFromHeader?: boolean;\n\n  /**\n   * Whether to propagate Sentry trace headers in outgoing requests.\n   * By default this is done by the HttpInstrumentation, but if that is not added (e.g. because tracing is disabled)\n   * then this instrumentation can take over.\n   *\n   * @default `false`\n   */\n  propagateTraceInOutgoingRequests?: boolean;\n\n  /**\n   * Do not capture breadcrumbs for outgoing HTTP requests to URLs where the given callback returns `true`.\n   * For the scope of this instrumentation, this callback only controls breadcrumb creation.\n   * The same option can be passed to the top-level httpIntegration where it controls both, breadcrumb and\n   * span creation.\n   *\n   * @param url Contains the entire URL, including query string (if any), protocol, host, etc. of the outgoing request.\n   * @param request Contains the {@type RequestOptions} object used to make the outgoing request.\n   */\n  ignoreOutgoingRequests?: (url: string, request: http.RequestOptions) => boolean;\n\n  /**\n   * Do not capture the request body for incoming HTTP requests to URLs where the given callback returns `true`.\n   * This can be useful for long running requests where the body is not needed and we want to avoid capturing it.\n   *\n   * @param url Contains the entire URL, including query string (if any), protocol, host, etc. of the outgoing request.\n   * @param request Contains the {@type RequestOptions} object used to make the outgoing request.\n   */\n  ignoreIncomingRequestBody?: (url: string, request: http.RequestOptions) => boolean;\n\n  /**\n   * Whether the integration should create [Sessions](https://docs.sentry.io/product/releases/health/#sessions) for incoming requests to track the health and crash-free rate of your releases in Sentry.\n   * Read more about Release Health: https://docs.sentry.io/product/releases/health/\n   *\n   * Defaults to `true`.\n   */\n  trackIncomingRequestsAsSessions?: boolean;\n\n  /**\n   * Number of milliseconds until sessions tracked with `trackIncomingRequestsAsSessions` will be flushed as a session aggregate.\n   *\n   * Defaults to `60000` (60s).\n   */\n  sessionFlushingDelayMS?: number;\n};\n\n// We only want to capture request bodies up to 1mb.\nconst MAX_BODY_BYTE_LENGTH = 1024 * 1024;\n\n/**\n * This custom HTTP instrumentation is used to isolate incoming requests and annotate them with additional information.\n * It does not emit any spans.\n *\n * The reason this is isolated from the OpenTelemetry instrumentation is that users may overwrite this,\n * which would lead to Sentry not working as expected.\n *\n * Important note: Contrary to other OTEL instrumentation, this one cannot be unwrapped.\n * It only does minimal things though and does not emit any spans.\n *\n * This is heavily inspired & adapted from:\n * https://github.com/open-telemetry/opentelemetry-js/blob/f8ab5592ddea5cba0a3b33bf8d74f27872c0367f/experimental/packages/opentelemetry-instrumentation-http/src/http.ts\n */\nexport class SentryHttpInstrumentation extends InstrumentationBase<SentryHttpInstrumentationOptions> {\n  private _propagationDecisionMap: LRUMap<string, boolean>;\n\n  public constructor(config: SentryHttpInstrumentationOptions = {}) {\n    super(INSTRUMENTATION_NAME, VERSION, config);\n\n    this._propagationDecisionMap = new LRUMap<string, boolean>(100);\n  }\n\n  /** @inheritdoc */\n  public init(): [InstrumentationNodeModuleDefinition, InstrumentationNodeModuleDefinition] {\n    // We register handlers when either http or https is instrumented\n    // but we only want to register them once, whichever is loaded first\n    let hasRegisteredHandlers = false;\n\n    const onHttpServerRequestStart = ((_data: unknown) => {\n      const data = _data as { server: http.Server };\n      this._patchServerEmitOnce(data.server);\n    }) satisfies ChannelListener;\n\n    const onHttpClientResponseFinish = ((_data: unknown) => {\n      const data = _data as { request: http.ClientRequest; response: http.IncomingMessage };\n      this._onOutgoingRequestFinish(data.request, data.response);\n    }) satisfies ChannelListener;\n\n    const onHttpClientRequestError = ((_data: unknown) => {\n      const data = _data as { request: http.ClientRequest };\n      this._onOutgoingRequestFinish(data.request, undefined);\n    }) satisfies ChannelListener;\n\n    const onHttpClientRequestCreated = ((_data: unknown) => {\n      const data = _data as { request: http.ClientRequest };\n      this._onOutgoingRequestCreated(data.request);\n    }) satisfies ChannelListener;\n\n    /**\n     * You may be wondering why we register these diagnostics-channel listeners\n     * in such a convoluted way (as InstrumentationNodeModuleDefinition...)˝,\n     * instead of simply subscribing to the events once in here.\n     * The reason for this is timing semantics: These functions are called once the http or https module is loaded.\n     * If we'd subscribe before that, there seem to be conflicts with the OTEL native instrumentation in some scenarios,\n     * especially the \"import-on-top\" pattern of setting up ESM applications.\n     */\n    return [\n      new InstrumentationNodeModuleDefinition(\n        'http',\n        ['*'],\n        (moduleExports: Http): Http => {\n          if (hasRegisteredHandlers) {\n            return moduleExports;\n          }\n\n          hasRegisteredHandlers = true;\n\n          subscribe('http.server.request.start', onHttpServerRequestStart);\n          subscribe('http.client.response.finish', onHttpClientResponseFinish);\n\n          // When an error happens, we still want to have a breadcrumb\n          // In this case, `http.client.response.finish` is not triggered\n          subscribe('http.client.request.error', onHttpClientRequestError);\n\n          // NOTE: This channel only exist since Node 23\n          // Before that, outgoing requests are not patched\n          // and trace headers are not propagated, sadly.\n          if (this.getConfig().propagateTraceInOutgoingRequests) {\n            subscribe('http.client.request.created', onHttpClientRequestCreated);\n          }\n\n          return moduleExports;\n        },\n        () => {\n          unsubscribe('http.server.request.start', onHttpServerRequestStart);\n          unsubscribe('http.client.response.finish', onHttpClientResponseFinish);\n          unsubscribe('http.client.request.error', onHttpClientRequestError);\n          unsubscribe('http.client.request.created', onHttpClientRequestCreated);\n        },\n      ),\n      new InstrumentationNodeModuleDefinition(\n        'https',\n        ['*'],\n        (moduleExports: Https): Https => {\n          if (hasRegisteredHandlers) {\n            return moduleExports;\n          }\n\n          hasRegisteredHandlers = true;\n\n          subscribe('http.server.request.start', onHttpServerRequestStart);\n          subscribe('http.client.response.finish', onHttpClientResponseFinish);\n\n          // When an error happens, we still want to have a breadcrumb\n          // In this case, `http.client.response.finish` is not triggered\n          subscribe('http.client.request.error', onHttpClientRequestError);\n\n          return moduleExports;\n        },\n        () => {\n          unsubscribe('http.server.request.start', onHttpServerRequestStart);\n          unsubscribe('http.client.response.finish', onHttpClientResponseFinish);\n          unsubscribe('http.client.request.error', onHttpClientRequestError);\n        },\n      ),\n    ];\n  }\n\n  /**\n   * This is triggered when an outgoing request finishes.\n   * It has access to the final request and response objects.\n   */\n  private _onOutgoingRequestFinish(request: http.ClientRequest, response?: http.IncomingMessage): void {\n    DEBUG_BUILD && logger.log(INSTRUMENTATION_NAME, 'Handling finished outgoing request');\n\n    const _breadcrumbs = this.getConfig().breadcrumbs;\n    const breadCrumbsEnabled = typeof _breadcrumbs === 'undefined' ? true : _breadcrumbs;\n    const options = getRequestOptions(request);\n\n    const _ignoreOutgoingRequests = this.getConfig().ignoreOutgoingRequests;\n    const shouldCreateBreadcrumb =\n      typeof _ignoreOutgoingRequests === 'function' ? !_ignoreOutgoingRequests(getRequestUrl(request), options) : true;\n\n    if (breadCrumbsEnabled && shouldCreateBreadcrumb) {\n      addRequestBreadcrumb(request, response);\n    }\n  }\n\n  /**\n   * This is triggered when an outgoing request is created.\n   * It has access to the request object, and can mutate it before the request is sent.\n   */\n  private _onOutgoingRequestCreated(request: http.ClientRequest): void {\n    const url = getRequestUrl(request);\n    const ignoreOutgoingRequests = this.getConfig().ignoreOutgoingRequests;\n    const shouldPropagate =\n      typeof ignoreOutgoingRequests === 'function' ? !ignoreOutgoingRequests(url, getRequestOptions(request)) : true;\n\n    if (!shouldPropagate) {\n      return;\n    }\n\n    // Manually add the trace headers, if it applies\n    // Note: We do not use `propagation.inject()` here, because our propagator relies on an active span\n    // Which we do not have in this case\n    const tracePropagationTargets = getClient()?.getOptions().tracePropagationTargets;\n    const addedHeaders = shouldPropagateTraceForUrl(url, tracePropagationTargets, this._propagationDecisionMap)\n      ? getTraceData()\n      : undefined;\n\n    if (!addedHeaders) {\n      return;\n    }\n\n    const { 'sentry-trace': sentryTrace, baggage } = addedHeaders;\n\n    // We do not want to overwrite existing header here, if it was already set\n    if (sentryTrace && !request.getHeader('sentry-trace')) {\n      request.setHeader('sentry-trace', sentryTrace);\n      logger.log(INSTRUMENTATION_NAME, 'Added sentry-trace header to outgoing request');\n    }\n\n    if (baggage) {\n      // For baggage, we make sure to merge this into a possibly existing header\n      const newBaggage = mergeBaggageHeaders(request.getHeader('baggage'), baggage);\n      if (newBaggage) {\n        request.setHeader('baggage', newBaggage);\n      }\n    }\n  }\n\n  /**\n   * Patch a server.emit function to handle process isolation for incoming requests.\n   * This will only patch the emit function if it was not already patched.\n   */\n  private _patchServerEmitOnce(server: http.Server): void {\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    const originalEmit = server.emit;\n\n    // This means it was already patched, do nothing\n    if ((originalEmit as { __sentry_patched__?: boolean }).__sentry_patched__) {\n      return;\n    }\n\n    DEBUG_BUILD && logger.log(INSTRUMENTATION_NAME, 'Patching server.emit');\n\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const instrumentation = this;\n    const { ignoreIncomingRequestBody } = instrumentation.getConfig();\n\n    const newEmit = new Proxy(originalEmit, {\n      apply(target, thisArg, args: [event: string, ...args: unknown[]]) {\n        // Only traces request events\n        if (args[0] !== 'request') {\n          return target.apply(thisArg, args);\n        }\n\n        DEBUG_BUILD && logger.log(INSTRUMENTATION_NAME, 'Handling incoming request');\n\n        const isolationScope = getIsolationScope().clone();\n        const request = args[1] as http.IncomingMessage;\n        const response = args[2] as http.OutgoingMessage;\n\n        const normalizedRequest = httpRequestToRequestData(request);\n\n        // request.ip is non-standard but some frameworks set this\n        const ipAddress = (request as { ip?: string }).ip || request.socket?.remoteAddress;\n\n        const url = request.url || '/';\n        if (!ignoreIncomingRequestBody?.(url, request)) {\n          patchRequestToCaptureBody(request, isolationScope);\n        }\n\n        // Update the isolation scope, isolate this request\n        isolationScope.setSDKProcessingMetadata({ normalizedRequest, ipAddress });\n\n        // attempt to update the scope's `transactionName` based on the request URL\n        // Ideally, framework instrumentations coming after the HttpInstrumentation\n        // update the transactionName once we get a parameterized route.\n        const httpMethod = (request.method || 'GET').toUpperCase();\n        const httpTarget = stripUrlQueryAndFragment(url);\n\n        const bestEffortTransactionName = `${httpMethod} ${httpTarget}`;\n\n        isolationScope.setTransactionName(bestEffortTransactionName);\n\n        if (instrumentation.getConfig().trackIncomingRequestsAsSessions !== false) {\n          recordRequestSession({\n            requestIsolationScope: isolationScope,\n            response,\n            sessionFlushingDelayMS: instrumentation.getConfig().sessionFlushingDelayMS ?? 60_000,\n          });\n        }\n\n        return withIsolationScope(isolationScope, () => {\n          // Set a new propagationSpanId for this request\n          // We rely on the fact that `withIsolationScope()` will implicitly also fork the current scope\n          // This way we can save an \"unnecessary\" `withScope()` invocation\n          getCurrentScope().getPropagationContext().propagationSpanId = generateSpanId();\n\n          // If we don't want to extract the trace from the header, we can skip this\n          if (!instrumentation.getConfig().extractIncomingTraceFromHeader) {\n            return target.apply(thisArg, args);\n          }\n\n          const ctx = propagation.extract(context.active(), normalizedRequest.headers);\n          return context.with(ctx, () => {\n            return target.apply(thisArg, args);\n          });\n        });\n      },\n    });\n\n    addNonEnumerableProperty(newEmit, '__sentry_patched__', true);\n\n    server.emit = newEmit;\n  }\n}\n\n/** Add a breadcrumb for outgoing requests. */\nfunction addRequestBreadcrumb(request: http.ClientRequest, response: http.IncomingMessage | undefined): void {\n  const data = getBreadcrumbData(request);\n\n  const statusCode = response?.statusCode;\n  const level = getBreadcrumbLogLevelFromHttpStatusCode(statusCode);\n\n  addBreadcrumb(\n    {\n      category: 'http',\n      data: {\n        status_code: statusCode,\n        ...data,\n      },\n      type: 'http',\n      level,\n    },\n    {\n      event: 'response',\n      request,\n      response,\n    },\n  );\n}\n\nfunction getBreadcrumbData(request: http.ClientRequest): Partial<SanitizedRequestData> {\n  try {\n    // `request.host` does not contain the port, but the host header does\n    const host = request.getHeader('host') || request.host;\n    const url = new URL(request.path, `${request.protocol}//${host}`);\n    const parsedUrl = parseUrl(url.toString());\n\n    const data: Partial<SanitizedRequestData> = {\n      url: getSanitizedUrlString(parsedUrl),\n      'http.method': request.method || 'GET',\n    };\n\n    if (parsedUrl.search) {\n      data['http.query'] = parsedUrl.search;\n    }\n    if (parsedUrl.hash) {\n      data['http.fragment'] = parsedUrl.hash;\n    }\n\n    return data;\n  } catch {\n    return {};\n  }\n}\n\n/**\n * This method patches the request object to capture the body.\n * Instead of actually consuming the streamed body ourselves, which has potential side effects,\n * we monkey patch `req.on('data')` to intercept the body chunks.\n * This way, we only read the body if the user also consumes the body, ensuring we do not change any behavior in unexpected ways.\n */\nfunction patchRequestToCaptureBody(req: http.IncomingMessage, isolationScope: Scope): void {\n  let bodyByteLength = 0;\n  const chunks: Buffer[] = [];\n\n  DEBUG_BUILD && logger.log(INSTRUMENTATION_NAME, 'Patching request.on');\n\n  /**\n   * We need to keep track of the original callbacks, in order to be able to remove listeners again.\n   * Since `off` depends on having the exact same function reference passed in, we need to be able to map\n   * original listeners to our wrapped ones.\n   */\n  const callbackMap = new WeakMap();\n\n  try {\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    req.on = new Proxy(req.on, {\n      apply: (target, thisArg, args: Parameters<typeof req.on>) => {\n        const [event, listener, ...restArgs] = args;\n\n        if (event === 'data') {\n          DEBUG_BUILD && logger.log(INSTRUMENTATION_NAME, 'Handling request.on(\"data\")');\n          const callback = new Proxy(listener, {\n            apply: (target, thisArg, args: Parameters<typeof listener>) => {\n              try {\n                const chunk = args[0] as Buffer | string;\n                const bufferifiedChunk = Buffer.from(chunk);\n\n                if (bodyByteLength < MAX_BODY_BYTE_LENGTH) {\n                  chunks.push(bufferifiedChunk);\n                  bodyByteLength += bufferifiedChunk.byteLength;\n                } else if (DEBUG_BUILD) {\n                  logger.log(\n                    INSTRUMENTATION_NAME,\n                    `Dropping request body chunk because maximum body length of ${MAX_BODY_BYTE_LENGTH}b is exceeded.`,\n                  );\n                }\n              } catch (err) {\n                DEBUG_BUILD && logger.error(INSTRUMENTATION_NAME, 'Encountered error while storing body chunk.');\n              }\n\n              return Reflect.apply(target, thisArg, args);\n            },\n          });\n\n          callbackMap.set(listener, callback);\n\n          return Reflect.apply(target, thisArg, [event, callback, ...restArgs]);\n        }\n\n        return Reflect.apply(target, thisArg, args);\n      },\n    });\n\n    // Ensure we also remove callbacks correctly\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    req.off = new Proxy(req.off, {\n      apply: (target, thisArg, args: Parameters<typeof req.off>) => {\n        const [, listener] = args;\n\n        const callback = callbackMap.get(listener);\n        if (callback) {\n          callbackMap.delete(listener);\n\n          const modifiedArgs = args.slice();\n          modifiedArgs[1] = callback;\n          return Reflect.apply(target, thisArg, modifiedArgs);\n        }\n\n        return Reflect.apply(target, thisArg, args);\n      },\n    });\n\n    req.on('end', () => {\n      try {\n        const body = Buffer.concat(chunks).toString('utf-8');\n        if (body) {\n          isolationScope.setSDKProcessingMetadata({ normalizedRequest: { data: body } });\n        }\n      } catch (error) {\n        if (DEBUG_BUILD) {\n          logger.error(INSTRUMENTATION_NAME, 'Error building captured request body', error);\n        }\n      }\n    });\n  } catch (error) {\n    if (DEBUG_BUILD) {\n      logger.error(INSTRUMENTATION_NAME, 'Error patching request to capture body', error);\n    }\n  }\n}\n\nfunction getRequestOptions(request: http.ClientRequest): http.RequestOptions {\n  return {\n    method: request.method,\n    protocol: request.protocol,\n    host: request.host,\n    hostname: request.host,\n    path: request.path,\n    headers: request.getHeaders(),\n  };\n}\n\n/**\n * Starts a session and tracks it in the context of a given isolation scope.\n * When the passed response is finished, the session is put into a task and is\n * aggregated with other sessions that may happen in a certain time window\n * (sessionFlushingDelayMs).\n *\n * The sessions are always aggregated by the client that is on the current scope\n * at the time of ending the response (if there is one).\n */\n// Exported for unit tests\nexport function recordRequestSession({\n  requestIsolationScope,\n  response,\n  sessionFlushingDelayMS,\n}: {\n  requestIsolationScope: Scope;\n  response: EventEmitter;\n  sessionFlushingDelayMS?: number;\n}): void {\n  requestIsolationScope.setSDKProcessingMetadata({\n    requestSession: { status: 'ok' },\n  });\n  response.once('close', () => {\n    // We need to grab the client off the current scope instead of the isolation scope because the isolation scope doesn't hold any client out of the box.\n    const client = getClient();\n    const requestSession = requestIsolationScope.getScopeData().sdkProcessingMetadata.requestSession;\n\n    if (client && requestSession) {\n      DEBUG_BUILD && logger.debug(`Recorded request session with status: ${requestSession.status}`);\n\n      const roundedDate = new Date();\n      roundedDate.setSeconds(0, 0);\n      const dateBucketKey = roundedDate.toISOString();\n\n      const existingClientAggregate = clientToRequestSessionAggregatesMap.get(client);\n      const bucket = existingClientAggregate?.[dateBucketKey] || { exited: 0, crashed: 0, errored: 0 };\n      bucket[({ ok: 'exited', crashed: 'crashed', errored: 'errored' } as const)[requestSession.status]]++;\n\n      if (existingClientAggregate) {\n        existingClientAggregate[dateBucketKey] = bucket;\n      } else {\n        DEBUG_BUILD && logger.debug('Opened new request session aggregate.');\n        const newClientAggregate = { [dateBucketKey]: bucket };\n        clientToRequestSessionAggregatesMap.set(client, newClientAggregate);\n\n        const flushPendingClientAggregates = (): void => {\n          clearTimeout(timeout);\n          unregisterClientFlushHook();\n          clientToRequestSessionAggregatesMap.delete(client);\n\n          const aggregatePayload: AggregationCounts[] = Object.entries(newClientAggregate).map(\n            ([timestamp, value]) => ({\n              started: timestamp,\n              exited: value.exited,\n              errored: value.errored,\n              crashed: value.crashed,\n            }),\n          );\n          client.sendSession({ aggregates: aggregatePayload });\n        };\n\n        const unregisterClientFlushHook = client.on('flush', () => {\n          DEBUG_BUILD && logger.debug('Sending request session aggregate due to client flush');\n          flushPendingClientAggregates();\n        });\n        const timeout = setTimeout(() => {\n          DEBUG_BUILD && logger.debug('Sending request session aggregate due to flushing schedule');\n          flushPendingClientAggregates();\n        }, sessionFlushingDelayMS).unref();\n      }\n    }\n  });\n}\n\nconst clientToRequestSessionAggregatesMap = new Map<\n  Client,\n  { [timestampRoundedToSeconds: string]: { exited: number; crashed: number; errored: number } }\n>();\n", "import type { ClientRequest, IncomingMessage, RequestOptions, ServerResponse } from 'node:http';\nimport { diag } from '@opentelemetry/api';\nimport type { HttpInstrumentationConfig } from '@opentelemetry/instrumentation-http';\nimport { HttpInstrumentation } from '@opentelemetry/instrumentation-http';\nimport type { Span } from '@sentry/core';\nimport { defineIntegration, getClient } from '@sentry/core';\nimport { generateInstrumentOnce } from '../../otel/instrument';\nimport type { NodeClient } from '../../sdk/client';\nimport type { HTTPModuleRequestIncomingMessage } from '../../transports/http-module';\nimport type { NodeClientOptions } from '../../types';\nimport { addOriginToSpan } from '../../utils/addOriginToSpan';\nimport { getRequestUrl } from '../../utils/getRequestUrl';\nimport type { SentryHttpInstrumentationOptions } from './SentryHttpInstrumentation';\nimport { SentryHttpInstrumentation } from './SentryHttpInstrumentation';\n\nconst INTEGRATION_NAME = 'Http';\n\nconst INSTRUMENTATION_NAME = '@opentelemetry_sentry-patched/instrumentation-http';\n\ninterface HttpOptions {\n  /**\n   * Whether breadcrumbs should be recorded for outgoing requests.\n   * Defaults to true\n   */\n  breadcrumbs?: boolean;\n\n  /**\n   * If set to false, do not emit any spans.\n   * This will ensure that the default HttpInstrumentation from OpenTelemetry is not setup,\n   * only the Sentry-specific instrumentation for request isolation is applied.\n   *\n   * If `skipOpenTelemetrySetup: true` is configured, this defaults to `false`, otherwise it defaults to `true`.\n   */\n  spans?: boolean;\n\n  /**\n   * Whether the integration should create [Sessions](https://docs.sentry.io/product/releases/health/#sessions) for incoming requests to track the health and crash-free rate of your releases in Sentry.\n   * Read more about Release Health: https://docs.sentry.io/product/releases/health/\n   *\n   * Defaults to `true`.\n   */\n  trackIncomingRequestsAsSessions?: boolean;\n\n  /**\n   * Number of milliseconds until sessions tracked with `trackIncomingRequestsAsSessions` will be flushed as a session aggregate.\n   *\n   * Defaults to `60000` (60s).\n   */\n  sessionFlushingDelayMS?: number;\n\n  /**\n   * Do not capture spans or breadcrumbs for outgoing HTTP requests to URLs where the given callback returns `true`.\n   * This controls both span & breadcrumb creation - spans will be non recording if tracing is disabled.\n   *\n   * The `url` param contains the entire URL, including query string (if any), protocol, host, etc. of the outgoing request.\n   * For example: `'https://someService.com/users/details?id=123'`\n   *\n   * The `request` param contains the original {@type RequestOptions} object used to make the outgoing request.\n   * You can use it to filter on additional properties like method, headers, etc.\n   */\n  ignoreOutgoingRequests?: (url: string, request: RequestOptions) => boolean;\n\n  /**\n   * Do not capture spans for incoming HTTP requests to URLs where the given callback returns `true`.\n   * Spans will be non recording if tracing is disabled.\n   *\n   * The `urlPath` param consists of the URL path and query string (if any) of the incoming request.\n   * For example: `'/users/details?id=123'`\n   *\n   * The `request` param contains the original {@type IncomingMessage} object of the incoming request.\n   * You can use it to filter on additional properties like method, headers, etc.\n   */\n  ignoreIncomingRequests?: (urlPath: string, request: IncomingMessage) => boolean;\n\n  /**\n   * Do not capture spans for incoming HTTP requests with the given status codes.\n   * By default, spans with 404 status code are ignored.\n   * Expects an array of status codes or a range of status codes, e.g. [[300,399], 404] would ignore 3xx and 404 status codes.\n   *\n   * @default `[404]`\n   */\n  dropSpansForIncomingRequestStatusCodes?: (number | [number, number])[];\n\n  /**\n   * Do not capture the request body for incoming HTTP requests to URLs where the given callback returns `true`.\n   * This can be useful for long running requests where the body is not needed and we want to avoid capturing it.\n   *\n   * @param url Contains the entire URL, including query string (if any), protocol, host, etc. of the outgoing request.\n   * @param request Contains the {@type RequestOptions} object used to make the outgoing request.\n   */\n  ignoreIncomingRequestBody?: (url: string, request: RequestOptions) => boolean;\n\n  /**\n   * If true, do not generate spans for incoming requests at all.\n   * This is used by Remix to avoid generating spans for incoming requests, as it generates its own spans.\n   */\n  disableIncomingRequestSpans?: boolean;\n\n  /**\n   * Additional instrumentation options that are passed to the underlying HttpInstrumentation.\n   */\n  instrumentation?: {\n    requestHook?: (span: Span, req: ClientRequest | HTTPModuleRequestIncomingMessage) => void;\n    responseHook?: (span: Span, response: HTTPModuleRequestIncomingMessage | ServerResponse) => void;\n    applyCustomAttributesOnSpan?: (\n      span: Span,\n      request: ClientRequest | HTTPModuleRequestIncomingMessage,\n      response: HTTPModuleRequestIncomingMessage | ServerResponse,\n    ) => void;\n\n    /**\n     * You can pass any configuration through to the underlying instrumentation.\n     * Note that there are no semver guarantees for this!\n     */\n    _experimentalConfig?: ConstructorParameters<typeof HttpInstrumentation>[0];\n  };\n}\n\nconst instrumentSentryHttp = generateInstrumentOnce<SentryHttpInstrumentationOptions>(\n  `${INTEGRATION_NAME}.sentry`,\n  options => {\n    return new SentryHttpInstrumentation(options);\n  },\n);\n\nexport const instrumentOtelHttp = generateInstrumentOnce<HttpInstrumentationConfig>(INTEGRATION_NAME, config => {\n  const instrumentation = new HttpInstrumentation(config);\n\n  // We want to update the logger namespace so we can better identify what is happening here\n  try {\n    instrumentation['_diag'] = diag.createComponentLogger({\n      namespace: INSTRUMENTATION_NAME,\n    });\n    // @ts-expect-error We are writing a read-only property here...\n    instrumentation.instrumentationName = INSTRUMENTATION_NAME;\n  } catch {\n    // ignore errors here...\n  }\n\n  return instrumentation;\n});\n\n/** Exported only for tests. */\nexport function _shouldInstrumentSpans(options: HttpOptions, clientOptions: Partial<NodeClientOptions> = {}): boolean {\n  // If `spans` is passed in, it takes precedence\n  // Else, we by default emit spans, unless `skipOpenTelemetrySetup` is set to `true`\n  return typeof options.spans === 'boolean' ? options.spans : !clientOptions.skipOpenTelemetrySetup;\n}\n\n/**\n * The http integration instruments Node's internal http and https modules.\n * It creates breadcrumbs and spans for outgoing HTTP requests which will be attached to the currently active span.\n */\nexport const httpIntegration = defineIntegration((options: HttpOptions = {}) => {\n  const dropSpansForIncomingRequestStatusCodes = options.dropSpansForIncomingRequestStatusCodes ?? [404];\n\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      const instrumentSpans = _shouldInstrumentSpans(options, getClient<NodeClient>()?.getOptions());\n\n      // This is Sentry-specific instrumentation for request isolation and breadcrumbs\n      instrumentSentryHttp({\n        ...options,\n        // If spans are not instrumented, it means the HttpInstrumentation has not been added\n        // In that case, we want to handle incoming trace extraction ourselves\n        extractIncomingTraceFromHeader: !instrumentSpans,\n        // If spans are not instrumented, it means the HttpInstrumentation has not been added\n        // In that case, we want to handle trace propagation ourselves\n        propagateTraceInOutgoingRequests: !instrumentSpans,\n      });\n\n      // This is the \"regular\" OTEL instrumentation that emits spans\n      if (instrumentSpans) {\n        const instrumentationConfig = getConfigWithDefaults(options);\n        instrumentOtelHttp(instrumentationConfig);\n      }\n    },\n    processEvent(event) {\n      // Drop transaction if it has a status code that should be ignored\n      if (event.type === 'transaction') {\n        const statusCode = event.contexts?.trace?.data?.['http.response.status_code'];\n        if (\n          typeof statusCode === 'number' &&\n          dropSpansForIncomingRequestStatusCodes.some(code => {\n            if (typeof code === 'number') {\n              return code === statusCode;\n            }\n\n            const [min, max] = code;\n            return statusCode >= min && statusCode <= max;\n          })\n        ) {\n          return null;\n        }\n      }\n\n      return event;\n    },\n  };\n});\n\n/**\n * Determines if @param req is a ClientRequest, meaning the request was created within the express app\n * and it's an outgoing request.\n * Checking for properties instead of using `instanceOf` to avoid importing the request classes.\n */\nfunction _isClientRequest(req: ClientRequest | HTTPModuleRequestIncomingMessage): req is ClientRequest {\n  return 'outputData' in req && 'outputSize' in req && !('client' in req) && !('statusCode' in req);\n}\n\n/**\n * Detects if an incoming request is a prefetch request.\n */\nfunction isKnownPrefetchRequest(req: HTTPModuleRequestIncomingMessage): boolean {\n  // Currently only handles Next.js prefetch requests but may check other frameworks in the future.\n  return req.headers['next-router-prefetch'] === '1';\n}\n\nfunction getConfigWithDefaults(options: Partial<HttpOptions> = {}): HttpInstrumentationConfig {\n  const instrumentationConfig = {\n    ...options.instrumentation?._experimentalConfig,\n\n    disableIncomingRequestInstrumentation: options.disableIncomingRequestSpans,\n\n    ignoreOutgoingRequestHook: request => {\n      const url = getRequestUrl(request);\n\n      if (!url) {\n        return false;\n      }\n\n      const _ignoreOutgoingRequests = options.ignoreOutgoingRequests;\n      if (_ignoreOutgoingRequests?.(url, request)) {\n        return true;\n      }\n\n      return false;\n    },\n\n    ignoreIncomingRequestHook: request => {\n      // request.url is the only property that holds any information about the url\n      // it only consists of the URL path and query string (if any)\n      const urlPath = request.url;\n\n      const method = request.method?.toUpperCase();\n      // We do not capture OPTIONS/HEAD requests as transactions\n      if (method === 'OPTIONS' || method === 'HEAD') {\n        return true;\n      }\n\n      const _ignoreIncomingRequests = options.ignoreIncomingRequests;\n      if (urlPath && _ignoreIncomingRequests?.(urlPath, request)) {\n        return true;\n      }\n\n      return false;\n    },\n\n    requireParentforOutgoingSpans: false,\n    requireParentforIncomingSpans: false,\n    requestHook: (span, req) => {\n      addOriginToSpan(span, 'auto.http.otel.http');\n      if (!_isClientRequest(req) && isKnownPrefetchRequest(req)) {\n        span.setAttribute('sentry.http.prefetch', true);\n      }\n\n      options.instrumentation?.requestHook?.(span, req);\n    },\n    responseHook: (span, res) => {\n      options.instrumentation?.responseHook?.(span, res);\n    },\n    applyCustomAttributesOnSpan: (\n      span: Span,\n      request: ClientRequest | HTTPModuleRequestIncomingMessage,\n      response: HTTPModuleRequestIncomingMessage | ServerResponse,\n    ) => {\n      options.instrumentation?.applyCustomAttributesOnSpan?.(span, request, response);\n    },\n  } satisfies HttpInstrumentationConfig;\n\n  return instrumentationConfig;\n}\n", "import { parseSemver } from '@sentry/core';\n\nexport const NODE_VERSION = parseSemver(process.versions.node) as { major: number; minor: number; patch: number };\nexport const NODE_MAJOR = NODE_VERSION.major;\nexport const NODE_MINOR = NODE_VERSION.minor;\n", "import { VERSION } from '@opentelemetry/core';\nimport type { InstrumentationConfig } from '@opentelemetry/instrumentation';\nimport { InstrumentationBase } from '@opentelemetry/instrumentation';\nimport type { SanitizedRequestData } from '@sentry/core';\nimport {\n  addBreadcrumb,\n  getBreadcrumbLogLevelFromHttpStatusCode,\n  getClient,\n  getSanitizedUrlString,\n  getTraceData,\n  LRUMap,\n  parseUrl,\n} from '@sentry/core';\nimport { shouldPropagateTraceForUrl } from '@sentry/opentelemetry';\nimport * as diagch from 'diagnostics_channel';\nimport { NODE_MAJOR, NODE_MINOR } from '../../nodeVersion';\nimport { mergeBaggageHeaders } from '../../utils/baggage';\nimport type { UndiciRequest, UndiciResponse } from './types';\n\nconst SENTRY_TRACE_HEADER = 'sentry-trace';\nconst SENTRY_BAGGAGE_HEADER = 'baggage';\n\n// For baggage, we make sure to merge this into a possibly existing header\nconst BAGGAGE_HEADER_REGEX = /baggage: (.*)\\r\\n/;\n\nexport type SentryNodeFetchInstrumentationOptions = InstrumentationConfig & {\n  /**\n   * Whether breadcrumbs should be recorded for requests.\n   *\n   * @default `true`\n   */\n  breadcrumbs?: boolean;\n\n  /**\n   * Do not capture breadcrumbs or inject headers for outgoing fetch requests to URLs where the given callback returns `true`.\n   * The same option can be passed to the top-level httpIntegration where it controls both, breadcrumb and\n   * span creation.\n   *\n   * @param url Contains the entire URL, including query string (if any), protocol, host, etc. of the outgoing request.\n   */\n  ignoreOutgoingRequests?: (url: string) => boolean;\n};\n\ninterface ListenerRecord {\n  name: string;\n  unsubscribe: () => void;\n}\n\n/**\n * This custom node-fetch instrumentation is used to instrument outgoing fetch requests.\n * It does not emit any spans.\n *\n * The reason this is isolated from the OpenTelemetry instrumentation is that users may overwrite this,\n * which would lead to Sentry not working as expected.\n *\n * This is heavily inspired & adapted from:\n * https://github.com/open-telemetry/opentelemetry-js-contrib/blob/28e209a9da36bc4e1f8c2b0db7360170ed46cb80/plugins/node/instrumentation-undici/src/undici.ts\n */\nexport class SentryNodeFetchInstrumentation extends InstrumentationBase<SentryNodeFetchInstrumentationOptions> {\n  // Keep ref to avoid https://github.com/nodejs/node/issues/42170 bug and for\n  // unsubscribing.\n  private _channelSubs: Array<ListenerRecord>;\n  private _propagationDecisionMap: LRUMap<string, boolean>;\n\n  public constructor(config: SentryNodeFetchInstrumentationOptions = {}) {\n    super('@sentry/instrumentation-node-fetch', VERSION, config);\n    this._channelSubs = [];\n    this._propagationDecisionMap = new LRUMap<string, boolean>(100);\n  }\n\n  /** No need to instrument files/modules. */\n  public init(): void {\n    return undefined;\n  }\n\n  /** Disable the instrumentation. */\n  public disable(): void {\n    super.disable();\n    this._channelSubs.forEach(sub => sub.unsubscribe());\n    this._channelSubs = [];\n  }\n\n  /** Enable the instrumentation. */\n  public enable(): void {\n    // \"enabled\" handling is currently a bit messy with InstrumentationBase.\n    // If constructed with `{enabled: false}`, this `.enable()` is still called,\n    // and `this.getConfig().enabled !== this.isEnabled()`, creating confusion.\n    //\n    // For now, this class will setup for instrumenting if `.enable()` is\n    // called, but use `this.getConfig().enabled` to determine if\n    // instrumentation should be generated. This covers the more likely common\n    // case of config being given a construction time, rather than later via\n    // `instance.enable()`, `.disable()`, or `.setConfig()` calls.\n    super.enable();\n\n    // This method is called by the super-class constructor before ours is\n    // called. So we need to ensure the property is initalized.\n    this._channelSubs = this._channelSubs || [];\n\n    // Avoid to duplicate subscriptions\n    if (this._channelSubs.length > 0) {\n      return;\n    }\n\n    this._subscribeToChannel('undici:request:create', this._onRequestCreated.bind(this));\n    this._subscribeToChannel('undici:request:headers', this._onResponseHeaders.bind(this));\n  }\n\n  /**\n   * This method is called when a request is created.\n   * You can still mutate the request here before it is sent.\n   */\n  private _onRequestCreated({ request }: { request: UndiciRequest }): void {\n    const config = this.getConfig();\n    const enabled = config.enabled !== false;\n\n    if (!enabled) {\n      return;\n    }\n\n    // Add trace propagation headers\n    const url = getAbsoluteUrl(request.origin, request.path);\n    const _ignoreOutgoingRequests = config.ignoreOutgoingRequests;\n    const shouldIgnore = _ignoreOutgoingRequests && url && _ignoreOutgoingRequests(url);\n\n    if (shouldIgnore) {\n      return;\n    }\n\n    // Manually add the trace headers, if it applies\n    // Note: We do not use `propagation.inject()` here, because our propagator relies on an active span\n    // Which we do not have in this case\n    // The propagator _may_ overwrite this, but this should be fine as it is the same data\n    const tracePropagationTargets = getClient()?.getOptions().tracePropagationTargets;\n    const addedHeaders = shouldPropagateTraceForUrl(url, tracePropagationTargets, this._propagationDecisionMap)\n      ? getTraceData()\n      : undefined;\n\n    if (!addedHeaders) {\n      return;\n    }\n\n    const { 'sentry-trace': sentryTrace, baggage } = addedHeaders;\n\n    // We do not want to overwrite existing headers here\n    // If the core UndiciInstrumentation is registered, it will already have set the headers\n    // We do not want to add any then\n    if (Array.isArray(request.headers)) {\n      const requestHeaders = request.headers;\n\n      // We do not want to overwrite existing header here, if it was already set\n      if (sentryTrace && !requestHeaders.includes(SENTRY_TRACE_HEADER)) {\n        requestHeaders.push(SENTRY_TRACE_HEADER, sentryTrace);\n      }\n\n      // For baggage, we make sure to merge this into a possibly existing header\n      const existingBaggagePos = requestHeaders.findIndex(header => header === SENTRY_BAGGAGE_HEADER);\n      if (baggage && existingBaggagePos === -1) {\n        requestHeaders.push(SENTRY_BAGGAGE_HEADER, baggage);\n      } else if (baggage) {\n        const existingBaggage = requestHeaders[existingBaggagePos + 1];\n        const merged = mergeBaggageHeaders(existingBaggage, baggage);\n        if (merged) {\n          requestHeaders[existingBaggagePos + 1] = merged;\n        }\n      }\n    } else {\n      const requestHeaders = request.headers;\n      // We do not want to overwrite existing header here, if it was already set\n      if (sentryTrace && !requestHeaders.includes(`${SENTRY_TRACE_HEADER}:`)) {\n        request.headers += `${SENTRY_TRACE_HEADER}: ${sentryTrace}\\r\\n`;\n      }\n\n      const existingBaggage = request.headers.match(BAGGAGE_HEADER_REGEX)?.[1];\n      if (baggage && !existingBaggage) {\n        request.headers += `${SENTRY_BAGGAGE_HEADER}: ${baggage}\\r\\n`;\n      } else if (baggage) {\n        const merged = mergeBaggageHeaders(existingBaggage, baggage);\n        if (merged) {\n          request.headers = request.headers.replace(BAGGAGE_HEADER_REGEX, `baggage: ${merged}\\r\\n`);\n        }\n      }\n    }\n  }\n\n  /**\n   * This method is called when a response is received.\n   */\n  private _onResponseHeaders({ request, response }: { request: UndiciRequest; response: UndiciResponse }): void {\n    const config = this.getConfig();\n    const enabled = config.enabled !== false;\n\n    if (!enabled) {\n      return;\n    }\n\n    const _breadcrumbs = config.breadcrumbs;\n    const breadCrumbsEnabled = typeof _breadcrumbs === 'undefined' ? true : _breadcrumbs;\n\n    const _ignoreOutgoingRequests = config.ignoreOutgoingRequests;\n    const shouldCreateBreadcrumb =\n      typeof _ignoreOutgoingRequests === 'function'\n        ? !_ignoreOutgoingRequests(getAbsoluteUrl(request.origin, request.path))\n        : true;\n\n    if (breadCrumbsEnabled && shouldCreateBreadcrumb) {\n      addRequestBreadcrumb(request, response);\n    }\n  }\n\n  /** Subscribe to a diagnostics channel. */\n  private _subscribeToChannel(\n    diagnosticChannel: string,\n    onMessage: (message: unknown, name: string | symbol) => void,\n  ): void {\n    // `diagnostics_channel` had a ref counting bug until v18.19.0.\n    // https://github.com/nodejs/node/pull/47520\n    const useNewSubscribe = NODE_MAJOR > 18 || (NODE_MAJOR === 18 && NODE_MINOR >= 19);\n\n    let unsubscribe: () => void;\n    if (useNewSubscribe) {\n      diagch.subscribe?.(diagnosticChannel, onMessage);\n      unsubscribe = () => diagch.unsubscribe?.(diagnosticChannel, onMessage);\n    } else {\n      const channel = diagch.channel(diagnosticChannel);\n      channel.subscribe(onMessage);\n      unsubscribe = () => channel.unsubscribe(onMessage);\n    }\n\n    this._channelSubs.push({\n      name: diagnosticChannel,\n      unsubscribe,\n    });\n  }\n}\n\n/** Add a breadcrumb for outgoing requests. */\nfunction addRequestBreadcrumb(request: UndiciRequest, response: UndiciResponse): void {\n  const data = getBreadcrumbData(request);\n\n  const statusCode = response.statusCode;\n  const level = getBreadcrumbLogLevelFromHttpStatusCode(statusCode);\n\n  addBreadcrumb(\n    {\n      category: 'http',\n      data: {\n        status_code: statusCode,\n        ...data,\n      },\n      type: 'http',\n      level,\n    },\n    {\n      event: 'response',\n      request,\n      response,\n    },\n  );\n}\n\nfunction getBreadcrumbData(request: UndiciRequest): Partial<SanitizedRequestData> {\n  try {\n    const url = getAbsoluteUrl(request.origin, request.path);\n    const parsedUrl = parseUrl(url);\n\n    const data: Partial<SanitizedRequestData> = {\n      url: getSanitizedUrlString(parsedUrl),\n      'http.method': request.method || 'GET',\n    };\n\n    if (parsedUrl.search) {\n      data['http.query'] = parsedUrl.search;\n    }\n    if (parsedUrl.hash) {\n      data['http.fragment'] = parsedUrl.hash;\n    }\n\n    return data;\n  } catch {\n    return {};\n  }\n}\n\nfunction getAbsoluteUrl(origin: string, path: string = '/'): string {\n  try {\n    const url = new URL(path, origin);\n    return url.toString();\n  } catch {\n    // fallback: Construct it on our own\n    const url = `${origin}`;\n\n    if (url.endsWith('/') && path.startsWith('/')) {\n      return `${url}${path.slice(1)}`;\n    }\n\n    if (!url.endsWith('/') && !path.startsWith('/')) {\n      return `${url}/${path.slice(1)}`;\n    }\n\n    return `${url}${path}`;\n  }\n}\n", "import type { UndiciInstrumentationConfig } from '@opentelemetry/instrumentation-undici';\nimport { UndiciInstrumentation } from '@opentelemetry/instrumentation-undici';\nimport type { IntegrationFn } from '@sentry/core';\nimport { defineIntegration, getClient, SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN } from '@sentry/core';\nimport { generateInstrumentOnce } from '../../otel/instrument';\nimport type { NodeClient } from '../../sdk/client';\nimport type { NodeClientOptions } from '../../types';\nimport { SentryNodeFetchInstrumentation } from './SentryNodeFetchInstrumentation';\n\nconst INTEGRATION_NAME = 'NodeFetch';\n\ninterface NodeFetchOptions {\n  /**\n   * Whether breadcrumbs should be recorded for requests.\n   * Defaults to true\n   */\n  breadcrumbs?: boolean;\n\n  /**\n   * If set to false, do not emit any spans.\n   * This will ensure that the default UndiciInstrumentation from OpenTelemetry is not setup,\n   * only the Sentry-specific instrumentation for breadcrumbs & trace propagation is applied.\n   *\n   * If `skipOpenTelemetrySetup: true` is configured, this defaults to `false`, otherwise it defaults to `true`.\n   */\n  spans?: boolean;\n\n  /**\n   * Do not capture spans or breadcrumbs for outgoing fetch requests to URLs where the given callback returns `true`.\n   * This controls both span & breadcrumb creation - spans will be non recording if tracing is disabled.\n   */\n  ignoreOutgoingRequests?: (url: string) => boolean;\n}\n\nconst instrumentOtelNodeFetch = generateInstrumentOnce(\n  INTEGRATION_NAME,\n  UndiciInstrumentation,\n  (options: NodeFetchOptions) => {\n    return getConfigWithDefaults(options);\n  },\n);\n\nconst instrumentSentryNodeFetch = generateInstrumentOnce(\n  `${INTEGRATION_NAME}.sentry`,\n  SentryNodeFetchInstrumentation,\n  (options: NodeFetchOptions) => {\n    return options;\n  },\n);\n\nconst _nativeNodeFetchIntegration = ((options: NodeFetchOptions = {}) => {\n  return {\n    name: 'NodeFetch',\n    setupOnce() {\n      const instrumentSpans = _shouldInstrumentSpans(options, getClient<NodeClient>()?.getOptions());\n\n      // This is the \"regular\" OTEL instrumentation that emits spans\n      if (instrumentSpans) {\n        instrumentOtelNodeFetch(options);\n      }\n\n      // This is the Sentry-specific instrumentation that creates breadcrumbs & propagates traces\n      // This must be registered after the OTEL one, to ensure that the core trace propagation logic takes presedence\n      // Otherwise, the sentry-trace header may be set multiple times\n      instrumentSentryNodeFetch(options);\n    },\n  };\n}) satisfies IntegrationFn;\n\nexport const nativeNodeFetchIntegration = defineIntegration(_nativeNodeFetchIntegration);\n\n// Matching the behavior of the base instrumentation\nfunction getAbsoluteUrl(origin: string, path: string = '/'): string {\n  const url = `${origin}`;\n\n  if (url.endsWith('/') && path.startsWith('/')) {\n    return `${url}${path.slice(1)}`;\n  }\n\n  if (!url.endsWith('/') && !path.startsWith('/')) {\n    return `${url}/${path.slice(1)}`;\n  }\n\n  return `${url}${path}`;\n}\n\nfunction _shouldInstrumentSpans(options: NodeFetchOptions, clientOptions: Partial<NodeClientOptions> = {}): boolean {\n  // If `spans` is passed in, it takes precedence\n  // Else, we by default emit spans, unless `skipOpenTelemetrySetup` is set to `true`\n  return typeof options.spans === 'boolean' ? options.spans : !clientOptions.skipOpenTelemetrySetup;\n}\n\nfunction getConfigWithDefaults(options: Partial<NodeFetchOptions> = {}): UndiciInstrumentationConfig {\n  const instrumentationConfig = {\n    requireParentforSpans: false,\n    ignoreRequestHook: request => {\n      const url = getAbsoluteUrl(request.origin, request.path);\n      const _ignoreOutgoingRequests = options.ignoreOutgoingRequests;\n      const shouldIgnore = _ignoreOutgoingRequests && url && _ignoreOutgoingRequests(url);\n\n      return !!shouldIgnore;\n    },\n    startSpanHook: () => {\n      return {\n        [SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.http.otel.node_fetch',\n      };\n    },\n  } satisfies UndiciInstrumentationConfig;\n\n  return instrumentationConfig;\n}\n", "/* eslint-disable max-lines */\n\nimport { execFile } from 'node:child_process';\nimport { readdir, readFile } from 'node:fs';\nimport * as os from 'node:os';\nimport { join } from 'node:path';\nimport { promisify } from 'node:util';\nimport type {\n  AppContext,\n  CloudResourceContext,\n  Contexts,\n  CultureContext,\n  DeviceContext,\n  Event,\n  IntegrationFn,\n  OsContext,\n} from '@sentry/core';\nimport { defineIntegration } from '@sentry/core';\n\nexport const readFileAsync = promisify(readFile);\nexport const readDirAsync = promisify(readdir);\n\n// Process enhanced with methods from Node 18, 20, 22 as @types/node\n// is on `14.18.0` to match minimum version requirements of the SDK\ninterface ProcessWithCurrentValues extends NodeJS.Process {\n  availableMemory?(): number;\n}\n\nconst INTEGRATION_NAME = 'Context';\n\ninterface DeviceContextOptions {\n  cpu?: boolean;\n  memory?: boolean;\n}\n\ninterface ContextOptions {\n  app?: boolean;\n  os?: boolean;\n  device?: DeviceContextOptions | boolean;\n  culture?: boolean;\n  cloudResource?: boolean;\n}\n\nconst _nodeContextIntegration = ((options: ContextOptions = {}) => {\n  let cachedContext: Promise<Contexts> | undefined;\n\n  const _options = {\n    app: true,\n    os: true,\n    device: true,\n    culture: true,\n    cloudResource: true,\n    ...options,\n  };\n\n  /** Add contexts to the event. Caches the context so we only look it up once. */\n  async function addContext(event: Event): Promise<Event> {\n    if (cachedContext === undefined) {\n      cachedContext = _getContexts();\n    }\n\n    const updatedContext = _updateContext(await cachedContext);\n\n    // TODO(v10): conditional with `sendDefaultPii` here?\n    event.contexts = {\n      ...event.contexts,\n      app: { ...updatedContext.app, ...event.contexts?.app },\n      os: { ...updatedContext.os, ...event.contexts?.os },\n      device: { ...updatedContext.device, ...event.contexts?.device },\n      culture: { ...updatedContext.culture, ...event.contexts?.culture },\n      cloud_resource: { ...updatedContext.cloud_resource, ...event.contexts?.cloud_resource },\n    };\n\n    return event;\n  }\n\n  /** Get the contexts from node. */\n  async function _getContexts(): Promise<Contexts> {\n    const contexts: Contexts = {};\n\n    if (_options.os) {\n      contexts.os = await getOsContext();\n    }\n\n    if (_options.app) {\n      contexts.app = getAppContext();\n    }\n\n    if (_options.device) {\n      contexts.device = getDeviceContext(_options.device);\n    }\n\n    if (_options.culture) {\n      const culture = getCultureContext();\n\n      if (culture) {\n        contexts.culture = culture;\n      }\n    }\n\n    if (_options.cloudResource) {\n      contexts.cloud_resource = getCloudResourceContext();\n    }\n\n    return contexts;\n  }\n\n  return {\n    name: INTEGRATION_NAME,\n    processEvent(event) {\n      return addContext(event);\n    },\n  };\n}) satisfies IntegrationFn;\n\n/**\n * Capture context about the environment and the device that the client is running on, to events.\n */\nexport const nodeContextIntegration = defineIntegration(_nodeContextIntegration);\n\n/**\n * Updates the context with dynamic values that can change\n */\nfunction _updateContext(contexts: Contexts): Contexts {\n  // Only update properties if they exist\n\n  if (contexts.app?.app_memory) {\n    contexts.app.app_memory = process.memoryUsage().rss;\n  }\n\n  if (contexts.app?.free_memory && typeof (process as ProcessWithCurrentValues).availableMemory === 'function') {\n    const freeMemory = (process as ProcessWithCurrentValues).availableMemory?.();\n    if (freeMemory != null) {\n      contexts.app.free_memory = freeMemory;\n    }\n  }\n\n  if (contexts.device?.free_memory) {\n    contexts.device.free_memory = os.freemem();\n  }\n\n  return contexts;\n}\n\n/**\n * Returns the operating system context.\n *\n * Based on the current platform, this uses a different strategy to provide the\n * most accurate OS information. Since this might involve spawning subprocesses\n * or accessing the file system, this should only be executed lazily and cached.\n *\n *  - On macOS (Darwin), this will execute the `sw_vers` utility. The context\n *    has a `name`, `version`, `build` and `kernel_version` set.\n *  - On Linux, this will try to load a distribution release from `/etc` and set\n *    the `name`, `version` and `kernel_version` fields.\n *  - On all other platforms, only a `name` and `version` will be returned. Note\n *    that `version` might actually be the kernel version.\n */\nasync function getOsContext(): Promise<OsContext> {\n  const platformId = os.platform();\n  switch (platformId) {\n    case 'darwin':\n      return getDarwinInfo();\n    case 'linux':\n      return getLinuxInfo();\n    default:\n      return {\n        name: PLATFORM_NAMES[platformId] || platformId,\n        version: os.release(),\n      };\n  }\n}\n\nfunction getCultureContext(): CultureContext | undefined {\n  try {\n    if (typeof process.versions.icu !== 'string') {\n      // Node was built without ICU support\n      return;\n    }\n\n    // Check that node was built with full Intl support. Its possible it was built without support for non-English\n    // locales which will make resolvedOptions inaccurate\n    //\n    // https://nodejs.org/api/intl.html#detecting-internationalization-support\n    const january = new Date(9e8);\n    const spanish = new Intl.DateTimeFormat('es', { month: 'long' });\n    if (spanish.format(january) === 'enero') {\n      const options = Intl.DateTimeFormat().resolvedOptions();\n\n      return {\n        locale: options.locale,\n        timezone: options.timeZone,\n      };\n    }\n  } catch (err) {\n    //\n  }\n\n  return;\n}\n\n/**\n * Get app context information from process\n */\nexport function getAppContext(): AppContext {\n  const app_memory = process.memoryUsage().rss;\n  const app_start_time = new Date(Date.now() - process.uptime() * 1000).toISOString();\n  // https://nodejs.org/api/process.html#processavailablememory\n  const appContext: AppContext = { app_start_time, app_memory };\n\n  if (typeof (process as ProcessWithCurrentValues).availableMemory === 'function') {\n    const freeMemory = (process as ProcessWithCurrentValues).availableMemory?.();\n    if (freeMemory != null) {\n      appContext.free_memory = freeMemory;\n    }\n  }\n\n  return appContext;\n}\n\n/**\n * Gets device information from os\n */\nexport function getDeviceContext(deviceOpt: DeviceContextOptions | true): DeviceContext {\n  const device: DeviceContext = {};\n\n  // Sometimes os.uptime() throws due to lacking permissions: https://github.com/getsentry/sentry-javascript/issues/8202\n  let uptime;\n  try {\n    uptime = os.uptime();\n  } catch (e) {\n    // noop\n  }\n\n  // os.uptime or its return value seem to be undefined in certain environments (e.g. Azure functions).\n  // Hence, we only set boot time, if we get a valid uptime value.\n  // @see https://github.com/getsentry/sentry-javascript/issues/5856\n  if (typeof uptime === 'number') {\n    device.boot_time = new Date(Date.now() - uptime * 1000).toISOString();\n  }\n\n  device.arch = os.arch();\n\n  if (deviceOpt === true || deviceOpt.memory) {\n    device.memory_size = os.totalmem();\n    device.free_memory = os.freemem();\n  }\n\n  if (deviceOpt === true || deviceOpt.cpu) {\n    const cpuInfo = os.cpus() as os.CpuInfo[] | undefined;\n    const firstCpu = cpuInfo?.[0];\n    if (firstCpu) {\n      device.processor_count = cpuInfo.length;\n      device.cpu_description = firstCpu.model;\n      device.processor_frequency = firstCpu.speed;\n    }\n  }\n\n  return device;\n}\n\n/** Mapping of Node's platform names to actual OS names. */\nconst PLATFORM_NAMES: { [platform: string]: string } = {\n  aix: 'IBM AIX',\n  freebsd: 'FreeBSD',\n  openbsd: 'OpenBSD',\n  sunos: 'SunOS',\n  win32: 'Windows',\n};\n\n/** Linux version file to check for a distribution. */\ninterface DistroFile {\n  /** The file name, located in `/etc`. */\n  name: string;\n  /** Potential distributions to check. */\n  distros: [string, ...string[]];\n}\n\n/** Mapping of linux release files located in /etc to distributions. */\nconst LINUX_DISTROS: DistroFile[] = [\n  { name: 'fedora-release', distros: ['Fedora'] },\n  { name: 'redhat-release', distros: ['Red Hat Linux', 'Centos'] },\n  { name: 'redhat_version', distros: ['Red Hat Linux'] },\n  { name: 'SuSE-release', distros: ['SUSE Linux'] },\n  { name: 'lsb-release', distros: ['Ubuntu Linux', 'Arch Linux'] },\n  { name: 'debian_version', distros: ['Debian'] },\n  { name: 'debian_release', distros: ['Debian'] },\n  { name: 'arch-release', distros: ['Arch Linux'] },\n  { name: 'gentoo-release', distros: ['Gentoo Linux'] },\n  { name: 'novell-release', distros: ['SUSE Linux'] },\n  { name: 'alpine-release', distros: ['Alpine Linux'] },\n];\n\n/** Functions to extract the OS version from Linux release files. */\nconst LINUX_VERSIONS: {\n  [identifier: string]: (content: string) => string | undefined;\n} = {\n  alpine: content => content,\n  arch: content => matchFirst(/distrib_release=(.*)/, content),\n  centos: content => matchFirst(/release ([^ ]+)/, content),\n  debian: content => content,\n  fedora: content => matchFirst(/release (..)/, content),\n  mint: content => matchFirst(/distrib_release=(.*)/, content),\n  red: content => matchFirst(/release ([^ ]+)/, content),\n  suse: content => matchFirst(/VERSION = (.*)\\n/, content),\n  ubuntu: content => matchFirst(/distrib_release=(.*)/, content),\n};\n\n/**\n * Executes a regular expression with one capture group.\n *\n * @param regex A regular expression to execute.\n * @param text Content to execute the RegEx on.\n * @returns The captured string if matched; otherwise undefined.\n */\nfunction matchFirst(regex: RegExp, text: string): string | undefined {\n  const match = regex.exec(text);\n  return match ? match[1] : undefined;\n}\n\n/** Loads the macOS operating system context. */\nasync function getDarwinInfo(): Promise<OsContext> {\n  // Default values that will be used in case no operating system information\n  // can be loaded. The default version is computed via heuristics from the\n  // kernel version, but the build ID is missing.\n  const darwinInfo: OsContext = {\n    kernel_version: os.release(),\n    name: 'Mac OS X',\n    version: `10.${Number(os.release().split('.')[0]) - 4}`,\n  };\n\n  try {\n    // We try to load the actual macOS version by executing the `sw_vers` tool.\n    // This tool should be available on every standard macOS installation. In\n    // case this fails, we stick with the values computed above.\n\n    const output = await new Promise<string>((resolve, reject) => {\n      execFile('/usr/bin/sw_vers', (error: Error | null, stdout: string) => {\n        if (error) {\n          reject(error);\n          return;\n        }\n        resolve(stdout);\n      });\n    });\n\n    darwinInfo.name = matchFirst(/^ProductName:\\s+(.*)$/m, output);\n    darwinInfo.version = matchFirst(/^ProductVersion:\\s+(.*)$/m, output);\n    darwinInfo.build = matchFirst(/^BuildVersion:\\s+(.*)$/m, output);\n  } catch (e) {\n    // ignore\n  }\n\n  return darwinInfo;\n}\n\n/** Returns a distribution identifier to look up version callbacks. */\nfunction getLinuxDistroId(name: string): string {\n  return (name.split(' ') as [string])[0].toLowerCase();\n}\n\n/** Loads the Linux operating system context. */\nasync function getLinuxInfo(): Promise<OsContext> {\n  // By default, we cannot assume anything about the distribution or Linux\n  // version. `os.release()` returns the kernel version and we assume a generic\n  // \"Linux\" name, which will be replaced down below.\n  const linuxInfo: OsContext = {\n    kernel_version: os.release(),\n    name: 'Linux',\n  };\n\n  try {\n    // We start guessing the distribution by listing files in the /etc\n    // directory. This is were most Linux distributions (except Knoppix) store\n    // release files with certain distribution-dependent meta data. We search\n    // for exactly one known file defined in `LINUX_DISTROS` and exit if none\n    // are found. In case there are more than one file, we just stick with the\n    // first one.\n    const etcFiles = await readDirAsync('/etc');\n    const distroFile = LINUX_DISTROS.find(file => etcFiles.includes(file.name));\n    if (!distroFile) {\n      return linuxInfo;\n    }\n\n    // Once that file is known, load its contents. To make searching in those\n    // files easier, we lowercase the file contents. Since these files are\n    // usually quite small, this should not allocate too much memory and we only\n    // hold on to it for a very short amount of time.\n    const distroPath = join('/etc', distroFile.name);\n    const contents = ((await readFileAsync(distroPath, { encoding: 'utf-8' })) as string).toLowerCase();\n\n    // Some Linux distributions store their release information in the same file\n    // (e.g. RHEL and Centos). In those cases, we scan the file for an\n    // identifier, that basically consists of the first word of the linux\n    // distribution name (e.g. \"red\" for Red Hat). In case there is no match, we\n    // just assume the first distribution in our list.\n    const { distros } = distroFile;\n    linuxInfo.name = distros.find(d => contents.indexOf(getLinuxDistroId(d)) >= 0) || distros[0];\n\n    // Based on the found distribution, we can now compute the actual version\n    // number. This is different for every distribution, so several strategies\n    // are computed in `LINUX_VERSIONS`.\n    const id = getLinuxDistroId(linuxInfo.name);\n    linuxInfo.version = LINUX_VERSIONS[id]?.(contents);\n  } catch (e) {\n    // ignore\n  }\n\n  return linuxInfo;\n}\n\n/**\n * Grabs some information about hosting provider based on best effort.\n */\nfunction getCloudResourceContext(): CloudResourceContext | undefined {\n  if (process.env.VERCEL) {\n    // https://vercel.com/docs/concepts/projects/environment-variables/system-environment-variables#system-environment-variables\n    return {\n      'cloud.provider': 'vercel',\n      'cloud.region': process.env.VERCEL_REGION,\n    };\n  } else if (process.env.AWS_REGION) {\n    // https://docs.aws.amazon.com/lambda/latest/dg/configuration-envvars.html\n    return {\n      'cloud.provider': 'aws',\n      'cloud.region': process.env.AWS_REGION,\n      'cloud.platform': process.env.AWS_EXECUTION_ENV,\n    };\n  } else if (process.env.GCP_PROJECT) {\n    // https://cloud.google.com/composer/docs/how-to/managing/environment-variables#reserved_variables\n    return {\n      'cloud.provider': 'gcp',\n    };\n  } else if (process.env.ALIYUN_REGION_ID) {\n    // TODO: find where I found these environment variables - at least gc.github.com returns something\n    return {\n      'cloud.provider': 'alibaba_cloud',\n      'cloud.region': process.env.ALIYUN_REGION_ID,\n    };\n  } else if (process.env.WEBSITE_SITE_NAME && process.env.REGION_NAME) {\n    // https://learn.microsoft.com/en-us/azure/app-service/reference-app-settings?tabs=kudu%2Cdotnet#app-environment\n    return {\n      'cloud.provider': 'azure',\n      'cloud.region': process.env.REGION_NAME,\n    };\n  } else if (process.env.IBM_CLOUD_REGION) {\n    // TODO: find where I found these environment variables - at least gc.github.com returns something\n    return {\n      'cloud.provider': 'ibm_cloud',\n      'cloud.region': process.env.IBM_CLOUD_REGION,\n    };\n  } else if (process.env.TENCENTCLOUD_REGION) {\n    // https://www.tencentcloud.com/document/product/583/32748\n    return {\n      'cloud.provider': 'tencent_cloud',\n      'cloud.region': process.env.TENCENTCLOUD_REGION,\n      'cloud.account.id': process.env.TENCENTCLOUD_APPID,\n      'cloud.availability_zone': process.env.TENCENTCLOUD_ZONE,\n    };\n  } else if (process.env.NETLIFY) {\n    // https://docs.netlify.com/configure-builds/environment-variables/#read-only-variables\n    return {\n      'cloud.provider': 'netlify',\n    };\n  } else if (process.env.FLY_REGION) {\n    // https://fly.io/docs/reference/runtime-environment/\n    return {\n      'cloud.provider': 'fly.io',\n      'cloud.region': process.env.FLY_REGION,\n    };\n  } else if (process.env.DYNO) {\n    // https://devcenter.heroku.com/articles/dynos#local-environment-variables\n    return {\n      'cloud.provider': 'heroku',\n    };\n  } else {\n    return undefined;\n  }\n}\n", "import { createReadStream } from 'node:fs';\nimport { createInterface } from 'node:readline';\nimport type { Event, IntegrationFn, StackFrame } from '@sentry/core';\nimport { defineIntegration, logger, LRUMap, snipLine } from '@sentry/core';\nimport { DEBUG_BUILD } from '../debug-build';\n\nconst LRU_FILE_CONTENTS_CACHE = new LRUMap<string, Record<number, string>>(10);\nconst LRU_FILE_CONTENTS_FS_READ_FAILED = new LRUMap<string, 1>(20);\nconst DEFAULT_LINES_OF_CONTEXT = 7;\nconst INTEGRATION_NAME = 'ContextLines';\n// Determines the upper bound of lineno/colno that we will attempt to read. Large colno values are likely to be\n// minified code while large lineno values are likely to be bundled code.\n// Exported for testing purposes.\nexport const MAX_CONTEXTLINES_COLNO: number = 1000;\nexport const MAX_CONTEXTLINES_LINENO: number = 10000;\n\ninterface ContextLinesOptions {\n  /**\n   * Sets the number of context lines for each frame when loading a file.\n   * Defaults to 7.\n   *\n   * Set to 0 to disable loading and inclusion of source files.\n   **/\n  frameContextLines?: number;\n}\n\n/**\n * Exported for testing purposes.\n */\nexport function resetFileContentCache(): void {\n  LRU_FILE_CONTENTS_CACHE.clear();\n}\n\n/**\n * Get or init map value\n */\nfunction emplace<T extends LRUMap<K, V>, K extends string, V>(map: T, key: K, contents: V): V {\n  const value = map.get(key);\n\n  if (value === undefined) {\n    map.set(key, contents);\n    return contents;\n  }\n\n  return value;\n}\n\n/**\n * Determines if context lines should be skipped for a file.\n * - .min.(mjs|cjs|js) files are and not useful since they dont point to the original source\n * - node: prefixed modules are part of the runtime and cannot be resolved to a file\n * - data: skip json, wasm and inline js https://nodejs.org/api/esm.html#data-imports\n */\nfunction shouldSkipContextLinesForFile(path: string): boolean {\n  // Test the most common prefix and extension first. These are the ones we\n  // are most likely to see in user applications and are the ones we can break out of first.\n  if (path.startsWith('node:')) return true;\n  if (path.endsWith('.min.js')) return true;\n  if (path.endsWith('.min.cjs')) return true;\n  if (path.endsWith('.min.mjs')) return true;\n  if (path.startsWith('data:')) return true;\n  return false;\n}\n\n/**\n * Determines if we should skip contextlines based off the max lineno and colno values.\n */\nfunction shouldSkipContextLinesForFrame(frame: StackFrame): boolean {\n  if (frame.lineno !== undefined && frame.lineno > MAX_CONTEXTLINES_LINENO) return true;\n  if (frame.colno !== undefined && frame.colno > MAX_CONTEXTLINES_COLNO) return true;\n  return false;\n}\n/**\n * Checks if we have all the contents that we need in the cache.\n */\nfunction rangeExistsInContentCache(file: string, range: ReadlineRange): boolean {\n  const contents = LRU_FILE_CONTENTS_CACHE.get(file);\n  if (contents === undefined) return false;\n\n  for (let i = range[0]; i <= range[1]; i++) {\n    if (contents[i] === undefined) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * Creates contiguous ranges of lines to read from a file. In the case where context lines overlap,\n * the ranges are merged to create a single range.\n */\nfunction makeLineReaderRanges(lines: number[], linecontext: number): ReadlineRange[] {\n  if (!lines.length) {\n    return [];\n  }\n\n  let i = 0;\n  const line = lines[0];\n\n  if (typeof line !== 'number') {\n    return [];\n  }\n\n  let current = makeContextRange(line, linecontext);\n  const out: ReadlineRange[] = [];\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    if (i === lines.length - 1) {\n      out.push(current);\n      break;\n    }\n\n    // If the next line falls into the current range, extend the current range to lineno + linecontext.\n    const next = lines[i + 1];\n    if (typeof next !== 'number') {\n      break;\n    }\n    if (next <= current[1]) {\n      current[1] = next + linecontext;\n    } else {\n      out.push(current);\n      current = makeContextRange(next, linecontext);\n    }\n\n    i++;\n  }\n\n  return out;\n}\n\n/**\n * Extracts lines from a file and stores them in a cache.\n */\nfunction getContextLinesFromFile(path: string, ranges: ReadlineRange[], output: Record<number, string>): Promise<void> {\n  return new Promise((resolve, _reject) => {\n    // It is important *not* to have any async code between createInterface and the 'line' event listener\n    // as it will cause the 'line' event to\n    // be emitted before the listener is attached.\n    const stream = createReadStream(path);\n    const lineReaded = createInterface({\n      input: stream,\n    });\n\n    // We need to explicitly destroy the stream to prevent memory leaks,\n    // removing the listeners on the readline interface is not enough.\n    // See: https://github.com/nodejs/node/issues/9002 and https://github.com/getsentry/sentry-javascript/issues/14892\n    function destroyStreamAndResolve(): void {\n      stream.destroy();\n      resolve();\n    }\n\n    // Init at zero and increment at the start of the loop because lines are 1 indexed.\n    let lineNumber = 0;\n    let currentRangeIndex = 0;\n    const range = ranges[currentRangeIndex];\n    if (range === undefined) {\n      // We should never reach this point, but if we do, we should resolve the promise to prevent it from hanging.\n      destroyStreamAndResolve();\n      return;\n    }\n    let rangeStart = range[0];\n    let rangeEnd = range[1];\n\n    // We use this inside Promise.all, so we need to resolve the promise even if there is an error\n    // to prevent Promise.all from short circuiting the rest.\n    function onStreamError(e: Error): void {\n      // Mark file path as failed to read and prevent multiple read attempts.\n      LRU_FILE_CONTENTS_FS_READ_FAILED.set(path, 1);\n      DEBUG_BUILD && logger.error(`Failed to read file: ${path}. Error: ${e}`);\n      lineReaded.close();\n      lineReaded.removeAllListeners();\n      destroyStreamAndResolve();\n    }\n\n    // We need to handle the error event to prevent the process from crashing in < Node 16\n    // https://github.com/nodejs/node/pull/31603\n    stream.on('error', onStreamError);\n    lineReaded.on('error', onStreamError);\n    lineReaded.on('close', destroyStreamAndResolve);\n\n    lineReaded.on('line', line => {\n      lineNumber++;\n      if (lineNumber < rangeStart) return;\n\n      // !Warning: This mutates the cache by storing the snipped line into the cache.\n      output[lineNumber] = snipLine(line, 0);\n\n      if (lineNumber >= rangeEnd) {\n        if (currentRangeIndex === ranges.length - 1) {\n          // We need to close the file stream and remove listeners, else the reader will continue to run our listener;\n          lineReaded.close();\n          lineReaded.removeAllListeners();\n          return;\n        }\n        currentRangeIndex++;\n        const range = ranges[currentRangeIndex];\n        if (range === undefined) {\n          // This should never happen as it means we have a bug in the context.\n          lineReaded.close();\n          lineReaded.removeAllListeners();\n          return;\n        }\n        rangeStart = range[0];\n        rangeEnd = range[1];\n      }\n    });\n  });\n}\n\n/**\n * Adds surrounding (context) lines of the line that an exception occurred on to the event.\n * This is done by reading the file line by line and extracting the lines. The extracted lines are stored in\n * a cache to prevent multiple reads of the same file. Failures to read a file are similarly cached to prevent multiple\n * failing reads from happening.\n */\n/* eslint-disable complexity */\nasync function addSourceContext(event: Event, contextLines: number): Promise<Event> {\n  // keep a lookup map of which files we've already enqueued to read,\n  // so we don't enqueue the same file multiple times which would cause multiple i/o reads\n  const filesToLines: Record<string, number[]> = {};\n\n  if (contextLines > 0 && event.exception?.values) {\n    for (const exception of event.exception.values) {\n      if (!exception.stacktrace?.frames?.length) {\n        continue;\n      }\n\n      // Maps preserve insertion order, so we iterate in reverse, starting at the\n      // outermost frame and closer to where the exception has occurred (poor mans priority)\n      for (let i = exception.stacktrace.frames.length - 1; i >= 0; i--) {\n        const frame: StackFrame | undefined = exception.stacktrace.frames[i];\n        const filename = frame?.filename;\n\n        if (\n          !frame ||\n          typeof filename !== 'string' ||\n          typeof frame.lineno !== 'number' ||\n          shouldSkipContextLinesForFile(filename) ||\n          shouldSkipContextLinesForFrame(frame)\n        ) {\n          continue;\n        }\n\n        const filesToLinesOutput = filesToLines[filename];\n        if (!filesToLinesOutput) filesToLines[filename] = [];\n        // @ts-expect-error this is defined above\n        filesToLines[filename].push(frame.lineno);\n      }\n    }\n  }\n\n  const files = Object.keys(filesToLines);\n  if (files.length == 0) {\n    return event;\n  }\n\n  const readlinePromises: Promise<void>[] = [];\n  for (const file of files) {\n    // If we failed to read this before, dont try reading it again.\n    if (LRU_FILE_CONTENTS_FS_READ_FAILED.get(file)) {\n      continue;\n    }\n\n    const filesToLineRanges = filesToLines[file];\n    if (!filesToLineRanges) {\n      continue;\n    }\n\n    // Sort ranges so that they are sorted by line increasing order and match how the file is read.\n    filesToLineRanges.sort((a, b) => a - b);\n    // Check if the contents are already in the cache and if we can avoid reading the file again.\n    const ranges = makeLineReaderRanges(filesToLineRanges, contextLines);\n    if (ranges.every(r => rangeExistsInContentCache(file, r))) {\n      continue;\n    }\n\n    const cache = emplace(LRU_FILE_CONTENTS_CACHE, file, {});\n    readlinePromises.push(getContextLinesFromFile(file, ranges, cache));\n  }\n\n  // The promise rejections are caught in order to prevent them from short circuiting Promise.all\n  await Promise.all(readlinePromises).catch(() => {\n    DEBUG_BUILD && logger.log('Failed to read one or more source files and resolve context lines');\n  });\n\n  // Perform the same loop as above, but this time we can assume all files are in the cache\n  // and attempt to add source context to frames.\n  if (contextLines > 0 && event.exception?.values) {\n    for (const exception of event.exception.values) {\n      if (exception.stacktrace?.frames && exception.stacktrace.frames.length > 0) {\n        addSourceContextToFrames(exception.stacktrace.frames, contextLines, LRU_FILE_CONTENTS_CACHE);\n      }\n    }\n  }\n\n  return event;\n}\n/* eslint-enable complexity */\n\n/** Adds context lines to frames */\nfunction addSourceContextToFrames(\n  frames: StackFrame[],\n  contextLines: number,\n  cache: LRUMap<string, Record<number, string>>,\n): void {\n  for (const frame of frames) {\n    // Only add context if we have a filename and it hasn't already been added\n    if (frame.filename && frame.context_line === undefined && typeof frame.lineno === 'number') {\n      const contents = cache.get(frame.filename);\n      if (contents === undefined) {\n        continue;\n      }\n\n      addContextToFrame(frame.lineno, frame, contextLines, contents);\n    }\n  }\n}\n\n/**\n * Clears the context lines from a frame, used to reset a frame to its original state\n * if we fail to resolve all context lines for it.\n */\nfunction clearLineContext(frame: StackFrame): void {\n  delete frame.pre_context;\n  delete frame.context_line;\n  delete frame.post_context;\n}\n\n/**\n * Resolves context lines before and after the given line number and appends them to the frame;\n */\nexport function addContextToFrame(\n  lineno: number,\n  frame: StackFrame,\n  contextLines: number,\n  contents: Record<number, string> | undefined,\n): void {\n  // When there is no line number in the frame, attaching context is nonsensical and will even break grouping.\n  // We already check for lineno before calling this, but since StackFrame lineno ism optional, we check it again.\n  if (frame.lineno === undefined || contents === undefined) {\n    DEBUG_BUILD && logger.error('Cannot resolve context for frame with no lineno or file contents');\n    return;\n  }\n\n  frame.pre_context = [];\n  for (let i = makeRangeStart(lineno, contextLines); i < lineno; i++) {\n    // We always expect the start context as line numbers cannot be negative. If we dont find a line, then\n    // something went wrong somewhere. Clear the context and return without adding any linecontext.\n    const line = contents[i];\n    if (line === undefined) {\n      clearLineContext(frame);\n      DEBUG_BUILD && logger.error(`Could not find line ${i} in file ${frame.filename}`);\n      return;\n    }\n\n    frame.pre_context.push(line);\n  }\n\n  // We should always have the context line. If we dont, something went wrong, so we clear the context and return\n  // without adding any linecontext.\n  if (contents[lineno] === undefined) {\n    clearLineContext(frame);\n    DEBUG_BUILD && logger.error(`Could not find line ${lineno} in file ${frame.filename}`);\n    return;\n  }\n\n  frame.context_line = contents[lineno];\n\n  const end = makeRangeEnd(lineno, contextLines);\n  frame.post_context = [];\n  for (let i = lineno + 1; i <= end; i++) {\n    // Since we dont track when the file ends, we cant clear the context if we dont find a line as it could\n    // just be that we reached the end of the file.\n    const line = contents[i];\n    if (line === undefined) {\n      break;\n    }\n    frame.post_context.push(line);\n  }\n}\n\n// Helper functions for generating line context ranges. They take a line number and the number of lines of context to\n// include before and after the line and generate an inclusive range of indices.\ntype ReadlineRange = [start: number, end: number];\n// Compute inclusive end context range\nfunction makeRangeStart(line: number, linecontext: number): number {\n  return Math.max(1, line - linecontext);\n}\n// Compute inclusive start context range\nfunction makeRangeEnd(line: number, linecontext: number): number {\n  return line + linecontext;\n}\n// Determine start and end indices for context range (inclusive);\nfunction makeContextRange(line: number, linecontext: number): [start: number, end: number] {\n  return [makeRangeStart(line, linecontext), makeRangeEnd(line, linecontext)];\n}\n\n/** Exported only for tests, as a type-safe variant. */\nexport const _contextLinesIntegration = ((options: ContextLinesOptions = {}) => {\n  const contextLines = options.frameContextLines !== undefined ? options.frameContextLines : DEFAULT_LINES_OF_CONTEXT;\n\n  return {\n    name: INTEGRATION_NAME,\n    processEvent(event) {\n      return addSourceContext(event, contextLines);\n    },\n  };\n}) satisfies IntegrationFn;\n\n/**\n * Capture the lines before and after the frame's context.\n */\nexport const contextLinesIntegration = defineIntegration(_contextLinesIntegration);\n", "let cachedDebuggerEnabled: boolean | undefined;\n\n/**\n * Was the debugger enabled when this function was first called?\n */\nexport async function isDebuggerEnabled(): Promise<boolean> {\n  if (cachedDebuggerEnabled === undefined) {\n    try {\n      // Node can be built without inspector support\n      const inspector = await import('node:inspector');\n      cachedDebuggerEnabled = !!inspector.url();\n    } catch (_) {\n      cachedDebuggerEnabled = false;\n    }\n  }\n\n  return cachedDebuggerEnabled;\n}\n", "import type { Debugger } from 'node:inspector';\n\nexport type Variables = Record<string, unknown>;\n\nexport type RateLimitIncrement = () => void;\n\n/**\n * The key used to store the local variables on the error object.\n */\nexport const LOCAL_VARIABLES_KEY = '__SENTRY_ERROR_LOCAL_VARIABLES__';\n\n/**\n * Creates a rate limiter that will call the disable callback when the rate limit is reached and the enable callback\n * when a timeout has occurred.\n * @param maxPerSecond Maximum number of calls per second\n * @param enable Callback to enable capture\n * @param disable Callback to disable capture\n * @returns A function to call to increment the rate limiter count\n */\nexport function createRateLimiter(\n  maxPerSecond: number,\n  enable: () => void,\n  disable: (seconds: number) => void,\n): RateLimitIncrement {\n  let count = 0;\n  let retrySeconds = 5;\n  let disabledTimeout = 0;\n\n  setInterval(() => {\n    if (disabledTimeout === 0) {\n      if (count > maxPerSecond) {\n        retrySeconds *= 2;\n        disable(retrySeconds);\n\n        // Cap at one day\n        if (retrySeconds > 86400) {\n          retrySeconds = 86400;\n        }\n        disabledTimeout = retrySeconds;\n      }\n    } else {\n      disabledTimeout -= 1;\n\n      if (disabledTimeout === 0) {\n        enable();\n      }\n    }\n\n    count = 0;\n  }, 1_000).unref();\n\n  return () => {\n    count += 1;\n  };\n}\n\n// Add types for the exception event data\nexport type PausedExceptionEvent = Debugger.PausedEventDataType & {\n  data: {\n    // This contains error.stack\n    description: string;\n    objectId?: string;\n  };\n};\n\n/** Could this be an anonymous function? */\nexport function isAnonymous(name: string | undefined): boolean {\n  return name !== undefined && (name.length === 0 || name === '?' || name === '<anonymous>');\n}\n\n/** Do the function names appear to match? */\nexport function functionNamesMatch(a: string | undefined, b: string | undefined): boolean {\n  return a === b || (isAnonymous(a) && isAnonymous(b));\n}\n\nexport interface FrameVariables {\n  function: string;\n  vars?: Variables;\n}\n\nexport interface LocalVariablesIntegrationOptions {\n  /**\n   * Capture local variables for both caught and uncaught exceptions\n   *\n   * - When false, only uncaught exceptions will have local variables\n   * - When true, both caught and uncaught exceptions will have local variables.\n   *\n   * Defaults to `true`.\n   *\n   * Capturing local variables for all exceptions can be expensive since the debugger pauses for every throw to collect\n   * local variables.\n   *\n   * To reduce the likelihood of this feature impacting app performance or throughput, this feature is rate-limited.\n   * Once the rate limit is reached, local variables will only be captured for uncaught exceptions until a timeout has\n   * been reached.\n   */\n  captureAllExceptions?: boolean;\n  /**\n   * Maximum number of exceptions to capture local variables for per second before rate limiting is triggered.\n   */\n  maxExceptionsPerSecond?: number;\n}\n\nexport interface LocalVariablesWorkerArgs extends LocalVariablesIntegrationOptions {\n  /**\n   * Whether to enable debug logging.\n   */\n  debug: boolean;\n  /**\n   * Base path used to calculate module name.\n   *\n   * Defaults to `dirname(process.argv[1])` and falls back to `process.cwd()`\n   */\n  basePath?: string;\n}\n", "import { Worker } from 'node:worker_threads';\nimport type { Event, EventHint, Exception, IntegrationFn } from '@sentry/core';\nimport { defineIntegration, logger } from '@sentry/core';\nimport type { NodeClient } from '../../sdk/client';\nimport { isDebuggerEnabled } from '../../utils/debug';\nimport type { FrameVariables, LocalVariablesIntegrationOptions, LocalVariablesWorkerArgs } from './common';\nimport { functionNamesMatch, LOCAL_VARIABLES_KEY } from './common';\n\n// This string is a placeholder that gets overwritten with the worker code.\nexport const base64WorkerScript = '###LocalVariablesWorkerScript###';\n\nfunction log(...args: unknown[]): void {\n  logger.log('[LocalVariables]', ...args);\n}\n\n/**\n * Adds local variables to exception frames\n */\nexport const localVariablesAsyncIntegration = defineIntegration(((\n  integrationOptions: LocalVariablesIntegrationOptions = {},\n) => {\n  function addLocalVariablesToException(exception: Exception, localVariables: FrameVariables[]): void {\n    // Filter out frames where the function name is `new Promise` since these are in the error.stack frames\n    // but do not appear in the debugger call frames\n    const frames = (exception.stacktrace?.frames || []).filter(frame => frame.function !== 'new Promise');\n\n    for (let i = 0; i < frames.length; i++) {\n      // Sentry frames are in reverse order\n      const frameIndex = frames.length - i - 1;\n\n      const frameLocalVariables = localVariables[i];\n      const frame = frames[frameIndex];\n\n      if (!frame || !frameLocalVariables) {\n        // Drop out if we run out of frames to match up\n        break;\n      }\n\n      if (\n        // We need to have vars to add\n        frameLocalVariables.vars === undefined ||\n        // We're not interested in frames that are not in_app because the vars are not relevant\n        frame.in_app === false ||\n        // The function names need to match\n        !functionNamesMatch(frame.function, frameLocalVariables.function)\n      ) {\n        continue;\n      }\n\n      frame.vars = frameLocalVariables.vars;\n    }\n  }\n\n  function addLocalVariablesToEvent(event: Event, hint: EventHint): Event {\n    if (\n      hint.originalException &&\n      typeof hint.originalException === 'object' &&\n      LOCAL_VARIABLES_KEY in hint.originalException &&\n      Array.isArray(hint.originalException[LOCAL_VARIABLES_KEY])\n    ) {\n      for (const exception of event.exception?.values || []) {\n        addLocalVariablesToException(exception, hint.originalException[LOCAL_VARIABLES_KEY]);\n      }\n\n      hint.originalException[LOCAL_VARIABLES_KEY] = undefined;\n    }\n\n    return event;\n  }\n\n  async function startInspector(): Promise<void> {\n    // We load inspector dynamically because on some platforms Node is built without inspector support\n    const inspector = await import('node:inspector');\n    if (!inspector.url()) {\n      inspector.open(0);\n    }\n  }\n\n  function startWorker(options: LocalVariablesWorkerArgs): void {\n    const worker = new Worker(new URL(`data:application/javascript;base64,${base64WorkerScript}`), {\n      workerData: options,\n      // We don't want any Node args to be passed to the worker\n      execArgv: [],\n      env: { ...process.env, NODE_OPTIONS: undefined },\n    });\n\n    process.on('exit', () => {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      worker.terminate();\n    });\n\n    worker.once('error', (err: Error) => {\n      log('Worker error', err);\n    });\n\n    worker.once('exit', (code: number) => {\n      log('Worker exit', code);\n    });\n\n    // Ensure this thread can't block app exit\n    worker.unref();\n  }\n\n  return {\n    name: 'LocalVariablesAsync',\n    async setup(client: NodeClient) {\n      const clientOptions = client.getOptions();\n\n      if (!clientOptions.includeLocalVariables) {\n        return;\n      }\n\n      if (await isDebuggerEnabled()) {\n        logger.warn('Local variables capture has been disabled because the debugger was already enabled');\n        return;\n      }\n\n      const options: LocalVariablesWorkerArgs = {\n        ...integrationOptions,\n        debug: logger.isEnabled(),\n      };\n\n      startInspector().then(\n        () => {\n          try {\n            startWorker(options);\n          } catch (e) {\n            logger.error('Failed to start worker', e);\n          }\n        },\n        e => {\n          logger.error('Failed to start inspector', e);\n        },\n      );\n    },\n    processEvent(event: Event, hint: EventHint): Event {\n      return addLocalVariablesToEvent(event, hint);\n    },\n  };\n}) satisfies IntegrationFn);\n", "import type { Debugger, InspectorNotification, Runtime, Session } from 'node:inspector';\nimport type { Event, Exception, IntegrationFn, StackFrame, StackParser } from '@sentry/core';\nimport { defineIntegration, getClient, logger, LRUMap } from '@sentry/core';\nimport { NODE_MAJOR } from '../../nodeVersion';\nimport type { NodeClient } from '../../sdk/client';\nimport { isDebuggerEnabled } from '../../utils/debug';\nimport type {\n  FrameVariables,\n  LocalVariablesIntegrationOptions,\n  PausedExceptionEvent,\n  RateLimitIncrement,\n  Variables,\n} from './common';\nimport { createRateLimiter, functionNamesMatch } from './common';\n\n/** Creates a unique hash from stack frames */\nexport function hashFrames(frames: StackFrame[] | undefined): string | undefined {\n  if (frames === undefined) {\n    return;\n  }\n\n  // Only hash the 10 most recent frames (ie. the last 10)\n  return frames.slice(-10).reduce((acc, frame) => `${acc},${frame.function},${frame.lineno},${frame.colno}`, '');\n}\n\n/**\n * We use the stack parser to create a unique hash from the exception stack trace\n * This is used to lookup vars when the exception passes through the event processor\n */\nexport function hashFromStack(stackParser: StackParser, stack: string | undefined): string | undefined {\n  if (stack === undefined) {\n    return undefined;\n  }\n\n  return hashFrames(stackParser(stack, 1));\n}\n\ntype OnPauseEvent = InspectorNotification<Debugger.PausedEventDataType>;\nexport interface DebugSession {\n  /** Configures and connects to the debug session */\n  configureAndConnect(onPause: (message: OnPauseEvent, complete: () => void) => void, captureAll: boolean): void;\n  /** Updates which kind of exceptions to capture */\n  setPauseOnExceptions(captureAll: boolean): void;\n  /** Gets local variables for an objectId */\n  getLocalVariables(objectId: string, callback: (vars: Variables) => void): void;\n}\n\ntype Next<T> = (result: T) => void;\ntype Add<T> = (fn: Next<T>) => void;\ntype CallbackWrapper<T> = { add: Add<T>; next: Next<T> };\n\n/** Creates a container for callbacks to be called sequentially */\nexport function createCallbackList<T>(complete: Next<T>): CallbackWrapper<T> {\n  // A collection of callbacks to be executed last to first\n  let callbacks: Next<T>[] = [];\n\n  let completedCalled = false;\n  function checkedComplete(result: T): void {\n    callbacks = [];\n    if (completedCalled) {\n      return;\n    }\n    completedCalled = true;\n    complete(result);\n  }\n\n  // complete should be called last\n  callbacks.push(checkedComplete);\n\n  function add(fn: Next<T>): void {\n    callbacks.push(fn);\n  }\n\n  function next(result: T): void {\n    const popped = callbacks.pop() || checkedComplete;\n\n    try {\n      popped(result);\n    } catch (_) {\n      // If there is an error, we still want to call the complete callback\n      checkedComplete(result);\n    }\n  }\n\n  return { add, next };\n}\n\n/**\n * Promise API is available as `Experimental` and in Node 19 only.\n *\n * Callback-based API is `Stable` since v14 and `Experimental` since v8.\n * Because of that, we are creating our own `AsyncSession` class.\n *\n * https://nodejs.org/docs/latest-v19.x/api/inspector.html#promises-api\n * https://nodejs.org/docs/latest-v14.x/api/inspector.html\n */\nclass AsyncSession implements DebugSession {\n  /** Throws if inspector API is not available */\n  private constructor(private readonly _session: Session) {\n    //\n  }\n\n  public static async create(orDefault?: DebugSession | undefined): Promise<DebugSession> {\n    if (orDefault) {\n      return orDefault;\n    }\n\n    const inspector = await import('node:inspector');\n    return new AsyncSession(new inspector.Session());\n  }\n\n  /** @inheritdoc */\n  public configureAndConnect(onPause: (event: OnPauseEvent, complete: () => void) => void, captureAll: boolean): void {\n    this._session.connect();\n\n    this._session.on('Debugger.paused', event => {\n      onPause(event, () => {\n        // After the pause work is complete, resume execution or the exception context memory is leaked\n        this._session.post('Debugger.resume');\n      });\n    });\n\n    this._session.post('Debugger.enable');\n    this._session.post('Debugger.setPauseOnExceptions', { state: captureAll ? 'all' : 'uncaught' });\n  }\n\n  public setPauseOnExceptions(captureAll: boolean): void {\n    this._session.post('Debugger.setPauseOnExceptions', { state: captureAll ? 'all' : 'uncaught' });\n  }\n\n  /** @inheritdoc */\n  public getLocalVariables(objectId: string, complete: (vars: Variables) => void): void {\n    this._getProperties(objectId, props => {\n      const { add, next } = createCallbackList<Variables>(complete);\n\n      for (const prop of props) {\n        if (prop.value?.objectId && prop.value.className === 'Array') {\n          const id = prop.value.objectId;\n          add(vars => this._unrollArray(id, prop.name, vars, next));\n        } else if (prop.value?.objectId && prop.value.className === 'Object') {\n          const id = prop.value.objectId;\n          add(vars => this._unrollObject(id, prop.name, vars, next));\n        } else if (prop.value) {\n          add(vars => this._unrollOther(prop, vars, next));\n        }\n      }\n\n      next({});\n    });\n  }\n\n  /**\n   * Gets all the PropertyDescriptors of an object\n   */\n  private _getProperties(objectId: string, next: (result: Runtime.PropertyDescriptor[]) => void): void {\n    this._session.post(\n      'Runtime.getProperties',\n      {\n        objectId,\n        ownProperties: true,\n      },\n      (err, params) => {\n        if (err) {\n          next([]);\n        } else {\n          next(params.result);\n        }\n      },\n    );\n  }\n\n  /**\n   * Unrolls an array property\n   */\n  private _unrollArray(objectId: string, name: string, vars: Variables, next: (vars: Variables) => void): void {\n    this._getProperties(objectId, props => {\n      vars[name] = props\n        .filter(v => v.name !== 'length' && !isNaN(parseInt(v.name, 10)))\n        .sort((a, b) => parseInt(a.name, 10) - parseInt(b.name, 10))\n        .map(v => v.value?.value);\n\n      next(vars);\n    });\n  }\n\n  /**\n   * Unrolls an object property\n   */\n  private _unrollObject(objectId: string, name: string, vars: Variables, next: (obj: Variables) => void): void {\n    this._getProperties(objectId, props => {\n      vars[name] = props\n        .map<[string, unknown]>(v => [v.name, v.value?.value])\n        .reduce((obj, [key, val]) => {\n          obj[key] = val;\n          return obj;\n        }, {} as Variables);\n\n      next(vars);\n    });\n  }\n\n  /**\n   * Unrolls other properties\n   */\n  private _unrollOther(prop: Runtime.PropertyDescriptor, vars: Variables, next: (vars: Variables) => void): void {\n    if (prop.value) {\n      if ('value' in prop.value) {\n        if (prop.value.value === undefined || prop.value.value === null) {\n          vars[prop.name] = `<${prop.value.value}>`;\n        } else {\n          vars[prop.name] = prop.value.value;\n        }\n      } else if ('description' in prop.value && prop.value.type !== 'function') {\n        vars[prop.name] = `<${prop.value.description}>`;\n      } else if (prop.value.type === 'undefined') {\n        vars[prop.name] = '<undefined>';\n      }\n    }\n\n    next(vars);\n  }\n}\n\nconst INTEGRATION_NAME = 'LocalVariables';\n\n/**\n * Adds local variables to exception frames\n */\nconst _localVariablesSyncIntegration = ((\n  options: LocalVariablesIntegrationOptions = {},\n  sessionOverride?: DebugSession,\n) => {\n  const cachedFrames: LRUMap<string, FrameVariables[]> = new LRUMap(20);\n  let rateLimiter: RateLimitIncrement | undefined;\n  let shouldProcessEvent = false;\n\n  function addLocalVariablesToException(exception: Exception): void {\n    const hash = hashFrames(exception.stacktrace?.frames);\n\n    if (hash === undefined) {\n      return;\n    }\n\n    // Check if we have local variables for an exception that matches the hash\n    // remove is identical to get but also removes the entry from the cache\n    const cachedFrame = cachedFrames.remove(hash);\n\n    if (cachedFrame === undefined) {\n      return;\n    }\n\n    // Filter out frames where the function name is `new Promise` since these are in the error.stack frames\n    // but do not appear in the debugger call frames\n    const frames = (exception.stacktrace?.frames || []).filter(frame => frame.function !== 'new Promise');\n\n    for (let i = 0; i < frames.length; i++) {\n      // Sentry frames are in reverse order\n      const frameIndex = frames.length - i - 1;\n\n      const cachedFrameVariable = cachedFrame[i];\n      const frameVariable = frames[frameIndex];\n\n      // Drop out if we run out of frames to match up\n      if (!frameVariable || !cachedFrameVariable) {\n        break;\n      }\n\n      if (\n        // We need to have vars to add\n        cachedFrameVariable.vars === undefined ||\n        // We're not interested in frames that are not in_app because the vars are not relevant\n        frameVariable.in_app === false ||\n        // The function names need to match\n        !functionNamesMatch(frameVariable.function, cachedFrameVariable.function)\n      ) {\n        continue;\n      }\n\n      frameVariable.vars = cachedFrameVariable.vars;\n    }\n  }\n\n  function addLocalVariablesToEvent(event: Event): Event {\n    for (const exception of event.exception?.values || []) {\n      addLocalVariablesToException(exception);\n    }\n\n    return event;\n  }\n\n  return {\n    name: INTEGRATION_NAME,\n    async setupOnce() {\n      const client = getClient<NodeClient>();\n      const clientOptions = client?.getOptions();\n\n      if (!clientOptions?.includeLocalVariables) {\n        return;\n      }\n\n      // Only setup this integration if the Node version is >= v18\n      // https://github.com/getsentry/sentry-javascript/issues/7697\n      const unsupportedNodeVersion = NODE_MAJOR < 18;\n\n      if (unsupportedNodeVersion) {\n        logger.log('The `LocalVariables` integration is only supported on Node >= v18.');\n        return;\n      }\n\n      if (await isDebuggerEnabled()) {\n        logger.warn('Local variables capture has been disabled because the debugger was already enabled');\n        return;\n      }\n\n      AsyncSession.create(sessionOverride).then(\n        session => {\n          function handlePaused(\n            stackParser: StackParser,\n            { params: { reason, data, callFrames } }: InspectorNotification<PausedExceptionEvent>,\n            complete: () => void,\n          ): void {\n            if (reason !== 'exception' && reason !== 'promiseRejection') {\n              complete();\n              return;\n            }\n\n            rateLimiter?.();\n\n            // data.description contains the original error.stack\n            const exceptionHash = hashFromStack(stackParser, data.description);\n\n            if (exceptionHash == undefined) {\n              complete();\n              return;\n            }\n\n            const { add, next } = createCallbackList<FrameVariables[]>(frames => {\n              cachedFrames.set(exceptionHash, frames);\n              complete();\n            });\n\n            // Because we're queuing up and making all these calls synchronously, we can potentially overflow the stack\n            // For this reason we only attempt to get local variables for the first 5 frames\n            for (let i = 0; i < Math.min(callFrames.length, 5); i++) {\n              // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n              const { scopeChain, functionName, this: obj } = callFrames[i]!;\n\n              const localScope = scopeChain.find(scope => scope.type === 'local');\n\n              // obj.className is undefined in ESM modules\n              const fn =\n                obj.className === 'global' || !obj.className ? functionName : `${obj.className}.${functionName}`;\n\n              if (localScope?.object.objectId === undefined) {\n                add(frames => {\n                  frames[i] = { function: fn };\n                  next(frames);\n                });\n              } else {\n                const id = localScope.object.objectId;\n                add(frames =>\n                  session.getLocalVariables(id, vars => {\n                    frames[i] = { function: fn, vars };\n                    next(frames);\n                  }),\n                );\n              }\n            }\n\n            next([]);\n          }\n\n          const captureAll = options.captureAllExceptions !== false;\n\n          session.configureAndConnect(\n            (ev, complete) =>\n              handlePaused(clientOptions.stackParser, ev as InspectorNotification<PausedExceptionEvent>, complete),\n            captureAll,\n          );\n\n          if (captureAll) {\n            const max = options.maxExceptionsPerSecond || 50;\n\n            rateLimiter = createRateLimiter(\n              max,\n              () => {\n                logger.log('Local variables rate-limit lifted.');\n                session.setPauseOnExceptions(true);\n              },\n              seconds => {\n                logger.log(\n                  `Local variables rate-limit exceeded. Disabling capturing of caught exceptions for ${seconds} seconds.`,\n                );\n                session.setPauseOnExceptions(false);\n              },\n            );\n          }\n\n          shouldProcessEvent = true;\n        },\n        error => {\n          logger.log('The `LocalVariables` integration failed to start.', error);\n        },\n      );\n    },\n    processEvent(event: Event): Event {\n      if (shouldProcessEvent) {\n        return addLocalVariablesToEvent(event);\n      }\n\n      return event;\n    },\n    // These are entirely for testing\n    _getCachedFramesCount(): number {\n      return cachedFrames.size;\n    },\n    _getFirstCachedFrame(): FrameVariables[] | undefined {\n      return cachedFrames.values()[0];\n    },\n  };\n}) satisfies IntegrationFn;\n\n/**\n * Adds local variables to exception frames.\n */\nexport const localVariablesSyncIntegration = defineIntegration(_localVariablesSyncIntegration);\n", "import type { Integration } from '@sentry/core';\nimport { NODE_VERSION } from '../../nodeVersion';\nimport type { LocalVariablesIntegrationOptions } from './common';\nimport { localVariablesAsyncIntegration } from './local-variables-async';\nimport { localVariablesSyncIntegration } from './local-variables-sync';\n\nexport const localVariablesIntegration = (options: LocalVariablesIntegrationOptions = {}): Integration => {\n  return NODE_VERSION.major < 19 ? localVariablesSyncIntegration(options) : localVariablesAsyncIntegration(options);\n};\n", "/** Detect CommonJS. */\nexport function isCjs(): boolean {\n  try {\n    return typeof module !== 'undefined' && typeof module.exports !== 'undefined';\n  } catch {\n    return false;\n  }\n}\n", "import { existsSync, readFileSync } from 'node:fs';\nimport { dirname, join } from 'node:path';\nimport type { IntegrationFn } from '@sentry/core';\nimport { defineIntegration, logger } from '@sentry/core';\nimport { DEBUG_BUILD } from '../debug-build';\nimport { isCjs } from '../utils/commonjs';\n\nlet moduleCache: { [key: string]: string };\n\nconst INTEGRATION_NAME = 'Modules';\n\nconst _modulesIntegration = (() => {\n  // This integration only works in CJS contexts\n  if (!isCjs()) {\n    DEBUG_BUILD &&\n      logger.warn(\n        'modulesIntegration only works in CommonJS (CJS) environments. Remove this integration if you are using ESM.',\n      );\n    return {\n      name: INTEGRATION_NAME,\n    };\n  }\n\n  return {\n    name: INTEGRATION_NAME,\n    processEvent(event) {\n      event.modules = {\n        ...event.modules,\n        ..._getModules(),\n      };\n\n      return event;\n    },\n  };\n}) satisfies IntegrationFn;\n\n/**\n * Add node modules / packages to the event.\n *\n * Only works in CommonJS (CJS) environments.\n */\nexport const modulesIntegration = defineIntegration(_modulesIntegration);\n\n/** Extract information about paths */\nfunction getPaths(): string[] {\n  try {\n    return require.cache ? Object.keys(require.cache as Record<string, unknown>) : [];\n  } catch (e) {\n    return [];\n  }\n}\n\n/** Extract information about package.json modules */\nfunction collectModules(): {\n  [name: string]: string;\n} {\n  const mainPaths = require.main?.paths || [];\n  const paths = getPaths();\n  const infos: {\n    [name: string]: string;\n  } = {};\n  const seen: {\n    [path: string]: boolean;\n  } = {};\n\n  paths.forEach(path => {\n    let dir = path;\n\n    /** Traverse directories upward in the search of package.json file */\n    const updir = (): void | (() => void) => {\n      const orig = dir;\n      dir = dirname(orig);\n\n      if (!dir || orig === dir || seen[orig]) {\n        return undefined;\n      }\n      if (mainPaths.indexOf(dir) < 0) {\n        return updir();\n      }\n\n      const pkgfile = join(orig, 'package.json');\n      seen[orig] = true;\n\n      if (!existsSync(pkgfile)) {\n        return updir();\n      }\n\n      try {\n        const info = JSON.parse(readFileSync(pkgfile, 'utf8')) as {\n          name: string;\n          version: string;\n        };\n        infos[info.name] = info.version;\n      } catch (_oO) {\n        // no-empty\n      }\n    };\n\n    updir();\n  });\n\n  return infos;\n}\n\n/** Fetches the list of modules and the versions loaded by the entry file for your node.js app. */\nfunction _getModules(): { [key: string]: string } {\n  if (!moduleCache) {\n    moduleCache = collectModules();\n  }\n  return moduleCache;\n}\n", "import { consoleSandbox, getClient, logger } from '@sentry/core';\nimport { DEBUG_BUILD } from '../debug-build';\nimport type { NodeClient } from '../sdk/client';\n\nconst DEFAULT_SHUTDOWN_TIMEOUT = 2000;\n\n/**\n * @hidden\n */\nexport function logAndExitProcess(error: unknown): void {\n  consoleSandbox(() => {\n    // eslint-disable-next-line no-console\n    console.error(error);\n  });\n\n  const client = getClient<NodeClient>();\n\n  if (client === undefined) {\n    DEBUG_BUILD && logger.warn('No NodeClient was defined, we are exiting the process now.');\n    global.process.exit(1);\n    return;\n  }\n\n  const options = client.getOptions();\n  const timeout =\n    options?.shutdownTimeout && options.shutdownTimeout > 0 ? options.shutdownTimeout : DEFAULT_SHUTDOWN_TIMEOUT;\n  client.close(timeout).then(\n    (result: boolean) => {\n      if (!result) {\n        DEBUG_BUILD && logger.warn('We reached the timeout for emptying the request buffer, still exiting now!');\n      }\n      global.process.exit(1);\n    },\n    error => {\n      DEBUG_BUILD && logger.error(error);\n    },\n  );\n}\n", "import { captureException, defineIntegration, getClient, logger } from '@sentry/core';\nimport { DEBUG_BUILD } from '../debug-build';\nimport type { NodeClient } from '../sdk/client';\nimport { logAndExitProcess } from '../utils/errorhandling';\n\ntype OnFatalErrorHandler = (firstError: Error, secondError?: Error) => void;\n\ntype TaggedListener = NodeJS.UncaughtExceptionListener & {\n  tag?: string;\n};\n\ninterface OnUncaughtExceptionOptions {\n  /**\n   * Controls if the SDK should register a handler to exit the process on uncaught errors:\n   * - `true`: The SDK will exit the process on all uncaught errors.\n   * - `false`: The SDK will only exit the process when there are no other `uncaughtException` handlers attached.\n   *\n   * Default: `false`\n   */\n  exitEvenIfOtherHandlersAreRegistered: boolean;\n\n  /**\n   * This is called when an uncaught error would cause the process to exit.\n   *\n   * @param firstError Uncaught error causing the process to exit\n   * @param secondError Will be set if the handler was called multiple times. This can happen either because\n   * `onFatalError` itself threw, or because an independent error happened somewhere else while `onFatalError`\n   * was running.\n   */\n  onFatalError?(this: void, firstError: Error, secondError?: Error): void;\n}\n\nconst INTEGRATION_NAME = 'OnUncaughtException';\n\n/**\n * Add a global exception handler.\n */\nexport const onUncaughtExceptionIntegration = defineIntegration((options: Partial<OnUncaughtExceptionOptions> = {}) => {\n  const optionsWithDefaults = {\n    exitEvenIfOtherHandlersAreRegistered: false,\n    ...options,\n  };\n\n  return {\n    name: INTEGRATION_NAME,\n    setup(client: NodeClient) {\n      global.process.on('uncaughtException', makeErrorHandler(client, optionsWithDefaults));\n    },\n  };\n});\n\ntype ErrorHandler = { _errorHandler: boolean } & ((error: Error) => void);\n\n/** Exported only for tests */\nexport function makeErrorHandler(client: NodeClient, options: OnUncaughtExceptionOptions): ErrorHandler {\n  const timeout = 2000;\n  let caughtFirstError: boolean = false;\n  let caughtSecondError: boolean = false;\n  let calledFatalError: boolean = false;\n  let firstError: Error;\n\n  const clientOptions = client.getOptions();\n\n  return Object.assign(\n    (error: Error): void => {\n      let onFatalError: OnFatalErrorHandler = logAndExitProcess;\n\n      if (options.onFatalError) {\n        onFatalError = options.onFatalError;\n      } else if (clientOptions.onFatalError) {\n        onFatalError = clientOptions.onFatalError as OnFatalErrorHandler;\n      }\n\n      // Attaching a listener to `uncaughtException` will prevent the node process from exiting. We generally do not\n      // want to alter this behaviour so we check for other listeners that users may have attached themselves and adjust\n      // exit behaviour of the SDK accordingly:\n      // - If other listeners are attached, do not exit.\n      // - If the only listener attached is ours, exit.\n      const userProvidedListenersCount = (global.process.listeners('uncaughtException') as TaggedListener[]).filter(\n        listener => {\n          // There are 3 listeners we ignore:\n          return (\n            // as soon as we're using domains this listener is attached by node itself\n            listener.name !== 'domainUncaughtExceptionClear' &&\n            // the handler we register for tracing\n            listener.tag !== 'sentry_tracingErrorCallback' &&\n            // the handler we register in this integration\n            (listener as ErrorHandler)._errorHandler !== true\n          );\n        },\n      ).length;\n\n      const processWouldExit = userProvidedListenersCount === 0;\n      const shouldApplyFatalHandlingLogic = options.exitEvenIfOtherHandlersAreRegistered || processWouldExit;\n\n      if (!caughtFirstError) {\n        // this is the first uncaught error and the ultimate reason for shutting down\n        // we want to do absolutely everything possible to ensure it gets captured\n        // also we want to make sure we don't go recursion crazy if more errors happen after this one\n        firstError = error;\n        caughtFirstError = true;\n\n        if (getClient() === client) {\n          captureException(error, {\n            originalException: error,\n            captureContext: {\n              level: 'fatal',\n            },\n            mechanism: {\n              handled: false,\n              type: 'onuncaughtexception',\n            },\n          });\n        }\n\n        if (!calledFatalError && shouldApplyFatalHandlingLogic) {\n          calledFatalError = true;\n          onFatalError(error);\n        }\n      } else {\n        if (shouldApplyFatalHandlingLogic) {\n          if (calledFatalError) {\n            // we hit an error *after* calling onFatalError - pretty boned at this point, just shut it down\n            DEBUG_BUILD &&\n              logger.warn(\n                'uncaught exception after calling fatal error shutdown callback - this is bad! forcing shutdown',\n              );\n            logAndExitProcess(error);\n          } else if (!caughtSecondError) {\n            // two cases for how we can hit this branch:\n            //   - capturing of first error blew up and we just caught the exception from that\n            //     - quit trying to capture, proceed with shutdown\n            //   - a second independent error happened while waiting for first error to capture\n            //     - want to avoid causing premature shutdown before first error capture finishes\n            // it's hard to immediately tell case 1 from case 2 without doing some fancy/questionable domain stuff\n            // so let's instead just delay a bit before we proceed with our action here\n            // in case 1, we just wait a bit unnecessarily but ultimately do the same thing\n            // in case 2, the delay hopefully made us wait long enough for the capture to finish\n            // two potential nonideal outcomes:\n            //   nonideal case 1: capturing fails fast, we sit around for a few seconds unnecessarily before proceeding correctly by calling onFatalError\n            //   nonideal case 2: case 2 happens, 1st error is captured but slowly, timeout completes before capture and we treat second error as the sendErr of (nonexistent) failure from trying to capture first error\n            // note that after hitting this branch, we might catch more errors where (caughtSecondError && !calledFatalError)\n            //   we ignore them - they don't matter to us, we're just waiting for the second error timeout to finish\n            caughtSecondError = true;\n            setTimeout(() => {\n              if (!calledFatalError) {\n                // it was probably case 1, let's treat err as the sendErr and call onFatalError\n                calledFatalError = true;\n                onFatalError(firstError, error);\n              } else {\n                // it was probably case 2, our first error finished capturing while we waited, cool, do nothing\n              }\n            }, timeout); // capturing could take at least sendTimeout to fail, plus an arbitrary second for how long it takes to collect surrounding source etc\n          }\n        }\n      }\n    },\n    { _errorHandler: true },\n  );\n}\n", "import type { Client, IntegrationFn, SeverityLevel } from '@sentry/core';\nimport { captureException, consoleSandbox, defineIntegration, getClient } from '@sentry/core';\nimport { logAndExitProcess } from '../utils/errorhandling';\n\ntype UnhandledRejectionMode = 'none' | 'warn' | 'strict';\n\ninterface OnUnhandledRejectionOptions {\n  /**\n   * Option deciding what to do after capturing unhandledRejection,\n   * that mimicks behavior of node's --unhandled-rejection flag.\n   */\n  mode: UnhandledRejectionMode;\n}\n\nconst INTEGRATION_NAME = 'OnUnhandledRejection';\n\nconst _onUnhandledRejectionIntegration = ((options: Partial<OnUnhandledRejectionOptions> = {}) => {\n  const opts = {\n    mode: 'warn',\n    ...options,\n  } satisfies OnUnhandledRejectionOptions;\n\n  return {\n    name: INTEGRATION_NAME,\n    setup(client) {\n      global.process.on('unhandledRejection', makeUnhandledPromiseHandler(client, opts));\n    },\n  };\n}) satisfies IntegrationFn;\n\n/**\n * Add a global promise rejection handler.\n */\nexport const onUnhandledRejectionIntegration = defineIntegration(_onUnhandledRejectionIntegration);\n\n/**\n * Send an exception with reason\n * @param reason string\n * @param promise promise\n *\n * Exported only for tests.\n */\nexport function makeUnhandledPromiseHandler(\n  client: Client,\n  options: OnUnhandledRejectionOptions,\n): (reason: unknown, promise: unknown) => void {\n  return function sendUnhandledPromise(reason: unknown, promise: unknown): void {\n    if (getClient() !== client) {\n      return;\n    }\n\n    const level: SeverityLevel = options.mode === 'strict' ? 'fatal' : 'error';\n\n    captureException(reason, {\n      originalException: promise,\n      captureContext: {\n        extra: { unhandledPromiseRejection: true },\n        level,\n      },\n      mechanism: {\n        handled: false,\n        type: 'onunhandledrejection',\n      },\n    });\n\n    handleRejection(reason, options.mode);\n  };\n}\n\n/**\n * Handler for `mode` option\n */\nfunction handleRejection(reason: unknown, mode: UnhandledRejectionMode): void {\n  // https://github.com/nodejs/node/blob/7cf6f9e964aa00772965391c23acda6d71972a9a/lib/internal/process/promises.js#L234-L240\n  const rejectionWarning =\n    'This error originated either by ' +\n    'throwing inside of an async function without a catch block, ' +\n    'or by rejecting a promise which was not handled with .catch().' +\n    ' The promise rejected with the reason:';\n\n  /* eslint-disable no-console */\n  if (mode === 'warn') {\n    consoleSandbox(() => {\n      console.warn(rejectionWarning);\n      console.error(reason && typeof reason === 'object' && 'stack' in reason ? reason.stack : reason);\n    });\n  } else if (mode === 'strict') {\n    consoleSandbox(() => {\n      console.warn(rejectionWarning);\n    });\n    logAndExitProcess(reason);\n  }\n  /* eslint-enable no-console */\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport enum AttributeNames {\n  EXPRESS_TYPE = 'express.type',\n  EXPRESS_NAME = 'express.name',\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport enum ExpressLayerType {\n  ROUTER = 'router',\n  MIDDLEWARE = 'middleware',\n  REQUEST_HANDLER = 'request_handler',\n}\n", "/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/ban-types */\n\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { Request } from 'express';\n\n/**\n * This symbol is used to mark express layer as being already instrumented\n * since its possible to use a given layer multiple times (ex: middlewares)\n */\nexport const kLayerPatched: unique symbol = Symbol('express-layer-patched');\n\n/**\n * This const define where on the `request` object the Instrumentation will mount the\n * current stack of express layer.\n *\n * It is necessary because express doesn't store the different layers\n * (ie: middleware, router etc) that it called to get to the current layer.\n * Given that, the only way to know the route of a given layer is to\n * store the path of where each previous layer has been mounted.\n *\n * ex: bodyParser > auth middleware > /users router > get /:id\n *  in this case the stack would be: [\"/users\", \"/:id\"]\n *\n * ex2: bodyParser > /api router > /v1 router > /users router > get /:id\n *  stack: [\"/api\", \"/v1\", \"/users\", \":id\"]\n *\n */\nexport const _LAYERS_STORE_PROPERTY = '__ot_middlewares';\n\nexport type PatchedRequest = {\n  [_LAYERS_STORE_PROPERTY]?: string[];\n} & Request;\nexport type PathParams = string | RegExp | Array<string | RegExp>;\n\n// https://github.com/expressjs/express/blob/main/lib/router/index.js#L53\nexport type ExpressRouter = {\n  stack: ExpressLayer[];\n};\n\n// https://github.com/expressjs/express/blob/main/lib/router/layer.js#L33\nexport type ExpressLayer = {\n  handle: Function & Record<string, any>;\n  [kLayerPatched]?: boolean;\n  name: string;\n  path: string;\n  route?: ExpressLayer;\n};\n", "/* eslint-disable @typescript-eslint/no-non-null-assertion */\n/* eslint-disable @typescript-eslint/explicit-function-return-type */\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { Attributes } from '@opentelemetry/api';\nimport { AttributeNames } from './enums/AttributeNames';\nimport { ExpressLayerType } from './enums/ExpressLayerType';\nimport type { ExpressLayer, PatchedRequest } from './internal-types';\nimport { _LAYERS_STORE_PROPERTY } from './internal-types';\nimport type { ExpressInstrumentationConfig, IgnoreMatcher, LayerPathSegment } from './types';\n\n/**\n * Store layers path in the request to be able to construct route later\n * @param request The request where\n * @param [value] the value to push into the array\n */\nexport const storeLayerPath = (request: PatchedRequest, value?: string): void => {\n  if (Array.isArray(request[_LAYERS_STORE_PROPERTY]) === false) {\n    Object.defineProperty(request, _LAYERS_STORE_PROPERTY, {\n      enumerable: false,\n      value: [],\n    });\n  }\n  if (value === undefined) return;\n  (request[_LAYERS_STORE_PROPERTY] as string[]).push(value);\n};\n\n/**\n * Recursively search the router path from layer stack\n * @param path The path to reconstruct\n * @param layer The layer to reconstruct from\n * @returns The reconstructed path\n */\nexport const getRouterPath = (path: string, layer: ExpressLayer): string => {\n  const stackLayer = layer.handle?.stack?.[0];\n\n  if (stackLayer?.route?.path) {\n    return `${path}${stackLayer.route.path}`;\n  }\n\n  if (stackLayer?.handle?.stack) {\n    return getRouterPath(path, stackLayer);\n  }\n\n  return path;\n};\n\n/**\n * Parse express layer context to retrieve a name and attributes.\n * @param route The route of the layer\n * @param layer Express layer\n * @param [layerPath] if present, the path on which the layer has been mounted\n */\nexport const getLayerMetadata = (\n  route: string,\n  layer: ExpressLayer,\n  layerPath?: string,\n): {\n  attributes: Attributes;\n  name: string;\n} => {\n  if (layer.name === 'router') {\n    const maybeRouterPath = getRouterPath('', layer);\n    const extractedRouterPath = maybeRouterPath ? maybeRouterPath : layerPath || route || '/';\n\n    return {\n      attributes: {\n        [AttributeNames.EXPRESS_NAME]: extractedRouterPath,\n        [AttributeNames.EXPRESS_TYPE]: ExpressLayerType.ROUTER,\n      },\n      name: `router - ${extractedRouterPath}`,\n    };\n  } else if (layer.name === 'bound dispatch' || layer.name === 'handle') {\n    return {\n      attributes: {\n        [AttributeNames.EXPRESS_NAME]: (route || layerPath) ?? 'request handler',\n        [AttributeNames.EXPRESS_TYPE]: ExpressLayerType.REQUEST_HANDLER,\n      },\n      name: `request handler${layer.path ? ` - ${route || layerPath}` : ''}`,\n    };\n  } else {\n    return {\n      attributes: {\n        [AttributeNames.EXPRESS_NAME]: layer.name,\n        [AttributeNames.EXPRESS_TYPE]: ExpressLayerType.MIDDLEWARE,\n      },\n      name: `middleware - ${layer.name}`,\n    };\n  }\n};\n\n/**\n * Check whether the given obj match pattern\n * @param constant e.g URL of request\n * @param obj obj to inspect\n * @param pattern Match pattern\n */\nconst satisfiesPattern = (constant: string, pattern: IgnoreMatcher): boolean => {\n  if (typeof pattern === 'string') {\n    return pattern === constant;\n  } else if (pattern instanceof RegExp) {\n    return pattern.test(constant);\n  } else if (typeof pattern === 'function') {\n    return pattern(constant);\n  } else {\n    throw new TypeError('Pattern is in unsupported datatype');\n  }\n};\n\n/**\n * Check whether the given request is ignored by configuration\n * It will not re-throw exceptions from `list` provided by the client\n * @param constant e.g URL of request\n * @param [list] List of ignore patterns\n * @param [onException] callback for doing something when an exception has\n *     occurred\n */\nexport const isLayerIgnored = (\n  name: string,\n  type: ExpressLayerType,\n  config?: ExpressInstrumentationConfig,\n): boolean => {\n  if (Array.isArray(config?.ignoreLayersType) && config?.ignoreLayersType?.includes(type)) {\n    return true;\n  }\n  if (Array.isArray(config?.ignoreLayers) === false) return false;\n  try {\n    for (const pattern of config!.ignoreLayers!) {\n      if (satisfiesPattern(name, pattern)) {\n        return true;\n      }\n    }\n  } catch (e) {\n    /* catch block */\n  }\n\n  return false;\n};\n\n/**\n * Converts a user-provided error value into an error and error message pair\n *\n * @param error - User-provided error value\n * @returns Both an Error or string representation of the value and an error message\n */\nexport const asErrorAndMessage = (error: unknown): [error: string | Error, message: string] =>\n  error instanceof Error ? [error, error.message] : [String(error), String(error)];\n\n/**\n * Extracts the layer path from the route arguments\n *\n * @param args - Arguments of the route\n * @returns The layer path\n */\nexport const getLayerPath = (args: [LayerPathSegment | LayerPathSegment[], ...unknown[]]): string | undefined => {\n  const firstArg = args[0];\n\n  if (Array.isArray(firstArg)) {\n    return firstArg.map(arg => extractLayerPathSegment(arg) || '').join(',');\n  }\n\n  return extractLayerPathSegment(firstArg);\n};\n\nconst extractLayerPathSegment = (arg: LayerPathSegment) => {\n  if (typeof arg === 'string') {\n    return arg;\n  }\n\n  if (arg instanceof RegExp || typeof arg === 'number') {\n    return arg.toString();\n  }\n\n  return;\n};\n", "/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/* eslint-disable @typescript-eslint/member-ordering */\n/* eslint-disable guard-for-in */\n/* eslint-disable @typescript-eslint/ban-types */\n/* eslint-disable prefer-rest-params */\n/* eslint-disable @typescript-eslint/no-this-alias */\n/* eslint-disable jsdoc/require-jsdoc */\n/* eslint-disable @typescript-eslint/explicit-function-return-type */\n/* eslint-disable @typescript-eslint/explicit-member-accessibility */\n\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { Attributes } from '@opentelemetry/api';\nimport { context, diag, SpanStatusCode, trace } from '@opentelemetry/api';\nimport { getRPCMetadata, RPCType } from '@opentelemetry/core';\nimport {\n  InstrumentationBase,\n  InstrumentationNodeModuleDefinition,\n  isWrapped,\n  safeExecuteInTheMiddle,\n} from '@opentelemetry/instrumentation';\nimport { SEMATTRS_HTTP_ROUTE } from '@opentelemetry/semantic-conventions';\nimport type * as express from 'express';\nimport { AttributeNames } from './enums/AttributeNames';\nimport { ExpressLayerType } from './enums/ExpressLayerType';\nimport type { ExpressLayer, ExpressRouter, PatchedRequest } from './internal-types';\nimport { _LAYERS_STORE_PROPERTY, kLayerPatched } from './internal-types';\nimport type { ExpressInstrumentationConfig, ExpressRequestInfo } from './types';\nimport { asErrorAndMessage, getLayerMetadata, getLayerPath, isLayerIgnored, storeLayerPath } from './utils';\n\nexport const PACKAGE_VERSION = '0.1.0';\nexport const PACKAGE_NAME = '@sentry/instrumentation-express-v5';\n\n/** Express instrumentation for OpenTelemetry */\nexport class ExpressInstrumentationV5 extends InstrumentationBase<ExpressInstrumentationConfig> {\n  constructor(config: ExpressInstrumentationConfig = {}) {\n    super(PACKAGE_NAME, PACKAGE_VERSION, config);\n  }\n\n  init() {\n    return [\n      new InstrumentationNodeModuleDefinition(\n        'express',\n        ['>=5.0.0'],\n        moduleExports => this._setup(moduleExports),\n        moduleExports => this._tearDown(moduleExports),\n      ),\n    ];\n  }\n\n  private _setup(moduleExports: any) {\n    const routerProto = moduleExports.Router.prototype;\n    // patch express.Router.route\n    if (isWrapped(routerProto.route)) {\n      this._unwrap(routerProto, 'route');\n    }\n    this._wrap(routerProto, 'route', this._getRoutePatch());\n    // patch express.Router.use\n    if (isWrapped(routerProto.use)) {\n      this._unwrap(routerProto, 'use');\n    }\n    this._wrap(routerProto, 'use', this._getRouterUsePatch() as any);\n    // patch express.Application.use\n    if (isWrapped(moduleExports.application.use)) {\n      this._unwrap(moduleExports.application, 'use');\n    }\n    this._wrap(moduleExports.application, 'use', this._getAppUsePatch() as any);\n    return moduleExports;\n  }\n\n  private _tearDown(moduleExports: any) {\n    if (moduleExports === undefined) return;\n    const routerProto = moduleExports.Router.prototype;\n    this._unwrap(routerProto, 'route');\n    this._unwrap(routerProto, 'use');\n    this._unwrap(moduleExports.application, 'use');\n  }\n\n  /**\n   * Get the patch for Router.route function\n   */\n  private _getRoutePatch() {\n    const instrumentation = this;\n    return function (original: express.Router['route']) {\n      return function route_trace(this: ExpressRouter, ...args: Parameters<typeof original>) {\n        const route = original.apply(this, args);\n        const layer = this.stack[this.stack.length - 1] as ExpressLayer;\n        instrumentation._applyPatch(layer, getLayerPath(args));\n        return route;\n      };\n    };\n  }\n\n  /**\n   * Get the patch for Router.use function\n   */\n  private _getRouterUsePatch() {\n    const instrumentation = this;\n    return function (original: express.Router['use']) {\n      return function use(this: express.Application, ...args: Parameters<typeof original>) {\n        const route = original.apply(this, args);\n        const layer = this.stack[this.stack.length - 1] as ExpressLayer;\n        instrumentation._applyPatch(layer, getLayerPath(args));\n        return route;\n      };\n    };\n  }\n\n  /**\n   * Get the patch for Application.use function\n   */\n  private _getAppUsePatch() {\n    const instrumentation = this;\n    return function (original: express.Application['use']) {\n      return function use(\n        // In express 5.x the router is stored in `router` whereas in 4.x it's stored in `_router`\n        this: { _router?: ExpressRouter; router?: ExpressRouter },\n        ...args: Parameters<typeof original>\n      ) {\n        // if we access app.router in express 4.x we trigger an assertion error\n        // This property existed in v3, was removed in v4 and then re-added in v5\n        const router = this.router;\n        const route = original.apply(this, args);\n        if (router) {\n          const layer = router.stack[router.stack.length - 1] as ExpressLayer;\n          instrumentation._applyPatch(layer, getLayerPath(args));\n        }\n        return route;\n      };\n    };\n  }\n\n  /** Patch each express layer to create span and propagate context */\n  private _applyPatch(this: ExpressInstrumentationV5, layer: ExpressLayer, layerPath?: string) {\n    const instrumentation = this;\n    // avoid patching multiple times the same layer\n    if (layer[kLayerPatched] === true) return;\n    layer[kLayerPatched] = true;\n\n    this._wrap(layer, 'handle', original => {\n      // TODO: instrument error handlers\n      if (original.length === 4) return original;\n\n      const patched = function (this: ExpressLayer, req: PatchedRequest, res: express.Response) {\n        storeLayerPath(req, layerPath);\n        const route = (req[_LAYERS_STORE_PROPERTY] as string[])\n          .filter(path => path !== '/' && path !== '/*')\n          .join('')\n          // remove duplicate slashes to normalize route\n          .replace(/\\/{2,}/g, '/');\n\n        const actualRoute = route.length > 0 ? route : undefined;\n\n        const attributes: Attributes = {\n          // eslint-disable-next-line deprecation/deprecation\n          [SEMATTRS_HTTP_ROUTE]: actualRoute,\n        };\n        const metadata = getLayerMetadata(route, layer, layerPath);\n        const type = metadata.attributes[AttributeNames.EXPRESS_TYPE] as ExpressLayerType;\n\n        const rpcMetadata = getRPCMetadata(context.active());\n        if (rpcMetadata?.type === RPCType.HTTP) {\n          rpcMetadata.route = actualRoute;\n        }\n\n        // verify against the config if the layer should be ignored\n        if (isLayerIgnored(metadata.name, type, instrumentation.getConfig())) {\n          if (type === ExpressLayerType.MIDDLEWARE) {\n            (req[_LAYERS_STORE_PROPERTY] as string[]).pop();\n          }\n          return original.apply(this, arguments);\n        }\n\n        if (trace.getSpan(context.active()) === undefined) {\n          return original.apply(this, arguments);\n        }\n\n        const spanName = instrumentation._getSpanName(\n          {\n            request: req,\n            layerType: type,\n            route,\n          },\n          metadata.name,\n        );\n        const span = instrumentation.tracer.startSpan(spanName, {\n          attributes: Object.assign(attributes, metadata.attributes),\n        });\n\n        const { requestHook } = instrumentation.getConfig();\n        if (requestHook) {\n          safeExecuteInTheMiddle(\n            () =>\n              requestHook(span, {\n                request: req,\n                layerType: type,\n                route,\n              }),\n            e => {\n              if (e) {\n                diag.error('express instrumentation: request hook failed', e);\n              }\n            },\n            true,\n          );\n        }\n\n        let spanHasEnded = false;\n        if (metadata.attributes[AttributeNames.EXPRESS_TYPE] !== ExpressLayerType.MIDDLEWARE) {\n          span.end();\n          spanHasEnded = true;\n        }\n        // listener for response.on('finish')\n        const onResponseFinish = () => {\n          if (spanHasEnded === false) {\n            spanHasEnded = true;\n            span.end();\n          }\n        };\n\n        // verify we have a callback\n        const args = Array.from(arguments);\n        const callbackIdx = args.findIndex(arg => typeof arg === 'function');\n        if (callbackIdx >= 0) {\n          arguments[callbackIdx] = function () {\n            // express considers anything but an empty value, \"route\" or \"router\"\n            // passed to its callback to be an error\n            const maybeError = arguments[0];\n            const isError = ![undefined, null, 'route', 'router'].includes(maybeError);\n            if (!spanHasEnded && isError) {\n              const [error, message] = asErrorAndMessage(maybeError);\n              span.recordException(error);\n              span.setStatus({\n                code: SpanStatusCode.ERROR,\n                message,\n              });\n            }\n\n            if (spanHasEnded === false) {\n              spanHasEnded = true;\n              req.res?.removeListener('finish', onResponseFinish);\n              span.end();\n            }\n            if (!(req.route && isError)) {\n              (req[_LAYERS_STORE_PROPERTY] as string[]).pop();\n            }\n            const callback = args[callbackIdx] as Function;\n            return callback.apply(this, arguments);\n          };\n        }\n\n        try {\n          return original.apply(this, arguments);\n        } catch (anyError) {\n          const [error, message] = asErrorAndMessage(anyError);\n          span.recordException(error);\n          span.setStatus({\n            code: SpanStatusCode.ERROR,\n            message,\n          });\n          throw anyError;\n        } finally {\n          /**\n           * At this point if the callback wasn't called, that means either the\n           * layer is asynchronous (so it will call the callback later on) or that\n           * the layer directly end the http response, so we'll hook into the \"finish\"\n           * event to handle the later case.\n           */\n          if (!spanHasEnded) {\n            res.once('finish', onResponseFinish);\n          }\n        }\n      };\n\n      // `handle` isn't just a regular function in some cases. It also contains\n      // some properties holding metadata and state so we need to proxy them\n      // through through patched function\n      // ref: https://github.com/open-telemetry/opentelemetry-js-contrib/issues/1950\n      // Also some apps/libs do their own patching before OTEL and have these properties\n      // in the proptotype. So we use a `for...in` loop to get own properties and also\n      // any enumerable prop in the prototype chain\n      // ref: https://github.com/open-telemetry/opentelemetry-js-contrib/issues/2271\n      for (const key in original) {\n        Object.defineProperty(patched, key, {\n          get() {\n            return original[key];\n          },\n          set(value) {\n            original[key] = value;\n          },\n        });\n      }\n      return patched;\n    });\n  }\n\n  _getSpanName(info: ExpressRequestInfo, defaultName: string) {\n    const { spanNameHook } = this.getConfig();\n\n    if (!(spanNameHook instanceof Function)) {\n      return defaultName;\n    }\n\n    try {\n      return spanNameHook(info, defaultName) ?? defaultName;\n    } catch (err) {\n      diag.error('express instrumentation: error calling span name rewrite hook', err);\n      return defaultName;\n    }\n  }\n}\n", "import type * as http from 'node:http';\nimport type { Span } from '@opentelemetry/api';\nimport type { ExpressRequestInfo } from '@opentelemetry/instrumentation-express';\nimport { ExpressInstrumentation } from '@opentelemetry/instrumentation-express';\nimport type { IntegrationFn } from '@sentry/core';\nimport {\n  captureException,\n  defineIntegration,\n  getDefaultIsolationScope,\n  getIsolationScope,\n  httpRequestToRequestData,\n  logger,\n  SEMANTIC_ATTRIBUTE_SENTRY_OP,\n  spanToJSON,\n} from '@sentry/core';\nimport { DEBUG_BUILD } from '../../debug-build';\nimport { generateInstrumentOnce } from '../../otel/instrument';\nimport { addOriginToSpan } from '../../utils/addOriginToSpan';\nimport { ensureIsWrapped } from '../../utils/ensureIsWrapped';\nimport { ExpressInstrumentationV5 } from './express-v5/instrumentation';\n\nconst INTEGRATION_NAME = 'Express';\nconst INTEGRATION_NAME_V5 = 'Express-V5';\n\nfunction requestHook(span: Span): void {\n  addOriginToSpan(span, 'auto.http.otel.express');\n\n  const attributes = spanToJSON(span).data;\n  // this is one of: middleware, request_handler, router\n  const type = attributes['express.type'];\n\n  if (type) {\n    span.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_OP, `${type}.express`);\n  }\n\n  // Also update the name, we don't need to \"middleware - \" prefix\n  const name = attributes['express.name'];\n  if (typeof name === 'string') {\n    span.updateName(name);\n  }\n}\n\nfunction spanNameHook(info: ExpressRequestInfo<unknown>, defaultName: string): string {\n  if (getIsolationScope() === getDefaultIsolationScope()) {\n    DEBUG_BUILD && logger.warn('Isolation scope is still default isolation scope - skipping setting transactionName');\n    return defaultName;\n  }\n  if (info.layerType === 'request_handler') {\n    // type cast b/c Otel unfortunately types info.request as any :(\n    const req = info.request as { method?: string };\n    const method = req.method ? req.method.toUpperCase() : 'GET';\n    getIsolationScope().setTransactionName(`${method} ${info.route}`);\n  }\n  return defaultName;\n}\n\nexport const instrumentExpress = generateInstrumentOnce(\n  INTEGRATION_NAME,\n  () =>\n    new ExpressInstrumentation({\n      requestHook: span => requestHook(span),\n      spanNameHook: (info, defaultName) => spanNameHook(info, defaultName),\n    }),\n);\n\nexport const instrumentExpressV5 = generateInstrumentOnce(\n  INTEGRATION_NAME_V5,\n  () =>\n    new ExpressInstrumentationV5({\n      requestHook: span => requestHook(span),\n      spanNameHook: (info, defaultName) => spanNameHook(info, defaultName),\n    }),\n);\n\nconst _expressIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentExpress();\n      instrumentExpressV5();\n    },\n  };\n}) satisfies IntegrationFn;\n\n/**\n * Adds Sentry tracing instrumentation for [Express](https://expressjs.com/).\n *\n * If you also want to capture errors, you need to call `setupExpressErrorHandler(app)` after you set up your Express server.\n *\n * For more information, see the [express documentation](https://docs.sentry.io/platforms/javascript/guides/express/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *   integrations: [Sentry.expressIntegration()],\n * })\n * ```\n */\nexport const expressIntegration = defineIntegration(_expressIntegration);\n\ninterface MiddlewareError extends Error {\n  status?: number | string;\n  statusCode?: number | string;\n  status_code?: number | string;\n  output?: {\n    statusCode?: number | string;\n  };\n}\n\ntype ExpressMiddleware = (req: http.IncomingMessage, res: http.ServerResponse, next: () => void) => void;\n\ntype ExpressErrorMiddleware = (\n  error: MiddlewareError,\n  req: http.IncomingMessage,\n  res: http.ServerResponse,\n  next: (error: MiddlewareError) => void,\n) => void;\n\ninterface ExpressHandlerOptions {\n  /**\n   * Callback method deciding whether error should be captured and sent to Sentry\n   * @param error Captured middleware error\n   */\n  shouldHandleError?(this: void, error: MiddlewareError): boolean;\n}\n\n/**\n * An Express-compatible error handler.\n */\nexport function expressErrorHandler(options?: ExpressHandlerOptions): ExpressErrorMiddleware {\n  return function sentryErrorMiddleware(\n    error: MiddlewareError,\n    request: http.IncomingMessage,\n    res: http.ServerResponse,\n    next: (error: MiddlewareError) => void,\n  ): void {\n    const normalizedRequest = httpRequestToRequestData(request);\n    // Ensure we use the express-enhanced request here, instead of the plain HTTP one\n    // When an error happens, the `expressRequestHandler` middleware does not run, so we set it here too\n    getIsolationScope().setSDKProcessingMetadata({ normalizedRequest });\n\n    const shouldHandleError = options?.shouldHandleError || defaultShouldHandleError;\n\n    if (shouldHandleError(error)) {\n      const eventId = captureException(error, { mechanism: { type: 'middleware', handled: false } });\n      (res as { sentry?: string }).sentry = eventId;\n    }\n\n    next(error);\n  };\n}\n\nfunction expressRequestHandler(): ExpressMiddleware {\n  return function sentryRequestMiddleware(\n    request: http.IncomingMessage,\n    _res: http.ServerResponse,\n    next: () => void,\n  ): void {\n    const normalizedRequest = httpRequestToRequestData(request);\n    // Ensure we use the express-enhanced request here, instead of the plain HTTP one\n    getIsolationScope().setSDKProcessingMetadata({ normalizedRequest });\n\n    next();\n  };\n}\n\n/**\n * Add an Express error handler to capture errors to Sentry.\n *\n * The error handler must be before any other middleware and after all controllers.\n *\n * @param app The Express instances\n * @param options {ExpressHandlerOptions} Configuration options for the handler\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n * const express = require(\"express\");\n *\n * const app = express();\n *\n * // Add your routes, etc.\n *\n * // Add this after all routes,\n * // but before any and other error-handling middlewares are defined\n * Sentry.setupExpressErrorHandler(app);\n *\n * app.listen(3000);\n * ```\n */\nexport function setupExpressErrorHandler(\n  app: { use: (middleware: ExpressMiddleware | ExpressErrorMiddleware) => unknown },\n  options?: ExpressHandlerOptions,\n): void {\n  app.use(expressRequestHandler());\n  app.use(expressErrorHandler(options));\n  ensureIsWrapped(app.use, 'express');\n}\n\nfunction getStatusCodeFromResponse(error: MiddlewareError): number {\n  const statusCode = error.status || error.statusCode || error.status_code || error.output?.statusCode;\n  return statusCode ? parseInt(statusCode as string, 10) : 500;\n}\n\n/** Returns true if response code is internal server error */\nfunction defaultShouldHandleError(error: MiddlewareError): boolean {\n  const status = getStatusCodeFromResponse(error);\n  return status >= 500;\n}\n", "// Vendored from https://github.com/open-telemetry/opentelemetry-js-contrib/blob/407f61591ba69a39a6908264379d4d98a48dbec4/plugins/node/opentelemetry-instrumentation-fastify/src/enums/AttributeNames.ts\n//\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport enum AttributeNames {\n  FASTIFY_NAME = 'fastify.name',\n  FASTIFY_TYPE = 'fastify.type',\n  HOOK_NAME = 'hook.name',\n  PLUGIN_NAME = 'plugin.name',\n}\n\nexport enum FastifyTypes {\n  MIDDLEWARE = 'middleware',\n  REQUEST_HANDLER = 'request_handler',\n}\n\nexport enum FastifyNames {\n  MIDDLEWARE = 'middleware',\n  REQUEST_HANDLER = 'request handler',\n}\n", "// Vendored from https://github.com/open-telemetry/opentelemetry-js-contrib/blob/407f61591ba69a39a6908264379d4d98a48dbec4/plugins/node/opentelemetry-instrumentation-fastify/src/constants.ts\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const spanRequestSymbol = Symbol('opentelemetry.instrumentation.fastify.request_active_span');\n\n// The instrumentation creates a span for invocations of lifecycle hook handlers\n// that take `(request, reply, ...[, done])` arguments. Currently this is all\n// lifecycle hooks except `onRequestAbort`.\n// https://fastify.dev/docs/latest/Reference/Hooks\nexport const hooksNamesToWrap = new Set([\n  'onTimeout',\n  'onRequest',\n  'preParsing',\n  'preValidation',\n  'preSerialization',\n  'preHandler',\n  'onSend',\n  'onResponse',\n  'onError',\n]);\n", "// Vendored from: https://github.com/open-telemetry/opentelemetry-js-contrib/blob/407f61591ba69a39a6908264379d4d98a48dbec4/plugins/node/opentelemetry-instrumentation-fastify/src/utils.ts\n/* eslint-disable jsdoc/require-jsdoc */\n/* eslint-disable @typescript-eslint/no-dynamic-delete */\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/* eslint-disable @typescript-eslint/explicit-function-return-type */\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { type Attributes, type Span, type Tracer, SpanStatusCode } from '@opentelemetry/api';\nimport { spanRequestSymbol } from './constants';\nimport type { PluginFastifyReply } from './internal-types';\n\n/**\n * Starts Span\n * @param reply - reply function\n * @param tracer - tracer\n * @param spanName - span name\n * @param spanAttributes - span attributes\n */\nexport function startSpan(\n  reply: PluginFastifyReply,\n  tracer: Tracer,\n  spanName: string,\n  spanAttributes: Attributes = {},\n) {\n  const span = tracer.startSpan(spanName, { attributes: spanAttributes });\n\n  const spans: Span[] = reply[spanRequestSymbol] || [];\n  spans.push(span);\n\n  // eslint-disable-next-line @typescript-eslint/no-floating-promises\n  Object.defineProperty(reply, spanRequestSymbol, {\n    enumerable: false,\n    configurable: true,\n    value: spans,\n  });\n\n  return span;\n}\n\n/**\n * Ends span\n * @param reply - reply function\n * @param err - error\n */\nexport function endSpan(reply: PluginFastifyReply, err?: any) {\n  const spans = reply[spanRequestSymbol] || [];\n  // there is no active span, or it has already ended\n  if (!spans.length) {\n    return;\n  }\n  // biome-ignore lint/complexity/noForEach: <explanation>\n  spans.forEach((span: Span) => {\n    if (err) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: err.message,\n      });\n      span.recordException(err);\n    }\n    span.end();\n  });\n  delete reply[spanRequestSymbol];\n}\n\n// @TODO after approve add this to instrumentation package and replace usage\n// when it will be released\n\n/**\n * This function handles the missing case from instrumentation package when\n * execute can either return a promise or void. And using async is not an\n * option as it is producing unwanted side effects.\n * @param execute - function to be executed\n * @param onFinish - function called when function executed\n * @param preventThrowingError - prevent to throw error when execute\n * function fails\n */\nexport function safeExecuteInTheMiddleMaybePromise<T>(\n  execute: () => Promise<T>,\n  onFinish: (e: unknown, result?: T) => void,\n  preventThrowingError?: boolean,\n): Promise<T>;\nexport function safeExecuteInTheMiddleMaybePromise<T>(\n  execute: () => T,\n  onFinish: (e: unknown, result?: T) => void,\n  preventThrowingError?: boolean,\n): T;\nexport function safeExecuteInTheMiddleMaybePromise<T>(\n  execute: () => T | Promise<T>,\n  onFinish: (e: unknown, result?: T) => void,\n  preventThrowingError?: boolean,\n): T | Promise<T> | undefined {\n  let error: unknown;\n  let result: T | Promise<T> | undefined = undefined;\n  try {\n    result = execute();\n\n    if (isPromise(result)) {\n      result.then(\n        res => onFinish(undefined, res),\n        err => onFinish(err),\n      );\n    }\n  } catch (e) {\n    error = e;\n  } finally {\n    if (!isPromise(result)) {\n      onFinish(error, result);\n      if (error && !preventThrowingError) {\n        // eslint-disable-next-line no-unsafe-finally\n        throw error;\n      }\n    }\n    // eslint-disable-next-line no-unsafe-finally\n    return result;\n  }\n}\n\nfunction isPromise<T>(val: T | Promise<T>): val is Promise<T> {\n  return (\n    (typeof val === 'object' && val && typeof Object.getOwnPropertyDescriptor(val, 'then')?.value === 'function') ||\n    false\n  );\n}\n", "// Vendored from: https://github.com/open-telemetry/opentelemetry-js-contrib/blob/407f61591ba69a39a6908264379d4d98a48dbec4/plugins/node/opentelemetry-instrumentation-fastify/src/instrumentation.ts\n/* eslint-disable @typescript-eslint/no-this-alias */\n/* eslint-disable jsdoc/require-jsdoc */\n/* eslint-disable @typescript-eslint/explicit-function-return-type */\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { type Attributes, context, SpanStatusCode, trace } from '@opentelemetry/api';\nimport { getRPCMetadata, RPCType } from '@opentelemetry/core';\nimport {\n  InstrumentationBase,\n  InstrumentationNodeModuleDefinition,\n  safeExecuteInTheMiddle,\n} from '@opentelemetry/instrumentation';\nimport { SEMATTRS_HTTP_ROUTE } from '@opentelemetry/semantic-conventions';\nimport type { Span } from '@sentry/core';\nimport {\n  getClient,\n  getIsolationScope,\n  SEMANTIC_ATTRIBUTE_SENTRY_OP,\n  SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN,\n  spanToJSON,\n} from '@sentry/core';\nimport type {\n  FastifyErrorCodes,\n  FastifyInstance,\n  FastifyReply,\n  FastifyRequest,\n  HandlerOriginal,\n  HookHandlerDoneFunction,\n} from '../types';\nimport { AttributeNames, FastifyNames, FastifyTypes } from './enums/AttributeNames';\nimport type { PluginFastifyReply } from './internal-types';\nimport type { FastifyInstrumentationConfig } from './types';\nimport { endSpan, safeExecuteInTheMiddleMaybePromise, startSpan } from './utils';\n/** @knipignore */\n\nconst PACKAGE_VERSION = '0.1.0';\n\nconst PACKAGE_NAME = '@sentry/instrumentation-fastify-v3';\nconst ANONYMOUS_NAME = 'anonymous';\n\n// The instrumentation creates a span for invocations of lifecycle hook handlers\n// that take `(request, reply, ...[, done])` arguments. Currently this is all\n// lifecycle hooks except `onRequestAbort`.\n// https://fastify.dev/docs/latest/Reference/Hooks\nconst hooksNamesToWrap = new Set([\n  'onTimeout',\n  'onRequest',\n  'preParsing',\n  'preValidation',\n  'preSerialization',\n  'preHandler',\n  'onSend',\n  'onResponse',\n  'onError',\n]);\n\n/**\n * Fastify instrumentation for OpenTelemetry\n */\nexport class FastifyInstrumentationV3 extends InstrumentationBase<FastifyInstrumentationConfig> {\n  public constructor(config: FastifyInstrumentationConfig = {}) {\n    super(PACKAGE_NAME, PACKAGE_VERSION, config);\n  }\n\n  public init(): InstrumentationNodeModuleDefinition[] {\n    return [\n      new InstrumentationNodeModuleDefinition('fastify', ['>=3.0.0 <4'], moduleExports => {\n        return this._patchConstructor(moduleExports);\n      }),\n    ];\n  }\n\n  private _hookOnRequest() {\n    const instrumentation = this;\n\n    return function onRequest(request: FastifyRequest, reply: FastifyReply, done: HookHandlerDoneFunction) {\n      if (!instrumentation.isEnabled()) {\n        return done();\n      }\n      instrumentation._wrap(reply, 'send', instrumentation._patchSend());\n\n      const anyRequest = request as any;\n\n      const rpcMetadata = getRPCMetadata(context.active());\n      const routeName = anyRequest.routeOptions\n        ? anyRequest.routeOptions.url // since fastify@4.10.0\n        : request.routerPath;\n      if (routeName && rpcMetadata?.type === RPCType.HTTP) {\n        rpcMetadata.route = routeName;\n      }\n\n      const method = request.method || 'GET';\n\n      getIsolationScope().setTransactionName(`${method} ${routeName}`);\n      done();\n    };\n  }\n\n  private _wrapHandler(\n    pluginName: string,\n    hookName: string,\n    original: HandlerOriginal,\n    syncFunctionWithDone: boolean,\n  ): () => Promise<unknown> {\n    const instrumentation = this;\n    this._diag.debug('Patching fastify route.handler function');\n\n    return function (this: any, ...args: unknown[]): Promise<unknown> {\n      if (!instrumentation.isEnabled()) {\n        return original.apply(this, args);\n      }\n\n      const name = original.name || pluginName || ANONYMOUS_NAME;\n      const spanName = `${FastifyNames.MIDDLEWARE} - ${name}`;\n\n      const reply = args[1] as PluginFastifyReply;\n\n      const span = startSpan(reply, instrumentation.tracer, spanName, {\n        [AttributeNames.FASTIFY_TYPE]: FastifyTypes.MIDDLEWARE,\n        [AttributeNames.PLUGIN_NAME]: pluginName,\n        [AttributeNames.HOOK_NAME]: hookName,\n      });\n\n      const origDone = syncFunctionWithDone && (args[args.length - 1] as HookHandlerDoneFunction);\n      if (origDone) {\n        args[args.length - 1] = function (...doneArgs: Parameters<HookHandlerDoneFunction>) {\n          endSpan(reply);\n          origDone.apply(this, doneArgs);\n        };\n      }\n\n      return context.with(trace.setSpan(context.active(), span), () => {\n        return safeExecuteInTheMiddleMaybePromise(\n          () => {\n            return original.apply(this, args);\n          },\n          err => {\n            if (err instanceof Error) {\n              span.setStatus({\n                code: SpanStatusCode.ERROR,\n                message: err.message,\n              });\n              span.recordException(err);\n            }\n            // async hooks should end the span as soon as the promise is resolved\n            if (!syncFunctionWithDone) {\n              endSpan(reply);\n            }\n          },\n        );\n      });\n    };\n  }\n\n  private _wrapAddHook(): (original: FastifyInstance['addHook']) => () => FastifyInstance {\n    const instrumentation = this;\n    this._diag.debug('Patching fastify server.addHook function');\n\n    // biome-ignore lint/complexity/useArrowFunction: <explanation>\n    return function (original: FastifyInstance['addHook']): () => FastifyInstance {\n      return function wrappedAddHook(this: any, ...args: any) {\n        const name = args[0] as string;\n        const handler = args[1] as HandlerOriginal;\n        const pluginName = this.pluginName;\n        if (!hooksNamesToWrap.has(name)) {\n          return original.apply(this, args);\n        }\n\n        const syncFunctionWithDone =\n          typeof args[args.length - 1] === 'function' && handler.constructor.name !== 'AsyncFunction';\n\n        return original.apply(this, [\n          name,\n          instrumentation._wrapHandler(pluginName, name, handler, syncFunctionWithDone),\n        ] as never);\n      };\n    };\n  }\n\n  private _patchConstructor(moduleExports: {\n    fastify: () => FastifyInstance;\n    errorCodes: FastifyErrorCodes | undefined;\n  }): () => FastifyInstance {\n    const instrumentation = this;\n\n    function fastify(this: FastifyInstance, ...args: any) {\n      const app: FastifyInstance = moduleExports.fastify.apply(this, args);\n      app.addHook('onRequest', instrumentation._hookOnRequest());\n      app.addHook('preHandler', instrumentation._hookPreHandler());\n\n      instrumentClient();\n\n      instrumentation._wrap(app, 'addHook', instrumentation._wrapAddHook());\n\n      return app;\n    }\n\n    if (moduleExports.errorCodes !== undefined) {\n      fastify.errorCodes = moduleExports.errorCodes;\n    }\n    fastify.fastify = fastify;\n    fastify.default = fastify;\n    return fastify;\n  }\n\n  private _patchSend() {\n    const instrumentation = this;\n    this._diag.debug('Patching fastify reply.send function');\n\n    return function patchSend(original: () => FastifyReply): () => FastifyReply {\n      return function send(this: FastifyReply, ...args: any) {\n        const maybeError: any = args[0];\n\n        if (!instrumentation.isEnabled()) {\n          return original.apply(this, args);\n        }\n\n        return safeExecuteInTheMiddle<FastifyReply>(\n          () => {\n            return original.apply(this, args);\n          },\n          err => {\n            if (!err && maybeError instanceof Error) {\n              // eslint-disable-next-line no-param-reassign\n              err = maybeError;\n            }\n            endSpan(this, err);\n          },\n        );\n      };\n    };\n  }\n\n  private _hookPreHandler() {\n    const instrumentation = this;\n    this._diag.debug('Patching fastify preHandler function');\n\n    return function preHandler(this: any, request: FastifyRequest, reply: FastifyReply, done: HookHandlerDoneFunction) {\n      if (!instrumentation.isEnabled()) {\n        return done();\n      }\n      const anyRequest = request as any;\n\n      const handler = anyRequest.routeOptions?.handler || anyRequest.context?.handler;\n      const handlerName = handler?.name.startsWith('bound ') ? handler.name.substring(6) : handler?.name;\n      const spanName = `${FastifyNames.REQUEST_HANDLER} - ${handlerName || this.pluginName || ANONYMOUS_NAME}`;\n\n      const spanAttributes: Attributes = {\n        [AttributeNames.PLUGIN_NAME]: this.pluginName,\n        [AttributeNames.FASTIFY_TYPE]: FastifyTypes.REQUEST_HANDLER,\n        // eslint-disable-next-line deprecation/deprecation\n        [SEMATTRS_HTTP_ROUTE]: anyRequest.routeOptions\n          ? anyRequest.routeOptions.url // since fastify@4.10.0\n          : request.routerPath,\n      };\n      if (handlerName) {\n        spanAttributes[AttributeNames.FASTIFY_NAME] = handlerName;\n      }\n      const span = startSpan(reply, instrumentation.tracer, spanName, spanAttributes);\n\n      addFastifyV3SpanAttributes(span);\n\n      const { requestHook } = instrumentation.getConfig();\n      if (requestHook) {\n        safeExecuteInTheMiddle(\n          () => requestHook(span, { request }),\n          e => {\n            if (e) {\n              instrumentation._diag.error('request hook failed', e);\n            }\n          },\n          true,\n        );\n      }\n\n      return context.with(trace.setSpan(context.active(), span), () => {\n        done();\n      });\n    };\n  }\n}\n\nfunction instrumentClient(): void {\n  const client = getClient();\n  if (client) {\n    client.on('spanStart', (span: Span) => {\n      addFastifyV3SpanAttributes(span);\n    });\n  }\n}\n\nfunction addFastifyV3SpanAttributes(span: Span): void {\n  const attributes = spanToJSON(span).data;\n\n  // this is one of: middleware, request_handler\n  const type = attributes['fastify.type'];\n\n  // If this is already set, or we have no fastify span, no need to process again...\n  if (attributes[SEMANTIC_ATTRIBUTE_SENTRY_OP] || !type) {\n    return;\n  }\n\n  span.setAttributes({\n    [SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.http.otel.fastify',\n    [SEMANTIC_ATTRIBUTE_SENTRY_OP]: `${type}.fastify`,\n  });\n\n  // Also update the name, we don't need to \"middleware - \" prefix\n  const name = attributes['fastify.name'] || attributes['plugin.name'] || attributes['hook.name'];\n  if (typeof name === 'string') {\n    // Try removing `fastify -> ` and `@fastify/otel -> ` prefixes\n    // This is a bit of a hack, and not always working for all spans\n    // But it's the best we can do without a proper API\n    const updatedName = name.replace(/^fastify -> /, '').replace(/^@fastify\\/otel -> /, '');\n\n    span.updateName(updatedName);\n  }\n}\n", "import * as diagnosticsChannel from 'node:diagnostics_channel';\nimport { FastifyOtelInstrumentation } from '@fastify/otel';\nimport type { Instrumentation, InstrumentationConfig } from '@opentelemetry/instrumentation';\nimport type { IntegrationFn, Span } from '@sentry/core';\nimport {\n  captureException,\n  defineIntegration,\n  getClient,\n  getIsolationScope,\n  logger,\n  SEMANTIC_ATTRIBUTE_SENTRY_OP,\n  SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN,\n  spanToJSON,\n} from '@sentry/core';\nimport { DEBUG_BUILD } from '../../../debug-build';\nimport { generateInstrumentOnce } from '../../../otel/instrument';\nimport type { FastifyInstance, FastifyReply, FastifyRequest } from './types';\nimport { FastifyInstrumentationV3 } from './v3/instrumentation';\n\ninterface FastifyHandlerOptions {\n  /**\n   * Callback method deciding whether error should be captured and sent to Sentry\n   *\n   * @param error Captured Fastify error\n   * @param request Fastify request (or any object containing at least method, routeOptions.url, and routerPath)\n   * @param reply Fastify reply (or any object containing at least statusCode)\n   *\n   * @example\n   *\n   * ```javascript\n   * setupFastifyErrorHandler(app, {\n   *   shouldHandleError(_error, _request, reply) {\n   *     return reply.statusCode >= 400;\n   *   },\n   * });\n   * ```\n   *\n   * If using TypeScript, you can cast the request and reply to get full type safety.\n   *\n   * ```typescript\n   * import type { FastifyRequest, FastifyReply } from 'fastify';\n   *\n   * setupFastifyErrorHandler(app, {\n   *   shouldHandleError(error, minimalRequest, minimalReply) {\n   *     const request = minimalRequest as FastifyRequest;\n   *     const reply = minimalReply as FastifyReply;\n   *     return reply.statusCode >= 500;\n   *   },\n   * });\n   * ```\n   */\n  shouldHandleError: (error: Error, request: FastifyRequest, reply: FastifyReply) => boolean;\n}\n\nconst INTEGRATION_NAME = 'Fastify';\nconst INTEGRATION_NAME_V3 = 'Fastify-V3';\n\nexport const instrumentFastifyV3 = generateInstrumentOnce(INTEGRATION_NAME_V3, () => new FastifyInstrumentationV3());\n\nexport const instrumentFastify = generateInstrumentOnce(INTEGRATION_NAME, () => {\n  const fastifyOtelInstrumentationInstance = new FastifyOtelInstrumentation();\n  const plugin = fastifyOtelInstrumentationInstance.plugin();\n\n  // This message handler works for Fastify versions 3, 4 and 5\n  diagnosticsChannel.subscribe('fastify.initialization', message => {\n    const fastifyInstance = (message as { fastify?: FastifyInstance }).fastify;\n\n    fastifyInstance?.register(plugin).after(err => {\n      if (err) {\n        DEBUG_BUILD && logger.error('Failed to setup Fastify instrumentation', err);\n      } else {\n        instrumentClient();\n\n        if (fastifyInstance) {\n          instrumentOnRequest(fastifyInstance);\n        }\n      }\n    });\n  });\n\n  // Returning this as unknown not to deal with the internal types of the FastifyOtelInstrumentation\n  return fastifyOtelInstrumentationInstance as Instrumentation<InstrumentationConfig>;\n});\n\nconst _fastifyIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentFastifyV3();\n      instrumentFastify();\n    },\n  };\n}) satisfies IntegrationFn;\n\n/**\n * Adds Sentry tracing instrumentation for [Fastify](https://fastify.dev/).\n *\n * If you also want to capture errors, you need to call `setupFastifyErrorHandler(app)` after you set up your Fastify server.\n *\n * For more information, see the [fastify documentation](https://docs.sentry.io/platforms/javascript/guides/fastify/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *   integrations: [Sentry.fastifyIntegration()],\n * })\n * ```\n */\nexport const fastifyIntegration = defineIntegration(_fastifyIntegration);\n\n/**\n * Default function to determine if an error should be sent to Sentry\n *\n * 3xx and 4xx errors are not sent by default.\n */\nfunction defaultShouldHandleError(_error: Error, _request: FastifyRequest, reply: FastifyReply): boolean {\n  const statusCode = reply.statusCode;\n  // 3xx and 4xx errors are not sent by default.\n  return statusCode >= 500 || statusCode <= 299;\n}\n\n/**\n * Add an Fastify error handler to capture errors to Sentry.\n *\n * @param fastify The Fastify instance to which to add the error handler\n * @param options Configuration options for the handler\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n * const Fastify = require(\"fastify\");\n *\n * const app = Fastify();\n *\n * Sentry.setupFastifyErrorHandler(app);\n *\n * // Add your routes, etc.\n *\n * app.listen({ port: 3000 });\n * ```\n */\nexport function setupFastifyErrorHandler(fastify: FastifyInstance, options?: Partial<FastifyHandlerOptions>): void {\n  const shouldHandleError = options?.shouldHandleError || defaultShouldHandleError;\n\n  const plugin = Object.assign(\n    function (fastify: FastifyInstance, _options: unknown, done: () => void): void {\n      fastify.addHook('onError', async (request, reply, error) => {\n        if (shouldHandleError(error, request, reply)) {\n          captureException(error);\n        }\n      });\n\n      done();\n    },\n    {\n      [Symbol.for('skip-override')]: true,\n      [Symbol.for('fastify.display-name')]: 'sentry-fastify-error-handler',\n    },\n  );\n\n  // eslint-disable-next-line @typescript-eslint/no-floating-promises\n  fastify.register(plugin);\n}\n\nfunction addFastifySpanAttributes(span: Span): void {\n  const spanJSON = spanToJSON(span);\n  const spanName = spanJSON.description;\n  const attributes = spanJSON.data;\n\n  const type = attributes['fastify.type'];\n\n  const isHook = type === 'hook';\n  const isHandler = type === spanName?.startsWith('handler -');\n  // In @fastify/otel `request-handler` is separated by dash, not underscore\n  const isRequestHandler = spanName === 'request' || type === 'request-handler';\n\n  // If this is already set, or we have no fastify span, no need to process again...\n  if (attributes[SEMANTIC_ATTRIBUTE_SENTRY_OP] || (!isHandler && !isRequestHandler && !isHook)) {\n    return;\n  }\n\n  const opPrefix = isHook ? 'hook' : isHandler ? 'middleware' : isRequestHandler ? 'request-handler' : '<unknown>';\n\n  span.setAttributes({\n    [SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.http.otel.fastify',\n    [SEMANTIC_ATTRIBUTE_SENTRY_OP]: `${opPrefix}.fastify`,\n  });\n\n  const attrName = attributes['fastify.name'] || attributes['plugin.name'] || attributes['hook.name'];\n  if (typeof attrName === 'string') {\n    // Try removing `fastify -> ` and `@fastify/otel -> ` prefixes\n    // This is a bit of a hack, and not always working for all spans\n    // But it's the best we can do without a proper API\n    const updatedName = attrName.replace(/^fastify -> /, '').replace(/^@fastify\\/otel -> /, '');\n\n    span.updateName(updatedName);\n  }\n}\n\nfunction instrumentClient(): void {\n  const client = getClient();\n  if (client) {\n    client.on('spanStart', (span: Span) => {\n      addFastifySpanAttributes(span);\n    });\n  }\n}\n\nfunction instrumentOnRequest(fastify: FastifyInstance): void {\n  fastify.addHook('onRequest', async (request: FastifyRequest & { opentelemetry?: () => { span?: Span } }, _reply) => {\n    if (request.opentelemetry) {\n      const { span } = request.opentelemetry();\n\n      if (span) {\n        addFastifySpanAttributes(span);\n      }\n    }\n\n    const routeName = request.routeOptions?.url;\n    const method = request.method || 'GET';\n\n    getIsolationScope().setTransactionName(`${method} ${routeName}`);\n  });\n}\n", "import type { AttributeValue } from '@opentelemetry/api';\nimport { GraphQLInstrumentation } from '@opentelemetry/instrumentation-graphql';\nimport type { IntegrationFn } from '@sentry/core';\nimport { defineIntegration, getRootSpan, spanToJSON } from '@sentry/core';\nimport { SEMANTIC_ATTRIBUTE_SENTRY_GRAPHQL_OPERATION } from '@sentry/opentelemetry';\nimport { generateInstrumentOnce } from '../../otel/instrument';\nimport { addOriginToSpan } from '../../utils/addOriginToSpan';\n\ninterface GraphqlOptions {\n  /**\n   * Do not create spans for resolvers.\n   *\n   * Defaults to true.\n   */\n  ignoreResolveSpans?: boolean;\n\n  /**\n   * Don't create spans for the execution of the default resolver on object properties.\n   *\n   * When a resolver function is not defined on the schema for a field, graphql will\n   * use the default resolver which just looks for a property with that name on the object.\n   * If the property is not a function, it's not very interesting to trace.\n   * This option can reduce noise and number of spans created.\n   *\n   * Defaults to true.\n   */\n  ignoreTrivialResolveSpans?: boolean;\n\n  /**\n   * If this is enabled, a http.server root span containing this span will automatically be renamed to include the operation name.\n   * Set this to `false` if you do not want this behavior, and want to keep the default http.server span name.\n   *\n   * Defaults to true.\n   */\n  useOperationNameForRootSpan?: boolean;\n}\n\nconst INTEGRATION_NAME = 'Graphql';\n\nexport const instrumentGraphql = generateInstrumentOnce(\n  INTEGRATION_NAME,\n  GraphQLInstrumentation,\n  (_options: GraphqlOptions) => {\n    const options = getOptionsWithDefaults(_options);\n\n    return {\n      ...options,\n      responseHook(span) {\n        addOriginToSpan(span, 'auto.graphql.otel.graphql');\n\n        const attributes = spanToJSON(span).data;\n\n        // If operation.name is not set, we fall back to use operation.type only\n        const operationType = attributes['graphql.operation.type'];\n        const operationName = attributes['graphql.operation.name'];\n\n        if (options.useOperationNameForRootSpan && operationType) {\n          const rootSpan = getRootSpan(span);\n          const rootSpanAttributes = spanToJSON(rootSpan).data;\n\n          const existingOperations = rootSpanAttributes[SEMANTIC_ATTRIBUTE_SENTRY_GRAPHQL_OPERATION] || [];\n\n          const newOperation = operationName ? `${operationType} ${operationName}` : `${operationType}`;\n\n          // We keep track of each operation on the root span\n          // This can either be a string, or an array of strings (if there are multiple operations)\n          if (Array.isArray(existingOperations)) {\n            (existingOperations as string[]).push(newOperation);\n            rootSpan.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_GRAPHQL_OPERATION, existingOperations);\n          } else if (typeof existingOperations === 'string') {\n            rootSpan.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_GRAPHQL_OPERATION, [existingOperations, newOperation]);\n          } else {\n            rootSpan.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_GRAPHQL_OPERATION, newOperation);\n          }\n\n          if (!spanToJSON(rootSpan).data['original-description']) {\n            rootSpan.setAttribute('original-description', spanToJSON(rootSpan).description);\n          }\n          // Important for e.g. @sentry/aws-serverless because this would otherwise overwrite the name again\n          rootSpan.updateName(\n            `${spanToJSON(rootSpan).data['original-description']} (${getGraphqlOperationNamesFromAttribute(\n              existingOperations,\n            )})`,\n          );\n        }\n      },\n    };\n  },\n);\n\nconst _graphqlIntegration = ((options: GraphqlOptions = {}) => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      // We set defaults here, too, because otherwise we'd update the instrumentation config\n      // to the config without defaults, as `generateInstrumentOnce` automatically calls `setConfig(options)`\n      // when being called the second time\n      instrumentGraphql(getOptionsWithDefaults(options));\n    },\n  };\n}) satisfies IntegrationFn;\n\n/**\n * Adds Sentry tracing instrumentation for the [graphql](https://www.npmjs.com/package/graphql) library.\n *\n * For more information, see the [`graphqlIntegration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/graphql/).\n *\n * @param {GraphqlOptions} options Configuration options for the GraphQL integration.\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.graphqlIntegration()],\n * });\n */\nexport const graphqlIntegration = defineIntegration(_graphqlIntegration);\n\nfunction getOptionsWithDefaults(options?: GraphqlOptions): GraphqlOptions {\n  return {\n    ignoreResolveSpans: true,\n    ignoreTrivialResolveSpans: true,\n    useOperationNameForRootSpan: true,\n    ...options,\n  };\n}\n\n// copy from packages/opentelemetry/utils\nfunction getGraphqlOperationNamesFromAttribute(attr: AttributeValue): string {\n  if (Array.isArray(attr)) {\n    const sorted = attr.slice().sort();\n\n    // Up to 5 items, we just add all of them\n    if (sorted.length <= 5) {\n      return sorted.join(', ');\n    } else {\n      // Else, we add the first 5 and the diff of other operations\n      return `${sorted.slice(0, 5).join(', ')}, +${sorted.length - 5}`;\n    }\n  }\n\n  return `${attr}`;\n}\n", "import { KafkaJsInstrumentation } from '@opentelemetry/instrumentation-kafkajs';\nimport type { IntegrationFn } from '@sentry/core';\nimport { defineIntegration } from '@sentry/core';\nimport { generateInstrumentOnce } from '../../otel/instrument';\nimport { addOriginToSpan } from '../../utils/addOriginToSpan';\n\nconst INTEGRATION_NAME = 'Kafka';\n\nexport const instrumentKafka = generateInstrumentOnce(\n  INTEGRATION_NAME,\n  () =>\n    new KafkaJsInstrumentation({\n      consumerHook(span) {\n        addOriginToSpan(span, 'auto.kafkajs.otel.consumer');\n      },\n      producerHook(span) {\n        addOriginToSpan(span, 'auto.kafkajs.otel.producer');\n      },\n    }),\n);\n\nconst _kafkaIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentKafka();\n    },\n  };\n}) satisfies IntegrationFn;\n\n/**\n * Adds Sentry tracing instrumentation for the [kafkajs](https://www.npmjs.com/package/kafkajs) library.\n *\n * For more information, see the [`kafkaIntegration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/kafka/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.kafkaIntegration()],\n * });\n */\nexport const kafkaIntegration = defineIntegration(_kafkaIntegration);\n", "import { LruMemoizerInstrumentation } from '@opentelemetry/instrumentation-lru-memoizer';\nimport type { IntegrationFn } from '@sentry/core';\nimport { defineIntegration } from '@sentry/core';\nimport { generateInstrumentOnce } from '../../otel/instrument';\n\nconst INTEGRATION_NAME = 'LruMemoizer';\n\nexport const instrumentLruMemoizer = generateInstrumentOnce(INTEGRATION_NAME, () => new LruMemoizerInstrumentation());\n\nconst _lruMemoizerIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentLruMemoizer();\n    },\n  };\n}) satisfies IntegrationFn;\n\n/**\n * Adds Sentry tracing instrumentation for the [lru-memoizer](https://www.npmjs.com/package/lru-memoizer) library.\n *\n * For more information, see the [`lruMemoizerIntegration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/lrumemoizer/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.lruMemoizerIntegration()],\n * });\n */\nexport const lruMemoizerIntegration = defineIntegration(_lruMemoizerIntegration);\n", "import { MongoDBInstrumentation } from '@opentelemetry/instrumentation-mongodb';\nimport type { IntegrationFn } from '@sentry/core';\nimport { defineIntegration } from '@sentry/core';\nimport { generateInstrumentOnce } from '../../otel/instrument';\nimport { addOriginToSpan } from '../../utils/addOriginToSpan';\n\nconst INTEGRATION_NAME = 'Mongo';\n\nexport const instrumentMongo = generateInstrumentOnce(\n  INTEGRATION_NAME,\n  () =>\n    new MongoDBInstrumentation({\n      dbStatementSerializer: _defaultDbStatementSerializer,\n      responseHook(span) {\n        addOriginToSpan(span, 'auto.db.otel.mongo');\n      },\n    }),\n);\n\n/**\n * Replaces values in document with '?', hiding PII and helping grouping.\n */\nexport function _defaultDbStatementSerializer(commandObj: Record<string, unknown>): string {\n  const resultObj = _scrubStatement(commandObj);\n  return JSON.stringify(resultObj);\n}\n\nfunction _scrubStatement(value: unknown): unknown {\n  if (Array.isArray(value)) {\n    return value.map(element => _scrubStatement(element));\n  }\n\n  if (isCommandObj(value)) {\n    const initial: Record<string, unknown> = {};\n    return Object.entries(value)\n      .map(([key, element]) => [key, _scrubStatement(element)])\n      .reduce((prev, current) => {\n        if (isCommandEntry(current)) {\n          prev[current[0]] = current[1];\n        }\n        return prev;\n      }, initial);\n  }\n\n  // A value like string or number, possible contains PII, scrub it\n  return '?';\n}\n\nfunction isCommandObj(value: Record<string, unknown> | unknown): value is Record<string, unknown> {\n  return typeof value === 'object' && value !== null && !isBuffer(value);\n}\n\nfunction isBuffer(value: unknown): boolean {\n  let isBuffer = false;\n  if (typeof Buffer !== 'undefined') {\n    isBuffer = Buffer.isBuffer(value);\n  }\n  return isBuffer;\n}\n\nfunction isCommandEntry(value: [string, unknown] | unknown): value is [string, unknown] {\n  return Array.isArray(value);\n}\n\nconst _mongoIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentMongo();\n    },\n  };\n}) satisfies IntegrationFn;\n\n/**\n * Adds Sentry tracing instrumentation for the [mongodb](https://www.npmjs.com/package/mongodb) library.\n *\n * For more information, see the [`mongoIntegration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/mongo/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.mongoIntegration()],\n * });\n * ```\n */\nexport const mongoIntegration = defineIntegration(_mongoIntegration);\n", "import { MongooseInstrumentation } from '@opentelemetry/instrumentation-mongoose';\nimport type { IntegrationFn } from '@sentry/core';\nimport { defineIntegration } from '@sentry/core';\nimport { generateInstrumentOnce } from '../../otel/instrument';\nimport { addOriginToSpan } from '../../utils/addOriginToSpan';\n\nconst INTEGRATION_NAME = 'Mongoose';\n\nexport const instrumentMongoose = generateInstrumentOnce(\n  INTEGRATION_NAME,\n  () =>\n    new MongooseInstrumentation({\n      responseHook(span) {\n        addOriginToSpan(span, 'auto.db.otel.mongoose');\n      },\n    }),\n);\n\nconst _mongooseIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentMongoose();\n    },\n  };\n}) satisfies IntegrationFn;\n\n/**\n * Adds Sentry tracing instrumentation for the [mongoose](https://www.npmjs.com/package/mongoose) library.\n *\n * For more information, see the [`mongooseIntegration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/mongoose/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.mongooseIntegration()],\n * });\n * ```\n */\nexport const mongooseIntegration = defineIntegration(_mongooseIntegration);\n", "import { MySQLInstrumentation } from '@opentelemetry/instrumentation-mysql';\nimport type { IntegrationFn } from '@sentry/core';\nimport { defineIntegration } from '@sentry/core';\nimport { generateInstrumentOnce } from '../../otel/instrument';\n\nconst INTEGRATION_NAME = 'Mysql';\n\nexport const instrumentMysql = generateInstrumentOnce(INTEGRATION_NAME, () => new MySQLInstrumentation({}));\n\nconst _mysqlIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentMysql();\n    },\n  };\n}) satisfies IntegrationFn;\n\n/**\n * Adds Sentry tracing instrumentation for the [mysql](https://www.npmjs.com/package/mysql) library.\n *\n * For more information, see the [`mysqlIntegration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/mysql/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.mysqlIntegration()],\n * });\n * ```\n */\nexport const mysqlIntegration = defineIntegration(_mysqlIntegration);\n", "import { MySQL2Instrumentation } from '@opentelemetry/instrumentation-mysql2';\nimport type { IntegrationFn } from '@sentry/core';\nimport { defineIntegration } from '@sentry/core';\nimport { generateInstrumentOnce } from '../../otel/instrument';\nimport { addOriginToSpan } from '../../utils/addOriginToSpan';\n\nconst INTEGRATION_NAME = 'Mysql2';\n\nexport const instrumentMysql2 = generateInstrumentOnce(\n  INTEGRATION_NAME,\n  () =>\n    new MySQL2Instrumentation({\n      responseHook(span) {\n        addOriginToSpan(span, 'auto.db.otel.mysql2');\n      },\n    }),\n);\n\nconst _mysql2Integration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentMysql2();\n    },\n  };\n}) satisfies IntegrationFn;\n\n/**\n * Adds Sentry tracing instrumentation for the [mysql2](https://www.npmjs.com/package/mysql2) library.\n *\n * For more information, see the [`mysql2Integration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/mysql2/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.mysqlIntegration()],\n * });\n * ```\n */\nexport const mysql2Integration = defineIntegration(_mysql2Integration);\n", "import type { CommandArgs as IORedisCommandArgs } from '@opentelemetry/instrumentation-ioredis';\n\nconst SINGLE_ARG_COMMANDS = ['get', 'set', 'setex'];\n\nexport const GET_COMMANDS = ['get', 'mget'];\nexport const SET_COMMANDS = ['set', 'setex'];\n// todo: del, expire\n\n/** Checks if a given command is in the list of redis commands.\n *  Useful because commands can come in lowercase or uppercase (depending on the library). */\nexport function isInCommands(redisCommands: string[], command: string): boolean {\n  return redisCommands.includes(command.toLowerCase());\n}\n\n/** Determine cache operation based on redis statement */\nexport function getCacheOperation(\n  command: string,\n): 'cache.get' | 'cache.put' | 'cache.remove' | 'cache.flush' | undefined {\n  if (isInCommands(GET_COMMANDS, command)) {\n    return 'cache.get';\n  } else if (isInCommands(SET_COMMANDS, command)) {\n    return 'cache.put';\n  } else {\n    return undefined;\n  }\n}\n\nfunction keyHasPrefix(key: string, prefixes: string[]): boolean {\n  return prefixes.some(prefix => key.startsWith(prefix));\n}\n\n/** Safely converts a redis key to a string (comma-separated if there are multiple keys) */\nexport function getCacheKeySafely(redisCommand: string, cmdArgs: IORedisCommandArgs): string[] | undefined {\n  try {\n    if (cmdArgs.length === 0) {\n      return undefined;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const processArg = (arg: string | Buffer | number | any[]): string[] => {\n      if (typeof arg === 'string' || typeof arg === 'number' || Buffer.isBuffer(arg)) {\n        return [arg.toString()];\n      } else if (Array.isArray(arg)) {\n        return flatten(arg.map(arg => processArg(arg)));\n      } else {\n        return ['<unknown>'];\n      }\n    };\n\n    const firstArg = cmdArgs[0];\n    if (isInCommands(SINGLE_ARG_COMMANDS, redisCommand) && firstArg != null) {\n      return processArg(firstArg);\n    }\n\n    return flatten(cmdArgs.map(arg => processArg(arg)));\n  } catch (e) {\n    return undefined;\n  }\n}\n\n/** Determines whether a redis operation should be considered as \"cache operation\" by checking if a key is prefixed.\n *  We only support certain commands (such as 'set', 'get', 'mget'). */\nexport function shouldConsiderForCache(redisCommand: string, keys: string[], prefixes: string[]): boolean {\n  if (!getCacheOperation(redisCommand)) {\n    return false;\n  }\n\n  for (const key of keys) {\n    if (keyHasPrefix(key, prefixes)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/** Calculates size based on the cache response value */\nexport function calculateCacheItemSize(response: unknown): number | undefined {\n  const getSize = (value: unknown): number | undefined => {\n    try {\n      if (Buffer.isBuffer(value)) return value.byteLength;\n      else if (typeof value === 'string') return value.length;\n      else if (typeof value === 'number') return value.toString().length;\n      else if (value === null || value === undefined) return 0;\n      return JSON.stringify(value).length;\n    } catch (e) {\n      return undefined;\n    }\n  };\n\n  return Array.isArray(response)\n    ? response.reduce((acc: number | undefined, curr) => {\n        const size = getSize(curr);\n        return typeof size === 'number' ? (acc !== undefined ? acc + size : size) : acc;\n      }, 0)\n    : getSize(response);\n}\n\ntype NestedArray<T> = Array<NestedArray<T> | T>;\n\nfunction flatten<T>(input: NestedArray<T>): T[] {\n  const result: T[] = [];\n\n  const flattenHelper = (input: NestedArray<T>): void => {\n    input.forEach((el: T | NestedArray<T>) => {\n      if (Array.isArray(el)) {\n        flattenHelper(el as NestedArray<T>);\n      } else {\n        result.push(el as T);\n      }\n    });\n  };\n\n  flattenHelper(input);\n  return result;\n}\n", "import type { Span } from '@opentelemetry/api';\nimport type { RedisResponseCustomAttributeFunction } from '@opentelemetry/instrumentation-ioredis';\nimport { IORedisInstrumentation } from '@opentelemetry/instrumentation-ioredis';\nimport { RedisInstrumentation } from '@opentelemetry/instrumentation-redis-4';\nimport type { IntegrationFn } from '@sentry/core';\nimport {\n  defineIntegration,\n  SEMANTIC_ATTRIBUTE_CACHE_HIT,\n  SEMANTIC_ATTRIBUTE_CACHE_ITEM_SIZE,\n  SEMANTIC_ATTRIBUTE_CACHE_KEY,\n  SEMANTIC_ATTRIBUTE_SENTRY_OP,\n  SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN,\n  spanToJSON,\n  truncate,\n} from '@sentry/core';\nimport { generateInstrumentOnce } from '../../otel/instrument';\nimport {\n  calculateCacheItemSize,\n  GET_COMMANDS,\n  getCacheKeySafely,\n  getCacheOperation,\n  isInCommands,\n  shouldConsiderForCache,\n} from '../../utils/redisCache';\n\ninterface RedisOptions {\n  cachePrefixes?: string[];\n}\n\nconst INTEGRATION_NAME = 'Redis';\n\nlet _redisOptions: RedisOptions = {};\n\nconst cacheResponseHook: RedisResponseCustomAttributeFunction = (span: Span, redisCommand, cmdArgs, response) => {\n  span.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, 'auto.db.otel.redis');\n\n  const safeKey = getCacheKeySafely(redisCommand, cmdArgs);\n  const cacheOperation = getCacheOperation(redisCommand);\n\n  if (\n    !safeKey ||\n    !cacheOperation ||\n    !_redisOptions.cachePrefixes ||\n    !shouldConsiderForCache(redisCommand, safeKey, _redisOptions.cachePrefixes)\n  ) {\n    // not relevant for cache\n    return;\n  }\n\n  // otel/ioredis seems to be using the old standard, as there was a change to those params: https://github.com/open-telemetry/opentelemetry-specification/issues/3199\n  // We are using params based on the docs: https://opentelemetry.io/docs/specs/semconv/attributes-registry/network/\n  const networkPeerAddress = spanToJSON(span).data['net.peer.name'];\n  const networkPeerPort = spanToJSON(span).data['net.peer.port'];\n  if (networkPeerPort && networkPeerAddress) {\n    span.setAttributes({ 'network.peer.address': networkPeerAddress, 'network.peer.port': networkPeerPort });\n  }\n\n  const cacheItemSize = calculateCacheItemSize(response);\n\n  if (cacheItemSize) {\n    span.setAttribute(SEMANTIC_ATTRIBUTE_CACHE_ITEM_SIZE, cacheItemSize);\n  }\n\n  if (isInCommands(GET_COMMANDS, redisCommand) && cacheItemSize !== undefined) {\n    span.setAttribute(SEMANTIC_ATTRIBUTE_CACHE_HIT, cacheItemSize > 0);\n  }\n\n  span.setAttributes({\n    [SEMANTIC_ATTRIBUTE_SENTRY_OP]: cacheOperation,\n    [SEMANTIC_ATTRIBUTE_CACHE_KEY]: safeKey,\n  });\n\n  const spanDescription = safeKey.join(', ');\n\n  span.updateName(truncate(spanDescription, 1024));\n};\n\nconst instrumentIORedis = generateInstrumentOnce('IORedis', () => {\n  return new IORedisInstrumentation({\n    responseHook: cacheResponseHook,\n  });\n});\n\nconst instrumentRedis4 = generateInstrumentOnce('Redis-4', () => {\n  return new RedisInstrumentation({\n    responseHook: cacheResponseHook,\n  });\n});\n\n/** To be able to preload all Redis OTel instrumentations with just one ID (\"Redis\"), all the instrumentations are generated in this one function  */\nexport const instrumentRedis = Object.assign(\n  (): void => {\n    instrumentIORedis();\n    instrumentRedis4();\n\n    // todo: implement them gradually\n    // new LegacyRedisInstrumentation({}),\n  },\n  { id: INTEGRATION_NAME },\n);\n\nconst _redisIntegration = ((options: RedisOptions = {}) => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      _redisOptions = options;\n      instrumentRedis();\n    },\n  };\n}) satisfies IntegrationFn;\n\n/**\n * Adds Sentry tracing instrumentation for the [redis](https://www.npmjs.com/package/redis) and\n * [ioredis](https://www.npmjs.com/package/ioredis) libraries.\n *\n * For more information, see the [`redisIntegration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/redis/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.redisIntegration()],\n * });\n * ```\n */\nexport const redisIntegration = defineIntegration(_redisIntegration);\n", "import { PgInstrumentation } from '@opentelemetry/instrumentation-pg';\nimport type { IntegrationFn } from '@sentry/core';\nimport { defineIntegration } from '@sentry/core';\nimport { generateInstrumentOnce } from '../../otel/instrument';\nimport { addOriginToSpan } from '../../utils/addOriginToSpan';\n\nconst INTEGRATION_NAME = 'Postgres';\n\nexport const instrumentPostgres = generateInstrumentOnce(\n  INTEGRATION_NAME,\n  () =>\n    new PgInstrumentation({\n      requireParentSpan: true,\n      requestHook(span) {\n        addOriginToSpan(span, 'auto.db.otel.postgres');\n      },\n    }),\n);\n\nconst _postgresIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentPostgres();\n    },\n  };\n}) satisfies IntegrationFn;\n\n/**\n * Adds Sentry tracing instrumentation for the [pg](https://www.npmjs.com/package/pg) library.\n *\n * For more information, see the [`postgresIntegration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/postgres/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.postgresIntegration()],\n * });\n * ```\n */\nexport const postgresIntegration = defineIntegration(_postgresIntegration);\n", "// src/PrismaInstrumentation.ts\nimport { trace as trace2 } from \"@opentelemetry/api\";\nimport {\n  InstrumentationBase,\n  InstrumentationNodeModuleDefinition\n} from \"@opentelemetry/instrumentation\";\n\n// src/ActiveTracingHelper.ts\nimport {\n  context as _context,\n  SpanKind,\n  trace\n} from \"@opentelemetry/api\";\nvar showAllTraces = process.env.PRISMA_SHOW_ALL_TRACES === \"true\";\nvar nonSampledTraceParent = `00-10-10-00`;\nfunction engineSpanKindToOtelSpanKind(engineSpanKind) {\n  switch (engineSpanKind) {\n    case \"client\":\n      return SpanKind.CLIENT;\n    case \"internal\":\n    default:\n      return SpanKind.INTERNAL;\n  }\n}\nvar ActiveTracingHelper = class {\n  traceMiddleware;\n  tracerProvider;\n  ignoreSpanTypes;\n  constructor({ traceMiddleware, tracerProvider, ignoreSpanTypes }) {\n    this.traceMiddleware = traceMiddleware;\n    this.tracerProvider = tracerProvider;\n    this.ignoreSpanTypes = ignoreSpanTypes;\n  }\n  isEnabled() {\n    return true;\n  }\n  getTraceParent(context) {\n    const span = trace.getSpanContext(context ?? _context.active());\n    if (span) {\n      return `00-${span.traceId}-${span.spanId}-0${span.traceFlags}`;\n    }\n    return nonSampledTraceParent;\n  }\n  dispatchEngineSpans(spans) {\n    const tracer = this.tracerProvider.getTracer(\"prisma\");\n    const linkIds = /* @__PURE__ */ new Map();\n    const roots = spans.filter((span) => span.parentId === null);\n    for (const root of roots) {\n      dispatchEngineSpan(tracer, root, spans, linkIds, this.ignoreSpanTypes);\n    }\n  }\n  getActiveContext() {\n    return _context.active();\n  }\n  runInChildSpan(options, callback) {\n    if (typeof options === \"string\") {\n      options = { name: options };\n    }\n    if (options.internal && !showAllTraces) {\n      return callback();\n    }\n    if (options.middleware && !this.traceMiddleware) {\n      return callback();\n    }\n    const tracer = this.tracerProvider.getTracer(\"prisma\");\n    const context = options.context ?? this.getActiveContext();\n    const name = `prisma:client:${options.name}`;\n    if (shouldIgnoreSpan(name, this.ignoreSpanTypes)) {\n      return callback();\n    }\n    if (options.active === false) {\n      const span = tracer.startSpan(name, options, context);\n      return endSpan(span, callback(span, context));\n    }\n    return tracer.startActiveSpan(name, options, (span) => endSpan(span, callback(span, context)));\n  }\n};\nfunction dispatchEngineSpan(tracer, engineSpan, allSpans, linkIds, ignoreSpanTypes) {\n  if (shouldIgnoreSpan(engineSpan.name, ignoreSpanTypes)) return;\n  const spanOptions = {\n    attributes: engineSpan.attributes,\n    kind: engineSpanKindToOtelSpanKind(engineSpan.kind),\n    startTime: engineSpan.startTime\n  };\n  tracer.startActiveSpan(engineSpan.name, spanOptions, (span) => {\n    linkIds.set(engineSpan.id, span.spanContext().spanId);\n    if (engineSpan.links) {\n      span.addLinks(\n        engineSpan.links.flatMap((link) => {\n          const linkedId = linkIds.get(link);\n          if (!linkedId) {\n            return [];\n          }\n          return {\n            context: {\n              spanId: linkedId,\n              traceId: span.spanContext().traceId,\n              traceFlags: span.spanContext().traceFlags\n            }\n          };\n        })\n      );\n    }\n    const children = allSpans.filter((s) => s.parentId === engineSpan.id);\n    for (const child of children) {\n      dispatchEngineSpan(tracer, child, allSpans, linkIds, ignoreSpanTypes);\n    }\n    span.end(engineSpan.endTime);\n  });\n}\nfunction endSpan(span, result) {\n  if (isPromiseLike(result)) {\n    return result.then(\n      (value) => {\n        span.end();\n        return value;\n      },\n      (reason) => {\n        span.end();\n        throw reason;\n      }\n    );\n  }\n  span.end();\n  return result;\n}\nfunction isPromiseLike(value) {\n  return value != null && typeof value[\"then\"] === \"function\";\n}\nfunction shouldIgnoreSpan(spanName, ignoreSpanTypes) {\n  return ignoreSpanTypes.some(\n    (pattern) => typeof pattern === \"string\" ? pattern === spanName : pattern.test(spanName)\n  );\n}\n\n// package.json\nvar package_default = {\n  name: \"@prisma/instrumentation\",\n  version: \"6.7.0\",\n  description: \"OpenTelemetry compliant instrumentation for Prisma Client\",\n  main: \"dist/index.js\",\n  module: \"dist/index.mjs\",\n  types: \"dist/index.d.ts\",\n  exports: {\n    \".\": {\n      require: {\n        types: \"./dist/index.d.ts\",\n        default: \"./dist/index.js\"\n      },\n      import: {\n        types: \"./dist/index.d.ts\",\n        default: \"./dist/index.mjs\"\n      }\n    }\n  },\n  license: \"Apache-2.0\",\n  homepage: \"https://www.prisma.io\",\n  repository: {\n    type: \"git\",\n    url: \"https://github.com/prisma/prisma.git\",\n    directory: \"packages/instrumentation\"\n  },\n  bugs: \"https://github.com/prisma/prisma/issues\",\n  devDependencies: {\n    \"@prisma/internals\": \"workspace:*\",\n    \"@swc/core\": \"1.11.5\",\n    \"@types/jest\": \"29.5.14\",\n    \"@types/node\": \"18.19.76\",\n    \"@opentelemetry/api\": \"1.9.0\",\n    jest: \"29.7.0\",\n    \"jest-junit\": \"16.0.0\",\n    typescript: \"5.4.5\"\n  },\n  dependencies: {\n    \"@opentelemetry/instrumentation\": \"^0.52.0 || ^0.53.0 || ^0.54.0 || ^0.55.0 || ^0.56.0 || ^0.57.0\"\n  },\n  peerDependencies: {\n    \"@opentelemetry/api\": \"^1.8\"\n  },\n  files: [\n    \"dist\"\n  ],\n  keywords: [\n    \"prisma\",\n    \"instrumentation\",\n    \"opentelemetry\",\n    \"otel\"\n  ],\n  scripts: {\n    dev: \"DEV=true tsx helpers/build.ts\",\n    build: \"tsx helpers/build.ts\",\n    prepublishOnly: \"pnpm run build\",\n    test: \"jest\"\n  },\n  sideEffects: false\n};\n\n// src/constants.ts\nvar VERSION = package_default.version;\nvar majorVersion = VERSION.split(\".\")[0];\nvar GLOBAL_INSTRUMENTATION_ACCESSOR_KEY = \"PRISMA_INSTRUMENTATION\";\nvar GLOBAL_VERSIONED_INSTRUMENTATION_ACCESSOR_KEY = `V${majorVersion}_PRISMA_INSTRUMENTATION`;\nvar NAME = package_default.name;\nvar MODULE_NAME = \"@prisma/client\";\n\n// src/PrismaInstrumentation.ts\nvar PrismaInstrumentation = class extends InstrumentationBase {\n  tracerProvider;\n  constructor(config = {}) {\n    super(NAME, VERSION, config);\n  }\n  setTracerProvider(tracerProvider) {\n    this.tracerProvider = tracerProvider;\n  }\n  init() {\n    const module = new InstrumentationNodeModuleDefinition(MODULE_NAME, [VERSION]);\n    return [module];\n  }\n  enable() {\n    const config = this._config;\n    const globalValue = {\n      helper: new ActiveTracingHelper({\n        traceMiddleware: config.middleware ?? false,\n        tracerProvider: this.tracerProvider ?? trace2.getTracerProvider(),\n        ignoreSpanTypes: config.ignoreSpanTypes ?? []\n      })\n    };\n    global[GLOBAL_INSTRUMENTATION_ACCESSOR_KEY] = globalValue;\n    global[GLOBAL_VERSIONED_INSTRUMENTATION_ACCESSOR_KEY] = globalValue;\n  }\n  disable() {\n    delete global[GLOBAL_INSTRUMENTATION_ACCESSOR_KEY];\n    delete global[GLOBAL_VERSIONED_INSTRUMENTATION_ACCESSOR_KEY];\n  }\n  isEnabled() {\n    return Boolean(global[GLOBAL_VERSIONED_INSTRUMENTATION_ACCESSOR_KEY]);\n  }\n};\n\n// src/index.ts\nimport { registerInstrumentations } from \"@opentelemetry/instrumentation\";\nexport {\n  PrismaInstrumentation,\n  registerInstrumentations\n};\n", "import type { Instrumentation } from '@opentelemetry/instrumentation';\nimport { PrismaInstrumentation } from '@prisma/instrumentation';\nimport { consoleSandbox, defineIntegration, SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, spanToJSON } from '@sentry/core';\nimport { generateInstrumentOnce } from '../../otel/instrument';\nimport type { PrismaV5TracingHelper } from './prisma/vendor/v5-tracing-helper';\nimport type { PrismaV6TracingHelper } from './prisma/vendor/v6-tracing-helper';\n\nconst INTEGRATION_NAME = 'Prisma';\n\ntype CompatibilityLayerTraceHelper = PrismaV5TracingHelper & PrismaV6TracingHelper;\n\nfunction isPrismaV6TracingHelper(helper: unknown): helper is PrismaV6TracingHelper {\n  return !!helper && typeof helper === 'object' && 'dispatchEngineSpans' in helper;\n}\n\nfunction getPrismaTracingHelper(): unknown | undefined {\n  const prismaInstrumentationObject = (globalThis as Record<string, unknown>).PRISMA_INSTRUMENTATION;\n  const prismaTracingHelper =\n    prismaInstrumentationObject &&\n    typeof prismaInstrumentationObject === 'object' &&\n    'helper' in prismaInstrumentationObject\n      ? prismaInstrumentationObject.helper\n      : undefined;\n\n  return prismaTracingHelper;\n}\n\nclass SentryPrismaInteropInstrumentation extends PrismaInstrumentation {\n  public constructor() {\n    super();\n  }\n\n  public enable(): void {\n    super.enable();\n\n    // The PrismaIntegration (super class) defines a global variable `global[\"PRISMA_INSTRUMENTATION\"]` when `enable()` is called. This global variable holds a \"TracingHelper\" which Prisma uses internally to create tracing data. It's their way of not depending on OTEL with their main package. The sucky thing is, prisma broke the interface of the tracing helper with the v6 major update. This means that if you use Prisma 5 with the v6 instrumentation (or vice versa) Prisma just blows up, because tries to call methods on the helper that no longer exist.\n    // Because we actually want to use the v6 instrumentation and not blow up in Prisma 5 user's faces, what we're doing here is backfilling the v5 method (`createEngineSpan`) with a noop so that no longer crashes when it attempts to call that function.\n    // We still won't fully emit all the spans, but this could potentially be implemented in the future.\n    const prismaTracingHelper = getPrismaTracingHelper();\n\n    let emittedWarning = false;\n\n    if (isPrismaV6TracingHelper(prismaTracingHelper)) {\n      (prismaTracingHelper as CompatibilityLayerTraceHelper).createEngineSpan = () => {\n        consoleSandbox(() => {\n          if (!emittedWarning) {\n            emittedWarning = true;\n            // eslint-disable-next-line no-console\n            console.warn(\n              '[Sentry] The Sentry SDK supports tracing with Prisma version 5 only with limited capabilities. For full tracing capabilities pass `prismaInstrumentation` for version 5 to the Sentry `prismaIntegration`. Read more: https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/prisma/',\n            );\n          }\n        });\n      };\n    }\n  }\n}\n\nexport const instrumentPrisma = generateInstrumentOnce<{ prismaInstrumentation?: Instrumentation }>(\n  INTEGRATION_NAME,\n  options => {\n    // Use a passed instrumentation instance to support older Prisma versions\n    if (options?.prismaInstrumentation) {\n      return options.prismaInstrumentation;\n    }\n\n    return new SentryPrismaInteropInstrumentation();\n  },\n);\n\n/**\n * Adds Sentry tracing instrumentation for the [prisma](https://www.npmjs.com/package/prisma) library.\n * For more information, see the [`prismaIntegration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/prisma/).\n *\n * NOTE: By default, this integration works with Prisma version 6.\n * To get performance instrumentation for other Prisma versions,\n * 1. Install the `@prisma/instrumentation` package with the desired version.\n * 1. Pass a `new PrismaInstrumentation()` instance as exported from `@prisma/instrumentation` to the `prismaInstrumentation` option of this integration:\n *\n *    ```js\n *    import { PrismaInstrumentation } from '@prisma/instrumentation'\n *\n *    Sentry.init({\n *      integrations: [\n *        prismaIntegration({\n *          // Override the default instrumentation that Sentry uses\n *          prismaInstrumentation: new PrismaInstrumentation()\n *        })\n *      ]\n *    })\n *    ```\n *\n *    The passed instrumentation instance will override the default instrumentation instance the integration would use, while the `prismaIntegration` will still ensure data compatibility for the various Prisma versions.\n * 1. Depending on your Prisma version (prior to version 6), add `previewFeatures = [\"tracing\"]` to the client generator block of your Prisma schema:\n *\n *    ```\n *    generator client {\n *      provider = \"prisma-client-js\"\n *      previewFeatures = [\"tracing\"]\n *    }\n *    ```\n */\nexport const prismaIntegration = defineIntegration(\n  ({\n    prismaInstrumentation,\n  }: {\n    /**\n     * Overrides the instrumentation used by the Sentry SDK with the passed in instrumentation instance.\n     *\n     * NOTE: By default, the Sentry SDK uses the Prisma v6 instrumentation. Use this option if you need performance instrumentation different Prisma versions.\n     *\n     * For more information refer to the documentation of `prismaIntegration()` or see https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/prisma/\n     */\n    prismaInstrumentation?: Instrumentation;\n  } = {}) => {\n    return {\n      name: INTEGRATION_NAME,\n      setupOnce() {\n        instrumentPrisma({ prismaInstrumentation });\n      },\n      setup(client) {\n        // If no tracing helper exists, we skip any work here\n        // this means that prisma is not being used\n        if (!getPrismaTracingHelper()) {\n          return;\n        }\n\n        client.on('spanStart', span => {\n          const spanJSON = spanToJSON(span);\n          if (spanJSON.description?.startsWith('prisma:')) {\n            span.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, 'auto.db.otel.prisma');\n          }\n\n          // Make sure we use the query text as the span name, for ex. SELECT * FROM \"User\" WHERE \"id\" = $1\n          if (spanJSON.description === 'prisma:engine:db_query' && spanJSON.data['db.query.text']) {\n            span.updateName(spanJSON.data['db.query.text'] as string);\n          }\n\n          // In Prisma v5.22+, the `db.system` attribute is automatically set\n          // On older versions, this is missing, so we add it here\n          if (spanJSON.description === 'prisma:engine:db_query' && !spanJSON.data['db.system']) {\n            span.setAttribute('db.system', 'prisma');\n          }\n        });\n      },\n    };\n  },\n);\n", "import { HapiInstrumentation } from '@opentelemetry/instrumentation-hapi';\nimport type { IntegrationFn, Span } from '@sentry/core';\nimport {\n  captureException,\n  defineIntegration,\n  getClient,\n  getDefaultIsolationScope,\n  getIsolationScope,\n  logger,\n  SDK_VERSION,\n  SEMANTIC_ATTRIBUTE_SENTRY_OP,\n  SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN,\n  spanToJSON,\n} from '@sentry/core';\nimport { DEBUG_BUILD } from '../../../debug-build';\nimport { generateInstrumentOnce } from '../../../otel/instrument';\nimport { ensureIsWrapped } from '../../../utils/ensureIsWrapped';\nimport type { Request, RequestEvent, Server } from './types';\n\nconst INTEGRATION_NAME = 'Hapi';\n\nexport const instrumentHapi = generateInstrumentOnce(INTEGRATION_NAME, () => new HapiInstrumentation());\n\nconst _hapiIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentHapi();\n    },\n  };\n}) satisfies IntegrationFn;\n\n/**\n * Adds Sentry tracing instrumentation for [Hapi](https://hapi.dev/).\n *\n * If you also want to capture errors, you need to call `setupHapiErrorHandler(server)` after you set up your server.\n *\n * For more information, see the [hapi documentation](https://docs.sentry.io/platforms/javascript/guides/hapi/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *   integrations: [Sentry.hapiIntegration()],\n * })\n * ```\n */\nexport const hapiIntegration = defineIntegration(_hapiIntegration);\n\nfunction isErrorEvent(event: unknown): event is RequestEvent {\n  return !!(event && typeof event === 'object' && 'error' in event && event.error);\n}\n\nfunction sendErrorToSentry(errorData: object): void {\n  captureException(errorData, {\n    mechanism: {\n      type: 'hapi',\n      handled: false,\n      data: {\n        function: 'hapiErrorPlugin',\n      },\n    },\n  });\n}\n\nexport const hapiErrorPlugin = {\n  name: 'SentryHapiErrorPlugin',\n  version: SDK_VERSION,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  register: async function (serverArg: Record<any, any>) {\n    const server = serverArg as unknown as Server;\n\n    server.events.on({ name: 'request', channels: ['error'] }, (request: Request, event: RequestEvent) => {\n      if (getIsolationScope() !== getDefaultIsolationScope()) {\n        const route = request.route;\n        if (route.path) {\n          getIsolationScope().setTransactionName(`${route.method.toUpperCase()} ${route.path}`);\n        }\n      } else {\n        DEBUG_BUILD &&\n          logger.warn('Isolation scope is still the default isolation scope - skipping setting transactionName');\n      }\n\n      if (isErrorEvent(event)) {\n        sendErrorToSentry(event.error);\n      }\n    });\n  },\n};\n\n/**\n * Add a Hapi plugin to capture errors to Sentry.\n *\n * @param server The Hapi server to attach the error handler to\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n * const Hapi = require('@hapi/hapi');\n *\n * const init = async () => {\n *   const server = Hapi.server();\n *\n *   // all your routes here\n *\n *   await Sentry.setupHapiErrorHandler(server);\n *\n *   await server.start();\n * };\n * ```\n */\nexport async function setupHapiErrorHandler(server: Server): Promise<void> {\n  await server.register(hapiErrorPlugin);\n\n  // Sadly, middleware spans do not go through `requestHook`, so we handle those here\n  // We register this hook in this method, because if we register it in the integration `setup`,\n  // it would always run even for users that are not even using hapi\n  const client = getClient();\n  if (client) {\n    client.on('spanStart', span => {\n      addHapiSpanAttributes(span);\n    });\n  }\n\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  ensureIsWrapped(server.register, 'hapi');\n}\n\nfunction addHapiSpanAttributes(span: Span): void {\n  const attributes = spanToJSON(span).data;\n\n  // this is one of: router, plugin, server.ext\n  const type = attributes['hapi.type'];\n\n  // If this is already set, or we have no Hapi span, no need to process again...\n  if (attributes[SEMANTIC_ATTRIBUTE_SENTRY_OP] || !type) {\n    return;\n  }\n\n  span.setAttributes({\n    [SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.http.otel.hapi',\n    [SEMANTIC_ATTRIBUTE_SENTRY_OP]: `${type}.hapi`,\n  });\n}\n", "import { KoaInstrumentation } from '@opentelemetry/instrumentation-koa';\nimport { ATTR_HTTP_ROUTE } from '@opentelemetry/semantic-conventions';\nimport type { IntegrationFn, Span } from '@sentry/core';\nimport {\n  captureException,\n  defineIntegration,\n  getDefaultIsolationScope,\n  getIsolationScope,\n  logger,\n  SEMANTIC_ATTRIBUTE_SENTRY_OP,\n  SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN,\n  spanToJSON,\n} from '@sentry/core';\nimport { DEBUG_BUILD } from '../../debug-build';\nimport { generateInstrumentOnce } from '../../otel/instrument';\nimport { ensureIsWrapped } from '../../utils/ensureIsWrapped';\n\nconst INTEGRATION_NAME = 'Koa';\n\nexport const instrumentKoa = generateInstrumentOnce(\n  INTEGRATION_NAME,\n  () =>\n    new KoaInstrumentation({\n      requestHook(span, info) {\n        addKoaSpanAttributes(span);\n\n        if (getIsolationScope() === getDefaultIsolationScope()) {\n          DEBUG_BUILD && logger.warn('Isolation scope is default isolation scope - skipping setting transactionName');\n          return;\n        }\n        const attributes = spanToJSON(span).data;\n        const route = attributes[ATTR_HTTP_ROUTE];\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        const method = info.context?.request?.method?.toUpperCase() || 'GET';\n        if (route) {\n          getIsolationScope().setTransactionName(`${method} ${route}`);\n        }\n      },\n    }),\n);\n\nconst _koaIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentKoa();\n    },\n  };\n}) satisfies IntegrationFn;\n\n/**\n * Adds Sentry tracing instrumentation for [Koa](https://koajs.com/).\n *\n * If you also want to capture errors, you need to call `setupKoaErrorHandler(app)` after you set up your Koa server.\n *\n * For more information, see the [koa documentation](https://docs.sentry.io/platforms/javascript/guides/koa/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *   integrations: [Sentry.koaIntegration()],\n * })\n * ```\n */\nexport const koaIntegration = defineIntegration(_koaIntegration);\n\n/**\n * Add an Koa error handler to capture errors to Sentry.\n *\n * The error handler must be before any other middleware and after all controllers.\n *\n * @param app The Express instances\n * @param options {ExpressHandlerOptions} Configuration options for the handler\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n * const Koa = require(\"koa\");\n *\n * const app = new Koa();\n *\n * Sentry.setupKoaErrorHandler(app);\n *\n * // Add your routes, etc.\n *\n * app.listen(3000);\n * ```\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const setupKoaErrorHandler = (app: { use: (arg0: (ctx: any, next: any) => Promise<void>) => void }): void => {\n  app.use(async (ctx, next) => {\n    try {\n      await next();\n    } catch (error) {\n      captureException(error);\n      throw error;\n    }\n  });\n\n  ensureIsWrapped(app.use, 'koa');\n};\n\nfunction addKoaSpanAttributes(span: Span): void {\n  span.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, 'auto.http.otel.koa');\n\n  const attributes = spanToJSON(span).data;\n\n  // this is one of: middleware, router\n  const type = attributes['koa.type'];\n\n  if (type) {\n    span.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_OP, `${type}.koa`);\n  }\n\n  // Also update the name\n  const name = attributes['koa.name'];\n  if (typeof name === 'string') {\n    // Somehow, name is sometimes `''` for middleware spans\n    // See: https://github.com/open-telemetry/opentelemetry-js-contrib/issues/2220\n    span.updateName(name || '< unknown >');\n  }\n}\n", "import { ConnectInstrumentation } from '@opentelemetry/instrumentation-connect';\nimport type { IntegrationFn, Span } from '@sentry/core';\nimport {\n  captureException,\n  defineIntegration,\n  getClient,\n  SEMANTIC_ATTRIBUTE_SENTRY_OP,\n  SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN,\n  spanToJSON,\n} from '@sentry/core';\nimport { generateInstrumentOnce } from '../../otel/instrument';\nimport { ensureIsWrapped } from '../../utils/ensureIsWrapped';\n\ntype ConnectApp = {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  use: (middleware: any) => void;\n};\n\nconst INTEGRATION_NAME = 'Connect';\n\nexport const instrumentConnect = generateInstrumentOnce(INTEGRATION_NAME, () => new ConnectInstrumentation());\n\nconst _connectIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentConnect();\n    },\n  };\n}) satisfies IntegrationFn;\n\n/**\n * Adds Sentry tracing instrumentation for [Connect](https://github.com/senchalabs/connect/).\n *\n * If you also want to capture errors, you need to call `setupConnectErrorHandler(app)` after you initialize your connect app.\n *\n * For more information, see the [connect documentation](https://docs.sentry.io/platforms/javascript/guides/connect/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *   integrations: [Sentry.connectIntegration()],\n * })\n * ```\n */\nexport const connectIntegration = defineIntegration(_connectIntegration);\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction connectErrorMiddleware(err: any, req: any, res: any, next: any): void {\n  captureException(err);\n  next(err);\n}\n\n/**\n * Add a Connect middleware to capture errors to Sentry.\n *\n * @param app The Connect app to attach the error handler to\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n * const connect = require(\"connect\");\n *\n * const app = connect();\n *\n * Sentry.setupConnectErrorHandler(app);\n *\n * // Add you connect routes here\n *\n * app.listen(3000);\n * ```\n */\nexport const setupConnectErrorHandler = (app: ConnectApp): void => {\n  app.use(connectErrorMiddleware);\n\n  // Sadly, ConnectInstrumentation has no requestHook, so we need to add the attributes here\n  // We register this hook in this method, because if we register it in the integration `setup`,\n  // it would always run even for users that are not even using connect\n  const client = getClient();\n  if (client) {\n    client.on('spanStart', span => {\n      addConnectSpanAttributes(span);\n    });\n  }\n\n  ensureIsWrapped(app.use, 'connect');\n};\n\nfunction addConnectSpanAttributes(span: Span): void {\n  const attributes = spanToJSON(span).data;\n\n  // this is one of: middleware, request_handler\n  const type = attributes['connect.type'];\n\n  // If this is already set, or we have no connect span, no need to process again...\n  if (attributes[SEMANTIC_ATTRIBUTE_SENTRY_OP] || !type) {\n    return;\n  }\n\n  span.setAttributes({\n    [SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.http.otel.connect',\n    [SEMANTIC_ATTRIBUTE_SENTRY_OP]: `${type}.connect`,\n  });\n\n  // Also update the name, we don't need the \"middleware - \" prefix\n  const name = attributes['connect.name'];\n  if (typeof name === 'string') {\n    span.updateName(name);\n  }\n}\n", "import * as http from 'node:http';\nimport type { Client, Envelope, IntegrationFn } from '@sentry/core';\nimport { defineIntegration, logger, serializeEnvelope } from '@sentry/core';\n\ntype SpotlightConnectionOptions = {\n  /**\n   * Set this if the Spotlight Sidecar is not running on localhost:8969\n   * By default, the Url is set to http://localhost:8969/stream\n   */\n  sidecarUrl?: string;\n};\n\nexport const INTEGRATION_NAME = 'Spotlight';\n\nconst _spotlightIntegration = ((options: Partial<SpotlightConnectionOptions> = {}) => {\n  const _options = {\n    sidecarUrl: options.sidecarUrl || 'http://localhost:8969/stream',\n  };\n\n  return {\n    name: INTEGRATION_NAME,\n    setup(client) {\n      if (typeof process === 'object' && process.env && process.env.NODE_ENV !== 'development') {\n        logger.warn(\"[Spotlight] It seems you're not in dev mode. Do you really want to have Spotlight enabled?\");\n      }\n      connectToSpotlight(client, _options);\n    },\n  };\n}) satisfies IntegrationFn;\n\n/**\n * Use this integration to send errors and transactions to Spotlight.\n *\n * Learn more about spotlight at https://spotlightjs.com\n *\n * Important: This integration only works with Node 18 or newer.\n */\nexport const spotlightIntegration = defineIntegration(_spotlightIntegration);\n\nfunction connectToSpotlight(client: Client, options: Required<SpotlightConnectionOptions>): void {\n  const spotlightUrl = parseSidecarUrl(options.sidecarUrl);\n  if (!spotlightUrl) {\n    return;\n  }\n\n  let failedRequests = 0;\n\n  client.on('beforeEnvelope', (envelope: Envelope) => {\n    if (failedRequests > 3) {\n      logger.warn('[Spotlight] Disabled Sentry -> Spotlight integration due to too many failed requests');\n      return;\n    }\n\n    const serializedEnvelope = serializeEnvelope(envelope);\n\n    const request = getNativeHttpRequest();\n    const req = request(\n      {\n        method: 'POST',\n        path: spotlightUrl.pathname,\n        hostname: spotlightUrl.hostname,\n        port: spotlightUrl.port,\n        headers: {\n          'Content-Type': 'application/x-sentry-envelope',\n        },\n      },\n      res => {\n        if (res.statusCode && res.statusCode >= 200 && res.statusCode < 400) {\n          // Reset failed requests counter on success\n          failedRequests = 0;\n        }\n        res.on('data', () => {\n          // Drain socket\n        });\n\n        res.on('end', () => {\n          // Drain socket\n        });\n        res.setEncoding('utf8');\n      },\n    );\n\n    req.on('error', () => {\n      failedRequests++;\n      logger.warn('[Spotlight] Failed to send envelope to Spotlight Sidecar');\n    });\n    req.write(serializedEnvelope);\n    req.end();\n  });\n}\n\nfunction parseSidecarUrl(url: string): URL | undefined {\n  try {\n    return new URL(`${url}`);\n  } catch {\n    logger.warn(`[Spotlight] Invalid sidecar URL: ${url}`);\n    return undefined;\n  }\n}\n\ntype HttpRequestImpl = typeof http.request;\ntype WrappedHttpRequest = HttpRequestImpl & { __sentry_original__: HttpRequestImpl };\n\n/**\n * We want to get an unpatched http request implementation to avoid capturing our own calls.\n */\nexport function getNativeHttpRequest(): HttpRequestImpl {\n  const { request } = http;\n  if (isWrapped(request)) {\n    return request.__sentry_original__;\n  }\n\n  return request;\n}\n\nfunction isWrapped(impl: HttpRequestImpl): impl is WrappedHttpRequest {\n  return '__sentry_original__' in impl;\n}\n", "import { TediousInstrumentation } from '@opentelemetry/instrumentation-tedious';\nimport type { IntegrationFn } from '@sentry/core';\nimport { defineIntegration, SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, spanToJSON } from '@sentry/core';\nimport { generateInstrumentOnce, instrumentWhenWrapped } from '../../otel/instrument';\n\nconst TEDIUS_INSTRUMENTED_METHODS = new Set([\n  'callProcedure',\n  'execSql',\n  'execSqlBatch',\n  'execBulkLoad',\n  'prepare',\n  'execute',\n]);\n\nconst INTEGRATION_NAME = 'Tedious';\n\nexport const instrumentTedious = generateInstrumentOnce(INTEGRATION_NAME, () => new TediousInstrumentation({}));\n\nconst _tediousIntegration = (() => {\n  let instrumentationWrappedCallback: undefined | ((callback: () => void) => void);\n\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      const instrumentation = instrumentTedious();\n      instrumentationWrappedCallback = instrumentWhenWrapped(instrumentation);\n    },\n\n    setup(client) {\n      instrumentationWrappedCallback?.(() =>\n        client.on('spanStart', span => {\n          const { description, data } = spanToJSON(span);\n          // Tedius integration always set a span name and `db.system` attribute to `mssql`.\n          if (!description || data['db.system'] !== 'mssql') {\n            return;\n          }\n\n          const operation = description.split(' ')[0] || '';\n          if (TEDIUS_INSTRUMENTED_METHODS.has(operation)) {\n            span.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, 'auto.db.otel.tedious');\n          }\n        }),\n      );\n    },\n  };\n}) satisfies IntegrationFn;\n\n/**\n * Adds Sentry tracing instrumentation for the [tedious](https://www.npmjs.com/package/tedious) library.\n *\n * For more information, see the [`tediousIntegration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/tedious/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.tediousIntegration()],\n * });\n * ```\n */\nexport const tediousIntegration = defineIntegration(_tediousIntegration);\n", "import { GenericPoolInstrumentation } from '@opentelemetry/instrumentation-generic-pool';\nimport type { IntegrationFn } from '@sentry/core';\nimport { defineIntegration, SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, spanToJSON } from '@sentry/core';\nimport { generateInstrumentOnce, instrumentWhenWrapped } from '../../otel/instrument';\n\nconst INTEGRATION_NAME = 'GenericPool';\n\nexport const instrumentGenericPool = generateInstrumentOnce(INTEGRATION_NAME, () => new GenericPoolInstrumentation({}));\n\nconst _genericPoolIntegration = (() => {\n  let instrumentationWrappedCallback: undefined | ((callback: () => void) => void);\n\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      const instrumentation = instrumentGenericPool();\n      instrumentationWrappedCallback = instrumentWhenWrapped(instrumentation);\n    },\n\n    setup(client) {\n      instrumentationWrappedCallback?.(() =>\n        client.on('spanStart', span => {\n          const spanJSON = spanToJSON(span);\n\n          const spanDescription = spanJSON.description;\n\n          // typo in emitted span for version <= 0.38.0 of @opentelemetry/instrumentation-generic-pool\n          const isGenericPoolSpan =\n            spanDescription === 'generic-pool.aquire' || spanDescription === 'generic-pool.acquire';\n\n          if (isGenericPoolSpan) {\n            span.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, 'auto.db.otel.generic_pool');\n          }\n        }),\n      );\n    },\n  };\n}) satisfies IntegrationFn;\n\n/**\n * Adds Sentry tracing instrumentation for the [generic-pool](https://www.npmjs.com/package/generic-pool) library.\n *\n * For more information, see the [`genericPoolIntegration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/genericpool/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.genericPoolIntegration()],\n * });\n * ```\n */\nexport const genericPoolIntegration = defineIntegration(_genericPoolIntegration);\n", "import type { Span } from '@opentelemetry/api';\nimport { type AmqplibInstrumentationConfig, AmqplibInstrumentation } from '@opentelemetry/instrumentation-amqplib';\nimport type { IntegrationFn } from '@sentry/core';\nimport { defineIntegration } from '@sentry/core';\nimport { generateInstrumentOnce } from '../../otel/instrument';\nimport { addOriginToSpan } from '../../utils/addOriginToSpan';\n\nconst INTEGRATION_NAME = 'Amqplib';\n\nconst config: AmqplibInstrumentationConfig = {\n  consumeEndHook: (span: Span) => {\n    addOriginToSpan(span, 'auto.amqplib.otel.consumer');\n  },\n  publishHook: (span: Span) => {\n    addOriginToSpan(span, 'auto.amqplib.otel.publisher');\n  },\n};\n\nexport const instrumentAmqplib = generateInstrumentOnce(INTEGRATION_NAME, () => new AmqplibInstrumentation(config));\n\nconst _amqplibIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentAmqplib();\n    },\n  };\n}) satisfies IntegrationFn;\n\n/**\n * Adds Sentry tracing instrumentation for the [amqplib](https://www.npmjs.com/package/amqplib) library.\n *\n * For more information, see the [`amqplibIntegration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/amqplib/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.amqplibIntegration()],\n * });\n * ```\n */\nexport const amqplibIntegration = defineIntegration(_amqplibIntegration);\n", "import type { InstrumentationConfig, InstrumentationModuleDefinition } from '@opentelemetry/instrumentation';\nimport { InstrumentationBase, InstrumentationNodeModuleDefinition } from '@opentelemetry/instrumentation';\nimport { SDK_VERSION } from '@sentry/core';\nimport type { TelemetrySettings } from './types';\n\n// List of patched methods\n// From: https://sdk.vercel.ai/docs/ai-sdk-core/telemetry#collected-data\nconst INSTRUMENTED_METHODS = [\n  'generateText',\n  'streamText',\n  'generateObject',\n  'streamObject',\n  'embed',\n  'embedMany',\n] as const;\n\ninterface MethodFirstArg extends Record<string, unknown> {\n  experimental_telemetry?: TelemetrySettings;\n}\n\ntype MethodArgs = [MethodFirstArg, ...unknown[]];\n\ntype PatchedModuleExports = Record<(typeof INSTRUMENTED_METHODS)[number], (...args: MethodArgs) => unknown> &\n  Record<string, unknown>;\n\n/**\n * This detects is added by the Sentry Vercel AI Integration to detect if the integration should\n * be enabled.\n *\n * It also patches the `ai` module to enable Vercel AI telemetry automatically for all methods.\n */\nexport class SentryVercelAiInstrumentation extends InstrumentationBase {\n  private _isPatched = false;\n  private _callbacks: (() => void)[] = [];\n\n  public constructor(config: InstrumentationConfig = {}) {\n    super('@sentry/instrumentation-vercel-ai', SDK_VERSION, config);\n  }\n\n  /**\n   * Initializes the instrumentation by defining the modules to be patched.\n   */\n  public init(): InstrumentationModuleDefinition {\n    const module = new InstrumentationNodeModuleDefinition('ai', ['>=3.0.0 <5'], this._patch.bind(this));\n    return module;\n  }\n\n  /**\n   * Call the provided callback when the module is patched.\n   * If it has already been patched, the callback will be called immediately.\n   */\n  public callWhenPatched(callback: () => void): void {\n    if (this._isPatched) {\n      callback();\n    } else {\n      this._callbacks.push(callback);\n    }\n  }\n\n  /**\n   * Patches module exports to enable Vercel AI telemetry.\n   */\n  private _patch(moduleExports: PatchedModuleExports): unknown {\n    this._isPatched = true;\n\n    this._callbacks.forEach(callback => callback());\n    this._callbacks = [];\n\n    function generatePatch(originalMethod: (...args: MethodArgs) => unknown) {\n      return (...args: MethodArgs) => {\n        const existingExperimentalTelemetry = args[0].experimental_telemetry || {};\n        const isEnabled = existingExperimentalTelemetry.isEnabled;\n\n        // if `isEnabled` is not explicitly set to `true` or `false`, enable telemetry\n        // but disable capturing inputs and outputs by default\n        if (isEnabled === undefined) {\n          args[0].experimental_telemetry = {\n            isEnabled: true,\n            recordInputs: false,\n            recordOutputs: false,\n            ...existingExperimentalTelemetry,\n          };\n        }\n\n        // @ts-expect-error we know that the method exists\n        return originalMethod.apply(this, args);\n      };\n    }\n\n    // Is this an ESM module?\n    // https://tc39.es/ecma262/#sec-module-namespace-objects\n    if (Object.prototype.toString.call(moduleExports) === '[object Module]') {\n      // In ESM we take the usual route and just replace the exports we want to instrument\n      for (const method of INSTRUMENTED_METHODS) {\n        moduleExports[method] = generatePatch(moduleExports[method]);\n      }\n\n      return moduleExports;\n    } else {\n      // In CJS we can't replace the exports in the original module because they\n      // don't have setters, so we create a new object with the same properties\n      const patchedModuleExports = INSTRUMENTED_METHODS.reduce((acc, curr) => {\n        acc[curr] = generatePatch(moduleExports[curr]);\n        return acc;\n      }, {} as PatchedModuleExports);\n\n      return { ...moduleExports, ...patchedModuleExports };\n    }\n  }\n}\n", "/* eslint-disable complexity */\nimport type { IntegrationFn } from '@sentry/core';\nimport { defineIntegration, SEMANTIC_ATTRIBUTE_SENTRY_OP, spanToJSON } from '@sentry/core';\nimport { generateInstrumentOnce } from '../../../otel/instrument';\nimport { addOriginToSpan } from '../../../utils/addOriginToSpan';\nimport { SentryVercelAiInstrumentation } from './instrumentation';\n\nconst INTEGRATION_NAME = 'VercelAI';\n\nexport const instrumentVercelAi = generateInstrumentOnce(INTEGRATION_NAME, () => new SentryVercelAiInstrumentation({}));\n\nconst _vercelAIIntegration = (() => {\n  let instrumentation: undefined | SentryVercelAiInstrumentation;\n\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentation = instrumentVercelAi();\n    },\n    setup(client) {\n      instrumentation?.callWhenPatched(() => {\n        client.on('spanStart', span => {\n          const { data: attributes, description: name } = spanToJSON(span);\n\n          if (!name) {\n            return;\n          }\n\n          // The id of the model\n          const aiModelId = attributes['ai.model.id'];\n\n          // the provider of the model\n          const aiModelProvider = attributes['ai.model.provider'];\n\n          // both of these must be defined for the integration to work\n          if (typeof aiModelId !== 'string' || typeof aiModelProvider !== 'string' || !aiModelId || !aiModelProvider) {\n            return;\n          }\n\n          let isPipelineSpan = false;\n\n          switch (name) {\n            case 'ai.generateText': {\n              span.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_OP, 'ai.pipeline.generateText');\n              isPipelineSpan = true;\n              break;\n            }\n            case 'ai.generateText.doGenerate': {\n              span.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_OP, 'ai.run.doGenerate');\n              break;\n            }\n            case 'ai.streamText': {\n              span.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_OP, 'ai.pipeline.streamText');\n              isPipelineSpan = true;\n              break;\n            }\n            case 'ai.streamText.doStream': {\n              span.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_OP, 'ai.run.doStream');\n              break;\n            }\n            case 'ai.generateObject': {\n              span.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_OP, 'ai.pipeline.generateObject');\n              isPipelineSpan = true;\n              break;\n            }\n            case 'ai.generateObject.doGenerate': {\n              span.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_OP, 'ai.run.doGenerate');\n              break;\n            }\n            case 'ai.streamObject': {\n              span.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_OP, 'ai.pipeline.streamObject');\n              isPipelineSpan = true;\n              break;\n            }\n            case 'ai.streamObject.doStream': {\n              span.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_OP, 'ai.run.doStream');\n              break;\n            }\n            case 'ai.embed': {\n              span.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_OP, 'ai.pipeline.embed');\n              isPipelineSpan = true;\n              break;\n            }\n            case 'ai.embed.doEmbed': {\n              span.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_OP, 'ai.embeddings');\n              break;\n            }\n            case 'ai.embedMany': {\n              span.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_OP, 'ai.pipeline.embedMany');\n              isPipelineSpan = true;\n              break;\n            }\n            case 'ai.embedMany.doEmbed': {\n              span.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_OP, 'ai.embeddings');\n              break;\n            }\n            case 'ai.toolCall':\n            case 'ai.stream.firstChunk':\n            case 'ai.stream.finish':\n              span.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_OP, 'ai.run');\n              break;\n          }\n\n          addOriginToSpan(span, 'auto.vercelai.otel');\n\n          const nameWthoutAi = name.replace('ai.', '');\n          span.setAttribute('ai.pipeline.name', nameWthoutAi);\n          span.updateName(nameWthoutAi);\n\n          // If a Telemetry name is set and it is a pipeline span, use that as the operation name\n          const functionId = attributes['ai.telemetry.functionId'];\n          if (functionId && typeof functionId === 'string' && isPipelineSpan) {\n            span.updateName(functionId);\n            span.setAttribute('ai.pipeline.name', functionId);\n          }\n\n          if (attributes['ai.prompt']) {\n            span.setAttribute('ai.input_messages', attributes['ai.prompt']);\n          }\n          if (attributes['ai.model.id']) {\n            span.setAttribute('ai.model_id', attributes['ai.model.id']);\n          }\n          span.setAttribute('ai.streaming', name.includes('stream'));\n        });\n\n        client.addEventProcessor(event => {\n          if (event.type === 'transaction' && event.spans?.length) {\n            for (const span of event.spans) {\n              const { data: attributes, description: name } = span;\n\n              if (!name || span.origin !== 'auto.vercelai.otel') {\n                continue;\n              }\n\n              if (attributes['ai.usage.completionTokens'] != undefined) {\n                attributes['ai.completion_tokens.used'] = attributes['ai.usage.completionTokens'];\n              }\n              if (attributes['ai.usage.promptTokens'] != undefined) {\n                attributes['ai.prompt_tokens.used'] = attributes['ai.usage.promptTokens'];\n              }\n              if (\n                typeof attributes['ai.usage.completionTokens'] == 'number' &&\n                typeof attributes['ai.usage.promptTokens'] == 'number'\n              ) {\n                attributes['ai.total_tokens.used'] =\n                  attributes['ai.usage.completionTokens'] + attributes['ai.usage.promptTokens'];\n              }\n            }\n          }\n\n          return event;\n        });\n      });\n    },\n  };\n}) satisfies IntegrationFn;\n\n/**\n * Adds Sentry tracing instrumentation for the [ai](https://www.npmjs.com/package/ai) library.\n *\n * For more information, see the [`ai` documentation](https://sdk.vercel.ai/docs/ai-sdk-core/telemetry).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.vercelAIIntegration()],\n * });\n * ```\n *\n * By default this integration adds tracing support to all `ai` function calls. If you need to disable\n * collecting spans for a specific call, you can do so by setting `experimental_telemetry.isEnabled` to\n * `false` in the first argument of the function call.\n *\n * ```javascript\n * const result = await generateText({\n *   model: openai('gpt-4-turbo'),\n *   experimental_telemetry: { isEnabled: false },\n * });\n * ```\n *\n * If you want to collect inputs and outputs for a specific call, you must specifically opt-in to each\n * function call by setting `experimental_telemetry.recordInputs` and `experimental_telemetry.recordOutputs`\n * to `true`.\n *\n * ```javascript\n * const result = await generateText({\n *  model: openai('gpt-4-turbo'),\n *  experimental_telemetry: { isEnabled: true, recordInputs: true, recordOutputs: true },\n * });\n */\nexport const vercelAIIntegration = defineIntegration(_vercelAIIntegration);\n", "import type { ChildProcess } from 'node:child_process';\nimport * as diagnosticsChannel from 'node:diagnostics_channel';\nimport type { Worker } from 'node:worker_threads';\nimport { addBreadcrumb, captureException, defineIntegration } from '@sentry/core';\n\ninterface Options {\n  /**\n   * Whether to include child process arguments in breadcrumbs data.\n   *\n   * @default false\n   */\n  includeChildProcessArgs?: boolean;\n\n  /**\n   * Whether to capture errors from worker threads.\n   *\n   * @default true\n   */\n  captureWorkerErrors?: boolean;\n}\n\nconst INTEGRATION_NAME = 'ChildProcess';\n\n/**\n * Capture breadcrumbs and events for child processes and worker threads.\n */\nexport const childProcessIntegration = defineIntegration((options: Options = {}) => {\n  return {\n    name: INTEGRATION_NAME,\n    setup() {\n      diagnosticsChannel.channel('child_process').subscribe((event: unknown) => {\n        if (event && typeof event === 'object' && 'process' in event) {\n          captureChildProcessEvents(event.process as ChildProcess, options);\n        }\n      });\n\n      diagnosticsChannel.channel('worker_threads').subscribe((event: unknown) => {\n        if (event && typeof event === 'object' && 'worker' in event) {\n          captureWorkerThreadEvents(event.worker as Worker, options);\n        }\n      });\n    },\n  };\n});\n\nfunction captureChildProcessEvents(child: ChildProcess, options: Options): void {\n  let hasExited = false;\n  let data: Record<string, unknown> | undefined;\n\n  child\n    .on('spawn', () => {\n      // This is Sentry getting macOS OS context\n      if (child.spawnfile === '/usr/bin/sw_vers') {\n        hasExited = true;\n        return;\n      }\n\n      data = { spawnfile: child.spawnfile };\n      if (options.includeChildProcessArgs) {\n        data.spawnargs = child.spawnargs;\n      }\n    })\n    .on('exit', code => {\n      if (!hasExited) {\n        hasExited = true;\n\n        // Only log for non-zero exit codes\n        if (code !== null && code !== 0) {\n          addBreadcrumb({\n            category: 'child_process',\n            message: `Child process exited with code '${code}'`,\n            level: code === 0 ? 'info' : 'warning',\n            data,\n          });\n        }\n      }\n    })\n    .on('error', error => {\n      if (!hasExited) {\n        hasExited = true;\n\n        addBreadcrumb({\n          category: 'child_process',\n          message: `Child process errored with '${error.message}'`,\n          level: 'error',\n          data,\n        });\n      }\n    });\n}\n\nfunction captureWorkerThreadEvents(worker: Worker, options: Options): void {\n  let threadId: number | undefined;\n\n  worker\n    .on('online', () => {\n      threadId = worker.threadId;\n    })\n    .on('error', error => {\n      if (options.captureWorkerErrors !== false) {\n        captureException(error, {\n          mechanism: { type: 'instrument', handled: false, data: { threadId: String(threadId) } },\n        });\n      } else {\n        addBreadcrumb({\n          category: 'worker_thread',\n          message: `Worker thread errored with '${error.message}'`,\n          level: 'error',\n          data: { threadId },\n        });\n      }\n    });\n}\n", "import { AsyncLocalStorageContextManager } from '@opentelemetry/context-async-hooks';\nimport { wrapContextManagerClass } from '@sentry/opentelemetry';\n\n/**\n * This is a custom ContextManager for OpenTelemetry, which extends the default AsyncLocalStorageContextManager.\n * It ensures that we create a new hub per context, so that the OTEL Context & the Sentry Scopes are always in sync.\n *\n * Note that we currently only support AsyncHooks with this,\n * but since this should work for Node 14+ anyhow that should be good enough.\n */\nexport const SentryContextManager = wrapContextManagerClass(AsyncLocalStorageContextManager);\n", "import { defineIntegration, endSession, getIsolationScope, startSession } from '@sentry/core';\n\nconst INTEGRATION_NAME = 'ProcessSession';\n\n/**\n * Records a Session for the current process to track release health.\n */\nexport const processSessionIntegration = defineIntegration(() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      startSession();\n\n      // Emitted in the case of healthy sessions, error of `mechanism.handled: true` and unhandledrejections because\n      // The 'beforeExit' event is not emitted for conditions causing explicit termination,\n      // such as calling process.exit() or uncaught exceptions.\n      // Ref: https://nodejs.org/api/process.html#process_event_beforeexit\n      process.on('beforeExit', () => {\n        const session = getIsolationScope().getSession();\n\n        // Only call endSession, if the Session exists on Scope and SessionStatus is not a\n        // Terminal Status i.e. Exited or Crashed because\n        // \"When a session is moved away from ok it must not be updated anymore.\"\n        // Ref: https://develop.sentry.dev/sdk/sessions/\n        if (session?.status !== 'ok') {\n          endSession();\n        }\n      });\n    },\n  };\n});\n", "import type { Integration } from '@sentry/core';\nimport { instrumentOtelHttp } from '../http';\nimport { amqplibIntegration, instrumentAmqplib } from './amqplib';\nimport { connectIntegration, instrumentConnect } from './connect';\nimport { expressIntegration, instrumentExpress, instrumentExpressV5 } from './express';\nimport { fastifyIntegration, instrumentFastify, instrumentFastifyV3 } from './fastify';\nimport { genericPoolIntegration, instrumentGenericPool } from './genericPool';\nimport { graphqlIntegration, instrumentGraphql } from './graphql';\nimport { hapiIntegration, instrumentHapi } from './hapi';\nimport { instrumentKafka, kafkaIntegration } from './kafka';\nimport { instrumentKoa, koaIntegration } from './koa';\nimport { instrumentLruMemoizer, lruMemoizerIntegration } from './lrumemoizer';\nimport { instrumentMongo, mongoIntegration } from './mongo';\nimport { instrumentMongoose, mongooseIntegration } from './mongoose';\nimport { instrumentMysql, mysqlIntegration } from './mysql';\nimport { instrumentMysql2, mysql2Integration } from './mysql2';\nimport { instrumentPostgres, postgresIntegration } from './postgres';\nimport { prismaIntegration } from './prisma';\nimport { instrumentRedis, redisIntegration } from './redis';\nimport { instrumentTedious, tediousIntegration } from './tedious';\nimport { instrumentVercelAi, vercelAIIntegration } from './vercelai';\n\n/**\n * With OTEL, all performance integrations will be added, as OTEL only initializes them when the patched package is actually required.\n */\nexport function getAutoPerformanceIntegrations(): Integration[] {\n  return [\n    expressIntegration(),\n    fastifyIntegration(),\n    graphqlIntegration(),\n    mongoIntegration(),\n    mongooseIntegration(),\n    mysqlIntegration(),\n    mysql2Integration(),\n    redisIntegration(),\n    postgresIntegration(),\n    prismaIntegration(),\n    hapiIntegration(),\n    koaIntegration(),\n    connectIntegration(),\n    tediousIntegration(),\n    genericPoolIntegration(),\n    kafkaIntegration(),\n    amqplibIntegration(),\n    lruMemoizerIntegration(),\n    vercelAIIntegration(),\n  ];\n}\n\n/**\n * Get a list of methods to instrument OTEL, when preload instrumentation.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function getOpenTelemetryInstrumentationToPreload(): (((options?: any) => void) & { id: string })[] {\n  return [\n    instrumentOtelHttp,\n    instrumentExpress,\n    instrumentExpressV5,\n    instrumentConnect,\n    instrumentFastify,\n    instrumentFastifyV3,\n    instrumentHapi,\n    instrumentKafka,\n    instrumentKoa,\n    instrumentLruMemoizer,\n    instrumentMongo,\n    instrumentMongoose,\n    instrumentMysql,\n    instrumentMysql2,\n    instrumentPostgres,\n    instrumentHapi,\n    instrumentGraphql,\n    instrumentRedis,\n    instrumentTedious,\n    instrumentGenericPool,\n    instrumentAmqplib,\n    instrumentVercelAi,\n  ];\n}\n", "/**\n * This code was originally forked from https://github.com/TooTallNate/proxy-agents/tree/b133295fd16f6475578b6b15bd9b4e33ecb0d0b7\n * With the following LICENSE:\n *\n * (The MIT License)\n *\n * Copyright (c) 2013 Nathan Rajlich <nathan@tootallnate.net>*\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * 'Software'), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:*\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.*\n *\n * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\n/* eslint-disable @typescript-eslint/explicit-member-accessibility */\n/* eslint-disable @typescript-eslint/member-ordering */\n/* eslint-disable jsdoc/require-jsdoc */\nimport * as http from 'node:http';\nimport type * as net from 'node:net';\nimport type { Duplex } from 'node:stream';\nimport type * as tls from 'node:tls';\n\nexport * from './helpers';\n\ninterface HttpConnectOpts extends net.TcpNetConnectOpts {\n  secureEndpoint: false;\n  protocol?: string;\n}\n\ninterface HttpsConnectOpts extends tls.ConnectionOptions {\n  secureEndpoint: true;\n  protocol?: string;\n  port: number;\n}\n\nexport type AgentConnectOpts = HttpConnectOpts | HttpsConnectOpts;\n\nconst INTERNAL = Symbol('AgentBaseInternalState');\n\ninterface InternalState {\n  defaultPort?: number;\n  protocol?: string;\n  currentSocket?: Duplex;\n}\n\nexport abstract class Agent extends http.Agent {\n  private [INTERNAL]: InternalState;\n\n  // Set by `http.Agent` - missing from `@types/node`\n  options!: Partial<net.TcpNetConnectOpts & tls.ConnectionOptions>;\n  keepAlive!: boolean;\n\n  constructor(opts?: http.AgentOptions) {\n    super(opts);\n    this[INTERNAL] = {};\n  }\n\n  abstract connect(\n    req: http.ClientRequest,\n    options: AgentConnectOpts,\n  ): Promise<Duplex | http.Agent> | Duplex | http.Agent;\n\n  /**\n   * Determine whether this is an `http` or `https` request.\n   */\n  isSecureEndpoint(options?: AgentConnectOpts): boolean {\n    if (options) {\n      // First check the `secureEndpoint` property explicitly, since this\n      // means that a parent `Agent` is \"passing through\" to this instance.\n      if (typeof (options as Partial<typeof options>).secureEndpoint === 'boolean') {\n        return options.secureEndpoint;\n      }\n\n      // If no explicit `secure` endpoint, check if `protocol` property is\n      // set. This will usually be the case since using a full string URL\n      // or `URL` instance should be the most common usage.\n      if (typeof options.protocol === 'string') {\n        return options.protocol === 'https:';\n      }\n    }\n\n    // Finally, if no `protocol` property was set, then fall back to\n    // checking the stack trace of the current call stack, and try to\n    // detect the \"https\" module.\n    const { stack } = new Error();\n    if (typeof stack !== 'string') return false;\n    return stack.split('\\n').some(l => l.indexOf('(https.js:') !== -1 || l.indexOf('node:https:') !== -1);\n  }\n\n  createSocket(req: http.ClientRequest, options: AgentConnectOpts, cb: (err: Error | null, s?: Duplex) => void): void {\n    const connectOpts = {\n      ...options,\n      secureEndpoint: this.isSecureEndpoint(options),\n    };\n    Promise.resolve()\n      .then(() => this.connect(req, connectOpts))\n      .then(socket => {\n        if (socket instanceof http.Agent) {\n          // @ts-expect-error `addRequest()` isn't defined in `@types/node`\n          return socket.addRequest(req, connectOpts);\n        }\n        this[INTERNAL].currentSocket = socket;\n        // @ts-expect-error `createSocket()` isn't defined in `@types/node`\n        super.createSocket(req, options, cb);\n      }, cb);\n  }\n\n  createConnection(): Duplex {\n    const socket = this[INTERNAL].currentSocket;\n    this[INTERNAL].currentSocket = undefined;\n    if (!socket) {\n      throw new Error('No socket was returned in the `connect()` function');\n    }\n    return socket;\n  }\n\n  get defaultPort(): number {\n    return this[INTERNAL].defaultPort ?? (this.protocol === 'https:' ? 443 : 80);\n  }\n\n  set defaultPort(v: number) {\n    if (this[INTERNAL]) {\n      this[INTERNAL].defaultPort = v;\n    }\n  }\n\n  get protocol(): string {\n    return this[INTERNAL].protocol ?? (this.isSecureEndpoint() ? 'https:' : 'http:');\n  }\n\n  set protocol(v: string) {\n    if (this[INTERNAL]) {\n      this[INTERNAL].protocol = v;\n    }\n  }\n}\n", "/**\n * This code was originally forked from https://github.com/TooTallNate/proxy-agents/tree/b133295fd16f6475578b6b15bd9b4e33ecb0d0b7\n * With the following LICENSE:\n *\n * (The MIT License)\n *\n * Copyright (c) 2013 Nathan Rajlich <nathan@tootallnate.net>*\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * 'Software'), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:*\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.*\n *\n * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\n/* eslint-disable @typescript-eslint/explicit-function-return-type */\n/* eslint-disable jsdoc/require-jsdoc */\nimport type { IncomingHttpHeaders } from 'node:http';\nimport type { Readable } from 'node:stream';\nimport { logger } from '@sentry/core';\n\nfunction debug(...args: unknown[]): void {\n  logger.log('[https-proxy-agent:parse-proxy-response]', ...args);\n}\n\nexport interface ConnectResponse {\n  statusCode: number;\n  statusText: string;\n  headers: IncomingHttpHeaders;\n}\n\nexport function parseProxyResponse(socket: Readable): Promise<{ connect: ConnectResponse; buffered: Buffer }> {\n  return new Promise((resolve, reject) => {\n    // we need to buffer any HTTP traffic that happens with the proxy before we get\n    // the CONNECT response, so that if the response is anything other than an \"200\"\n    // response code, then we can re-play the \"data\" events on the socket once the\n    // HTTP parser is hooked up...\n    let buffersLength = 0;\n    const buffers: Buffer[] = [];\n\n    function read() {\n      const b = socket.read();\n      if (b) ondata(b);\n      else socket.once('readable', read);\n    }\n\n    function cleanup() {\n      socket.removeListener('end', onend);\n      socket.removeListener('error', onerror);\n      socket.removeListener('readable', read);\n    }\n\n    function onend() {\n      cleanup();\n      debug('onend');\n      reject(new Error('Proxy connection ended before receiving CONNECT response'));\n    }\n\n    function onerror(err: Error) {\n      cleanup();\n      debug('onerror %o', err);\n      reject(err);\n    }\n\n    function ondata(b: Buffer) {\n      buffers.push(b);\n      buffersLength += b.length;\n\n      const buffered = Buffer.concat(buffers, buffersLength);\n      const endOfHeaders = buffered.indexOf('\\r\\n\\r\\n');\n\n      if (endOfHeaders === -1) {\n        // keep buffering\n        debug('have not received end of HTTP headers yet...');\n        read();\n        return;\n      }\n\n      const headerParts = buffered.subarray(0, endOfHeaders).toString('ascii').split('\\r\\n');\n      const firstLine = headerParts.shift();\n      if (!firstLine) {\n        socket.destroy();\n        return reject(new Error('No header received from proxy CONNECT response'));\n      }\n      const firstLineParts = firstLine.split(' ');\n      const statusCode = +(firstLineParts[1] || 0);\n      const statusText = firstLineParts.slice(2).join(' ');\n      const headers: IncomingHttpHeaders = {};\n      for (const header of headerParts) {\n        if (!header) continue;\n        const firstColon = header.indexOf(':');\n        if (firstColon === -1) {\n          socket.destroy();\n          return reject(new Error(`Invalid header from proxy CONNECT response: \"${header}\"`));\n        }\n        const key = header.slice(0, firstColon).toLowerCase();\n        const value = header.slice(firstColon + 1).trimStart();\n        const current = headers[key];\n        if (typeof current === 'string') {\n          headers[key] = [current, value];\n        } else if (Array.isArray(current)) {\n          current.push(value);\n        } else {\n          headers[key] = value;\n        }\n      }\n      debug('got proxy server response: %o %o', firstLine, headers);\n      cleanup();\n      resolve({\n        connect: {\n          statusCode,\n          statusText,\n          headers,\n        },\n        buffered,\n      });\n    }\n\n    socket.on('error', onerror);\n    socket.on('end', onend);\n\n    read();\n  });\n}\n", "/**\n * This code was originally forked from https://github.com/TooTallNate/proxy-agents/tree/b133295fd16f6475578b6b15bd9b4e33ecb0d0b7\n * With the following LICENSE:\n *\n * (The MIT License)\n *\n * Copyright (c) 2013 Nathan Rajlich <nathan@tootallnate.net>*\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * 'Software'), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:*\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.*\n *\n * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\n/* eslint-disable @typescript-eslint/explicit-member-accessibility */\n/* eslint-disable @typescript-eslint/no-unused-vars */\nimport type * as http from 'node:http';\nimport type { OutgoingHttpHeaders } from 'node:http';\nimport * as net from 'node:net';\nimport * as tls from 'node:tls';\nimport { logger } from '@sentry/core';\nimport type { AgentConnectOpts } from './base';\nimport { Agent } from './base';\nimport { parseProxyResponse } from './parse-proxy-response';\n\nfunction debug(...args: unknown[]): void {\n  logger.log('[https-proxy-agent]', ...args);\n}\n\ntype Protocol<T> = T extends `${infer Protocol}:${infer _}` ? Protocol : never;\n\ntype ConnectOptsMap = {\n  http: Omit<net.TcpNetConnectOpts, 'host' | 'port'>;\n  https: Omit<tls.ConnectionOptions, 'host' | 'port'>;\n};\n\ntype ConnectOpts<T> = {\n  [P in keyof ConnectOptsMap]: Protocol<T> extends P ? ConnectOptsMap[P] : never;\n}[keyof ConnectOptsMap];\n\nexport type HttpsProxyAgentOptions<T> = ConnectOpts<T> &\n  http.AgentOptions & {\n    headers?: OutgoingHttpHeaders | (() => OutgoingHttpHeaders);\n  };\n\n/**\n * The `HttpsProxyAgent` implements an HTTP Agent subclass that connects to\n * the specified \"HTTP(s) proxy server\" in order to proxy HTTPS requests.\n *\n * Outgoing HTTP requests are first tunneled through the proxy server using the\n * `CONNECT` HTTP request method to establish a connection to the proxy server,\n * and then the proxy server connects to the destination target and issues the\n * HTTP request from the proxy server.\n *\n * `https:` requests have their socket connection upgraded to TLS once\n * the connection to the proxy server has been established.\n */\nexport class HttpsProxyAgent<Uri extends string> extends Agent {\n  static protocols = ['http', 'https'] as const;\n\n  readonly proxy: URL;\n  proxyHeaders: OutgoingHttpHeaders | (() => OutgoingHttpHeaders);\n  connectOpts: net.TcpNetConnectOpts & tls.ConnectionOptions;\n\n  constructor(proxy: Uri | URL, opts?: HttpsProxyAgentOptions<Uri>) {\n    super(opts);\n    this.options = {};\n    this.proxy = typeof proxy === 'string' ? new URL(proxy) : proxy;\n    this.proxyHeaders = opts?.headers ?? {};\n    debug('Creating new HttpsProxyAgent instance: %o', this.proxy.href);\n\n    // Trim off the brackets from IPv6 addresses\n    const host = (this.proxy.hostname || this.proxy.host).replace(/^\\[|\\]$/g, '');\n    const port = this.proxy.port ? parseInt(this.proxy.port, 10) : this.proxy.protocol === 'https:' ? 443 : 80;\n    this.connectOpts = {\n      // Attempt to negotiate http/1.1 for proxy servers that support http/2\n      ALPNProtocols: ['http/1.1'],\n      ...(opts ? omit(opts, 'headers') : null),\n      host,\n      port,\n    };\n  }\n\n  /**\n   * Called when the node-core HTTP client library is creating a\n   * new HTTP request.\n   */\n  async connect(req: http.ClientRequest, opts: AgentConnectOpts): Promise<net.Socket> {\n    const { proxy } = this;\n\n    if (!opts.host) {\n      throw new TypeError('No \"host\" provided');\n    }\n\n    // Create a socket connection to the proxy server.\n    let socket: net.Socket;\n    if (proxy.protocol === 'https:') {\n      debug('Creating `tls.Socket`: %o', this.connectOpts);\n      const servername = this.connectOpts.servername || this.connectOpts.host;\n      socket = tls.connect({\n        ...this.connectOpts,\n        servername: servername && net.isIP(servername) ? undefined : servername,\n      });\n    } else {\n      debug('Creating `net.Socket`: %o', this.connectOpts);\n      socket = net.connect(this.connectOpts);\n    }\n\n    const headers: OutgoingHttpHeaders =\n      typeof this.proxyHeaders === 'function' ? this.proxyHeaders() : { ...this.proxyHeaders };\n    const host = net.isIPv6(opts.host) ? `[${opts.host}]` : opts.host;\n    let payload = `CONNECT ${host}:${opts.port} HTTP/1.1\\r\\n`;\n\n    // Inject the `Proxy-Authorization` header if necessary.\n    if (proxy.username || proxy.password) {\n      const auth = `${decodeURIComponent(proxy.username)}:${decodeURIComponent(proxy.password)}`;\n      headers['Proxy-Authorization'] = `Basic ${Buffer.from(auth).toString('base64')}`;\n    }\n\n    headers.Host = `${host}:${opts.port}`;\n\n    if (!headers['Proxy-Connection']) {\n      headers['Proxy-Connection'] = this.keepAlive ? 'Keep-Alive' : 'close';\n    }\n    for (const name of Object.keys(headers)) {\n      payload += `${name}: ${headers[name]}\\r\\n`;\n    }\n\n    const proxyResponsePromise = parseProxyResponse(socket);\n\n    socket.write(`${payload}\\r\\n`);\n\n    const { connect, buffered } = await proxyResponsePromise;\n    req.emit('proxyConnect', connect);\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore Not EventEmitter in Node types\n    this.emit('proxyConnect', connect, req);\n\n    if (connect.statusCode === 200) {\n      req.once('socket', resume);\n\n      if (opts.secureEndpoint) {\n        // The proxy is connecting to a TLS server, so upgrade\n        // this socket connection to a TLS connection.\n        debug('Upgrading socket connection to TLS');\n        const servername = opts.servername || opts.host;\n        return tls.connect({\n          ...omit(opts, 'host', 'path', 'port'),\n          socket,\n          servername: net.isIP(servername) ? undefined : servername,\n        });\n      }\n\n      return socket;\n    }\n\n    // Some other status code that's not 200... need to re-play the HTTP\n    // header \"data\" events onto the socket once the HTTP machinery is\n    // attached so that the node core `http` can parse and handle the\n    // error status code.\n\n    // Close the original socket, and a new \"fake\" socket is returned\n    // instead, so that the proxy doesn't get the HTTP request\n    // written to it (which may contain `Authorization` headers or other\n    // sensitive data).\n    //\n    // See: https://hackerone.com/reports/541502\n    socket.destroy();\n\n    const fakeSocket = new net.Socket({ writable: false });\n    fakeSocket.readable = true;\n\n    // Need to wait for the \"socket\" event to re-play the \"data\" events.\n    req.once('socket', (s: net.Socket) => {\n      debug('Replaying proxy buffer for failed request');\n      // Replay the \"buffered\" Buffer onto the fake `socket`, since at\n      // this point the HTTP module machinery has been hooked up for\n      // the user.\n      s.push(buffered);\n      s.push(null);\n    });\n\n    return fakeSocket;\n  }\n}\n\nfunction resume(socket: net.Socket | tls.TLSSocket): void {\n  socket.resume();\n}\n\nfunction omit<T extends object, K extends [...(keyof T)[]]>(\n  obj: T,\n  ...keys: K\n): {\n  [K2 in Exclude<keyof T, K[number]>]: T[K2];\n} {\n  const ret = {} as {\n    [K in keyof typeof obj]: (typeof obj)[K];\n  };\n  let key: keyof typeof obj;\n  for (key in obj) {\n    if (!keys.includes(key)) {\n      ret[key] = obj[key];\n    }\n  }\n  return ret;\n}\n", "import * as http from 'node:http';\nimport * as https from 'node:https';\nimport { Readable } from 'node:stream';\nimport { createGzip } from 'node:zlib';\nimport type {\n  BaseTransportOptions,\n  Transport,\n  TransportMakeRequestResponse,\n  TransportRequest,\n  TransportRequestExecutor,\n} from '@sentry/core';\nimport { consoleSandbox, createTransport, suppressTracing } from '@sentry/core';\nimport { HttpsProxyAgent } from '../proxy';\nimport type { HTTPModule } from './http-module';\n\nexport interface NodeTransportOptions extends BaseTransportOptions {\n  /** Define custom headers */\n  headers?: Record<string, string>;\n  /** Set a proxy that should be used for outbound requests. */\n  proxy?: string;\n  /** HTTPS proxy CA certificates */\n  caCerts?: string | Buffer | Array<string | Buffer>;\n  /** Custom HTTP module. Defaults to the native 'http' and 'https' modules. */\n  httpModule?: HTTPModule;\n  /** Allow overriding connection keepAlive, defaults to false */\n  keepAlive?: boolean;\n}\n\n// Estimated maximum size for reasonable standalone event\nconst GZIP_THRESHOLD = 1024 * 32;\n\n/**\n * Gets a stream from a Uint8Array or string\n * Readable.from is ideal but was added in node.js v12.3.0 and v10.17.0\n */\nfunction streamFromBody(body: Uint8Array | string): Readable {\n  return new Readable({\n    read() {\n      this.push(body);\n      this.push(null);\n    },\n  });\n}\n\n/**\n * Creates a Transport that uses native the native 'http' and 'https' modules to send events to Sentry.\n */\nexport function makeNodeTransport(options: NodeTransportOptions): Transport {\n  let urlSegments: URL;\n\n  try {\n    urlSegments = new URL(options.url);\n  } catch (e) {\n    consoleSandbox(() => {\n      // eslint-disable-next-line no-console\n      console.warn(\n        '[@sentry/node]: Invalid dsn or tunnel option, will not send any events. The tunnel option must be a full URL when used.',\n      );\n    });\n    return createTransport(options, () => Promise.resolve({}));\n  }\n\n  const isHttps = urlSegments.protocol === 'https:';\n\n  // Proxy prioritization: http => `options.proxy` | `process.env.http_proxy`\n  // Proxy prioritization: https => `options.proxy` | `process.env.https_proxy` | `process.env.http_proxy`\n  const proxy = applyNoProxyOption(\n    urlSegments,\n    options.proxy || (isHttps ? process.env.https_proxy : undefined) || process.env.http_proxy,\n  );\n\n  const nativeHttpModule = isHttps ? https : http;\n  const keepAlive = options.keepAlive === undefined ? false : options.keepAlive;\n\n  // TODO(v10): Evaluate if we can set keepAlive to true. This would involve testing for memory leaks in older node\n  // versions(>= 8) as they had memory leaks when using it: #2555\n  const agent = proxy\n    ? (new HttpsProxyAgent(proxy) as http.Agent)\n    : new nativeHttpModule.Agent({ keepAlive, maxSockets: 30, timeout: 2000 });\n\n  const requestExecutor = createRequestExecutor(options, options.httpModule ?? nativeHttpModule, agent);\n  return createTransport(options, requestExecutor);\n}\n\n/**\n * Honors the `no_proxy` env variable with the highest priority to allow for hosts exclusion.\n *\n * @param transportUrl The URL the transport intends to send events to.\n * @param proxy The client configured proxy.\n * @returns A proxy the transport should use.\n */\nfunction applyNoProxyOption(transportUrlSegments: URL, proxy: string | undefined): string | undefined {\n  const { no_proxy } = process.env;\n\n  const urlIsExemptFromProxy = no_proxy\n    ?.split(',')\n    .some(\n      exemption => transportUrlSegments.host.endsWith(exemption) || transportUrlSegments.hostname.endsWith(exemption),\n    );\n\n  if (urlIsExemptFromProxy) {\n    return undefined;\n  } else {\n    return proxy;\n  }\n}\n\n/**\n * Creates a RequestExecutor to be used with `createTransport`.\n */\nfunction createRequestExecutor(\n  options: NodeTransportOptions,\n  httpModule: HTTPModule,\n  agent: http.Agent,\n): TransportRequestExecutor {\n  const { hostname, pathname, port, protocol, search } = new URL(options.url);\n  return function makeRequest(request: TransportRequest): Promise<TransportMakeRequestResponse> {\n    return new Promise((resolve, reject) => {\n      // This ensures we do not generate any spans in OpenTelemetry for the transport\n      suppressTracing(() => {\n        let body = streamFromBody(request.body);\n\n        const headers: Record<string, string> = { ...options.headers };\n\n        if (request.body.length > GZIP_THRESHOLD) {\n          headers['content-encoding'] = 'gzip';\n          body = body.pipe(createGzip());\n        }\n\n        const req = httpModule.request(\n          {\n            method: 'POST',\n            agent,\n            headers,\n            hostname,\n            path: `${pathname}${search}`,\n            port,\n            protocol,\n            ca: options.caCerts,\n          },\n          res => {\n            res.on('data', () => {\n              // Drain socket\n            });\n\n            res.on('end', () => {\n              // Drain socket\n            });\n\n            res.setEncoding('utf8');\n\n            // \"Key-value pairs of header names and values. Header names are lower-cased.\"\n            // https://nodejs.org/api/http.html#http_message_headers\n            const retryAfterHeader = res.headers['retry-after'] ?? null;\n            const rateLimitsHeader = res.headers['x-sentry-rate-limits'] ?? null;\n\n            resolve({\n              statusCode: res.statusCode,\n              headers: {\n                'retry-after': retryAfterHeader,\n                'x-sentry-rate-limits': Array.isArray(rateLimitsHeader)\n                  ? rateLimitsHeader[0] || null\n                  : rateLimitsHeader,\n              },\n            });\n          },\n        );\n\n        req.on('error', reject);\n        body.pipe(req);\n      });\n    });\n  };\n}\n", "export const FALSY_ENV_VALUES = new Set(['false', 'f', 'n', 'no', 'off', '0']);\nexport const TRUTHY_ENV_VALUES = new Set(['true', 't', 'y', 'yes', 'on', '1']);\n\nexport type StrictBoolCast = {\n  strict: true;\n};\n\nexport type LooseBoolCast = {\n  strict?: false;\n};\n\nexport type BoolCastOptions = StrictBoolCast | LooseBoolCast;\n\nexport function envToBool(value: unknown, options?: LooseBoolCast): boolean;\nexport function envToBool(value: unknown, options: StrictBoolCast): boolean | null;\nexport function envToBool(value: unknown, options?: BoolCastOptions): boolean | null;\n/**\n * A helper function which casts an ENV variable value to `true` or `false` using the constants defined above.\n * In strict mode, it may return `null` if the value doesn't match any of the predefined values.\n *\n * @param value The value of the env variable\n * @param options -- Only has `strict` key for now, which requires a strict match for `true` in TRUTHY_ENV_VALUES\n * @returns true/false if the lowercase value matches the predefined values above. If not, null in strict mode,\n *          and Boolean(value) in loose mode.\n */\nexport function envToBool(value: unknown, options?: BoolCastOptions): boolean | null {\n  const normalized = String(value).toLowerCase();\n\n  if (FALSY_ENV_VALUES.has(normalized)) {\n    return false;\n  }\n\n  if (TRUTHY_ENV_VALUES.has(normalized)) {\n    return true;\n  }\n\n  return options?.strict ? null : Boolean(value);\n}\n", "import { posix, sep } from 'node:path';\nimport { dirname } from '@sentry/core';\n\n/** normalizes Windows paths */\nfunction normalizeWindowsPath(path: string): string {\n  return path\n    .replace(/^[A-Z]:/, '') // remove Windows-style prefix\n    .replace(/\\\\/g, '/'); // replace all `\\` instances with `/`\n}\n\n/** Creates a function that gets the module name from a filename */\nexport function createGetModuleFromFilename(\n  basePath: string = process.argv[1] ? dirname(process.argv[1]) : process.cwd(),\n  isWindows: boolean = sep === '\\\\',\n): (filename: string | undefined) => string | undefined {\n  const normalizedBase = isWindows ? normalizeWindowsPath(basePath) : basePath;\n\n  return (filename: string | undefined) => {\n    if (!filename) {\n      return;\n    }\n\n    const normalizedFilename = isWindows ? normalizeWindowsPath(filename) : filename;\n\n    // eslint-disable-next-line prefer-const\n    let { dir, base: file, ext } = posix.parse(normalizedFilename);\n\n    if (ext === '.js' || ext === '.mjs' || ext === '.cjs') {\n      file = file.slice(0, ext.length * -1);\n    }\n\n    // The file name might be URI-encoded which we want to decode to\n    // the original file name.\n    const decodedFile = decodeURIComponent(file);\n\n    if (!dir) {\n      // No dirname whatsoever\n      dir = '.';\n    }\n\n    const n = dir.lastIndexOf('/node_modules');\n    if (n > -1) {\n      return `${dir.slice(n + 14).replace(/\\//g, '.')}:${decodedFile}`;\n    }\n\n    // Let's see if it's a part of the main module\n    // To be a part of main module, it has to share the same base\n    if (dir.startsWith(normalizedBase)) {\n      const moduleName = dir.slice(normalizedBase.length + 1).replace(/\\//g, '.');\n      return moduleName ? `${moduleName}:${decodedFile}` : decodedFile;\n    }\n\n    return decodedFile;\n  };\n}\n", "// PUBLIC APIS\n\nimport type { StackParser } from '@sentry/core';\nimport { createStackParser, GLOBAL_OBJ, nodeStackLineParser } from '@sentry/core';\nimport { createGetModuleFromFilename } from '../utils/module';\n\n/**\n * Returns a release dynamically from environment variables.\n */\n// eslint-disable-next-line complexity\nexport function getSentryRelease(fallback?: string): string | undefined {\n  // Always read first as Sentry takes this as precedence\n  if (process.env.SENTRY_RELEASE) {\n    return process.env.SENTRY_RELEASE;\n  }\n\n  // This supports the variable that sentry-webpack-plugin injects\n  if (GLOBAL_OBJ.SENTRY_RELEASE?.id) {\n    return GLOBAL_OBJ.SENTRY_RELEASE.id;\n  }\n\n  // This list is in approximate alpha order, separated into 3 categories:\n  // 1. Git providers\n  // 2. CI providers with specific environment variables (has the provider name in the variable name)\n  // 3. CI providers with generic environment variables (checked for last to prevent possible false positives)\n\n  const possibleReleaseNameOfGitProvider =\n    // GitHub Actions - https://help.github.com/en/actions/configuring-and-managing-workflows/using-environment-variables#default-environment-variables\n    process.env['GITHUB_SHA'] ||\n    // GitLab CI - https://docs.gitlab.com/ee/ci/variables/predefined_variables.html\n    process.env['CI_MERGE_REQUEST_SOURCE_BRANCH_SHA'] ||\n    process.env['CI_BUILD_REF'] ||\n    process.env['CI_COMMIT_SHA'] ||\n    // Bitbucket - https://support.atlassian.com/bitbucket-cloud/docs/variables-and-secrets/\n    process.env['BITBUCKET_COMMIT'];\n\n  const possibleReleaseNameOfCiProvidersWithSpecificEnvVar =\n    // AppVeyor - https://www.appveyor.com/docs/environment-variables/\n    process.env['APPVEYOR_PULL_REQUEST_HEAD_COMMIT'] ||\n    process.env['APPVEYOR_REPO_COMMIT'] ||\n    // AWS CodeBuild - https://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref-env-vars.html\n    process.env['CODEBUILD_RESOLVED_SOURCE_VERSION'] ||\n    // AWS Amplify - https://docs.aws.amazon.com/amplify/latest/userguide/environment-variables.html\n    process.env['AWS_COMMIT_ID'] ||\n    // Azure Pipelines - https://docs.microsoft.com/en-us/azure/devops/pipelines/build/variables?view=azure-devops&tabs=yaml\n    process.env['BUILD_SOURCEVERSION'] ||\n    // Bitrise - https://devcenter.bitrise.io/builds/available-environment-variables/\n    process.env['GIT_CLONE_COMMIT_HASH'] ||\n    // Buddy CI - https://buddy.works/docs/pipelines/environment-variables#default-environment-variables\n    process.env['BUDDY_EXECUTION_REVISION'] ||\n    // Builtkite - https://buildkite.com/docs/pipelines/environment-variables\n    process.env['BUILDKITE_COMMIT'] ||\n    // CircleCI - https://circleci.com/docs/variables/\n    process.env['CIRCLE_SHA1'] ||\n    // Cirrus CI - https://cirrus-ci.org/guide/writing-tasks/#environment-variables\n    process.env['CIRRUS_CHANGE_IN_REPO'] ||\n    // Codefresh - https://codefresh.io/docs/docs/codefresh-yaml/variables/\n    process.env['CF_REVISION'] ||\n    // Codemagic - https://docs.codemagic.io/yaml-basic-configuration/environment-variables/\n    process.env['CM_COMMIT'] ||\n    // Cloudflare Pages - https://developers.cloudflare.com/pages/platform/build-configuration/#environment-variables\n    process.env['CF_PAGES_COMMIT_SHA'] ||\n    // Drone - https://docs.drone.io/pipeline/environment/reference/\n    process.env['DRONE_COMMIT_SHA'] ||\n    // Flightcontrol - https://www.flightcontrol.dev/docs/guides/flightcontrol/environment-variables#built-in-environment-variables\n    process.env['FC_GIT_COMMIT_SHA'] ||\n    // Heroku #1 https://devcenter.heroku.com/articles/heroku-ci\n    process.env['HEROKU_TEST_RUN_COMMIT_VERSION'] ||\n    // Heroku #2 https://docs.sentry.io/product/integrations/deployment/heroku/#configure-releases\n    process.env['HEROKU_SLUG_COMMIT'] ||\n    // Railway - https://docs.railway.app/reference/variables#git-variables\n    process.env['RAILWAY_GIT_COMMIT_SHA'] ||\n    // Render - https://render.com/docs/environment-variables\n    process.env['RENDER_GIT_COMMIT'] ||\n    // Semaphore CI - https://docs.semaphoreci.com/ci-cd-environment/environment-variables\n    process.env['SEMAPHORE_GIT_SHA'] ||\n    // TravisCI - https://docs.travis-ci.com/user/environment-variables/#default-environment-variables\n    process.env['TRAVIS_PULL_REQUEST_SHA'] ||\n    // Vercel - https://vercel.com/docs/v2/build-step#system-environment-variables\n    process.env['VERCEL_GIT_COMMIT_SHA'] ||\n    process.env['VERCEL_GITHUB_COMMIT_SHA'] ||\n    process.env['VERCEL_GITLAB_COMMIT_SHA'] ||\n    process.env['VERCEL_BITBUCKET_COMMIT_SHA'] ||\n    // Zeit (now known as Vercel)\n    process.env['ZEIT_GITHUB_COMMIT_SHA'] ||\n    process.env['ZEIT_GITLAB_COMMIT_SHA'] ||\n    process.env['ZEIT_BITBUCKET_COMMIT_SHA'];\n\n  const possibleReleaseNameOfCiProvidersWithGenericEnvVar =\n    // CloudBees CodeShip - https://docs.cloudbees.com/docs/cloudbees-codeship/latest/pro-builds-and-configuration/environment-variables\n    process.env['CI_COMMIT_ID'] ||\n    // Coolify - https://coolify.io/docs/knowledge-base/environment-variables\n    process.env['SOURCE_COMMIT'] ||\n    // Heroku #3 https://devcenter.heroku.com/changelog-items/630\n    process.env['SOURCE_VERSION'] ||\n    // Jenkins - https://plugins.jenkins.io/git/#environment-variables\n    process.env['GIT_COMMIT'] ||\n    // Netlify - https://docs.netlify.com/configure-builds/environment-variables/#build-metadata\n    process.env['COMMIT_REF'] ||\n    // TeamCity - https://www.jetbrains.com/help/teamcity/predefined-build-parameters.html\n    process.env['BUILD_VCS_NUMBER'] ||\n    // Woodpecker CI - https://woodpecker-ci.org/docs/usage/environment\n    process.env['CI_COMMIT_SHA'];\n\n  return (\n    possibleReleaseNameOfGitProvider ||\n    possibleReleaseNameOfCiProvidersWithSpecificEnvVar ||\n    possibleReleaseNameOfCiProvidersWithGenericEnvVar ||\n    fallback\n  );\n}\n\n/** Node.js stack parser */\nexport const defaultStackParser: StackParser = createStackParser(nodeStackLineParser(createGetModuleFromFilename()));\n", "import * as os from 'node:os';\nimport type { Tracer } from '@opentelemetry/api';\nimport { trace } from '@opentelemetry/api';\nimport { registerInstrumentations } from '@opentelemetry/instrumentation';\nimport type { BasicTracerProvider } from '@opentelemetry/sdk-trace-base';\nimport type { DynamicSamplingContext, Scope, ServerRuntimeClientOptions, TraceContext } from '@sentry/core';\nimport { _INTERNAL_flushLogsBuffer, applySdkMetadata, logger, SDK_VERSION, ServerRuntimeClient } from '@sentry/core';\nimport { getTraceContextForScope } from '@sentry/opentelemetry';\nimport { isMainThread, threadId } from 'worker_threads';\nimport { DEBUG_BUILD } from '../debug-build';\nimport type { NodeClientOptions } from '../types';\n\nconst DEFAULT_CLIENT_REPORT_FLUSH_INTERVAL_MS = 60_000; // 60s was chosen arbitrarily\n\n/** A client for using Sentry with Node & OpenTelemetry. */\nexport class NodeClient extends ServerRuntimeClient<NodeClientOptions> {\n  public traceProvider: BasicTracerProvider | undefined;\n  private _tracer: Tracer | undefined;\n  private _clientReportInterval: NodeJS.Timeout | undefined;\n  private _clientReportOnExitFlushListener: (() => void) | undefined;\n  private _logOnExitFlushListener: (() => void) | undefined;\n\n  public constructor(options: NodeClientOptions) {\n    const serverName = options.serverName || global.process.env.SENTRY_NAME || os.hostname();\n    const clientOptions: ServerRuntimeClientOptions = {\n      ...options,\n      platform: 'node',\n      runtime: { name: 'node', version: global.process.version },\n      serverName,\n    };\n\n    if (options.openTelemetryInstrumentations) {\n      registerInstrumentations({\n        instrumentations: options.openTelemetryInstrumentations,\n      });\n    }\n\n    applySdkMetadata(clientOptions, 'node');\n\n    logger.log(\n      `Initializing Sentry: process: ${process.pid}, thread: ${isMainThread ? 'main' : `worker-${threadId}`}.`,\n    );\n\n    super(clientOptions);\n\n    if (this.getOptions()._experiments?.enableLogs) {\n      this._logOnExitFlushListener = () => {\n        _INTERNAL_flushLogsBuffer(this);\n      };\n\n      if (serverName) {\n        this.on('beforeCaptureLog', log => {\n          log.attributes = {\n            ...log.attributes,\n            'server.address': serverName,\n          };\n        });\n      }\n\n      process.on('beforeExit', this._logOnExitFlushListener);\n    }\n  }\n\n  /** Get the OTEL tracer. */\n  public get tracer(): Tracer {\n    if (this._tracer) {\n      return this._tracer;\n    }\n\n    const name = '@sentry/node';\n    const version = SDK_VERSION;\n    const tracer = trace.getTracer(name, version);\n    this._tracer = tracer;\n\n    return tracer;\n  }\n\n  // Eslint ignore explanation: This is already documented in super.\n  // eslint-disable-next-line jsdoc/require-jsdoc\n  public async flush(timeout?: number): Promise<boolean> {\n    const provider = this.traceProvider;\n    const spanProcessor = provider?.activeSpanProcessor;\n\n    if (spanProcessor) {\n      await spanProcessor.forceFlush();\n    }\n\n    if (this.getOptions().sendClientReports) {\n      this._flushOutcomes();\n    }\n\n    return super.flush(timeout);\n  }\n\n  // Eslint ignore explanation: This is already documented in super.\n  // eslint-disable-next-line jsdoc/require-jsdoc\n  public close(timeout?: number | undefined): PromiseLike<boolean> {\n    if (this._clientReportInterval) {\n      clearInterval(this._clientReportInterval);\n    }\n\n    if (this._clientReportOnExitFlushListener) {\n      process.off('beforeExit', this._clientReportOnExitFlushListener);\n    }\n\n    if (this._logOnExitFlushListener) {\n      process.off('beforeExit', this._logOnExitFlushListener);\n    }\n\n    return super.close(timeout);\n  }\n\n  /**\n   * Will start tracking client reports for this client.\n   *\n   * NOTICE: This method will create an interval that is periodically called and attach a `process.on('beforeExit')`\n   * hook. To clean up these resources, call `.close()` when you no longer intend to use the client. Not doing so will\n   * result in a memory leak.\n   */\n  // The reason client reports need to be manually activated with this method instead of just enabling them in a\n  // constructor, is that if users periodically and unboundedly create new clients, we will create more and more\n  // intervals and beforeExit listeners, thus leaking memory. In these situations, users are required to call\n  // `client.close()` in order to dispose of the acquired resources.\n  // We assume that calling this method in Sentry.init() is a sensible default, because calling Sentry.init() over and\n  // over again would also result in memory leaks.\n  // Note: We have experimented with using `FinalizationRegisty` to clear the interval when the client is garbage\n  // collected, but it did not work, because the cleanup function never got called.\n  public startClientReportTracking(): void {\n    const clientOptions = this.getOptions();\n    if (clientOptions.sendClientReports) {\n      this._clientReportOnExitFlushListener = () => {\n        this._flushOutcomes();\n      };\n\n      this._clientReportInterval = setInterval(() => {\n        DEBUG_BUILD && logger.log('Flushing client reports based on interval.');\n        this._flushOutcomes();\n      }, clientOptions.clientReportFlushInterval ?? DEFAULT_CLIENT_REPORT_FLUSH_INTERVAL_MS)\n        // Unref is critical for not preventing the process from exiting because the interval is active.\n        .unref();\n\n      process.on('beforeExit', this._clientReportOnExitFlushListener);\n    }\n  }\n\n  /** Custom implementation for OTEL, so we can handle scope-span linking. */\n  protected _getTraceInfoFromScope(\n    scope: Scope | undefined,\n  ): [dynamicSamplingContext: Partial<DynamicSamplingContext> | undefined, traceContext: TraceContext | undefined] {\n    if (!scope) {\n      return [undefined, undefined];\n    }\n\n    return getTraceContextForScope(this, scope);\n  }\n}\n", "import { context, diag, DiagLogLevel, propagation, trace } from '@opentelemetry/api';\nimport { Resource } from '@opentelemetry/resources';\nimport type { SpanProcessor } from '@opentelemetry/sdk-trace-base';\nimport { BasicTracerProvider } from '@opentelemetry/sdk-trace-base';\nimport {\n  ATTR_SERVICE_NAME,\n  ATTR_SERVICE_VERSION,\n  SEMRESATTRS_SERVICE_NAMESPACE,\n} from '@opentelemetry/semantic-conventions';\nimport { consoleSandbox, GLOBAL_OBJ, logger, SDK_VERSION } from '@sentry/core';\nimport { SentryPropagator, SentrySampler, SentrySpanProcessor } from '@sentry/opentelemetry';\nimport { createAddHookMessageChannel } from 'import-in-the-middle';\nimport moduleModule from 'module';\nimport { DEBUG_BUILD } from '../debug-build';\nimport { getOpenTelemetryInstrumentationToPreload } from '../integrations/tracing';\nimport { SentryContextManager } from '../otel/contextManager';\nimport { isCjs } from '../utils/commonjs';\nimport type { NodeClient } from './client';\n\n// About 277h - this must fit into new Array(len)!\nconst MAX_MAX_SPAN_WAIT_DURATION = 1_000_000;\n\ninterface AdditionalOpenTelemetryOptions {\n  /** Additional SpanProcessor instances that should be used. */\n  spanProcessors?: SpanProcessor[];\n}\n\n/**\n * Initialize OpenTelemetry for Node.\n */\nexport function initOpenTelemetry(client: NodeClient, options: AdditionalOpenTelemetryOptions = {}): void {\n  if (client.getOptions().debug) {\n    setupOpenTelemetryLogger();\n  }\n\n  const provider = setupOtel(client, options);\n  client.traceProvider = provider;\n}\n\n/** Initialize the ESM loader. */\nexport function maybeInitializeEsmLoader(): void {\n  const [nodeMajor = 0, nodeMinor = 0] = process.versions.node.split('.').map(Number);\n\n  // Register hook was added in v20.6.0 and v18.19.0\n  if (nodeMajor >= 21 || (nodeMajor === 20 && nodeMinor >= 6) || (nodeMajor === 18 && nodeMinor >= 19)) {\n    if (!GLOBAL_OBJ._sentryEsmLoaderHookRegistered) {\n      try {\n        const { addHookMessagePort } = createAddHookMessageChannel();\n        // @ts-expect-error register is available in these versions\n        moduleModule.register('import-in-the-middle/hook.mjs', import.meta.url, {\n          data: { addHookMessagePort, include: [] },\n          transferList: [addHookMessagePort],\n        });\n      } catch (error) {\n        logger.warn('Failed to register ESM hook', error);\n      }\n    }\n  } else {\n    consoleSandbox(() => {\n      // eslint-disable-next-line no-console\n      console.warn(\n        `[Sentry] You are using Node.js v${process.versions.node} in ESM mode (\"import syntax\"). The Sentry Node.js SDK is not compatible with ESM in Node.js versions before 18.19.0 or before 20.6.0. Please either build your application with CommonJS (\"require() syntax\"), or upgrade your Node.js version.`,\n      );\n    });\n  }\n}\n\ninterface NodePreloadOptions {\n  debug?: boolean;\n  integrations?: string[];\n}\n\n/**\n * Preload OpenTelemetry for Node.\n * This can be used to preload instrumentation early, but set up Sentry later.\n * By preloading the OTEL instrumentation wrapping still happens early enough that everything works.\n */\nexport function preloadOpenTelemetry(options: NodePreloadOptions = {}): void {\n  const { debug } = options;\n\n  if (debug) {\n    logger.enable();\n    setupOpenTelemetryLogger();\n  }\n\n  if (!isCjs()) {\n    maybeInitializeEsmLoader();\n  }\n\n  // These are all integrations that we need to pre-load to ensure they are set up before any other code runs\n  getPreloadMethods(options.integrations).forEach(fn => {\n    fn();\n\n    if (debug) {\n      logger.log(`[Sentry] Preloaded ${fn.id} instrumentation`);\n    }\n  });\n}\n\nfunction getPreloadMethods(integrationNames?: string[]): ((() => void) & { id: string })[] {\n  const instruments = getOpenTelemetryInstrumentationToPreload();\n\n  if (!integrationNames) {\n    return instruments;\n  }\n\n  return instruments.filter(instrumentation => integrationNames.includes(instrumentation.id));\n}\n\n/** Just exported for tests. */\nexport function setupOtel(client: NodeClient, options: AdditionalOpenTelemetryOptions = {}): BasicTracerProvider {\n  // Create and configure NodeTracerProvider\n  const provider = new BasicTracerProvider({\n    sampler: new SentrySampler(client),\n    resource: new Resource({\n      [ATTR_SERVICE_NAME]: 'node',\n      // eslint-disable-next-line deprecation/deprecation\n      [SEMRESATTRS_SERVICE_NAMESPACE]: 'sentry',\n      [ATTR_SERVICE_VERSION]: SDK_VERSION,\n    }),\n    forceFlushTimeoutMillis: 500,\n    spanProcessors: [\n      new SentrySpanProcessor({\n        timeout: _clampSpanProcessorTimeout(client.getOptions().maxSpanWaitDuration),\n      }),\n      ...(options.spanProcessors || []),\n    ],\n  });\n\n  // Register as globals\n  trace.setGlobalTracerProvider(provider);\n  propagation.setGlobalPropagator(new SentryPropagator());\n  context.setGlobalContextManager(new SentryContextManager());\n\n  return provider;\n}\n\n/** Just exported for tests. */\nexport function _clampSpanProcessorTimeout(maxSpanWaitDuration: number | undefined): number | undefined {\n  if (maxSpanWaitDuration == null) {\n    return undefined;\n  }\n\n  // We guard for a max. value here, because we create an array with this length\n  // So if this value is too large, this would fail\n  if (maxSpanWaitDuration > MAX_MAX_SPAN_WAIT_DURATION) {\n    DEBUG_BUILD &&\n      logger.warn(`\\`maxSpanWaitDuration\\` is too high, using the maximum value of ${MAX_MAX_SPAN_WAIT_DURATION}`);\n    return MAX_MAX_SPAN_WAIT_DURATION;\n  } else if (maxSpanWaitDuration <= 0 || Number.isNaN(maxSpanWaitDuration)) {\n    DEBUG_BUILD && logger.warn('`maxSpanWaitDuration` must be a positive number, using default value instead.');\n    return undefined;\n  }\n\n  return maxSpanWaitDuration;\n}\n\n/**\n * Setup the OTEL logger to use our own logger.\n */\nfunction setupOpenTelemetryLogger(): void {\n  const otelLogger = new Proxy(logger as typeof logger & { verbose: (typeof logger)['debug'] }, {\n    get(target, prop, receiver) {\n      const actualProp = prop === 'verbose' ? 'debug' : prop;\n      return Reflect.get(target, actualProp, receiver);\n    },\n  });\n\n  // Disable diag, to ensure this works even if called multiple times\n  diag.disable();\n  diag.setLogger(otelLogger, DiagLogLevel.DEBUG);\n}\n", "import type { Integration, Options } from '@sentry/core';\nimport {\n  consoleIntegration,\n  consoleSandbox,\n  functionToStringIntegration,\n  getCurrentScope,\n  getIntegrationsToSetup,\n  hasSpansEnabled,\n  inboundFiltersIntegration,\n  linkedErrorsIntegration,\n  logger,\n  propagationContextFromHeaders,\n  requestDataIntegration,\n  stackParserFromStackParserOptions,\n} from '@sentry/core';\nimport {\n  enhanceDscWithOpenTelemetryRootSpanName,\n  openTelemetrySetupCheck,\n  setOpenTelemetryContextAsyncContextStrategy,\n  setupEventContextTrace,\n} from '@sentry/opentelemetry';\nimport { DEBUG_BUILD } from '../debug-build';\nimport { childProcessIntegration } from '../integrations/childProcess';\nimport { nodeContextIntegration } from '../integrations/context';\nimport { contextLinesIntegration } from '../integrations/contextlines';\nimport { httpIntegration } from '../integrations/http';\nimport { localVariablesIntegration } from '../integrations/local-variables';\nimport { modulesIntegration } from '../integrations/modules';\nimport { nativeNodeFetchIntegration } from '../integrations/node-fetch';\nimport { onUncaughtExceptionIntegration } from '../integrations/onuncaughtexception';\nimport { onUnhandledRejectionIntegration } from '../integrations/onunhandledrejection';\nimport { processSessionIntegration } from '../integrations/processSession';\nimport { INTEGRATION_NAME as SPOTLIGHT_INTEGRATION_NAME, spotlightIntegration } from '../integrations/spotlight';\nimport { getAutoPerformanceIntegrations } from '../integrations/tracing';\nimport { makeNodeTransport } from '../transports';\nimport type { NodeClientOptions, NodeOptions } from '../types';\nimport { isCjs } from '../utils/commonjs';\nimport { envToBool } from '../utils/envToBool';\nimport { defaultStackParser, getSentryRelease } from './api';\nimport { NodeClient } from './client';\nimport { initOpenTelemetry, maybeInitializeEsmLoader } from './initOtel';\n\nfunction getCjsOnlyIntegrations(): Integration[] {\n  return isCjs() ? [modulesIntegration()] : [];\n}\n\n/**\n * Get default integrations, excluding performance.\n */\nexport function getDefaultIntegrationsWithoutPerformance(): Integration[] {\n  return [\n    // Common\n    // TODO(v10): Replace with `eventFiltersIntegration` once we remove the deprecated `inboundFiltersIntegration`\n    // eslint-disable-next-line deprecation/deprecation\n    inboundFiltersIntegration(),\n    functionToStringIntegration(),\n    linkedErrorsIntegration(),\n    requestDataIntegration(),\n    // Native Wrappers\n    consoleIntegration(),\n    httpIntegration(),\n    nativeNodeFetchIntegration(),\n    // Global Handlers\n    onUncaughtExceptionIntegration(),\n    onUnhandledRejectionIntegration(),\n    // Event Info\n    contextLinesIntegration(),\n    localVariablesIntegration(),\n    nodeContextIntegration(),\n    childProcessIntegration(),\n    processSessionIntegration(),\n    ...getCjsOnlyIntegrations(),\n  ];\n}\n\n/** Get the default integrations for the Node SDK. */\nexport function getDefaultIntegrations(options: Options): Integration[] {\n  return [\n    ...getDefaultIntegrationsWithoutPerformance(),\n    // We only add performance integrations if tracing is enabled\n    // Note that this means that without tracing enabled, e.g. `expressIntegration()` will not be added\n    // This means that generally request isolation will work (because that is done by httpIntegration)\n    // But `transactionName` will not be set automatically\n    ...(hasSpansEnabled(options) ? getAutoPerformanceIntegrations() : []),\n  ];\n}\n\n/**\n * Initialize Sentry for Node.\n */\nexport function init(options: NodeOptions | undefined = {}): NodeClient | undefined {\n  return _init(options, getDefaultIntegrations);\n}\n\n/**\n * Initialize Sentry for Node, without any integrations added by default.\n */\nexport function initWithoutDefaultIntegrations(options: NodeOptions | undefined = {}): NodeClient {\n  return _init(options, () => []);\n}\n\n/**\n * Initialize Sentry for Node, without performance instrumentation.\n */\nfunction _init(\n  _options: NodeOptions | undefined = {},\n  getDefaultIntegrationsImpl: (options: Options) => Integration[],\n): NodeClient {\n  const options = getClientOptions(_options, getDefaultIntegrationsImpl);\n\n  if (options.debug === true) {\n    if (DEBUG_BUILD) {\n      logger.enable();\n    } else {\n      // use `console.warn` rather than `logger.warn` since by non-debug bundles have all `logger.x` statements stripped\n      consoleSandbox(() => {\n        // eslint-disable-next-line no-console\n        console.warn('[Sentry] Cannot initialize SDK with `debug` option using a non-debug bundle.');\n      });\n    }\n  }\n\n  if (!isCjs() && options.registerEsmLoaderHooks !== false) {\n    maybeInitializeEsmLoader();\n  }\n\n  setOpenTelemetryContextAsyncContextStrategy();\n\n  const scope = getCurrentScope();\n  scope.update(options.initialScope);\n\n  if (options.spotlight && !options.integrations.some(({ name }) => name === SPOTLIGHT_INTEGRATION_NAME)) {\n    options.integrations.push(\n      spotlightIntegration({\n        sidecarUrl: typeof options.spotlight === 'string' ? options.spotlight : undefined,\n      }),\n    );\n  }\n\n  const client = new NodeClient(options);\n  // The client is on the current scope, from where it generally is inherited\n  getCurrentScope().setClient(client);\n\n  client.init();\n\n  logger.log(`Running in ${isCjs() ? 'CommonJS' : 'ESM'} mode.`);\n\n  client.startClientReportTracking();\n\n  updateScopeFromEnvVariables();\n\n  // If users opt-out of this, they _have_ to set up OpenTelemetry themselves\n  // There is no way to use this SDK without OpenTelemetry!\n  if (!options.skipOpenTelemetrySetup) {\n    initOpenTelemetry(client, {\n      spanProcessors: options.openTelemetrySpanProcessors,\n    });\n    validateOpenTelemetrySetup();\n  }\n\n  enhanceDscWithOpenTelemetryRootSpanName(client);\n  setupEventContextTrace(client);\n\n  return client;\n}\n\n/**\n * Validate that your OpenTelemetry setup is correct.\n */\nexport function validateOpenTelemetrySetup(): void {\n  if (!DEBUG_BUILD) {\n    return;\n  }\n\n  const setup = openTelemetrySetupCheck();\n\n  const required: ReturnType<typeof openTelemetrySetupCheck> = ['SentryContextManager', 'SentryPropagator'];\n\n  if (hasSpansEnabled()) {\n    required.push('SentrySpanProcessor');\n  }\n\n  for (const k of required) {\n    if (!setup.includes(k)) {\n      logger.error(\n        `You have to set up the ${k}. Without this, the OpenTelemetry & Sentry integration will not work properly.`,\n      );\n    }\n  }\n\n  if (!setup.includes('SentrySampler')) {\n    logger.warn(\n      'You have to set up the SentrySampler. Without this, the OpenTelemetry & Sentry integration may still work, but sample rates set for the Sentry SDK will not be respected. If you use a custom sampler, make sure to use `wrapSamplingDecision`.',\n    );\n  }\n}\n\nfunction getClientOptions(\n  options: NodeOptions,\n  getDefaultIntegrationsImpl: (options: Options) => Integration[],\n): NodeClientOptions {\n  const release = getRelease(options.release);\n  const spotlight =\n    options.spotlight ?? envToBool(process.env.SENTRY_SPOTLIGHT, { strict: true }) ?? process.env.SENTRY_SPOTLIGHT;\n  const tracesSampleRate = getTracesSampleRate(options.tracesSampleRate);\n\n  const mergedOptions = {\n    ...options,\n    dsn: options.dsn ?? process.env.SENTRY_DSN,\n    environment: options.environment ?? process.env.SENTRY_ENVIRONMENT,\n    sendClientReports: options.sendClientReports ?? true,\n    transport: options.transport ?? makeNodeTransport,\n    stackParser: stackParserFromStackParserOptions(options.stackParser || defaultStackParser),\n    release,\n    tracesSampleRate,\n    spotlight,\n    debug: envToBool(options.debug ?? process.env.SENTRY_DEBUG),\n  };\n\n  const integrations = options.integrations;\n  const defaultIntegrations = options.defaultIntegrations ?? getDefaultIntegrationsImpl(mergedOptions);\n\n  return {\n    ...mergedOptions,\n    integrations: getIntegrationsToSetup({\n      defaultIntegrations,\n      integrations,\n    }),\n  };\n}\n\nfunction getRelease(release: NodeOptions['release']): string | undefined {\n  if (release !== undefined) {\n    return release;\n  }\n\n  const detectedRelease = getSentryRelease();\n  if (detectedRelease !== undefined) {\n    return detectedRelease;\n  }\n\n  return undefined;\n}\n\nfunction getTracesSampleRate(tracesSampleRate: NodeOptions['tracesSampleRate']): number | undefined {\n  if (tracesSampleRate !== undefined) {\n    return tracesSampleRate;\n  }\n\n  const sampleRateFromEnv = process.env.SENTRY_TRACES_SAMPLE_RATE;\n  if (!sampleRateFromEnv) {\n    return undefined;\n  }\n\n  const parsed = parseFloat(sampleRateFromEnv);\n  return isFinite(parsed) ? parsed : undefined;\n}\n\n/**\n * Update scope and propagation context based on environmental variables.\n *\n * See https://github.com/getsentry/rfcs/blob/main/text/0071-continue-trace-over-process-boundaries.md\n * for more details.\n */\nfunction updateScopeFromEnvVariables(): void {\n  if (envToBool(process.env.SENTRY_USE_ENVIRONMENT) !== false) {\n    const sentryTraceEnv = process.env.SENTRY_TRACE;\n    const baggageEnv = process.env.SENTRY_BAGGAGE;\n    const propagationContext = propagationContextFromHeaders(sentryTraceEnv, baggageEnv);\n    getCurrentScope().setPropagationContext(propagationContext);\n  }\n}\n", "import { escape, unescape } from 'minimatch'\nimport { Minipass } from 'minipass'\nimport { Path } from 'path-scurry'\nimport type {\n  GlobOptions,\n  GlobOptionsWithFileTypesFalse,\n  GlobOptionsWithFileTypesTrue,\n  GlobOptionsWithFileTypesUnset,\n} from './glob.js'\nimport { Glob } from './glob.js'\nimport { hasMagic } from './has-magic.js'\n\nexport { escape, unescape } from 'minimatch'\nexport type {\n  FSOption,\n  Path,\n  WalkOptions,\n  WalkOptionsWithFileTypesTrue,\n  WalkOptionsWithFileTypesUnset,\n} from 'path-scurry'\nexport { Glob } from './glob.js'\nexport type {\n  GlobOptions,\n  GlobOptionsWithFileTypesFalse,\n  GlobOptionsWithFileTypesTrue,\n  GlobOptionsWithFileTypesUnset,\n} from './glob.js'\nexport { hasMagic } from './has-magic.js'\nexport { Ignore } from './ignore.js'\nexport type { IgnoreLike } from './ignore.js'\nexport type { MatchStream } from './walker.js'\n\n/**\n * Syncronous form of {@link globStream}. Will read all the matches as fast as\n * you consume them, even all in a single tick if you consume them immediately,\n * but will still respond to backpressure if they're not consumed immediately.\n */\nexport function globStreamSync(\n  pattern: string | string[],\n  options: GlobOptionsWithFileTypesTrue,\n): Minipass<Path, Path>\nexport function globStreamSync(\n  pattern: string | string[],\n  options: GlobOptionsWithFileTypesFalse,\n): Minipass<string, string>\nexport function globStreamSync(\n  pattern: string | string[],\n  options: GlobOptionsWithFileTypesUnset,\n): Minipass<string, string>\nexport function globStreamSync(\n  pattern: string | string[],\n  options: GlobOptions,\n): Minipass<Path, Path> | Minipass<string, string>\nexport function globStreamSync(\n  pattern: string | string[],\n  options: GlobOptions = {},\n) {\n  return new Glob(pattern, options).streamSync()\n}\n\n/**\n * Return a stream that emits all the strings or `Path` objects and\n * then emits `end` when completed.\n */\nexport function globStream(\n  pattern: string | string[],\n  options: GlobOptionsWithFileTypesFalse,\n): Minipass<string, string>\nexport function globStream(\n  pattern: string | string[],\n  options: GlobOptionsWithFileTypesTrue,\n): Minipass<Path, Path>\nexport function globStream(\n  pattern: string | string[],\n  options?: GlobOptionsWithFileTypesUnset | undefined,\n): Minipass<string, string>\nexport function globStream(\n  pattern: string | string[],\n  options: GlobOptions,\n): Minipass<Path, Path> | Minipass<string, string>\nexport function globStream(\n  pattern: string | string[],\n  options: GlobOptions = {},\n) {\n  return new Glob(pattern, options).stream()\n}\n\n/**\n * Synchronous form of {@link glob}\n */\nexport function globSync(\n  pattern: string | string[],\n  options: GlobOptionsWithFileTypesFalse,\n): string[]\nexport function globSync(\n  pattern: string | string[],\n  options: GlobOptionsWithFileTypesTrue,\n): Path[]\nexport function globSync(\n  pattern: string | string[],\n  options?: GlobOptionsWithFileTypesUnset | undefined,\n): string[]\nexport function globSync(\n  pattern: string | string[],\n  options: GlobOptions,\n): Path[] | string[]\nexport function globSync(\n  pattern: string | string[],\n  options: GlobOptions = {},\n) {\n  return new Glob(pattern, options).walkSync()\n}\n\n/**\n * Perform an asynchronous glob search for the pattern(s) specified. Returns\n * [Path](https://isaacs.github.io/path-scurry/classes/PathBase) objects if the\n * {@link withFileTypes} option is set to `true`. See {@link GlobOptions} for\n * full option descriptions.\n */\nasync function glob_(\n  pattern: string | string[],\n  options?: GlobOptionsWithFileTypesUnset | undefined,\n): Promise<string[]>\nasync function glob_(\n  pattern: string | string[],\n  options: GlobOptionsWithFileTypesTrue,\n): Promise<Path[]>\nasync function glob_(\n  pattern: string | string[],\n  options: GlobOptionsWithFileTypesFalse,\n): Promise<string[]>\nasync function glob_(\n  pattern: string | string[],\n  options: GlobOptions,\n): Promise<Path[] | string[]>\nasync function glob_(\n  pattern: string | string[],\n  options: GlobOptions = {},\n) {\n  return new Glob(pattern, options).walk()\n}\n\n/**\n * Return a sync iterator for walking glob pattern matches.\n */\nexport function globIterateSync(\n  pattern: string | string[],\n  options?: GlobOptionsWithFileTypesUnset | undefined,\n): Generator<string, void, void>\nexport function globIterateSync(\n  pattern: string | string[],\n  options: GlobOptionsWithFileTypesTrue,\n): Generator<Path, void, void>\nexport function globIterateSync(\n  pattern: string | string[],\n  options: GlobOptionsWithFileTypesFalse,\n): Generator<string, void, void>\nexport function globIterateSync(\n  pattern: string | string[],\n  options: GlobOptions,\n): Generator<Path, void, void> | Generator<string, void, void>\nexport function globIterateSync(\n  pattern: string | string[],\n  options: GlobOptions = {},\n) {\n  return new Glob(pattern, options).iterateSync()\n}\n\n/**\n * Return an async iterator for walking glob pattern matches.\n */\nexport function globIterate(\n  pattern: string | string[],\n  options?: GlobOptionsWithFileTypesUnset | undefined,\n): AsyncGenerator<string, void, void>\nexport function globIterate(\n  pattern: string | string[],\n  options: GlobOptionsWithFileTypesTrue,\n): AsyncGenerator<Path, void, void>\nexport function globIterate(\n  pattern: string | string[],\n  options: GlobOptionsWithFileTypesFalse,\n): AsyncGenerator<string, void, void>\nexport function globIterate(\n  pattern: string | string[],\n  options: GlobOptions,\n): AsyncGenerator<Path, void, void> | AsyncGenerator<string, void, void>\nexport function globIterate(\n  pattern: string | string[],\n  options: GlobOptions = {},\n) {\n  return new Glob(pattern, options).iterate()\n}\n\n// aliases: glob.sync.stream() glob.stream.sync() glob.sync() etc\nexport const streamSync = globStreamSync\nexport const stream = Object.assign(globStream, { sync: globStreamSync })\nexport const iterateSync = globIterateSync\nexport const iterate = Object.assign(globIterate, {\n  sync: globIterateSync,\n})\nexport const sync = Object.assign(globSync, {\n  stream: globStreamSync,\n  iterate: globIterateSync,\n})\n\nexport const glob = Object.assign(glob_, {\n  glob: glob_,\n  globSync,\n  sync,\n  globStream,\n  stream,\n  globStreamSync,\n  streamSync,\n  globIterate,\n  iterate,\n  globIterateSync,\n  iterateSync,\n  Glob,\n  hasMagic,\n  escape,\n  unescape,\n})\nglob.glob = glob\n", "import { expand } from '@isaacs/brace-expansion'\nimport { assertValidPattern } from './assert-valid-pattern.js'\nimport { AST, ExtglobType } from './ast.js'\nimport { escape } from './escape.js'\nimport { unescape } from './unescape.js'\n\ntype Platform =\n  | 'aix'\n  | 'android'\n  | 'darwin'\n  | 'freebsd'\n  | 'haiku'\n  | 'linux'\n  | 'openbsd'\n  | 'sunos'\n  | 'win32'\n  | 'cygwin'\n  | 'netbsd'\n\nexport interface MinimatchOptions {\n  nobrace?: boolean\n  nocomment?: boolean\n  nonegate?: boolean\n  debug?: boolean\n  noglobstar?: boolean\n  noext?: boolean\n  nonull?: boolean\n  windowsPathsNoEscape?: boolean\n  allowWindowsEscape?: boolean\n  partial?: boolean\n  dot?: boolean\n  nocase?: boolean\n  nocaseMagicOnly?: boolean\n  magicalBraces?: boolean\n  matchBase?: boolean\n  flipNegate?: boolean\n  preserveMultipleSlashes?: boolean\n  optimizationLevel?: number\n  platform?: Platform\n  windowsNoMagicRoot?: boolean\n}\n\nexport const minimatch = (\n  p: string,\n  pattern: string,\n  options: MinimatchOptions = {}\n) => {\n  assertValidPattern(pattern)\n\n  // shortcut: comments match nothing.\n  if (!options.nocomment && pattern.charAt(0) === '#') {\n    return false\n  }\n\n  return new Minimatch(pattern, options).match(p)\n}\n\n// Optimized checking for the most common glob patterns.\nconst starDotExtRE = /^\\*+([^+@!?\\*\\[\\(]*)$/\nconst starDotExtTest = (ext: string) => (f: string) =>\n  !f.startsWith('.') && f.endsWith(ext)\nconst starDotExtTestDot = (ext: string) => (f: string) => f.endsWith(ext)\nconst starDotExtTestNocase = (ext: string) => {\n  ext = ext.toLowerCase()\n  return (f: string) => !f.startsWith('.') && f.toLowerCase().endsWith(ext)\n}\nconst starDotExtTestNocaseDot = (ext: string) => {\n  ext = ext.toLowerCase()\n  return (f: string) => f.toLowerCase().endsWith(ext)\n}\nconst starDotStarRE = /^\\*+\\.\\*+$/\nconst starDotStarTest = (f: string) => !f.startsWith('.') && f.includes('.')\nconst starDotStarTestDot = (f: string) =>\n  f !== '.' && f !== '..' && f.includes('.')\nconst dotStarRE = /^\\.\\*+$/\nconst dotStarTest = (f: string) => f !== '.' && f !== '..' && f.startsWith('.')\nconst starRE = /^\\*+$/\nconst starTest = (f: string) => f.length !== 0 && !f.startsWith('.')\nconst starTestDot = (f: string) => f.length !== 0 && f !== '.' && f !== '..'\nconst qmarksRE = /^\\?+([^+@!?\\*\\[\\(]*)?$/\nconst qmarksTestNocase = ([$0, ext = '']: RegExpMatchArray) => {\n  const noext = qmarksTestNoExt([$0])\n  if (!ext) return noext\n  ext = ext.toLowerCase()\n  return (f: string) => noext(f) && f.toLowerCase().endsWith(ext)\n}\nconst qmarksTestNocaseDot = ([$0, ext = '']: RegExpMatchArray) => {\n  const noext = qmarksTestNoExtDot([$0])\n  if (!ext) return noext\n  ext = ext.toLowerCase()\n  return (f: string) => noext(f) && f.toLowerCase().endsWith(ext)\n}\nconst qmarksTestDot = ([$0, ext = '']: RegExpMatchArray) => {\n  const noext = qmarksTestNoExtDot([$0])\n  return !ext ? noext : (f: string) => noext(f) && f.endsWith(ext)\n}\nconst qmarksTest = ([$0, ext = '']: RegExpMatchArray) => {\n  const noext = qmarksTestNoExt([$0])\n  return !ext ? noext : (f: string) => noext(f) && f.endsWith(ext)\n}\nconst qmarksTestNoExt = ([$0]: RegExpMatchArray) => {\n  const len = $0.length\n  return (f: string) => f.length === len && !f.startsWith('.')\n}\nconst qmarksTestNoExtDot = ([$0]: RegExpMatchArray) => {\n  const len = $0.length\n  return (f: string) => f.length === len && f !== '.' && f !== '..'\n}\n\n/* c8 ignore start */\nconst defaultPlatform: Platform = (\n  typeof process === 'object' && process\n    ? (typeof process.env === 'object' &&\n        process.env &&\n        process.env.__MINIMATCH_TESTING_PLATFORM__) ||\n      process.platform\n    : 'posix'\n) as Platform\ntype Sep = '\\\\' | '/'\nconst path: { [k: string]: { sep: Sep } } = {\n  win32: { sep: '\\\\' },\n  posix: { sep: '/' },\n}\n/* c8 ignore stop */\n\nexport const sep = defaultPlatform === 'win32' ? path.win32.sep : path.posix.sep\nminimatch.sep = sep\n\nexport const GLOBSTAR = Symbol('globstar **')\nminimatch.GLOBSTAR = GLOBSTAR\n\n// any single thing other than /\n// don't need to escape / when using new RegExp()\nconst qmark = '[^/]'\n\n// * => any number of characters\nconst star = qmark + '*?'\n\n// ** when dots are allowed.  Anything goes, except .. and .\n// not (^ or / followed by one or two dots followed by $ or /),\n// followed by anything, any number of times.\nconst twoStarDot = '(?:(?!(?:\\\\/|^)(?:\\\\.{1,2})($|\\\\/)).)*?'\n\n// not a ^ or / followed by a dot,\n// followed by anything, any number of times.\nconst twoStarNoDot = '(?:(?!(?:\\\\/|^)\\\\.).)*?'\n\nexport const filter =\n  (pattern: string, options: MinimatchOptions = {}) =>\n  (p: string) =>\n    minimatch(p, pattern, options)\nminimatch.filter = filter\n\nconst ext = (a: MinimatchOptions, b: MinimatchOptions = {}) =>\n  Object.assign({}, a, b)\n\nexport const defaults = (def: MinimatchOptions): typeof minimatch => {\n  if (!def || typeof def !== 'object' || !Object.keys(def).length) {\n    return minimatch\n  }\n\n  const orig = minimatch\n\n  const m = (p: string, pattern: string, options: MinimatchOptions = {}) =>\n    orig(p, pattern, ext(def, options))\n\n  return Object.assign(m, {\n    Minimatch: class Minimatch extends orig.Minimatch {\n      constructor(pattern: string, options: MinimatchOptions = {}) {\n        super(pattern, ext(def, options))\n      }\n      static defaults(options: MinimatchOptions) {\n        return orig.defaults(ext(def, options)).Minimatch\n      }\n    },\n\n    AST: class AST extends orig.AST {\n      /* c8 ignore start */\n      constructor(\n        type: ExtglobType | null,\n        parent?: AST,\n        options: MinimatchOptions = {}\n      ) {\n        super(type, parent, ext(def, options))\n      }\n      /* c8 ignore stop */\n\n      static fromGlob(pattern: string, options: MinimatchOptions = {}) {\n        return orig.AST.fromGlob(pattern, ext(def, options))\n      }\n    },\n\n    unescape: (\n      s: string,\n      options: Pick<MinimatchOptions, 'windowsPathsNoEscape'> = {}\n    ) => orig.unescape(s, ext(def, options)),\n\n    escape: (\n      s: string,\n      options: Pick<MinimatchOptions, 'windowsPathsNoEscape'> = {}\n    ) => orig.escape(s, ext(def, options)),\n\n    filter: (pattern: string, options: MinimatchOptions = {}) =>\n      orig.filter(pattern, ext(def, options)),\n\n    defaults: (options: MinimatchOptions) => orig.defaults(ext(def, options)),\n\n    makeRe: (pattern: string, options: MinimatchOptions = {}) =>\n      orig.makeRe(pattern, ext(def, options)),\n\n    braceExpand: (pattern: string, options: MinimatchOptions = {}) =>\n      orig.braceExpand(pattern, ext(def, options)),\n\n    match: (list: string[], pattern: string, options: MinimatchOptions = {}) =>\n      orig.match(list, pattern, ext(def, options)),\n\n    sep: orig.sep,\n    GLOBSTAR: GLOBSTAR as typeof GLOBSTAR,\n  })\n}\nminimatch.defaults = defaults\n\n// Brace expansion:\n// a{b,c}d -> abd acd\n// a{b,}c -> abc ac\n// a{0..3}d -> a0d a1d a2d a3d\n// a{b,c{d,e}f}g -> abg acdfg acefg\n// a{b,c}d{e,f}g -> abdeg acdeg abdeg abdfg\n//\n// Invalid sets are not expanded.\n// a{2..}b -> a{2..}b\n// a{b}c -> a{b}c\nexport const braceExpand = (\n  pattern: string,\n  options: MinimatchOptions = {}\n) => {\n  assertValidPattern(pattern)\n\n  // Thanks to Yeting Li <https://github.com/yetingli> for\n  // improving this regexp to avoid a ReDOS vulnerability.\n  if (options.nobrace || !/\\{(?:(?!\\{).)*\\}/.test(pattern)) {\n    // shortcut. no need to expand.\n    return [pattern]\n  }\n\n  return expand(pattern)\n}\nminimatch.braceExpand = braceExpand\n\n// parse a component of the expanded set.\n// At this point, no pattern may contain \"/\" in it\n// so we're going to return a 2d array, where each entry is the full\n// pattern, split on '/', and then turned into a regular expression.\n// A regexp is made at the end which joins each array with an\n// escaped /, and another full one which joins each regexp with |.\n//\n// Following the lead of Bash 4.1, note that \"**\" only has special meaning\n// when it is the *only* thing in a path portion.  Otherwise, any series\n// of * is equivalent to a single *.  Globstar behavior is enabled by\n// default, and can be disabled by setting options.noglobstar.\n\nexport const makeRe = (pattern: string, options: MinimatchOptions = {}) =>\n  new Minimatch(pattern, options).makeRe()\nminimatch.makeRe = makeRe\n\nexport const match = (\n  list: string[],\n  pattern: string,\n  options: MinimatchOptions = {}\n) => {\n  const mm = new Minimatch(pattern, options)\n  list = list.filter(f => mm.match(f))\n  if (mm.options.nonull && !list.length) {\n    list.push(pattern)\n  }\n  return list\n}\nminimatch.match = match\n\n// replace stuff like \\* with *\nconst globMagic = /[?*]|[+@!]\\(.*?\\)|\\[|\\]/\nconst regExpEscape = (s: string) =>\n  s.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&')\n\nexport type MMRegExp = RegExp & {\n  _src?: string\n  _glob?: string\n}\n\nexport type ParseReturnFiltered = string | MMRegExp | typeof GLOBSTAR\nexport type ParseReturn = ParseReturnFiltered | false\n\nexport class Minimatch {\n  options: MinimatchOptions\n  set: ParseReturnFiltered[][]\n  pattern: string\n\n  windowsPathsNoEscape: boolean\n  nonegate: boolean\n  negate: boolean\n  comment: boolean\n  empty: boolean\n  preserveMultipleSlashes: boolean\n  partial: boolean\n  globSet: string[]\n  globParts: string[][]\n  nocase: boolean\n\n  isWindows: boolean\n  platform: Platform\n  windowsNoMagicRoot: boolean\n\n  regexp: false | null | MMRegExp\n  constructor(pattern: string, options: MinimatchOptions = {}) {\n    assertValidPattern(pattern)\n\n    options = options || {}\n    this.options = options\n    this.pattern = pattern\n    this.platform = options.platform || defaultPlatform\n    this.isWindows = this.platform === 'win32'\n    this.windowsPathsNoEscape =\n      !!options.windowsPathsNoEscape || options.allowWindowsEscape === false\n    if (this.windowsPathsNoEscape) {\n      this.pattern = this.pattern.replace(/\\\\/g, '/')\n    }\n    this.preserveMultipleSlashes = !!options.preserveMultipleSlashes\n    this.regexp = null\n    this.negate = false\n    this.nonegate = !!options.nonegate\n    this.comment = false\n    this.empty = false\n    this.partial = !!options.partial\n    this.nocase = !!this.options.nocase\n    this.windowsNoMagicRoot =\n      options.windowsNoMagicRoot !== undefined\n        ? options.windowsNoMagicRoot\n        : !!(this.isWindows && this.nocase)\n\n    this.globSet = []\n    this.globParts = []\n    this.set = []\n\n    // make the set of regexps etc.\n    this.make()\n  }\n\n  hasMagic(): boolean {\n    if (this.options.magicalBraces && this.set.length > 1) {\n      return true\n    }\n    for (const pattern of this.set) {\n      for (const part of pattern) {\n        if (typeof part !== 'string') return true\n      }\n    }\n    return false\n  }\n\n  debug(..._: any[]) {}\n\n  make() {\n    const pattern = this.pattern\n    const options = this.options\n\n    // empty patterns and comments match nothing.\n    if (!options.nocomment && pattern.charAt(0) === '#') {\n      this.comment = true\n      return\n    }\n\n    if (!pattern) {\n      this.empty = true\n      return\n    }\n\n    // step 1: figure out negation, etc.\n    this.parseNegate()\n\n    // step 2: expand braces\n    this.globSet = [...new Set(this.braceExpand())]\n\n    if (options.debug) {\n      this.debug = (...args: any[]) => console.error(...args)\n    }\n\n    this.debug(this.pattern, this.globSet)\n\n    // step 3: now we have a set, so turn each one into a series of\n    // path-portion matching patterns.\n    // These will be regexps, except in the case of \"**\", which is\n    // set to the GLOBSTAR object for globstar behavior,\n    // and will not contain any / characters\n    //\n    // First, we preprocess to make the glob pattern sets a bit simpler\n    // and deduped.  There are some perf-killing patterns that can cause\n    // problems with a glob walk, but we can simplify them down a bit.\n    const rawGlobParts = this.globSet.map(s => this.slashSplit(s))\n    this.globParts = this.preprocess(rawGlobParts)\n    this.debug(this.pattern, this.globParts)\n\n    // glob --> regexps\n    let set = this.globParts.map((s, _, __) => {\n      if (this.isWindows && this.windowsNoMagicRoot) {\n        // check if it's a drive or unc path.\n        const isUNC =\n          s[0] === '' &&\n          s[1] === '' &&\n          (s[2] === '?' || !globMagic.test(s[2])) &&\n          !globMagic.test(s[3])\n        const isDrive = /^[a-z]:/i.test(s[0])\n        if (isUNC) {\n          return [...s.slice(0, 4), ...s.slice(4).map(ss => this.parse(ss))]\n        } else if (isDrive) {\n          return [s[0], ...s.slice(1).map(ss => this.parse(ss))]\n        }\n      }\n      return s.map(ss => this.parse(ss))\n    })\n\n    this.debug(this.pattern, set)\n\n    // filter out everything that didn't compile properly.\n    this.set = set.filter(\n      s => s.indexOf(false) === -1\n    ) as ParseReturnFiltered[][]\n\n    // do not treat the ? in UNC paths as magic\n    if (this.isWindows) {\n      for (let i = 0; i < this.set.length; i++) {\n        const p = this.set[i]\n        if (\n          p[0] === '' &&\n          p[1] === '' &&\n          this.globParts[i][2] === '?' &&\n          typeof p[3] === 'string' &&\n          /^[a-z]:$/i.test(p[3])\n        ) {\n          p[2] = '?'\n        }\n      }\n    }\n\n    this.debug(this.pattern, this.set)\n  }\n\n  // various transforms to equivalent pattern sets that are\n  // faster to process in a filesystem walk.  The goal is to\n  // eliminate what we can, and push all ** patterns as far\n  // to the right as possible, even if it increases the number\n  // of patterns that we have to process.\n  preprocess(globParts: string[][]) {\n    // if we're not in globstar mode, then turn all ** into *\n    if (this.options.noglobstar) {\n      for (let i = 0; i < globParts.length; i++) {\n        for (let j = 0; j < globParts[i].length; j++) {\n          if (globParts[i][j] === '**') {\n            globParts[i][j] = '*'\n          }\n        }\n      }\n    }\n\n    const { optimizationLevel = 1 } = this.options\n\n    if (optimizationLevel >= 2) {\n      // aggressive optimization for the purpose of fs walking\n      globParts = this.firstPhasePreProcess(globParts)\n      globParts = this.secondPhasePreProcess(globParts)\n    } else if (optimizationLevel >= 1) {\n      // just basic optimizations to remove some .. parts\n      globParts = this.levelOneOptimize(globParts)\n    } else {\n      // just collapse multiple ** portions into one\n      globParts = this.adjascentGlobstarOptimize(globParts)\n    }\n\n    return globParts\n  }\n\n  // just get rid of adjascent ** portions\n  adjascentGlobstarOptimize(globParts: string[][]) {\n    return globParts.map(parts => {\n      let gs: number = -1\n      while (-1 !== (gs = parts.indexOf('**', gs + 1))) {\n        let i = gs\n        while (parts[i + 1] === '**') {\n          i++\n        }\n        if (i !== gs) {\n          parts.splice(gs, i - gs)\n        }\n      }\n      return parts\n    })\n  }\n\n  // get rid of adjascent ** and resolve .. portions\n  levelOneOptimize(globParts: string[][]) {\n    return globParts.map(parts => {\n      parts = parts.reduce((set: string[], part) => {\n        const prev = set[set.length - 1]\n        if (part === '**' && prev === '**') {\n          return set\n        }\n        if (part === '..') {\n          if (prev && prev !== '..' && prev !== '.' && prev !== '**') {\n            set.pop()\n            return set\n          }\n        }\n        set.push(part)\n        return set\n      }, [])\n      return parts.length === 0 ? [''] : parts\n    })\n  }\n\n  levelTwoFileOptimize(parts: string | string[]) {\n    if (!Array.isArray(parts)) {\n      parts = this.slashSplit(parts)\n    }\n    let didSomething: boolean = false\n    do {\n      didSomething = false\n      // <pre>/<e>/<rest> -> <pre>/<rest>\n      if (!this.preserveMultipleSlashes) {\n        for (let i = 1; i < parts.length - 1; i++) {\n          const p = parts[i]\n          // don't squeeze out UNC patterns\n          if (i === 1 && p === '' && parts[0] === '') continue\n          if (p === '.' || p === '') {\n            didSomething = true\n            parts.splice(i, 1)\n            i--\n          }\n        }\n        if (\n          parts[0] === '.' &&\n          parts.length === 2 &&\n          (parts[1] === '.' || parts[1] === '')\n        ) {\n          didSomething = true\n          parts.pop()\n        }\n      }\n\n      // <pre>/<p>/../<rest> -> <pre>/<rest>\n      let dd: number = 0\n      while (-1 !== (dd = parts.indexOf('..', dd + 1))) {\n        const p = parts[dd - 1]\n        if (p && p !== '.' && p !== '..' && p !== '**') {\n          didSomething = true\n          parts.splice(dd - 1, 2)\n          dd -= 2\n        }\n      }\n    } while (didSomething)\n    return parts.length === 0 ? [''] : parts\n  }\n\n  // First phase: single-pattern processing\n  // <pre> is 1 or more portions\n  // <rest> is 1 or more portions\n  // <p> is any portion other than ., .., '', or **\n  // <e> is . or ''\n  //\n  // **/.. is *brutal* for filesystem walking performance, because\n  // it effectively resets the recursive walk each time it occurs,\n  // and ** cannot be reduced out by a .. pattern part like a regexp\n  // or most strings (other than .., ., and '') can be.\n  //\n  // <pre>/**/../<p>/<p>/<rest> -> {<pre>/../<p>/<p>/<rest>,<pre>/**/<p>/<p>/<rest>}\n  // <pre>/<e>/<rest> -> <pre>/<rest>\n  // <pre>/<p>/../<rest> -> <pre>/<rest>\n  // **/**/<rest> -> **/<rest>\n  //\n  // **/*/<rest> -> */**/<rest> <== not valid because ** doesn't follow\n  // this WOULD be allowed if ** did follow symlinks, or * didn't\n  firstPhasePreProcess(globParts: string[][]) {\n    let didSomething = false\n    do {\n      didSomething = false\n      // <pre>/**/../<p>/<p>/<rest> -> {<pre>/../<p>/<p>/<rest>,<pre>/**/<p>/<p>/<rest>}\n      for (let parts of globParts) {\n        let gs: number = -1\n        while (-1 !== (gs = parts.indexOf('**', gs + 1))) {\n          let gss: number = gs\n          while (parts[gss + 1] === '**') {\n            // <pre>/**/**/<rest> -> <pre>/**/<rest>\n            gss++\n          }\n          // eg, if gs is 2 and gss is 4, that means we have 3 **\n          // parts, and can remove 2 of them.\n          if (gss > gs) {\n            parts.splice(gs + 1, gss - gs)\n          }\n\n          let next = parts[gs + 1]\n          const p = parts[gs + 2]\n          const p2 = parts[gs + 3]\n          if (next !== '..') continue\n          if (\n            !p ||\n            p === '.' ||\n            p === '..' ||\n            !p2 ||\n            p2 === '.' ||\n            p2 === '..'\n          ) {\n            continue\n          }\n          didSomething = true\n          // edit parts in place, and push the new one\n          parts.splice(gs, 1)\n          const other = parts.slice(0)\n          other[gs] = '**'\n          globParts.push(other)\n          gs--\n        }\n\n        // <pre>/<e>/<rest> -> <pre>/<rest>\n        if (!this.preserveMultipleSlashes) {\n          for (let i = 1; i < parts.length - 1; i++) {\n            const p = parts[i]\n            // don't squeeze out UNC patterns\n            if (i === 1 && p === '' && parts[0] === '') continue\n            if (p === '.' || p === '') {\n              didSomething = true\n              parts.splice(i, 1)\n              i--\n            }\n          }\n          if (\n            parts[0] === '.' &&\n            parts.length === 2 &&\n            (parts[1] === '.' || parts[1] === '')\n          ) {\n            didSomething = true\n            parts.pop()\n          }\n        }\n\n        // <pre>/<p>/../<rest> -> <pre>/<rest>\n        let dd: number = 0\n        while (-1 !== (dd = parts.indexOf('..', dd + 1))) {\n          const p = parts[dd - 1]\n          if (p && p !== '.' && p !== '..' && p !== '**') {\n            didSomething = true\n            const needDot = dd === 1 && parts[dd + 1] === '**'\n            const splin = needDot ? ['.'] : []\n            parts.splice(dd - 1, 2, ...splin)\n            if (parts.length === 0) parts.push('')\n            dd -= 2\n          }\n        }\n      }\n    } while (didSomething)\n\n    return globParts\n  }\n\n  // second phase: multi-pattern dedupes\n  // {<pre>/*/<rest>,<pre>/<p>/<rest>} -> <pre>/*/<rest>\n  // {<pre>/<rest>,<pre>/<rest>} -> <pre>/<rest>\n  // {<pre>/**/<rest>,<pre>/<rest>} -> <pre>/**/<rest>\n  //\n  // {<pre>/**/<rest>,<pre>/**/<p>/<rest>} -> <pre>/**/<rest>\n  // ^-- not valid because ** doens't follow symlinks\n  secondPhasePreProcess(globParts: string[][]): string[][] {\n    for (let i = 0; i < globParts.length - 1; i++) {\n      for (let j = i + 1; j < globParts.length; j++) {\n        const matched = this.partsMatch(\n          globParts[i],\n          globParts[j],\n          !this.preserveMultipleSlashes\n        )\n        if (matched) {\n          globParts[i] = []\n          globParts[j] = matched\n          break\n        }\n      }\n    }\n    return globParts.filter(gs => gs.length)\n  }\n\n  partsMatch(\n    a: string[],\n    b: string[],\n    emptyGSMatch: boolean = false\n  ): false | string[] {\n    let ai = 0\n    let bi = 0\n    let result: string[] = []\n    let which: string = ''\n    while (ai < a.length && bi < b.length) {\n      if (a[ai] === b[bi]) {\n        result.push(which === 'b' ? b[bi] : a[ai])\n        ai++\n        bi++\n      } else if (emptyGSMatch && a[ai] === '**' && b[bi] === a[ai + 1]) {\n        result.push(a[ai])\n        ai++\n      } else if (emptyGSMatch && b[bi] === '**' && a[ai] === b[bi + 1]) {\n        result.push(b[bi])\n        bi++\n      } else if (\n        a[ai] === '*' &&\n        b[bi] &&\n        (this.options.dot || !b[bi].startsWith('.')) &&\n        b[bi] !== '**'\n      ) {\n        if (which === 'b') return false\n        which = 'a'\n        result.push(a[ai])\n        ai++\n        bi++\n      } else if (\n        b[bi] === '*' &&\n        a[ai] &&\n        (this.options.dot || !a[ai].startsWith('.')) &&\n        a[ai] !== '**'\n      ) {\n        if (which === 'a') return false\n        which = 'b'\n        result.push(b[bi])\n        ai++\n        bi++\n      } else {\n        return false\n      }\n    }\n    // if we fall out of the loop, it means they two are identical\n    // as long as their lengths match\n    return a.length === b.length && result\n  }\n\n  parseNegate() {\n    if (this.nonegate) return\n\n    const pattern = this.pattern\n    let negate = false\n    let negateOffset = 0\n\n    for (let i = 0; i < pattern.length && pattern.charAt(i) === '!'; i++) {\n      negate = !negate\n      negateOffset++\n    }\n\n    if (negateOffset) this.pattern = pattern.slice(negateOffset)\n    this.negate = negate\n  }\n\n  // set partial to true to test if, for example,\n  // \"/a/b\" matches the start of \"/*/b/*/d\"\n  // Partial means, if you run out of file before you run\n  // out of pattern, then that's fine, as long as all\n  // the parts match.\n  matchOne(file: string[], pattern: ParseReturn[], partial: boolean = false) {\n    const options = this.options\n\n    // UNC paths like //?/X:/... can match X:/... and vice versa\n    // Drive letters in absolute drive or unc paths are always compared\n    // case-insensitively.\n    if (this.isWindows) {\n      const fileDrive = typeof file[0] === 'string' && /^[a-z]:$/i.test(file[0])\n      const fileUNC =\n        !fileDrive &&\n        file[0] === '' &&\n        file[1] === '' &&\n        file[2] === '?' &&\n        /^[a-z]:$/i.test(file[3])\n\n      const patternDrive =\n        typeof pattern[0] === 'string' && /^[a-z]:$/i.test(pattern[0])\n      const patternUNC =\n        !patternDrive &&\n        pattern[0] === '' &&\n        pattern[1] === '' &&\n        pattern[2] === '?' &&\n        typeof pattern[3] === 'string' &&\n        /^[a-z]:$/i.test(pattern[3])\n\n      const fdi = fileUNC ? 3 : fileDrive ? 0 : undefined\n      const pdi = patternUNC ? 3 : patternDrive ? 0 : undefined\n      if (typeof fdi === 'number' && typeof pdi === 'number') {\n        const [fd, pd]: [string, string] = [file[fdi], pattern[pdi] as string]\n        if (fd.toLowerCase() === pd.toLowerCase()) {\n          pattern[pdi] = fd\n          if (pdi > fdi) {\n            pattern = pattern.slice(pdi)\n          } else if (fdi > pdi) {\n            file = file.slice(fdi)\n          }\n        }\n      }\n    }\n\n    // resolve and reduce . and .. portions in the file as well.\n    // dont' need to do the second phase, because it's only one string[]\n    const { optimizationLevel = 1 } = this.options\n    if (optimizationLevel >= 2) {\n      file = this.levelTwoFileOptimize(file)\n    }\n\n    this.debug('matchOne', this, { file, pattern })\n    this.debug('matchOne', file.length, pattern.length)\n\n    for (\n      var fi = 0, pi = 0, fl = file.length, pl = pattern.length;\n      fi < fl && pi < pl;\n      fi++, pi++\n    ) {\n      this.debug('matchOne loop')\n      var p = pattern[pi]\n      var f = file[fi]\n\n      this.debug(pattern, p, f)\n\n      // should be impossible.\n      // some invalid regexp stuff in the set.\n      /* c8 ignore start */\n      if (p === false) {\n        return false\n      }\n      /* c8 ignore stop */\n\n      if (p === GLOBSTAR) {\n        this.debug('GLOBSTAR', [pattern, p, f])\n\n        // \"**\"\n        // a/**/b/**/c would match the following:\n        // a/b/x/y/z/c\n        // a/x/y/z/b/c\n        // a/b/x/b/x/c\n        // a/b/c\n        // To do this, take the rest of the pattern after\n        // the **, and see if it would match the file remainder.\n        // If so, return success.\n        // If not, the ** \"swallows\" a segment, and try again.\n        // This is recursively awful.\n        //\n        // a/**/b/**/c matching a/b/x/y/z/c\n        // - a matches a\n        // - doublestar\n        //   - matchOne(b/x/y/z/c, b/**/c)\n        //     - b matches b\n        //     - doublestar\n        //       - matchOne(x/y/z/c, c) -> no\n        //       - matchOne(y/z/c, c) -> no\n        //       - matchOne(z/c, c) -> no\n        //       - matchOne(c, c) yes, hit\n        var fr = fi\n        var pr = pi + 1\n        if (pr === pl) {\n          this.debug('** at the end')\n          // a ** at the end will just swallow the rest.\n          // We have found a match.\n          // however, it will not swallow /.x, unless\n          // options.dot is set.\n          // . and .. are *never* matched by **, for explosively\n          // exponential reasons.\n          for (; fi < fl; fi++) {\n            if (\n              file[fi] === '.' ||\n              file[fi] === '..' ||\n              (!options.dot && file[fi].charAt(0) === '.')\n            )\n              return false\n          }\n          return true\n        }\n\n        // ok, let's see if we can swallow whatever we can.\n        while (fr < fl) {\n          var swallowee = file[fr]\n\n          this.debug('\\nglobstar while', file, fr, pattern, pr, swallowee)\n\n          // XXX remove this slice.  Just pass the start index.\n          if (this.matchOne(file.slice(fr), pattern.slice(pr), partial)) {\n            this.debug('globstar found match!', fr, fl, swallowee)\n            // found a match.\n            return true\n          } else {\n            // can't swallow \".\" or \"..\" ever.\n            // can only swallow \".foo\" when explicitly asked.\n            if (\n              swallowee === '.' ||\n              swallowee === '..' ||\n              (!options.dot && swallowee.charAt(0) === '.')\n            ) {\n              this.debug('dot detected!', file, fr, pattern, pr)\n              break\n            }\n\n            // ** swallows a segment, and continue.\n            this.debug('globstar swallow a segment, and continue')\n            fr++\n          }\n        }\n\n        // no match was found.\n        // However, in partial mode, we can't say this is necessarily over.\n        /* c8 ignore start */\n        if (partial) {\n          // ran out of file\n          this.debug('\\n>>> no match, partial?', file, fr, pattern, pr)\n          if (fr === fl) {\n            return true\n          }\n        }\n        /* c8 ignore stop */\n        return false\n      }\n\n      // something other than **\n      // non-magic patterns just have to match exactly\n      // patterns with magic have been turned into regexps.\n      let hit: boolean\n      if (typeof p === 'string') {\n        hit = f === p\n        this.debug('string match', p, f, hit)\n      } else {\n        hit = p.test(f)\n        this.debug('pattern match', p, f, hit)\n      }\n\n      if (!hit) return false\n    }\n\n    // Note: ending in / means that we'll get a final \"\"\n    // at the end of the pattern.  This can only match a\n    // corresponding \"\" at the end of the file.\n    // If the file ends in /, then it can only match a\n    // a pattern that ends in /, unless the pattern just\n    // doesn't have any more for it. But, a/b/ should *not*\n    // match \"a/b/*\", even though \"\" matches against the\n    // [^/]*? pattern, except in partial mode, where it might\n    // simply not be reached yet.\n    // However, a/b/ should still satisfy a/*\n\n    // now either we fell off the end of the pattern, or we're done.\n    if (fi === fl && pi === pl) {\n      // ran out of pattern and filename at the same time.\n      // an exact hit!\n      return true\n    } else if (fi === fl) {\n      // ran out of file, but still had pattern left.\n      // this is ok if we're doing the match as part of\n      // a glob fs traversal.\n      return partial\n    } else if (pi === pl) {\n      // ran out of pattern, still have file left.\n      // this is only acceptable if we're on the very last\n      // empty segment of a file with a trailing slash.\n      // a/* should match a/b/\n      return fi === fl - 1 && file[fi] === ''\n\n      /* c8 ignore start */\n    } else {\n      // should be unreachable.\n      throw new Error('wtf?')\n    }\n    /* c8 ignore stop */\n  }\n\n  braceExpand() {\n    return braceExpand(this.pattern, this.options)\n  }\n\n  parse(pattern: string): ParseReturn {\n    assertValidPattern(pattern)\n\n    const options = this.options\n\n    // shortcuts\n    if (pattern === '**') return GLOBSTAR\n    if (pattern === '') return ''\n\n    // far and away, the most common glob pattern parts are\n    // *, *.*, and *.<ext>  Add a fast check method for those.\n    let m: RegExpMatchArray | null\n    let fastTest: null | ((f: string) => boolean) = null\n    if ((m = pattern.match(starRE))) {\n      fastTest = options.dot ? starTestDot : starTest\n    } else if ((m = pattern.match(starDotExtRE))) {\n      fastTest = (\n        options.nocase\n          ? options.dot\n            ? starDotExtTestNocaseDot\n            : starDotExtTestNocase\n          : options.dot\n          ? starDotExtTestDot\n          : starDotExtTest\n      )(m[1])\n    } else if ((m = pattern.match(qmarksRE))) {\n      fastTest = (\n        options.nocase\n          ? options.dot\n            ? qmarksTestNocaseDot\n            : qmarksTestNocase\n          : options.dot\n          ? qmarksTestDot\n          : qmarksTest\n      )(m)\n    } else if ((m = pattern.match(starDotStarRE))) {\n      fastTest = options.dot ? starDotStarTestDot : starDotStarTest\n    } else if ((m = pattern.match(dotStarRE))) {\n      fastTest = dotStarTest\n    }\n\n    const re = AST.fromGlob(pattern, this.options).toMMPattern()\n    if (fastTest && typeof re === 'object') {\n      // Avoids overriding in frozen environments\n      Reflect.defineProperty(re, 'test', { value: fastTest })\n    }\n    return re\n  }\n\n  makeRe() {\n    if (this.regexp || this.regexp === false) return this.regexp\n\n    // at this point, this.set is a 2d array of partial\n    // pattern strings, or \"**\".\n    //\n    // It's better to use .match().  This function shouldn't\n    // be used, really, but it's pretty convenient sometimes,\n    // when you just want to work with a regex.\n    const set = this.set\n\n    if (!set.length) {\n      this.regexp = false\n      return this.regexp\n    }\n    const options = this.options\n\n    const twoStar = options.noglobstar\n      ? star\n      : options.dot\n      ? twoStarDot\n      : twoStarNoDot\n    const flags = new Set(options.nocase ? ['i'] : [])\n\n    // regexpify non-globstar patterns\n    // if ** is only item, then we just do one twoStar\n    // if ** is first, and there are more, prepend (\\/|twoStar\\/)? to next\n    // if ** is last, append (\\/twoStar|) to previous\n    // if ** is in the middle, append (\\/|\\/twoStar\\/) to previous\n    // then filter out GLOBSTAR symbols\n    let re = set\n      .map(pattern => {\n        const pp: (string | typeof GLOBSTAR)[] = pattern.map(p => {\n          if (p instanceof RegExp) {\n            for (const f of p.flags.split('')) flags.add(f)\n          }\n          return typeof p === 'string'\n            ? regExpEscape(p)\n            : p === GLOBSTAR\n            ? GLOBSTAR\n            : p._src\n        }) as (string | typeof GLOBSTAR)[]\n        pp.forEach((p, i) => {\n          const next = pp[i + 1]\n          const prev = pp[i - 1]\n          if (p !== GLOBSTAR || prev === GLOBSTAR) {\n            return\n          }\n          if (prev === undefined) {\n            if (next !== undefined && next !== GLOBSTAR) {\n              pp[i + 1] = '(?:\\\\/|' + twoStar + '\\\\/)?' + next\n            } else {\n              pp[i] = twoStar\n            }\n          } else if (next === undefined) {\n            pp[i - 1] = prev + '(?:\\\\/|' + twoStar + ')?'\n          } else if (next !== GLOBSTAR) {\n            pp[i - 1] = prev + '(?:\\\\/|\\\\/' + twoStar + '\\\\/)' + next\n            pp[i + 1] = GLOBSTAR\n          }\n        })\n        return pp.filter(p => p !== GLOBSTAR).join('/')\n      })\n      .join('|')\n\n    // need to wrap in parens if we had more than one thing with |,\n    // otherwise only the first will be anchored to ^ and the last to $\n    const [open, close] = set.length > 1 ? ['(?:', ')'] : ['', '']\n    // must match entire pattern\n    // ending in a * or ** will make it less strict.\n    re = '^' + open + re + close + '$'\n\n    // can match anything, as long as it's not this.\n    if (this.negate) re = '^(?!' + re + ').+$'\n\n    try {\n      this.regexp = new RegExp(re, [...flags].join(''))\n      /* c8 ignore start */\n    } catch (ex) {\n      // should be impossible\n      this.regexp = false\n    }\n    /* c8 ignore stop */\n    return this.regexp\n  }\n\n  slashSplit(p: string) {\n    // if p starts with // on windows, we preserve that\n    // so that UNC paths aren't broken.  Otherwise, any number of\n    // / characters are coalesced into one, unless\n    // preserveMultipleSlashes is set to true.\n    if (this.preserveMultipleSlashes) {\n      return p.split('/')\n    } else if (this.isWindows && /^\\/\\/[^\\/]+/.test(p)) {\n      // add an extra '' for the one we lose\n      return ['', ...p.split(/\\/+/)]\n    } else {\n      return p.split(/\\/+/)\n    }\n  }\n\n  match(f: string, partial = this.partial) {\n    this.debug('match', f, this.pattern)\n    // short-circuit in the case of busted things.\n    // comments, etc.\n    if (this.comment) {\n      return false\n    }\n    if (this.empty) {\n      return f === ''\n    }\n\n    if (f === '/' && partial) {\n      return true\n    }\n\n    const options = this.options\n\n    // windows: need to use /, not \\\n    if (this.isWindows) {\n      f = f.split('\\\\').join('/')\n    }\n\n    // treat the test path as a set of pathparts.\n    const ff = this.slashSplit(f)\n    this.debug(this.pattern, 'split', ff)\n\n    // just ONE of the pattern sets in this.set needs to match\n    // in order for it to be valid.  If negating, then just one\n    // match means that we have failed.\n    // Either way, return on the first hit.\n\n    const set = this.set\n    this.debug(this.pattern, 'set', set)\n\n    // Find the basename of the path by looking for the last non-empty segment\n    let filename: string = ff[ff.length - 1]\n    if (!filename) {\n      for (let i = ff.length - 2; !filename && i >= 0; i--) {\n        filename = ff[i]\n      }\n    }\n\n    for (let i = 0; i < set.length; i++) {\n      const pattern = set[i]\n      let file = ff\n      if (options.matchBase && pattern.length === 1) {\n        file = [filename]\n      }\n      const hit = this.matchOne(file, pattern, partial)\n      if (hit) {\n        if (options.flipNegate) {\n          return true\n        }\n        return !this.negate\n      }\n    }\n\n    // didn't get any hits.  this is success if it's a negative\n    // pattern, failure otherwise.\n    if (options.flipNegate) {\n      return false\n    }\n    return this.negate\n  }\n\n  static defaults(def: MinimatchOptions) {\n    return minimatch.defaults(def).Minimatch\n  }\n}\n/* c8 ignore start */\nexport { AST } from './ast.js'\nexport { escape } from './escape.js'\nexport { unescape } from './unescape.js'\n/* c8 ignore stop */\nminimatch.AST = AST\nminimatch.Minimatch = Minimatch\nminimatch.escape = escape\nminimatch.unescape = unescape\n", "import { balanced } from '@isaacs/balanced-match'\n\nconst escSlash = '\\0SLASH' + Math.random() + '\\0'\nconst escOpen = '\\0OPEN' + Math.random() + '\\0'\nconst escClose = '\\0CLOSE' + Math.random() + '\\0'\nconst escComma = '\\0COMMA' + Math.random() + '\\0'\nconst escPeriod = '\\0PERIOD' + Math.random() + '\\0'\nconst escSlashPattern = new RegExp(escSlash, 'g')\nconst escOpenPattern = new RegExp(escOpen, 'g')\nconst escClosePattern = new RegExp(escClose, 'g')\nconst escCommaPattern = new RegExp(escComma, 'g')\nconst escPeriodPattern = new RegExp(escPeriod, 'g')\nconst slashPattern = /\\\\\\\\/g\nconst openPattern = /\\\\{/g\nconst closePattern = /\\\\}/g\nconst commaPattern = /\\\\,/g\nconst periodPattern = /\\\\./g\n\nfunction numeric(str: string) {\n  return !isNaN(str as any) ? parseInt(str, 10) : str.charCodeAt(0)\n}\n\nfunction escapeBraces(str: string) {\n  return str\n    .replace(slashPattern, escSlash)\n    .replace(openPattern, escOpen)\n    .replace(closePattern, escClose)\n    .replace(commaPattern, escComma)\n    .replace(periodPattern, escPeriod)\n}\n\nfunction unescapeBraces(str: string) {\n  return str\n    .replace(escSlashPattern, '\\\\')\n    .replace(escOpenPattern, '{')\n    .replace(escClosePattern, '}')\n    .replace(escCommaPattern, ',')\n    .replace(escPeriodPattern, '.')\n}\n\n/**\n * Basically just str.split(\",\"), but handling cases\n * where we have nested braced sections, which should be\n * treated as individual members, like {a,{b,c},d}\n */\nfunction parseCommaParts(str: string) {\n  if (!str) {\n    return ['']\n  }\n\n  const parts: string[] = []\n  const m = balanced('{', '}', str)\n\n  if (!m) {\n    return str.split(',')\n  }\n\n  const { pre, body, post } = m\n  const p = pre.split(',')\n\n  p[p.length - 1] += '{' + body + '}'\n  const postParts = parseCommaParts(post)\n  if (post.length) {\n    ;(p[p.length - 1] as string) += postParts.shift()\n    p.push.apply(p, postParts)\n  }\n\n  parts.push.apply(parts, p)\n\n  return parts\n}\n\nexport function expand(str: string) {\n  if (!str) {\n    return []\n  }\n\n  // I don't know why Bash 4.3 does this, but it does.\n  // Anything starting with {} will have the first two bytes preserved\n  // but *only* at the top level, so {},a}b will not expand to anything,\n  // but a{},b}c will be expanded to [a}c,abc].\n  // One could argue that this is a bug in Bash, but since the goal of\n  // this module is to match Bash's rules, we escape a leading {}\n  if (str.slice(0, 2) === '{}') {\n    str = '\\\\{\\\\}' + str.slice(2)\n  }\n\n  return expand_(escapeBraces(str), true).map(unescapeBraces)\n}\n\nfunction embrace(str: string) {\n  return '{' + str + '}'\n}\n\nfunction isPadded(el: string) {\n  return /^-?0\\d/.test(el)\n}\n\nfunction lte(i: number, y: number) {\n  return i <= y\n}\n\nfunction gte(i: number, y: number) {\n  return i >= y\n}\n\nfunction expand_(str: string, isTop?: boolean): string[] {\n  /** @type {string[]} */\n  const expansions: string[] = []\n\n  const m = balanced('{', '}', str)\n  if (!m) return [str]\n\n  // no need to expand pre, since it is guaranteed to be free of brace-sets\n  const pre = m.pre\n  const post: string[] = m.post.length ? expand_(m.post, false) : ['']\n\n  if (/\\$$/.test(m.pre)) {\n    for (let k = 0; k < post.length; k++) {\n      const expansion = pre + '{' + m.body + '}' + post[k]\n      expansions.push(expansion)\n    }\n  } else {\n    const isNumericSequence = /^-?\\d+\\.\\.-?\\d+(?:\\.\\.-?\\d+)?$/.test(m.body)\n    const isAlphaSequence = /^[a-zA-Z]\\.\\.[a-zA-Z](?:\\.\\.-?\\d+)?$/.test(m.body)\n    const isSequence = isNumericSequence || isAlphaSequence\n    const isOptions = m.body.indexOf(',') >= 0\n    if (!isSequence && !isOptions) {\n      // {a},b}\n      if (m.post.match(/,(?!,).*\\}/)) {\n        str = m.pre + '{' + m.body + escClose + m.post\n        return expand_(str)\n      }\n      return [str]\n    }\n\n    let n: string[]\n    if (isSequence) {\n      n = m.body.split(/\\.\\./)\n    } else {\n      n = parseCommaParts(m.body)\n      if (n.length === 1 && n[0] !== undefined) {\n        // x{{a,b}}y ==> x{a}y x{b}y\n        n = expand_(n[0], false).map(embrace)\n        //XXX is this necessary? Can't seem to hit it in tests.\n        /* c8 ignore start */\n        if (n.length === 1) {\n          return post.map(p => m.pre + n[0] + p)\n        }\n        /* c8 ignore stop */\n      }\n    }\n\n    // at this point, n is the parts, and we know it's not a comma set\n    // with a single entry.\n    let N: string[]\n\n    if (isSequence && n[0] !== undefined && n[1] !== undefined) {\n      const x = numeric(n[0])\n      const y = numeric(n[1])\n      const width = Math.max(n[0].length, n[1].length)\n      let incr =\n        n.length === 3 && n[2] !== undefined ? Math.abs(numeric(n[2])) : 1\n      let test = lte\n      const reverse = y < x\n      if (reverse) {\n        incr *= -1\n        test = gte\n      }\n      const pad = n.some(isPadded)\n\n      N = []\n\n      for (let i = x; test(i, y); i += incr) {\n        let c\n        if (isAlphaSequence) {\n          c = String.fromCharCode(i)\n          if (c === '\\\\') {\n            c = ''\n          }\n        } else {\n          c = String(i)\n          if (pad) {\n            const need = width - c.length\n            if (need > 0) {\n              const z = new Array(need + 1).join('0')\n              if (i < 0) {\n                c = '-' + z + c.slice(1)\n              } else {\n                c = z + c\n              }\n            }\n          }\n        }\n        N.push(c)\n      }\n    } else {\n      N = []\n\n      for (let j = 0; j < n.length; j++) {\n        N.push.apply(N, expand_(n[j] as string, false))\n      }\n    }\n\n    for (let j = 0; j < N.length; j++) {\n      for (let k = 0; k < post.length; k++) {\n        const expansion = pre + N[j] + post[k]\n        if (!isTop || isSequence || expansion) {\n          expansions.push(expansion)\n        }\n      }\n    }\n  }\n\n  return expansions\n}\n", "export const balanced = (\n  a: string | RegExp,\n  b: string | RegExp,\n  str: string,\n) => {\n  const ma = a instanceof RegExp ? maybeMatch(a, str) : a\n  const mb = b instanceof RegExp ? maybeMatch(b, str) : b\n\n  const r = ma !== null && mb != null && range(ma, mb, str)\n\n  return (\n    r && {\n      start: r[0],\n      end: r[1],\n      pre: str.slice(0, r[0]),\n      body: str.slice(r[0] + ma.length, r[1]),\n      post: str.slice(r[1] + mb.length),\n    }\n  )\n}\n\nconst maybeMatch = (reg: RegExp, str: string) => {\n  const m = str.match(reg)\n  return m ? m[0] : null\n}\n\nexport const range = (\n  a: string,\n  b: string,\n  str: string,\n): undefined | [number, number] => {\n  let begs: number[],\n    beg: number | undefined,\n    left: number,\n    right: number | undefined = undefined,\n    result: undefined | [number, number]\n  let ai = str.indexOf(a)\n  let bi = str.indexOf(b, ai + 1)\n  let i = ai\n\n  if (ai >= 0 && bi > 0) {\n    if (a === b) {\n      return [ai, bi]\n    }\n    begs = []\n    left = str.length\n\n    while (i >= 0 && !result) {\n      if (i === ai) {\n        begs.push(i)\n        ai = str.indexOf(a, i + 1)\n      } else if (begs.length === 1) {\n        const r = begs.pop()\n        if (r !== undefined) result = [r, bi]\n      } else {\n        beg = begs.pop()\n        if (beg !== undefined && beg < left) {\n          left = beg\n          right = bi\n        }\n\n        bi = str.indexOf(b, i + 1)\n      }\n\n      i = ai < bi && ai >= 0 ? ai : bi\n    }\n\n    if (begs.length && right !== undefined) {\n      result = [left, right]\n    }\n  }\n\n  return result\n}\n", "const MAX_PATTERN_LENGTH = 1024 * 64\nexport const assertValidPattern: (pattern: any) => void = (\n  pattern: any\n): asserts pattern is string => {\n  if (typeof pattern !== 'string') {\n    throw new TypeError('invalid pattern')\n  }\n\n  if (pattern.length > MAX_PATTERN_LENGTH) {\n    throw new TypeError('pattern is too long')\n  }\n}\n", "// parse a single path portion\n\nimport { parseClass } from './brace-expressions.js'\nimport { MinimatchOptions, MMRegExp } from './index.js'\nimport { unescape } from './unescape.js'\n\n// classes [] are handled by the parseClass method\n// for positive extglobs, we sub-parse the contents, and combine,\n// with the appropriate regexp close.\n// for negative extglobs, we sub-parse the contents, but then\n// have to include the rest of the pattern, then the parent, etc.,\n// as the thing that cannot be because RegExp negative lookaheads\n// are different from globs.\n//\n// So for example:\n// a@(i|w!(x|y)z|j)b => ^a(i|w((!?(x|y)zb).*)z|j)b$\n//   1   2 3   4 5 6      1   2    3   46      5 6\n//\n// Assembling the extglob requires not just the negated patterns themselves,\n// but also anything following the negative patterns up to the boundary\n// of the current pattern, plus anything following in the parent pattern.\n//\n//\n// So, first, we parse the string into an AST of extglobs, without turning\n// anything into regexps yet.\n//\n// ['a', {@ [['i'], ['w', {!['x', 'y']}, 'z'], ['j']]}, 'b']\n//\n// Then, for all the negative extglobs, we append whatever comes after in\n// each parent as their tail\n//\n// ['a', {@ [['i'], ['w', {!['x', 'y'], 'z', 'b'}, 'z'], ['j']]}, 'b']\n//\n// Lastly, we turn each of these pieces into a regexp, and join\n//\n//                                 v----- .* because there's more following,\n//                                 v    v  otherwise, .+ because it must be\n//                                 v    v  *something* there.\n// ['^a', {@ ['i', 'w(?:(!?(?:x|y).*zb$).*)z', 'j' ]}, 'b$']\n//   copy what follows into here--^^^^^\n// ['^a', '(?:i|w(?:(?!(?:x|y).*zb$).*)z|j)', 'b$']\n// ['^a(?:i|w(?:(?!(?:x|y).*zb$).*)z|j)b$']\n\nexport type ExtglobType = '!' | '?' | '+' | '*' | '@'\nconst types = new Set<ExtglobType>(['!', '?', '+', '*', '@'])\nconst isExtglobType = (c: string): c is ExtglobType =>\n  types.has(c as ExtglobType)\n\n// Patterns that get prepended to bind to the start of either the\n// entire string, or just a single path portion, to prevent dots\n// and/or traversal patterns, when needed.\n// Exts don't need the ^ or / bit, because the root binds that already.\nconst startNoTraversal = '(?!(?:^|/)\\\\.\\\\.?(?:$|/))'\nconst startNoDot = '(?!\\\\.)'\n\n// characters that indicate a start of pattern needs the \"no dots\" bit,\n// because a dot *might* be matched. ( is not in the list, because in\n// the case of a child extglob, it will handle the prevention itself.\nconst addPatternStart = new Set(['[', '.'])\n// cases where traversal is A-OK, no dot prevention needed\nconst justDots = new Set(['..', '.'])\nconst reSpecials = new Set('().*{}+?[]^$\\\\!')\nconst regExpEscape = (s: string) =>\n  s.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&')\n\n// any single thing other than /\nconst qmark = '[^/]'\n\n// * => any number of characters\nconst star = qmark + '*?'\n// use + when we need to ensure that *something* matches, because the * is\n// the only thing in the path portion.\nconst starNoEmpty = qmark + '+?'\n\n// remove the \\ chars that we added if we end up doing a nonmagic compare\n// const deslash = (s: string) => s.replace(/\\\\(.)/g, '$1')\n\nexport class AST {\n  type: ExtglobType | null\n  readonly #root: AST\n\n  #hasMagic?: boolean\n  #uflag: boolean = false\n  #parts: (string | AST)[] = []\n  readonly #parent?: AST\n  readonly #parentIndex: number\n  #negs: AST[]\n  #filledNegs: boolean = false\n  #options: MinimatchOptions\n  #toString?: string\n  // set to true if it's an extglob with no children\n  // (which really means one child of '')\n  #emptyExt: boolean = false\n\n  constructor(\n    type: ExtglobType | null,\n    parent?: AST,\n    options: MinimatchOptions = {}\n  ) {\n    this.type = type\n    // extglobs are inherently magical\n    if (type) this.#hasMagic = true\n    this.#parent = parent\n    this.#root = this.#parent ? this.#parent.#root : this\n    this.#options = this.#root === this ? options : this.#root.#options\n    this.#negs = this.#root === this ? [] : this.#root.#negs\n    if (type === '!' && !this.#root.#filledNegs) this.#negs.push(this)\n    this.#parentIndex = this.#parent ? this.#parent.#parts.length : 0\n  }\n\n  get hasMagic(): boolean | undefined {\n    /* c8 ignore start */\n    if (this.#hasMagic !== undefined) return this.#hasMagic\n    /* c8 ignore stop */\n    for (const p of this.#parts) {\n      if (typeof p === 'string') continue\n      if (p.type || p.hasMagic) return (this.#hasMagic = true)\n    }\n    // note: will be undefined until we generate the regexp src and find out\n    return this.#hasMagic\n  }\n\n  // reconstructs the pattern\n  toString(): string {\n    if (this.#toString !== undefined) return this.#toString\n    if (!this.type) {\n      return (this.#toString = this.#parts.map(p => String(p)).join(''))\n    } else {\n      return (this.#toString =\n        this.type + '(' + this.#parts.map(p => String(p)).join('|') + ')')\n    }\n  }\n\n  #fillNegs() {\n    /* c8 ignore start */\n    if (this !== this.#root) throw new Error('should only call on root')\n    if (this.#filledNegs) return this\n    /* c8 ignore stop */\n\n    // call toString() once to fill this out\n    this.toString()\n    this.#filledNegs = true\n    let n: AST | undefined\n    while ((n = this.#negs.pop())) {\n      if (n.type !== '!') continue\n      // walk up the tree, appending everthing that comes AFTER parentIndex\n      let p: AST | undefined = n\n      let pp = p.#parent\n      while (pp) {\n        for (\n          let i = p.#parentIndex + 1;\n          !pp.type && i < pp.#parts.length;\n          i++\n        ) {\n          for (const part of n.#parts) {\n            /* c8 ignore start */\n            if (typeof part === 'string') {\n              throw new Error('string part in extglob AST??')\n            }\n            /* c8 ignore stop */\n            part.copyIn(pp.#parts[i])\n          }\n        }\n        p = pp\n        pp = p.#parent\n      }\n    }\n    return this\n  }\n\n  push(...parts: (string | AST)[]) {\n    for (const p of parts) {\n      if (p === '') continue\n      /* c8 ignore start */\n      if (typeof p !== 'string' && !(p instanceof AST && p.#parent === this)) {\n        throw new Error('invalid part: ' + p)\n      }\n      /* c8 ignore stop */\n      this.#parts.push(p)\n    }\n  }\n\n  toJSON() {\n    const ret: any[] =\n      this.type === null\n        ? this.#parts.slice().map(p => (typeof p === 'string' ? p : p.toJSON()))\n        : [this.type, ...this.#parts.map(p => (p as AST).toJSON())]\n    if (this.isStart() && !this.type) ret.unshift([])\n    if (\n      this.isEnd() &&\n      (this === this.#root ||\n        (this.#root.#filledNegs && this.#parent?.type === '!'))\n    ) {\n      ret.push({})\n    }\n    return ret\n  }\n\n  isStart(): boolean {\n    if (this.#root === this) return true\n    // if (this.type) return !!this.#parent?.isStart()\n    if (!this.#parent?.isStart()) return false\n    if (this.#parentIndex === 0) return true\n    // if everything AHEAD of this is a negation, then it's still the \"start\"\n    const p = this.#parent\n    for (let i = 0; i < this.#parentIndex; i++) {\n      const pp = p.#parts[i]\n      if (!(pp instanceof AST && pp.type === '!')) {\n        return false\n      }\n    }\n    return true\n  }\n\n  isEnd(): boolean {\n    if (this.#root === this) return true\n    if (this.#parent?.type === '!') return true\n    if (!this.#parent?.isEnd()) return false\n    if (!this.type) return this.#parent?.isEnd()\n    // if not root, it'll always have a parent\n    /* c8 ignore start */\n    const pl = this.#parent ? this.#parent.#parts.length : 0\n    /* c8 ignore stop */\n    return this.#parentIndex === pl - 1\n  }\n\n  copyIn(part: AST | string) {\n    if (typeof part === 'string') this.push(part)\n    else this.push(part.clone(this))\n  }\n\n  clone(parent: AST) {\n    const c = new AST(this.type, parent)\n    for (const p of this.#parts) {\n      c.copyIn(p)\n    }\n    return c\n  }\n\n  static #parseAST(\n    str: string,\n    ast: AST,\n    pos: number,\n    opt: MinimatchOptions\n  ): number {\n    let escaping = false\n    let inBrace = false\n    let braceStart = -1\n    let braceNeg = false\n    if (ast.type === null) {\n      // outside of a extglob, append until we find a start\n      let i = pos\n      let acc = ''\n      while (i < str.length) {\n        const c = str.charAt(i++)\n        // still accumulate escapes at this point, but we do ignore\n        // starts that are escaped\n        if (escaping || c === '\\\\') {\n          escaping = !escaping\n          acc += c\n          continue\n        }\n\n        if (inBrace) {\n          if (i === braceStart + 1) {\n            if (c === '^' || c === '!') {\n              braceNeg = true\n            }\n          } else if (c === ']' && !(i === braceStart + 2 && braceNeg)) {\n            inBrace = false\n          }\n          acc += c\n          continue\n        } else if (c === '[') {\n          inBrace = true\n          braceStart = i\n          braceNeg = false\n          acc += c\n          continue\n        }\n\n        if (!opt.noext && isExtglobType(c) && str.charAt(i) === '(') {\n          ast.push(acc)\n          acc = ''\n          const ext = new AST(c, ast)\n          i = AST.#parseAST(str, ext, i, opt)\n          ast.push(ext)\n          continue\n        }\n        acc += c\n      }\n      ast.push(acc)\n      return i\n    }\n\n    // some kind of extglob, pos is at the (\n    // find the next | or )\n    let i = pos + 1\n    let part = new AST(null, ast)\n    const parts: AST[] = []\n    let acc = ''\n    while (i < str.length) {\n      const c = str.charAt(i++)\n      // still accumulate escapes at this point, but we do ignore\n      // starts that are escaped\n      if (escaping || c === '\\\\') {\n        escaping = !escaping\n        acc += c\n        continue\n      }\n\n      if (inBrace) {\n        if (i === braceStart + 1) {\n          if (c === '^' || c === '!') {\n            braceNeg = true\n          }\n        } else if (c === ']' && !(i === braceStart + 2 && braceNeg)) {\n          inBrace = false\n        }\n        acc += c\n        continue\n      } else if (c === '[') {\n        inBrace = true\n        braceStart = i\n        braceNeg = false\n        acc += c\n        continue\n      }\n\n      if (isExtglobType(c) && str.charAt(i) === '(') {\n        part.push(acc)\n        acc = ''\n        const ext = new AST(c, part)\n        part.push(ext)\n        i = AST.#parseAST(str, ext, i, opt)\n        continue\n      }\n      if (c === '|') {\n        part.push(acc)\n        acc = ''\n        parts.push(part)\n        part = new AST(null, ast)\n        continue\n      }\n      if (c === ')') {\n        if (acc === '' && ast.#parts.length === 0) {\n          ast.#emptyExt = true\n        }\n        part.push(acc)\n        acc = ''\n        ast.push(...parts, part)\n        return i\n      }\n      acc += c\n    }\n\n    // unfinished extglob\n    // if we got here, it was a malformed extglob! not an extglob, but\n    // maybe something else in there.\n    ast.type = null\n    ast.#hasMagic = undefined\n    ast.#parts = [str.substring(pos - 1)]\n    return i\n  }\n\n  static fromGlob(pattern: string, options: MinimatchOptions = {}) {\n    const ast = new AST(null, undefined, options)\n    AST.#parseAST(pattern, ast, 0, options)\n    return ast\n  }\n\n  // returns the regular expression if there's magic, or the unescaped\n  // string if not.\n  toMMPattern(): MMRegExp | string {\n    // should only be called on root\n    /* c8 ignore start */\n    if (this !== this.#root) return this.#root.toMMPattern()\n    /* c8 ignore stop */\n    const glob = this.toString()\n    const [re, body, hasMagic, uflag] = this.toRegExpSource()\n    // if we're in nocase mode, and not nocaseMagicOnly, then we do\n    // still need a regular expression if we have to case-insensitively\n    // match capital/lowercase characters.\n    const anyMagic =\n      hasMagic ||\n      this.#hasMagic ||\n      (this.#options.nocase &&\n        !this.#options.nocaseMagicOnly &&\n        glob.toUpperCase() !== glob.toLowerCase())\n    if (!anyMagic) {\n      return body\n    }\n\n    const flags = (this.#options.nocase ? 'i' : '') + (uflag ? 'u' : '')\n    return Object.assign(new RegExp(`^${re}$`, flags), {\n      _src: re,\n      _glob: glob,\n    })\n  }\n\n  get options() {\n    return this.#options\n  }\n\n  // returns the string match, the regexp source, whether there's magic\n  // in the regexp (so a regular expression is required) and whether or\n  // not the uflag is needed for the regular expression (for posix classes)\n  // TODO: instead of injecting the start/end at this point, just return\n  // the BODY of the regexp, along with the start/end portions suitable\n  // for binding the start/end in either a joined full-path makeRe context\n  // (where we bind to (^|/), or a standalone matchPart context (where\n  // we bind to ^, and not /).  Otherwise slashes get duped!\n  //\n  // In part-matching mode, the start is:\n  // - if not isStart: nothing\n  // - if traversal possible, but not allowed: ^(?!\\.\\.?$)\n  // - if dots allowed or not possible: ^\n  // - if dots possible and not allowed: ^(?!\\.)\n  // end is:\n  // - if not isEnd(): nothing\n  // - else: $\n  //\n  // In full-path matching mode, we put the slash at the START of the\n  // pattern, so start is:\n  // - if first pattern: same as part-matching mode\n  // - if not isStart(): nothing\n  // - if traversal possible, but not allowed: /(?!\\.\\.?(?:$|/))\n  // - if dots allowed or not possible: /\n  // - if dots possible and not allowed: /(?!\\.)\n  // end is:\n  // - if last pattern, same as part-matching mode\n  // - else nothing\n  //\n  // Always put the (?:$|/) on negated tails, though, because that has to be\n  // there to bind the end of the negated pattern portion, and it's easier to\n  // just stick it in now rather than try to inject it later in the middle of\n  // the pattern.\n  //\n  // We can just always return the same end, and leave it up to the caller\n  // to know whether it's going to be used joined or in parts.\n  // And, if the start is adjusted slightly, can do the same there:\n  // - if not isStart: nothing\n  // - if traversal possible, but not allowed: (?:/|^)(?!\\.\\.?$)\n  // - if dots allowed or not possible: (?:/|^)\n  // - if dots possible and not allowed: (?:/|^)(?!\\.)\n  //\n  // But it's better to have a simpler binding without a conditional, for\n  // performance, so probably better to return both start options.\n  //\n  // Then the caller just ignores the end if it's not the first pattern,\n  // and the start always gets applied.\n  //\n  // But that's always going to be $ if it's the ending pattern, or nothing,\n  // so the caller can just attach $ at the end of the pattern when building.\n  //\n  // So the todo is:\n  // - better detect what kind of start is needed\n  // - return both flavors of starting pattern\n  // - attach $ at the end of the pattern when creating the actual RegExp\n  //\n  // Ah, but wait, no, that all only applies to the root when the first pattern\n  // is not an extglob. If the first pattern IS an extglob, then we need all\n  // that dot prevention biz to live in the extglob portions, because eg\n  // +(*|.x*) can match .xy but not .yx.\n  //\n  // So, return the two flavors if it's #root and the first child is not an\n  // AST, otherwise leave it to the child AST to handle it, and there,\n  // use the (?:^|/) style of start binding.\n  //\n  // Even simplified further:\n  // - Since the start for a join is eg /(?!\\.) and the start for a part\n  // is ^(?!\\.), we can just prepend (?!\\.) to the pattern (either root\n  // or start or whatever) and prepend ^ or / at the Regexp construction.\n  toRegExpSource(\n    allowDot?: boolean\n  ): [re: string, body: string, hasMagic: boolean, uflag: boolean] {\n    const dot = allowDot ?? !!this.#options.dot\n    if (this.#root === this) this.#fillNegs()\n    if (!this.type) {\n      const noEmpty = this.isStart() && this.isEnd()\n      const src = this.#parts\n        .map(p => {\n          const [re, _, hasMagic, uflag] =\n            typeof p === 'string'\n              ? AST.#parseGlob(p, this.#hasMagic, noEmpty)\n              : p.toRegExpSource(allowDot)\n          this.#hasMagic = this.#hasMagic || hasMagic\n          this.#uflag = this.#uflag || uflag\n          return re\n        })\n        .join('')\n\n      let start = ''\n      if (this.isStart()) {\n        if (typeof this.#parts[0] === 'string') {\n          // this is the string that will match the start of the pattern,\n          // so we need to protect against dots and such.\n\n          // '.' and '..' cannot match unless the pattern is that exactly,\n          // even if it starts with . or dot:true is set.\n          const dotTravAllowed =\n            this.#parts.length === 1 && justDots.has(this.#parts[0])\n          if (!dotTravAllowed) {\n            const aps = addPatternStart\n            // check if we have a possibility of matching . or ..,\n            // and prevent that.\n            const needNoTrav =\n              // dots are allowed, and the pattern starts with [ or .\n              (dot && aps.has(src.charAt(0))) ||\n              // the pattern starts with \\., and then [ or .\n              (src.startsWith('\\\\.') && aps.has(src.charAt(2))) ||\n              // the pattern starts with \\.\\., and then [ or .\n              (src.startsWith('\\\\.\\\\.') && aps.has(src.charAt(4)))\n            // no need to prevent dots if it can't match a dot, or if a\n            // sub-pattern will be preventing it anyway.\n            const needNoDot = !dot && !allowDot && aps.has(src.charAt(0))\n\n            start = needNoTrav ? startNoTraversal : needNoDot ? startNoDot : ''\n          }\n        }\n      }\n\n      // append the \"end of path portion\" pattern to negation tails\n      let end = ''\n      if (\n        this.isEnd() &&\n        this.#root.#filledNegs &&\n        this.#parent?.type === '!'\n      ) {\n        end = '(?:$|\\\\/)'\n      }\n      const final = start + src + end\n      return [\n        final,\n        unescape(src),\n        (this.#hasMagic = !!this.#hasMagic),\n        this.#uflag,\n      ]\n    }\n\n    // We need to calculate the body *twice* if it's a repeat pattern\n    // at the start, once in nodot mode, then again in dot mode, so a\n    // pattern like *(?) can match 'x.y'\n\n    const repeated = this.type === '*' || this.type === '+'\n    // some kind of extglob\n    const start = this.type === '!' ? '(?:(?!(?:' : '(?:'\n    let body = this.#partsToRegExp(dot)\n\n    if (this.isStart() && this.isEnd() && !body && this.type !== '!') {\n      // invalid extglob, has to at least be *something* present, if it's\n      // the entire path portion.\n      const s = this.toString()\n      this.#parts = [s]\n      this.type = null\n      this.#hasMagic = undefined\n      return [s, unescape(this.toString()), false, false]\n    }\n\n    // XXX abstract out this map method\n    let bodyDotAllowed =\n      !repeated || allowDot || dot || !startNoDot\n        ? ''\n        : this.#partsToRegExp(true)\n    if (bodyDotAllowed === body) {\n      bodyDotAllowed = ''\n    }\n    if (bodyDotAllowed) {\n      body = `(?:${body})(?:${bodyDotAllowed})*?`\n    }\n\n    // an empty !() is exactly equivalent to a starNoEmpty\n    let final = ''\n    if (this.type === '!' && this.#emptyExt) {\n      final = (this.isStart() && !dot ? startNoDot : '') + starNoEmpty\n    } else {\n      const close =\n        this.type === '!'\n          ? // !() must match something,but !(x) can match ''\n            '))' +\n            (this.isStart() && !dot && !allowDot ? startNoDot : '') +\n            star +\n            ')'\n          : this.type === '@'\n          ? ')'\n          : this.type === '?'\n          ? ')?'\n          : this.type === '+' && bodyDotAllowed\n          ? ')'\n          : this.type === '*' && bodyDotAllowed\n          ? `)?`\n          : `)${this.type}`\n      final = start + body + close\n    }\n    return [\n      final,\n      unescape(body),\n      (this.#hasMagic = !!this.#hasMagic),\n      this.#uflag,\n    ]\n  }\n\n  #partsToRegExp(dot: boolean) {\n    return this.#parts\n      .map(p => {\n        // extglob ASTs should only contain parent ASTs\n        /* c8 ignore start */\n        if (typeof p === 'string') {\n          throw new Error('string type in extglob ast??')\n        }\n        /* c8 ignore stop */\n        // can ignore hasMagic, because extglobs are already always magic\n        const [re, _, _hasMagic, uflag] = p.toRegExpSource(dot)\n        this.#uflag = this.#uflag || uflag\n        return re\n      })\n      .filter(p => !(this.isStart() && this.isEnd()) || !!p)\n      .join('|')\n  }\n\n  static #parseGlob(\n    glob: string,\n    hasMagic: boolean | undefined,\n    noEmpty: boolean = false\n  ): [re: string, body: string, hasMagic: boolean, uflag: boolean] {\n    let escaping = false\n    let re = ''\n    let uflag = false\n    for (let i = 0; i < glob.length; i++) {\n      const c = glob.charAt(i)\n      if (escaping) {\n        escaping = false\n        re += (reSpecials.has(c) ? '\\\\' : '') + c\n        continue\n      }\n      if (c === '\\\\') {\n        if (i === glob.length - 1) {\n          re += '\\\\\\\\'\n        } else {\n          escaping = true\n        }\n        continue\n      }\n      if (c === '[') {\n        const [src, needUflag, consumed, magic] = parseClass(glob, i)\n        if (consumed) {\n          re += src\n          uflag = uflag || needUflag\n          i += consumed - 1\n          hasMagic = hasMagic || magic\n          continue\n        }\n      }\n      if (c === '*') {\n        if (noEmpty && glob === '*') re += starNoEmpty\n        else re += star\n        hasMagic = true\n        continue\n      }\n      if (c === '?') {\n        re += qmark\n        hasMagic = true\n        continue\n      }\n      re += regExpEscape(c)\n    }\n    return [re, unescape(glob), !!hasMagic, uflag]\n  }\n}\n", "// translate the various posix character classes into unicode properties\n// this works across all unicode locales\n\n// { <posix class>: [<translation>, /u flag required, negated]\nconst posixClasses: { [k: string]: [e: string, u: boolean, n?: boolean] } = {\n  '[:alnum:]': ['\\\\p{L}\\\\p{Nl}\\\\p{Nd}', true],\n  '[:alpha:]': ['\\\\p{L}\\\\p{Nl}', true],\n  '[:ascii:]': ['\\\\x' + '00-\\\\x' + '7f', false],\n  '[:blank:]': ['\\\\p{Zs}\\\\t', true],\n  '[:cntrl:]': ['\\\\p{Cc}', true],\n  '[:digit:]': ['\\\\p{Nd}', true],\n  '[:graph:]': ['\\\\p{Z}\\\\p{C}', true, true],\n  '[:lower:]': ['\\\\p{Ll}', true],\n  '[:print:]': ['\\\\p{C}', true],\n  '[:punct:]': ['\\\\p{P}', true],\n  '[:space:]': ['\\\\p{Z}\\\\t\\\\r\\\\n\\\\v\\\\f', true],\n  '[:upper:]': ['\\\\p{Lu}', true],\n  '[:word:]': ['\\\\p{L}\\\\p{Nl}\\\\p{Nd}\\\\p{Pc}', true],\n  '[:xdigit:]': ['A-Fa-f0-9', false],\n}\n\n// only need to escape a few things inside of brace expressions\n// escapes: [ \\ ] -\nconst braceEscape = (s: string) => s.replace(/[[\\]\\\\-]/g, '\\\\$&')\n// escape all regexp magic characters\nconst regexpEscape = (s: string) =>\n  s.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&')\n\n// everything has already been escaped, we just have to join\nconst rangesToString = (ranges: string[]): string => ranges.join('')\n\nexport type ParseClassResult = [\n  src: string,\n  uFlag: boolean,\n  consumed: number,\n  hasMagic: boolean\n]\n\n// takes a glob string at a posix brace expression, and returns\n// an equivalent regular expression source, and boolean indicating\n// whether the /u flag needs to be applied, and the number of chars\n// consumed to parse the character class.\n// This also removes out of order ranges, and returns ($.) if the\n// entire class just no good.\nexport const parseClass = (\n  glob: string,\n  position: number\n): ParseClassResult => {\n  const pos = position\n  /* c8 ignore start */\n  if (glob.charAt(pos) !== '[') {\n    throw new Error('not in a brace expression')\n  }\n  /* c8 ignore stop */\n  const ranges: string[] = []\n  const negs: string[] = []\n\n  let i = pos + 1\n  let sawStart = false\n  let uflag = false\n  let escaping = false\n  let negate = false\n  let endPos = pos\n  let rangeStart = ''\n  WHILE: while (i < glob.length) {\n    const c = glob.charAt(i)\n    if ((c === '!' || c === '^') && i === pos + 1) {\n      negate = true\n      i++\n      continue\n    }\n\n    if (c === ']' && sawStart && !escaping) {\n      endPos = i + 1\n      break\n    }\n\n    sawStart = true\n    if (c === '\\\\') {\n      if (!escaping) {\n        escaping = true\n        i++\n        continue\n      }\n      // escaped \\ char, fall through and treat like normal char\n    }\n    if (c === '[' && !escaping) {\n      // either a posix class, a collation equivalent, or just a [\n      for (const [cls, [unip, u, neg]] of Object.entries(posixClasses)) {\n        if (glob.startsWith(cls, i)) {\n          // invalid, [a-[] is fine, but not [a-[:alpha]]\n          if (rangeStart) {\n            return ['$.', false, glob.length - pos, true]\n          }\n          i += cls.length\n          if (neg) negs.push(unip)\n          else ranges.push(unip)\n          uflag = uflag || u\n          continue WHILE\n        }\n      }\n    }\n\n    // now it's just a normal character, effectively\n    escaping = false\n    if (rangeStart) {\n      // throw this range away if it's not valid, but others\n      // can still match.\n      if (c > rangeStart) {\n        ranges.push(braceEscape(rangeStart) + '-' + braceEscape(c))\n      } else if (c === rangeStart) {\n        ranges.push(braceEscape(c))\n      }\n      rangeStart = ''\n      i++\n      continue\n    }\n\n    // now might be the start of a range.\n    // can be either c-d or c-] or c<more...>] or c] at this point\n    if (glob.startsWith('-]', i + 1)) {\n      ranges.push(braceEscape(c + '-'))\n      i += 2\n      continue\n    }\n    if (glob.startsWith('-', i + 1)) {\n      rangeStart = c\n      i += 2\n      continue\n    }\n\n    // not the start of a range, just a single character\n    ranges.push(braceEscape(c))\n    i++\n  }\n\n  if (endPos < i) {\n    // didn't see the end of the class, not a valid class,\n    // but might still be valid as a literal match.\n    return ['', false, 0, false]\n  }\n\n  // if we got no ranges and no negates, then we have a range that\n  // cannot possibly match anything, and that poisons the whole glob\n  if (!ranges.length && !negs.length) {\n    return ['$.', false, glob.length - pos, true]\n  }\n\n  // if we got one positive range, and it's a single character, then that's\n  // not actually a magic pattern, it's just that one literal character.\n  // we should not treat that as \"magic\", we should just return the literal\n  // character. [_] is a perfectly valid way to escape glob magic chars.\n  if (\n    negs.length === 0 &&\n    ranges.length === 1 &&\n    /^\\\\?.$/.test(ranges[0]) &&\n    !negate\n  ) {\n    const r = ranges[0].length === 2 ? ranges[0].slice(-1) : ranges[0]\n    return [regexpEscape(r), false, endPos - pos, false]\n  }\n\n  const sranges = '[' + (negate ? '^' : '') + rangesToString(ranges) + ']'\n  const snegs = '[' + (negate ? '' : '^') + rangesToString(negs) + ']'\n  const comb =\n    ranges.length && negs.length\n      ? '(' + sranges + '|' + snegs + ')'\n      : ranges.length\n      ? sranges\n      : snegs\n\n  return [comb, uflag, endPos - pos, true]\n}\n", "import { MinimatchOptions } from './index.js'\n/**\n * Un-escape a string that has been escaped with {@link escape}.\n *\n * If the {@link windowsPathsNoEscape} option is used, then square-brace\n * escapes are removed, but not backslash escapes.  For example, it will turn\n * the string `'[*]'` into `*`, but it will not turn `'\\\\*'` into `'*'`,\n * becuase `\\` is a path separator in `windowsPathsNoEscape` mode.\n *\n * When `windowsPathsNoEscape` is not set, then both brace escapes and\n * backslash escapes are removed.\n *\n * Slashes (and backslashes in `windowsPathsNoEscape` mode) cannot be escaped\n * or unescaped.\n */\nexport const unescape = (\n  s: string,\n  {\n    windowsPathsNoEscape = false,\n  }: Pick<MinimatchOptions, 'windowsPathsNoEscape'> = {}\n) => {\n  return windowsPathsNoEscape\n    ? s.replace(/\\[([^\\/\\\\])\\]/g, '$1')\n    : s.replace(/((?!\\\\).|^)\\[([^\\/\\\\])\\]/g, '$1$2').replace(/\\\\([^\\/])/g, '$1')\n}\n", "import { MinimatchOptions } from './index.js'\n/**\n * Escape all magic characters in a glob pattern.\n *\n * If the {@link windowsPathsNoEscape | GlobOptions.windowsPathsNoEscape}\n * option is used, then characters are escaped by wrapping in `[]`, because\n * a magic character wrapped in a character class can only be satisfied by\n * that exact character.  In this mode, `\\` is _not_ escaped, because it is\n * not interpreted as a magic character, but instead as a path separator.\n */\nexport const escape = (\n  s: string,\n  {\n    windowsPathsNoEscape = false,\n  }: Pick<MinimatchOptions, 'windowsPathsNoEscape'> = {}\n) => {\n  // don't need to escape +@! because we escape the parens\n  // that make those magic, and escaping ! as [!] isn't valid,\n  // because [!]] is a valid glob class meaning not ']'.\n  return windowsPathsNoEscape\n    ? s.replace(/[?*()[\\]]/g, '[$&]')\n    : s.replace(/[?*()[\\]\\\\]/g, '\\\\$&')\n}\n", "import { Minimatch, MinimatchOptions } from 'minimatch'\nimport { Minipass } from 'minipass'\nimport { fileURLToPath } from 'node:url'\nimport {\n  FSOption,\n  Path,\n  PathScurry,\n  PathScurryDarwin,\n  PathScurryPosix,\n  PathScurryWin32,\n} from 'path-scurry'\nimport { IgnoreLike } from './ignore.js'\nimport { Pattern } from './pattern.js'\nimport { GlobStream, GlobWalker } from './walker.js'\n\nexport type MatchSet = Minimatch['set']\nexport type GlobParts = Exclude<Minimatch['globParts'], undefined>\n\n// if no process global, just call it linux.\n// so we default to case-sensitive, / separators\nconst defaultPlatform: NodeJS.Platform =\n  (\n    typeof process === 'object' &&\n    process &&\n    typeof process.platform === 'string'\n  ) ?\n    process.platform\n  : 'linux'\n\n/**\n * A `GlobOptions` object may be provided to any of the exported methods, and\n * must be provided to the `Glob` constructor.\n *\n * All options are optional, boolean, and false by default, unless otherwise\n * noted.\n *\n * All resolved options are added to the Glob object as properties.\n *\n * If you are running many `glob` operations, you can pass a Glob object as the\n * `options` argument to a subsequent operation to share the previously loaded\n * cache.\n */\nexport interface GlobOptions {\n  /**\n   * Set to `true` to always receive absolute paths for\n   * matched files. Set to `false` to always return relative paths.\n   *\n   * When this option is not set, absolute paths are returned for patterns\n   * that are absolute, and otherwise paths are returned that are relative\n   * to the `cwd` setting.\n   *\n   * This does _not_ make an extra system call to get\n   * the realpath, it only does string path resolution.\n   *\n   * Conflicts with {@link withFileTypes}\n   */\n  absolute?: boolean\n\n  /**\n   * Set to false to enable {@link windowsPathsNoEscape}\n   *\n   * @deprecated\n   */\n  allowWindowsEscape?: boolean\n\n  /**\n   * The current working directory in which to search. Defaults to\n   * `process.cwd()`.\n   *\n   * May be eiher a string path or a `file://` URL object or string.\n   */\n  cwd?: string | URL\n\n  /**\n   * Include `.dot` files in normal matches and `globstar`\n   * matches. Note that an explicit dot in a portion of the pattern\n   * will always match dot files.\n   */\n  dot?: boolean\n\n  /**\n   * Prepend all relative path strings with `./` (or `.\\` on Windows).\n   *\n   * Without this option, returned relative paths are \"bare\", so instead of\n   * returning `'./foo/bar'`, they are returned as `'foo/bar'`.\n   *\n   * Relative patterns starting with `'../'` are not prepended with `./`, even\n   * if this option is set.\n   */\n  dotRelative?: boolean\n\n  /**\n   * Follow symlinked directories when expanding `**`\n   * patterns. This can result in a lot of duplicate references in\n   * the presence of cyclic links, and make performance quite bad.\n   *\n   * By default, a `**` in a pattern will follow 1 symbolic link if\n   * it is not the first item in the pattern, or none if it is the\n   * first item in the pattern, following the same behavior as Bash.\n   */\n  follow?: boolean\n\n  /**\n   * string or string[], or an object with `ignored` and `childrenIgnored`\n   * methods.\n   *\n   * If a string or string[] is provided, then this is treated as a glob\n   * pattern or array of glob patterns to exclude from matches. To ignore all\n   * children within a directory, as well as the entry itself, append `'/**'`\n   * to the ignore pattern.\n   *\n   * **Note** `ignore` patterns are _always_ in `dot:true` mode, regardless of\n   * any other settings.\n   *\n   * If an object is provided that has `ignored(path)` and/or\n   * `childrenIgnored(path)` methods, then these methods will be called to\n   * determine whether any Path is a match or if its children should be\n   * traversed, respectively.\n   */\n  ignore?: string | string[] | IgnoreLike\n\n  /**\n   * Treat brace expansion like `{a,b}` as a \"magic\" pattern. Has no\n   * effect if {@link nobrace} is set.\n   *\n   * Only has effect on the {@link hasMagic} function.\n   */\n  magicalBraces?: boolean\n\n  /**\n   * Add a `/` character to directory matches. Note that this requires\n   * additional stat calls in some cases.\n   */\n  mark?: boolean\n\n  /**\n   * Perform a basename-only match if the pattern does not contain any slash\n   * characters. That is, `*.js` would be treated as equivalent to\n   * `**\\/*.js`, matching all js files in all directories.\n   */\n  matchBase?: boolean\n\n  /**\n   * Limit the directory traversal to a given depth below the cwd.\n   * Note that this does NOT prevent traversal to sibling folders,\n   * root patterns, and so on. It only limits the maximum folder depth\n   * that the walk will descend, relative to the cwd.\n   */\n  maxDepth?: number\n\n  /**\n   * Do not expand `{a,b}` and `{1..3}` brace sets.\n   */\n  nobrace?: boolean\n\n  /**\n   * Perform a case-insensitive match. This defaults to `true` on macOS and\n   * Windows systems, and `false` on all others.\n   *\n   * **Note** `nocase` should only be explicitly set when it is\n   * known that the filesystem's case sensitivity differs from the\n   * platform default. If set `true` on case-sensitive file\n   * systems, or `false` on case-insensitive file systems, then the\n   * walk may return more or less results than expected.\n   */\n  nocase?: boolean\n\n  /**\n   * Do not match directories, only files. (Note: to match\n   * _only_ directories, put a `/` at the end of the pattern.)\n   */\n  nodir?: boolean\n\n  /**\n   * Do not match \"extglob\" patterns such as `+(a|b)`.\n   */\n  noext?: boolean\n\n  /**\n   * Do not match `**` against multiple filenames. (Ie, treat it as a normal\n   * `*` instead.)\n   *\n   * Conflicts with {@link matchBase}\n   */\n  noglobstar?: boolean\n\n  /**\n   * Defaults to value of `process.platform` if available, or `'linux'` if\n   * not. Setting `platform:'win32'` on non-Windows systems may cause strange\n   * behavior.\n   */\n  platform?: NodeJS.Platform\n\n  /**\n   * Set to true to call `fs.realpath` on all of the\n   * results. In the case of an entry that cannot be resolved, the\n   * entry is omitted. This incurs a slight performance penalty, of\n   * course, because of the added system calls.\n   */\n  realpath?: boolean\n\n  /**\n   *\n   * A string path resolved against the `cwd` option, which\n   * is used as the starting point for absolute patterns that start\n   * with `/`, (but not drive letters or UNC paths on Windows).\n   *\n   * Note that this _doesn't_ necessarily limit the walk to the\n   * `root` directory, and doesn't affect the cwd starting point for\n   * non-absolute patterns. A pattern containing `..` will still be\n   * able to traverse out of the root directory, if it is not an\n   * actual root directory on the filesystem, and any non-absolute\n   * patterns will be matched in the `cwd`. For example, the\n   * pattern `/../*` with `{root:'/some/path'}` will return all\n   * files in `/some`, not all files in `/some/path`. The pattern\n   * `*` with `{root:'/some/path'}` will return all the entries in\n   * the cwd, not the entries in `/some/path`.\n   *\n   * To start absolute and non-absolute patterns in the same\n   * path, you can use `{root:''}`. However, be aware that on\n   * Windows systems, a pattern like `x:/*` or `//host/share/*` will\n   * _always_ start in the `x:/` or `//host/share` directory,\n   * regardless of the `root` setting.\n   */\n  root?: string\n\n  /**\n   * A [PathScurry](http://npm.im/path-scurry) object used\n   * to traverse the file system. If the `nocase` option is set\n   * explicitly, then any provided `scurry` object must match this\n   * setting.\n   */\n  scurry?: PathScurry\n\n  /**\n   * Call `lstat()` on all entries, whether required or not to determine\n   * if it's a valid match. When used with {@link withFileTypes}, this means\n   * that matches will include data such as modified time, permissions, and\n   * so on.  Note that this will incur a performance cost due to the added\n   * system calls.\n   */\n  stat?: boolean\n\n  /**\n   * An AbortSignal which will cancel the Glob walk when\n   * triggered.\n   */\n  signal?: AbortSignal\n\n  /**\n   * Use `\\\\` as a path separator _only_, and\n   *  _never_ as an escape character. If set, all `\\\\` characters are\n   *  replaced with `/` in the pattern.\n   *\n   *  Note that this makes it **impossible** to match against paths\n   *  containing literal glob pattern characters, but allows matching\n   *  with patterns constructed using `path.join()` and\n   *  `path.resolve()` on Windows platforms, mimicking the (buggy!)\n   *  behavior of Glob v7 and before on Windows. Please use with\n   *  caution, and be mindful of [the caveat below about Windows\n   *  paths](#windows). (For legacy reasons, this is also set if\n   *  `allowWindowsEscape` is set to the exact value `false`.)\n   */\n  windowsPathsNoEscape?: boolean\n\n  /**\n   * Return [PathScurry](http://npm.im/path-scurry)\n   * `Path` objects instead of strings. These are similar to a\n   * NodeJS `Dirent` object, but with additional methods and\n   * properties.\n   *\n   * Conflicts with {@link absolute}\n   */\n  withFileTypes?: boolean\n\n  /**\n   * An fs implementation to override some or all of the defaults.  See\n   * http://npm.im/path-scurry for details about what can be overridden.\n   */\n  fs?: FSOption\n\n  /**\n   * Just passed along to Minimatch.  Note that this makes all pattern\n   * matching operations slower and *extremely* noisy.\n   */\n  debug?: boolean\n\n  /**\n   * Return `/` delimited paths, even on Windows.\n   *\n   * On posix systems, this has no effect.  But, on Windows, it means that\n   * paths will be `/` delimited, and absolute paths will be their full\n   * resolved UNC forms, eg instead of `'C:\\\\foo\\\\bar'`, it would return\n   * `'//?/C:/foo/bar'`\n   */\n  posix?: boolean\n\n  /**\n   * Do not match any children of any matches. For example, the pattern\n   * `**\\/foo` would match `a/foo`, but not `a/foo/b/foo` in this mode.\n   *\n   * This is especially useful for cases like \"find all `node_modules`\n   * folders, but not the ones in `node_modules`\".\n   *\n   * In order to support this, the `Ignore` implementation must support an\n   * `add(pattern: string)` method. If using the default `Ignore` class, then\n   * this is fine, but if this is set to `false`, and a custom `Ignore` is\n   * provided that does not have an `add()` method, then it will throw an\n   * error.\n   *\n   * **Caveat** It *only* ignores matches that would be a descendant of a\n   * previous match, and only if that descendant is matched *after* the\n   * ancestor is encountered. Since the file system walk happens in\n   * indeterminate order, it's possible that a match will already be added\n   * before its ancestor, if multiple or braced patterns are used.\n   *\n   * For example:\n   *\n   * ```ts\n   * const results = await glob([\n   *   // likely to match first, since it's just a stat\n   *   'a/b/c/d/e/f',\n   *\n   *   // this pattern is more complicated! It must to various readdir()\n   *   // calls and test the results against a regular expression, and that\n   *   // is certainly going to take a little bit longer.\n   *   //\n   *   // So, later on, it encounters a match at 'a/b/c/d/e', but it's too\n   *   // late to ignore a/b/c/d/e/f, because it's already been emitted.\n   *   'a/[bdf]/?/[a-z]/*',\n   * ], { includeChildMatches: false })\n   * ```\n   *\n   * It's best to only set this to `false` if you can be reasonably sure that\n   * no components of the pattern will potentially match one another's file\n   * system descendants, or if the occasional included child entry will not\n   * cause problems.\n   *\n   * @default true\n   */\n  includeChildMatches?: boolean\n}\n\nexport type GlobOptionsWithFileTypesTrue = GlobOptions & {\n  withFileTypes: true\n  // string options not relevant if returning Path objects.\n  absolute?: undefined\n  mark?: undefined\n  posix?: undefined\n}\n\nexport type GlobOptionsWithFileTypesFalse = GlobOptions & {\n  withFileTypes?: false\n}\n\nexport type GlobOptionsWithFileTypesUnset = GlobOptions & {\n  withFileTypes?: undefined\n}\n\nexport type Result<Opts> =\n  Opts extends GlobOptionsWithFileTypesTrue ? Path\n  : Opts extends GlobOptionsWithFileTypesFalse ? string\n  : Opts extends GlobOptionsWithFileTypesUnset ? string\n  : string | Path\nexport type Results<Opts> = Result<Opts>[]\n\nexport type FileTypes<Opts> =\n  Opts extends GlobOptionsWithFileTypesTrue ? true\n  : Opts extends GlobOptionsWithFileTypesFalse ? false\n  : Opts extends GlobOptionsWithFileTypesUnset ? false\n  : boolean\n\n/**\n * An object that can perform glob pattern traversals.\n */\nexport class Glob<Opts extends GlobOptions> implements GlobOptions {\n  absolute?: boolean\n  cwd: string\n  root?: string\n  dot: boolean\n  dotRelative: boolean\n  follow: boolean\n  ignore?: string | string[] | IgnoreLike\n  magicalBraces: boolean\n  mark?: boolean\n  matchBase: boolean\n  maxDepth: number\n  nobrace: boolean\n  nocase: boolean\n  nodir: boolean\n  noext: boolean\n  noglobstar: boolean\n  pattern: string[]\n  platform: NodeJS.Platform\n  realpath: boolean\n  scurry: PathScurry\n  stat: boolean\n  signal?: AbortSignal\n  windowsPathsNoEscape: boolean\n  withFileTypes: FileTypes<Opts>\n  includeChildMatches: boolean\n\n  /**\n   * The options provided to the constructor.\n   */\n  opts: Opts\n\n  /**\n   * An array of parsed immutable {@link Pattern} objects.\n   */\n  patterns: Pattern[]\n\n  /**\n   * All options are stored as properties on the `Glob` object.\n   *\n   * See {@link GlobOptions} for full options descriptions.\n   *\n   * Note that a previous `Glob` object can be passed as the\n   * `GlobOptions` to another `Glob` instantiation to re-use settings\n   * and caches with a new pattern.\n   *\n   * Traversal functions can be called multiple times to run the walk\n   * again.\n   */\n  constructor(pattern: string | string[], opts: Opts) {\n    /* c8 ignore start */\n    if (!opts) throw new TypeError('glob options required')\n    /* c8 ignore stop */\n    this.withFileTypes = !!opts.withFileTypes as FileTypes<Opts>\n    this.signal = opts.signal\n    this.follow = !!opts.follow\n    this.dot = !!opts.dot\n    this.dotRelative = !!opts.dotRelative\n    this.nodir = !!opts.nodir\n    this.mark = !!opts.mark\n    if (!opts.cwd) {\n      this.cwd = ''\n    } else if (opts.cwd instanceof URL || opts.cwd.startsWith('file://')) {\n      opts.cwd = fileURLToPath(opts.cwd)\n    }\n    this.cwd = opts.cwd || ''\n    this.root = opts.root\n    this.magicalBraces = !!opts.magicalBraces\n    this.nobrace = !!opts.nobrace\n    this.noext = !!opts.noext\n    this.realpath = !!opts.realpath\n    this.absolute = opts.absolute\n    this.includeChildMatches = opts.includeChildMatches !== false\n\n    this.noglobstar = !!opts.noglobstar\n    this.matchBase = !!opts.matchBase\n    this.maxDepth =\n      typeof opts.maxDepth === 'number' ? opts.maxDepth : Infinity\n    this.stat = !!opts.stat\n    this.ignore = opts.ignore\n\n    if (this.withFileTypes && this.absolute !== undefined) {\n      throw new Error('cannot set absolute and withFileTypes:true')\n    }\n\n    if (typeof pattern === 'string') {\n      pattern = [pattern]\n    }\n\n    this.windowsPathsNoEscape =\n      !!opts.windowsPathsNoEscape ||\n      (opts as { allowWindowsEscape?: boolean }).allowWindowsEscape ===\n        false\n\n    if (this.windowsPathsNoEscape) {\n      pattern = pattern.map(p => p.replace(/\\\\/g, '/'))\n    }\n\n    if (this.matchBase) {\n      if (opts.noglobstar) {\n        throw new TypeError('base matching requires globstar')\n      }\n      pattern = pattern.map(p => (p.includes('/') ? p : `./**/${p}`))\n    }\n\n    this.pattern = pattern\n\n    this.platform = opts.platform || defaultPlatform\n    this.opts = { ...opts, platform: this.platform }\n    if (opts.scurry) {\n      this.scurry = opts.scurry\n      if (\n        opts.nocase !== undefined &&\n        opts.nocase !== opts.scurry.nocase\n      ) {\n        throw new Error('nocase option contradicts provided scurry option')\n      }\n    } else {\n      const Scurry =\n        opts.platform === 'win32' ? PathScurryWin32\n        : opts.platform === 'darwin' ? PathScurryDarwin\n        : opts.platform ? PathScurryPosix\n        : PathScurry\n      this.scurry = new Scurry(this.cwd, {\n        nocase: opts.nocase,\n        fs: opts.fs,\n      })\n    }\n    this.nocase = this.scurry.nocase\n\n    // If you do nocase:true on a case-sensitive file system, then\n    // we need to use regexps instead of strings for non-magic\n    // path portions, because statting `aBc` won't return results\n    // for the file `AbC` for example.\n    const nocaseMagicOnly =\n      this.platform === 'darwin' || this.platform === 'win32'\n\n    const mmo: MinimatchOptions = {\n      // default nocase based on platform\n      ...opts,\n      dot: this.dot,\n      matchBase: this.matchBase,\n      nobrace: this.nobrace,\n      nocase: this.nocase,\n      nocaseMagicOnly,\n      nocomment: true,\n      noext: this.noext,\n      nonegate: true,\n      optimizationLevel: 2,\n      platform: this.platform,\n      windowsPathsNoEscape: this.windowsPathsNoEscape,\n      debug: !!this.opts.debug,\n    }\n\n    const mms = this.pattern.map(p => new Minimatch(p, mmo))\n    const [matchSet, globParts] = mms.reduce(\n      (set: [MatchSet, GlobParts], m) => {\n        set[0].push(...m.set)\n        set[1].push(...m.globParts)\n        return set\n      },\n      [[], []],\n    )\n    this.patterns = matchSet.map((set, i) => {\n      const g = globParts[i]\n      /* c8 ignore start */\n      if (!g) throw new Error('invalid pattern object')\n      /* c8 ignore stop */\n      return new Pattern(set, g, 0, this.platform)\n    })\n  }\n\n  /**\n   * Returns a Promise that resolves to the results array.\n   */\n  async walk(): Promise<Results<Opts>>\n  async walk(): Promise<(string | Path)[]> {\n    // Walkers always return array of Path objects, so we just have to\n    // coerce them into the right shape.  It will have already called\n    // realpath() if the option was set to do so, so we know that's cached.\n    // start out knowing the cwd, at least\n    return [\n      ...(await new GlobWalker(this.patterns, this.scurry.cwd, {\n        ...this.opts,\n        maxDepth:\n          this.maxDepth !== Infinity ?\n            this.maxDepth + this.scurry.cwd.depth()\n          : Infinity,\n        platform: this.platform,\n        nocase: this.nocase,\n        includeChildMatches: this.includeChildMatches,\n      }).walk()),\n    ]\n  }\n\n  /**\n   * synchronous {@link Glob.walk}\n   */\n  walkSync(): Results<Opts>\n  walkSync(): (string | Path)[] {\n    return [\n      ...new GlobWalker(this.patterns, this.scurry.cwd, {\n        ...this.opts,\n        maxDepth:\n          this.maxDepth !== Infinity ?\n            this.maxDepth + this.scurry.cwd.depth()\n          : Infinity,\n        platform: this.platform,\n        nocase: this.nocase,\n        includeChildMatches: this.includeChildMatches,\n      }).walkSync(),\n    ]\n  }\n\n  /**\n   * Stream results asynchronously.\n   */\n  stream(): Minipass<Result<Opts>, Result<Opts>>\n  stream(): Minipass<string | Path, string | Path> {\n    return new GlobStream(this.patterns, this.scurry.cwd, {\n      ...this.opts,\n      maxDepth:\n        this.maxDepth !== Infinity ?\n          this.maxDepth + this.scurry.cwd.depth()\n        : Infinity,\n      platform: this.platform,\n      nocase: this.nocase,\n      includeChildMatches: this.includeChildMatches,\n    }).stream()\n  }\n\n  /**\n   * Stream results synchronously.\n   */\n  streamSync(): Minipass<Result<Opts>, Result<Opts>>\n  streamSync(): Minipass<string | Path, string | Path> {\n    return new GlobStream(this.patterns, this.scurry.cwd, {\n      ...this.opts,\n      maxDepth:\n        this.maxDepth !== Infinity ?\n          this.maxDepth + this.scurry.cwd.depth()\n        : Infinity,\n      platform: this.platform,\n      nocase: this.nocase,\n      includeChildMatches: this.includeChildMatches,\n    }).streamSync()\n  }\n\n  /**\n   * Default sync iteration function. Returns a Generator that\n   * iterates over the results.\n   */\n  iterateSync(): Generator<Result<Opts>, void, void> {\n    return this.streamSync()[Symbol.iterator]()\n  }\n  [Symbol.iterator]() {\n    return this.iterateSync()\n  }\n\n  /**\n   * Default async iteration function. Returns an AsyncGenerator that\n   * iterates over the results.\n   */\n  iterate(): AsyncGenerator<Result<Opts>, void, void> {\n    return this.stream()[Symbol.asyncIterator]()\n  }\n  [Symbol.asyncIterator]() {\n    return this.iterate()\n  }\n}\n", "import { LRUCache } from 'lru-cache'\nimport { posix, win32 } from 'node:path'\n\nimport { fileURLToPath } from 'node:url'\n\nimport {\n  lstatSync,\n  readdir as readdirCB,\n  readdirSync,\n  readlinkSync,\n  realpathSync as rps,\n} from 'fs'\nimport * as actualFS from 'node:fs'\n\nconst realpathSync = rps.native\n// TODO: test perf of fs/promises realpath vs realpathCB,\n// since the promises one uses realpath.native\n\nimport { lstat, readdir, readlink, realpath } from 'node:fs/promises'\n\nimport { Minipass } from 'minipass'\nimport type { Dirent, Stats } from 'node:fs'\n\n/**\n * An object that will be used to override the default `fs`\n * methods.  Any methods that are not overridden will use Node's\n * built-in implementations.\n *\n * - lstatSync\n * - readdir (callback `withFileTypes` Dirent variant, used for\n *   readdirCB and most walks)\n * - readdirSync\n * - readlinkSync\n * - realpathSync\n * - promises: Object containing the following async methods:\n *   - lstat\n *   - readdir (Dirent variant only)\n *   - readlink\n *   - realpath\n */\nexport interface FSOption {\n  lstatSync?: (path: string) => Stats\n  readdir?: (\n    path: string,\n    options: { withFileTypes: true },\n    cb: (er: NodeJS.ErrnoException | null, entries?: Dirent[]) => any,\n  ) => void\n  readdirSync?: (\n    path: string,\n    options: { withFileTypes: true },\n  ) => Dirent[]\n  readlinkSync?: (path: string) => string\n  realpathSync?: (path: string) => string\n  promises?: {\n    lstat?: (path: string) => Promise<Stats>\n    readdir?: (\n      path: string,\n      options: { withFileTypes: true },\n    ) => Promise<Dirent[]>\n    readlink?: (path: string) => Promise<string>\n    realpath?: (path: string) => Promise<string>\n    [k: string]: any\n  }\n  [k: string]: any\n}\n\ninterface FSValue {\n  lstatSync: (path: string) => Stats\n  readdir: (\n    path: string,\n    options: { withFileTypes: true },\n    cb: (er: NodeJS.ErrnoException | null, entries?: Dirent[]) => any,\n  ) => void\n  readdirSync: (path: string, options: { withFileTypes: true }) => Dirent[]\n  readlinkSync: (path: string) => string\n  realpathSync: (path: string) => string\n  promises: {\n    lstat: (path: string) => Promise<Stats>\n    readdir: (\n      path: string,\n      options: { withFileTypes: true },\n    ) => Promise<Dirent[]>\n    readlink: (path: string) => Promise<string>\n    realpath: (path: string) => Promise<string>\n    [k: string]: any\n  }\n  [k: string]: any\n}\n\nconst defaultFS: FSValue = {\n  lstatSync,\n  readdir: readdirCB,\n  readdirSync,\n  readlinkSync,\n  realpathSync,\n  promises: {\n    lstat,\n    readdir,\n    readlink,\n    realpath,\n  },\n}\n\n// if they just gave us require('fs') then use our default\nconst fsFromOption = (fsOption?: FSOption): FSValue =>\n  !fsOption || fsOption === defaultFS || fsOption === actualFS ?\n    defaultFS\n  : {\n      ...defaultFS,\n      ...fsOption,\n      promises: {\n        ...defaultFS.promises,\n        ...(fsOption.promises || {}),\n      },\n    }\n\n// turn something like //?/c:/ into c:\\\nconst uncDriveRegexp = /^\\\\\\\\\\?\\\\([a-z]:)\\\\?$/i\nconst uncToDrive = (rootPath: string): string =>\n  rootPath.replace(/\\//g, '\\\\').replace(uncDriveRegexp, '$1\\\\')\n\n// windows paths are separated by either / or \\\nconst eitherSep = /[\\\\\\/]/\n\nconst UNKNOWN = 0 // may not even exist, for all we know\nconst IFIFO = 0b0001\nconst IFCHR = 0b0010\nconst IFDIR = 0b0100\nconst IFBLK = 0b0110\nconst IFREG = 0b1000\nconst IFLNK = 0b1010\nconst IFSOCK = 0b1100\nconst IFMT = 0b1111\n\nexport type Type =\n  | 'Unknown'\n  | 'FIFO'\n  | 'CharacterDevice'\n  | 'Directory'\n  | 'BlockDevice'\n  | 'File'\n  | 'SymbolicLink'\n  | 'Socket'\n\n// mask to unset low 4 bits\nconst IFMT_UNKNOWN = ~IFMT\n\n// set after successfully calling readdir() and getting entries.\nconst READDIR_CALLED = 0b0000_0001_0000\n// set after a successful lstat()\nconst LSTAT_CALLED = 0b0000_0010_0000\n// set if an entry (or one of its parents) is definitely not a dir\nconst ENOTDIR = 0b0000_0100_0000\n// set if an entry (or one of its parents) does not exist\n// (can also be set on lstat errors like EACCES or ENAMETOOLONG)\nconst ENOENT = 0b0000_1000_0000\n// cannot have child entries -- also verify &IFMT is either IFDIR or IFLNK\n// set if we fail to readlink\nconst ENOREADLINK = 0b0001_0000_0000\n// set if we know realpath() will fail\nconst ENOREALPATH = 0b0010_0000_0000\n\nconst ENOCHILD = ENOTDIR | ENOENT | ENOREALPATH\nconst TYPEMASK = 0b0011_1111_1111\n\nconst entToType = (s: Dirent | Stats) =>\n  s.isFile() ? IFREG\n  : s.isDirectory() ? IFDIR\n  : s.isSymbolicLink() ? IFLNK\n  : s.isCharacterDevice() ? IFCHR\n  : s.isBlockDevice() ? IFBLK\n  : s.isSocket() ? IFSOCK\n  : s.isFIFO() ? IFIFO\n  : UNKNOWN\n\n// normalize unicode path names\nconst normalizeCache = new Map<string, string>()\nconst normalize = (s: string) => {\n  const c = normalizeCache.get(s)\n  if (c) return c\n  const n = s.normalize('NFKD')\n  normalizeCache.set(s, n)\n  return n\n}\n\nconst normalizeNocaseCache = new Map<string, string>()\nconst normalizeNocase = (s: string) => {\n  const c = normalizeNocaseCache.get(s)\n  if (c) return c\n  const n = normalize(s.toLowerCase())\n  normalizeNocaseCache.set(s, n)\n  return n\n}\n\n/**\n * Options that may be provided to the Path constructor\n */\nexport interface PathOpts {\n  fullpath?: string\n  relative?: string\n  relativePosix?: string\n  parent?: PathBase\n  /**\n   * See {@link FSOption}\n   */\n  fs?: FSOption\n}\n\n/**\n * An LRUCache for storing resolved path strings or Path objects.\n * @internal\n */\nexport class ResolveCache extends LRUCache<string, string> {\n  constructor() {\n    super({ max: 256 })\n  }\n}\n\n// In order to prevent blowing out the js heap by allocating hundreds of\n// thousands of Path entries when walking extremely large trees, the \"children\"\n// in this tree are represented by storing an array of Path entries in an\n// LRUCache, indexed by the parent.  At any time, Path.children() may return an\n// empty array, indicating that it doesn't know about any of its children, and\n// thus has to rebuild that cache.  This is fine, it just means that we don't\n// benefit as much from having the cached entries, but huge directory walks\n// don't blow out the stack, and smaller ones are still as fast as possible.\n//\n//It does impose some complexity when building up the readdir data, because we\n//need to pass a reference to the children array that we started with.\n\n/**\n * an LRUCache for storing child entries.\n * @internal\n */\nexport class ChildrenCache extends LRUCache<PathBase, Children> {\n  constructor(maxSize: number = 16 * 1024) {\n    super({\n      maxSize,\n      // parent + children\n      sizeCalculation: a => a.length + 1,\n    })\n  }\n}\n\n/**\n * Array of Path objects, plus a marker indicating the first provisional entry\n *\n * @internal\n */\nexport type Children = PathBase[] & { provisional: number }\n\nconst setAsCwd = Symbol('PathScurry setAsCwd')\n\n/**\n * Path objects are sort of like a super-powered\n * {@link https://nodejs.org/docs/latest/api/fs.html#class-fsdirent fs.Dirent}\n *\n * Each one represents a single filesystem entry on disk, which may or may not\n * exist. It includes methods for reading various types of information via\n * lstat, readlink, and readdir, and caches all information to the greatest\n * degree possible.\n *\n * Note that fs operations that would normally throw will instead return an\n * \"empty\" value. This is in order to prevent excessive overhead from error\n * stack traces.\n */\nexport abstract class PathBase implements Dirent {\n  /**\n   * the basename of this path\n   *\n   * **Important**: *always* test the path name against any test string\n   * usingthe {@link isNamed} method, and not by directly comparing this\n   * string. Otherwise, unicode path strings that the system sees as identical\n   * will not be properly treated as the same path, leading to incorrect\n   * behavior and possible security issues.\n   */\n  name: string\n  /**\n   * the Path entry corresponding to the path root.\n   *\n   * @internal\n   */\n  root: PathBase\n  /**\n   * All roots found within the current PathScurry family\n   *\n   * @internal\n   */\n  roots: { [k: string]: PathBase }\n  /**\n   * a reference to the parent path, or undefined in the case of root entries\n   *\n   * @internal\n   */\n  parent?: PathBase\n  /**\n   * boolean indicating whether paths are compared case-insensitively\n   * @internal\n   */\n  nocase: boolean\n\n  /**\n   * boolean indicating that this path is the current working directory\n   * of the PathScurry collection that contains it.\n   */\n  isCWD: boolean = false\n\n  /**\n   * the string or regexp used to split paths. On posix, it is `'/'`, and on\n   * windows it is a RegExp matching either `'/'` or `'\\\\'`\n   */\n  abstract splitSep: string | RegExp\n  /**\n   * The path separator string to use when joining paths\n   */\n  abstract sep: string\n\n  // potential default fs override\n  #fs: FSValue\n\n  // Stats fields\n  #dev?: number\n  get dev() {\n    return this.#dev\n  }\n  #mode?: number\n  get mode() {\n    return this.#mode\n  }\n  #nlink?: number\n  get nlink() {\n    return this.#nlink\n  }\n  #uid?: number\n  get uid() {\n    return this.#uid\n  }\n  #gid?: number\n  get gid() {\n    return this.#gid\n  }\n  #rdev?: number\n  get rdev() {\n    return this.#rdev\n  }\n  #blksize?: number\n  get blksize() {\n    return this.#blksize\n  }\n  #ino?: number\n  get ino() {\n    return this.#ino\n  }\n  #size?: number\n  get size() {\n    return this.#size\n  }\n  #blocks?: number\n  get blocks() {\n    return this.#blocks\n  }\n  #atimeMs?: number\n  get atimeMs() {\n    return this.#atimeMs\n  }\n  #mtimeMs?: number\n  get mtimeMs() {\n    return this.#mtimeMs\n  }\n  #ctimeMs?: number\n  get ctimeMs() {\n    return this.#ctimeMs\n  }\n  #birthtimeMs?: number\n  get birthtimeMs() {\n    return this.#birthtimeMs\n  }\n  #atime?: Date\n  get atime() {\n    return this.#atime\n  }\n  #mtime?: Date\n  get mtime() {\n    return this.#mtime\n  }\n  #ctime?: Date\n  get ctime() {\n    return this.#ctime\n  }\n  #birthtime?: Date\n  get birthtime() {\n    return this.#birthtime\n  }\n\n  #matchName: string\n  #depth?: number\n  #fullpath?: string\n  #fullpathPosix?: string\n  #relative?: string\n  #relativePosix?: string\n  #type: number\n  #children: ChildrenCache\n  #linkTarget?: PathBase\n  #realpath?: PathBase\n\n  /**\n   * This property is for compatibility with the Dirent class as of\n   * Node v20, where Dirent['parentPath'] refers to the path of the\n   * directory that was passed to readdir. For root entries, it's the path\n   * to the entry itself.\n   */\n  get parentPath(): string {\n    return (this.parent || this).fullpath()\n  }\n\n  /**\n   * Deprecated alias for Dirent['parentPath'] Somewhat counterintuitively,\n   * this property refers to the *parent* path, not the path object itself.\n   *\n   * @deprecated\n   */\n  get path(): string {\n    return this.parentPath\n  }\n\n  /**\n   * Do not create new Path objects directly.  They should always be accessed\n   * via the PathScurry class or other methods on the Path class.\n   *\n   * @internal\n   */\n  constructor(\n    name: string,\n    type: number = UNKNOWN,\n    root: PathBase | undefined,\n    roots: { [k: string]: PathBase },\n    nocase: boolean,\n    children: ChildrenCache,\n    opts: PathOpts,\n  ) {\n    this.name = name\n    this.#matchName = nocase ? normalizeNocase(name) : normalize(name)\n    this.#type = type & TYPEMASK\n    this.nocase = nocase\n    this.roots = roots\n    this.root = root || this\n    this.#children = children\n    this.#fullpath = opts.fullpath\n    this.#relative = opts.relative\n    this.#relativePosix = opts.relativePosix\n    this.parent = opts.parent\n    if (this.parent) {\n      this.#fs = this.parent.#fs\n    } else {\n      this.#fs = fsFromOption(opts.fs)\n    }\n  }\n\n  /**\n   * Returns the depth of the Path object from its root.\n   *\n   * For example, a path at `/foo/bar` would have a depth of 2.\n   */\n  depth(): number {\n    if (this.#depth !== undefined) return this.#depth\n    if (!this.parent) return (this.#depth = 0)\n    return (this.#depth = this.parent.depth() + 1)\n  }\n\n  /**\n   * @internal\n   */\n  abstract getRootString(path: string): string\n  /**\n   * @internal\n   */\n  abstract getRoot(rootPath: string): PathBase\n  /**\n   * @internal\n   */\n  abstract newChild(name: string, type?: number, opts?: PathOpts): PathBase\n\n  /**\n   * @internal\n   */\n  childrenCache() {\n    return this.#children\n  }\n\n  /**\n   * Get the Path object referenced by the string path, resolved from this Path\n   */\n  resolve(path?: string): PathBase {\n    if (!path) {\n      return this\n    }\n    const rootPath = this.getRootString(path)\n    const dir = path.substring(rootPath.length)\n    const dirParts = dir.split(this.splitSep)\n    const result: PathBase =\n      rootPath ?\n        this.getRoot(rootPath).#resolveParts(dirParts)\n      : this.#resolveParts(dirParts)\n    return result\n  }\n\n  #resolveParts(dirParts: string[]) {\n    let p: PathBase = this\n    for (const part of dirParts) {\n      p = p.child(part)\n    }\n    return p\n  }\n\n  /**\n   * Returns the cached children Path objects, if still available.  If they\n   * have fallen out of the cache, then returns an empty array, and resets the\n   * READDIR_CALLED bit, so that future calls to readdir() will require an fs\n   * lookup.\n   *\n   * @internal\n   */\n  children(): Children {\n    const cached = this.#children.get(this)\n    if (cached) {\n      return cached\n    }\n    const children: Children = Object.assign([], { provisional: 0 })\n    this.#children.set(this, children)\n    this.#type &= ~READDIR_CALLED\n    return children\n  }\n\n  /**\n   * Resolves a path portion and returns or creates the child Path.\n   *\n   * Returns `this` if pathPart is `''` or `'.'`, or `parent` if pathPart is\n   * `'..'`.\n   *\n   * This should not be called directly.  If `pathPart` contains any path\n   * separators, it will lead to unsafe undefined behavior.\n   *\n   * Use `Path.resolve()` instead.\n   *\n   * @internal\n   */\n  child(pathPart: string, opts?: PathOpts): PathBase {\n    if (pathPart === '' || pathPart === '.') {\n      return this\n    }\n    if (pathPart === '..') {\n      return this.parent || this\n    }\n\n    // find the child\n    const children = this.children()\n    const name =\n      this.nocase ? normalizeNocase(pathPart) : normalize(pathPart)\n    for (const p of children) {\n      if (p.#matchName === name) {\n        return p\n      }\n    }\n\n    // didn't find it, create provisional child, since it might not\n    // actually exist.  If we know the parent isn't a dir, then\n    // in fact it CAN'T exist.\n    const s = this.parent ? this.sep : ''\n    const fullpath =\n      this.#fullpath ? this.#fullpath + s + pathPart : undefined\n    const pchild = this.newChild(pathPart, UNKNOWN, {\n      ...opts,\n      parent: this,\n      fullpath,\n    })\n\n    if (!this.canReaddir()) {\n      pchild.#type |= ENOENT\n    }\n\n    // don't have to update provisional, because if we have real children,\n    // then provisional is set to children.length, otherwise a lower number\n    children.push(pchild)\n    return pchild\n  }\n\n  /**\n   * The relative path from the cwd. If it does not share an ancestor with\n   * the cwd, then this ends up being equivalent to the fullpath()\n   */\n  relative(): string {\n    if (this.isCWD) return ''\n    if (this.#relative !== undefined) {\n      return this.#relative\n    }\n    const name = this.name\n    const p = this.parent\n    if (!p) {\n      return (this.#relative = this.name)\n    }\n    const pv = p.relative()\n    return pv + (!pv || !p.parent ? '' : this.sep) + name\n  }\n\n  /**\n   * The relative path from the cwd, using / as the path separator.\n   * If it does not share an ancestor with\n   * the cwd, then this ends up being equivalent to the fullpathPosix()\n   * On posix systems, this is identical to relative().\n   */\n  relativePosix(): string {\n    if (this.sep === '/') return this.relative()\n    if (this.isCWD) return ''\n    if (this.#relativePosix !== undefined) return this.#relativePosix\n    const name = this.name\n    const p = this.parent\n    if (!p) {\n      return (this.#relativePosix = this.fullpathPosix())\n    }\n    const pv = p.relativePosix()\n    return pv + (!pv || !p.parent ? '' : '/') + name\n  }\n\n  /**\n   * The fully resolved path string for this Path entry\n   */\n  fullpath(): string {\n    if (this.#fullpath !== undefined) {\n      return this.#fullpath\n    }\n    const name = this.name\n    const p = this.parent\n    if (!p) {\n      return (this.#fullpath = this.name)\n    }\n    const pv = p.fullpath()\n    const fp = pv + (!p.parent ? '' : this.sep) + name\n    return (this.#fullpath = fp)\n  }\n\n  /**\n   * On platforms other than windows, this is identical to fullpath.\n   *\n   * On windows, this is overridden to return the forward-slash form of the\n   * full UNC path.\n   */\n  fullpathPosix(): string {\n    if (this.#fullpathPosix !== undefined) return this.#fullpathPosix\n    if (this.sep === '/') return (this.#fullpathPosix = this.fullpath())\n    if (!this.parent) {\n      const p = this.fullpath().replace(/\\\\/g, '/')\n      if (/^[a-z]:\\//i.test(p)) {\n        return (this.#fullpathPosix = `//?/${p}`)\n      } else {\n        return (this.#fullpathPosix = p)\n      }\n    }\n    const p = this.parent\n    const pfpp = p.fullpathPosix()\n    const fpp = pfpp + (!pfpp || !p.parent ? '' : '/') + this.name\n    return (this.#fullpathPosix = fpp)\n  }\n\n  /**\n   * Is the Path of an unknown type?\n   *\n   * Note that we might know *something* about it if there has been a previous\n   * filesystem operation, for example that it does not exist, or is not a\n   * link, or whether it has child entries.\n   */\n  isUnknown(): boolean {\n    return (this.#type & IFMT) === UNKNOWN\n  }\n\n  isType(type: Type): boolean {\n    return this[`is${type}`]()\n  }\n\n  getType(): Type {\n    return (\n      this.isUnknown() ? 'Unknown'\n      : this.isDirectory() ? 'Directory'\n      : this.isFile() ? 'File'\n      : this.isSymbolicLink() ? 'SymbolicLink'\n      : this.isFIFO() ? 'FIFO'\n      : this.isCharacterDevice() ? 'CharacterDevice'\n      : this.isBlockDevice() ? 'BlockDevice'\n      : /* c8 ignore start */ this.isSocket() ? 'Socket'\n      : 'Unknown'\n    )\n    /* c8 ignore stop */\n  }\n\n  /**\n   * Is the Path a regular file?\n   */\n  isFile(): boolean {\n    return (this.#type & IFMT) === IFREG\n  }\n\n  /**\n   * Is the Path a directory?\n   */\n  isDirectory(): boolean {\n    return (this.#type & IFMT) === IFDIR\n  }\n\n  /**\n   * Is the path a character device?\n   */\n  isCharacterDevice(): boolean {\n    return (this.#type & IFMT) === IFCHR\n  }\n\n  /**\n   * Is the path a block device?\n   */\n  isBlockDevice(): boolean {\n    return (this.#type & IFMT) === IFBLK\n  }\n\n  /**\n   * Is the path a FIFO pipe?\n   */\n  isFIFO(): boolean {\n    return (this.#type & IFMT) === IFIFO\n  }\n\n  /**\n   * Is the path a socket?\n   */\n  isSocket(): boolean {\n    return (this.#type & IFMT) === IFSOCK\n  }\n\n  /**\n   * Is the path a symbolic link?\n   */\n  isSymbolicLink(): boolean {\n    return (this.#type & IFLNK) === IFLNK\n  }\n\n  /**\n   * Return the entry if it has been subject of a successful lstat, or\n   * undefined otherwise.\n   *\n   * Does not read the filesystem, so an undefined result *could* simply\n   * mean that we haven't called lstat on it.\n   */\n  lstatCached(): PathBase | undefined {\n    return this.#type & LSTAT_CALLED ? this : undefined\n  }\n\n  /**\n   * Return the cached link target if the entry has been the subject of a\n   * successful readlink, or undefined otherwise.\n   *\n   * Does not read the filesystem, so an undefined result *could* just mean we\n   * don't have any cached data. Only use it if you are very sure that a\n   * readlink() has been called at some point.\n   */\n  readlinkCached(): PathBase | undefined {\n    return this.#linkTarget\n  }\n\n  /**\n   * Returns the cached realpath target if the entry has been the subject\n   * of a successful realpath, or undefined otherwise.\n   *\n   * Does not read the filesystem, so an undefined result *could* just mean we\n   * don't have any cached data. Only use it if you are very sure that a\n   * realpath() has been called at some point.\n   */\n  realpathCached(): PathBase | undefined {\n    return this.#realpath\n  }\n\n  /**\n   * Returns the cached child Path entries array if the entry has been the\n   * subject of a successful readdir(), or [] otherwise.\n   *\n   * Does not read the filesystem, so an empty array *could* just mean we\n   * don't have any cached data. Only use it if you are very sure that a\n   * readdir() has been called recently enough to still be valid.\n   */\n  readdirCached(): PathBase[] {\n    const children = this.children()\n    return children.slice(0, children.provisional)\n  }\n\n  /**\n   * Return true if it's worth trying to readlink.  Ie, we don't (yet) have\n   * any indication that readlink will definitely fail.\n   *\n   * Returns false if the path is known to not be a symlink, if a previous\n   * readlink failed, or if the entry does not exist.\n   */\n  canReadlink(): boolean {\n    if (this.#linkTarget) return true\n    if (!this.parent) return false\n    // cases where it cannot possibly succeed\n    const ifmt = this.#type & IFMT\n    return !(\n      (ifmt !== UNKNOWN && ifmt !== IFLNK) ||\n      this.#type & ENOREADLINK ||\n      this.#type & ENOENT\n    )\n  }\n\n  /**\n   * Return true if readdir has previously been successfully called on this\n   * path, indicating that cachedReaddir() is likely valid.\n   */\n  calledReaddir(): boolean {\n    return !!(this.#type & READDIR_CALLED)\n  }\n\n  /**\n   * Returns true if the path is known to not exist. That is, a previous lstat\n   * or readdir failed to verify its existence when that would have been\n   * expected, or a parent entry was marked either enoent or enotdir.\n   */\n  isENOENT(): boolean {\n    return !!(this.#type & ENOENT)\n  }\n\n  /**\n   * Return true if the path is a match for the given path name.  This handles\n   * case sensitivity and unicode normalization.\n   *\n   * Note: even on case-sensitive systems, it is **not** safe to test the\n   * equality of the `.name` property to determine whether a given pathname\n   * matches, due to unicode normalization mismatches.\n   *\n   * Always use this method instead of testing the `path.name` property\n   * directly.\n   */\n  isNamed(n: string): boolean {\n    return !this.nocase ?\n        this.#matchName === normalize(n)\n      : this.#matchName === normalizeNocase(n)\n  }\n\n  /**\n   * Return the Path object corresponding to the target of a symbolic link.\n   *\n   * If the Path is not a symbolic link, or if the readlink call fails for any\n   * reason, `undefined` is returned.\n   *\n   * Result is cached, and thus may be outdated if the filesystem is mutated.\n   */\n  async readlink(): Promise<PathBase | undefined> {\n    const target = this.#linkTarget\n    if (target) {\n      return target\n    }\n    if (!this.canReadlink()) {\n      return undefined\n    }\n    /* c8 ignore start */\n    // already covered by the canReadlink test, here for ts grumples\n    if (!this.parent) {\n      return undefined\n    }\n    /* c8 ignore stop */\n    try {\n      const read = await this.#fs.promises.readlink(this.fullpath())\n      const linkTarget = (await this.parent.realpath())?.resolve(read)\n      if (linkTarget) {\n        return (this.#linkTarget = linkTarget)\n      }\n    } catch (er) {\n      this.#readlinkFail((er as NodeJS.ErrnoException).code)\n      return undefined\n    }\n  }\n\n  /**\n   * Synchronous {@link PathBase.readlink}\n   */\n  readlinkSync(): PathBase | undefined {\n    const target = this.#linkTarget\n    if (target) {\n      return target\n    }\n    if (!this.canReadlink()) {\n      return undefined\n    }\n    /* c8 ignore start */\n    // already covered by the canReadlink test, here for ts grumples\n    if (!this.parent) {\n      return undefined\n    }\n    /* c8 ignore stop */\n    try {\n      const read = this.#fs.readlinkSync(this.fullpath())\n      const linkTarget = this.parent.realpathSync()?.resolve(read)\n      if (linkTarget) {\n        return (this.#linkTarget = linkTarget)\n      }\n    } catch (er) {\n      this.#readlinkFail((er as NodeJS.ErrnoException).code)\n      return undefined\n    }\n  }\n\n  #readdirSuccess(children: Children) {\n    // succeeded, mark readdir called bit\n    this.#type |= READDIR_CALLED\n    // mark all remaining provisional children as ENOENT\n    for (let p = children.provisional; p < children.length; p++) {\n      const c = children[p]\n      if (c) c.#markENOENT()\n    }\n  }\n\n  #markENOENT() {\n    // mark as UNKNOWN and ENOENT\n    if (this.#type & ENOENT) return\n    this.#type = (this.#type | ENOENT) & IFMT_UNKNOWN\n    this.#markChildrenENOENT()\n  }\n\n  #markChildrenENOENT() {\n    // all children are provisional and do not exist\n    const children = this.children()\n    children.provisional = 0\n    for (const p of children) {\n      p.#markENOENT()\n    }\n  }\n\n  #markENOREALPATH() {\n    this.#type |= ENOREALPATH\n    this.#markENOTDIR()\n  }\n\n  // save the information when we know the entry is not a dir\n  #markENOTDIR() {\n    // entry is not a directory, so any children can't exist.\n    // this *should* be impossible, since any children created\n    // after it's been marked ENOTDIR should be marked ENOENT,\n    // so it won't even get to this point.\n    /* c8 ignore start */\n    if (this.#type & ENOTDIR) return\n    /* c8 ignore stop */\n    let t = this.#type\n    // this could happen if we stat a dir, then delete it,\n    // then try to read it or one of its children.\n    if ((t & IFMT) === IFDIR) t &= IFMT_UNKNOWN\n    this.#type = t | ENOTDIR\n    this.#markChildrenENOENT()\n  }\n\n  #readdirFail(code: string = '') {\n    // markENOTDIR and markENOENT also set provisional=0\n    if (code === 'ENOTDIR' || code === 'EPERM') {\n      this.#markENOTDIR()\n    } else if (code === 'ENOENT') {\n      this.#markENOENT()\n    } else {\n      this.children().provisional = 0\n    }\n  }\n\n  #lstatFail(code: string = '') {\n    // Windows just raises ENOENT in this case, disable for win CI\n    /* c8 ignore start */\n    if (code === 'ENOTDIR') {\n      // already know it has a parent by this point\n      const p = this.parent as PathBase\n      p.#markENOTDIR()\n    } else if (code === 'ENOENT') {\n      /* c8 ignore stop */\n      this.#markENOENT()\n    }\n  }\n\n  #readlinkFail(code: string = '') {\n    let ter = this.#type\n    ter |= ENOREADLINK\n    if (code === 'ENOENT') ter |= ENOENT\n    // windows gets a weird error when you try to readlink a file\n    if (code === 'EINVAL' || code === 'UNKNOWN') {\n      // exists, but not a symlink, we don't know WHAT it is, so remove\n      // all IFMT bits.\n      ter &= IFMT_UNKNOWN\n    }\n    this.#type = ter\n    // windows just gets ENOENT in this case.  We do cover the case,\n    // just disabled because it's impossible on Windows CI\n    /* c8 ignore start */\n    if (code === 'ENOTDIR' && this.parent) {\n      this.parent.#markENOTDIR()\n    }\n    /* c8 ignore stop */\n  }\n\n  #readdirAddChild(e: Dirent, c: Children) {\n    return (\n      this.#readdirMaybePromoteChild(e, c) ||\n      this.#readdirAddNewChild(e, c)\n    )\n  }\n\n  #readdirAddNewChild(e: Dirent, c: Children): PathBase {\n    // alloc new entry at head, so it's never provisional\n    const type = entToType(e)\n    const child = this.newChild(e.name, type, { parent: this })\n    const ifmt = child.#type & IFMT\n    if (ifmt !== IFDIR && ifmt !== IFLNK && ifmt !== UNKNOWN) {\n      child.#type |= ENOTDIR\n    }\n    c.unshift(child)\n    c.provisional++\n    return child\n  }\n\n  #readdirMaybePromoteChild(e: Dirent, c: Children): PathBase | undefined {\n    for (let p = c.provisional; p < c.length; p++) {\n      const pchild = c[p]\n      const name =\n        this.nocase ? normalizeNocase(e.name) : normalize(e.name)\n      if (name !== pchild!.#matchName) {\n        continue\n      }\n\n      return this.#readdirPromoteChild(e, pchild!, p, c)\n    }\n  }\n\n  #readdirPromoteChild(\n    e: Dirent,\n    p: PathBase,\n    index: number,\n    c: Children,\n  ): PathBase {\n    const v = p.name\n    // retain any other flags, but set ifmt from dirent\n    p.#type = (p.#type & IFMT_UNKNOWN) | entToType(e)\n    // case sensitivity fixing when we learn the true name.\n    if (v !== e.name) p.name = e.name\n\n    // just advance provisional index (potentially off the list),\n    // otherwise we have to splice/pop it out and re-insert at head\n    if (index !== c.provisional) {\n      if (index === c.length - 1) c.pop()\n      else c.splice(index, 1)\n      c.unshift(p)\n    }\n    c.provisional++\n    return p\n  }\n\n  /**\n   * Call lstat() on this Path, and update all known information that can be\n   * determined.\n   *\n   * Note that unlike `fs.lstat()`, the returned value does not contain some\n   * information, such as `mode`, `dev`, `nlink`, and `ino`.  If that\n   * information is required, you will need to call `fs.lstat` yourself.\n   *\n   * If the Path refers to a nonexistent file, or if the lstat call fails for\n   * any reason, `undefined` is returned.  Otherwise the updated Path object is\n   * returned.\n   *\n   * Results are cached, and thus may be out of date if the filesystem is\n   * mutated.\n   */\n  async lstat(): Promise<PathBase | undefined> {\n    if ((this.#type & ENOENT) === 0) {\n      try {\n        this.#applyStat(await this.#fs.promises.lstat(this.fullpath()))\n        return this\n      } catch (er) {\n        this.#lstatFail((er as NodeJS.ErrnoException).code)\n      }\n    }\n  }\n\n  /**\n   * synchronous {@link PathBase.lstat}\n   */\n  lstatSync(): PathBase | undefined {\n    if ((this.#type & ENOENT) === 0) {\n      try {\n        this.#applyStat(this.#fs.lstatSync(this.fullpath()))\n        return this\n      } catch (er) {\n        this.#lstatFail((er as NodeJS.ErrnoException).code)\n      }\n    }\n  }\n\n  #applyStat(st: Stats) {\n    const {\n      atime,\n      atimeMs,\n      birthtime,\n      birthtimeMs,\n      blksize,\n      blocks,\n      ctime,\n      ctimeMs,\n      dev,\n      gid,\n      ino,\n      mode,\n      mtime,\n      mtimeMs,\n      nlink,\n      rdev,\n      size,\n      uid,\n    } = st\n    this.#atime = atime\n    this.#atimeMs = atimeMs\n    this.#birthtime = birthtime\n    this.#birthtimeMs = birthtimeMs\n    this.#blksize = blksize\n    this.#blocks = blocks\n    this.#ctime = ctime\n    this.#ctimeMs = ctimeMs\n    this.#dev = dev\n    this.#gid = gid\n    this.#ino = ino\n    this.#mode = mode\n    this.#mtime = mtime\n    this.#mtimeMs = mtimeMs\n    this.#nlink = nlink\n    this.#rdev = rdev\n    this.#size = size\n    this.#uid = uid\n    const ifmt = entToType(st)\n    // retain any other flags, but set the ifmt\n    this.#type = (this.#type & IFMT_UNKNOWN) | ifmt | LSTAT_CALLED\n    if (ifmt !== UNKNOWN && ifmt !== IFDIR && ifmt !== IFLNK) {\n      this.#type |= ENOTDIR\n    }\n  }\n\n  #onReaddirCB: ((\n    er: NodeJS.ErrnoException | null,\n    entries: Path[],\n  ) => any)[] = []\n  #readdirCBInFlight: boolean = false\n  #callOnReaddirCB(children: Path[]) {\n    this.#readdirCBInFlight = false\n    const cbs = this.#onReaddirCB.slice()\n    this.#onReaddirCB.length = 0\n    cbs.forEach(cb => cb(null, children))\n  }\n\n  /**\n   * Standard node-style callback interface to get list of directory entries.\n   *\n   * If the Path cannot or does not contain any children, then an empty array\n   * is returned.\n   *\n   * Results are cached, and thus may be out of date if the filesystem is\n   * mutated.\n   *\n   * @param cb The callback called with (er, entries).  Note that the `er`\n   * param is somewhat extraneous, as all readdir() errors are handled and\n   * simply result in an empty set of entries being returned.\n   * @param allowZalgo Boolean indicating that immediately known results should\n   * *not* be deferred with `queueMicrotask`. Defaults to `false`. Release\n   * zalgo at your peril, the dark pony lord is devious and unforgiving.\n   */\n  readdirCB(\n    cb: (er: NodeJS.ErrnoException | null, entries: PathBase[]) => any,\n    allowZalgo: boolean = false,\n  ): void {\n    if (!this.canReaddir()) {\n      if (allowZalgo) cb(null, [])\n      else queueMicrotask(() => cb(null, []))\n      return\n    }\n\n    const children = this.children()\n    if (this.calledReaddir()) {\n      const c = children.slice(0, children.provisional)\n      if (allowZalgo) cb(null, c)\n      else queueMicrotask(() => cb(null, c))\n      return\n    }\n\n    // don't have to worry about zalgo at this point.\n    this.#onReaddirCB.push(cb)\n    if (this.#readdirCBInFlight) {\n      return\n    }\n    this.#readdirCBInFlight = true\n\n    // else read the directory, fill up children\n    // de-provisionalize any provisional children.\n    const fullpath = this.fullpath()\n    this.#fs.readdir(fullpath, { withFileTypes: true }, (er, entries) => {\n      if (er) {\n        this.#readdirFail((er as NodeJS.ErrnoException).code)\n        children.provisional = 0\n      } else {\n        // if we didn't get an error, we always get entries.\n        //@ts-ignore\n        for (const e of entries) {\n          this.#readdirAddChild(e, children)\n        }\n        this.#readdirSuccess(children)\n      }\n      this.#callOnReaddirCB(children.slice(0, children.provisional))\n      return\n    })\n  }\n\n  #asyncReaddirInFlight?: Promise<void>\n\n  /**\n   * Return an array of known child entries.\n   *\n   * If the Path cannot or does not contain any children, then an empty array\n   * is returned.\n   *\n   * Results are cached, and thus may be out of date if the filesystem is\n   * mutated.\n   */\n  async readdir(): Promise<PathBase[]> {\n    if (!this.canReaddir()) {\n      return []\n    }\n\n    const children = this.children()\n    if (this.calledReaddir()) {\n      return children.slice(0, children.provisional)\n    }\n\n    // else read the directory, fill up children\n    // de-provisionalize any provisional children.\n    const fullpath = this.fullpath()\n    if (this.#asyncReaddirInFlight) {\n      await this.#asyncReaddirInFlight\n    } else {\n      /* c8 ignore start */\n      let resolve: () => void = () => {}\n      /* c8 ignore stop */\n      this.#asyncReaddirInFlight = new Promise<void>(\n        res => (resolve = res),\n      )\n      try {\n        for (const e of await this.#fs.promises.readdir(fullpath, {\n          withFileTypes: true,\n        })) {\n          this.#readdirAddChild(e, children)\n        }\n        this.#readdirSuccess(children)\n      } catch (er) {\n        this.#readdirFail((er as NodeJS.ErrnoException).code)\n        children.provisional = 0\n      }\n      this.#asyncReaddirInFlight = undefined\n      resolve()\n    }\n    return children.slice(0, children.provisional)\n  }\n\n  /**\n   * synchronous {@link PathBase.readdir}\n   */\n  readdirSync(): PathBase[] {\n    if (!this.canReaddir()) {\n      return []\n    }\n\n    const children = this.children()\n    if (this.calledReaddir()) {\n      return children.slice(0, children.provisional)\n    }\n\n    // else read the directory, fill up children\n    // de-provisionalize any provisional children.\n    const fullpath = this.fullpath()\n    try {\n      for (const e of this.#fs.readdirSync(fullpath, {\n        withFileTypes: true,\n      })) {\n        this.#readdirAddChild(e, children)\n      }\n      this.#readdirSuccess(children)\n    } catch (er) {\n      this.#readdirFail((er as NodeJS.ErrnoException).code)\n      children.provisional = 0\n    }\n    return children.slice(0, children.provisional)\n  }\n\n  canReaddir() {\n    if (this.#type & ENOCHILD) return false\n    const ifmt = IFMT & this.#type\n    // we always set ENOTDIR when setting IFMT, so should be impossible\n    /* c8 ignore start */\n    if (!(ifmt === UNKNOWN || ifmt === IFDIR || ifmt === IFLNK)) {\n      return false\n    }\n    /* c8 ignore stop */\n    return true\n  }\n\n  shouldWalk(\n    dirs: Set<PathBase | undefined>,\n    walkFilter?: (e: PathBase) => boolean,\n  ): boolean {\n    return (\n      (this.#type & IFDIR) === IFDIR &&\n      !(this.#type & ENOCHILD) &&\n      !dirs.has(this) &&\n      (!walkFilter || walkFilter(this))\n    )\n  }\n\n  /**\n   * Return the Path object corresponding to path as resolved\n   * by realpath(3).\n   *\n   * If the realpath call fails for any reason, `undefined` is returned.\n   *\n   * Result is cached, and thus may be outdated if the filesystem is mutated.\n   * On success, returns a Path object.\n   */\n  async realpath(): Promise<PathBase | undefined> {\n    if (this.#realpath) return this.#realpath\n    if ((ENOREALPATH | ENOREADLINK | ENOENT) & this.#type) return undefined\n    try {\n      const rp = await this.#fs.promises.realpath(this.fullpath())\n      return (this.#realpath = this.resolve(rp))\n    } catch (_) {\n      this.#markENOREALPATH()\n    }\n  }\n\n  /**\n   * Synchronous {@link realpath}\n   */\n  realpathSync(): PathBase | undefined {\n    if (this.#realpath) return this.#realpath\n    if ((ENOREALPATH | ENOREADLINK | ENOENT) & this.#type) return undefined\n    try {\n      const rp = this.#fs.realpathSync(this.fullpath())\n      return (this.#realpath = this.resolve(rp))\n    } catch (_) {\n      this.#markENOREALPATH()\n    }\n  }\n\n  /**\n   * Internal method to mark this Path object as the scurry cwd,\n   * called by {@link PathScurry#chdir}\n   *\n   * @internal\n   */\n  [setAsCwd](oldCwd: PathBase): void {\n    if (oldCwd === this) return\n    oldCwd.isCWD = false\n    this.isCWD = true\n\n    const changed = new Set<PathBase>([])\n    let rp = []\n    let p: PathBase = this\n    while (p && p.parent) {\n      changed.add(p)\n      p.#relative = rp.join(this.sep)\n      p.#relativePosix = rp.join('/')\n      p = p.parent\n      rp.push('..')\n    }\n    // now un-memoize parents of old cwd\n    p = oldCwd\n    while (p && p.parent && !changed.has(p)) {\n      p.#relative = undefined\n      p.#relativePosix = undefined\n      p = p.parent\n    }\n  }\n}\n\n/**\n * Path class used on win32 systems\n *\n * Uses `'\\\\'` as the path separator for returned paths, either `'\\\\'` or `'/'`\n * as the path separator for parsing paths.\n */\nexport class PathWin32 extends PathBase {\n  /**\n   * Separator for generating path strings.\n   */\n  sep: '\\\\' = '\\\\'\n  /**\n   * Separator for parsing path strings.\n   */\n  splitSep: RegExp = eitherSep\n\n  /**\n   * Do not create new Path objects directly.  They should always be accessed\n   * via the PathScurry class or other methods on the Path class.\n   *\n   * @internal\n   */\n  constructor(\n    name: string,\n    type: number = UNKNOWN,\n    root: PathBase | undefined,\n    roots: { [k: string]: PathBase },\n    nocase: boolean,\n    children: ChildrenCache,\n    opts: PathOpts,\n  ) {\n    super(name, type, root, roots, nocase, children, opts)\n  }\n\n  /**\n   * @internal\n   */\n  newChild(name: string, type: number = UNKNOWN, opts: PathOpts = {}) {\n    return new PathWin32(\n      name,\n      type,\n      this.root,\n      this.roots,\n      this.nocase,\n      this.childrenCache(),\n      opts,\n    )\n  }\n\n  /**\n   * @internal\n   */\n  getRootString(path: string): string {\n    return win32.parse(path).root\n  }\n\n  /**\n   * @internal\n   */\n  getRoot(rootPath: string): PathBase {\n    rootPath = uncToDrive(rootPath.toUpperCase())\n    if (rootPath === this.root.name) {\n      return this.root\n    }\n    // ok, not that one, check if it matches another we know about\n    for (const [compare, root] of Object.entries(this.roots)) {\n      if (this.sameRoot(rootPath, compare)) {\n        return (this.roots[rootPath] = root)\n      }\n    }\n    // otherwise, have to create a new one.\n    return (this.roots[rootPath] = new PathScurryWin32(\n      rootPath,\n      this,\n    ).root)\n  }\n\n  /**\n   * @internal\n   */\n  sameRoot(rootPath: string, compare: string = this.root.name): boolean {\n    // windows can (rarely) have case-sensitive filesystem, but\n    // UNC and drive letters are always case-insensitive, and canonically\n    // represented uppercase.\n    rootPath = rootPath\n      .toUpperCase()\n      .replace(/\\//g, '\\\\')\n      .replace(uncDriveRegexp, '$1\\\\')\n    return rootPath === compare\n  }\n}\n\n/**\n * Path class used on all posix systems.\n *\n * Uses `'/'` as the path separator.\n */\nexport class PathPosix extends PathBase {\n  /**\n   * separator for parsing path strings\n   */\n  splitSep: '/' = '/'\n  /**\n   * separator for generating path strings\n   */\n  sep: '/' = '/'\n\n  /**\n   * Do not create new Path objects directly.  They should always be accessed\n   * via the PathScurry class or other methods on the Path class.\n   *\n   * @internal\n   */\n  constructor(\n    name: string,\n    type: number = UNKNOWN,\n    root: PathBase | undefined,\n    roots: { [k: string]: PathBase },\n    nocase: boolean,\n    children: ChildrenCache,\n    opts: PathOpts,\n  ) {\n    super(name, type, root, roots, nocase, children, opts)\n  }\n\n  /**\n   * @internal\n   */\n  getRootString(path: string): string {\n    return path.startsWith('/') ? '/' : ''\n  }\n\n  /**\n   * @internal\n   */\n  getRoot(_rootPath: string): PathBase {\n    return this.root\n  }\n\n  /**\n   * @internal\n   */\n  newChild(name: string, type: number = UNKNOWN, opts: PathOpts = {}) {\n    return new PathPosix(\n      name,\n      type,\n      this.root,\n      this.roots,\n      this.nocase,\n      this.childrenCache(),\n      opts,\n    )\n  }\n}\n\n/**\n * Options that may be provided to the PathScurry constructor\n */\nexport interface PathScurryOpts {\n  /**\n   * perform case-insensitive path matching. Default based on platform\n   * subclass.\n   */\n  nocase?: boolean\n  /**\n   * Number of Path entries to keep in the cache of Path child references.\n   *\n   * Setting this higher than 65536 will dramatically increase the data\n   * consumption and construction time overhead of each PathScurry.\n   *\n   * Setting this value to 256 or lower will significantly reduce the data\n   * consumption and construction time overhead, but may also reduce resolve()\n   * and readdir() performance on large filesystems.\n   *\n   * Default `16384`.\n   */\n  childrenCacheSize?: number\n  /**\n   * An object that overrides the built-in functions from the fs and\n   * fs/promises modules.\n   *\n   * See {@link FSOption}\n   */\n  fs?: FSOption\n}\n\n/**\n * The base class for all PathScurry classes, providing the interface for path\n * resolution and filesystem operations.\n *\n * Typically, you should *not* instantiate this class directly, but rather one\n * of the platform-specific classes, or the exported {@link PathScurry} which\n * defaults to the current platform.\n */\nexport abstract class PathScurryBase {\n  /**\n   * The root Path entry for the current working directory of this Scurry\n   */\n  root: PathBase\n  /**\n   * The string path for the root of this Scurry's current working directory\n   */\n  rootPath: string\n  /**\n   * A collection of all roots encountered, referenced by rootPath\n   */\n  roots: { [k: string]: PathBase }\n  /**\n   * The Path entry corresponding to this PathScurry's current working directory.\n   */\n  cwd: PathBase\n  #resolveCache: ResolveCache\n  #resolvePosixCache: ResolveCache\n  #children: ChildrenCache\n  /**\n   * Perform path comparisons case-insensitively.\n   *\n   * Defaults true on Darwin and Windows systems, false elsewhere.\n   */\n  nocase: boolean\n\n  /**\n   * The path separator used for parsing paths\n   *\n   * `'/'` on Posix systems, either `'/'` or `'\\\\'` on Windows\n   */\n  abstract sep: string | RegExp\n\n  #fs: FSValue\n\n  /**\n   * This class should not be instantiated directly.\n   *\n   * Use PathScurryWin32, PathScurryDarwin, PathScurryPosix, or PathScurry\n   *\n   * @internal\n   */\n  constructor(\n    cwd: URL | string = process.cwd(),\n    pathImpl: typeof win32 | typeof posix,\n    sep: string | RegExp,\n    {\n      nocase,\n      childrenCacheSize = 16 * 1024,\n      fs = defaultFS,\n    }: PathScurryOpts = {},\n  ) {\n    this.#fs = fsFromOption(fs)\n    if (cwd instanceof URL || cwd.startsWith('file://')) {\n      cwd = fileURLToPath(cwd)\n    }\n    // resolve and split root, and then add to the store.\n    // this is the only time we call path.resolve()\n    const cwdPath = pathImpl.resolve(cwd)\n    this.roots = Object.create(null)\n    this.rootPath = this.parseRootPath(cwdPath)\n    this.#resolveCache = new ResolveCache()\n    this.#resolvePosixCache = new ResolveCache()\n    this.#children = new ChildrenCache(childrenCacheSize)\n\n    const split = cwdPath.substring(this.rootPath.length).split(sep)\n    // resolve('/') leaves '', splits to [''], we don't want that.\n    if (split.length === 1 && !split[0]) {\n      split.pop()\n    }\n    /* c8 ignore start */\n    if (nocase === undefined) {\n      throw new TypeError(\n        'must provide nocase setting to PathScurryBase ctor',\n      )\n    }\n    /* c8 ignore stop */\n    this.nocase = nocase\n    this.root = this.newRoot(this.#fs)\n    this.roots[this.rootPath] = this.root\n    let prev: PathBase = this.root\n    let len = split.length - 1\n    const joinSep = pathImpl.sep\n    let abs = this.rootPath\n    let sawFirst = false\n    for (const part of split) {\n      const l = len--\n      prev = prev.child(part, {\n        relative: new Array(l).fill('..').join(joinSep),\n        relativePosix: new Array(l).fill('..').join('/'),\n        fullpath: (abs += (sawFirst ? '' : joinSep) + part),\n      })\n      sawFirst = true\n    }\n    this.cwd = prev\n  }\n\n  /**\n   * Get the depth of a provided path, string, or the cwd\n   */\n  depth(path: Path | string = this.cwd): number {\n    if (typeof path === 'string') {\n      path = this.cwd.resolve(path)\n    }\n    return path.depth()\n  }\n\n  /**\n   * Parse the root portion of a path string\n   *\n   * @internal\n   */\n  abstract parseRootPath(dir: string): string\n  /**\n   * create a new Path to use as root during construction.\n   *\n   * @internal\n   */\n  abstract newRoot(fs: FSValue): PathBase\n  /**\n   * Determine whether a given path string is absolute\n   */\n  abstract isAbsolute(p: string): boolean\n\n  /**\n   * Return the cache of child entries.  Exposed so subclasses can create\n   * child Path objects in a platform-specific way.\n   *\n   * @internal\n   */\n  childrenCache() {\n    return this.#children\n  }\n\n  /**\n   * Resolve one or more path strings to a resolved string\n   *\n   * Same interface as require('path').resolve.\n   *\n   * Much faster than path.resolve() when called multiple times for the same\n   * path, because the resolved Path objects are cached.  Much slower\n   * otherwise.\n   */\n  resolve(...paths: string[]): string {\n    // first figure out the minimum number of paths we have to test\n    // we always start at cwd, but any absolutes will bump the start\n    let r = ''\n    for (let i = paths.length - 1; i >= 0; i--) {\n      const p = paths[i]\n      if (!p || p === '.') continue\n      r = r ? `${p}/${r}` : p\n      if (this.isAbsolute(p)) {\n        break\n      }\n    }\n    const cached = this.#resolveCache.get(r)\n    if (cached !== undefined) {\n      return cached\n    }\n    const result = this.cwd.resolve(r).fullpath()\n    this.#resolveCache.set(r, result)\n    return result\n  }\n\n  /**\n   * Resolve one or more path strings to a resolved string, returning\n   * the posix path.  Identical to .resolve() on posix systems, but on\n   * windows will return a forward-slash separated UNC path.\n   *\n   * Same interface as require('path').resolve.\n   *\n   * Much faster than path.resolve() when called multiple times for the same\n   * path, because the resolved Path objects are cached.  Much slower\n   * otherwise.\n   */\n  resolvePosix(...paths: string[]): string {\n    // first figure out the minimum number of paths we have to test\n    // we always start at cwd, but any absolutes will bump the start\n    let r = ''\n    for (let i = paths.length - 1; i >= 0; i--) {\n      const p = paths[i]\n      if (!p || p === '.') continue\n      r = r ? `${p}/${r}` : p\n      if (this.isAbsolute(p)) {\n        break\n      }\n    }\n    const cached = this.#resolvePosixCache.get(r)\n    if (cached !== undefined) {\n      return cached\n    }\n    const result = this.cwd.resolve(r).fullpathPosix()\n    this.#resolvePosixCache.set(r, result)\n    return result\n  }\n\n  /**\n   * find the relative path from the cwd to the supplied path string or entry\n   */\n  relative(entry: PathBase | string = this.cwd): string {\n    if (typeof entry === 'string') {\n      entry = this.cwd.resolve(entry)\n    }\n    return entry.relative()\n  }\n\n  /**\n   * find the relative path from the cwd to the supplied path string or\n   * entry, using / as the path delimiter, even on Windows.\n   */\n  relativePosix(entry: PathBase | string = this.cwd): string {\n    if (typeof entry === 'string') {\n      entry = this.cwd.resolve(entry)\n    }\n    return entry.relativePosix()\n  }\n\n  /**\n   * Return the basename for the provided string or Path object\n   */\n  basename(entry: PathBase | string = this.cwd): string {\n    if (typeof entry === 'string') {\n      entry = this.cwd.resolve(entry)\n    }\n    return entry.name\n  }\n\n  /**\n   * Return the dirname for the provided string or Path object\n   */\n  dirname(entry: PathBase | string = this.cwd): string {\n    if (typeof entry === 'string') {\n      entry = this.cwd.resolve(entry)\n    }\n    return (entry.parent || entry).fullpath()\n  }\n\n  /**\n   * Return an array of known child entries.\n   *\n   * First argument may be either a string, or a Path object.\n   *\n   * If the Path cannot or does not contain any children, then an empty array\n   * is returned.\n   *\n   * Results are cached, and thus may be out of date if the filesystem is\n   * mutated.\n   *\n   * Unlike `fs.readdir()`, the `withFileTypes` option defaults to `true`. Set\n   * `{ withFileTypes: false }` to return strings.\n   */\n\n  readdir(): Promise<PathBase[]>\n  readdir(opts: { withFileTypes: true }): Promise<PathBase[]>\n  readdir(opts: { withFileTypes: false }): Promise<string[]>\n  readdir(opts: { withFileTypes: boolean }): Promise<PathBase[] | string[]>\n  readdir(entry: PathBase | string): Promise<PathBase[]>\n  readdir(\n    entry: PathBase | string,\n    opts: { withFileTypes: true },\n  ): Promise<PathBase[]>\n  readdir(\n    entry: PathBase | string,\n    opts: { withFileTypes: false },\n  ): Promise<string[]>\n  readdir(\n    entry: PathBase | string,\n    opts: { withFileTypes: boolean },\n  ): Promise<PathBase[] | string[]>\n  async readdir(\n    entry: PathBase | string | { withFileTypes: boolean } = this.cwd,\n    opts: { withFileTypes: boolean } = {\n      withFileTypes: true,\n    },\n  ): Promise<PathBase[] | string[]> {\n    if (typeof entry === 'string') {\n      entry = this.cwd.resolve(entry)\n    } else if (!(entry instanceof PathBase)) {\n      opts = entry\n      entry = this.cwd\n    }\n    const { withFileTypes } = opts\n    if (!entry.canReaddir()) {\n      return []\n    } else {\n      const p = await entry.readdir()\n      return withFileTypes ? p : p.map(e => e.name)\n    }\n  }\n\n  /**\n   * synchronous {@link PathScurryBase.readdir}\n   */\n  readdirSync(): PathBase[]\n  readdirSync(opts: { withFileTypes: true }): PathBase[]\n  readdirSync(opts: { withFileTypes: false }): string[]\n  readdirSync(opts: { withFileTypes: boolean }): PathBase[] | string[]\n  readdirSync(entry: PathBase | string): PathBase[]\n  readdirSync(\n    entry: PathBase | string,\n    opts: { withFileTypes: true },\n  ): PathBase[]\n  readdirSync(\n    entry: PathBase | string,\n    opts: { withFileTypes: false },\n  ): string[]\n  readdirSync(\n    entry: PathBase | string,\n    opts: { withFileTypes: boolean },\n  ): PathBase[] | string[]\n  readdirSync(\n    entry: PathBase | string | { withFileTypes: boolean } = this.cwd,\n    opts: { withFileTypes: boolean } = {\n      withFileTypes: true,\n    },\n  ): PathBase[] | string[] {\n    if (typeof entry === 'string') {\n      entry = this.cwd.resolve(entry)\n    } else if (!(entry instanceof PathBase)) {\n      opts = entry\n      entry = this.cwd\n    }\n    const { withFileTypes = true } = opts\n    if (!entry.canReaddir()) {\n      return []\n    } else if (withFileTypes) {\n      return entry.readdirSync()\n    } else {\n      return entry.readdirSync().map(e => e.name)\n    }\n  }\n\n  /**\n   * Call lstat() on the string or Path object, and update all known\n   * information that can be determined.\n   *\n   * Note that unlike `fs.lstat()`, the returned value does not contain some\n   * information, such as `mode`, `dev`, `nlink`, and `ino`.  If that\n   * information is required, you will need to call `fs.lstat` yourself.\n   *\n   * If the Path refers to a nonexistent file, or if the lstat call fails for\n   * any reason, `undefined` is returned.  Otherwise the updated Path object is\n   * returned.\n   *\n   * Results are cached, and thus may be out of date if the filesystem is\n   * mutated.\n   */\n  async lstat(\n    entry: string | PathBase = this.cwd,\n  ): Promise<PathBase | undefined> {\n    if (typeof entry === 'string') {\n      entry = this.cwd.resolve(entry)\n    }\n    return entry.lstat()\n  }\n\n  /**\n   * synchronous {@link PathScurryBase.lstat}\n   */\n  lstatSync(entry: string | PathBase = this.cwd): PathBase | undefined {\n    if (typeof entry === 'string') {\n      entry = this.cwd.resolve(entry)\n    }\n    return entry.lstatSync()\n  }\n\n  /**\n   * Return the Path object or string path corresponding to the target of a\n   * symbolic link.\n   *\n   * If the path is not a symbolic link, or if the readlink call fails for any\n   * reason, `undefined` is returned.\n   *\n   * Result is cached, and thus may be outdated if the filesystem is mutated.\n   *\n   * `{withFileTypes}` option defaults to `false`.\n   *\n   * On success, returns a Path object if `withFileTypes` option is true,\n   * otherwise a string.\n   */\n  readlink(): Promise<string | undefined>\n  readlink(opt: { withFileTypes: false }): Promise<string | undefined>\n  readlink(opt: { withFileTypes: true }): Promise<PathBase | undefined>\n  readlink(opt: {\n    withFileTypes: boolean\n  }): Promise<PathBase | string | undefined>\n  readlink(\n    entry: string | PathBase,\n    opt?: { withFileTypes: false },\n  ): Promise<string | undefined>\n  readlink(\n    entry: string | PathBase,\n    opt: { withFileTypes: true },\n  ): Promise<PathBase | undefined>\n  readlink(\n    entry: string | PathBase,\n    opt: { withFileTypes: boolean },\n  ): Promise<string | PathBase | undefined>\n  async readlink(\n    entry: string | PathBase | { withFileTypes: boolean } = this.cwd,\n    { withFileTypes }: { withFileTypes: boolean } = {\n      withFileTypes: false,\n    },\n  ): Promise<string | PathBase | undefined> {\n    if (typeof entry === 'string') {\n      entry = this.cwd.resolve(entry)\n    } else if (!(entry instanceof PathBase)) {\n      withFileTypes = entry.withFileTypes\n      entry = this.cwd\n    }\n    const e = await entry.readlink()\n    return withFileTypes ? e : e?.fullpath()\n  }\n\n  /**\n   * synchronous {@link PathScurryBase.readlink}\n   */\n  readlinkSync(): string | undefined\n  readlinkSync(opt: { withFileTypes: false }): string | undefined\n  readlinkSync(opt: { withFileTypes: true }): PathBase | undefined\n  readlinkSync(opt: {\n    withFileTypes: boolean\n  }): PathBase | string | undefined\n  readlinkSync(\n    entry: string | PathBase,\n    opt?: { withFileTypes: false },\n  ): string | undefined\n  readlinkSync(\n    entry: string | PathBase,\n    opt: { withFileTypes: true },\n  ): PathBase | undefined\n  readlinkSync(\n    entry: string | PathBase,\n    opt: { withFileTypes: boolean },\n  ): string | PathBase | undefined\n  readlinkSync(\n    entry: string | PathBase | { withFileTypes: boolean } = this.cwd,\n    { withFileTypes }: { withFileTypes: boolean } = {\n      withFileTypes: false,\n    },\n  ): string | PathBase | undefined {\n    if (typeof entry === 'string') {\n      entry = this.cwd.resolve(entry)\n    } else if (!(entry instanceof PathBase)) {\n      withFileTypes = entry.withFileTypes\n      entry = this.cwd\n    }\n    const e = entry.readlinkSync()\n    return withFileTypes ? e : e?.fullpath()\n  }\n\n  /**\n   * Return the Path object or string path corresponding to path as resolved\n   * by realpath(3).\n   *\n   * If the realpath call fails for any reason, `undefined` is returned.\n   *\n   * Result is cached, and thus may be outdated if the filesystem is mutated.\n   *\n   * `{withFileTypes}` option defaults to `false`.\n   *\n   * On success, returns a Path object if `withFileTypes` option is true,\n   * otherwise a string.\n   */\n  realpath(): Promise<string | undefined>\n  realpath(opt: { withFileTypes: false }): Promise<string | undefined>\n  realpath(opt: { withFileTypes: true }): Promise<PathBase | undefined>\n  realpath(opt: {\n    withFileTypes: boolean\n  }): Promise<PathBase | string | undefined>\n  realpath(\n    entry: string | PathBase,\n    opt?: { withFileTypes: false },\n  ): Promise<string | undefined>\n  realpath(\n    entry: string | PathBase,\n    opt: { withFileTypes: true },\n  ): Promise<PathBase | undefined>\n  realpath(\n    entry: string | PathBase,\n    opt: { withFileTypes: boolean },\n  ): Promise<string | PathBase | undefined>\n  async realpath(\n    entry: string | PathBase | { withFileTypes: boolean } = this.cwd,\n    { withFileTypes }: { withFileTypes: boolean } = {\n      withFileTypes: false,\n    },\n  ): Promise<string | PathBase | undefined> {\n    if (typeof entry === 'string') {\n      entry = this.cwd.resolve(entry)\n    } else if (!(entry instanceof PathBase)) {\n      withFileTypes = entry.withFileTypes\n      entry = this.cwd\n    }\n    const e = await entry.realpath()\n    return withFileTypes ? e : e?.fullpath()\n  }\n\n  realpathSync(): string | undefined\n  realpathSync(opt: { withFileTypes: false }): string | undefined\n  realpathSync(opt: { withFileTypes: true }): PathBase | undefined\n  realpathSync(opt: {\n    withFileTypes: boolean\n  }): PathBase | string | undefined\n  realpathSync(\n    entry: string | PathBase,\n    opt?: { withFileTypes: false },\n  ): string | undefined\n  realpathSync(\n    entry: string | PathBase,\n    opt: { withFileTypes: true },\n  ): PathBase | undefined\n  realpathSync(\n    entry: string | PathBase,\n    opt: { withFileTypes: boolean },\n  ): string | PathBase | undefined\n  realpathSync(\n    entry: string | PathBase | { withFileTypes: boolean } = this.cwd,\n    { withFileTypes }: { withFileTypes: boolean } = {\n      withFileTypes: false,\n    },\n  ): string | PathBase | undefined {\n    if (typeof entry === 'string') {\n      entry = this.cwd.resolve(entry)\n    } else if (!(entry instanceof PathBase)) {\n      withFileTypes = entry.withFileTypes\n      entry = this.cwd\n    }\n    const e = entry.realpathSync()\n    return withFileTypes ? e : e?.fullpath()\n  }\n\n  /**\n   * Asynchronously walk the directory tree, returning an array of\n   * all path strings or Path objects found.\n   *\n   * Note that this will be extremely memory-hungry on large filesystems.\n   * In such cases, it may be better to use the stream or async iterator\n   * walk implementation.\n   */\n  walk(): Promise<PathBase[]>\n  walk(\n    opts: WalkOptionsWithFileTypesTrue | WalkOptionsWithFileTypesUnset,\n  ): Promise<PathBase[]>\n  walk(opts: WalkOptionsWithFileTypesFalse): Promise<string[]>\n  walk(opts: WalkOptions): Promise<string[] | PathBase[]>\n  walk(entry: string | PathBase): Promise<PathBase[]>\n  walk(\n    entry: string | PathBase,\n    opts: WalkOptionsWithFileTypesTrue | WalkOptionsWithFileTypesUnset,\n  ): Promise<PathBase[]>\n  walk(\n    entry: string | PathBase,\n    opts: WalkOptionsWithFileTypesFalse,\n  ): Promise<string[]>\n  walk(\n    entry: string | PathBase,\n    opts: WalkOptions,\n  ): Promise<PathBase[] | string[]>\n  async walk(\n    entry: string | PathBase | WalkOptions = this.cwd,\n    opts: WalkOptions = {},\n  ): Promise<PathBase[] | string[]> {\n    if (typeof entry === 'string') {\n      entry = this.cwd.resolve(entry)\n    } else if (!(entry instanceof PathBase)) {\n      opts = entry\n      entry = this.cwd\n    }\n    const {\n      withFileTypes = true,\n      follow = false,\n      filter,\n      walkFilter,\n    } = opts\n    const results: (string | PathBase)[] = []\n    if (!filter || filter(entry)) {\n      results.push(withFileTypes ? entry : entry.fullpath())\n    }\n    const dirs = new Set<PathBase>()\n    const walk = (\n      dir: PathBase,\n      cb: (er?: NodeJS.ErrnoException) => void,\n    ) => {\n      dirs.add(dir)\n      dir.readdirCB((er, entries) => {\n        /* c8 ignore start */\n        if (er) {\n          return cb(er)\n        }\n        /* c8 ignore stop */\n        let len = entries.length\n        if (!len) return cb()\n        const next = () => {\n          if (--len === 0) {\n            cb()\n          }\n        }\n        for (const e of entries) {\n          if (!filter || filter(e)) {\n            results.push(withFileTypes ? e : e.fullpath())\n          }\n          if (follow && e.isSymbolicLink()) {\n            e.realpath()\n              .then(r => (r?.isUnknown() ? r.lstat() : r))\n              .then(r =>\n                r?.shouldWalk(dirs, walkFilter) ? walk(r, next) : next(),\n              )\n          } else {\n            if (e.shouldWalk(dirs, walkFilter)) {\n              walk(e, next)\n            } else {\n              next()\n            }\n          }\n        }\n      }, true) // zalgooooooo\n    }\n\n    const start = entry\n    return new Promise<PathBase[] | string[]>((res, rej) => {\n      walk(start, er => {\n        /* c8 ignore start */\n        if (er) return rej(er)\n        /* c8 ignore stop */\n        res(results as PathBase[] | string[])\n      })\n    })\n  }\n\n  /**\n   * Synchronously walk the directory tree, returning an array of\n   * all path strings or Path objects found.\n   *\n   * Note that this will be extremely memory-hungry on large filesystems.\n   * In such cases, it may be better to use the stream or async iterator\n   * walk implementation.\n   */\n  walkSync(): PathBase[]\n  walkSync(\n    opts: WalkOptionsWithFileTypesTrue | WalkOptionsWithFileTypesUnset,\n  ): PathBase[]\n  walkSync(opts: WalkOptionsWithFileTypesFalse): string[]\n  walkSync(opts: WalkOptions): string[] | PathBase[]\n  walkSync(entry: string | PathBase): PathBase[]\n  walkSync(\n    entry: string | PathBase,\n    opts: WalkOptionsWithFileTypesUnset | WalkOptionsWithFileTypesTrue,\n  ): PathBase[]\n  walkSync(\n    entry: string | PathBase,\n    opts: WalkOptionsWithFileTypesFalse,\n  ): string[]\n  walkSync(\n    entry: string | PathBase,\n    opts: WalkOptions,\n  ): PathBase[] | string[]\n  walkSync(\n    entry: string | PathBase | WalkOptions = this.cwd,\n    opts: WalkOptions = {},\n  ): PathBase[] | string[] {\n    if (typeof entry === 'string') {\n      entry = this.cwd.resolve(entry)\n    } else if (!(entry instanceof PathBase)) {\n      opts = entry\n      entry = this.cwd\n    }\n    const {\n      withFileTypes = true,\n      follow = false,\n      filter,\n      walkFilter,\n    } = opts\n    const results: (string | PathBase)[] = []\n    if (!filter || filter(entry)) {\n      results.push(withFileTypes ? entry : entry.fullpath())\n    }\n    const dirs = new Set<PathBase>([entry])\n    for (const dir of dirs) {\n      const entries = dir.readdirSync()\n      for (const e of entries) {\n        if (!filter || filter(e)) {\n          results.push(withFileTypes ? e : e.fullpath())\n        }\n        let r: PathBase | undefined = e\n        if (e.isSymbolicLink()) {\n          if (!(follow && (r = e.realpathSync()))) continue\n          if (r.isUnknown()) r.lstatSync()\n        }\n        if (r.shouldWalk(dirs, walkFilter)) {\n          dirs.add(r)\n        }\n      }\n    }\n    return results as string[] | PathBase[]\n  }\n\n  /**\n   * Support for `for await`\n   *\n   * Alias for {@link PathScurryBase.iterate}\n   *\n   * Note: As of Node 19, this is very slow, compared to other methods of\n   * walking.  Consider using {@link PathScurryBase.stream} if memory overhead\n   * and backpressure are concerns, or {@link PathScurryBase.walk} if not.\n   */\n  [Symbol.asyncIterator]() {\n    return this.iterate()\n  }\n\n  /**\n   * Async generator form of {@link PathScurryBase.walk}\n   *\n   * Note: As of Node 19, this is very slow, compared to other methods of\n   * walking, especially if most/all of the directory tree has been previously\n   * walked.  Consider using {@link PathScurryBase.stream} if memory overhead\n   * and backpressure are concerns, or {@link PathScurryBase.walk} if not.\n   */\n  iterate(): AsyncGenerator<PathBase, void, void>\n  iterate(\n    opts: WalkOptionsWithFileTypesTrue | WalkOptionsWithFileTypesUnset,\n  ): AsyncGenerator<PathBase, void, void>\n  iterate(\n    opts: WalkOptionsWithFileTypesFalse,\n  ): AsyncGenerator<string, void, void>\n  iterate(opts: WalkOptions): AsyncGenerator<string | PathBase, void, void>\n  iterate(entry: string | PathBase): AsyncGenerator<PathBase, void, void>\n  iterate(\n    entry: string | PathBase,\n    opts: WalkOptionsWithFileTypesTrue | WalkOptionsWithFileTypesUnset,\n  ): AsyncGenerator<PathBase, void, void>\n  iterate(\n    entry: string | PathBase,\n    opts: WalkOptionsWithFileTypesFalse,\n  ): AsyncGenerator<string, void, void>\n  iterate(\n    entry: string | PathBase,\n    opts: WalkOptions,\n  ): AsyncGenerator<PathBase | string, void, void>\n  iterate(\n    entry: string | PathBase | WalkOptions = this.cwd,\n    options: WalkOptions = {},\n  ): AsyncGenerator<PathBase | string, void, void> {\n    // iterating async over the stream is significantly more performant,\n    // especially in the warm-cache scenario, because it buffers up directory\n    // entries in the background instead of waiting for a yield for each one.\n    if (typeof entry === 'string') {\n      entry = this.cwd.resolve(entry)\n    } else if (!(entry instanceof PathBase)) {\n      options = entry\n      entry = this.cwd\n    }\n    return this.stream(entry, options)[Symbol.asyncIterator]()\n  }\n\n  /**\n   * Iterating over a PathScurry performs a synchronous walk.\n   *\n   * Alias for {@link PathScurryBase.iterateSync}\n   */\n  [Symbol.iterator]() {\n    return this.iterateSync()\n  }\n\n  iterateSync(): Generator<PathBase, void, void>\n  iterateSync(\n    opts: WalkOptionsWithFileTypesTrue | WalkOptionsWithFileTypesUnset,\n  ): Generator<PathBase, void, void>\n  iterateSync(\n    opts: WalkOptionsWithFileTypesFalse,\n  ): Generator<string, void, void>\n  iterateSync(opts: WalkOptions): Generator<string | PathBase, void, void>\n  iterateSync(entry: string | PathBase): Generator<PathBase, void, void>\n  iterateSync(\n    entry: string | PathBase,\n    opts: WalkOptionsWithFileTypesTrue | WalkOptionsWithFileTypesUnset,\n  ): Generator<PathBase, void, void>\n  iterateSync(\n    entry: string | PathBase,\n    opts: WalkOptionsWithFileTypesFalse,\n  ): Generator<string, void, void>\n  iterateSync(\n    entry: string | PathBase,\n    opts: WalkOptions,\n  ): Generator<PathBase | string, void, void>\n  *iterateSync(\n    entry: string | PathBase | WalkOptions = this.cwd,\n    opts: WalkOptions = {},\n  ): Generator<PathBase | string, void, void> {\n    if (typeof entry === 'string') {\n      entry = this.cwd.resolve(entry)\n    } else if (!(entry instanceof PathBase)) {\n      opts = entry\n      entry = this.cwd\n    }\n    const {\n      withFileTypes = true,\n      follow = false,\n      filter,\n      walkFilter,\n    } = opts\n    if (!filter || filter(entry)) {\n      yield withFileTypes ? entry : entry.fullpath()\n    }\n    const dirs = new Set<PathBase>([entry])\n    for (const dir of dirs) {\n      const entries = dir.readdirSync()\n      for (const e of entries) {\n        if (!filter || filter(e)) {\n          yield withFileTypes ? e : e.fullpath()\n        }\n        let r: PathBase | undefined = e\n        if (e.isSymbolicLink()) {\n          if (!(follow && (r = e.realpathSync()))) continue\n          if (r.isUnknown()) r.lstatSync()\n        }\n        if (r.shouldWalk(dirs, walkFilter)) {\n          dirs.add(r)\n        }\n      }\n    }\n  }\n\n  /**\n   * Stream form of {@link PathScurryBase.walk}\n   *\n   * Returns a Minipass stream that emits {@link PathBase} objects by default,\n   * or strings if `{ withFileTypes: false }` is set in the options.\n   */\n  stream(): Minipass<PathBase>\n  stream(\n    opts: WalkOptionsWithFileTypesTrue | WalkOptionsWithFileTypesUnset,\n  ): Minipass<PathBase>\n  stream(opts: WalkOptionsWithFileTypesFalse): Minipass<string>\n  stream(opts: WalkOptions): Minipass<string | PathBase>\n  stream(entry: string | PathBase): Minipass<PathBase>\n  stream(\n    entry: string | PathBase,\n    opts: WalkOptionsWithFileTypesUnset | WalkOptionsWithFileTypesTrue,\n  ): Minipass<PathBase>\n  stream(\n    entry: string | PathBase,\n    opts: WalkOptionsWithFileTypesFalse,\n  ): Minipass<string>\n  stream(\n    entry: string | PathBase,\n    opts: WalkOptions,\n  ): Minipass<string> | Minipass<PathBase>\n  stream(\n    entry: string | PathBase | WalkOptions = this.cwd,\n    opts: WalkOptions = {},\n  ): Minipass<string> | Minipass<PathBase> {\n    if (typeof entry === 'string') {\n      entry = this.cwd.resolve(entry)\n    } else if (!(entry instanceof PathBase)) {\n      opts = entry\n      entry = this.cwd\n    }\n    const {\n      withFileTypes = true,\n      follow = false,\n      filter,\n      walkFilter,\n    } = opts\n    const results = new Minipass<string | PathBase>({ objectMode: true })\n    if (!filter || filter(entry)) {\n      results.write(withFileTypes ? entry : entry.fullpath())\n    }\n    const dirs = new Set<PathBase>()\n    const queue: PathBase[] = [entry]\n    let processing = 0\n    const process = () => {\n      let paused = false\n      while (!paused) {\n        const dir = queue.shift()\n        if (!dir) {\n          if (processing === 0) results.end()\n          return\n        }\n\n        processing++\n        dirs.add(dir)\n\n        const onReaddir = (\n          er: null | NodeJS.ErrnoException,\n          entries: PathBase[],\n          didRealpaths: boolean = false,\n        ) => {\n          /* c8 ignore start */\n          if (er) return results.emit('error', er)\n          /* c8 ignore stop */\n          if (follow && !didRealpaths) {\n            const promises: Promise<PathBase | undefined>[] = []\n            for (const e of entries) {\n              if (e.isSymbolicLink()) {\n                promises.push(\n                  e\n                    .realpath()\n                    .then((r: PathBase | undefined) =>\n                      r?.isUnknown() ? r.lstat() : r,\n                    ),\n                )\n              }\n            }\n            if (promises.length) {\n              Promise.all(promises).then(() =>\n                onReaddir(null, entries, true),\n              )\n              return\n            }\n          }\n\n          for (const e of entries) {\n            if (e && (!filter || filter(e))) {\n              if (!results.write(withFileTypes ? e : e.fullpath())) {\n                paused = true\n              }\n            }\n          }\n\n          processing--\n          for (const e of entries) {\n            const r = e.realpathCached() || e\n            if (r.shouldWalk(dirs, walkFilter)) {\n              queue.push(r)\n            }\n          }\n          if (paused && !results.flowing) {\n            results.once('drain', process)\n          } else if (!sync) {\n            process()\n          }\n        }\n\n        // zalgo containment\n        let sync = true\n        dir.readdirCB(onReaddir, true)\n        sync = false\n      }\n    }\n    process()\n    return results as Minipass<string> | Minipass<PathBase>\n  }\n\n  /**\n   * Synchronous form of {@link PathScurryBase.stream}\n   *\n   * Returns a Minipass stream that emits {@link PathBase} objects by default,\n   * or strings if `{ withFileTypes: false }` is set in the options.\n   *\n   * Will complete the walk in a single tick if the stream is consumed fully.\n   * Otherwise, will pause as needed for stream backpressure.\n   */\n  streamSync(): Minipass<PathBase>\n  streamSync(\n    opts: WalkOptionsWithFileTypesTrue | WalkOptionsWithFileTypesUnset,\n  ): Minipass<PathBase>\n  streamSync(opts: WalkOptionsWithFileTypesFalse): Minipass<string>\n  streamSync(opts: WalkOptions): Minipass<string | PathBase>\n  streamSync(entry: string | PathBase): Minipass<PathBase>\n  streamSync(\n    entry: string | PathBase,\n    opts: WalkOptionsWithFileTypesUnset | WalkOptionsWithFileTypesTrue,\n  ): Minipass<PathBase>\n  streamSync(\n    entry: string | PathBase,\n    opts: WalkOptionsWithFileTypesFalse,\n  ): Minipass<string>\n  streamSync(\n    entry: string | PathBase,\n    opts: WalkOptions,\n  ): Minipass<string> | Minipass<PathBase>\n  streamSync(\n    entry: string | PathBase | WalkOptions = this.cwd,\n    opts: WalkOptions = {},\n  ): Minipass<string> | Minipass<PathBase> {\n    if (typeof entry === 'string') {\n      entry = this.cwd.resolve(entry)\n    } else if (!(entry instanceof PathBase)) {\n      opts = entry\n      entry = this.cwd\n    }\n    const {\n      withFileTypes = true,\n      follow = false,\n      filter,\n      walkFilter,\n    } = opts\n    const results = new Minipass<string | PathBase>({ objectMode: true })\n    const dirs = new Set<PathBase>()\n    if (!filter || filter(entry)) {\n      results.write(withFileTypes ? entry : entry.fullpath())\n    }\n    const queue: PathBase[] = [entry]\n    let processing = 0\n    const process = () => {\n      let paused = false\n      while (!paused) {\n        const dir = queue.shift()\n        if (!dir) {\n          if (processing === 0) results.end()\n          return\n        }\n        processing++\n        dirs.add(dir)\n\n        const entries = dir.readdirSync()\n        for (const e of entries) {\n          if (!filter || filter(e)) {\n            if (!results.write(withFileTypes ? e : e.fullpath())) {\n              paused = true\n            }\n          }\n        }\n        processing--\n        for (const e of entries) {\n          let r: PathBase | undefined = e\n          if (e.isSymbolicLink()) {\n            if (!(follow && (r = e.realpathSync()))) continue\n            if (r.isUnknown()) r.lstatSync()\n          }\n          if (r.shouldWalk(dirs, walkFilter)) {\n            queue.push(r)\n          }\n        }\n      }\n      if (paused && !results.flowing) results.once('drain', process)\n    }\n    process()\n    return results as Minipass<string> | Minipass<PathBase>\n  }\n\n  chdir(path: string | Path = this.cwd) {\n    const oldCwd = this.cwd\n    this.cwd = typeof path === 'string' ? this.cwd.resolve(path) : path\n    this.cwd[setAsCwd](oldCwd)\n  }\n}\n\n/**\n * Options provided to all walk methods.\n */\nexport interface WalkOptions {\n  /**\n   * Return results as {@link PathBase} objects rather than strings.\n   * When set to false, results are fully resolved paths, as returned by\n   * {@link PathBase.fullpath}.\n   * @default true\n   */\n  withFileTypes?: boolean\n\n  /**\n   *  Attempt to read directory entries from symbolic links. Otherwise, only\n   *  actual directories are traversed. Regardless of this setting, a given\n   *  target path will only ever be walked once, meaning that a symbolic link\n   *  to a previously traversed directory will never be followed.\n   *\n   *  Setting this imposes a slight performance penalty, because `readlink`\n   *  must be called on all symbolic links encountered, in order to avoid\n   *  infinite cycles.\n   * @default false\n   */\n  follow?: boolean\n\n  /**\n   * Only return entries where the provided function returns true.\n   *\n   * This will not prevent directories from being traversed, even if they do\n   * not pass the filter, though it will prevent directories themselves from\n   * being included in the result set.  See {@link walkFilter}\n   *\n   * Asynchronous functions are not supported here.\n   *\n   * By default, if no filter is provided, all entries and traversed\n   * directories are included.\n   */\n  filter?: (entry: PathBase) => boolean\n\n  /**\n   * Only traverse directories (and in the case of {@link follow} being set to\n   * true, symbolic links to directories) if the provided function returns\n   * true.\n   *\n   * This will not prevent directories from being included in the result set,\n   * even if they do not pass the supplied filter function.  See {@link filter}\n   * to do that.\n   *\n   * Asynchronous functions are not supported here.\n   */\n  walkFilter?: (entry: PathBase) => boolean\n}\n\nexport type WalkOptionsWithFileTypesUnset = WalkOptions & {\n  withFileTypes?: undefined\n}\nexport type WalkOptionsWithFileTypesTrue = WalkOptions & {\n  withFileTypes: true\n}\nexport type WalkOptionsWithFileTypesFalse = WalkOptions & {\n  withFileTypes: false\n}\n\n/**\n * Windows implementation of {@link PathScurryBase}\n *\n * Defaults to case insensitve, uses `'\\\\'` to generate path strings.  Uses\n * {@link PathWin32} for Path objects.\n */\nexport class PathScurryWin32 extends PathScurryBase {\n  /**\n   * separator for generating path strings\n   */\n  sep: '\\\\' = '\\\\'\n\n  constructor(\n    cwd: URL | string = process.cwd(),\n    opts: PathScurryOpts = {},\n  ) {\n    const { nocase = true } = opts\n    super(cwd, win32, '\\\\', { ...opts, nocase })\n    this.nocase = nocase\n    for (let p: PathBase | undefined = this.cwd; p; p = p.parent) {\n      p.nocase = this.nocase\n    }\n  }\n\n  /**\n   * @internal\n   */\n  parseRootPath(dir: string): string {\n    // if the path starts with a single separator, it's not a UNC, and we'll\n    // just get separator as the root, and driveFromUNC will return \\\n    // In that case, mount \\ on the root from the cwd.\n    return win32.parse(dir).root.toUpperCase()\n  }\n\n  /**\n   * @internal\n   */\n  newRoot(fs: FSValue) {\n    return new PathWin32(\n      this.rootPath,\n      IFDIR,\n      undefined,\n      this.roots,\n      this.nocase,\n      this.childrenCache(),\n      { fs },\n    )\n  }\n\n  /**\n   * Return true if the provided path string is an absolute path\n   */\n  isAbsolute(p: string): boolean {\n    return (\n      p.startsWith('/') || p.startsWith('\\\\') || /^[a-z]:(\\/|\\\\)/i.test(p)\n    )\n  }\n}\n\n/**\n * {@link PathScurryBase} implementation for all posix systems other than Darwin.\n *\n * Defaults to case-sensitive matching, uses `'/'` to generate path strings.\n *\n * Uses {@link PathPosix} for Path objects.\n */\nexport class PathScurryPosix extends PathScurryBase {\n  /**\n   * separator for generating path strings\n   */\n  sep: '/' = '/'\n  constructor(\n    cwd: URL | string = process.cwd(),\n    opts: PathScurryOpts = {},\n  ) {\n    const { nocase = false } = opts\n    super(cwd, posix, '/', { ...opts, nocase })\n    this.nocase = nocase\n  }\n\n  /**\n   * @internal\n   */\n  parseRootPath(_dir: string): string {\n    return '/'\n  }\n\n  /**\n   * @internal\n   */\n  newRoot(fs: FSValue) {\n    return new PathPosix(\n      this.rootPath,\n      IFDIR,\n      undefined,\n      this.roots,\n      this.nocase,\n      this.childrenCache(),\n      { fs },\n    )\n  }\n\n  /**\n   * Return true if the provided path string is an absolute path\n   */\n  isAbsolute(p: string): boolean {\n    return p.startsWith('/')\n  }\n}\n\n/**\n * {@link PathScurryBase} implementation for Darwin (macOS) systems.\n *\n * Defaults to case-insensitive matching, uses `'/'` for generating path\n * strings.\n *\n * Uses {@link PathPosix} for Path objects.\n */\nexport class PathScurryDarwin extends PathScurryPosix {\n  constructor(\n    cwd: URL | string = process.cwd(),\n    opts: PathScurryOpts = {},\n  ) {\n    const { nocase = true } = opts\n    super(cwd, { ...opts, nocase })\n  }\n}\n\n/**\n * Default {@link PathBase} implementation for the current platform.\n *\n * {@link PathWin32} on Windows systems, {@link PathPosix} on all others.\n */\nexport const Path = process.platform === 'win32' ? PathWin32 : PathPosix\nexport type Path = PathBase | InstanceType<typeof Path>\n\n/**\n * Default {@link PathScurryBase} implementation for the current platform.\n *\n * {@link PathScurryWin32} on Windows systems, {@link PathScurryDarwin} on\n * Darwin (macOS) systems, {@link PathScurryPosix} on all others.\n */\nexport const PathScurry:\n  | typeof PathScurryWin32\n  | typeof PathScurryDarwin\n  | typeof PathScurryPosix =\n  process.platform === 'win32' ? PathScurryWin32\n  : process.platform === 'darwin' ? PathScurryDarwin\n  : PathScurryPosix\nexport type PathScurry = PathScurryBase | InstanceType<typeof PathScurry>\n", "/**\n * @module LRUCache\n */\n\n// module-private names and types\ntype Perf = { now: () => number }\nconst perf: Perf =\n  typeof performance === 'object' &&\n  performance &&\n  typeof performance.now === 'function'\n    ? performance\n    : Date\n\nconst warned = new Set<string>()\n\n// either a function or a class\ntype ForC = ((...a: any[]) => any) | { new (...a: any[]): any }\n\n/* c8 ignore start */\nconst PROCESS = (\n  typeof process === 'object' && !!process ? process : {}\n) as { [k: string]: any }\n/* c8 ignore start */\n\nconst emitWarning = (\n  msg: string,\n  type: string,\n  code: string,\n  fn: ForC\n) => {\n  typeof PROCESS.emitWarning === 'function'\n    ? PROCESS.emitWarning(msg, type, code, fn)\n    : console.error(`[${code}] ${type}: ${msg}`)\n}\n\nlet AC = globalThis.AbortController\nlet AS = globalThis.AbortSignal\n\n/* c8 ignore start */\nif (typeof AC === 'undefined') {\n  //@ts-ignore\n  AS = class AbortSignal {\n    onabort?: (...a: any[]) => any\n    _onabort: ((...a: any[]) => any)[] = []\n    reason?: any\n    aborted: boolean = false\n    addEventListener(_: string, fn: (...a: any[]) => any) {\n      this._onabort.push(fn)\n    }\n  }\n  //@ts-ignore\n  AC = class AbortController {\n    constructor() {\n      warnACPolyfill()\n    }\n    signal = new AS()\n    abort(reason: any) {\n      if (this.signal.aborted) return\n      //@ts-ignore\n      this.signal.reason = reason\n      //@ts-ignore\n      this.signal.aborted = true\n      //@ts-ignore\n      for (const fn of this.signal._onabort) {\n        fn(reason)\n      }\n      this.signal.onabort?.(reason)\n    }\n  }\n  let printACPolyfillWarning =\n    PROCESS.env?.LRU_CACHE_IGNORE_AC_WARNING !== '1'\n  const warnACPolyfill = () => {\n    if (!printACPolyfillWarning) return\n    printACPolyfillWarning = false\n    emitWarning(\n      'AbortController is not defined. If using lru-cache in ' +\n        'node 14, load an AbortController polyfill from the ' +\n        '`node-abort-controller` package. A minimal polyfill is ' +\n        'provided for use by LRUCache.fetch(), but it should not be ' +\n        'relied upon in other contexts (eg, passing it to other APIs that ' +\n        'use AbortController/AbortSignal might have undesirable effects). ' +\n        'You may disable this with LRU_CACHE_IGNORE_AC_WARNING=1 in the env.',\n      'NO_ABORT_CONTROLLER',\n      'ENOTSUP',\n      warnACPolyfill\n    )\n  }\n}\n/* c8 ignore stop */\n\nconst shouldWarn = (code: string) => !warned.has(code)\n\nconst TYPE = Symbol('type')\nexport type PosInt = number & { [TYPE]: 'Positive Integer' }\nexport type Index = number & { [TYPE]: 'LRUCache Index' }\n\nconst isPosInt = (n: any): n is PosInt =>\n  n && n === Math.floor(n) && n > 0 && isFinite(n)\n\nexport type UintArray = Uint8Array | Uint16Array | Uint32Array\nexport type NumberArray = UintArray | number[]\n\n/* c8 ignore start */\n// This is a little bit ridiculous, tbh.\n// The maximum array length is 2^32-1 or thereabouts on most JS impls.\n// And well before that point, you're caching the entire world, I mean,\n// that's ~32GB of just integers for the next/prev links, plus whatever\n// else to hold that many keys and values.  Just filling the memory with\n// zeroes at init time is brutal when you get that big.\n// But why not be complete?\n// Maybe in the future, these limits will have expanded.\nconst getUintArray = (max: number) =>\n  !isPosInt(max)\n    ? null\n    : max <= Math.pow(2, 8)\n    ? Uint8Array\n    : max <= Math.pow(2, 16)\n    ? Uint16Array\n    : max <= Math.pow(2, 32)\n    ? Uint32Array\n    : max <= Number.MAX_SAFE_INTEGER\n    ? ZeroArray\n    : null\n/* c8 ignore stop */\n\nclass ZeroArray extends Array<number> {\n  constructor(size: number) {\n    super(size)\n    this.fill(0)\n  }\n}\nexport type { ZeroArray }\nexport type { Stack }\n\nexport type StackLike = Stack | Index[]\nclass Stack {\n  heap: NumberArray\n  length: number\n  // private constructor\n  static #constructing: boolean = false\n  static create(max: number): StackLike {\n    const HeapCls = getUintArray(max)\n    if (!HeapCls) return []\n    Stack.#constructing = true\n    const s = new Stack(max, HeapCls)\n    Stack.#constructing = false\n    return s\n  }\n  constructor(\n    max: number,\n    HeapCls: { new (n: number): NumberArray }\n  ) {\n    /* c8 ignore start */\n    if (!Stack.#constructing) {\n      throw new TypeError('instantiate Stack using Stack.create(n)')\n    }\n    /* c8 ignore stop */\n    this.heap = new HeapCls(max)\n    this.length = 0\n  }\n  push(n: Index) {\n    this.heap[this.length++] = n\n  }\n  pop(): Index {\n    return this.heap[--this.length] as Index\n  }\n}\n\n/**\n * Promise representing an in-progress {@link LRUCache#fetch} call\n */\nexport type BackgroundFetch<V> = Promise<V | undefined> & {\n  __returned: BackgroundFetch<V> | undefined\n  __abortController: AbortController\n  __staleWhileFetching: V | undefined\n}\n\nexport type DisposeTask<K, V> = [\n  value: V,\n  key: K,\n  reason: LRUCache.DisposeReason\n]\n\nexport namespace LRUCache {\n  /**\n   * An integer greater than 0, reflecting the calculated size of items\n   */\n  export type Size = number\n\n  /**\n   * Integer greater than 0, representing some number of milliseconds, or the\n   * time at which a TTL started counting from.\n   */\n  export type Milliseconds = number\n\n  /**\n   * An integer greater than 0, reflecting a number of items\n   */\n  export type Count = number\n\n  /**\n   * The reason why an item was removed from the cache, passed\n   * to the {@link Disposer} methods.\n   *\n   * - `evict`: The item was evicted because it is the least recently used,\n   *   and the cache is full.\n   * - `set`: A new value was set, overwriting the old value being disposed.\n   * - `delete`: The item was explicitly deleted, either by calling\n   *   {@link LRUCache#delete}, {@link LRUCache#clear}, or\n   *   {@link LRUCache#set} with an undefined value.\n   * - `expire`: The item was removed due to exceeding its TTL.\n   * - `fetch`: A {@link OptionsBase#fetchMethod} operation returned\n   *   `undefined` or was aborted, causing the item to be deleted.\n   */\n  export type DisposeReason =\n    | 'evict'\n    | 'set'\n    | 'delete'\n    | 'expire'\n    | 'fetch'\n  /**\n   * A method called upon item removal, passed as the\n   * {@link OptionsBase.dispose} and/or\n   * {@link OptionsBase.disposeAfter} options.\n   */\n  export type Disposer<K, V> = (\n    value: V,\n    key: K,\n    reason: DisposeReason\n  ) => void\n\n  /**\n   * The reason why an item was added to the cache, passed\n   * to the {@link Inserter} methods.\n   *\n   * - `add`: the item was not found in the cache, and was added\n   * - `update`: the item was in the cache, with the same value provided\n   * - `replace`: the item was in the cache, and replaced\n   */\n  export type InsertReason = 'add' | 'update' | 'replace'\n\n  /**\n   * A method called upon item insertion, passed as the\n   * {@link OptionsBase.insert}\n   */\n  export type Inserter<K, V> = (\n    value: V,\n    key: K,\n    reason: InsertReason\n  ) => void\n\n  /**\n   * A function that returns the effective calculated size\n   * of an entry in the cache.\n   */\n  export type SizeCalculator<K, V> = (value: V, key: K) => Size\n\n  /**\n   * Options provided to the\n   * {@link OptionsBase.fetchMethod} function.\n   */\n  export interface FetcherOptions<K, V, FC = unknown> {\n    signal: AbortSignal\n    options: FetcherFetchOptions<K, V, FC>\n    /**\n     * Object provided in the {@link FetchOptions.context} option to\n     * {@link LRUCache#fetch}\n     */\n    context: FC\n  }\n\n  /**\n   * Occasionally, it may be useful to track the internal behavior of the\n   * cache, particularly for logging, debugging, or for behavior within the\n   * `fetchMethod`. To do this, you can pass a `status` object to the\n   * {@link LRUCache#fetch}, {@link LRUCache#get}, {@link LRUCache#set},\n   * {@link LRUCache#memo}, and {@link LRUCache#has} methods.\n   *\n   * The `status` option should be a plain JavaScript object. The following\n   * fields will be set on it appropriately, depending on the situation.\n   */\n  export interface Status<V> {\n    /**\n     * The status of a set() operation.\n     *\n     * - add: the item was not found in the cache, and was added\n     * - update: the item was in the cache, with the same value provided\n     * - replace: the item was in the cache, and replaced\n     * - miss: the item was not added to the cache for some reason\n     */\n    set?: 'add' | 'update' | 'replace' | 'miss'\n\n    /**\n     * the ttl stored for the item, or undefined if ttls are not used.\n     */\n    ttl?: Milliseconds\n\n    /**\n     * the start time for the item, or undefined if ttls are not used.\n     */\n    start?: Milliseconds\n\n    /**\n     * The timestamp used for TTL calculation\n     */\n    now?: Milliseconds\n\n    /**\n     * the remaining ttl for the item, or undefined if ttls are not used.\n     */\n    remainingTTL?: Milliseconds\n\n    /**\n     * The calculated size for the item, if sizes are used.\n     */\n    entrySize?: Size\n\n    /**\n     * The total calculated size of the cache, if sizes are used.\n     */\n    totalCalculatedSize?: Size\n\n    /**\n     * A flag indicating that the item was not stored, due to exceeding the\n     * {@link OptionsBase.maxEntrySize}\n     */\n    maxEntrySizeExceeded?: true\n\n    /**\n     * The old value, specified in the case of `set:'update'` or\n     * `set:'replace'`\n     */\n    oldValue?: V\n\n    /**\n     * The results of a {@link LRUCache#has} operation\n     *\n     * - hit: the item was found in the cache\n     * - stale: the item was found in the cache, but is stale\n     * - miss: the item was not found in the cache\n     */\n    has?: 'hit' | 'stale' | 'miss'\n\n    /**\n     * The status of a {@link LRUCache#fetch} operation.\n     * Note that this can change as the underlying fetch() moves through\n     * various states.\n     *\n     * - inflight: there is another fetch() for this key which is in process\n     * - get: there is no {@link OptionsBase.fetchMethod}, so\n     *   {@link LRUCache#get} was called.\n     * - miss: the item is not in cache, and will be fetched.\n     * - hit: the item is in the cache, and was resolved immediately.\n     * - stale: the item is in the cache, but stale.\n     * - refresh: the item is in the cache, and not stale, but\n     *   {@link FetchOptions.forceRefresh} was specified.\n     */\n    fetch?: 'get' | 'inflight' | 'miss' | 'hit' | 'stale' | 'refresh'\n\n    /**\n     * The {@link OptionsBase.fetchMethod} was called\n     */\n    fetchDispatched?: true\n\n    /**\n     * The cached value was updated after a successful call to\n     * {@link OptionsBase.fetchMethod}\n     */\n    fetchUpdated?: true\n\n    /**\n     * The reason for a fetch() rejection.  Either the error raised by the\n     * {@link OptionsBase.fetchMethod}, or the reason for an\n     * AbortSignal.\n     */\n    fetchError?: Error\n\n    /**\n     * The fetch received an abort signal\n     */\n    fetchAborted?: true\n\n    /**\n     * The abort signal received was ignored, and the fetch was allowed to\n     * continue.\n     */\n    fetchAbortIgnored?: true\n\n    /**\n     * The fetchMethod promise resolved successfully\n     */\n    fetchResolved?: true\n\n    /**\n     * The fetchMethod promise was rejected\n     */\n    fetchRejected?: true\n\n    /**\n     * The status of a {@link LRUCache#get} operation.\n     *\n     * - fetching: The item is currently being fetched.  If a previous value\n     *   is present and allowed, that will be returned.\n     * - stale: The item is in the cache, and is stale.\n     * - hit: the item is in the cache\n     * - miss: the item is not in the cache\n     */\n    get?: 'stale' | 'hit' | 'miss'\n\n    /**\n     * A fetch or get operation returned a stale value.\n     */\n    returnedStale?: true\n  }\n\n  /**\n   * options which override the options set in the LRUCache constructor\n   * when calling {@link LRUCache#fetch}.\n   *\n   * This is the union of {@link GetOptions} and {@link SetOptions}, plus\n   * {@link OptionsBase.noDeleteOnFetchRejection},\n   * {@link OptionsBase.allowStaleOnFetchRejection},\n   * {@link FetchOptions.forceRefresh}, and\n   * {@link FetcherOptions.context}\n   *\n   * Any of these may be modified in the {@link OptionsBase.fetchMethod}\n   * function, but the {@link GetOptions} fields will of course have no\n   * effect, as the {@link LRUCache#get} call already happened by the time\n   * the fetchMethod is called.\n   */\n  export interface FetcherFetchOptions<K, V, FC = unknown>\n    extends Pick<\n      OptionsBase<K, V, FC>,\n      | 'allowStale'\n      | 'updateAgeOnGet'\n      | 'noDeleteOnStaleGet'\n      | 'sizeCalculation'\n      | 'ttl'\n      | 'noDisposeOnSet'\n      | 'noUpdateTTL'\n      | 'noDeleteOnFetchRejection'\n      | 'allowStaleOnFetchRejection'\n      | 'ignoreFetchAbort'\n      | 'allowStaleOnFetchAbort'\n    > {\n    status?: Status<V>\n    size?: Size\n  }\n\n  /**\n   * Options that may be passed to the {@link LRUCache#fetch} method.\n   */\n  export interface FetchOptions<K, V, FC>\n    extends FetcherFetchOptions<K, V, FC> {\n    /**\n     * Set to true to force a re-load of the existing data, even if it\n     * is not yet stale.\n     */\n    forceRefresh?: boolean\n    /**\n     * Context provided to the {@link OptionsBase.fetchMethod} as\n     * the {@link FetcherOptions.context} param.\n     *\n     * If the FC type is specified as unknown (the default),\n     * undefined or void, then this is optional.  Otherwise, it will\n     * be required.\n     */\n    context?: FC\n    signal?: AbortSignal\n    status?: Status<V>\n  }\n  /**\n   * Options provided to {@link LRUCache#fetch} when the FC type is something\n   * other than `unknown`, `undefined`, or `void`\n   */\n  export interface FetchOptionsWithContext<K, V, FC>\n    extends FetchOptions<K, V, FC> {\n    context: FC\n  }\n  /**\n   * Options provided to {@link LRUCache#fetch} when the FC type is\n   * `undefined` or `void`\n   */\n  export interface FetchOptionsNoContext<K, V>\n    extends FetchOptions<K, V, undefined> {\n    context?: undefined\n  }\n\n  export interface MemoOptions<K, V, FC = unknown>\n    extends Pick<\n      OptionsBase<K, V, FC>,\n      | 'allowStale'\n      | 'updateAgeOnGet'\n      | 'noDeleteOnStaleGet'\n      | 'sizeCalculation'\n      | 'ttl'\n      | 'noDisposeOnSet'\n      | 'noUpdateTTL'\n      | 'noDeleteOnFetchRejection'\n      | 'allowStaleOnFetchRejection'\n      | 'ignoreFetchAbort'\n      | 'allowStaleOnFetchAbort'\n    > {\n    /**\n     * Set to true to force a re-load of the existing data, even if it\n     * is not yet stale.\n     */\n    forceRefresh?: boolean\n    /**\n     * Context provided to the {@link OptionsBase.memoMethod} as\n     * the {@link MemoizerOptions.context} param.\n     *\n     * If the FC type is specified as unknown (the default),\n     * undefined or void, then this is optional.  Otherwise, it will\n     * be required.\n     */\n    context?: FC\n    status?: Status<V>\n  }\n  /**\n   * Options provided to {@link LRUCache#memo} when the FC type is something\n   * other than `unknown`, `undefined`, or `void`\n   */\n  export interface MemoOptionsWithContext<K, V, FC>\n    extends MemoOptions<K, V, FC> {\n    context: FC\n  }\n  /**\n   * Options provided to {@link LRUCache#memo} when the FC type is\n   * `undefined` or `void`\n   */\n  export interface MemoOptionsNoContext<K, V>\n    extends MemoOptions<K, V, undefined> {\n    context?: undefined\n  }\n\n  /**\n   * Options provided to the\n   * {@link OptionsBase.memoMethod} function.\n   */\n  export interface MemoizerOptions<K, V, FC = unknown> {\n    options: MemoizerMemoOptions<K, V, FC>\n    /**\n     * Object provided in the {@link MemoOptions.context} option to\n     * {@link LRUCache#memo}\n     */\n    context: FC\n  }\n\n  /**\n   * options which override the options set in the LRUCache constructor\n   * when calling {@link LRUCache#memo}.\n   *\n   * This is the union of {@link GetOptions} and {@link SetOptions}, plus\n   * {@link MemoOptions.forceRefresh}, and\n   * {@link MemoOptions.context}\n   *\n   * Any of these may be modified in the {@link OptionsBase.memoMethod}\n   * function, but the {@link GetOptions} fields will of course have no\n   * effect, as the {@link LRUCache#get} call already happened by the time\n   * the memoMethod is called.\n   */\n  export interface MemoizerMemoOptions<K, V, FC = unknown>\n    extends Pick<\n      OptionsBase<K, V, FC>,\n      | 'allowStale'\n      | 'updateAgeOnGet'\n      | 'noDeleteOnStaleGet'\n      | 'sizeCalculation'\n      | 'ttl'\n      | 'noDisposeOnSet'\n      | 'noUpdateTTL'\n    > {\n    status?: Status<V>\n    size?: Size\n    start?: Milliseconds\n  }\n\n  /**\n   * Options that may be passed to the {@link LRUCache#has} method.\n   */\n  export interface HasOptions<K, V, FC>\n    extends Pick<OptionsBase<K, V, FC>, 'updateAgeOnHas'> {\n    status?: Status<V>\n  }\n\n  /**\n   * Options that may be passed to the {@link LRUCache#get} method.\n   */\n  export interface GetOptions<K, V, FC>\n    extends Pick<\n      OptionsBase<K, V, FC>,\n      'allowStale' | 'updateAgeOnGet' | 'noDeleteOnStaleGet'\n    > {\n    status?: Status<V>\n  }\n\n  /**\n   * Options that may be passed to the {@link LRUCache#peek} method.\n   */\n  export interface PeekOptions<K, V, FC>\n    extends Pick<OptionsBase<K, V, FC>, 'allowStale'> {}\n\n  /**\n   * Options that may be passed to the {@link LRUCache#set} method.\n   */\n  export interface SetOptions<K, V, FC>\n    extends Pick<\n      OptionsBase<K, V, FC>,\n      'sizeCalculation' | 'ttl' | 'noDisposeOnSet' | 'noUpdateTTL'\n    > {\n    /**\n     * If size tracking is enabled, then setting an explicit size\n     * in the {@link LRUCache#set} call will prevent calling the\n     * {@link OptionsBase.sizeCalculation} function.\n     */\n    size?: Size\n    /**\n     * If TTL tracking is enabled, then setting an explicit start\n     * time in the {@link LRUCache#set} call will override the\n     * default time from `performance.now()` or `Date.now()`.\n     *\n     * Note that it must be a valid value for whichever time-tracking\n     * method is in use.\n     */\n    start?: Milliseconds\n    status?: Status<V>\n  }\n\n  /**\n   * The type signature for the {@link OptionsBase.fetchMethod} option.\n   */\n  export type Fetcher<K, V, FC = unknown> = (\n    key: K,\n    staleValue: V | undefined,\n    options: FetcherOptions<K, V, FC>\n  ) => Promise<V | undefined | void> | V | undefined | void\n\n  /**\n   * the type signature for the {@link OptionsBase.memoMethod} option.\n   */\n  export type Memoizer<K, V, FC = unknown> = (\n    key: K,\n    staleValue: V | undefined,\n    options: MemoizerOptions<K, V, FC>\n  ) => V\n\n  /**\n   * Options which may be passed to the {@link LRUCache} constructor.\n   *\n   * Most of these may be overridden in the various options that use\n   * them.\n   *\n   * Despite all being technically optional, the constructor requires that\n   * a cache is at minimum limited by one or more of {@link OptionsBase.max},\n   * {@link OptionsBase.ttl}, or {@link OptionsBase.maxSize}.\n   *\n   * If {@link OptionsBase.ttl} is used alone, then it is strongly advised\n   * (and in fact required by the type definitions here) that the cache\n   * also set {@link OptionsBase.ttlAutopurge}, to prevent potentially\n   * unbounded storage.\n   *\n   * All options are also available on the {@link LRUCache} instance, making\n   * it safe to pass an LRUCache instance as the options argumemnt to\n   * make another empty cache of the same type.\n   *\n   * Some options are marked as read-only, because changing them after\n   * instantiation is not safe. Changing any of the other options will of\n   * course only have an effect on subsequent method calls.\n   */\n  export interface OptionsBase<K, V, FC> {\n    /**\n     * The maximum number of items to store in the cache before evicting\n     * old entries. This is read-only on the {@link LRUCache} instance,\n     * and may not be overridden.\n     *\n     * If set, then storage space will be pre-allocated at construction\n     * time, and the cache will perform significantly faster.\n     *\n     * Note that significantly fewer items may be stored, if\n     * {@link OptionsBase.maxSize} and/or {@link OptionsBase.ttl} are also\n     * set.\n     *\n     * **It is strongly recommended to set a `max` to prevent unbounded growth\n     * of the cache.**\n     */\n    max?: Count\n\n    /**\n     * Max time in milliseconds for items to live in cache before they are\n     * considered stale.  Note that stale items are NOT preemptively removed by\n     * default, and MAY live in the cache, contributing to its LRU max, long\n     * after they have expired, unless {@link OptionsBase.ttlAutopurge} is\n     * set.\n     *\n     * If set to `0` (the default value), then that means \"do not track\n     * TTL\", not \"expire immediately\".\n     *\n     * Also, as this cache is optimized for LRU/MRU operations, some of\n     * the staleness/TTL checks will reduce performance, as they will incur\n     * overhead by deleting items.\n     *\n     * This is not primarily a TTL cache, and does not make strong TTL\n     * guarantees. There is no pre-emptive pruning of expired items, but you\n     * _may_ set a TTL on the cache, and it will treat expired items as missing\n     * when they are fetched, and delete them.\n     *\n     * Optional, but must be a non-negative integer in ms if specified.\n     *\n     * This may be overridden by passing an options object to `cache.set()`.\n     *\n     * At least one of `max`, `maxSize`, or `TTL` is required. This must be a\n     * positive integer if set.\n     *\n     * Even if ttl tracking is enabled, **it is strongly recommended to set a\n     * `max` to prevent unbounded growth of the cache.**\n     *\n     * If ttl tracking is enabled, and `max` and `maxSize` are not set,\n     * and `ttlAutopurge` is not set, then a warning will be emitted\n     * cautioning about the potential for unbounded memory consumption.\n     * (The TypeScript definitions will also discourage this.)\n     */\n    ttl?: Milliseconds\n\n    /**\n     * Minimum amount of time in ms in which to check for staleness.\n     * Defaults to 1, which means that the current time is checked\n     * at most once per millisecond.\n     *\n     * Set to 0 to check the current time every time staleness is tested.\n     * (This reduces performance, and is theoretically unnecessary.)\n     *\n     * Setting this to a higher value will improve performance somewhat\n     * while using ttl tracking, albeit at the expense of keeping stale\n     * items around a bit longer than their TTLs would indicate.\n     *\n     * @default 1\n     */\n    ttlResolution?: Milliseconds\n\n    /**\n     * Preemptively remove stale items from the cache.\n     *\n     * Note that this may *significantly* degrade performance, especially if\n     * the cache is storing a large number of items. It is almost always best\n     * to just leave the stale items in the cache, and let them fall out as new\n     * items are added.\n     *\n     * Note that this means that {@link OptionsBase.allowStale} is a bit\n     * pointless, as stale items will be deleted almost as soon as they\n     * expire.\n     *\n     * Use with caution!\n     */\n    ttlAutopurge?: boolean\n\n    /**\n     * When using time-expiring entries with `ttl`, setting this to `true` will\n     * make each item's age reset to 0 whenever it is retrieved from cache with\n     * {@link LRUCache#get}, causing it to not expire. (It can still fall out\n     * of cache based on recency of use, of course.)\n     *\n     * Has no effect if {@link OptionsBase.ttl} is not set.\n     *\n     * This may be overridden by passing an options object to `cache.get()`.\n     */\n    updateAgeOnGet?: boolean\n\n    /**\n     * When using time-expiring entries with `ttl`, setting this to `true` will\n     * make each item's age reset to 0 whenever its presence in the cache is\n     * checked with {@link LRUCache#has}, causing it to not expire. (It can\n     * still fall out of cache based on recency of use, of course.)\n     *\n     * Has no effect if {@link OptionsBase.ttl} is not set.\n     */\n    updateAgeOnHas?: boolean\n\n    /**\n     * Allow {@link LRUCache#get} and {@link LRUCache#fetch} calls to return\n     * stale data, if available.\n     *\n     * By default, if you set `ttl`, stale items will only be deleted from the\n     * cache when you `get(key)`. That is, it's not preemptively pruning items,\n     * unless {@link OptionsBase.ttlAutopurge} is set.\n     *\n     * If you set `allowStale:true`, it'll return the stale value *as well as*\n     * deleting it. If you don't set this, then it'll return `undefined` when\n     * you try to get a stale entry.\n     *\n     * Note that when a stale entry is fetched, _even if it is returned due to\n     * `allowStale` being set_, it is removed from the cache immediately. You\n     * can suppress this behavior by setting\n     * {@link OptionsBase.noDeleteOnStaleGet}, either in the constructor, or in\n     * the options provided to {@link LRUCache#get}.\n     *\n     * This may be overridden by passing an options object to `cache.get()`.\n     * The `cache.has()` method will always return `false` for stale items.\n     *\n     * Only relevant if a ttl is set.\n     */\n    allowStale?: boolean\n\n    /**\n     * Function that is called on items when they are dropped from the\n     * cache, as `dispose(value, key, reason)`.\n     *\n     * This can be handy if you want to close file descriptors or do\n     * other cleanup tasks when items are no longer stored in the cache.\n     *\n     * **NOTE**: It is called _before_ the item has been fully removed\n     * from the cache, so if you want to put it right back in, you need\n     * to wait until the next tick. If you try to add it back in during\n     * the `dispose()` function call, it will break things in subtle and\n     * weird ways.\n     *\n     * Unlike several other options, this may _not_ be overridden by\n     * passing an option to `set()`, for performance reasons.\n     *\n     * The `reason` will be one of the following strings, corresponding\n     * to the reason for the item's deletion:\n     *\n     * - `evict` Item was evicted to make space for a new addition\n     * - `set` Item was overwritten by a new value\n     * - `expire` Item expired its TTL\n     * - `fetch` Item was deleted due to a failed or aborted fetch, or a\n     *   fetchMethod returning `undefined.\n     * - `delete` Item was removed by explicit `cache.delete(key)`,\n     *   `cache.clear()`, or `cache.set(key, undefined)`.\n     */\n    dispose?: Disposer<K, V>\n\n    /**\n     * Function that is called when new items are inserted into the cache,\n     * as `onInsert(value, key, reason)`.\n     *\n     * This can be useful if you need to perform actions when an item is\n     * added, such as logging or tracking insertions.\n     *\n     * Unlike some other options, this may _not_ be overridden by passing\n     * an option to `set()`, for performance and consistency reasons.\n     */\n    onInsert?: Inserter<K, V>\n\n    /**\n     * The same as {@link OptionsBase.dispose}, but called *after* the entry\n     * is completely removed and the cache is once again in a clean state.\n     *\n     * It is safe to add an item right back into the cache at this point.\n     * However, note that it is *very* easy to inadvertently create infinite\n     * recursion this way.\n     */\n    disposeAfter?: Disposer<K, V>\n\n    /**\n     * Set to true to suppress calling the\n     * {@link OptionsBase.dispose} function if the entry key is\n     * still accessible within the cache.\n     *\n     * This may be overridden by passing an options object to\n     * {@link LRUCache#set}.\n     *\n     * Only relevant if `dispose` or `disposeAfter` are set.\n     */\n    noDisposeOnSet?: boolean\n\n    /**\n     * Boolean flag to tell the cache to not update the TTL when setting a new\n     * value for an existing key (ie, when updating a value rather than\n     * inserting a new value).  Note that the TTL value is _always_ set (if\n     * provided) when adding a new entry into the cache.\n     *\n     * Has no effect if a {@link OptionsBase.ttl} is not set.\n     *\n     * May be passed as an option to {@link LRUCache#set}.\n     */\n    noUpdateTTL?: boolean\n\n    /**\n     * Set to a positive integer to track the sizes of items added to the\n     * cache, and automatically evict items in order to stay below this size.\n     * Note that this may result in fewer than `max` items being stored.\n     *\n     * Attempting to add an item to the cache whose calculated size is greater\n     * that this amount will be a no-op. The item will not be cached, and no\n     * other items will be evicted.\n     *\n     * Optional, must be a positive integer if provided.\n     *\n     * Sets `maxEntrySize` to the same value, unless a different value is\n     * provided for `maxEntrySize`.\n     *\n     * At least one of `max`, `maxSize`, or `TTL` is required. This must be a\n     * positive integer if set.\n     *\n     * Even if size tracking is enabled, **it is strongly recommended to set a\n     * `max` to prevent unbounded growth of the cache.**\n     *\n     * Note also that size tracking can negatively impact performance,\n     * though for most cases, only minimally.\n     */\n    maxSize?: Size\n\n    /**\n     * The maximum allowed size for any single item in the cache.\n     *\n     * If a larger item is passed to {@link LRUCache#set} or returned by a\n     * {@link OptionsBase.fetchMethod} or {@link OptionsBase.memoMethod}, then\n     * it will not be stored in the cache.\n     *\n     * Attempting to add an item whose calculated size is greater than\n     * this amount will not cache the item or evict any old items, but\n     * WILL delete an existing value if one is already present.\n     *\n     * Optional, must be a positive integer if provided. Defaults to\n     * the value of `maxSize` if provided.\n     */\n    maxEntrySize?: Size\n\n    /**\n     * A function that returns a number indicating the item's size.\n     *\n     * Requires {@link OptionsBase.maxSize} to be set.\n     *\n     * If not provided, and {@link OptionsBase.maxSize} or\n     * {@link OptionsBase.maxEntrySize} are set, then all\n     * {@link LRUCache#set} calls **must** provide an explicit\n     * {@link SetOptions.size} or sizeCalculation param.\n     */\n    sizeCalculation?: SizeCalculator<K, V>\n\n    /**\n     * Method that provides the implementation for {@link LRUCache#fetch}\n     *\n     * ```ts\n     * fetchMethod(key, staleValue, { signal, options, context })\n     * ```\n     *\n     * If `fetchMethod` is not provided, then `cache.fetch(key)` is equivalent\n     * to `Promise.resolve(cache.get(key))`.\n     *\n     * If at any time, `signal.aborted` is set to `true`, or if the\n     * `signal.onabort` method is called, or if it emits an `'abort'` event\n     * which you can listen to with `addEventListener`, then that means that\n     * the fetch should be abandoned. This may be passed along to async\n     * functions aware of AbortController/AbortSignal behavior.\n     *\n     * The `fetchMethod` should **only** return `undefined` or a Promise\n     * resolving to `undefined` if the AbortController signaled an `abort`\n     * event. In all other cases, it should return or resolve to a value\n     * suitable for adding to the cache.\n     *\n     * The `options` object is a union of the options that may be provided to\n     * `set()` and `get()`. If they are modified, then that will result in\n     * modifying the settings to `cache.set()` when the value is resolved, and\n     * in the case of\n     * {@link OptionsBase.noDeleteOnFetchRejection} and\n     * {@link OptionsBase.allowStaleOnFetchRejection}, the handling of\n     * `fetchMethod` failures.\n     *\n     * For example, a DNS cache may update the TTL based on the value returned\n     * from a remote DNS server by changing `options.ttl` in the `fetchMethod`.\n     */\n    fetchMethod?: Fetcher<K, V, FC>\n\n    /**\n     * Method that provides the implementation for {@link LRUCache#memo}\n     */\n    memoMethod?: Memoizer<K, V, FC>\n\n    /**\n     * Set to true to suppress the deletion of stale data when a\n     * {@link OptionsBase.fetchMethod} returns a rejected promise.\n     */\n    noDeleteOnFetchRejection?: boolean\n\n    /**\n     * Do not delete stale items when they are retrieved with\n     * {@link LRUCache#get}.\n     *\n     * Note that the `get` return value will still be `undefined`\n     * unless {@link OptionsBase.allowStale} is true.\n     *\n     * When using time-expiring entries with `ttl`, by default stale\n     * items will be removed from the cache when the key is accessed\n     * with `cache.get()`.\n     *\n     * Setting this option will cause stale items to remain in the cache, until\n     * they are explicitly deleted with `cache.delete(key)`, or retrieved with\n     * `noDeleteOnStaleGet` set to `false`.\n     *\n     * This may be overridden by passing an options object to `cache.get()`.\n     *\n     * Only relevant if a ttl is used.\n     */\n    noDeleteOnStaleGet?: boolean\n\n    /**\n     * Set to true to allow returning stale data when a\n     * {@link OptionsBase.fetchMethod} throws an error or returns a rejected\n     * promise.\n     *\n     * This differs from using {@link OptionsBase.allowStale} in that stale\n     * data will ONLY be returned in the case that the {@link LRUCache#fetch}\n     * fails, not any other times.\n     *\n     * If a `fetchMethod` fails, and there is no stale value available, the\n     * `fetch()` will resolve to `undefined`. Ie, all `fetchMethod` errors are\n     * suppressed.\n     *\n     * Implies `noDeleteOnFetchRejection`.\n     *\n     * This may be set in calls to `fetch()`, or defaulted on the constructor,\n     * or overridden by modifying the options object in the `fetchMethod`.\n     */\n    allowStaleOnFetchRejection?: boolean\n\n    /**\n     * Set to true to return a stale value from the cache when the\n     * `AbortSignal` passed to the {@link OptionsBase.fetchMethod} dispatches\n     * an `'abort'` event, whether user-triggered, or due to internal cache\n     * behavior.\n     *\n     * Unless {@link OptionsBase.ignoreFetchAbort} is also set, the underlying\n     * {@link OptionsBase.fetchMethod} will still be considered canceled, and\n     * any value it returns will be ignored and not cached.\n     *\n     * Caveat: since fetches are aborted when a new value is explicitly\n     * set in the cache, this can lead to fetch returning a stale value,\n     * since that was the fallback value _at the moment the `fetch()` was\n     * initiated_, even though the new updated value is now present in\n     * the cache.\n     *\n     * For example:\n     *\n     * ```ts\n     * const cache = new LRUCache<string, any>({\n     *   ttl: 100,\n     *   fetchMethod: async (url, oldValue, { signal }) =>  {\n     *     const res = await fetch(url, { signal })\n     *     return await res.json()\n     *   }\n     * })\n     * cache.set('https://example.com/', { some: 'data' })\n     * // 100ms go by...\n     * const result = cache.fetch('https://example.com/')\n     * cache.set('https://example.com/', { other: 'thing' })\n     * console.log(await result) // { some: 'data' }\n     * console.log(cache.get('https://example.com/')) // { other: 'thing' }\n     * ```\n     */\n    allowStaleOnFetchAbort?: boolean\n\n    /**\n     * Set to true to ignore the `abort` event emitted by the `AbortSignal`\n     * object passed to {@link OptionsBase.fetchMethod}, and still cache the\n     * resulting resolution value, as long as it is not `undefined`.\n     *\n     * When used on its own, this means aborted {@link LRUCache#fetch} calls\n     * are not immediately resolved or rejected when they are aborted, and\n     * instead take the full time to await.\n     *\n     * When used with {@link OptionsBase.allowStaleOnFetchAbort}, aborted\n     * {@link LRUCache#fetch} calls will resolve immediately to their stale\n     * cached value or `undefined`, and will continue to process and eventually\n     * update the cache when they resolve, as long as the resulting value is\n     * not `undefined`, thus supporting a \"return stale on timeout while\n     * refreshing\" mechanism by passing `AbortSignal.timeout(n)` as the signal.\n     *\n     * For example:\n     *\n     * ```ts\n     * const c = new LRUCache({\n     *   ttl: 100,\n     *   ignoreFetchAbort: true,\n     *   allowStaleOnFetchAbort: true,\n     *   fetchMethod: async (key, oldValue, { signal }) => {\n     *     // note: do NOT pass the signal to fetch()!\n     *     // let's say this fetch can take a long time.\n     *     const res = await fetch(`https://slow-backend-server/${key}`)\n     *     return await res.json()\n     *   },\n     * })\n     *\n     * // this will return the stale value after 100ms, while still\n     * // updating in the background for next time.\n     * const val = await c.fetch('key', { signal: AbortSignal.timeout(100) })\n     * ```\n     *\n     * **Note**: regardless of this setting, an `abort` event _is still\n     * emitted on the `AbortSignal` object_, so may result in invalid results\n     * when passed to other underlying APIs that use AbortSignals.\n     *\n     * This may be overridden in the {@link OptionsBase.fetchMethod} or the\n     * call to {@link LRUCache#fetch}.\n     */\n    ignoreFetchAbort?: boolean\n  }\n\n  export interface OptionsMaxLimit<K, V, FC>\n    extends OptionsBase<K, V, FC> {\n    max: Count\n  }\n  export interface OptionsTTLLimit<K, V, FC>\n    extends OptionsBase<K, V, FC> {\n    ttl: Milliseconds\n    ttlAutopurge: boolean\n  }\n  export interface OptionsSizeLimit<K, V, FC>\n    extends OptionsBase<K, V, FC> {\n    maxSize: Size\n  }\n\n  /**\n   * The valid safe options for the {@link LRUCache} constructor\n   */\n  export type Options<K, V, FC> =\n    | OptionsMaxLimit<K, V, FC>\n    | OptionsSizeLimit<K, V, FC>\n    | OptionsTTLLimit<K, V, FC>\n\n  /**\n   * Entry objects used by {@link LRUCache#load} and {@link LRUCache#dump},\n   * and returned by {@link LRUCache#info}.\n   */\n  export interface Entry<V> {\n    value: V\n    ttl?: Milliseconds\n    size?: Size\n    start?: Milliseconds\n  }\n}\n\n/**\n * Default export, the thing you're using this module to get.\n *\n * The `K` and `V` types define the key and value types, respectively. The\n * optional `FC` type defines the type of the `context` object passed to\n * `cache.fetch()` and `cache.memo()`.\n *\n * Keys and values **must not** be `null` or `undefined`.\n *\n * All properties from the options object (with the exception of `max`,\n * `maxSize`, `fetchMethod`, `memoMethod`, `dispose` and `disposeAfter`) are\n * added as normal public members. (The listed options are read-only getters.)\n *\n * Changing any of these will alter the defaults for subsequent method calls.\n */\nexport class LRUCache<K extends {}, V extends {}, FC = unknown> {\n  // options that cannot be changed without disaster\n  readonly #max: LRUCache.Count\n  readonly #maxSize: LRUCache.Size\n  readonly #dispose?: LRUCache.Disposer<K, V>\n  readonly #onInsert?: LRUCache.Inserter<K, V>\n  readonly #disposeAfter?: LRUCache.Disposer<K, V>\n  readonly #fetchMethod?: LRUCache.Fetcher<K, V, FC>\n  readonly #memoMethod?: LRUCache.Memoizer<K, V, FC>\n\n  /**\n   * {@link LRUCache.OptionsBase.ttl}\n   */\n  ttl: LRUCache.Milliseconds\n\n  /**\n   * {@link LRUCache.OptionsBase.ttlResolution}\n   */\n  ttlResolution: LRUCache.Milliseconds\n  /**\n   * {@link LRUCache.OptionsBase.ttlAutopurge}\n   */\n  ttlAutopurge: boolean\n  /**\n   * {@link LRUCache.OptionsBase.updateAgeOnGet}\n   */\n  updateAgeOnGet: boolean\n  /**\n   * {@link LRUCache.OptionsBase.updateAgeOnHas}\n   */\n  updateAgeOnHas: boolean\n  /**\n   * {@link LRUCache.OptionsBase.allowStale}\n   */\n  allowStale: boolean\n\n  /**\n   * {@link LRUCache.OptionsBase.noDisposeOnSet}\n   */\n  noDisposeOnSet: boolean\n  /**\n   * {@link LRUCache.OptionsBase.noUpdateTTL}\n   */\n  noUpdateTTL: boolean\n  /**\n   * {@link LRUCache.OptionsBase.maxEntrySize}\n   */\n  maxEntrySize: LRUCache.Size\n  /**\n   * {@link LRUCache.OptionsBase.sizeCalculation}\n   */\n  sizeCalculation?: LRUCache.SizeCalculator<K, V>\n  /**\n   * {@link LRUCache.OptionsBase.noDeleteOnFetchRejection}\n   */\n  noDeleteOnFetchRejection: boolean\n  /**\n   * {@link LRUCache.OptionsBase.noDeleteOnStaleGet}\n   */\n  noDeleteOnStaleGet: boolean\n  /**\n   * {@link LRUCache.OptionsBase.allowStaleOnFetchAbort}\n   */\n  allowStaleOnFetchAbort: boolean\n  /**\n   * {@link LRUCache.OptionsBase.allowStaleOnFetchRejection}\n   */\n  allowStaleOnFetchRejection: boolean\n  /**\n   * {@link LRUCache.OptionsBase.ignoreFetchAbort}\n   */\n  ignoreFetchAbort: boolean\n\n  // computed properties\n  #size: LRUCache.Count\n  #calculatedSize: LRUCache.Size\n  #keyMap: Map<K, Index>\n  #keyList: (K | undefined)[]\n  #valList: (V | BackgroundFetch<V> | undefined)[]\n  #next: NumberArray\n  #prev: NumberArray\n  #head: Index\n  #tail: Index\n  #free: StackLike\n  #disposed?: DisposeTask<K, V>[]\n  #sizes?: ZeroArray\n  #starts?: ZeroArray\n  #ttls?: ZeroArray\n\n  #hasDispose: boolean\n  #hasFetchMethod: boolean\n  #hasDisposeAfter: boolean\n  #hasOnInsert: boolean\n\n  /**\n   * Do not call this method unless you need to inspect the\n   * inner workings of the cache.  If anything returned by this\n   * object is modified in any way, strange breakage may occur.\n   *\n   * These fields are private for a reason!\n   *\n   * @internal\n   */\n  static unsafeExposeInternals<\n    K extends {},\n    V extends {},\n    FC extends unknown = unknown\n  >(c: LRUCache<K, V, FC>) {\n    return {\n      // properties\n      starts: c.#starts,\n      ttls: c.#ttls,\n      sizes: c.#sizes,\n      keyMap: c.#keyMap as Map<K, number>,\n      keyList: c.#keyList,\n      valList: c.#valList,\n      next: c.#next,\n      prev: c.#prev,\n      get head() {\n        return c.#head\n      },\n      get tail() {\n        return c.#tail\n      },\n      free: c.#free,\n      // methods\n      isBackgroundFetch: (p: any) => c.#isBackgroundFetch(p),\n      backgroundFetch: (\n        k: K,\n        index: number | undefined,\n        options: LRUCache.FetchOptions<K, V, FC>,\n        context: any\n      ): BackgroundFetch<V> =>\n        c.#backgroundFetch(\n          k,\n          index as Index | undefined,\n          options,\n          context\n        ),\n      moveToTail: (index: number): void =>\n        c.#moveToTail(index as Index),\n      indexes: (options?: { allowStale: boolean }) =>\n        c.#indexes(options),\n      rindexes: (options?: { allowStale: boolean }) =>\n        c.#rindexes(options),\n      isStale: (index: number | undefined) =>\n        c.#isStale(index as Index),\n    }\n  }\n\n  // Protected read-only members\n\n  /**\n   * {@link LRUCache.OptionsBase.max} (read-only)\n   */\n  get max(): LRUCache.Count {\n    return this.#max\n  }\n  /**\n   * {@link LRUCache.OptionsBase.maxSize} (read-only)\n   */\n  get maxSize(): LRUCache.Count {\n    return this.#maxSize\n  }\n  /**\n   * The total computed size of items in the cache (read-only)\n   */\n  get calculatedSize(): LRUCache.Size {\n    return this.#calculatedSize\n  }\n  /**\n   * The number of items stored in the cache (read-only)\n   */\n  get size(): LRUCache.Count {\n    return this.#size\n  }\n  /**\n   * {@link LRUCache.OptionsBase.fetchMethod} (read-only)\n   */\n  get fetchMethod(): LRUCache.Fetcher<K, V, FC> | undefined {\n    return this.#fetchMethod\n  }\n  get memoMethod(): LRUCache.Memoizer<K, V, FC> | undefined {\n    return this.#memoMethod\n  }\n  /**\n   * {@link LRUCache.OptionsBase.dispose} (read-only)\n   */\n  get dispose() {\n    return this.#dispose\n  }\n  /**\n   * {@link LRUCache.OptionsBase.onInsert} (read-only)\n   */\n  get onInsert() {\n    return this.#onInsert\n  }\n  /**\n   * {@link LRUCache.OptionsBase.disposeAfter} (read-only)\n   */\n  get disposeAfter() {\n    return this.#disposeAfter\n  }\n\n  constructor(\n    options: LRUCache.Options<K, V, FC> | LRUCache<K, V, FC>\n  ) {\n    const {\n      max = 0,\n      ttl,\n      ttlResolution = 1,\n      ttlAutopurge,\n      updateAgeOnGet,\n      updateAgeOnHas,\n      allowStale,\n      dispose,\n      onInsert,\n      disposeAfter,\n      noDisposeOnSet,\n      noUpdateTTL,\n      maxSize = 0,\n      maxEntrySize = 0,\n      sizeCalculation,\n      fetchMethod,\n      memoMethod,\n      noDeleteOnFetchRejection,\n      noDeleteOnStaleGet,\n      allowStaleOnFetchRejection,\n      allowStaleOnFetchAbort,\n      ignoreFetchAbort,\n    } = options\n\n    if (max !== 0 && !isPosInt(max)) {\n      throw new TypeError('max option must be a nonnegative integer')\n    }\n\n    const UintArray = max ? getUintArray(max) : Array\n    if (!UintArray) {\n      throw new Error('invalid max value: ' + max)\n    }\n\n    this.#max = max\n    this.#maxSize = maxSize\n    this.maxEntrySize = maxEntrySize || this.#maxSize\n    this.sizeCalculation = sizeCalculation\n    if (this.sizeCalculation) {\n      if (!this.#maxSize && !this.maxEntrySize) {\n        throw new TypeError(\n          'cannot set sizeCalculation without setting maxSize or maxEntrySize'\n        )\n      }\n      if (typeof this.sizeCalculation !== 'function') {\n        throw new TypeError('sizeCalculation set to non-function')\n      }\n    }\n\n    if (\n      memoMethod !== undefined &&\n      typeof memoMethod !== 'function'\n    ) {\n      throw new TypeError('memoMethod must be a function if defined')\n    }\n    this.#memoMethod = memoMethod\n\n    if (\n      fetchMethod !== undefined &&\n      typeof fetchMethod !== 'function'\n    ) {\n      throw new TypeError(\n        'fetchMethod must be a function if specified'\n      )\n    }\n    this.#fetchMethod = fetchMethod\n    this.#hasFetchMethod = !!fetchMethod\n\n    this.#keyMap = new Map()\n    this.#keyList = new Array(max).fill(undefined)\n    this.#valList = new Array(max).fill(undefined)\n    this.#next = new UintArray(max)\n    this.#prev = new UintArray(max)\n    this.#head = 0 as Index\n    this.#tail = 0 as Index\n    this.#free = Stack.create(max)\n    this.#size = 0\n    this.#calculatedSize = 0\n\n    if (typeof dispose === 'function') {\n      this.#dispose = dispose\n    }\n    if (typeof onInsert === 'function') {\n      this.#onInsert = onInsert\n    }\n    if (typeof disposeAfter === 'function') {\n      this.#disposeAfter = disposeAfter\n      this.#disposed = []\n    } else {\n      this.#disposeAfter = undefined\n      this.#disposed = undefined\n    }\n    this.#hasDispose = !!this.#dispose\n    this.#hasOnInsert = !!this.#onInsert\n    this.#hasDisposeAfter = !!this.#disposeAfter\n\n    this.noDisposeOnSet = !!noDisposeOnSet\n    this.noUpdateTTL = !!noUpdateTTL\n    this.noDeleteOnFetchRejection = !!noDeleteOnFetchRejection\n    this.allowStaleOnFetchRejection = !!allowStaleOnFetchRejection\n    this.allowStaleOnFetchAbort = !!allowStaleOnFetchAbort\n    this.ignoreFetchAbort = !!ignoreFetchAbort\n\n    // NB: maxEntrySize is set to maxSize if it's set\n    if (this.maxEntrySize !== 0) {\n      if (this.#maxSize !== 0) {\n        if (!isPosInt(this.#maxSize)) {\n          throw new TypeError(\n            'maxSize must be a positive integer if specified'\n          )\n        }\n      }\n      if (!isPosInt(this.maxEntrySize)) {\n        throw new TypeError(\n          'maxEntrySize must be a positive integer if specified'\n        )\n      }\n      this.#initializeSizeTracking()\n    }\n\n    this.allowStale = !!allowStale\n    this.noDeleteOnStaleGet = !!noDeleteOnStaleGet\n    this.updateAgeOnGet = !!updateAgeOnGet\n    this.updateAgeOnHas = !!updateAgeOnHas\n    this.ttlResolution =\n      isPosInt(ttlResolution) || ttlResolution === 0\n        ? ttlResolution\n        : 1\n    this.ttlAutopurge = !!ttlAutopurge\n    this.ttl = ttl || 0\n    if (this.ttl) {\n      if (!isPosInt(this.ttl)) {\n        throw new TypeError(\n          'ttl must be a positive integer if specified'\n        )\n      }\n      this.#initializeTTLTracking()\n    }\n\n    // do not allow completely unbounded caches\n    if (this.#max === 0 && this.ttl === 0 && this.#maxSize === 0) {\n      throw new TypeError(\n        'At least one of max, maxSize, or ttl is required'\n      )\n    }\n    if (!this.ttlAutopurge && !this.#max && !this.#maxSize) {\n      const code = 'LRU_CACHE_UNBOUNDED'\n      if (shouldWarn(code)) {\n        warned.add(code)\n        const msg =\n          'TTL caching without ttlAutopurge, max, or maxSize can ' +\n          'result in unbounded memory consumption.'\n        emitWarning(msg, 'UnboundedCacheWarning', code, LRUCache)\n      }\n    }\n  }\n\n  /**\n   * Return the number of ms left in the item's TTL. If item is not in cache,\n   * returns `0`. Returns `Infinity` if item is in cache without a defined TTL.\n   */\n  getRemainingTTL(key: K) {\n    return this.#keyMap.has(key) ? Infinity : 0\n  }\n\n  #initializeTTLTracking() {\n    const ttls = new ZeroArray(this.#max)\n    const starts = new ZeroArray(this.#max)\n    this.#ttls = ttls\n    this.#starts = starts\n\n    this.#setItemTTL = (index, ttl, start = perf.now()) => {\n      starts[index] = ttl !== 0 ? start : 0\n      ttls[index] = ttl\n      if (ttl !== 0 && this.ttlAutopurge) {\n        const t = setTimeout(() => {\n          if (this.#isStale(index)) {\n            this.#delete(this.#keyList[index] as K, 'expire')\n          }\n        }, ttl + 1)\n        // unref() not supported on all platforms\n        /* c8 ignore start */\n        if (t.unref) {\n          t.unref()\n        }\n        /* c8 ignore stop */\n      }\n    }\n\n    this.#updateItemAge = index => {\n      starts[index] = ttls[index] !== 0 ? perf.now() : 0\n    }\n\n    this.#statusTTL = (status, index) => {\n      if (ttls[index]) {\n        const ttl = ttls[index]\n        const start = starts[index]\n        /* c8 ignore next */\n        if (!ttl || !start) return\n        status.ttl = ttl\n        status.start = start\n        status.now = cachedNow || getNow()\n        const age = status.now - start\n        status.remainingTTL = ttl - age\n      }\n    }\n\n    // debounce calls to perf.now() to 1s so we're not hitting\n    // that costly call repeatedly.\n    let cachedNow = 0\n    const getNow = () => {\n      const n = perf.now()\n      if (this.ttlResolution > 0) {\n        cachedNow = n\n        const t = setTimeout(\n          () => (cachedNow = 0),\n          this.ttlResolution\n        )\n        // not available on all platforms\n        /* c8 ignore start */\n        if (t.unref) {\n          t.unref()\n        }\n        /* c8 ignore stop */\n      }\n      return n\n    }\n\n    this.getRemainingTTL = key => {\n      const index = this.#keyMap.get(key)\n      if (index === undefined) {\n        return 0\n      }\n      const ttl = ttls[index]\n      const start = starts[index]\n      if (!ttl || !start) {\n        return Infinity\n      }\n      const age = (cachedNow || getNow()) - start\n      return ttl - age\n    }\n\n    this.#isStale = index => {\n      const s = starts[index]\n      const t = ttls[index]\n      return !!t && !!s && (cachedNow || getNow()) - s > t\n    }\n  }\n\n  // conditionally set private methods related to TTL\n  #updateItemAge: (index: Index) => void = () => {}\n  #statusTTL: (status: LRUCache.Status<V>, index: Index) => void =\n    () => {}\n  #setItemTTL: (\n    index: Index,\n    ttl: LRUCache.Milliseconds,\n    start?: LRUCache.Milliseconds\n    // ignore because we never call this if we're not already in TTL mode\n    /* c8 ignore start */\n  ) => void = () => {}\n  /* c8 ignore stop */\n\n  #isStale: (index: Index) => boolean = () => false\n\n  #initializeSizeTracking() {\n    const sizes = new ZeroArray(this.#max)\n    this.#calculatedSize = 0\n    this.#sizes = sizes\n    this.#removeItemSize = index => {\n      this.#calculatedSize -= sizes[index] as number\n      sizes[index] = 0\n    }\n    this.#requireSize = (k, v, size, sizeCalculation) => {\n      // provisionally accept background fetches.\n      // actual value size will be checked when they return.\n      if (this.#isBackgroundFetch(v)) {\n        return 0\n      }\n      if (!isPosInt(size)) {\n        if (sizeCalculation) {\n          if (typeof sizeCalculation !== 'function') {\n            throw new TypeError('sizeCalculation must be a function')\n          }\n          size = sizeCalculation(v, k)\n          if (!isPosInt(size)) {\n            throw new TypeError(\n              'sizeCalculation return invalid (expect positive integer)'\n            )\n          }\n        } else {\n          throw new TypeError(\n            'invalid size value (must be positive integer). ' +\n              'When maxSize or maxEntrySize is used, sizeCalculation ' +\n              'or size must be set.'\n          )\n        }\n      }\n      return size\n    }\n    this.#addItemSize = (\n      index: Index,\n      size: LRUCache.Size,\n      status?: LRUCache.Status<V>\n    ) => {\n      sizes[index] = size\n      if (this.#maxSize) {\n        const maxSize = this.#maxSize - (sizes[index] as number)\n        while (this.#calculatedSize > maxSize) {\n          this.#evict(true)\n        }\n      }\n      this.#calculatedSize += sizes[index] as number\n      if (status) {\n        status.entrySize = size\n        status.totalCalculatedSize = this.#calculatedSize\n      }\n    }\n  }\n\n  #removeItemSize: (index: Index) => void = _i => {}\n  #addItemSize: (\n    index: Index,\n    size: LRUCache.Size,\n    status?: LRUCache.Status<V>\n  ) => void = (_i, _s, _st) => {}\n  #requireSize: (\n    k: K,\n    v: V | BackgroundFetch<V>,\n    size?: LRUCache.Size,\n    sizeCalculation?: LRUCache.SizeCalculator<K, V>\n  ) => LRUCache.Size = (\n    _k: K,\n    _v: V | BackgroundFetch<V>,\n    size?: LRUCache.Size,\n    sizeCalculation?: LRUCache.SizeCalculator<K, V>\n  ) => {\n    if (size || sizeCalculation) {\n      throw new TypeError(\n        'cannot set size without setting maxSize or maxEntrySize on cache'\n      )\n    }\n    return 0\n  };\n\n  *#indexes({ allowStale = this.allowStale } = {}) {\n    if (this.#size) {\n      for (let i = this.#tail; true; ) {\n        if (!this.#isValidIndex(i)) {\n          break\n        }\n        if (allowStale || !this.#isStale(i)) {\n          yield i\n        }\n        if (i === this.#head) {\n          break\n        } else {\n          i = this.#prev[i] as Index\n        }\n      }\n    }\n  }\n\n  *#rindexes({ allowStale = this.allowStale } = {}) {\n    if (this.#size) {\n      for (let i = this.#head; true; ) {\n        if (!this.#isValidIndex(i)) {\n          break\n        }\n        if (allowStale || !this.#isStale(i)) {\n          yield i\n        }\n        if (i === this.#tail) {\n          break\n        } else {\n          i = this.#next[i] as Index\n        }\n      }\n    }\n  }\n\n  #isValidIndex(index: Index) {\n    return (\n      index !== undefined &&\n      this.#keyMap.get(this.#keyList[index] as K) === index\n    )\n  }\n\n  /**\n   * Return a generator yielding `[key, value]` pairs,\n   * in order from most recently used to least recently used.\n   */\n  *entries() {\n    for (const i of this.#indexes()) {\n      if (\n        this.#valList[i] !== undefined &&\n        this.#keyList[i] !== undefined &&\n        !this.#isBackgroundFetch(this.#valList[i])\n      ) {\n        yield [this.#keyList[i], this.#valList[i]] as [K, V]\n      }\n    }\n  }\n\n  /**\n   * Inverse order version of {@link LRUCache.entries}\n   *\n   * Return a generator yielding `[key, value]` pairs,\n   * in order from least recently used to most recently used.\n   */\n  *rentries() {\n    for (const i of this.#rindexes()) {\n      if (\n        this.#valList[i] !== undefined &&\n        this.#keyList[i] !== undefined &&\n        !this.#isBackgroundFetch(this.#valList[i])\n      ) {\n        yield [this.#keyList[i], this.#valList[i]]\n      }\n    }\n  }\n\n  /**\n   * Return a generator yielding the keys in the cache,\n   * in order from most recently used to least recently used.\n   */\n  *keys() {\n    for (const i of this.#indexes()) {\n      const k = this.#keyList[i]\n      if (\n        k !== undefined &&\n        !this.#isBackgroundFetch(this.#valList[i])\n      ) {\n        yield k\n      }\n    }\n  }\n\n  /**\n   * Inverse order version of {@link LRUCache.keys}\n   *\n   * Return a generator yielding the keys in the cache,\n   * in order from least recently used to most recently used.\n   */\n  *rkeys() {\n    for (const i of this.#rindexes()) {\n      const k = this.#keyList[i]\n      if (\n        k !== undefined &&\n        !this.#isBackgroundFetch(this.#valList[i])\n      ) {\n        yield k\n      }\n    }\n  }\n\n  /**\n   * Return a generator yielding the values in the cache,\n   * in order from most recently used to least recently used.\n   */\n  *values() {\n    for (const i of this.#indexes()) {\n      const v = this.#valList[i]\n      if (\n        v !== undefined &&\n        !this.#isBackgroundFetch(this.#valList[i])\n      ) {\n        yield this.#valList[i] as V\n      }\n    }\n  }\n\n  /**\n   * Inverse order version of {@link LRUCache.values}\n   *\n   * Return a generator yielding the values in the cache,\n   * in order from least recently used to most recently used.\n   */\n  *rvalues() {\n    for (const i of this.#rindexes()) {\n      const v = this.#valList[i]\n      if (\n        v !== undefined &&\n        !this.#isBackgroundFetch(this.#valList[i])\n      ) {\n        yield this.#valList[i]\n      }\n    }\n  }\n\n  /**\n   * Iterating over the cache itself yields the same results as\n   * {@link LRUCache.entries}\n   */\n  [Symbol.iterator]() {\n    return this.entries()\n  }\n\n  /**\n   * A String value that is used in the creation of the default string\n   * description of an object. Called by the built-in method\n   * `Object.prototype.toString`.\n   */\n  [Symbol.toStringTag] = 'LRUCache'\n\n  /**\n   * Find a value for which the supplied fn method returns a truthy value,\n   * similar to `Array.find()`. fn is called as `fn(value, key, cache)`.\n   */\n  find(\n    fn: (v: V, k: K, self: LRUCache<K, V, FC>) => boolean,\n    getOptions: LRUCache.GetOptions<K, V, FC> = {}\n  ) {\n    for (const i of this.#indexes()) {\n      const v = this.#valList[i]\n      const value = this.#isBackgroundFetch(v)\n        ? v.__staleWhileFetching\n        : v\n      if (value === undefined) continue\n      if (fn(value, this.#keyList[i] as K, this)) {\n        return this.get(this.#keyList[i] as K, getOptions)\n      }\n    }\n  }\n\n  /**\n   * Call the supplied function on each item in the cache, in order from most\n   * recently used to least recently used.\n   *\n   * `fn` is called as `fn(value, key, cache)`.\n   *\n   * If `thisp` is provided, function will be called in the `this`-context of\n   * the provided object, or the cache if no `thisp` object is provided.\n   *\n   * Does not update age or recenty of use, or iterate over stale values.\n   */\n  forEach(\n    fn: (v: V, k: K, self: LRUCache<K, V, FC>) => any,\n    thisp: any = this\n  ) {\n    for (const i of this.#indexes()) {\n      const v = this.#valList[i]\n      const value = this.#isBackgroundFetch(v)\n        ? v.__staleWhileFetching\n        : v\n      if (value === undefined) continue\n      fn.call(thisp, value, this.#keyList[i] as K, this)\n    }\n  }\n\n  /**\n   * The same as {@link LRUCache.forEach} but items are iterated over in\n   * reverse order.  (ie, less recently used items are iterated over first.)\n   */\n  rforEach(\n    fn: (v: V, k: K, self: LRUCache<K, V, FC>) => any,\n    thisp: any = this\n  ) {\n    for (const i of this.#rindexes()) {\n      const v = this.#valList[i]\n      const value = this.#isBackgroundFetch(v)\n        ? v.__staleWhileFetching\n        : v\n      if (value === undefined) continue\n      fn.call(thisp, value, this.#keyList[i] as K, this)\n    }\n  }\n\n  /**\n   * Delete any stale entries. Returns true if anything was removed,\n   * false otherwise.\n   */\n  purgeStale() {\n    let deleted = false\n    for (const i of this.#rindexes({ allowStale: true })) {\n      if (this.#isStale(i)) {\n        this.#delete(this.#keyList[i] as K, 'expire')\n        deleted = true\n      }\n    }\n    return deleted\n  }\n\n  /**\n   * Get the extended info about a given entry, to get its value, size, and\n   * TTL info simultaneously. Returns `undefined` if the key is not present.\n   *\n   * Unlike {@link LRUCache#dump}, which is designed to be portable and survive\n   * serialization, the `start` value is always the current timestamp, and the\n   * `ttl` is a calculated remaining time to live (negative if expired).\n   *\n   * Always returns stale values, if their info is found in the cache, so be\n   * sure to check for expirations (ie, a negative {@link LRUCache.Entry#ttl})\n   * if relevant.\n   */\n  info(key: K): LRUCache.Entry<V> | undefined {\n    const i = this.#keyMap.get(key)\n    if (i === undefined) return undefined\n    const v = this.#valList[i]\n    const value: V | undefined = this.#isBackgroundFetch(v)\n      ? v.__staleWhileFetching\n      : v\n    if (value === undefined) return undefined\n    const entry: LRUCache.Entry<V> = { value }\n    if (this.#ttls && this.#starts) {\n      const ttl = this.#ttls[i]\n      const start = this.#starts[i]\n      if (ttl && start) {\n        const remain = ttl - (perf.now() - start)\n        entry.ttl = remain\n        entry.start = Date.now()\n      }\n    }\n    if (this.#sizes) {\n      entry.size = this.#sizes[i]\n    }\n    return entry\n  }\n\n  /**\n   * Return an array of [key, {@link LRUCache.Entry}] tuples which can be\n   * passed to {@link LRUCache#load}.\n   *\n   * The `start` fields are calculated relative to a portable `Date.now()`\n   * timestamp, even if `performance.now()` is available.\n   *\n   * Stale entries are always included in the `dump`, even if\n   * {@link LRUCache.OptionsBase.allowStale} is false.\n   *\n   * Note: this returns an actual array, not a generator, so it can be more\n   * easily passed around.\n   */\n  dump() {\n    const arr: [K, LRUCache.Entry<V>][] = []\n    for (const i of this.#indexes({ allowStale: true })) {\n      const key = this.#keyList[i]\n      const v = this.#valList[i]\n      const value: V | undefined = this.#isBackgroundFetch(v)\n        ? v.__staleWhileFetching\n        : v\n      if (value === undefined || key === undefined) continue\n      const entry: LRUCache.Entry<V> = { value }\n      if (this.#ttls && this.#starts) {\n        entry.ttl = this.#ttls[i]\n        // always dump the start relative to a portable timestamp\n        // it's ok for this to be a bit slow, it's a rare operation.\n        const age = perf.now() - (this.#starts[i] as number)\n        entry.start = Math.floor(Date.now() - age)\n      }\n      if (this.#sizes) {\n        entry.size = this.#sizes[i]\n      }\n      arr.unshift([key, entry])\n    }\n    return arr\n  }\n\n  /**\n   * Reset the cache and load in the items in entries in the order listed.\n   *\n   * The shape of the resulting cache may be different if the same options are\n   * not used in both caches.\n   *\n   * The `start` fields are assumed to be calculated relative to a portable\n   * `Date.now()` timestamp, even if `performance.now()` is available.\n   */\n  load(arr: [K, LRUCache.Entry<V>][]) {\n    this.clear()\n    for (const [key, entry] of arr) {\n      if (entry.start) {\n        // entry.start is a portable timestamp, but we may be using\n        // node's performance.now(), so calculate the offset, so that\n        // we get the intended remaining TTL, no matter how long it's\n        // been on ice.\n        //\n        // it's ok for this to be a bit slow, it's a rare operation.\n        const age = Date.now() - entry.start\n        entry.start = perf.now() - age\n      }\n      this.set(key, entry.value, entry)\n    }\n  }\n\n  /**\n   * Add a value to the cache.\n   *\n   * Note: if `undefined` is specified as a value, this is an alias for\n   * {@link LRUCache#delete}\n   *\n   * Fields on the {@link LRUCache.SetOptions} options param will override\n   * their corresponding values in the constructor options for the scope\n   * of this single `set()` operation.\n   *\n   * If `start` is provided, then that will set the effective start\n   * time for the TTL calculation. Note that this must be a previous\n   * value of `performance.now()` if supported, or a previous value of\n   * `Date.now()` if not.\n   *\n   * Options object may also include `size`, which will prevent\n   * calling the `sizeCalculation` function and just use the specified\n   * number if it is a positive integer, and `noDisposeOnSet` which\n   * will prevent calling a `dispose` function in the case of\n   * overwrites.\n   *\n   * If the `size` (or return value of `sizeCalculation`) for a given\n   * entry is greater than `maxEntrySize`, then the item will not be\n   * added to the cache.\n   *\n   * Will update the recency of the entry.\n   *\n   * If the value is `undefined`, then this is an alias for\n   * `cache.delete(key)`. `undefined` is never stored in the cache.\n   */\n  set(\n    k: K,\n    v: V | BackgroundFetch<V> | undefined,\n    setOptions: LRUCache.SetOptions<K, V, FC> = {}\n  ) {\n    if (v === undefined) {\n      this.delete(k)\n      return this\n    }\n    const {\n      ttl = this.ttl,\n      start,\n      noDisposeOnSet = this.noDisposeOnSet,\n      sizeCalculation = this.sizeCalculation,\n      status,\n    } = setOptions\n    let { noUpdateTTL = this.noUpdateTTL } = setOptions\n\n    const size = this.#requireSize(\n      k,\n      v,\n      setOptions.size || 0,\n      sizeCalculation\n    )\n    // if the item doesn't fit, don't do anything\n    // NB: maxEntrySize set to maxSize by default\n    if (this.maxEntrySize && size > this.maxEntrySize) {\n      if (status) {\n        status.set = 'miss'\n        status.maxEntrySizeExceeded = true\n      }\n      // have to delete, in case something is there already.\n      this.#delete(k, 'set')\n      return this\n    }\n    let index = this.#size === 0 ? undefined : this.#keyMap.get(k)\n    if (index === undefined) {\n      // addition\n      index = (\n        this.#size === 0\n          ? this.#tail\n          : this.#free.length !== 0\n          ? this.#free.pop()\n          : this.#size === this.#max\n          ? this.#evict(false)\n          : this.#size\n      ) as Index\n      this.#keyList[index] = k\n      this.#valList[index] = v\n      this.#keyMap.set(k, index)\n      this.#next[this.#tail] = index\n      this.#prev[index] = this.#tail\n      this.#tail = index\n      this.#size++\n      this.#addItemSize(index, size, status)\n      if (status) status.set = 'add'\n      noUpdateTTL = false\n      if (this.#hasOnInsert) {\n        this.#onInsert?.(v as V, k, 'add')\n      }\n    } else {\n      // update\n      this.#moveToTail(index)\n      const oldVal = this.#valList[index] as V | BackgroundFetch<V>\n      if (v !== oldVal) {\n        if (this.#hasFetchMethod && this.#isBackgroundFetch(oldVal)) {\n          oldVal.__abortController.abort(new Error('replaced'))\n          const { __staleWhileFetching: s } = oldVal\n          if (s !== undefined && !noDisposeOnSet) {\n            if (this.#hasDispose) {\n              this.#dispose?.(s as V, k, 'set')\n            }\n            if (this.#hasDisposeAfter) {\n              this.#disposed?.push([s as V, k, 'set'])\n            }\n          }\n        } else if (!noDisposeOnSet) {\n          if (this.#hasDispose) {\n            this.#dispose?.(oldVal as V, k, 'set')\n          }\n          if (this.#hasDisposeAfter) {\n            this.#disposed?.push([oldVal as V, k, 'set'])\n          }\n        }\n        this.#removeItemSize(index)\n        this.#addItemSize(index, size, status)\n        this.#valList[index] = v\n        if (status) {\n          status.set = 'replace'\n          const oldValue =\n            oldVal && this.#isBackgroundFetch(oldVal)\n              ? oldVal.__staleWhileFetching\n              : oldVal\n          if (oldValue !== undefined) status.oldValue = oldValue\n        }\n      } else if (status) {\n        status.set = 'update'\n      }\n\n      if (this.#hasOnInsert) {\n        this.onInsert?.(v as V, k, v === oldVal ? 'update' : 'replace');\n      }\n    }\n    if (ttl !== 0 && !this.#ttls) {\n      this.#initializeTTLTracking()\n    }\n    if (this.#ttls) {\n      if (!noUpdateTTL) {\n        this.#setItemTTL(index, ttl, start)\n      }\n      if (status) this.#statusTTL(status, index)\n    }\n    if (!noDisposeOnSet && this.#hasDisposeAfter && this.#disposed) {\n      const dt = this.#disposed\n      let task: DisposeTask<K, V> | undefined\n      while ((task = dt?.shift())) {\n        this.#disposeAfter?.(...task)\n      }\n    }\n    return this\n  }\n\n  /**\n   * Evict the least recently used item, returning its value or\n   * `undefined` if cache is empty.\n   */\n  pop(): V | undefined {\n    try {\n      while (this.#size) {\n        const val = this.#valList[this.#head]\n        this.#evict(true)\n        if (this.#isBackgroundFetch(val)) {\n          if (val.__staleWhileFetching) {\n            return val.__staleWhileFetching\n          }\n        } else if (val !== undefined) {\n          return val\n        }\n      }\n    } finally {\n      if (this.#hasDisposeAfter && this.#disposed) {\n        const dt = this.#disposed\n        let task: DisposeTask<K, V> | undefined\n        while ((task = dt?.shift())) {\n          this.#disposeAfter?.(...task)\n        }\n      }\n    }\n  }\n\n  #evict(free: boolean) {\n    const head = this.#head\n    const k = this.#keyList[head] as K\n    const v = this.#valList[head] as V\n    if (this.#hasFetchMethod && this.#isBackgroundFetch(v)) {\n      v.__abortController.abort(new Error('evicted'))\n    } else if (this.#hasDispose || this.#hasDisposeAfter) {\n      if (this.#hasDispose) {\n        this.#dispose?.(v, k, 'evict')\n      }\n      if (this.#hasDisposeAfter) {\n        this.#disposed?.push([v, k, 'evict'])\n      }\n    }\n    this.#removeItemSize(head)\n    // if we aren't about to use the index, then null these out\n    if (free) {\n      this.#keyList[head] = undefined\n      this.#valList[head] = undefined\n      this.#free.push(head)\n    }\n    if (this.#size === 1) {\n      this.#head = this.#tail = 0 as Index\n      this.#free.length = 0\n    } else {\n      this.#head = this.#next[head] as Index\n    }\n    this.#keyMap.delete(k)\n    this.#size--\n    return head\n  }\n\n  /**\n   * Check if a key is in the cache, without updating the recency of use.\n   * Will return false if the item is stale, even though it is technically\n   * in the cache.\n   *\n   * Check if a key is in the cache, without updating the recency of\n   * use. Age is updated if {@link LRUCache.OptionsBase.updateAgeOnHas} is set\n   * to `true` in either the options or the constructor.\n   *\n   * Will return `false` if the item is stale, even though it is technically in\n   * the cache. The difference can be determined (if it matters) by using a\n   * `status` argument, and inspecting the `has` field.\n   *\n   * Will not update item age unless\n   * {@link LRUCache.OptionsBase.updateAgeOnHas} is set.\n   */\n  has(k: K, hasOptions: LRUCache.HasOptions<K, V, FC> = {}) {\n    const { updateAgeOnHas = this.updateAgeOnHas, status } =\n      hasOptions\n    const index = this.#keyMap.get(k)\n    if (index !== undefined) {\n      const v = this.#valList[index]\n      if (\n        this.#isBackgroundFetch(v) &&\n        v.__staleWhileFetching === undefined\n      ) {\n        return false\n      }\n      if (!this.#isStale(index)) {\n        if (updateAgeOnHas) {\n          this.#updateItemAge(index)\n        }\n        if (status) {\n          status.has = 'hit'\n          this.#statusTTL(status, index)\n        }\n        return true\n      } else if (status) {\n        status.has = 'stale'\n        this.#statusTTL(status, index)\n      }\n    } else if (status) {\n      status.has = 'miss'\n    }\n    return false\n  }\n\n  /**\n   * Like {@link LRUCache#get} but doesn't update recency or delete stale\n   * items.\n   *\n   * Returns `undefined` if the item is stale, unless\n   * {@link LRUCache.OptionsBase.allowStale} is set.\n   */\n  peek(k: K, peekOptions: LRUCache.PeekOptions<K, V, FC> = {}) {\n    const { allowStale = this.allowStale } = peekOptions\n    const index = this.#keyMap.get(k)\n    if (\n      index === undefined ||\n      (!allowStale && this.#isStale(index))\n    ) {\n      return\n    }\n    const v = this.#valList[index]\n    // either stale and allowed, or forcing a refresh of non-stale value\n    return this.#isBackgroundFetch(v) ? v.__staleWhileFetching : v\n  }\n\n  #backgroundFetch(\n    k: K,\n    index: Index | undefined,\n    options: LRUCache.FetchOptions<K, V, FC>,\n    context: any\n  ): BackgroundFetch<V> {\n    const v = index === undefined ? undefined : this.#valList[index]\n    if (this.#isBackgroundFetch(v)) {\n      return v\n    }\n\n    const ac = new AC()\n    const { signal } = options\n    // when/if our AC signals, then stop listening to theirs.\n    signal?.addEventListener('abort', () => ac.abort(signal.reason), {\n      signal: ac.signal,\n    })\n\n    const fetchOpts = {\n      signal: ac.signal,\n      options,\n      context,\n    }\n\n    const cb = (\n      v: V | undefined,\n      updateCache = false\n    ): V | undefined => {\n      const { aborted } = ac.signal\n      const ignoreAbort = options.ignoreFetchAbort && v !== undefined\n      if (options.status) {\n        if (aborted && !updateCache) {\n          options.status.fetchAborted = true\n          options.status.fetchError = ac.signal.reason\n          if (ignoreAbort) options.status.fetchAbortIgnored = true\n        } else {\n          options.status.fetchResolved = true\n        }\n      }\n      if (aborted && !ignoreAbort && !updateCache) {\n        return fetchFail(ac.signal.reason)\n      }\n      // either we didn't abort, and are still here, or we did, and ignored\n      const bf = p as BackgroundFetch<V>\n      if (this.#valList[index as Index] === p) {\n        if (v === undefined) {\n          if (bf.__staleWhileFetching) {\n            this.#valList[index as Index] = bf.__staleWhileFetching\n          } else {\n            this.#delete(k, 'fetch')\n          }\n        } else {\n          if (options.status) options.status.fetchUpdated = true\n          this.set(k, v, fetchOpts.options)\n        }\n      }\n      return v\n    }\n\n    const eb = (er: any) => {\n      if (options.status) {\n        options.status.fetchRejected = true\n        options.status.fetchError = er\n      }\n      return fetchFail(er)\n    }\n\n    const fetchFail = (er: any): V | undefined => {\n      const { aborted } = ac.signal\n      const allowStaleAborted =\n        aborted && options.allowStaleOnFetchAbort\n      const allowStale =\n        allowStaleAborted || options.allowStaleOnFetchRejection\n      const noDelete = allowStale || options.noDeleteOnFetchRejection\n      const bf = p as BackgroundFetch<V>\n      if (this.#valList[index as Index] === p) {\n        // if we allow stale on fetch rejections, then we need to ensure that\n        // the stale value is not removed from the cache when the fetch fails.\n        const del = !noDelete || bf.__staleWhileFetching === undefined\n        if (del) {\n          this.#delete(k, 'fetch')\n        } else if (!allowStaleAborted) {\n          // still replace the *promise* with the stale value,\n          // since we are done with the promise at this point.\n          // leave it untouched if we're still waiting for an\n          // aborted background fetch that hasn't yet returned.\n          this.#valList[index as Index] = bf.__staleWhileFetching\n        }\n      }\n      if (allowStale) {\n        if (options.status && bf.__staleWhileFetching !== undefined) {\n          options.status.returnedStale = true\n        }\n        return bf.__staleWhileFetching\n      } else if (bf.__returned === bf) {\n        throw er\n      }\n    }\n\n    const pcall = (\n      res: (v: V | undefined) => void,\n      rej: (e: any) => void\n    ) => {\n      const fmp = this.#fetchMethod?.(k, v, fetchOpts)\n      if (fmp && fmp instanceof Promise) {\n        fmp.then(v => res(v === undefined ? undefined : v), rej)\n      }\n      // ignored, we go until we finish, regardless.\n      // defer check until we are actually aborting,\n      // so fetchMethod can override.\n      ac.signal.addEventListener('abort', () => {\n        if (\n          !options.ignoreFetchAbort ||\n          options.allowStaleOnFetchAbort\n        ) {\n          res(undefined)\n          // when it eventually resolves, update the cache.\n          if (options.allowStaleOnFetchAbort) {\n            res = v => cb(v, true)\n          }\n        }\n      })\n    }\n\n    if (options.status) options.status.fetchDispatched = true\n    const p = new Promise(pcall).then(cb, eb)\n    const bf: BackgroundFetch<V> = Object.assign(p, {\n      __abortController: ac,\n      __staleWhileFetching: v,\n      __returned: undefined,\n    })\n\n    if (index === undefined) {\n      // internal, don't expose status.\n      this.set(k, bf, { ...fetchOpts.options, status: undefined })\n      index = this.#keyMap.get(k)\n    } else {\n      this.#valList[index] = bf\n    }\n    return bf\n  }\n\n  #isBackgroundFetch(p: any): p is BackgroundFetch<V> {\n    if (!this.#hasFetchMethod) return false\n    const b = p as BackgroundFetch<V>\n    return (\n      !!b &&\n      b instanceof Promise &&\n      b.hasOwnProperty('__staleWhileFetching') &&\n      b.__abortController instanceof AC\n    )\n  }\n\n  /**\n   * Make an asynchronous cached fetch using the\n   * {@link LRUCache.OptionsBase.fetchMethod} function.\n   *\n   * If the value is in the cache and not stale, then the returned\n   * Promise resolves to the value.\n   *\n   * If not in the cache, or beyond its TTL staleness, then\n   * `fetchMethod(key, staleValue, { options, signal, context })` is\n   * called, and the value returned will be added to the cache once\n   * resolved.\n   *\n   * If called with `allowStale`, and an asynchronous fetch is\n   * currently in progress to reload a stale value, then the former\n   * stale value will be returned.\n   *\n   * If called with `forceRefresh`, then the cached item will be\n   * re-fetched, even if it is not stale. However, if `allowStale` is also\n   * set, then the old value will still be returned. This is useful\n   * in cases where you want to force a reload of a cached value. If\n   * a background fetch is already in progress, then `forceRefresh`\n   * has no effect.\n   *\n   * If multiple fetches for the same key are issued, then they will all be\n   * coalesced into a single call to fetchMethod.\n   *\n   * Note that this means that handling options such as\n   * {@link LRUCache.OptionsBase.allowStaleOnFetchAbort},\n   * {@link LRUCache.FetchOptions.signal},\n   * and {@link LRUCache.OptionsBase.allowStaleOnFetchRejection} will be\n   * determined by the FIRST fetch() call for a given key.\n   *\n   * This is a known (fixable) shortcoming which will be addresed on when\n   * someone complains about it, as the fix would involve added complexity and\n   * may not be worth the costs for this edge case.\n   *\n   * If {@link LRUCache.OptionsBase.fetchMethod} is not specified, then this is\n   * effectively an alias for `Promise.resolve(cache.get(key))`.\n   *\n   * When the fetch method resolves to a value, if the fetch has not\n   * been aborted due to deletion, eviction, or being overwritten,\n   * then it is added to the cache using the options provided.\n   *\n   * If the key is evicted or deleted before the `fetchMethod`\n   * resolves, then the AbortSignal passed to the `fetchMethod` will\n   * receive an `abort` event, and the promise returned by `fetch()`\n   * will reject with the reason for the abort.\n   *\n   * If a `signal` is passed to the `fetch()` call, then aborting the\n   * signal will abort the fetch and cause the `fetch()` promise to\n   * reject with the reason provided.\n   *\n   * **Setting `context`**\n   *\n   * If an `FC` type is set to a type other than `unknown`, `void`, or\n   * `undefined` in the {@link LRUCache} constructor, then all\n   * calls to `cache.fetch()` _must_ provide a `context` option. If\n   * set to `undefined` or `void`, then calls to fetch _must not_\n   * provide a `context` option.\n   *\n   * The `context` param allows you to provide arbitrary data that\n   * might be relevant in the course of fetching the data. It is only\n   * relevant for the course of a single `fetch()` operation, and\n   * discarded afterwards.\n   *\n   * **Note: `fetch()` calls are inflight-unique**\n   *\n   * If you call `fetch()` multiple times with the same key value,\n   * then every call after the first will resolve on the same\n   * promise<sup>1</sup>,\n   * _even if they have different settings that would otherwise change\n   * the behavior of the fetch_, such as `noDeleteOnFetchRejection`\n   * or `ignoreFetchAbort`.\n   *\n   * In most cases, this is not a problem (in fact, only fetching\n   * something once is what you probably want, if you're caching in\n   * the first place). If you are changing the fetch() options\n   * dramatically between runs, there's a good chance that you might\n   * be trying to fit divergent semantics into a single object, and\n   * would be better off with multiple cache instances.\n   *\n   * **1**: Ie, they're not the \"same Promise\", but they resolve at\n   * the same time, because they're both waiting on the same\n   * underlying fetchMethod response.\n   */\n\n  fetch(\n    k: K,\n    fetchOptions: unknown extends FC\n      ? LRUCache.FetchOptions<K, V, FC>\n      : FC extends undefined | void\n      ? LRUCache.FetchOptionsNoContext<K, V>\n      : LRUCache.FetchOptionsWithContext<K, V, FC>\n  ): Promise<undefined | V>\n\n  // this overload not allowed if context is required\n  fetch(\n    k: unknown extends FC\n      ? K\n      : FC extends undefined | void\n      ? K\n      : never,\n    fetchOptions?: unknown extends FC\n      ? LRUCache.FetchOptions<K, V, FC>\n      : FC extends undefined | void\n      ? LRUCache.FetchOptionsNoContext<K, V>\n      : never\n  ): Promise<undefined | V>\n\n  async fetch(\n    k: K,\n    fetchOptions: LRUCache.FetchOptions<K, V, FC> = {}\n  ): Promise<undefined | V> {\n    const {\n      // get options\n      allowStale = this.allowStale,\n      updateAgeOnGet = this.updateAgeOnGet,\n      noDeleteOnStaleGet = this.noDeleteOnStaleGet,\n      // set options\n      ttl = this.ttl,\n      noDisposeOnSet = this.noDisposeOnSet,\n      size = 0,\n      sizeCalculation = this.sizeCalculation,\n      noUpdateTTL = this.noUpdateTTL,\n      // fetch exclusive options\n      noDeleteOnFetchRejection = this.noDeleteOnFetchRejection,\n      allowStaleOnFetchRejection = this.allowStaleOnFetchRejection,\n      ignoreFetchAbort = this.ignoreFetchAbort,\n      allowStaleOnFetchAbort = this.allowStaleOnFetchAbort,\n      context,\n      forceRefresh = false,\n      status,\n      signal,\n    } = fetchOptions\n\n    if (!this.#hasFetchMethod) {\n      if (status) status.fetch = 'get'\n      return this.get(k, {\n        allowStale,\n        updateAgeOnGet,\n        noDeleteOnStaleGet,\n        status,\n      })\n    }\n\n    const options = {\n      allowStale,\n      updateAgeOnGet,\n      noDeleteOnStaleGet,\n      ttl,\n      noDisposeOnSet,\n      size,\n      sizeCalculation,\n      noUpdateTTL,\n      noDeleteOnFetchRejection,\n      allowStaleOnFetchRejection,\n      allowStaleOnFetchAbort,\n      ignoreFetchAbort,\n      status,\n      signal,\n    }\n\n    let index = this.#keyMap.get(k)\n    if (index === undefined) {\n      if (status) status.fetch = 'miss'\n      const p = this.#backgroundFetch(k, index, options, context)\n      return (p.__returned = p)\n    } else {\n      // in cache, maybe already fetching\n      const v = this.#valList[index]\n      if (this.#isBackgroundFetch(v)) {\n        const stale =\n          allowStale && v.__staleWhileFetching !== undefined\n        if (status) {\n          status.fetch = 'inflight'\n          if (stale) status.returnedStale = true\n        }\n        return stale ? v.__staleWhileFetching : (v.__returned = v)\n      }\n\n      // if we force a refresh, that means do NOT serve the cached value,\n      // unless we are already in the process of refreshing the cache.\n      const isStale = this.#isStale(index)\n      if (!forceRefresh && !isStale) {\n        if (status) status.fetch = 'hit'\n        this.#moveToTail(index)\n        if (updateAgeOnGet) {\n          this.#updateItemAge(index)\n        }\n        if (status) this.#statusTTL(status, index)\n        return v\n      }\n\n      // ok, it is stale or a forced refresh, and not already fetching.\n      // refresh the cache.\n      const p = this.#backgroundFetch(k, index, options, context)\n      const hasStale = p.__staleWhileFetching !== undefined\n      const staleVal = hasStale && allowStale\n      if (status) {\n        status.fetch = isStale ? 'stale' : 'refresh'\n        if (staleVal && isStale) status.returnedStale = true\n      }\n      return staleVal ? p.__staleWhileFetching : (p.__returned = p)\n    }\n  }\n\n  /**\n   * In some cases, `cache.fetch()` may resolve to `undefined`, either because\n   * a {@link LRUCache.OptionsBase#fetchMethod} was not provided (turning\n   * `cache.fetch(k)` into just an async wrapper around `cache.get(k)`) or\n   * because `ignoreFetchAbort` was specified (either to the constructor or\n   * in the {@link LRUCache.FetchOptions}). Also, the\n   * {@link LRUCache.OptionsBase.fetchMethod} may return `undefined` or `void`, making\n   * the test even more complicated.\n   *\n   * Because inferring the cases where `undefined` might be returned are so\n   * cumbersome, but testing for `undefined` can also be annoying, this method\n   * can be used, which will reject if `this.fetch()` resolves to undefined.\n   */\n  forceFetch(\n    k: K,\n    fetchOptions: unknown extends FC\n      ? LRUCache.FetchOptions<K, V, FC>\n      : FC extends undefined | void\n      ? LRUCache.FetchOptionsNoContext<K, V>\n      : LRUCache.FetchOptionsWithContext<K, V, FC>\n  ): Promise<V>\n  // this overload not allowed if context is required\n  forceFetch(\n    k: unknown extends FC\n      ? K\n      : FC extends undefined | void\n      ? K\n      : never,\n    fetchOptions?: unknown extends FC\n      ? LRUCache.FetchOptions<K, V, FC>\n      : FC extends undefined | void\n      ? LRUCache.FetchOptionsNoContext<K, V>\n      : never\n  ): Promise<V>\n  async forceFetch(\n    k: K,\n    fetchOptions: LRUCache.FetchOptions<K, V, FC> = {}\n  ): Promise<V> {\n    const v = await this.fetch(\n      k,\n      fetchOptions as unknown extends FC\n        ? LRUCache.FetchOptions<K, V, FC>\n        : FC extends undefined | void\n        ? LRUCache.FetchOptionsNoContext<K, V>\n        : LRUCache.FetchOptionsWithContext<K, V, FC>\n    )\n    if (v === undefined) throw new Error('fetch() returned undefined')\n    return v\n  }\n\n  /**\n   * If the key is found in the cache, then this is equivalent to\n   * {@link LRUCache#get}. If not, in the cache, then calculate the value using\n   * the {@link LRUCache.OptionsBase.memoMethod}, and add it to the cache.\n   *\n   * If an `FC` type is set to a type other than `unknown`, `void`, or\n   * `undefined` in the LRUCache constructor, then all calls to `cache.memo()`\n   * _must_ provide a `context` option. If set to `undefined` or `void`, then\n   * calls to memo _must not_ provide a `context` option.\n   *\n   * The `context` param allows you to provide arbitrary data that might be\n   * relevant in the course of fetching the data. It is only relevant for the\n   * course of a single `memo()` operation, and discarded afterwards.\n   */\n  memo(\n    k: K,\n    memoOptions: unknown extends FC\n      ? LRUCache.MemoOptions<K, V, FC>\n      : FC extends undefined | void\n      ? LRUCache.MemoOptionsNoContext<K, V>\n      : LRUCache.MemoOptionsWithContext<K, V, FC>\n  ): V\n  // this overload not allowed if context is required\n  memo(\n    k: unknown extends FC\n      ? K\n      : FC extends undefined | void\n      ? K\n      : never,\n    memoOptions?: unknown extends FC\n      ? LRUCache.MemoOptions<K, V, FC>\n      : FC extends undefined | void\n      ? LRUCache.MemoOptionsNoContext<K, V>\n      : never\n  ): V\n  memo(k: K, memoOptions: LRUCache.MemoOptions<K, V, FC> = {}) {\n    const memoMethod = this.#memoMethod\n    if (!memoMethod) {\n      throw new Error('no memoMethod provided to constructor')\n    }\n    const { context, forceRefresh, ...options } = memoOptions\n    const v = this.get(k, options)\n    if (!forceRefresh && v !== undefined) return v\n    const vv = memoMethod(k, v, {\n      options,\n      context,\n    } as LRUCache.MemoizerOptions<K, V, FC>)\n    this.set(k, vv, options)\n    return vv\n  }\n\n  /**\n   * Return a value from the cache. Will update the recency of the cache\n   * entry found.\n   *\n   * If the key is not found, get() will return `undefined`.\n   */\n  get(k: K, getOptions: LRUCache.GetOptions<K, V, FC> = {}) {\n    const {\n      allowStale = this.allowStale,\n      updateAgeOnGet = this.updateAgeOnGet,\n      noDeleteOnStaleGet = this.noDeleteOnStaleGet,\n      status,\n    } = getOptions\n    const index = this.#keyMap.get(k)\n    if (index !== undefined) {\n      const value = this.#valList[index]\n      const fetching = this.#isBackgroundFetch(value)\n      if (status) this.#statusTTL(status, index)\n      if (this.#isStale(index)) {\n        if (status) status.get = 'stale'\n        // delete only if not an in-flight background fetch\n        if (!fetching) {\n          if (!noDeleteOnStaleGet) {\n            this.#delete(k, 'expire')\n          }\n          if (status && allowStale) status.returnedStale = true\n          return allowStale ? value : undefined\n        } else {\n          if (\n            status &&\n            allowStale &&\n            value.__staleWhileFetching !== undefined\n          ) {\n            status.returnedStale = true\n          }\n          return allowStale ? value.__staleWhileFetching : undefined\n        }\n      } else {\n        if (status) status.get = 'hit'\n        // if we're currently fetching it, we don't actually have it yet\n        // it's not stale, which means this isn't a staleWhileRefetching.\n        // If it's not stale, and fetching, AND has a __staleWhileFetching\n        // value, then that means the user fetched with {forceRefresh:true},\n        // so it's safe to return that value.\n        if (fetching) {\n          return value.__staleWhileFetching\n        }\n        this.#moveToTail(index)\n        if (updateAgeOnGet) {\n          this.#updateItemAge(index)\n        }\n        return value\n      }\n    } else if (status) {\n      status.get = 'miss'\n    }\n  }\n\n  #connect(p: Index, n: Index) {\n    this.#prev[n] = p\n    this.#next[p] = n\n  }\n\n  #moveToTail(index: Index): void {\n    // if tail already, nothing to do\n    // if head, move head to next[index]\n    // else\n    //   move next[prev[index]] to next[index] (head has no prev)\n    //   move prev[next[index]] to prev[index]\n    // prev[index] = tail\n    // next[tail] = index\n    // tail = index\n    if (index !== this.#tail) {\n      if (index === this.#head) {\n        this.#head = this.#next[index] as Index\n      } else {\n        this.#connect(\n          this.#prev[index] as Index,\n          this.#next[index] as Index\n        )\n      }\n      this.#connect(this.#tail, index)\n      this.#tail = index\n    }\n  }\n\n  /**\n   * Deletes a key out of the cache.\n   *\n   * Returns true if the key was deleted, false otherwise.\n   */\n  delete(k: K) {\n    return this.#delete(k, 'delete')\n  }\n\n  #delete(k: K, reason: LRUCache.DisposeReason) {\n    let deleted = false\n    if (this.#size !== 0) {\n      const index = this.#keyMap.get(k)\n      if (index !== undefined) {\n        deleted = true\n        if (this.#size === 1) {\n          this.#clear(reason)\n        } else {\n          this.#removeItemSize(index)\n          const v = this.#valList[index]\n          if (this.#isBackgroundFetch(v)) {\n            v.__abortController.abort(new Error('deleted'))\n          } else if (this.#hasDispose || this.#hasDisposeAfter) {\n            if (this.#hasDispose) {\n              this.#dispose?.(v as V, k, reason)\n            }\n            if (this.#hasDisposeAfter) {\n              this.#disposed?.push([v as V, k, reason])\n            }\n          }\n          this.#keyMap.delete(k)\n          this.#keyList[index] = undefined\n          this.#valList[index] = undefined\n          if (index === this.#tail) {\n            this.#tail = this.#prev[index] as Index\n          } else if (index === this.#head) {\n            this.#head = this.#next[index] as Index\n          } else {\n            const pi = this.#prev[index] as number\n            this.#next[pi] = this.#next[index] as number\n            const ni = this.#next[index] as number\n            this.#prev[ni] = this.#prev[index] as number\n          }\n          this.#size--\n          this.#free.push(index)\n        }\n      }\n    }\n    if (this.#hasDisposeAfter && this.#disposed?.length) {\n      const dt = this.#disposed\n      let task: DisposeTask<K, V> | undefined\n      while ((task = dt?.shift())) {\n        this.#disposeAfter?.(...task)\n      }\n    }\n    return deleted\n  }\n\n  /**\n   * Clear the cache entirely, throwing away all values.\n   */\n  clear() {\n    return this.#clear('delete')\n  }\n  #clear(reason: LRUCache.DisposeReason) {\n    for (const index of this.#rindexes({ allowStale: true })) {\n      const v = this.#valList[index]\n      if (this.#isBackgroundFetch(v)) {\n        v.__abortController.abort(new Error('deleted'))\n      } else {\n        const k = this.#keyList[index]\n        if (this.#hasDispose) {\n          this.#dispose?.(v as V, k as K, reason)\n        }\n        if (this.#hasDisposeAfter) {\n          this.#disposed?.push([v as V, k as K, reason])\n        }\n      }\n    }\n\n    this.#keyMap.clear()\n    this.#valList.fill(undefined)\n    this.#keyList.fill(undefined)\n    if (this.#ttls && this.#starts) {\n      this.#ttls.fill(0)\n      this.#starts.fill(0)\n    }\n    if (this.#sizes) {\n      this.#sizes.fill(0)\n    }\n    this.#head = 0 as Index\n    this.#tail = 0 as Index\n    this.#free.length = 0\n    this.#calculatedSize = 0\n    this.#size = 0\n    if (this.#hasDisposeAfter && this.#disposed) {\n      const dt = this.#disposed\n      let task: DisposeTask<K, V> | undefined\n      while ((task = dt?.shift())) {\n        this.#disposeAfter?.(...task)\n      }\n    }\n  }\n}\n", "const proc =\n  typeof process === 'object' && process\n    ? process\n    : {\n        stdout: null,\n        stderr: null,\n      }\nimport { EventEmitter } from 'node:events'\nimport Stream from 'node:stream'\nimport { StringDecoder } from 'node:string_decoder'\n\n/**\n * Same as StringDecoder, but exposing the `lastNeed` flag on the type\n */\ntype SD = StringDecoder & { lastNeed: boolean }\n\nexport type { SD, Pipe, PipeProxyErrors }\n\n/**\n * Return true if the argument is a Minipass stream, Node stream, or something\n * else that Minipass can interact with.\n */\nexport const isStream = (\n  s: any\n): s is Minipass.Readable | Minipass.Writable =>\n  !!s &&\n  typeof s === 'object' &&\n  (s instanceof Minipass ||\n    s instanceof Stream ||\n    isReadable(s) ||\n    isWritable(s))\n\n/**\n * Return true if the argument is a valid {@link Minipass.Readable}\n */\nexport const isReadable = (s: any): s is Minipass.Readable =>\n  !!s &&\n  typeof s === 'object' &&\n  s instanceof EventEmitter &&\n  typeof (s as Minipass.Readable).pipe === 'function' &&\n  // node core Writable streams have a pipe() method, but it throws\n  (s as Minipass.Readable).pipe !== Stream.Writable.prototype.pipe\n\n/**\n * Return true if the argument is a valid {@link Minipass.Writable}\n */\nexport const isWritable = (s: any): s is Minipass.Readable =>\n  !!s &&\n  typeof s === 'object' &&\n  s instanceof EventEmitter &&\n  typeof (s as Minipass.Writable).write === 'function' &&\n  typeof (s as Minipass.Writable).end === 'function'\n\nconst EOF = Symbol('EOF')\nconst MAYBE_EMIT_END = Symbol('maybeEmitEnd')\nconst EMITTED_END = Symbol('emittedEnd')\nconst EMITTING_END = Symbol('emittingEnd')\nconst EMITTED_ERROR = Symbol('emittedError')\nconst CLOSED = Symbol('closed')\nconst READ = Symbol('read')\nconst FLUSH = Symbol('flush')\nconst FLUSHCHUNK = Symbol('flushChunk')\nconst ENCODING = Symbol('encoding')\nconst DECODER = Symbol('decoder')\nconst FLOWING = Symbol('flowing')\nconst PAUSED = Symbol('paused')\nconst RESUME = Symbol('resume')\nconst BUFFER = Symbol('buffer')\nconst PIPES = Symbol('pipes')\nconst BUFFERLENGTH = Symbol('bufferLength')\nconst BUFFERPUSH = Symbol('bufferPush')\nconst BUFFERSHIFT = Symbol('bufferShift')\nconst OBJECTMODE = Symbol('objectMode')\n// internal event when stream is destroyed\nconst DESTROYED = Symbol('destroyed')\n// internal event when stream has an error\nconst ERROR = Symbol('error')\nconst EMITDATA = Symbol('emitData')\nconst EMITEND = Symbol('emitEnd')\nconst EMITEND2 = Symbol('emitEnd2')\nconst ASYNC = Symbol('async')\nconst ABORT = Symbol('abort')\nconst ABORTED = Symbol('aborted')\nconst SIGNAL = Symbol('signal')\nconst DATALISTENERS = Symbol('dataListeners')\nconst DISCARDED = Symbol('discarded')\n\nconst defer = (fn: (...a: any[]) => any) => Promise.resolve().then(fn)\nconst nodefer = (fn: (...a: any[]) => any) => fn()\n\n// events that mean 'the stream is over'\n// these are treated specially, and re-emitted\n// if they are listened for after emitting.\ntype EndishEvent = 'end' | 'finish' | 'prefinish'\nconst isEndish = (ev: any): ev is EndishEvent =>\n  ev === 'end' || ev === 'finish' || ev === 'prefinish'\n\nconst isArrayBufferLike = (b: any): b is ArrayBufferLike =>\n  b instanceof ArrayBuffer ||\n  (!!b &&\n    typeof b === 'object' &&\n    b.constructor &&\n    b.constructor.name === 'ArrayBuffer' &&\n    b.byteLength >= 0)\n\nconst isArrayBufferView = (b: any): b is ArrayBufferView =>\n  !Buffer.isBuffer(b) && ArrayBuffer.isView(b)\n\n/**\n * Options that may be passed to stream.pipe()\n */\nexport interface PipeOptions {\n  /**\n   * end the destination stream when the source stream ends\n   */\n  end?: boolean\n  /**\n   * proxy errors from the source stream to the destination stream\n   */\n  proxyErrors?: boolean\n}\n\n/**\n * Internal class representing a pipe to a destination stream.\n *\n * @internal\n */\nclass Pipe<T extends unknown> {\n  src: Minipass<T>\n  dest: Minipass<any, T>\n  opts: PipeOptions\n  ondrain: () => any\n  constructor(\n    src: Minipass<T>,\n    dest: Minipass.Writable,\n    opts: PipeOptions\n  ) {\n    this.src = src\n    this.dest = dest as Minipass<any, T>\n    this.opts = opts\n    this.ondrain = () => src[RESUME]()\n    this.dest.on('drain', this.ondrain)\n  }\n  unpipe() {\n    this.dest.removeListener('drain', this.ondrain)\n  }\n  // only here for the prototype\n  /* c8 ignore start */\n  proxyErrors(_er: any) {}\n  /* c8 ignore stop */\n  end() {\n    this.unpipe()\n    if (this.opts.end) this.dest.end()\n  }\n}\n\n/**\n * Internal class representing a pipe to a destination stream where\n * errors are proxied.\n *\n * @internal\n */\nclass PipeProxyErrors<T> extends Pipe<T> {\n  unpipe() {\n    this.src.removeListener('error', this.proxyErrors)\n    super.unpipe()\n  }\n  constructor(\n    src: Minipass<T>,\n    dest: Minipass.Writable,\n    opts: PipeOptions\n  ) {\n    super(src, dest, opts)\n    this.proxyErrors = er => dest.emit('error', er)\n    src.on('error', this.proxyErrors)\n  }\n}\n\nexport namespace Minipass {\n  /**\n   * Encoding used to create a stream that outputs strings rather than\n   * Buffer objects.\n   */\n  export type Encoding = BufferEncoding | 'buffer' | null\n\n  /**\n   * Any stream that Minipass can pipe into\n   */\n  export type Writable =\n    | Minipass<any, any, any>\n    | NodeJS.WriteStream\n    | (NodeJS.WriteStream & { fd: number })\n    | (EventEmitter & {\n        end(): any\n        write(chunk: any, ...args: any[]): any\n      })\n\n  /**\n   * Any stream that can be read from\n   */\n  export type Readable =\n    | Minipass<any, any, any>\n    | NodeJS.ReadStream\n    | (NodeJS.ReadStream & { fd: number })\n    | (EventEmitter & {\n        pause(): any\n        resume(): any\n        pipe(...destArgs: any[]): any\n      })\n\n  /**\n   * Utility type that can be iterated sync or async\n   */\n  export type DualIterable<T> = Iterable<T> & AsyncIterable<T>\n\n  type EventArguments = Record<string | symbol, unknown[]>\n\n  /**\n   * The listing of events that a Minipass class can emit.\n   * Extend this when extending the Minipass class, and pass as\n   * the third template argument.  The key is the name of the event,\n   * and the value is the argument list.\n   *\n   * Any undeclared events will still be allowed, but the handler will get\n   * arguments as `unknown[]`.\n   */\n  export interface Events<RType extends any = Buffer>\n    extends EventArguments {\n    readable: []\n    data: [chunk: RType]\n    error: [er: unknown]\n    abort: [reason: unknown]\n    drain: []\n    resume: []\n    end: []\n    finish: []\n    prefinish: []\n    close: []\n    [DESTROYED]: [er?: unknown]\n    [ERROR]: [er: unknown]\n  }\n\n  /**\n   * String or buffer-like data that can be joined and sliced\n   */\n  export type ContiguousData =\n    | Buffer\n    | ArrayBufferLike\n    | ArrayBufferView\n    | string\n  export type BufferOrString = Buffer | string\n\n  /**\n   * Options passed to the Minipass constructor.\n   */\n  export type SharedOptions = {\n    /**\n     * Defer all data emission and other events until the end of the\n     * current tick, similar to Node core streams\n     */\n    async?: boolean\n    /**\n     * A signal which will abort the stream\n     */\n    signal?: AbortSignal\n    /**\n     * Output string encoding. Set to `null` or `'buffer'` (or omit) to\n     * emit Buffer objects rather than strings.\n     *\n     * Conflicts with `objectMode`\n     */\n    encoding?: BufferEncoding | null | 'buffer'\n    /**\n     * Output data exactly as it was written, supporting non-buffer/string\n     * data (such as arbitrary objects, falsey values, etc.)\n     *\n     * Conflicts with `encoding`\n     */\n    objectMode?: boolean\n  }\n\n  /**\n   * Options for a string encoded output\n   */\n  export type EncodingOptions = SharedOptions & {\n    encoding: BufferEncoding\n    objectMode?: false\n  }\n\n  /**\n   * Options for contiguous data buffer output\n   */\n  export type BufferOptions = SharedOptions & {\n    encoding?: null | 'buffer'\n    objectMode?: false\n  }\n\n  /**\n   * Options for objectMode arbitrary output\n   */\n  export type ObjectModeOptions = SharedOptions & {\n    objectMode: true\n    encoding?: null\n  }\n\n  /**\n   * Utility type to determine allowed options based on read type\n   */\n  export type Options<T> =\n    | ObjectModeOptions\n    | (T extends string\n        ? EncodingOptions\n        : T extends Buffer\n        ? BufferOptions\n        : SharedOptions)\n}\n\nconst isObjectModeOptions = (\n  o: Minipass.SharedOptions\n): o is Minipass.ObjectModeOptions => !!o.objectMode\n\nconst isEncodingOptions = (\n  o: Minipass.SharedOptions\n): o is Minipass.EncodingOptions =>\n  !o.objectMode && !!o.encoding && o.encoding !== 'buffer'\n\n/**\n * Main export, the Minipass class\n *\n * `RType` is the type of data emitted, defaults to Buffer\n *\n * `WType` is the type of data to be written, if RType is buffer or string,\n * then any {@link Minipass.ContiguousData} is allowed.\n *\n * `Events` is the set of event handler signatures that this object\n * will emit, see {@link Minipass.Events}\n */\nexport class Minipass<\n    RType extends unknown = Buffer,\n    WType extends unknown = RType extends Minipass.BufferOrString\n      ? Minipass.ContiguousData\n      : RType,\n    Events extends Minipass.Events<RType> = Minipass.Events<RType>\n  >\n  extends EventEmitter\n  implements Minipass.DualIterable<RType>\n{\n  [FLOWING]: boolean = false;\n  [PAUSED]: boolean = false;\n  [PIPES]: Pipe<RType>[] = [];\n  [BUFFER]: RType[] = [];\n  [OBJECTMODE]: boolean;\n  [ENCODING]: BufferEncoding | null;\n  [ASYNC]: boolean;\n  [DECODER]: SD | null;\n  [EOF]: boolean = false;\n  [EMITTED_END]: boolean = false;\n  [EMITTING_END]: boolean = false;\n  [CLOSED]: boolean = false;\n  [EMITTED_ERROR]: unknown = null;\n  [BUFFERLENGTH]: number = 0;\n  [DESTROYED]: boolean = false;\n  [SIGNAL]?: AbortSignal;\n  [ABORTED]: boolean = false;\n  [DATALISTENERS]: number = 0;\n  [DISCARDED]: boolean = false\n\n  /**\n   * true if the stream can be written\n   */\n  writable: boolean = true\n  /**\n   * true if the stream can be read\n   */\n  readable: boolean = true\n\n  /**\n   * If `RType` is Buffer, then options do not need to be provided.\n   * Otherwise, an options object must be provided to specify either\n   * {@link Minipass.SharedOptions.objectMode} or\n   * {@link Minipass.SharedOptions.encoding}, as appropriate.\n   */\n  constructor(\n    ...args:\n      | [Minipass.ObjectModeOptions]\n      | (RType extends Buffer\n          ? [] | [Minipass.Options<RType>]\n          : [Minipass.Options<RType>])\n  ) {\n    const options: Minipass.Options<RType> = (args[0] ||\n      {}) as Minipass.Options<RType>\n    super()\n    if (options.objectMode && typeof options.encoding === 'string') {\n      throw new TypeError(\n        'Encoding and objectMode may not be used together'\n      )\n    }\n    if (isObjectModeOptions(options)) {\n      this[OBJECTMODE] = true\n      this[ENCODING] = null\n    } else if (isEncodingOptions(options)) {\n      this[ENCODING] = options.encoding\n      this[OBJECTMODE] = false\n    } else {\n      this[OBJECTMODE] = false\n      this[ENCODING] = null\n    }\n    this[ASYNC] = !!options.async\n    this[DECODER] = this[ENCODING]\n      ? (new StringDecoder(this[ENCODING]) as SD)\n      : null\n\n    //@ts-ignore - private option for debugging and testing\n    if (options && options.debugExposeBuffer === true) {\n      Object.defineProperty(this, 'buffer', { get: () => this[BUFFER] })\n    }\n    //@ts-ignore - private option for debugging and testing\n    if (options && options.debugExposePipes === true) {\n      Object.defineProperty(this, 'pipes', { get: () => this[PIPES] })\n    }\n\n    const { signal } = options\n    if (signal) {\n      this[SIGNAL] = signal\n      if (signal.aborted) {\n        this[ABORT]()\n      } else {\n        signal.addEventListener('abort', () => this[ABORT]())\n      }\n    }\n  }\n\n  /**\n   * The amount of data stored in the buffer waiting to be read.\n   *\n   * For Buffer strings, this will be the total byte length.\n   * For string encoding streams, this will be the string character length,\n   * according to JavaScript's `string.length` logic.\n   * For objectMode streams, this is a count of the items waiting to be\n   * emitted.\n   */\n  get bufferLength() {\n    return this[BUFFERLENGTH]\n  }\n\n  /**\n   * The `BufferEncoding` currently in use, or `null`\n   */\n  get encoding() {\n    return this[ENCODING]\n  }\n\n  /**\n   * @deprecated - This is a read only property\n   */\n  set encoding(_enc) {\n    throw new Error('Encoding must be set at instantiation time')\n  }\n\n  /**\n   * @deprecated - Encoding may only be set at instantiation time\n   */\n  setEncoding(_enc: Minipass.Encoding) {\n    throw new Error('Encoding must be set at instantiation time')\n  }\n\n  /**\n   * True if this is an objectMode stream\n   */\n  get objectMode() {\n    return this[OBJECTMODE]\n  }\n\n  /**\n   * @deprecated - This is a read-only property\n   */\n  set objectMode(_om) {\n    throw new Error('objectMode must be set at instantiation time')\n  }\n\n  /**\n   * true if this is an async stream\n   */\n  get ['async'](): boolean {\n    return this[ASYNC]\n  }\n  /**\n   * Set to true to make this stream async.\n   *\n   * Once set, it cannot be unset, as this would potentially cause incorrect\n   * behavior.  Ie, a sync stream can be made async, but an async stream\n   * cannot be safely made sync.\n   */\n  set ['async'](a: boolean) {\n    this[ASYNC] = this[ASYNC] || !!a\n  }\n\n  // drop everything and get out of the flow completely\n  [ABORT]() {\n    this[ABORTED] = true\n    this.emit('abort', this[SIGNAL]?.reason)\n    this.destroy(this[SIGNAL]?.reason)\n  }\n\n  /**\n   * True if the stream has been aborted.\n   */\n  get aborted() {\n    return this[ABORTED]\n  }\n  /**\n   * No-op setter. Stream aborted status is set via the AbortSignal provided\n   * in the constructor options.\n   */\n  set aborted(_) {}\n\n  /**\n   * Write data into the stream\n   *\n   * If the chunk written is a string, and encoding is not specified, then\n   * `utf8` will be assumed. If the stream encoding matches the encoding of\n   * a written string, and the state of the string decoder allows it, then\n   * the string will be passed through to either the output or the internal\n   * buffer without any processing. Otherwise, it will be turned into a\n   * Buffer object for processing into the desired encoding.\n   *\n   * If provided, `cb` function is called immediately before return for\n   * sync streams, or on next tick for async streams, because for this\n   * base class, a chunk is considered \"processed\" once it is accepted\n   * and either emitted or buffered. That is, the callback does not indicate\n   * that the chunk has been eventually emitted, though of course child\n   * classes can override this function to do whatever processing is required\n   * and call `super.write(...)` only once processing is completed.\n   */\n  write(chunk: WType, cb?: () => void): boolean\n  write(\n    chunk: WType,\n    encoding?: Minipass.Encoding,\n    cb?: () => void\n  ): boolean\n  write(\n    chunk: WType,\n    encoding?: Minipass.Encoding | (() => void),\n    cb?: () => void\n  ): boolean {\n    if (this[ABORTED]) return false\n    if (this[EOF]) throw new Error('write after end')\n\n    if (this[DESTROYED]) {\n      this.emit(\n        'error',\n        Object.assign(\n          new Error('Cannot call write after a stream was destroyed'),\n          { code: 'ERR_STREAM_DESTROYED' }\n        )\n      )\n      return true\n    }\n\n    if (typeof encoding === 'function') {\n      cb = encoding\n      encoding = 'utf8'\n    }\n\n    if (!encoding) encoding = 'utf8'\n\n    const fn = this[ASYNC] ? defer : nodefer\n\n    // convert array buffers and typed array views into buffers\n    // at some point in the future, we may want to do the opposite!\n    // leave strings and buffers as-is\n    // anything is only allowed if in object mode, so throw\n    if (!this[OBJECTMODE] && !Buffer.isBuffer(chunk)) {\n      if (isArrayBufferView(chunk)) {\n        //@ts-ignore - sinful unsafe type changing\n        chunk = Buffer.from(\n          chunk.buffer,\n          chunk.byteOffset,\n          chunk.byteLength\n        )\n      } else if (isArrayBufferLike(chunk)) {\n        //@ts-ignore - sinful unsafe type changing\n        chunk = Buffer.from(chunk)\n      } else if (typeof chunk !== 'string') {\n        throw new Error(\n          'Non-contiguous data written to non-objectMode stream'\n        )\n      }\n    }\n\n    // handle object mode up front, since it's simpler\n    // this yields better performance, fewer checks later.\n    if (this[OBJECTMODE]) {\n      // maybe impossible?\n      /* c8 ignore start */\n      if (this[FLOWING] && this[BUFFERLENGTH] !== 0) this[FLUSH](true)\n      /* c8 ignore stop */\n\n      if (this[FLOWING]) this.emit('data', chunk as unknown as RType)\n      else this[BUFFERPUSH](chunk as unknown as RType)\n\n      if (this[BUFFERLENGTH] !== 0) this.emit('readable')\n\n      if (cb) fn(cb)\n\n      return this[FLOWING]\n    }\n\n    // at this point the chunk is a buffer or string\n    // don't buffer it up or send it to the decoder\n    if (!(chunk as Minipass.BufferOrString).length) {\n      if (this[BUFFERLENGTH] !== 0) this.emit('readable')\n      if (cb) fn(cb)\n      return this[FLOWING]\n    }\n\n    // fast-path writing strings of same encoding to a stream with\n    // an empty buffer, skipping the buffer/decoder dance\n    if (\n      typeof chunk === 'string' &&\n      // unless it is a string already ready for us to use\n      !(encoding === this[ENCODING] && !this[DECODER]?.lastNeed)\n    ) {\n      //@ts-ignore - sinful unsafe type change\n      chunk = Buffer.from(chunk, encoding)\n    }\n\n    if (Buffer.isBuffer(chunk) && this[ENCODING]) {\n      //@ts-ignore - sinful unsafe type change\n      chunk = this[DECODER].write(chunk)\n    }\n\n    // Note: flushing CAN potentially switch us into not-flowing mode\n    if (this[FLOWING] && this[BUFFERLENGTH] !== 0) this[FLUSH](true)\n\n    if (this[FLOWING]) this.emit('data', chunk as unknown as RType)\n    else this[BUFFERPUSH](chunk as unknown as RType)\n\n    if (this[BUFFERLENGTH] !== 0) this.emit('readable')\n\n    if (cb) fn(cb)\n\n    return this[FLOWING]\n  }\n\n  /**\n   * Low-level explicit read method.\n   *\n   * In objectMode, the argument is ignored, and one item is returned if\n   * available.\n   *\n   * `n` is the number of bytes (or in the case of encoding streams,\n   * characters) to consume. If `n` is not provided, then the entire buffer\n   * is returned, or `null` is returned if no data is available.\n   *\n   * If `n` is greater that the amount of data in the internal buffer,\n   * then `null` is returned.\n   */\n  read(n?: number | null): RType | null {\n    if (this[DESTROYED]) return null\n    this[DISCARDED] = false\n\n    if (\n      this[BUFFERLENGTH] === 0 ||\n      n === 0 ||\n      (n && n > this[BUFFERLENGTH])\n    ) {\n      this[MAYBE_EMIT_END]()\n      return null\n    }\n\n    if (this[OBJECTMODE]) n = null\n\n    if (this[BUFFER].length > 1 && !this[OBJECTMODE]) {\n      // not object mode, so if we have an encoding, then RType is string\n      // otherwise, must be Buffer\n      this[BUFFER] = [\n        (this[ENCODING]\n          ? this[BUFFER].join('')\n          : Buffer.concat(\n              this[BUFFER] as Buffer[],\n              this[BUFFERLENGTH]\n            )) as RType,\n      ]\n    }\n\n    const ret = this[READ](n || null, this[BUFFER][0] as RType)\n    this[MAYBE_EMIT_END]()\n    return ret\n  }\n\n  [READ](n: number | null, chunk: RType) {\n    if (this[OBJECTMODE]) this[BUFFERSHIFT]()\n    else {\n      const c = chunk as Minipass.BufferOrString\n      if (n === c.length || n === null) this[BUFFERSHIFT]()\n      else if (typeof c === 'string') {\n        this[BUFFER][0] = c.slice(n) as RType\n        chunk = c.slice(0, n) as RType\n        this[BUFFERLENGTH] -= n\n      } else {\n        this[BUFFER][0] = c.subarray(n) as RType\n        chunk = c.subarray(0, n) as RType\n        this[BUFFERLENGTH] -= n\n      }\n    }\n\n    this.emit('data', chunk)\n\n    if (!this[BUFFER].length && !this[EOF]) this.emit('drain')\n\n    return chunk\n  }\n\n  /**\n   * End the stream, optionally providing a final write.\n   *\n   * See {@link Minipass#write} for argument descriptions\n   */\n  end(cb?: () => void): this\n  end(chunk: WType, cb?: () => void): this\n  end(chunk: WType, encoding?: Minipass.Encoding, cb?: () => void): this\n  end(\n    chunk?: WType | (() => void),\n    encoding?: Minipass.Encoding | (() => void),\n    cb?: () => void\n  ): this {\n    if (typeof chunk === 'function') {\n      cb = chunk as () => void\n      chunk = undefined\n    }\n    if (typeof encoding === 'function') {\n      cb = encoding\n      encoding = 'utf8'\n    }\n    if (chunk !== undefined) this.write(chunk, encoding)\n    if (cb) this.once('end', cb)\n    this[EOF] = true\n    this.writable = false\n\n    // if we haven't written anything, then go ahead and emit,\n    // even if we're not reading.\n    // we'll re-emit if a new 'end' listener is added anyway.\n    // This makes MP more suitable to write-only use cases.\n    if (this[FLOWING] || !this[PAUSED]) this[MAYBE_EMIT_END]()\n    return this\n  }\n\n  // don't let the internal resume be overwritten\n  [RESUME]() {\n    if (this[DESTROYED]) return\n\n    if (!this[DATALISTENERS] && !this[PIPES].length) {\n      this[DISCARDED] = true\n    }\n    this[PAUSED] = false\n    this[FLOWING] = true\n    this.emit('resume')\n    if (this[BUFFER].length) this[FLUSH]()\n    else if (this[EOF]) this[MAYBE_EMIT_END]()\n    else this.emit('drain')\n  }\n\n  /**\n   * Resume the stream if it is currently in a paused state\n   *\n   * If called when there are no pipe destinations or `data` event listeners,\n   * this will place the stream in a \"discarded\" state, where all data will\n   * be thrown away. The discarded state is removed if a pipe destination or\n   * data handler is added, if pause() is called, or if any synchronous or\n   * asynchronous iteration is started.\n   */\n  resume() {\n    return this[RESUME]()\n  }\n\n  /**\n   * Pause the stream\n   */\n  pause() {\n    this[FLOWING] = false\n    this[PAUSED] = true\n    this[DISCARDED] = false\n  }\n\n  /**\n   * true if the stream has been forcibly destroyed\n   */\n  get destroyed() {\n    return this[DESTROYED]\n  }\n\n  /**\n   * true if the stream is currently in a flowing state, meaning that\n   * any writes will be immediately emitted.\n   */\n  get flowing() {\n    return this[FLOWING]\n  }\n\n  /**\n   * true if the stream is currently in a paused state\n   */\n  get paused() {\n    return this[PAUSED]\n  }\n\n  [BUFFERPUSH](chunk: RType) {\n    if (this[OBJECTMODE]) this[BUFFERLENGTH] += 1\n    else this[BUFFERLENGTH] += (chunk as Minipass.BufferOrString).length\n    this[BUFFER].push(chunk)\n  }\n\n  [BUFFERSHIFT](): RType {\n    if (this[OBJECTMODE]) this[BUFFERLENGTH] -= 1\n    else\n      this[BUFFERLENGTH] -= (\n        this[BUFFER][0] as Minipass.BufferOrString\n      ).length\n    return this[BUFFER].shift() as RType\n  }\n\n  [FLUSH](noDrain: boolean = false) {\n    do {} while (\n      this[FLUSHCHUNK](this[BUFFERSHIFT]()) &&\n      this[BUFFER].length\n    )\n\n    if (!noDrain && !this[BUFFER].length && !this[EOF]) this.emit('drain')\n  }\n\n  [FLUSHCHUNK](chunk: RType) {\n    this.emit('data', chunk)\n    return this[FLOWING]\n  }\n\n  /**\n   * Pipe all data emitted by this stream into the destination provided.\n   *\n   * Triggers the flow of data.\n   */\n  pipe<W extends Minipass.Writable>(dest: W, opts?: PipeOptions): W {\n    if (this[DESTROYED]) return dest\n    this[DISCARDED] = false\n\n    const ended = this[EMITTED_END]\n    opts = opts || {}\n    if (dest === proc.stdout || dest === proc.stderr) opts.end = false\n    else opts.end = opts.end !== false\n    opts.proxyErrors = !!opts.proxyErrors\n\n    // piping an ended stream ends immediately\n    if (ended) {\n      if (opts.end) dest.end()\n    } else {\n      // \"as\" here just ignores the WType, which pipes don't care about,\n      // since they're only consuming from us, and writing to the dest\n      this[PIPES].push(\n        !opts.proxyErrors\n          ? new Pipe<RType>(this as Minipass<RType>, dest, opts)\n          : new PipeProxyErrors<RType>(this as Minipass<RType>, dest, opts)\n      )\n      if (this[ASYNC]) defer(() => this[RESUME]())\n      else this[RESUME]()\n    }\n\n    return dest\n  }\n\n  /**\n   * Fully unhook a piped destination stream.\n   *\n   * If the destination stream was the only consumer of this stream (ie,\n   * there are no other piped destinations or `'data'` event listeners)\n   * then the flow of data will stop until there is another consumer or\n   * {@link Minipass#resume} is explicitly called.\n   */\n  unpipe<W extends Minipass.Writable>(dest: W) {\n    const p = this[PIPES].find(p => p.dest === dest)\n    if (p) {\n      if (this[PIPES].length === 1) {\n        if (this[FLOWING] && this[DATALISTENERS] === 0) {\n          this[FLOWING] = false\n        }\n        this[PIPES] = []\n      } else this[PIPES].splice(this[PIPES].indexOf(p), 1)\n      p.unpipe()\n    }\n  }\n\n  /**\n   * Alias for {@link Minipass#on}\n   */\n  addListener<Event extends keyof Events>(\n    ev: Event,\n    handler: (...args: Events[Event]) => any\n  ): this {\n    return this.on(ev, handler)\n  }\n\n  /**\n   * Mostly identical to `EventEmitter.on`, with the following\n   * behavior differences to prevent data loss and unnecessary hangs:\n   *\n   * - Adding a 'data' event handler will trigger the flow of data\n   *\n   * - Adding a 'readable' event handler when there is data waiting to be read\n   *   will cause 'readable' to be emitted immediately.\n   *\n   * - Adding an 'endish' event handler ('end', 'finish', etc.) which has\n   *   already passed will cause the event to be emitted immediately and all\n   *   handlers removed.\n   *\n   * - Adding an 'error' event handler after an error has been emitted will\n   *   cause the event to be re-emitted immediately with the error previously\n   *   raised.\n   */\n  on<Event extends keyof Events>(\n    ev: Event,\n    handler: (...args: Events[Event]) => any\n  ): this {\n    const ret = super.on(\n      ev as string | symbol,\n      handler as (...a: any[]) => any\n    )\n    if (ev === 'data') {\n      this[DISCARDED] = false\n      this[DATALISTENERS]++\n      if (!this[PIPES].length && !this[FLOWING]) {\n        this[RESUME]()\n      }\n    } else if (ev === 'readable' && this[BUFFERLENGTH] !== 0) {\n      super.emit('readable')\n    } else if (isEndish(ev) && this[EMITTED_END]) {\n      super.emit(ev)\n      this.removeAllListeners(ev)\n    } else if (ev === 'error' && this[EMITTED_ERROR]) {\n      const h = handler as (...a: Events['error']) => any\n      if (this[ASYNC]) defer(() => h.call(this, this[EMITTED_ERROR]))\n      else h.call(this, this[EMITTED_ERROR])\n    }\n    return ret\n  }\n\n  /**\n   * Alias for {@link Minipass#off}\n   */\n  removeListener<Event extends keyof Events>(\n    ev: Event,\n    handler: (...args: Events[Event]) => any\n  ) {\n    return this.off(ev, handler)\n  }\n\n  /**\n   * Mostly identical to `EventEmitter.off`\n   *\n   * If a 'data' event handler is removed, and it was the last consumer\n   * (ie, there are no pipe destinations or other 'data' event listeners),\n   * then the flow of data will stop until there is another consumer or\n   * {@link Minipass#resume} is explicitly called.\n   */\n  off<Event extends keyof Events>(\n    ev: Event,\n    handler: (...args: Events[Event]) => any\n  ) {\n    const ret = super.off(\n      ev as string | symbol,\n      handler as (...a: any[]) => any\n    )\n    // if we previously had listeners, and now we don't, and we don't\n    // have any pipes, then stop the flow, unless it's been explicitly\n    // put in a discarded flowing state via stream.resume().\n    if (ev === 'data') {\n      this[DATALISTENERS] = this.listeners('data').length\n      if (\n        this[DATALISTENERS] === 0 &&\n        !this[DISCARDED] &&\n        !this[PIPES].length\n      ) {\n        this[FLOWING] = false\n      }\n    }\n    return ret\n  }\n\n  /**\n   * Mostly identical to `EventEmitter.removeAllListeners`\n   *\n   * If all 'data' event handlers are removed, and they were the last consumer\n   * (ie, there are no pipe destinations), then the flow of data will stop\n   * until there is another consumer or {@link Minipass#resume} is explicitly\n   * called.\n   */\n  removeAllListeners<Event extends keyof Events>(ev?: Event) {\n    const ret = super.removeAllListeners(ev as string | symbol | undefined)\n    if (ev === 'data' || ev === undefined) {\n      this[DATALISTENERS] = 0\n      if (!this[DISCARDED] && !this[PIPES].length) {\n        this[FLOWING] = false\n      }\n    }\n    return ret\n  }\n\n  /**\n   * true if the 'end' event has been emitted\n   */\n  get emittedEnd() {\n    return this[EMITTED_END]\n  }\n\n  [MAYBE_EMIT_END]() {\n    if (\n      !this[EMITTING_END] &&\n      !this[EMITTED_END] &&\n      !this[DESTROYED] &&\n      this[BUFFER].length === 0 &&\n      this[EOF]\n    ) {\n      this[EMITTING_END] = true\n      this.emit('end')\n      this.emit('prefinish')\n      this.emit('finish')\n      if (this[CLOSED]) this.emit('close')\n      this[EMITTING_END] = false\n    }\n  }\n\n  /**\n   * Mostly identical to `EventEmitter.emit`, with the following\n   * behavior differences to prevent data loss and unnecessary hangs:\n   *\n   * If the stream has been destroyed, and the event is something other\n   * than 'close' or 'error', then `false` is returned and no handlers\n   * are called.\n   *\n   * If the event is 'end', and has already been emitted, then the event\n   * is ignored. If the stream is in a paused or non-flowing state, then\n   * the event will be deferred until data flow resumes. If the stream is\n   * async, then handlers will be called on the next tick rather than\n   * immediately.\n   *\n   * If the event is 'close', and 'end' has not yet been emitted, then\n   * the event will be deferred until after 'end' is emitted.\n   *\n   * If the event is 'error', and an AbortSignal was provided for the stream,\n   * and there are no listeners, then the event is ignored, matching the\n   * behavior of node core streams in the presense of an AbortSignal.\n   *\n   * If the event is 'finish' or 'prefinish', then all listeners will be\n   * removed after emitting the event, to prevent double-firing.\n   */\n  emit<Event extends keyof Events>(\n    ev: Event,\n    ...args: Events[Event]\n  ): boolean {\n    const data = args[0]\n    // error and close are only events allowed after calling destroy()\n    if (\n      ev !== 'error' &&\n      ev !== 'close' &&\n      ev !== DESTROYED &&\n      this[DESTROYED]\n    ) {\n      return false\n    } else if (ev === 'data') {\n      return !this[OBJECTMODE] && !data\n        ? false\n        : this[ASYNC]\n        ? (defer(() => this[EMITDATA](data as RType)), true)\n        : this[EMITDATA](data as RType)\n    } else if (ev === 'end') {\n      return this[EMITEND]()\n    } else if (ev === 'close') {\n      this[CLOSED] = true\n      // don't emit close before 'end' and 'finish'\n      if (!this[EMITTED_END] && !this[DESTROYED]) return false\n      const ret = super.emit('close')\n      this.removeAllListeners('close')\n      return ret\n    } else if (ev === 'error') {\n      this[EMITTED_ERROR] = data\n      super.emit(ERROR, data)\n      const ret =\n        !this[SIGNAL] || this.listeners('error').length\n          ? super.emit('error', data)\n          : false\n      this[MAYBE_EMIT_END]()\n      return ret\n    } else if (ev === 'resume') {\n      const ret = super.emit('resume')\n      this[MAYBE_EMIT_END]()\n      return ret\n    } else if (ev === 'finish' || ev === 'prefinish') {\n      const ret = super.emit(ev)\n      this.removeAllListeners(ev)\n      return ret\n    }\n\n    // Some other unknown event\n    const ret = super.emit(ev as string, ...args)\n    this[MAYBE_EMIT_END]()\n    return ret\n  }\n\n  [EMITDATA](data: RType) {\n    for (const p of this[PIPES]) {\n      if (p.dest.write(data as RType) === false) this.pause()\n    }\n    const ret = this[DISCARDED] ? false : super.emit('data', data)\n    this[MAYBE_EMIT_END]()\n    return ret\n  }\n\n  [EMITEND]() {\n    if (this[EMITTED_END]) return false\n\n    this[EMITTED_END] = true\n    this.readable = false\n    return this[ASYNC]\n      ? (defer(() => this[EMITEND2]()), true)\n      : this[EMITEND2]()\n  }\n\n  [EMITEND2]() {\n    if (this[DECODER]) {\n      const data = this[DECODER].end()\n      if (data) {\n        for (const p of this[PIPES]) {\n          p.dest.write(data as RType)\n        }\n        if (!this[DISCARDED]) super.emit('data', data)\n      }\n    }\n\n    for (const p of this[PIPES]) {\n      p.end()\n    }\n    const ret = super.emit('end')\n    this.removeAllListeners('end')\n    return ret\n  }\n\n  /**\n   * Return a Promise that resolves to an array of all emitted data once\n   * the stream ends.\n   */\n  async collect(): Promise<RType[] & { dataLength: number }> {\n    const buf: RType[] & { dataLength: number } = Object.assign([], {\n      dataLength: 0,\n    })\n    if (!this[OBJECTMODE]) buf.dataLength = 0\n    // set the promise first, in case an error is raised\n    // by triggering the flow here.\n    const p = this.promise()\n    this.on('data', c => {\n      buf.push(c)\n      if (!this[OBJECTMODE])\n        buf.dataLength += (c as Minipass.BufferOrString).length\n    })\n    await p\n    return buf\n  }\n\n  /**\n   * Return a Promise that resolves to the concatenation of all emitted data\n   * once the stream ends.\n   *\n   * Not allowed on objectMode streams.\n   */\n  async concat(): Promise<RType> {\n    if (this[OBJECTMODE]) {\n      throw new Error('cannot concat in objectMode')\n    }\n    const buf = await this.collect()\n    return (\n      this[ENCODING]\n        ? buf.join('')\n        : Buffer.concat(buf as Buffer[], buf.dataLength)\n    ) as RType\n  }\n\n  /**\n   * Return a void Promise that resolves once the stream ends.\n   */\n  async promise(): Promise<void> {\n    return new Promise<void>((resolve, reject) => {\n      this.on(DESTROYED, () => reject(new Error('stream destroyed')))\n      this.on('error', er => reject(er))\n      this.on('end', () => resolve())\n    })\n  }\n\n  /**\n   * Asynchronous `for await of` iteration.\n   *\n   * This will continue emitting all chunks until the stream terminates.\n   */\n  [Symbol.asyncIterator](): AsyncGenerator<RType, void, void> {\n    // set this up front, in case the consumer doesn't call next()\n    // right away.\n    this[DISCARDED] = false\n    let stopped = false\n    const stop = async (): Promise<IteratorReturnResult<void>> => {\n      this.pause()\n      stopped = true\n      return { value: undefined, done: true }\n    }\n    const next = (): Promise<IteratorResult<RType, void>> => {\n      if (stopped) return stop()\n      const res = this.read()\n      if (res !== null) return Promise.resolve({ done: false, value: res })\n\n      if (this[EOF]) return stop()\n\n      let resolve!: (res: IteratorResult<RType>) => void\n      let reject!: (er: unknown) => void\n      const onerr = (er: unknown) => {\n        this.off('data', ondata)\n        this.off('end', onend)\n        this.off(DESTROYED, ondestroy)\n        stop()\n        reject(er)\n      }\n      const ondata = (value: RType) => {\n        this.off('error', onerr)\n        this.off('end', onend)\n        this.off(DESTROYED, ondestroy)\n        this.pause()\n        resolve({ value, done: !!this[EOF] })\n      }\n      const onend = () => {\n        this.off('error', onerr)\n        this.off('data', ondata)\n        this.off(DESTROYED, ondestroy)\n        stop()\n        resolve({ done: true, value: undefined })\n      }\n      const ondestroy = () => onerr(new Error('stream destroyed'))\n      return new Promise<IteratorResult<RType>>((res, rej) => {\n        reject = rej\n        resolve = res\n        this.once(DESTROYED, ondestroy)\n        this.once('error', onerr)\n        this.once('end', onend)\n        this.once('data', ondata)\n      })\n    }\n\n    return {\n      next,\n      throw: stop,\n      return: stop,\n      [Symbol.asyncIterator]() {\n        return this\n      },\n    }\n  }\n\n  /**\n   * Synchronous `for of` iteration.\n   *\n   * The iteration will terminate when the internal buffer runs out, even\n   * if the stream has not yet terminated.\n   */\n  [Symbol.iterator](): Generator<RType, void, void> {\n    // set this up front, in case the consumer doesn't call next()\n    // right away.\n    this[DISCARDED] = false\n    let stopped = false\n    const stop = (): IteratorReturnResult<void> => {\n      this.pause()\n      this.off(ERROR, stop)\n      this.off(DESTROYED, stop)\n      this.off('end', stop)\n      stopped = true\n      return { done: true, value: undefined }\n    }\n\n    const next = (): IteratorResult<RType, void> => {\n      if (stopped) return stop()\n      const value = this.read()\n      return value === null ? stop() : { done: false, value }\n    }\n\n    this.once('end', stop)\n    this.once(ERROR, stop)\n    this.once(DESTROYED, stop)\n\n    return {\n      next,\n      throw: stop,\n      return: stop,\n      [Symbol.iterator]() {\n        return this\n      },\n    }\n  }\n\n  /**\n   * Destroy a stream, preventing it from being used for any further purpose.\n   *\n   * If the stream has a `close()` method, then it will be called on\n   * destruction.\n   *\n   * After destruction, any attempt to write data, read data, or emit most\n   * events will be ignored.\n   *\n   * If an error argument is provided, then it will be emitted in an\n   * 'error' event.\n   */\n  destroy(er?: unknown) {\n    if (this[DESTROYED]) {\n      if (er) this.emit('error', er)\n      else this.emit(DESTROYED)\n      return this\n    }\n\n    this[DESTROYED] = true\n    this[DISCARDED] = true\n\n    // throw away all buffered data, it's never coming out\n    this[BUFFER].length = 0\n    this[BUFFERLENGTH] = 0\n\n    const wc = this as Minipass<RType, WType, Events> & {\n      close?: () => void\n    }\n    if (typeof wc.close === 'function' && !this[CLOSED]) wc.close()\n\n    if (er) this.emit('error', er)\n    // if no error to emit, still reject pending promises\n    else this.emit(DESTROYED)\n\n    return this\n  }\n\n  /**\n   * Alias for {@link isStream}\n   *\n   * Former export location, maintained for backwards compatibility.\n   *\n   * @deprecated\n   */\n  static get isStream() {\n    return isStream\n  }\n}\n", "// this is just a very light wrapper around 2 arrays with an offset index\n\nimport { GLOBSTAR } from 'minimatch'\nexport type MMPattern = string | RegExp | typeof GLOBSTAR\n\n// an array of length >= 1\nexport type PatternList = [p: MMPattern, ...rest: MMPattern[]]\nexport type UNCPatternList = [\n  p0: '',\n  p1: '',\n  p2: string,\n  p3: string,\n  ...rest: MMPattern[],\n]\nexport type DrivePatternList = [p0: string, ...rest: MMPattern[]]\nexport type AbsolutePatternList = [p0: '', ...rest: MMPattern[]]\nexport type GlobList = [p: string, ...rest: string[]]\n\nconst isPatternList = (pl: MMPattern[]): pl is PatternList =>\n  pl.length >= 1\nconst isGlobList = (gl: string[]): gl is GlobList => gl.length >= 1\n\n/**\n * An immutable-ish view on an array of glob parts and their parsed\n * results\n */\nexport class Pattern {\n  readonly #patternList: PatternList\n  readonly #globList: GlobList\n  readonly #index: number\n  readonly length: number\n  readonly #platform: NodeJS.Platform\n  #rest?: Pattern | null\n  #globString?: string\n  #isDrive?: boolean\n  #isUNC?: boolean\n  #isAbsolute?: boolean\n  #followGlobstar: boolean = true\n\n  constructor(\n    patternList: MMPattern[],\n    globList: string[],\n    index: number,\n    platform: NodeJS.Platform,\n  ) {\n    if (!isPatternList(patternList)) {\n      throw new TypeError('empty pattern list')\n    }\n    if (!isGlobList(globList)) {\n      throw new TypeError('empty glob list')\n    }\n    if (globList.length !== patternList.length) {\n      throw new TypeError('mismatched pattern list and glob list lengths')\n    }\n    this.length = patternList.length\n    if (index < 0 || index >= this.length) {\n      throw new TypeError('index out of range')\n    }\n    this.#patternList = patternList\n    this.#globList = globList\n    this.#index = index\n    this.#platform = platform\n\n    // normalize root entries of absolute patterns on initial creation.\n    if (this.#index === 0) {\n      // c: => ['c:/']\n      // C:/ => ['C:/']\n      // C:/x => ['C:/', 'x']\n      // //host/share => ['//host/share/']\n      // //host/share/ => ['//host/share/']\n      // //host/share/x => ['//host/share/', 'x']\n      // /etc => ['/', 'etc']\n      // / => ['/']\n      if (this.isUNC()) {\n        // '' / '' / 'host' / 'share'\n        const [p0, p1, p2, p3, ...prest] = this.#patternList\n        const [g0, g1, g2, g3, ...grest] = this.#globList\n        if (prest[0] === '') {\n          // ends in /\n          prest.shift()\n          grest.shift()\n        }\n        const p = [p0, p1, p2, p3, ''].join('/')\n        const g = [g0, g1, g2, g3, ''].join('/')\n        this.#patternList = [p, ...prest]\n        this.#globList = [g, ...grest]\n        this.length = this.#patternList.length\n      } else if (this.isDrive() || this.isAbsolute()) {\n        const [p1, ...prest] = this.#patternList\n        const [g1, ...grest] = this.#globList\n        if (prest[0] === '') {\n          // ends in /\n          prest.shift()\n          grest.shift()\n        }\n        const p = (p1 as string) + '/'\n        const g = g1 + '/'\n        this.#patternList = [p, ...prest]\n        this.#globList = [g, ...grest]\n        this.length = this.#patternList.length\n      }\n    }\n  }\n\n  /**\n   * The first entry in the parsed list of patterns\n   */\n  pattern(): MMPattern {\n    return this.#patternList[this.#index] as MMPattern\n  }\n\n  /**\n   * true of if pattern() returns a string\n   */\n  isString(): boolean {\n    return typeof this.#patternList[this.#index] === 'string'\n  }\n  /**\n   * true of if pattern() returns GLOBSTAR\n   */\n  isGlobstar(): boolean {\n    return this.#patternList[this.#index] === GLOBSTAR\n  }\n  /**\n   * true if pattern() returns a regexp\n   */\n  isRegExp(): boolean {\n    return this.#patternList[this.#index] instanceof RegExp\n  }\n\n  /**\n   * The /-joined set of glob parts that make up this pattern\n   */\n  globString(): string {\n    return (this.#globString =\n      this.#globString ||\n      (this.#index === 0 ?\n        this.isAbsolute() ?\n          this.#globList[0] + this.#globList.slice(1).join('/')\n        : this.#globList.join('/')\n      : this.#globList.slice(this.#index).join('/')))\n  }\n\n  /**\n   * true if there are more pattern parts after this one\n   */\n  hasMore(): boolean {\n    return this.length > this.#index + 1\n  }\n\n  /**\n   * The rest of the pattern after this part, or null if this is the end\n   */\n  rest(): Pattern | null {\n    if (this.#rest !== undefined) return this.#rest\n    if (!this.hasMore()) return (this.#rest = null)\n    this.#rest = new Pattern(\n      this.#patternList,\n      this.#globList,\n      this.#index + 1,\n      this.#platform,\n    )\n    this.#rest.#isAbsolute = this.#isAbsolute\n    this.#rest.#isUNC = this.#isUNC\n    this.#rest.#isDrive = this.#isDrive\n    return this.#rest\n  }\n\n  /**\n   * true if the pattern represents a //unc/path/ on windows\n   */\n  isUNC(): boolean {\n    const pl = this.#patternList\n    return this.#isUNC !== undefined ?\n        this.#isUNC\n      : (this.#isUNC =\n          this.#platform === 'win32' &&\n          this.#index === 0 &&\n          pl[0] === '' &&\n          pl[1] === '' &&\n          typeof pl[2] === 'string' &&\n          !!pl[2] &&\n          typeof pl[3] === 'string' &&\n          !!pl[3])\n  }\n\n  // pattern like C:/...\n  // split = ['C:', ...]\n  // XXX: would be nice to handle patterns like `c:*` to test the cwd\n  // in c: for *, but I don't know of a way to even figure out what that\n  // cwd is without actually chdir'ing into it?\n  /**\n   * True if the pattern starts with a drive letter on Windows\n   */\n  isDrive(): boolean {\n    const pl = this.#patternList\n    return this.#isDrive !== undefined ?\n        this.#isDrive\n      : (this.#isDrive =\n          this.#platform === 'win32' &&\n          this.#index === 0 &&\n          this.length > 1 &&\n          typeof pl[0] === 'string' &&\n          /^[a-z]:$/i.test(pl[0]))\n  }\n\n  // pattern = '/' or '/...' or '/x/...'\n  // split = ['', ''] or ['', ...] or ['', 'x', ...]\n  // Drive and UNC both considered absolute on windows\n  /**\n   * True if the pattern is rooted on an absolute path\n   */\n  isAbsolute(): boolean {\n    const pl = this.#patternList\n    return this.#isAbsolute !== undefined ?\n        this.#isAbsolute\n      : (this.#isAbsolute =\n          (pl[0] === '' && pl.length > 1) ||\n          this.isDrive() ||\n          this.isUNC())\n  }\n\n  /**\n   * consume the root of the pattern, and return it\n   */\n  root(): string {\n    const p = this.#patternList[0]\n    return (\n        typeof p === 'string' && this.isAbsolute() && this.#index === 0\n      ) ?\n        p\n      : ''\n  }\n\n  /**\n   * Check to see if the current globstar pattern is allowed to follow\n   * a symbolic link.\n   */\n  checkFollowGlobstar(): boolean {\n    return !(\n      this.#index === 0 ||\n      !this.isGlobstar() ||\n      !this.#followGlobstar\n    )\n  }\n\n  /**\n   * Mark that the current globstar pattern is following a symbolic link\n   */\n  markFollowGlobstar(): boolean {\n    if (this.#index === 0 || !this.isGlobstar() || !this.#followGlobstar)\n      return false\n    this.#followGlobstar = false\n    return true\n  }\n}\n", "/**\n * Single-use utility classes to provide functionality to the {@link Glob}\n * methods.\n *\n * @module\n */\nimport { Minipass } from 'minipass'\nimport { Path } from 'path-scurry'\nimport { Ignore, IgnoreLike } from './ignore.js'\n\n// XXX can we somehow make it so that it NEVER processes a given path more than\n// once, enough that the match set tracking is no longer needed?  that'd speed\n// things up a lot.  Or maybe bring back nounique, and skip it in that case?\n\n// a single minimatch set entry with 1 or more parts\nimport { Pattern } from './pattern.js'\nimport { Processor } from './processor.js'\n\nexport interface GlobWalkerOpts {\n  absolute?: boolean\n  allowWindowsEscape?: boolean\n  cwd?: string | URL\n  dot?: boolean\n  dotRelative?: boolean\n  follow?: boolean\n  ignore?: string | string[] | IgnoreLike\n  mark?: boolean\n  matchBase?: boolean\n  // Note: maxDepth here means \"maximum actual Path.depth()\",\n  // not \"maximum depth beyond cwd\"\n  maxDepth?: number\n  nobrace?: boolean\n  nocase?: boolean\n  nodir?: boolean\n  noext?: boolean\n  noglobstar?: boolean\n  platform?: NodeJS.Platform\n  posix?: boolean\n  realpath?: boolean\n  root?: string\n  stat?: boolean\n  signal?: AbortSignal\n  windowsPathsNoEscape?: boolean\n  withFileTypes?: boolean\n  includeChildMatches?: boolean\n}\n\nexport type GWOFileTypesTrue = GlobWalkerOpts & {\n  withFileTypes: true\n}\nexport type GWOFileTypesFalse = GlobWalkerOpts & {\n  withFileTypes: false\n}\nexport type GWOFileTypesUnset = GlobWalkerOpts & {\n  withFileTypes?: undefined\n}\n\nexport type Result<O extends GlobWalkerOpts> =\n  O extends GWOFileTypesTrue ? Path\n  : O extends GWOFileTypesFalse ? string\n  : O extends GWOFileTypesUnset ? string\n  : Path | string\n\nexport type Matches<O extends GlobWalkerOpts> =\n  O extends GWOFileTypesTrue ? Set<Path>\n  : O extends GWOFileTypesFalse ? Set<string>\n  : O extends GWOFileTypesUnset ? Set<string>\n  : Set<Path | string>\n\nexport type MatchStream<O extends GlobWalkerOpts> = Minipass<\n  Result<O>,\n  Result<O>\n>\n\nconst makeIgnore = (\n  ignore: string | string[] | IgnoreLike,\n  opts: GlobWalkerOpts,\n): IgnoreLike =>\n  typeof ignore === 'string' ? new Ignore([ignore], opts)\n  : Array.isArray(ignore) ? new Ignore(ignore, opts)\n  : ignore\n\n/**\n * basic walking utilities that all the glob walker types use\n */\nexport abstract class GlobUtil<O extends GlobWalkerOpts = GlobWalkerOpts> {\n  path: Path\n  patterns: Pattern[]\n  opts: O\n  seen: Set<Path> = new Set<Path>()\n  paused: boolean = false\n  aborted: boolean = false\n  #onResume: (() => any)[] = []\n  #ignore?: IgnoreLike\n  #sep: '\\\\' | '/'\n  signal?: AbortSignal\n  maxDepth: number\n  includeChildMatches: boolean\n\n  constructor(patterns: Pattern[], path: Path, opts: O)\n  constructor(patterns: Pattern[], path: Path, opts: O) {\n    this.patterns = patterns\n    this.path = path\n    this.opts = opts\n    this.#sep = !opts.posix && opts.platform === 'win32' ? '\\\\' : '/'\n    this.includeChildMatches = opts.includeChildMatches !== false\n    if (opts.ignore || !this.includeChildMatches) {\n      this.#ignore = makeIgnore(opts.ignore ?? [], opts)\n      if (\n        !this.includeChildMatches &&\n        typeof this.#ignore.add !== 'function'\n      ) {\n        const m = 'cannot ignore child matches, ignore lacks add() method.'\n        throw new Error(m)\n      }\n    }\n    // ignore, always set with maxDepth, but it's optional on the\n    // GlobOptions type\n    /* c8 ignore start */\n    this.maxDepth = opts.maxDepth || Infinity\n    /* c8 ignore stop */\n    if (opts.signal) {\n      this.signal = opts.signal\n      this.signal.addEventListener('abort', () => {\n        this.#onResume.length = 0\n      })\n    }\n  }\n\n  #ignored(path: Path): boolean {\n    return this.seen.has(path) || !!this.#ignore?.ignored?.(path)\n  }\n  #childrenIgnored(path: Path): boolean {\n    return !!this.#ignore?.childrenIgnored?.(path)\n  }\n\n  // backpressure mechanism\n  pause() {\n    this.paused = true\n  }\n  resume() {\n    /* c8 ignore start */\n    if (this.signal?.aborted) return\n    /* c8 ignore stop */\n    this.paused = false\n    let fn: (() => any) | undefined = undefined\n    while (!this.paused && (fn = this.#onResume.shift())) {\n      fn()\n    }\n  }\n  onResume(fn: () => any) {\n    if (this.signal?.aborted) return\n    /* c8 ignore start */\n    if (!this.paused) {\n      fn()\n    } else {\n      /* c8 ignore stop */\n      this.#onResume.push(fn)\n    }\n  }\n\n  // do the requisite realpath/stat checking, and return the path\n  // to add or undefined to filter it out.\n  async matchCheck(e: Path, ifDir: boolean): Promise<Path | undefined> {\n    if (ifDir && this.opts.nodir) return undefined\n    let rpc: Path | undefined\n    if (this.opts.realpath) {\n      rpc = e.realpathCached() || (await e.realpath())\n      if (!rpc) return undefined\n      e = rpc\n    }\n    const needStat = e.isUnknown() || this.opts.stat\n    const s = needStat ? await e.lstat() : e\n    if (this.opts.follow && this.opts.nodir && s?.isSymbolicLink()) {\n      const target = await s.realpath()\n      /* c8 ignore start */\n      if (target && (target.isUnknown() || this.opts.stat)) {\n        await target.lstat()\n      }\n      /* c8 ignore stop */\n    }\n    return this.matchCheckTest(s, ifDir)\n  }\n\n  matchCheckTest(e: Path | undefined, ifDir: boolean): Path | undefined {\n    return (\n        e &&\n          (this.maxDepth === Infinity || e.depth() <= this.maxDepth) &&\n          (!ifDir || e.canReaddir()) &&\n          (!this.opts.nodir || !e.isDirectory()) &&\n          (!this.opts.nodir ||\n            !this.opts.follow ||\n            !e.isSymbolicLink() ||\n            !e.realpathCached()?.isDirectory()) &&\n          !this.#ignored(e)\n      ) ?\n        e\n      : undefined\n  }\n\n  matchCheckSync(e: Path, ifDir: boolean): Path | undefined {\n    if (ifDir && this.opts.nodir) return undefined\n    let rpc: Path | undefined\n    if (this.opts.realpath) {\n      rpc = e.realpathCached() || e.realpathSync()\n      if (!rpc) return undefined\n      e = rpc\n    }\n    const needStat = e.isUnknown() || this.opts.stat\n    const s = needStat ? e.lstatSync() : e\n    if (this.opts.follow && this.opts.nodir && s?.isSymbolicLink()) {\n      const target = s.realpathSync()\n      if (target && (target?.isUnknown() || this.opts.stat)) {\n        target.lstatSync()\n      }\n    }\n    return this.matchCheckTest(s, ifDir)\n  }\n\n  abstract matchEmit(p: Result<O>): void\n  abstract matchEmit(p: string | Path): void\n\n  matchFinish(e: Path, absolute: boolean) {\n    if (this.#ignored(e)) return\n    // we know we have an ignore if this is false, but TS doesn't\n    if (!this.includeChildMatches && this.#ignore?.add) {\n      const ign = `${e.relativePosix()}/**`\n      this.#ignore.add(ign)\n    }\n    const abs =\n      this.opts.absolute === undefined ? absolute : this.opts.absolute\n    this.seen.add(e)\n    const mark = this.opts.mark && e.isDirectory() ? this.#sep : ''\n    // ok, we have what we need!\n    if (this.opts.withFileTypes) {\n      this.matchEmit(e)\n    } else if (abs) {\n      const abs = this.opts.posix ? e.fullpathPosix() : e.fullpath()\n      this.matchEmit(abs + mark)\n    } else {\n      const rel = this.opts.posix ? e.relativePosix() : e.relative()\n      const pre =\n        this.opts.dotRelative && !rel.startsWith('..' + this.#sep) ?\n          '.' + this.#sep\n        : ''\n      this.matchEmit(!rel ? '.' + mark : pre + rel + mark)\n    }\n  }\n\n  async match(e: Path, absolute: boolean, ifDir: boolean): Promise<void> {\n    const p = await this.matchCheck(e, ifDir)\n    if (p) this.matchFinish(p, absolute)\n  }\n\n  matchSync(e: Path, absolute: boolean, ifDir: boolean): void {\n    const p = this.matchCheckSync(e, ifDir)\n    if (p) this.matchFinish(p, absolute)\n  }\n\n  walkCB(target: Path, patterns: Pattern[], cb: () => any) {\n    /* c8 ignore start */\n    if (this.signal?.aborted) cb()\n    /* c8 ignore stop */\n    this.walkCB2(target, patterns, new Processor(this.opts), cb)\n  }\n\n  walkCB2(\n    target: Path,\n    patterns: Pattern[],\n    processor: Processor,\n    cb: () => any,\n  ) {\n    if (this.#childrenIgnored(target)) return cb()\n    if (this.signal?.aborted) cb()\n    if (this.paused) {\n      this.onResume(() => this.walkCB2(target, patterns, processor, cb))\n      return\n    }\n    processor.processPatterns(target, patterns)\n\n    // done processing.  all of the above is sync, can be abstracted out.\n    // subwalks is a map of paths to the entry filters they need\n    // matches is a map of paths to [absolute, ifDir] tuples.\n    let tasks = 1\n    const next = () => {\n      if (--tasks === 0) cb()\n    }\n\n    for (const [m, absolute, ifDir] of processor.matches.entries()) {\n      if (this.#ignored(m)) continue\n      tasks++\n      this.match(m, absolute, ifDir).then(() => next())\n    }\n\n    for (const t of processor.subwalkTargets()) {\n      if (this.maxDepth !== Infinity && t.depth() >= this.maxDepth) {\n        continue\n      }\n      tasks++\n      const childrenCached = t.readdirCached()\n      if (t.calledReaddir())\n        this.walkCB3(t, childrenCached, processor, next)\n      else {\n        t.readdirCB(\n          (_, entries) => this.walkCB3(t, entries, processor, next),\n          true,\n        )\n      }\n    }\n\n    next()\n  }\n\n  walkCB3(\n    target: Path,\n    entries: Path[],\n    processor: Processor,\n    cb: () => any,\n  ) {\n    processor = processor.filterEntries(target, entries)\n\n    let tasks = 1\n    const next = () => {\n      if (--tasks === 0) cb()\n    }\n\n    for (const [m, absolute, ifDir] of processor.matches.entries()) {\n      if (this.#ignored(m)) continue\n      tasks++\n      this.match(m, absolute, ifDir).then(() => next())\n    }\n    for (const [target, patterns] of processor.subwalks.entries()) {\n      tasks++\n      this.walkCB2(target, patterns, processor.child(), next)\n    }\n\n    next()\n  }\n\n  walkCBSync(target: Path, patterns: Pattern[], cb: () => any) {\n    /* c8 ignore start */\n    if (this.signal?.aborted) cb()\n    /* c8 ignore stop */\n    this.walkCB2Sync(target, patterns, new Processor(this.opts), cb)\n  }\n\n  walkCB2Sync(\n    target: Path,\n    patterns: Pattern[],\n    processor: Processor,\n    cb: () => any,\n  ) {\n    if (this.#childrenIgnored(target)) return cb()\n    if (this.signal?.aborted) cb()\n    if (this.paused) {\n      this.onResume(() =>\n        this.walkCB2Sync(target, patterns, processor, cb),\n      )\n      return\n    }\n    processor.processPatterns(target, patterns)\n\n    // done processing.  all of the above is sync, can be abstracted out.\n    // subwalks is a map of paths to the entry filters they need\n    // matches is a map of paths to [absolute, ifDir] tuples.\n    let tasks = 1\n    const next = () => {\n      if (--tasks === 0) cb()\n    }\n\n    for (const [m, absolute, ifDir] of processor.matches.entries()) {\n      if (this.#ignored(m)) continue\n      this.matchSync(m, absolute, ifDir)\n    }\n\n    for (const t of processor.subwalkTargets()) {\n      if (this.maxDepth !== Infinity && t.depth() >= this.maxDepth) {\n        continue\n      }\n      tasks++\n      const children = t.readdirSync()\n      this.walkCB3Sync(t, children, processor, next)\n    }\n\n    next()\n  }\n\n  walkCB3Sync(\n    target: Path,\n    entries: Path[],\n    processor: Processor,\n    cb: () => any,\n  ) {\n    processor = processor.filterEntries(target, entries)\n\n    let tasks = 1\n    const next = () => {\n      if (--tasks === 0) cb()\n    }\n\n    for (const [m, absolute, ifDir] of processor.matches.entries()) {\n      if (this.#ignored(m)) continue\n      this.matchSync(m, absolute, ifDir)\n    }\n    for (const [target, patterns] of processor.subwalks.entries()) {\n      tasks++\n      this.walkCB2Sync(target, patterns, processor.child(), next)\n    }\n\n    next()\n  }\n}\n\nexport class GlobWalker<\n  O extends GlobWalkerOpts = GlobWalkerOpts,\n> extends GlobUtil<O> {\n  matches = new Set<Result<O>>()\n\n  constructor(patterns: Pattern[], path: Path, opts: O) {\n    super(patterns, path, opts)\n  }\n\n  matchEmit(e: Result<O>): void {\n    this.matches.add(e)\n  }\n\n  async walk(): Promise<Set<Result<O>>> {\n    if (this.signal?.aborted) throw this.signal.reason\n    if (this.path.isUnknown()) {\n      await this.path.lstat()\n    }\n    await new Promise((res, rej) => {\n      this.walkCB(this.path, this.patterns, () => {\n        if (this.signal?.aborted) {\n          rej(this.signal.reason)\n        } else {\n          res(this.matches)\n        }\n      })\n    })\n    return this.matches\n  }\n\n  walkSync(): Set<Result<O>> {\n    if (this.signal?.aborted) throw this.signal.reason\n    if (this.path.isUnknown()) {\n      this.path.lstatSync()\n    }\n    // nothing for the callback to do, because this never pauses\n    this.walkCBSync(this.path, this.patterns, () => {\n      if (this.signal?.aborted) throw this.signal.reason\n    })\n    return this.matches\n  }\n}\n\nexport class GlobStream<\n  O extends GlobWalkerOpts = GlobWalkerOpts,\n> extends GlobUtil<O> {\n  results: Minipass<Result<O>, Result<O>>\n\n  constructor(patterns: Pattern[], path: Path, opts: O) {\n    super(patterns, path, opts)\n    this.results = new Minipass<Result<O>, Result<O>>({\n      signal: this.signal,\n      objectMode: true,\n    })\n    this.results.on('drain', () => this.resume())\n    this.results.on('resume', () => this.resume())\n  }\n\n  matchEmit(e: Result<O>): void {\n    this.results.write(e)\n    if (!this.results.flowing) this.pause()\n  }\n\n  stream(): MatchStream<O> {\n    const target = this.path\n    if (target.isUnknown()) {\n      target.lstat().then(() => {\n        this.walkCB(target, this.patterns, () => this.results.end())\n      })\n    } else {\n      this.walkCB(target, this.patterns, () => this.results.end())\n    }\n    return this.results\n  }\n\n  streamSync(): MatchStream<O> {\n    if (this.path.isUnknown()) {\n      this.path.lstatSync()\n    }\n    this.walkCBSync(this.path, this.patterns, () => this.results.end())\n    return this.results\n  }\n}\n", "// give it a pattern, and it'll be able to tell you if\n// a given path should be ignored.\n// Ignoring a path ignores its children if the pattern ends in /**\n// Ignores are always parsed in dot:true mode\n\nimport { Minimatch, MinimatchOptions } from 'minimatch'\nimport { Path } from 'path-scurry'\nimport { Pattern } from './pattern.js'\nimport { GlobWalkerOpts } from './walker.js'\n\nexport interface IgnoreLike {\n  ignored?: (p: Path) => boolean\n  childrenIgnored?: (p: Path) => boolean\n  add?: (ignore: string) => void\n}\n\nconst defaultPlatform: NodeJS.Platform =\n  (\n    typeof process === 'object' &&\n    process &&\n    typeof process.platform === 'string'\n  ) ?\n    process.platform\n  : 'linux'\n\n/**\n * Class used to process ignored patterns\n */\nexport class Ignore implements IgnoreLike {\n  relative: Minimatch[]\n  relativeChildren: Minimatch[]\n  absolute: Minimatch[]\n  absoluteChildren: Minimatch[]\n  platform: NodeJS.Platform\n  mmopts: MinimatchOptions\n\n  constructor(\n    ignored: string[],\n    {\n      nobrace,\n      nocase,\n      noext,\n      noglobstar,\n      platform = defaultPlatform,\n    }: GlobWalkerOpts,\n  ) {\n    this.relative = []\n    this.absolute = []\n    this.relativeChildren = []\n    this.absoluteChildren = []\n    this.platform = platform\n    this.mmopts = {\n      dot: true,\n      nobrace,\n      nocase,\n      noext,\n      noglobstar,\n      optimizationLevel: 2,\n      platform,\n      nocomment: true,\n      nonegate: true,\n    }\n    for (const ign of ignored) this.add(ign)\n  }\n\n  add(ign: string) {\n    // this is a little weird, but it gives us a clean set of optimized\n    // minimatch matchers, without getting tripped up if one of them\n    // ends in /** inside a brace section, and it's only inefficient at\n    // the start of the walk, not along it.\n    // It'd be nice if the Pattern class just had a .test() method, but\n    // handling globstars is a bit of a pita, and that code already lives\n    // in minimatch anyway.\n    // Another way would be if maybe Minimatch could take its set/globParts\n    // as an option, and then we could at least just use Pattern to test\n    // for absolute-ness.\n    // Yet another way, Minimatch could take an array of glob strings, and\n    // a cwd option, and do the right thing.\n    const mm = new Minimatch(ign, this.mmopts)\n    for (let i = 0; i < mm.set.length; i++) {\n      const parsed = mm.set[i]\n      const globParts = mm.globParts[i]\n      /* c8 ignore start */\n      if (!parsed || !globParts) {\n        throw new Error('invalid pattern object')\n      }\n      // strip off leading ./ portions\n      // https://github.com/isaacs/node-glob/issues/570\n      while (parsed[0] === '.' && globParts[0] === '.') {\n        parsed.shift()\n        globParts.shift()\n      }\n      /* c8 ignore stop */\n      const p = new Pattern(parsed, globParts, 0, this.platform)\n      const m = new Minimatch(p.globString(), this.mmopts)\n      const children = globParts[globParts.length - 1] === '**'\n      const absolute = p.isAbsolute()\n      if (absolute) this.absolute.push(m)\n      else this.relative.push(m)\n      if (children) {\n        if (absolute) this.absoluteChildren.push(m)\n        else this.relativeChildren.push(m)\n      }\n    }\n  }\n\n  ignored(p: Path): boolean {\n    const fullpath = p.fullpath()\n    const fullpaths = `${fullpath}/`\n    const relative = p.relative() || '.'\n    const relatives = `${relative}/`\n    for (const m of this.relative) {\n      if (m.match(relative) || m.match(relatives)) return true\n    }\n    for (const m of this.absolute) {\n      if (m.match(fullpath) || m.match(fullpaths)) return true\n    }\n    return false\n  }\n\n  childrenIgnored(p: Path): boolean {\n    const fullpath = p.fullpath() + '/'\n    const relative = (p.relative() || '.') + '/'\n    for (const m of this.relativeChildren) {\n      if (m.match(relative)) return true\n    }\n    for (const m of this.absoluteChildren) {\n      if (m.match(fullpath)) return true\n    }\n    return false\n  }\n}\n", "// synchronous utility for filtering entries and calculating subwalks\n\nimport { GLOBSTAR, MMRegExp } from 'minimatch'\nimport { Path } from 'path-scurry'\nimport { MMPattern, Pattern } from './pattern.js'\nimport { GlobWalkerOpts } from './walker.js'\n\n/**\n * A cache of which patterns have been processed for a given Path\n */\nexport class HasWalkedCache {\n  store: Map<string, Set<string>>\n  constructor(store: Map<string, Set<string>> = new Map()) {\n    this.store = store\n  }\n  copy() {\n    return new HasWalkedCache(new Map(this.store))\n  }\n  hasWalked(target: Path, pattern: Pattern) {\n    return this.store.get(target.fullpath())?.has(pattern.globString())\n  }\n  storeWalked(target: Path, pattern: Pattern) {\n    const fullpath = target.fullpath()\n    const cached = this.store.get(fullpath)\n    if (cached) cached.add(pattern.globString())\n    else this.store.set(fullpath, new Set([pattern.globString()]))\n  }\n}\n\n/**\n * A record of which paths have been matched in a given walk step,\n * and whether they only are considered a match if they are a directory,\n * and whether their absolute or relative path should be returned.\n */\nexport class MatchRecord {\n  store: Map<Path, number> = new Map()\n  add(target: Path, absolute: boolean, ifDir: boolean) {\n    const n = (absolute ? 2 : 0) | (ifDir ? 1 : 0)\n    const current = this.store.get(target)\n    this.store.set(target, current === undefined ? n : n & current)\n  }\n  // match, absolute, ifdir\n  entries(): [Path, boolean, boolean][] {\n    return [...this.store.entries()].map(([path, n]) => [\n      path,\n      !!(n & 2),\n      !!(n & 1),\n    ])\n  }\n}\n\n/**\n * A collection of patterns that must be processed in a subsequent step\n * for a given path.\n */\nexport class SubWalks {\n  store: Map<Path, Pattern[]> = new Map()\n  add(target: Path, pattern: Pattern) {\n    if (!target.canReaddir()) {\n      return\n    }\n    const subs = this.store.get(target)\n    if (subs) {\n      if (!subs.find(p => p.globString() === pattern.globString())) {\n        subs.push(pattern)\n      }\n    } else this.store.set(target, [pattern])\n  }\n  get(target: Path): Pattern[] {\n    const subs = this.store.get(target)\n    /* c8 ignore start */\n    if (!subs) {\n      throw new Error('attempting to walk unknown path')\n    }\n    /* c8 ignore stop */\n    return subs\n  }\n  entries(): [Path, Pattern[]][] {\n    return this.keys().map(k => [k, this.store.get(k) as Pattern[]])\n  }\n  keys(): Path[] {\n    return [...this.store.keys()].filter(t => t.canReaddir())\n  }\n}\n\n/**\n * The class that processes patterns for a given path.\n *\n * Handles child entry filtering, and determining whether a path's\n * directory contents must be read.\n */\nexport class Processor {\n  hasWalkedCache: HasWalkedCache\n  matches = new MatchRecord()\n  subwalks = new SubWalks()\n  patterns?: Pattern[]\n  follow: boolean\n  dot: boolean\n  opts: GlobWalkerOpts\n\n  constructor(opts: GlobWalkerOpts, hasWalkedCache?: HasWalkedCache) {\n    this.opts = opts\n    this.follow = !!opts.follow\n    this.dot = !!opts.dot\n    this.hasWalkedCache =\n      hasWalkedCache ? hasWalkedCache.copy() : new HasWalkedCache()\n  }\n\n  processPatterns(target: Path, patterns: Pattern[]) {\n    this.patterns = patterns\n    const processingSet: [Path, Pattern][] = patterns.map(p => [target, p])\n\n    // map of paths to the magic-starting subwalks they need to walk\n    // first item in patterns is the filter\n\n    for (let [t, pattern] of processingSet) {\n      this.hasWalkedCache.storeWalked(t, pattern)\n\n      const root = pattern.root()\n      const absolute = pattern.isAbsolute() && this.opts.absolute !== false\n\n      // start absolute patterns at root\n      if (root) {\n        t = t.resolve(\n          root === '/' && this.opts.root !== undefined ?\n            this.opts.root\n          : root,\n        )\n        const rest = pattern.rest()\n        if (!rest) {\n          this.matches.add(t, true, false)\n          continue\n        } else {\n          pattern = rest\n        }\n      }\n\n      if (t.isENOENT()) continue\n\n      let p: MMPattern\n      let rest: Pattern | null\n      let changed = false\n      while (\n        typeof (p = pattern.pattern()) === 'string' &&\n        (rest = pattern.rest())\n      ) {\n        const c = t.resolve(p)\n        t = c\n        pattern = rest\n        changed = true\n      }\n      p = pattern.pattern()\n      rest = pattern.rest()\n      if (changed) {\n        if (this.hasWalkedCache.hasWalked(t, pattern)) continue\n        this.hasWalkedCache.storeWalked(t, pattern)\n      }\n\n      // now we have either a final string for a known entry,\n      // more strings for an unknown entry,\n      // or a pattern starting with magic, mounted on t.\n      if (typeof p === 'string') {\n        // must not be final entry, otherwise we would have\n        // concatenated it earlier.\n        const ifDir = p === '..' || p === '' || p === '.'\n        this.matches.add(t.resolve(p), absolute, ifDir)\n        continue\n      } else if (p === GLOBSTAR) {\n        // if no rest, match and subwalk pattern\n        // if rest, process rest and subwalk pattern\n        // if it's a symlink, but we didn't get here by way of a\n        // globstar match (meaning it's the first time THIS globstar\n        // has traversed a symlink), then we follow it. Otherwise, stop.\n        if (\n          !t.isSymbolicLink() ||\n          this.follow ||\n          pattern.checkFollowGlobstar()\n        ) {\n          this.subwalks.add(t, pattern)\n        }\n        const rp = rest?.pattern()\n        const rrest = rest?.rest()\n        if (!rest || ((rp === '' || rp === '.') && !rrest)) {\n          // only HAS to be a dir if it ends in **/ or **/.\n          // but ending in ** will match files as well.\n          this.matches.add(t, absolute, rp === '' || rp === '.')\n        } else {\n          if (rp === '..') {\n            // this would mean you're matching **/.. at the fs root,\n            // and no thanks, I'm not gonna test that specific case.\n            /* c8 ignore start */\n            const tp = t.parent || t\n            /* c8 ignore stop */\n            if (!rrest) this.matches.add(tp, absolute, true)\n            else if (!this.hasWalkedCache.hasWalked(tp, rrest)) {\n              this.subwalks.add(tp, rrest)\n            }\n          }\n        }\n      } else if (p instanceof RegExp) {\n        this.subwalks.add(t, pattern)\n      }\n    }\n\n    return this\n  }\n\n  subwalkTargets(): Path[] {\n    return this.subwalks.keys()\n  }\n\n  child() {\n    return new Processor(this.opts, this.hasWalkedCache)\n  }\n\n  // return a new Processor containing the subwalks for each\n  // child entry, and a set of matches, and\n  // a hasWalkedCache that's a copy of this one\n  // then we're going to call\n  filterEntries(parent: Path, entries: Path[]): Processor {\n    const patterns = this.subwalks.get(parent)\n    // put matches and entry walks into the results processor\n    const results = this.child()\n    for (const e of entries) {\n      for (const pattern of patterns) {\n        const absolute = pattern.isAbsolute()\n        const p = pattern.pattern()\n        const rest = pattern.rest()\n        if (p === GLOBSTAR) {\n          results.testGlobstar(e, pattern, rest, absolute)\n        } else if (p instanceof RegExp) {\n          results.testRegExp(e, p, rest, absolute)\n        } else {\n          results.testString(e, p, rest, absolute)\n        }\n      }\n    }\n    return results\n  }\n\n  testGlobstar(\n    e: Path,\n    pattern: Pattern,\n    rest: Pattern | null,\n    absolute: boolean,\n  ) {\n    if (this.dot || !e.name.startsWith('.')) {\n      if (!pattern.hasMore()) {\n        this.matches.add(e, absolute, false)\n      }\n      if (e.canReaddir()) {\n        // if we're in follow mode or it's not a symlink, just keep\n        // testing the same pattern. If there's more after the globstar,\n        // then this symlink consumes the globstar. If not, then we can\n        // follow at most ONE symlink along the way, so we mark it, which\n        // also checks to ensure that it wasn't already marked.\n        if (this.follow || !e.isSymbolicLink()) {\n          this.subwalks.add(e, pattern)\n        } else if (e.isSymbolicLink()) {\n          if (rest && pattern.checkFollowGlobstar()) {\n            this.subwalks.add(e, rest)\n          } else if (pattern.markFollowGlobstar()) {\n            this.subwalks.add(e, pattern)\n          }\n        }\n      }\n    }\n    // if the NEXT thing matches this entry, then also add\n    // the rest.\n    if (rest) {\n      const rp = rest.pattern()\n      if (\n        typeof rp === 'string' &&\n        // dots and empty were handled already\n        rp !== '..' &&\n        rp !== '' &&\n        rp !== '.'\n      ) {\n        this.testString(e, rp, rest.rest(), absolute)\n      } else if (rp === '..') {\n        /* c8 ignore start */\n        const ep = e.parent || e\n        /* c8 ignore stop */\n        this.subwalks.add(ep, rest)\n      } else if (rp instanceof RegExp) {\n        this.testRegExp(e, rp, rest.rest(), absolute)\n      }\n    }\n  }\n\n  testRegExp(\n    e: Path,\n    p: MMRegExp,\n    rest: Pattern | null,\n    absolute: boolean,\n  ) {\n    if (!p.test(e.name)) return\n    if (!rest) {\n      this.matches.add(e, absolute, false)\n    } else {\n      this.subwalks.add(e, rest)\n    }\n  }\n\n  testString(e: Path, p: string, rest: Pattern | null, absolute: boolean) {\n    // should never happen?\n    if (!e.isNamed(p)) return\n    if (!rest) {\n      this.matches.add(e, absolute, false)\n    } else {\n      this.subwalks.add(e, rest)\n    }\n  }\n}\n", "import { Minimatch } from 'minimatch'\nimport { GlobOptions } from './glob.js'\n\n/**\n * Return true if the patterns provided contain any magic glob characters,\n * given the options provided.\n *\n * Brace expansion is not considered \"magic\" unless the `magicalBraces` option\n * is set, as brace expansion just turns one string into an array of strings.\n * So a pattern like `'x{a,b}y'` would return `false`, because `'xay'` and\n * `'xby'` both do not contain any magic glob characters, and it's treated the\n * same as if you had called it on `['xay', 'xby']`. When `magicalBraces:true`\n * is in the options, brace expansion _is_ treated as a pattern having magic.\n */\nexport const hasMagic = (\n  pattern: string | string[],\n  options: GlobOptions = {},\n): boolean => {\n  if (!Array.isArray(pattern)) {\n    pattern = [pattern]\n  }\n  for (const p of pattern) {\n    if (new Minimatch(p, options).hasMagic()) return true\n  }\n  return false\n}\n"],
  "mappings": "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",
  "names": ["SeverityNumber", "logger", "registerInstrumentations", "config", "path", "exports", "safeExecuteInTheMiddle", "isWrapped", "path", "InstrumentationBase", "config", "module", "exports", "InstrumentationNodeModuleDefinition", "AttributeNames", "module", "module", "module", "getAbsoluteUrl", "path", "satisfiesPattern", "hostname", "logger", "parseForwardedHeader", "HttpInstrumentation", "config", "hostname", "esm_exports", "init_esm", "context", "SamplingDecision", "config", "context", "context", "config", "resolve", "flush", "config", "context", "Resource", "_a", "path", "process", "process", "os", "config", "config", "config", "config", "isPromiseLike", "config", "_a", "resolve", "context", "ForceFlushState", "BasicTracerProvider", "config", "resolve", "_a", "diagch", "UndiciInstrumentation", "config", "unsubscribe", "_a", "channel", "ExpressLayerType", "AttributeNames", "storeLayerPath", "getRouterPath", "path", "getLayerMetadata", "satisfiesPattern", "isLayerIgnored", "config", "asErrorAndMessage", "getLayerPath", "extractLayerPathSegment", "ExpressInstrumentation", "config", "path", "requestHook", "isError", "spanNameHook", "module", "module", "balanced", "maybeMatch", "range", "module", "balanced", "escSlash", "escOpen", "escClose", "escComma", "escPeriod", "numeric", "escapeBraces", "unescapeBraces", "parseCommaParts", "expand", "embrace", "isPadded", "lte", "gte", "MAX_PATTERN_LENGTH", "assertValidPattern", "posixClasses", "braceEscape", "regexpEscape", "rangesToString", "parseClass", "glob", "unescape", "types", "isExtglobType", "startNoTraversal", "startNoDot", "addPatternStart", "justDots", "reSpecials", "regExpEscape", "qmark", "star", "starNoEmpty", "AST", "i", "acc", "ext", "glob", "hasMagic", "start", "final", "close", "escape", "minimatch", "Minimatch", "starDotExtRE", "starDotExtTest", "ext", "starDotExtTestDot", "starDotExtTestNocase", "starDotExtTestNocaseDot", "starDotStarRE", "starDotStarTest", "starDotStarTestDot", "dotStarRE", "dotStarTest", "starRE", "starTest", "starTestDot", "qmarksRE", "qmarksTestNocase", "qmarksTestNoExt", "qmarksTestNocaseDot", "qmarksTestNoExtDot", "qmarksTestDot", "qmarksTest", "defaultPlatform", "path", "qmark", "star", "twoStarDot", "twoStarNoDot", "filter", "defaults", "braceExpand", "makeRe", "match", "globMagic", "regExpEscape", "close", "module", "context", "trace", "SpanStatusCode", "propagation", "diag", "getRPCMetadata", "RPCType", "ATTR_HTTP_ROUTE", "ATTR_HTTP_RESPONSE_STATUS_CODE", "ATTR_HTTP_REQUEST_METHOD", "ATTR_SERVICE_NAME", "InstrumentationBase", "PACKAGE_VERSION", "PACKAGE_NAME", "FastifyOtelInstrumentation", "config", "instrumentation", "AllowedOperationTypes", "TokenKind", "SpanNames", "AttributeNames", "isPromise", "path", "document", "fieldNode", "endSpan", "config", "GraphQLInstrumentation", "config", "module", "document", "KafkaJsInstrumentation", "config", "module", "context", "require_types", "LruMemoizerInstrumentation", "config", "MongodbCommandType", "MongoDBInstrumentation", "config", "MongodbCommandType", "MongooseInstrumentation", "config", "module", "require_types", "AttributeNames", "config", "MySQLInstrumentation", "config", "config", "MySQL2Instrumentation", "config", "endSpan", "err", "endSpan", "IORedisInstrumentation", "config", "module", "requestHook", "result", "diag", "RedisInstrumentation", "config", "AttributeNames", "SpanNames", "config", "module", "PgInstrumentation", "config", "connect", "requestHook", "result", "resolve", "AttributeNames", "HapiInstrumentation", "config", "module", "ext", "KoaLayerType", "AttributeNames", "context", "isLayerIgnored", "config", "KoaInstrumentation", "config", "module", "path", "context", "requestHook", "AttributeNames", "ConnectTypes", "ConnectNames", "ConnectInstrumentation", "config", "TediousInstrumentation", "config", "request", "_b", "_a", "endSpan", "MODULE_NAME", "GenericPoolInstrumentation", "config", "EndOperation", "hostname", "context", "AmqplibInstrumentation", "config", "module", "channel", "setContext", "context", "context", "AsyncLocalStorageContextManager", "context", "require_package", "module", "module", "path", "os", "match", "debug", "config", "existsSync", "dirname", "resolve", "fileURLToPath", "console", "logger", "match", "performance", "context", "lastEventId", "context", "withScope", "withIsolationScope", "dsc", "op", "description", "path", "match", "withScope", "States", "resolve", "resolve", "release", "context", "resolve", "isErrorEvent", "isError", "isErrorEvent", "ex", "log", "release", "resolve", "flush", "name", "context", "INTEGRATION_NAME", "INTEGRATION_NAME", "options", "INTEGRATION_NAME", "log", "path", "INTEGRATION_NAME", "match", "path", "instrumented", "isWrapped", "hostname", "path", "context", "getActiveSpan", "DEBUG_BUILD", "context", "dynamicSamplingContext", "startSpan", "suppressTracing", "startSpanManual", "startInactiveSpan", "withActiveSpan", "continueTrace", "suppressTracingImpl", "getTraceData", "withScope", "getCurrentScope", "withSetScope", "withIsolationScope", "getIsolationScope", "SentryContextManager", "node", "inferredStatus", "spans", "parentSampled", "DEBUG_BUILD", "config", "DEBUG_BUILD", "withIsolationScope", "target", "thisArg", "args", "INTEGRATION_NAME", "INSTRUMENTATION_NAME", "config", "SENTRY_TRACE_HEADER", "SENTRY_BAGGAGE_HEADER", "config", "getAbsoluteUrl", "addRequestBreadcrumb", "unsubscribe", "channel", "getBreadcrumbData", "path", "INTEGRATION_NAME", "getConfigWithDefaults", "_shouldInstrumentSpans", "getAbsoluteUrl", "path", "INTEGRATION_NAME", "uptime", "match", "resolve", "join", "INTEGRATION_NAME", "path", "range", "resolve", "stream", "DEBUG_BUILD", "addContextToFrame", "INTEGRATION_NAME", "INTEGRATION_NAME", "DEBUG_BUILD", "path", "dirname", "join", "DEBUG_BUILD", "error", "INTEGRATION_NAME", "DEBUG_BUILD", "INTEGRATION_NAME", "AttributeNames", "ExpressLayerType", "path", "config", "config", "path", "requestHook", "isError", "spanNameHook", "INTEGRATION_NAME", "DEBUG_BUILD", "AttributeNames", "FastifyTypes", "FastifyNames", "startSpan", "PACKAGE_VERSION", "PACKAGE_NAME", "config", "startSpan", "AttributeNames", "requestHook", "INTEGRATION_NAME", "DEBUG_BUILD", "instrumentClient", "instrumentClient", "INTEGRATION_NAME", "getGraphqlOperationNamesFromAttribute", "INTEGRATION_NAME", "INTEGRATION_NAME", "INTEGRATION_NAME", "isBuffer", "INTEGRATION_NAME", "INTEGRATION_NAME", "INTEGRATION_NAME", "arg", "input", "INTEGRATION_NAME", "INTEGRATION_NAME", "init_esm", "import_instrumentation", "context", "endSpan", "VERSION", "config", "module", "INTEGRATION_NAME", "INTEGRATION_NAME", "INTEGRATION_NAME", "DEBUG_BUILD", "INTEGRATION_NAME", "INTEGRATION_NAME", "isWrapped", "INTEGRATION_NAME", "INTEGRATION_NAME", "INTEGRATION_NAME", "config", "module", "isEnabled", "INTEGRATION_NAME", "INTEGRATION_NAME", "threadId", "INTEGRATION_NAME", "Agent", "resolve", "debug", "Agent", "connect", "http", "hostname", "resolve", "path", "ext", "log", "DEBUG_BUILD", "DEBUG_BUILD", "DEBUG_BUILD", "SPOTLIGHT_INTEGRATION_NAME", "release", "glob", "i", "acc", "ext", "glob", "hasMagic", "start", "final", "close", "ext", "sep", "qmark", "star", "regExpEscape", "close", "fileURLToPath", "context", "v", "bf", "posix", "readdir", "p", "ret", "resolve", "res", "readdir", "normalize", "path", "p", "resolve", "sep", "filter", "process", "sync", "posix", "platform", "defaultPlatform", "platform", "relative", "path", "rest", "path", "abs", "target", "defaultPlatform", "fileURLToPath", "fileURLToPath", "dirname", "resolve", "existsSync"]
}
