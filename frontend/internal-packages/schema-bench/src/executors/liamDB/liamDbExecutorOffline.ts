import { createInMemoryRepositories, deepModeling } from '@liam-hq/agent'
import { err, ok, type Result } from 'neverthrow'
import type { LiamDBExecutorInput, LiamDBExecutorOutput } from './types.ts'

export const createLiamDBExecutorOffline = () => {
  const execute = async (
    input: LiamDBExecutorInput,
  ): Promise<Result<LiamDBExecutorOutput, Error>> => {
    try {
      // Create shared repositories and session
      const repositories = createInMemoryRepositories()
      const designSessionId = `offline-session-${Date.now()}`
      const buildingSchemaId = `offline-schema-${Date.now()}`

      // Create a simple logger for offline mode
      const logger = {
        log: (_message: string) => {},
        error: (message: string) => console.error(`[DeepModeling] ${message}`),
        warn: (message: string) => console.warn(`[DeepModeling] ${message}`),
        debug: (_message: string) => {},
        info: (_message: string) => {},
      }
      const deepModelingResult = await deepModeling(
        {
          userInput: input.input,
          schemaData: { tables: {} },
          history: [],
          organizationId: 'offline-org',
          buildingSchemaId,
          latestVersionNumber: 0,
          designSessionId,
          userId: 'offline-user',
          recursionLimit: 15,
        },
        {
          configurable: {
            repositories,
            logger,
          },
        },
      )

      if (!deepModelingResult.isOk()) {
        console.error(
          `❌ Deep modeling failed: ${deepModelingResult.error.message}`,
        )
        return err(
          new Error(
            `Deep modeling failed: ${deepModelingResult.error.message}`,
          ),
        )
      }

      // Debug: check what's actually in the repository
      const inMemoryRepo = repositories.schema as any
      if (inMemoryRepo.schemas?.size > 0) {
        for (const [key, value] of inMemoryRepo.schemas.entries()) {
        }
      }

      const schemaResult = await repositories.schema.getSchema(designSessionId)

      if (schemaResult.data?.schema) {
        const tableCount = Object.keys(schemaResult.data.schema.tables).length

        // Convert the schema to the expected output format
        const resultSchema: LiamDBExecutorOutput = {
          tables: schemaResult.data.schema.tables,
          relations: schemaResult.data.schema.relations,
        }

        return ok(resultSchema)
      }

      console.error('❌ No schema found in repository after deep modeling')
      return err(
        new Error('No schema was generated by the deep modeling process'),
      )
    } catch (error) {
      if (error instanceof Error) {
        return err(error)
      }
      return err(new Error('Unknown error occurred'))
    }
  }

  return { execute }
}
