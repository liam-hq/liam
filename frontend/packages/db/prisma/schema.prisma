datasource db {
  provider = "postgresql"
  // NOTE: Use the non-pooling URL to avoid PrismaClientUnknownRequestError for now
  url      = env("POSTGRES_URL_NON_POOLING")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x", "debian-openssl-3.0.x"]
}

model Project {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  reviews   OverallReview[]
  repositoryMappings ProjectRepositoryMapping[]
  watchSchemaFilePatterns WatchSchemaFilePattern[]
  watchSchemaMetaFilePatterns WatchSchemaMetaFilePattern[]
  docs      Doc[]
}

model Repository {
  id             Int      @id @default(autoincrement())
  name           String
  owner          String
  installationId BigInt
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  pullRequests   PullRequest[]
  projectMappings ProjectRepositoryMapping[]

  @@unique([owner, name])
}

model PullRequest {
  id             Int      @id @default(autoincrement())
  pullNumber     BigInt
  commentId      BigInt?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  migration Migration?
  repositoryId   Int
  repository     Repository @relation(fields: [repositoryId], references: [id])
  reviews        OverallReview[]

  @@unique([repositoryId, pullNumber])
}

model Migration {
  id             Int         @id @default(autoincrement())
  title          String
  pullRequestId  Int         @unique
  pullRequest    PullRequest @relation(fields: [pullRequestId], references: [id])
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model OverallReview {
  id            Int     @id @default(autoincrement())
  projectId     Int?
  project       Project?    @relation(fields: [projectId], references: [id])
  pullRequestId Int
  pullRequest   PullRequest @relation(fields: [pullRequestId], references: [id])
  reviewComment String?
  reviewedAt    DateTime   @default(now())
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model ProjectRepositoryMapping {
  id           Int        @id @default(autoincrement())
  projectId    Int
  project      Project    @relation(fields: [projectId], references: [id])
  repositoryId Int
  repository   Repository @relation(fields: [repositoryId], references: [id])
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@unique([projectId, repositoryId])
}

model WatchSchemaFilePattern {
  id        Int      @id @default(autoincrement())
  pattern   String
  projectId Int
  project   Project  @relation(fields: [projectId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model WatchSchemaMetaFilePattern {
  id        Int      @id @default(autoincrement())
  pattern   String
  projectId Int
  project   Project  @relation(fields: [projectId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Doc {
  id              Int         @id @default(autoincrement())
  title           String
  content         String
  latestVersionId Int?
  projectId       Int
  project         Project     @relation(fields: [projectId], references: [id])
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  versions        DocVersion[]
}

model DocVersion {
  id        Int       @id @default(autoincrement())
  docId     Int
  doc       Doc       @relation(fields: [docId], references: [id])
  version   Int
  title     String
  content   String
  createdAt DateTime  @default(now())

  @@unique([docId, version])
}
