name: E2E Tests

on:
  deployment_status:

concurrency:
  group: e2e-tests-${{ github.event.deployment.environment }}-${{ github.event.deployment.sha }}
  cancel-in-progress: false

jobs:
  _e2e-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    strategy:
      matrix:
        browser: [chromium, 'Mobile Safari']
      fail-fast: false
    permissions:
      contents: read
      statuses: write
    defaults:
      run:
        working-directory: 'frontend/internal-packages/e2e'
    env:
      CI: true
      URL: ${{ github.event.deployment_status.target_url }}
      ENVIRONMENT: ${{ github.event.deployment.environment }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          ref: ${{ steps.snapshot.outputs.sha }}
          persist-credentials: false

      - name: Snapshot deployment context to avoid race conditions
        id: snapshot
        run: |
          echo "env_val=${{ github.event.deployment.environment }}" >> $GITHUB_OUTPUT
          echo "target_url=${{ github.event.deployment_status.target_url }}" >> $GITHUB_OUTPUT
          echo "sha=${{ github.event.deployment.sha }}" >> $GITHUB_OUTPUT

      - name: Check deployment conditions
        id: check
        shell: ruby {0}
        working-directory: ${{ github.workspace }}
        run: |
          event_name      = "${{ github.event_name }}"
          event_state     = "${{ github.event.deployment_status.state }}"
          environment_val = "${{ steps.snapshot.outputs.env_val }}"
          target_url      = "${{ steps.snapshot.outputs.target_url }}"

          # Debug output to prevent silent failures
          puts "=== E2E DEPLOYMENT CHECK ==="
          puts "Event Name: #{event_name}"
          puts "Event State: #{event_state}"
          puts "Environment: #{environment_val}"
          puts "Target URL: #{target_url}"
          puts "================================"

          result =
            if event_name == "deployment_status" && event_state == "success"
              if (environment_val.include?("Preview / liam-app")) && target_url.include?("liam-app")
                puts "‚úÖ MATCH: Preview liam-app deployment"
                "should_run=true"
              elsif (environment_val.include?("Preview / liam-erd-sample")) && target_url.include?("liam-erd-sample")
                puts "‚úÖ MATCH: Preview liam-erd-sample deployment"
                "should_run=true"
              elsif environment_val.include?("Production") && target_url.include?("liam-app-git-main")
                puts "‚úÖ MATCH: Production liam-app deployment"
                "should_run=true"
              else
                puts "‚ùå NO MATCH: Environment='#{environment_val}', URL='#{target_url}'"
                puts "   Expected: Preview/liam-app, Preview/liam-erd-sample, or Production with liam-app-git-main"
                "should_run=false"
              end
            else
              puts "‚ùå INVALID EVENT: Name='#{event_name}', State='#{event_state}'"
              puts "   Expected: deployment_status event with success state"
              "should_run=false"
            end

          puts "Final Result: #{result}"
          puts "================================"

          output_file = ENV.fetch("GITHUB_OUTPUT")
          File.open(output_file, "a") do |file|
            file.puts result
          end

      - name: E2E Test Decision
        run: |
          echo "üîç E2E TEST DECISION ANALYSIS"
          echo "================================"
          echo "Event Name: ${{ github.event_name }}"
          echo "Event State: ${{ github.event.deployment_status.state }}"
          echo "Environment: ${{ github.event.deployment.environment }}"
          echo "Target URL: ${{ github.event.deployment_status.target_url }}"
          echo "Should Run: ${{ steps.check.outputs.should_run }}"
          echo "================================"

          if [ "${{ steps.check.outputs.should_run }}" = "true" ]; then
            echo "‚úÖ E2E TESTS WILL RUN"
            echo "   This deployment matches E2E test criteria"
          else
            echo "‚ùå E2E TESTS WILL NOT RUN"
            echo "   This deployment does not match E2E test criteria"
            echo "   Expected environments:"
            echo "   - Preview / liam-app"
            echo "   - Preview / liam-erd-sample" 
            echo "   - Production (with liam-app-git-main URL)"
          fi
          echo "================================"

      - name: Setup pnpm
        if: steps.check.outputs.should_run == 'true'
        uses: ./.github/actions/pnpm-setup

      - name: Cache Playwright browsers
        if: steps.check.outputs.should_run == 'true'
        id: playwright-cache
        uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
        with:
          path: ~/.cache/ms-playwright
          key: playwright-${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml', '**/playwright.config.ts') }}
          restore-keys: |
            playwright-${{ runner.os }}-

      - name: Install Playwright browsers
        if: ${{ steps.check.outputs.should_run == 'true' && steps.playwright-cache.outputs.cache-hit != 'true' }}
        run: pnpm exec playwright install --with-deps

      - name: Install system dependencies for WebKit
        if: ${{ steps.check.outputs.should_run == 'true' && steps.playwright-cache.outputs.cache-hit == 'true' }}
        run: pnpm exec playwright install-deps webkit

      - name: Run e2e tests
        if: steps.check.outputs.should_run == 'true'
        run: pnpm exec playwright test --project="${{ matrix.browser }}"
        env:
          URL: ${{ env.URL }}

      - name: Upload test results
        if: ${{ steps.check.outputs.should_run == 'true' && failure() }}
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: test-results-${{ matrix.browser }}-${{ github.run_id }}-${{ github.job }}
          path: frontend/internal-packages/e2e/test-results/
          retention-days: 30

      - name: Post E2E status manually (with gh)
        if: steps.check.outputs.should_run == 'true' && always()
        run: |
          STATE="${{ job.status }}"
          CONTEXT="E2E Tests / e2e-tests (${{ matrix.browser }})"
          gh api repos/${{ github.repository }}/statuses/${{ steps.snapshot.outputs.sha }} \
            --method POST \
            --field state="${STATE}" \
            --field context="${CONTEXT}" \
            --field description="E2E test result for ${{ matrix.browser }}: (${STATE})" \
            --field target_url="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: E2E Test Completion Summary
        if: always()
        run: |
          echo "üéØ E2E TEST COMPLETION SUMMARY"
          echo "================================"
          echo "Job Status: ${{ job.status }}"
          echo "Should Run: ${{ steps.check.outputs.should_run }}"
          echo "Target URL: ${{ github.event.deployment_status.target_url }}"
          echo "Environment: ${{ github.event.deployment.environment }}"
          echo "================================"

          if [ "${{ steps.check.outputs.should_run }}" = "true" ]; then
            if [ "${{ job.status }}" = "success" ]; then
              echo "‚úÖ E2E TESTS COMPLETED SUCCESSFULLY"
            elif [ "${{ job.status }}" = "failure" ]; then
              echo "‚ùå E2E TESTS FAILED"
              echo "   Check the logs above for test failures"
            else
              echo "‚ö†Ô∏è  E2E TESTS COMPLETED WITH UNKNOWN STATUS: ${{ job.status }}"
            fi
          else
            echo "‚è≠Ô∏è  E2E TESTS SKIPPED (as expected)"
            echo "   This deployment does not require E2E testing"
          fi
          echo "================================"
