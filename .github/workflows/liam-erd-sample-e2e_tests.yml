name: E2E Tests for liam-erd-sample

on:
  deployment_status:

concurrency:
  group: liam-erd-sample-e2e-tests
  cancel-in-progress: false

jobs:
  liam-erd-sample-e2e-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    strategy:
      matrix:
        browser: [chromium, 'Mobile Safari']
      fail-fast: false
    permissions:
      contents: read
      statuses: write
    defaults:
      run:
        working-directory: 'frontend/internal-packages/e2e'
    env:
      CI: true
      URL: ${{ github.event.deployment_status.target_url }} => ${{ env.FIXED_TARGET_URL }}
      ENVIRONMENT: ${{ github.event.deployment.environment }} => ${{ env.FIXED_ENVIRONMENT_VAL }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          ref: ${{ github.event.deployment.sha }}
          persist-credentials: false

      - name: Check deployment conditions
        id: check
        shell: ruby {0}
        working-directory: ${{ github.workspace }}
        run: |
          event_name      = "${{ github.event_name }} => ${{ env.FIXED_EVENT_NAME }}"
          event_state     = "${{ github.event.deployment_status.state }} => ${{ env.FIXED_EVENT_STATE }}"
          environment_val = "${{ github.event.deployment.environment }} => ${{ env.FIXED_ENVIRONMENT_VAL }}"
          target_url      = "${{ github.event.deployment_status.target_url }} => ${{ env.FIXED_TARGET_URL }}"

          File.open(ENV.fetch("GITHUB_ENV"), "a") do |file|
            file.puts "FIXED_EVENT_NAME=#{event_name}"
            file.puts "FIXED_EVENT_STATE=#{event_state}"
            file.puts "FIXED_ENVIRONMENT=#{environment_val}"
            file.puts "FIXED_TARGET_URL=#{target_url}"
          end

          result =
            if event_name == "deployment_status" && event_state == "success"
              # Primary check: URL contains liam-erd-sample
              if target_url.include?("liam-erd-sample")
                "should_run=true"
              # Fallback check: Environment contains liam-erd-sample (in case URL is wrong)
              elsif environment_val.include?("liam-erd-sample")
                "should_run=true"
              # Additional check: Preview environment but not other apps
              elsif environment_val.include?("Preview") && 
                    !target_url.include?("liam-app") && 
                    !target_url.include?("liam-docs") && 
                    !target_url.include?("liam-storybook")
                "should_run=true"
              else
                "should_run=false"
              end
            else
              "should_run=false"
            end

          # Debug output
          puts "Event Name: #{event_name}"
          puts "Event State: #{event_state}"
          puts "Environment: #{environment_val}"
          puts "Target URL: #{target_url}"
          puts "Should Run: #{result}"

          # Same as 'echo "should_run=xxxx" >> $GITHUB_OUTPUT'
          if result == "should_run=true"
            output_file = ENV.fetch("GITHUB_OUTPUT")
            File.open(output_file, "a") do |file|
              file.puts result
            end

          if target_url.include?("liam-erd-sample")
            output_file = ENV.fetch("GITHUB_ENV")
            File.open(output_file, "a") do |file|
              file.puts "FIXED_EVENT_NAME=#{event_name}"
              file.puts "FIXED_EVENT_STATE=#{event_state}"
              file.puts "FIXED_ENVIRONMENT_VAL=#{environment_val}"
              file.puts "FIXED_TARGET_URL=#{target_url}"
            end

      - name: Setup pnpm
        if: steps.check.outputs.should_run == 'true'
        uses: ./.github/actions/pnpm-setup

      - name: Cache Playwright browsers
        if: steps.check.outputs.should_run == 'true'
        id: playwright-cache
        uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
        with:
          path: ~/.cache/ms-playwright
          key: playwright-${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml', '**/playwright.config.ts') }}
          restore-keys: |
            playwright-${{ runner.os }}-

      - name: Install Playwright browsers
        if: ${{ steps.check.outputs.should_run == 'true' && steps.playwright-cache.outputs.cache-hit != 'true' }}
        run: pnpm exec playwright install --with-deps

      - name: Install system dependencies for WebKit
        # Some WebKit dependencies seem to lay outside the cache and will need to be installed separately
        if: ${{ steps.check.outputs.should_run == 'true' && steps.playwright-cache.outputs.cache-hit == 'true' }}
        run: pnpm exec playwright install-deps webkit

      # This workflow is triggered for all deployments (liam-app, liam-erd-sample, liam-docs),
      # but E2E tests are executed only for liam-app deployments now.
      - name: Run e2e tests
        if: steps.check.outputs.should_run == 'true'
        run: pnpm exec playwright test --project="${{ matrix.browser }}"
        env:
          URL: ${{ env.FIXED_TARGET_URL }}
          ENVIRONMENT: ${{ env.FIXED_ENVIRONMENT }}

      # FIXME: This step is not working well. All environments seem to be Preview.
      - name: Upload test results
        if: ${{ steps.check.outputs.should_run == 'true' && failure() }}
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: test-results-${{ matrix.browser }}-${{ github.run_id }}-${{ github.job }}
          path: frontend/internal-packages/e2e/test-results/
          retention-days: 30

      - name: Post E2E status manually (with gh)
        if: steps.check.outputs.should_run == 'true' && always()
        run: |
          STATE="${{ job.status }}"
          CONTEXT="E2E Tests / e2e-tests (${{ matrix.browser }})"
          gh api repos/${{ github.repository }}/statuses/${{ github.sha }} \
            --method POST \
            --field state="${STATE}" \
            --field context="${CONTEXT}" \
            --field description="E2E test result for ${{ matrix.browser }}: (${STATE})" \
            --field target_url="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
