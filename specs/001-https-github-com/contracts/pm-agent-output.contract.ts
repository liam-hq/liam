/**
 * PM Agent Output Contract
 *
 * Defines the expected output structure from PM agent when generating requirements.
 * This contract validates that PM agent produces the new requirements schema.
 */

import * as v from 'valibot';

/**
 * Testcase Type Enum
 * Valid SQL operation types for test cases
 */
export const testcaseType = v.picklist(['INSERT', 'UPDATE', 'DELETE', 'SELECT']);

/**
 * Test Result Schema
 * Test execution result populated by test execution tool
 */
export const testResultSchema = v.object({
  executedAt: v.pipe(v.string(), v.isoDateTime()),
  success: v.boolean(),
  resultSummary: v.string(),
});

/**
 * Testcase Schema (Complete)
 * Full testcase structure with all required fields
 */
export const testcaseSchema = v.object({
  title: v.pipe(
    v.string(),
    v.minLength(1, 'Testcase title must not be empty')
  ),
  type: testcaseType,
  sql: v.pipe(
    v.string(),
    v.minLength(1, 'SQL must not be empty')
  ),
  testResults: v.optional(testResultSchema),
});

/**
 * PM Agent Testcase Schema (without SQL)
 * Used for PM agent tool input - excludes sql field that will be generated by QA agent
 */
export const pmAgentTestcaseSchema = v.omit(testcaseSchema, ['sql', 'testResults']);

/**
 * Requirements Schema (Complete)
 * Complete requirements structure with goal and testcases (including SQL)
 */
export const requirementsSchema = v.object({
  goal: v.pipe(
    v.string(),
    v.minLength(1, 'Goal must not be empty')
  ),
  testcases: v.array(testcaseSchema),
});

/**
 * PM Agent Requirements Schema (without SQL in testcases)
 * Used for PM agent tool output - testcases exclude sql field
 */
export const pmAgentRequirementsSchema = v.object({
  goal: v.pipe(
    v.string(),
    v.minLength(1, 'Goal must not be empty')
  ),
  testcases: v.array(pmAgentTestcaseSchema),
});

/**
 * PM Agent Output Schema
 * The complete output from PM agent including requirements (without SQL)
 */
export const pmAgentOutputSchema = v.object({
  requirements: pmAgentRequirementsSchema,
  // Other fields may be present in agent output
});

// Type exports for TypeScript usage
export type TestcaseType = v.InferOutput<typeof testcaseType>;
export type TestResult = v.InferOutput<typeof testResultSchema>;
export type Testcase = v.InferOutput<typeof testcaseSchema>;
export type PMAgentTestcase = v.InferOutput<typeof pmAgentTestcaseSchema>;
export type Requirements = v.InferOutput<typeof requirementsSchema>;
export type PMAgentRequirements = v.InferOutput<typeof pmAgentRequirementsSchema>;
export type PMAgentOutput = v.InferOutput<typeof pmAgentOutputSchema>;

/**
 * Validation function for PM agent output (without SQL)
 */
export function validatePMAgentOutput(output: unknown): PMAgentOutput {
  return v.parse(pmAgentOutputSchema, output);
}

/**
 * Validation function for complete requirements (with SQL)
 */
export function validateRequirements(requirements: unknown): Requirements {
  return v.parse(requirementsSchema, requirements);
}

/**
 * Validation function for PM agent requirements (without SQL)
 */
export function validatePMAgentRequirements(requirements: unknown): PMAgentRequirements {
  return v.parse(pmAgentRequirementsSchema, requirements);
}
